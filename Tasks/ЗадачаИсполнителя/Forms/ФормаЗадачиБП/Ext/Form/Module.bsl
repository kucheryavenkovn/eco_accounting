///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализацияФормы();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполнитьСписокВыбораЭлементаВремяНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	БизнесПроцессыИЗадачиКлиент.ФормаЗадачиОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МнеНаКонтролеПриИзменении(Элемент)
	
	МнеНаКонтролеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	Объект.Исполнитель = Исполнитель;
	МнеНаКонтроле = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ВажностьПриИзменении(Элемент)
	
	ИзменитьВажностьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИсполненияПриИзменении(Элемент)
	
	УстановитьСрокИсполнения();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВремяПриИзменении(Элемент)
	
	УстановитьСрокИсполнения(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Время) Тогда
		Объект.СрокИсполнения = НачалоДня(Объект.СрокИсполнения) + Час(Время)*60*60 + Минута(Время)*60;
	Иначе
		Объект.СрокИсполнения = НачалоДня(Объект.СрокИсполнения);
	КонецЕсли;
	
	УстановитьВремя = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияВыполненияНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура("РезультатВыполнения", Объект.РезультатВыполнения);
	ОткрытьФорму("Задача.ЗадачаИсполнителя.Форма.ИсторияВыполненияБП", ПараметрыФормы, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрытьВыполнить(Команда)
	
	ЗаписатьНаСервере();
	ПараметрыОповещения = Новый Структура;
	Оповестить("Запись_ЗадачаИсполнителя", ПараметрыОповещения, Объект.Ссылка);
	ОповеститьОбИзменении(Объект.Ссылка);
	ЭтотОбъект.Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнициализацияФормы()
	
	Если Объект.Ссылка = Задачи.ЗадачаИсполнителя.ПустаяСсылка() Тогда
		Объект.СтатусЗадачи        = Перечисления.СтатусЗадачи.НеВыполнена;
		Объект.СрокИсполнения      = КонецДня(ТекущаяДата());
	КонецЕсли;
	
	ВысокаяВажность = Объект.Важность = Перечисления.ВариантыВажностиЗадачи.Высокая;
	
	Исполнитель = ?(Объект.Исполнитель = Пользователи.АвторизованныйПользователь(), Справочники.Пользователи.ПустаяСсылка(), Объект.Исполнитель);
	
	МнеНаКонтроле = ?(Объект.Исполнитель = Пользователи.АвторизованныйПользователь(), 0, 1);
	
	Время = ?(Объект.СрокИсполнения = КонецДня(Объект.СрокИсполнения), "01010001000000", Объект.СрокИсполнения);
	
	УстановитьВремя = ?(Объект.СрокИсполнения = КонецДня(Объект.СрокИсполнения), 0, 1);
	
	// В качестве исполнителя задачи мы можем выбирать только пользователя.
	Элементы.Исполнитель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЗадачу(Команда)
	
	ЗаписатьНаСервере();
	ПараметрыОповещения = Новый Структура;
	Оповестить("Запись_ЗадачаИсполнителя", ПараметрыОповещения, Объект.Ссылка);
	ОповеститьОбИзменении(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаСервере()
	
	ЗаполнитьСозданиеЗадачиВИсториюВыполнения();
	ЗаполнитьНаправлениеЗадачиВИсториюВыполнения();
	ЗаполнитьСтатусЗадачиВИсториюВыполнения();
	
	ЭтотОбъект.Записать();
	ЭтотОбъект.Прочитать();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаправлениеЗадачиВИсториюВыполнения()
	
	ЗадачаДоИзменений = ЗадачаДоИзменений();
	ИсполнительДоИзменений = ЗадачаДоИзменений.Исполнитель;
	
	Если ИсполнительДоИзменений = Объект.Исполнитель Тогда
		Возврат;
	КонецЕсли;
	
	МассивПодстрок = Новый Массив;
	МассивПодстрок.Добавить("Пользователь");
	МассивПодстрок.Добавить(Строка(Пользователи.АвторизованныйПользователь()));
	МассивПодстрок.Добавить("направил");
	МассивПодстрок.Добавить("задачу");
	МассивПодстрок.Добавить("исполнителю");
	МассивПодстрок.Добавить(Строка(Объект.Исполнитель));
	МассивПодстрок.Добавить(Строка(ТекущаяДата()));
	МассивПодстрок.Добавить(Символы.ПС);
	МассивПодстрок.Добавить(Символы.ПС);
	
	Объект.РезультатВыполнения = СтрСоединить(МассивПодстрок, " ") + Объект.РезультатВыполнения;
	
КонецПроцедуры

&НаСервере
Функция ЗадачаДоИзменений()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
	|	ЗадачаИсполнителя.Исполнитель КАК Исполнитель,
	|	ЗадачаИсполнителя.СтатусЗадачи КАК СтатусЗадачи
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗадачаДоИзменений = Выборка;
	Иначе
		ЗадачаДоИзменений = Объект;
	КонецЕсли;
	
	Возврат ЗадачаДоИзменений;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСозданиеЗадачиВИсториюВыполнения()
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	МассивПодстрок = Новый Массив;
	МассивПодстрок.Добавить("Пользователь");
	МассивПодстрок.Добавить(Строка(Пользователи.АвторизованныйПользователь()));
	МассивПодстрок.Добавить("создал");
	МассивПодстрок.Добавить("задачу");
	МассивПодстрок.Добавить(Строка(ТекущаяДата()));
	МассивПодстрок.Добавить(Символы.ПС);
	МассивПодстрок.Добавить(Символы.ПС);
	
	Объект.РезультатВыполнения = СтрСоединить(МассивПодстрок, " ") + Объект.РезультатВыполнения;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусЗадачиВИсториюВыполнения()
	
	ЗадачаДоИзменений = ЗадачаДоИзменений();
	СтатусЗадачиДоИзменений = ЗадачаДоИзменений.СтатусЗадачи;
	
	Если СтатусЗадачиДоИзменений = Объект.СтатусЗадачи Тогда
		Возврат;
	КонецЕсли;
	
	МассивПодстрок = Новый Массив;
	МассивПодстрок.Добавить("Пользователь");
	МассивПодстрок.Добавить(Строка(Пользователи.АвторизованныйПользователь()));
	МассивПодстрок.Добавить("изменил");
	МассивПодстрок.Добавить("статус");
	МассивПодстрок.Добавить("задачи");
	МассивПодстрок.Добавить("на");
	МассивПодстрок.Добавить(Строка(Объект.СтатусЗадачи));
	МассивПодстрок.Добавить(Строка(ТекущаяДата()));
	МассивПодстрок.Добавить(Символы.ПС);
	МассивПодстрок.Добавить(Символы.ПС);
	
	Объект.РезультатВыполнения = СтрСоединить(МассивПодстрок, " ") + Объект.РезультатВыполнения;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораЭлементаВремяНаСервере()
	
	Элементы.Время.СписокВыбора.Очистить();
	
	НачалоРабочегоДня = НачалоДня(Объект.СрокИсполнения) + 8 * 60 * 60; // 8 часов дня
	КонецРабочегоДня  = НачалоДня(Объект.СрокИсполнения) + 19 * 60 * 60; // 19 часов дня
	
	ВремяДляВывода = НачалоРабочегоДня;
	Пока ВремяДляВывода <= КонецРабочегоДня Цикл
		Элементы.Время.СписокВыбора.Добавить(ВремяДляВывода, Формат(ВремяДляВывода, "ДФ=HH:mm"));
		ВРемяДляВывода = ВремяДляВывода + 30 * 60;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ЗадачаИсполнителя", ПараметрыЗаписи, Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура МнеНаКонтролеПриИзмененииНаСервере()
	
	Если МнеНаКонтроле = 0 Тогда
		Исполнитель = Справочники.Пользователи.ПустаяСсылка();
		Объект.Исполнитель = Пользователи.АвторизованныйПользователь();
	Иначе
		Объект.Исполнитель = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВажностьНаСервере()
	
	Если ВысокаяВажность Тогда
		Объект.Важность = Перечисления.ВариантыВажностиЗадачи.Высокая;
	Иначе
		Объект.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ЗначениеЗаполнено(Объект.Исполнитель) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Исполнитель'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Исполнитель",, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСрокИсполнения(ДоПолудня = Ложь);
	
	Если УстановитьВремя Тогда
		Время = ?(ДоПолудня = Истина, Дата("01.01.0001 12:00:00"), Время);
		Объект.СрокИсполнения = НачалоДня(Объект.СрокИсполнения) + Час(Время)*60*60 + Минута(Время)*60;
	Иначе
		Время = Дата("01.01.0001 00:00:00");
		Объект.СрокИсполнения = КонецДня(Объект.СрокИсполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
