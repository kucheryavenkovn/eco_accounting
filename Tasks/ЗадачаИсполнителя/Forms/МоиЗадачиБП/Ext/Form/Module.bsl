///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	ОтборСтатусЗадачи = Перечисления.СтатусЗадачи.НеВыполнена;
	
	МнеОтМеняВсе = КодЗадачиМне();
	
	ПоАвтору = Пользователи.АвторизованныйПользователь();
	
	ПриИзмененииОтбораВШапке();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ЗадачаИсполнителя" Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПерехода(ОбъектПерехода, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ОбъектПерехода) Или ОбъектПерехода = Элементы.Список.ТекущаяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	ОтборСтатусЗадачи = ПредопределенноеЗначение("Перечисление.СтатусЗадачи.НеВыполнена");
	УстановитьОтбор();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МнеОтМеняВсеПриИзменении(Элемент)
	
	ПриИзмененииОтбораВШапке();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатусЗадачиПриИзменении(Элемент)
	
	ПриИзмененииОтбораВШапке();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаУстановитьСтатусВыполнена(Команда)
	
	УстановитьСтатусЗадачиНаКлиенте(ПредопределенноеЗначение("Перечисление.СтатусЗадачи.Выполнена"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтатусНеВыполнена(Команда)
	
	УстановитьСтатусЗадачиНаКлиенте(ПредопределенноеЗначение("Перечисление.СтатусЗадачи.НеВыполнена"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтатусОтменена(Команда)
	
	УстановитьСтатусЗадачиНаКлиенте(ПредопределенноеЗначение("Перечисление.СтатусЗадачи.Отменена"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьОтбор()
	
	ПараметрыОтбора = Новый Соответствие();
	ПараметрыОтбора.Вставить("Пользователь", Пользователи.АвторизованныйПользователь());
	ПараметрыОтбора.Вставить("СтатусЗадачи", ОтборСтатусЗадачи);
	ПараметрыОтбора.Вставить("МнеОтМеняВсе", МнеОтМеняВсе);
	УстановитьОтборСписка(Список, ПараметрыОтбора);
	ОбновитьСписокЗадачНаСервере();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьОтборСписка(Список, ПараметрыОтбора)
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, "Выполнена");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, "Автор");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, "СтатусЗадачи");
	
	Список.Параметры.УстановитьЗначениеПараметра("Пользователь", ПараметрыОтбора["Пользователь"]);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "МоиЗадачи", Истина);
	
	Если ЗначениеЗаполнено(ПараметрыОтбора["СтатусЗадачи"]) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список, "СтатусЗадачи", ПараметрыОтбора["СтатусЗадачи"],,,);
	КонецЕсли;
	
	Если ПараметрыОтбора["МнеОтМеняВсе"] = КодЗадачиМне() Тогда // мне
		Список.Параметры.УстановитьЗначениеПараметра("ВыбранныйИсполнитель", ПараметрыОтбора["Пользователь"]);
	ИначеЕсли ПараметрыОтбора["МнеОтМеняВсе"] = КодЗадачиОтМеня() Тогда // от меня
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "Автор", ПараметрыОтбора["Пользователь"],,,);
		Список.Параметры.УстановитьЗначениеПараметра("ВыбранныйИсполнитель", NULL);
	ИначеЕсли ПараметрыОтбора["МнеОтМеняВсе"] = КодЗадачиВсе() Тогда // все
		Список.Параметры.УстановитьЗначениеПараметра("ВыбранныйИсполнитель", NULL);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УстановитьОформлениеЗадач(Список);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеЗадач(Знач СписокЗадачИлиЕгоУсловноеОформление) 
	
	УсловноеОформлениеСпискаЗадач = СписокЗадачИлиЕгоУсловноеОформление.КомпоновщикНастроек.Настройки.УсловноеОформление;
	УсловноеОформлениеСпискаЗадач.ИдентификаторПользовательскойНастройки = "ОсновноеОформление";
	
	// Установка оформления для просроченных задач.
	ЭлементУсловногоОформления = УсловноеОформлениеСпискаЗадач.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СрокИсполнения");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбораДанных.ПравоеЗначение = ТекущаяДатаСеанса();
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатусЗадачи");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Перечисления.СтатусЗадачи.НеВыполнена;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветФона");
	ЭлементЦветаОформления.Значение =  Метаданные.ЭлементыСтиля.ЦветФонаНекорректногоКонтрагента.Значение;
	ЭлементЦветаОформления.Использование = Истина;
	
	// Установка оформления для Важных задач.
	ЭлементУсловногоОформления = УсловноеОформлениеСпискаЗадач.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Важность");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Перечисления.ВариантыВажностиЗадачи.Высокая;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатусЗадачи");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Перечисления.СтатусЗадачи.НеВыполнена;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Шрифт");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.НеПринятыеКИсполнениюЗадачи.Значение; 
	ЭлементЦветаОформления.Использование = Истина;
	
	// Установка оформления для задач на сегодня.
	ЭлементУсловногоОформления = УсловноеОформлениеСпискаЗадач.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы  = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СрокИсполнения");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ЭлементОтбора.ПравоеЗначение = КонецДня(ТекущаяДатаСеанса());
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СрокИсполнения");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбора.ПравоеЗначение = ТекущаяДатаСеанса();
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатусЗадачи");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Перечисления.СтатусЗадачи.НеВыполнена;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветФона");
	ЭлементЦветаОформления.Значение =  Метаданные.ЭлементыСтиля.ЦветФонаКорректныхКонтрагентов.Значение;
	ЭлементЦветаОформления.Использование = Истина;
	
	// Установка оформления для незаполненного поля "Срок".
	ЭлементУсловногоОформления = УсловноеОформлениеСпискаЗадач.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СрокИсполнения");
	ОформляемоеПоле.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СрокИсполнения");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
	ЭлементЦветаОформления.Значение = НСтр("ru = 'Срок не указан'");
	ЭлементЦветаОформления.Использование = Истина;
	
	// Установка оформления для незаполненного поля "Время".
	ЭлементУсловногоОформления = УсловноеОформлениеСпискаЗадач.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Время");
	ОформляемоеПоле.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПоказыватьВремя");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
	ЭлементЦветаОформления.Значение = НСтр("ru = ''");
	ЭлементЦветаОформления.Использование = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокЗадачНаСервере()
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОтбораВШапке()
	
	Элементы.Исполнитель.Видимость = МнеОтМеняВсе <> КодЗадачиМне();
	Элементы.Автор.Видимость       = МнеОтМеняВсе <> КодЗадачиОтМеня();
	
	Элементы.КомандаУстановитьСтатусОтменена.Видимость    = ОтборСтатусЗадачи <> Перечисления.СтатусЗадачи.Отменена;
	Элементы.КомандаУстановитьСтатусВыполнена.Видимость   = ОтборСтатусЗадачи <> Перечисления.СтатусЗадачи.Выполнена;
	Элементы.КомандаУстановитьСтатусНеВыполнена.Видимость = ОтборСтатусЗадачи <> Перечисления.СтатусЗадачи.НеВыполнена;
	
	УстановитьОтбор();
	ОбновитьСписокЗадачНаСервере();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьСтатусЗадачи(ЗадачиДляИзменения, СтатусЗадачи)
	
	Для Каждого Задача Из ЗадачиДляИзменения Цикл
		ЗадачаОбъект = Задача.ПолучитьОбъект();
		ЗадачаОбъект.СтатусЗадачи = СтатусЗадачи;
		ЗадачаОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСтатусЗадачиВИсториюВыполнения(ЗадачиДляИзменения, СтатусЗадачи)
	
	Для Каждого Задача Из ЗадачиДляИзменения Цикл
		
		ЗадачаОбъект = Задача.ПолучитьОбъект();
		
		МассивПодстрок = Новый Массив;
		МассивПодстрок.Добавить("Пользователь");
		МассивПодстрок.Добавить(Строка(Пользователи.АвторизованныйПользователь()));
		МассивПодстрок.Добавить("изменил");
		МассивПодстрок.Добавить("статус");
		МассивПодстрок.Добавить("задачи");
		МассивПодстрок.Добавить("на");
		МассивПодстрок.Добавить(Строка(СтатусЗадачи));
		МассивПодстрок.Добавить(Строка(ТекущаяДата()));
		МассивПодстрок.Добавить(Символы.ПС);
		МассивПодстрок.Добавить(Символы.ПС);
		
		ЗадачаОбъект.РезультатВыполнения = СтрСоединить(МассивПодстрок, " ") + ЗадачаОбъект.РезультатВыполнения;
		ЗадачаОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЗадачиНаКлиенте(СтатусЗадачи)
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	
	УстановитьСтатусЗадачи(ВыделенныеСтроки, СтатусЗадачи);
	
	ЗаполнитьСтатусЗадачиВИсториюВыполнения(ВыделенныеСтроки, СтатусЗадачи);
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		ОповеститьОбИзменении(ВыделеннаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КодЗадачиМне()
	Возврат 0;
КонецФункции

&НаСервереБезКонтекста
Функция КодЗадачиОтМеня()
	Возврат 1;
КонецФункции

&НаСервереБезКонтекста
Функция КодЗадачиВсе()
	Возврат 2;
КонецФункции

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	Оповестить("Запись_ЗадачаИсполнителя", ПараметрыОповещения, Элемент.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

#КонецОбласти
