
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		// Форма доступна только полноправному пользователю, это не штатное открытие формы.
		Отказ = Истина;
		Возврат;
	ИначеЕсли Не ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.БазоваяФункциональностьБИП") Тогда
		// Вариант автоматического подключения к сервису недоступен.
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЭтоАвтономноеРабочееМесто = ОбщегоНазначения.ЭтоАвтономноеРабочееМесто();
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
		
	ЦветСтиляПоясняющийОшибкуТекст 	= ЦветаСтиля.ПоясняющийОшибкуТекст;
	ЦветСтиляТекстаПоля 			= ЦветаСтиля.ЦветТекстаПоля;
	ЦветСтиляПоясняющийТекст 		= ЦветаСтиля.ПоясняющийТекст;
	ЦветСтиляИнформационнойНадписи  = ЦветаСтиля.ТекстИнформационнойНадписи;
	
	ВыполнитьНачальноеЗаполнение();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ТребуетсяОбновитьИнтерфейс Тогда
		ОбновитьИнтерфейс();
	КонецЕсли;
	ПриНачалеЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ФизическиеЛица" И Источник = Ответственный Тогда
		ЗаполнитьРеквизитыОтветственного(Ответственный, Логин, ЭлектроннаяПочта, МобильныйТелефон, Пол);
		ОбновитьЭУОтветственный(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИмяДоменаПриИзменении(Элемент)
	
	ПроверитьИмяДомена();
	Если ИмяДоменаСоответствуетПравилам И Не ПустаяСтрока(ИмяДомена) Тогда
		ИмяДоменаЗарезервировано = Ложь;
		Элементы.ДекорацияИмяДоменаПояснение.Заголовок  = НСтр("ru = 'Выполняется проверка уникальности адреса. Пожалуйста подождите ...'");
		НачатьРезервированиеИмениДомена();
		ПриНачалеЗадания();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяДоменаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	ПроверитьИмяДомена(Текст);
КонецПроцедуры

&НаКлиенте
Процедура АбонентИнтернетПоддержкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка 		= Ложь;
	ИдентификаторАбонента 		= ВыбранноеЗначение;
	АбонентИнтернетПоддержки 	= Элементы.АбонентИнтернетПоддержки.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	ЗаполнитьРеквизитыОтветственного(Ответственный, Логин, ЭлектроннаяПочта, МобильныйТелефон, Пол);
	ОбновитьЭУОтветственный(ЭтаФорма);
	
КонецПроцедуры

#Область РедактированиеМесяцаСтрокой

&НаКлиенте
Процедура МесяцПубликацииПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "МесяцПубликации", "МесяцПубликацииСтрокой");
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцПубликацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "МесяцПубликации", "МесяцПубликацииСтрокой", Направление);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцПубликацииАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцПубликацииОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцПубликацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "МесяцПубликации", "МесяцПубликацииСтрокой", Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодробноОСервисе(Команда)
	
	КабинетСотрудникаКлиент.ОткрытьНавигационнуюСсылкуПодробноОСервисе();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержку(Команда)
	
	ПодключитьИнтернетПоддержкуПользователей();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключить(Команда)
	
	Если ПодключениеДоступно() Тогда
		НачатьПодключениеКСервису();
		ПриНачалеЗадания();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПубликации(Команда)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбновитьИнформациюПодключения", ЭтотОбъект);
	ПараметрыНастроекПубликации = Новый Структура("РежимПодключения", Не СервисПодключен);
	Если СервисПодключен Тогда
		ОткрытьФорму("ОбщаяФорма.НастройкаПубликацииКабинетСотрудника",
			ПараметрыНастроекПубликации,ЭтаФорма,,,,ОповещениеОЗакрытии);
	Иначе
		ОткрытьФорму("ОбщаяФорма.НастройкаПубликацииКабинетСотрудника",
			ПараметрыНастроекПубликации,ЭтаФорма,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееОДоступеКДанным(Команда)
	
	КабинетСотрудникаКлиент.ОткрытьНавигационнуюСсылкуОписаниеДоступаКДанным();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееОПоддерживаемыхБраузерах(Команда)
	
	КабинетСотрудникаКлиент.ОткрытьНавигационнуюСсылкуПоддерживаемыеБраузеры();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДанныеСервиса(Команда)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ИзменитьДанныеСервисаЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ИзменитьНастройкиСервиса",
		,ЭтаФорма,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпубликоватьРасчетныеЛистки(Команда)
	
	РезультатПубликации = ОпубликоватьРасчетныеЛисткиНаСервере();
	Если ЗначениеЗаполнено(РезультатПубликации) Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		ПараметрыОжидания.ОповещениеПользователя.Показать = Истина;
		ПараметрыОжидания.ОповещениеПользователя.Текст = НСтр("ru = 'Выгрузка прошла успешно.'");
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершитьНаКлиентеПубликациюРасчетныхЛистков", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатПубликации, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПубликацииРасчетныхЛистков(Команда)
	
	ОткрытьФорму("ОбщаяФорма.ПубликацияРасчетныхЛистковКабинетСотрудника",
		,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПривязкуАбонента(Команда)
	
	Если Не ИнтернетПоддержкаПодключена Тогда
		ПодключитьИнтернетПоддержкуПользователей();
	Иначе
		ИзменитьАбонентаСервиса()
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПодключитьИнтернетПоддержкуПользователей()

	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.БазоваяФункциональностьБИП") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтернетПоддержкаПользователейКлиент");
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект);
		Модуль.ПодключитьИнтернетПоддержкуПользователей(ОповещениеОЗакрытии, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьАбонентаСервиса()

	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ИзменитьПривязкуАбонентаЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ИзменитьАбонентаСервиса",
		,ЭтаФорма,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	

КонецПроцедуры

&НаКлиенте
Процедура ОтключитьСервис(Команда)
	
	ШаблонТекстаВопроса = НСтр("ru = 'Отключить сервис 1С:Кабинет сотрудника по адресу %1 и удалить все его данные?'");
	ТекстВопроса = СтрШаблон(ШаблонТекстаВопроса, АдресПриложения);
	
	ОбработчикРезультата = Новый ОписаниеОповещения("ПриОтветеНаВопросОтключитьСервис", ЭтотОбъект);
	ПоказатьВопрос(ОбработчикРезультата, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОшибкиЗаполнения(Команда)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбновитьИнформациюПодключения", ЭтотОбъект);
	ПараметрыФормы = Новый Структура("ТолькоОшибкиЗаполнения", Истина);
	ОткрытьФорму("РегистрСведений.ФизическиеЛицаКабинетСотрудника.ФормаСписка",
		ПараметрыФормы,ЭтаФорма,ЭтаФорма,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетОшибокПубликации(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("КлючВарианта", "ОшибкиПубликации");
	ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина);
	ОткрытьФорму("Отчет.ОшибкиПубликацииКабинетСотрудника.Форма", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовоеПодключение(Команда)
	
	ПерейтиКНовомуПодключению();
	ПриНачалеЗадания();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиПолученияДанных

&НаСервере
Процедура ЗапуститьФоновоеЗадание(ИмяМетода, ИмяЗадания, ИмяДекорации, ПараметрыМетода = Неопределено, КлючФоновогоЗадания = "")
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
	ПараметрыВыполненияВФоне.ОжидатьЗавершение = 0;
	Если ЗначениеЗаполнено(КлючФоновогоЗадания) Тогда
		ПараметрыВыполненияВФоне.КлючФоновогоЗадания = КлючФоновогоЗадания;
	КонецЕсли;
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыМетода, ПараметрыВыполненияВФоне);
	
	НовоеЗадание = Новый Структура("Имя,ДлительнаяОперация,ИмяДекорации");
	НовоеЗадание.Имя = ИмяЗадания;
	НовоеЗадание.ДлительнаяОперация = РезультатВыполнения;
	НовоеЗадание.ИмяДекорации = ИмяДекорации;
	
	АктивноеЗадание = Новый ФиксированнаяСтруктура(НовоеЗадание);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			АктивноеЗадание.ИмяДекорации,
			"Видимость",
			Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриНачалеЗадания()
	
	Если ЗначениеЗаполнено(АктивноеЗадание) Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			АктивноеЗадание.ДлительнаяОперация,
			Новый ОписаниеОповещения("ПриЗавершенииЗадания", ЭтотОбъект, АктивноеЗадание.Имя),
			ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииЗадания(Результат, ИмяЗадания) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			АктивноеЗадание.ИмяДекорации,
			"Видимость",
			Ложь);
	
	АктивноеЗадание = Неопределено;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ТекстСообщения = НСтр("ru = 'При выполнении фонового задания возникла ошибка:'") + Символы.ПС + Результат.КраткоеПредставлениеОшибки;
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
		
	Если ИмяЗадания = "ДанныеПодключенияКСервису" Тогда
		СценарийПодключенияЗавершение(Результат.АдресРезультата);
	ИначеЕсли ИмяЗадания = "ЗарезервироватьИмяДомена" Тогда
		РезервированиеИмениДоменаЗавершение(Результат.АдресРезультата);
	ИначеЕсли ИмяЗадания = "НовоеПриложение" Тогда
		НовоеПриложениеЗавершение(Результат.АдресРезультата);
		Если ОтложенноеПодключениеКСервису Тогда
			Элементы.СтраницыНовоеПодключение.ТекущаяСтраница = Элементы.СтраницаОтложенноеПодключение;
			ПодключитьОбработчикОжидания("ОтложенноеОбновлениеИнтерфейса", 0.5, Истина);
		ИначеЕсли НачатоСозданиеПриложения Тогда
			ПодключитьОбработчикОжидания("ПроверкаСозданияПриложения", 10, Ложь);
		КонецЕсли;
	ИначеЕсли ИмяЗадания = "ПроверкаСозданияПриложения" Тогда
		ПроверкаСозданияПриложенияЗавершение(Результат.АдресРезультата);
		Если ПриложениеСоздано Тогда
			// отключаем обработчик ожидания проверки создания приложения
			ОтключитьОбработчикОжидания("ПроверкаСозданияПриложения");
			// Создаем информационную систему
			НачатьСозданиеИнформационнойСистемы();
			ПриНачалеЗадания();
		ИначеЕсли ПриложениеНеСоздано Тогда
			// Приложение не удалось создать.
			// Отключаем обработчик проверки создания приложения.
			ОтключитьОбработчикОжидания("ПроверкаСозданияПриложения");	
		КонецЕсли;
	ИначеЕсли ИмяЗадания = "СозданиеИнформационнойСистемы" Тогда
		СозданиеИнформационнойСистемыЗавершение(Результат.АдресРезультата);
		Если ИнформационнаяСистемаСоздана Тогда
			ПодключитьОбработчикОжидания("ОпубликоватьОтветственноеЛицо", 10, Истина);
		КонецЕсли;
	ИначеЕсли ИмяЗадания = "ПубликацияОтветственногоЛица" Тогда
		ПубликацияОтветственногоЛицаЗавершение(Результат.АдресРезультата);
		Если ОтветственноеЛицоОпубликовано Тогда
			ПодключитьОбработчикОжидания("СоздатьАдминистратораСервиса", 10, Истина);
		КонецЕсли;
	ИначеЕсли ИмяЗадания = "СозданиеАдминистратораСервиса" Тогда
		СозданиеАдминистратораСервисаЗавершение(Результат.АдресРезультата);
		Если ПодключениеВыполнено Тогда
			НачатьПубликациюДанных();
			ПодключитьОбработчикОжидания("ОтложенноеОбновлениеИнтерфейса", 0.5, Истина);
		КонецЕсли;
	ИначеЕсли ИмяЗадания = "ПолучениеИнформацииОСервисе" Тогда
		ПолучениеИнформацииОСервисеЗавершение(Результат.АдресРезультата);
	ИначеЕсли ИмяЗадания = "ОбновлениеСвойствПриложения" Тогда
		ОбновлениеСвойствПриложенияЗавершение(Результат.АдресРезультата);
	ИначеЕсли ИмяЗадания = "ИзменениеАбонентаИнтернетПоддержки" Тогда
		ИзменениеАбонентаИнтернетПоддержкиЗавершение(Результат.АдресРезультата);
	ИначеЕсли ИмяЗадания = "ОтключениеСервиса" Тогда
		ОтключениеСервисаЗавершение(Результат.АдресРезультата);
		ПодключитьОбработчикОжидания("ОтложенноеОбновлениеИнтерфейса", 0.5, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НачатьСценарийПодключения()
	
	ИмяЗадания 		= "ДанныеПодключенияКСервису";
	ИмяМетода 		= "КабинетСотрудникаМенеджерСервиса.ДанныеПодключенияКСервисуФоновоеЗадание";
	ИмяДекорации 	= "";
	ЗапуститьФоновоеЗадание(ИмяМетода, ИмяЗадания, ИмяДекорации);
	
КонецПроцедуры

&НаСервере
Процедура СценарийПодключенияЗавершение(АдресРезультата)
	
	Элементы.СтраницыНовоеПодключение.ТекущаяСтраница = Элементы.СтраницаПодключение;
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	// Результат проверки доступности сервиса интернет-поддержки.
	Если Результат.ИнтернетПоддержкаДоступна Или РазделениеВключено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ИнтернетПоддержка", "Видимость", Ложь);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ИнтернетПоддержка", "Видимость", Истина);
	КонецЕсли;
	
	Если Результат.СообщениеОбОшибке <> Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'При получении данных для подключения к сервису возникла ошибка:'") + Символы.ПС + Результат.СообщениеОбОшибке;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"НастройкиПодключения", "Доступность", Истина);
	
	Элементы.АбонентИнтернетПоддержки.СписокВыбора.Очистить();
	АбонентИнтернетПоддержки 	= "";
	ИдентификаторАбонента 		= "";
	
	// Результат.АбонентыИП - массив структур, возвращаемое значение метода
	// КабинетСотрудникаМенеджерСервиса.АбонентыИППользователяИП.
	Для каждого ЭлементМассива Из Результат.АбонентыИП Цикл
		Элементы.АбонентИнтернетПоддержки.СписокВыбора.Добавить(ЭлементМассива.Идентификатор, ЭлементМассива.Наименование);
	КонецЦикла;
	
	Если Элементы.АбонентИнтернетПоддержки.СписокВыбора.Количество() > 0 Тогда
		АбонентИнтернетПоддержки = Элементы.АбонентИнтернетПоддержки.СписокВыбора[0];
		ИдентификаторАбонента 	 = Элементы.АбонентИнтернетПоддержки.СписокВыбора[0].Значение;
	КонецЕсли;
	
	Если Элементы.АбонентИнтернетПоддержки.СписокВыбора.Количество() > 1 Тогда
		Элементы.АбонентИнтернетПоддержки.КнопкаВыпадающегоСписка = Истина;
		Элементы.ВыборАбонента.Видимость = Истина;
	Иначе
		Элементы.ВыборАбонента.Видимость = Ложь;
	КонецЕсли;
	
	ЗаполнитьИмяПриложения();
	ЗаполнитьОтветственного();
	
КонецПроцедуры

&НаСервере
Процедура НачатьРезервированиеИмениДомена()

	ИмяЗадания 		= "ЗарезервироватьИмяДомена";
	ИмяМетода 		= "КабинетСотрудникаМенеджерСервиса.ЗарезервироватьИмяДоменаФоновоеЗадание";
	ИмяДекорации 	= "ИндикаторДлительнойОперацииРезервированиеИмениДомена";
	
	ПараметрыМетода = Новый Структура("ИмяДомена,ИдентификаторВладельца", ИмяДомена, ИдентификаторАбонента);
	
	ЗапуститьФоновоеЗадание(ИмяМетода, ИмяЗадания, ИмяДекорации, ПараметрыМетода);

КонецПроцедуры

&НаСервере
Процедура РезервированиеИмениДоменаЗавершение(АдресРезультата)
	
	// Результат - структура, возвращаемое значение метода
	// КабинетСотрудникаМенеджерСервиса.ЗарезервироватьИмяДомена.
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.СообщениеОбОшибке <> Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'При проверке уникальности адреса сервиса возникла ошибка:'") + Символы.ПС + Результат.СообщениеОбОшибке;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ИмяДоменаЗарезервировано = Результат.Зарезервировано;
	
	Если ИмяДоменаЗарезервировано Тогда
		ОбновитьСообщениеОПубликации();
		ЦветТекстаЭУ 		= ЦветСтиляТекстаПоля;
		ЦветТекстаСообщения = ЦветСтиляПоясняющийТекст;
		СообщениеПроверки = СтрШаблон(
				НСтр("ru = 'адрес ""%1"" зарезервирован для вашего сервиса'"),
				СтрокаАдресПриложения());
	Иначе	
		ЦветТекстаЭУ 		= ЦветСтиляПоясняющийОшибкуТекст;
		ЦветТекстаСообщения = ЦветСтиляПоясняющийОшибкуТекст;
		СообщениеПроверки = СтрШаблон(
				НСтр("ru = 'К сожалению, адрес ""%1"" уже занят. Придумайте другой адрес'"),
				СтрокаАдресПриложения());
	КонецЕсли;
	
	Элементы.ДекорацияИмяДоменаПояснение.Заголовок  = СообщениеПроверки;
	Элементы.ДекорацияИмяДоменаПояснение.ЦветТекста = ЦветТекстаСообщения;
	Элементы.ИмяДомена.ЦветТекста = ЦветТекстаЭУ;
	
	
КонецПроцедуры

&НаСервере
Процедура НачатьПодключениеКСервису()
	
	Элементы.Подключить.Доступность 		= Ложь;
	Элементы.Ответственный.ТолькоПросмотр 	= Истина;
	Элементы.ИмяДомена.ТолькоПросмотр 		= Истина;
	Элементы.ИмяПриложения.ТолькоПросмотр 	= Истина;
	Элементы.НастройкиПубликации.Доступность = Ложь;
	
	ИмяЗадания 		= "НовоеПриложение";
	ИмяМетода 		= "КабинетСотрудникаМенеджерСервиса.СоздатьНовоеПриложениеФоновоеЗадание";
	ИмяДекорации 	= "ИндикаторДлительнойОперацииПодключение";
	
	ОписаниеПриложения = КабинетСотрудникаМенеджерСервиса.НовоеОписаниеПриложения();
	ОписаниеПриложения.Наименование = СОКРЛП(ИмяПриложения);
	ОписаниеПриложения.ИмяДомена 	= СОКРЛП(ИмяДомена);
	
	ПараметрыМетода = Новый Структура("ИдентификаторАбонентаИП,ОписаниеПриложения");
	ПараметрыМетода.ИдентификаторАбонентаИП = ИдентификаторАбонента;
	ПараметрыМетода.ОписаниеПриложения 		= ОписаниеПриложения;
	
	ЗапуститьФоновоеЗадание(ИмяМетода, ИмяЗадания, ИмяДекорации, ПараметрыМетода);

КонецПроцедуры

&НаСервере
Процедура НовоеПриложениеЗавершение(АдресРезультата)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.СообщениеОбОшибке <> Неопределено Тогда
		КабинетСотрудникаМенеджерСервиса.ОчиститьДанныеПриОтключенииСервиса();
		ТекстСообщения = НСтр("ru = 'При подключении к сервису возникла ошибка:'") + Символы.ПС + Результат.СообщениеОбОшибке;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ИдентификаторПриложения = Результат.ОписаниеПриложения.Идентификатор;
	НачатоСозданиеПриложения = Истина;
	
	ОтложенноеПодключениеКСервису = Результат.ОтложенноеПодключениеКСервису;
	Если ОтложенноеПодключениеКСервису Тогда
		ПараметрыПодключения = КабинетСотрудникаМенеджерСервиса.НовыеПараметрыПодключенияКСервису();
		ПараметрыПодключения.ИдентификаторПриложения 	= ИдентификаторПриложения;
		ПараметрыПодключения.НаименованиеПриложения 	= СОКРЛП(ИмяПриложения);
		ПараметрыПодключения.Ответственный 				= Ответственный;
		ПараметрыПодключения.ПериодыРасчетныхЛистков 	= ПериодыРасчетныхЛистков;
		КабинетСотрудникаМенеджерСервиса.НачатьПодключениеКСервисуВОтложенномРежиме(ПараметрыПодключения);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ИндикаторДлительнойОперацииПодключение",
			"Видимость",
			Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НачатьПроверкуСозданияПриложения()

	ИмяЗадания 		= "ПроверкаСозданияПриложения";
	ИмяМетода 		= "КабинетСотрудникаМенеджерСервиса.ПроверкаСозданияПриложенияФоновоеЗадание";
	ИмяДекорации 	= "ИндикаторДлительнойОперацииПодключение";
	
	ПараметрыМетода = Новый Структура("ИдентификаторПриложения");
	ПараметрыМетода.ИдентификаторПриложения = ИдентификаторПриложения;
	
	ЗапуститьФоновоеЗадание(ИмяМетода, ИмяЗадания, ИмяДекорации, ПараметрыМетода);

КонецПроцедуры

&НаСервере
Процедура ПроверкаСозданияПриложенияЗавершение(АдресРезультата)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		ПриложениеНеСоздано = Истина;
		Возврат;
	КонецЕсли;
	
	Если Результат.ОписаниеПриложения <> Неопределено Тогда
		
		СтатусПриложения = Результат.ОписаниеПриложения.Статус;
		Если СтатусПриложения = "working" Тогда
			ОписаниеСозданногоПриложения = Новый ФиксированнаяСтруктура(Результат.ОписаниеПриложения);
			ПриложениеСоздано = Истина;
			КабинетСотрудникаМенеджерСервиса.СохранитьНастройкиПодключенияПриложения(ОписаниеСозданногоПриложения);
		ИначеЕсли СтатусПриложения = "booked" Тогда
			// продолжаем ожидание создания приложения
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ИндикаторДлительнойОперацииПодключение",
				"Видимость",
				Истина);
		Иначе
			// Ошибка создания нового приложения: stopped, error, deleted.
			КабинетСотрудникаМенеджерСервиса.ОчиститьДанныеПриОтключенииСервиса();
			ПриложениеНеСоздано = Истина;
			ТекстСообщения = НСтр("ru = 'При подключении к сервису возникла ошибка:'") + Символы.ПС + Результат.СообщениеОбОшибке;
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	ИначеЕсли Результат.СообщениеОбОшибке <> Неопределено Тогда
		ПриложениеНеСоздано = Истина;
		ТекстСообщения = НСтр("ru = 'При подключении к сервису возникла ошибка:'") + Символы.ПС + Результат.СообщениеОбОшибке;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НачатьСозданиеИнформационнойСистемы()

	ИмяЗадания 		= "СозданиеИнформационнойСистемы";
	ИмяМетода 		= "КабинетСотрудникаМенеджерСервиса.СоздатьИнформационнуюСистемуФоновоеЗадание";
	ИмяДекорации 	= "ИндикаторДлительнойОперацииПодключение";
	
	ПараметрыМетода = Новый Структура("ОписаниеПриложения,ОписаниеАдминистратора,Ответственный");
	ПараметрыМетода.ОписаниеПриложения = ОписаниеСозданногоПриложения;
	ПараметрыМетода.Ответственный = Ответственный;
	
	ЗапуститьФоновоеЗадание(ИмяМетода, ИмяЗадания, ИмяДекорации, ПараметрыМетода);

КонецПроцедуры

&НаСервере
Процедура СозданиеИнформационнойСистемыЗавершение(АдресРезультата)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.СообщениеОбОшибке <> Неопределено Тогда
		КабинетСотрудникаМенеджерСервиса.ОчиститьДанныеПриОтключенииСервиса();
		ТекстСообщения = НСтр("ru = 'При подключении к сервису возникла ошибка:'") + Символы.ПС + Результат.СообщениеОбОшибке;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОписаниеИнформационнойСистемы = Результат.ОписаниеИнформационнойСистемы;
	ОписаниеИнформационнойСистемы = Новый ФиксированнаяСтруктура(Результат.ОписаниеИнформационнойСистемы);
	ИнформационнаяСистемаСоздана  = Истина;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ИндикаторДлительнойОперацииПодключение",
				"Видимость",
				Истина);
	
КонецПроцедуры

&НаСервере
Процедура НачатьПубликациюОтветственногоЛица()

	ИмяЗадания 		= "ПубликацияОтветственногоЛица";
	ИмяМетода 		= "КабинетСотрудника.ОпубликоватьОтветственноеЛицоФоновоеЗадание";
	ИмяДекорации 	= "ИндикаторДлительнойОперацииПодключение";
	
	ПараметрыМетода = Новый Структура("Ответственный");
	ПараметрыМетода.Ответственный = Ответственный;
	
	ЗапуститьФоновоеЗадание(ИмяМетода, ИмяЗадания, ИмяДекорации, ПараметрыМетода);

КонецПроцедуры

&НаСервере
Процедура ПубликацияОтветственногоЛицаЗавершение(АдресРезультата)

	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.СообщениеОбОшибке <> Неопределено Тогда
		КабинетСотрудникаМенеджерСервиса.ОчиститьДанныеПриОтключенииСервиса();
		ТекстСообщения = НСтр("ru = 'При подключении к сервису возникла ошибка:'") + Символы.ПС + Результат.СообщениеОбОшибке;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОтветственноеЛицоОпубликовано = Истина;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ИндикаторДлительнойОперацииПодключение",
				"Видимость",
				Истина);

КонецПроцедуры

&НаСервере
Процедура НачатьСозданиеАдминистратораСервиса()

	ИмяЗадания 		= "СозданиеАдминистратораСервиса";
	ИмяМетода 		= "КабинетСотрудникаМенеджерСервиса.СоздатьНовогоАдминистратораПриложенияФоновоеЗадание";
	ИмяДекорации 	= "ИндикаторДлительнойОперацииПодключение";
	
	ОписаниеАдминистратора = КабинетСотрудникаМенеджерСервиса.НовоеОписаниеАдминистратора();
	ОписаниеАдминистратора.ФизическоеЛицо			= Строка(Ответственный.УникальныйИдентификатор()); 
	ОписаниеАдминистратора.Логин 					= Логин;
	ОписаниеАдминистратора.Телефон 					= МобильныйТелефон;
	ОписаниеАдминистратора.АдресЭлектроннойПочты  	= ЭлектроннаяПочта;
	
	ПараметрыМетода = Новый Структура("ОписаниеАдминистратора,ОписаниеПриложения,Ответственный");
	ПараметрыМетода.ОписаниеАдминистратора 	= ОписаниеАдминистратора;
	ПараметрыМетода.Ответственный 			= Ответственный;
	ПараметрыМетода.ОписаниеПриложения 		= ОписаниеСозданногоПриложения;
	
	ЗапуститьФоновоеЗадание(ИмяМетода, ИмяЗадания, ИмяДекорации, ПараметрыМетода);

КонецПроцедуры

&НаСервере
Процедура СозданиеАдминистратораСервисаЗавершение(АдресРезультата)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.СообщениеОбОшибке <> Неопределено Тогда
		КабинетСотрудникаМенеджерСервиса.ОчиститьДанныеПриОтключенииСервиса();
		ТекстСообщения = НСтр("ru = 'При подключении к сервису возникла ошибка:'") + Символы.ПС + Результат.СообщениеОбОшибке;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СсылкаДляАдминистратора = Результат.СсылкаДляАдминистратора;
	ПодключениеВыполнено = Истина;
	
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Настройки.Идентификатор = ОписаниеИнформационнойСистемы.Идентификатор;
	Настройки.Наименование  = ОписаниеИнформационнойСистемы.Наименование;
	Настройки.Ответственный = Ответственный;
	Настройки.АбонентСервисаИнициализирован = Истина;
	
	НаборЗаписей = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей();
	ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Настройки);
	НаборЗаписей.Записать();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ИмяДомена", "ТолькоПросмотр", ПодключениеВыполнено);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ИмяПриложения", "ТолькоПросмотр", ПодключениеВыполнено);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"Ответственный", "ТолькоПросмотр", ПодключениеВыполнено);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"НастройкиПубликации", "Доступность", Не ПодключениеВыполнено);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"Подключить", "Доступность", Не ПодключениеВыполнено);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"Этап5", "Видимость", ПодключениеВыполнено);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ВыборАбонента", "ТолькоПросмотр", ПодключениеВыполнено);
		
	УстановитьЗаголовокДекорацияПереходДляАдминистратора();
	КабинетСотрудника.ВключитьНастройкиПрограммыПослеПодключенияСервиса();
	
КонецПроцедуры

&НаСервере
Процедура НачатьПолучениеИнформацииОСервисе()
	
	Если МенеджерСервисаДоступен Тогда
		ИмяЗадания 		= "ПолучениеИнформацииОСервисе";
		ИмяМетода 		= "КабинетСотрудникаМенеджерСервиса.ИнформацияОСервисеФоновоеЗадание";
		ИмяДекорации 	= "";
		ЗапуститьФоновоеЗадание(ИмяМетода, ИмяЗадания, ИмяДекорации);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПолучениеИнформацииОСервисеЗавершение(АдресРезультата)

	Элементы.СтраницыСостояниеСервиса.ТекущаяСтраница = Элементы.СтраницаСостояниеСервиса;
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.СообщениеОбОшибке <> Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'При получении информации о сервисе возникла ошибка:'") + Символы.ПС + Результат.СообщениеОбОшибке;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ИмяПриложения 		= Результат.ОписаниеПриложения.Наименование;
	СтатусПриложения 	= Результат.ОписаниеПриложения.Статус;
	ОбновитьРеквизитыПоОписаниюАдминистратора(Результат.ОписаниеПриложения.Администратор);
	
	ОбновитьРеквизитыПоОписаниюАбонента(Результат.Абонент);
		
	Элементы.ИзменитьПривязкуАбонента.Доступность = Истина;
	Элементы.ИзменитьДанныеСервиса.Доступность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура НачатьОбновлениеСвойствПриложения(НовыеДанныеПриложения)

	ИмяЗадания 		= "ОбновлениеСвойствПриложения";
	ИмяМетода 		= "КабинетСотрудникаМенеджерСервиса.ОбновитьСвойстваПриложенияФоновоеЗадание";
	ИмяДекорации 	= "ИндикаторДлительнойОперацииОбновлениеПриложения";
	
	ПараметрыМетода = Новый Структура("Идентификатор,ОписаниеПриложения,ОписаниеАдминистратора,Ответственный");
	ПараметрыМетода.Идентификатор = ИдентификаторПриложения;
	
	Если Не ПустаяСтрока(НовыеДанныеПриложения.ИмяПриложения) Тогда
		ОписаниеПриложения = КабинетСотрудникаМенеджерСервиса.НовоеОписаниеПриложения();
		ОписаниеПриложения.Наименование = СОКРЛП(НовыеДанныеПриложения.ИмяПриложения);
		ПараметрыМетода.ОписаниеПриложения = ОписаниеПриложения;
	КонецЕсли;
	Если ЗначениеЗаполнено(НовыеДанныеПриложения.Ответственный) Тогда
		ОписаниеАдминистратора = КабинетСотрудникаМенеджерСервиса.НовоеОписаниеАдминистратора();
		ОписаниеАдминистратора.Логин 					= НовыеДанныеПриложения.Логин;
		ОписаниеАдминистратора.Телефон 					= НовыеДанныеПриложения.МобильныйТелефон;
		ОписаниеАдминистратора.АдресЭлектроннойПочты 	= НовыеДанныеПриложения.ЭлектроннаяПочта;
		ОписаниеАдминистратора.ФизическоеЛицо 			= Строка(НовыеДанныеПриложения.Ответственный.УникальныйИдентификатор());
		ПараметрыМетода.ОписаниеАдминистратора = ОписаниеАдминистратора;
		ПараметрыМетода.Ответственный = НовыеДанныеПриложения.Ответственный;
	КонецЕсли;
	
	ЗапуститьФоновоеЗадание(ИмяМетода, ИмяЗадания, ИмяДекорации, ПараметрыМетода);

КонецПроцедуры

&НаСервере
Процедура ОбновлениеСвойствПриложенияЗавершение(АдресРезультата)

	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.ОписаниеПриложения) Тогда
		ИмяПриложения 		= Результат.ОписаниеПриложения.Наименование;
		СтатусПриложения 	= Результат.ОписаниеПриложения.Статус;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.ОписаниеАдминистратора) Тогда
		ОбновитьРеквизитыПоОписаниюАдминистратора(Результат.ОписаниеАдминистратора);
	КонецЕсли;
	
	Если Результат.СообщениеОбОшибке <> Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'При изменении данных возникла ошибка:'") + Символы.ПС + Результат.СообщениеОбОшибке;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НачатьИзменениеАбонентаИнтернетПоддержки()

	ИмяЗадания 		= "ИзменениеАбонентаИнтернетПоддержки";
	ИмяМетода 		= "КабинетСотрудникаМенеджерСервиса.ИзменитьАбонентаИнтернетПоддержкиФоновоеЗадание";
	ИмяДекорации 	= "ИндикаторДлительнойОперацииИзменениеАбонента";
	
	ЗапуститьФоновоеЗадание(ИмяМетода, ИмяЗадания, ИмяДекорации);

КонецПроцедуры

&НаСервере
Процедура ИзменениеАбонентаИнтернетПоддержкиЗавершение(АдресРезультата)

	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.СообщениеОбОшибке <> Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'При изменении данных возникла ошибка:'") + Символы.ПС + Результат.СообщениеОбОшибке;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НачатьПубликациюДанных()
	
	ПараметрыМетода = Новый Массив();
	ПараметрыМетода.Добавить(ПериодыРасчетныхЛистков);
	ФоновыеЗадания.Выполнить("КабинетСотрудника.ВыполнитьПубликациюПослеПодключенияКСервисуВФоне",
				ПараметрыМетода,
				КабинетСотрудника.КлючФоновогоЗаданияПубликации());
	
КонецПроцедуры

&НаСервере
Процедура НачатьОтключениеСервиса()

	ИмяЗадания 		= "ОтключениеСервиса";
	ИмяМетода 		= "КабинетСотрудникаМенеджерСервиса.ОтключениеСервисаФоновоеЗадание";
	ИмяДекорации 	= "ИндикаторДлительнойОтключениеСервиса";
	
	ЗапуститьФоновоеЗадание(ИмяМетода, ИмяЗадания, ИмяДекорации);

КонецПроцедуры

&НаСервере
Процедура ОтключениеСервисаЗавершение(АдресРезультата)

	КабинетСотрудникаМенеджерСервиса.ОчиститьДанныеПриОтключенииСервиса();

КонецПроцедуры

#КонецОбласти

#Область ОбслуживаниеПроверкиИмениДомена

&НаСервере
Процедура ЗаполнитьДанныеДляПроверкиИмениДомена()
	
	СтрокаСимволы = "abcdefghijklmnopqrstuvwxyz0123456789-";
	РазрешенныеСимволы = Новый Соответствие;
	Для Позиция = 1 По СтрДлина(СтрокаСимволы) Цикл
		РазрешенныеСимволы.Вставить(Сред(СтрокаСимволы,Позиция,1), Истина);
	КонецЦикла;
	РазрешенныеСимволыИмениДомена = Новый ФиксированноеСоответствие(РазрешенныеСимволы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИмяДомена(Текст = Неопределено)
	
	ПроверятьОкончание = Истина;
	Если Текст <> Неопределено Тогда
		ПроверяемаяСтрока = Текст;
		ПроверятьОкончание = Ложь;
	Иначе
		ПроверяемаяСтрока = ИмяДомена;
	КонецЕсли;
	КоличествоСимволов = СтрДлина(ПроверяемаяСтрока);
	
	СообщенияПроверки = "";
	Если СтрНачинаетсяС(ПроверяемаяСтрока, "-") Тогда
		СообщенияПроверки = НСтр("ru = 'Адрес может начинаться только с буквы или цифры'");
	ИначеЕсли ПроверятьОкончание И СтрЗаканчиваетсяНа(ПроверяемаяСтрока, "-") Тогда
		СообщенияПроверки = НСтр("ru = 'Адрес должен заканчиваться буквой или цифрой'");
	ИначеЕсли СтрНайти(ПроверяемаяСтрока, "--") > 0 Тогда
		СообщенияПроверки = НСтр("ru = 'Адрес не может содержать два дефиса подряд'");
	Иначе
		ПроверяемаяСтрока = НРег(ПроверяемаяСтрока);
		ЗапрещенныеСимволы = "";
		Для Позиция = 1 По КоличествоСимволов Цикл
			СимволИмени = Сред(ПроверяемаяСтрока, Позиция, 1);
			Если РазрешенныеСимволыИмениДомена.Получить(СимволИмени) = Неопределено Тогда
				ЗапрещенныеСимволы = ЗапрещенныеСимволы + ?(ПустаяСтрока(ЗапрещенныеСимволы),"",",") + """" +СимволИмени + """";
			КонецЕсли;
		КонецЦикла;
		Если Не ПустаяСтрока(ЗапрещенныеСимволы) Тогда
			СообщенияПроверки = НСтр("ru = 'В адресе используются неразрешенные символы:'") + " ";
			СообщенияПроверки = СтрШаблон("%1 %2", СообщенияПроверки, ЗапрещенныеСимволы);
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(СообщенияПроверки) Тогда
		Если ПроверятьОкончание И КоличествоСимволов < 3 Тогда
			СообщенияПроверки = НСтр("ru = 'Длина адреса должна быть от 3 до 63 символов'");
		ИначеЕсли КоличествоСимволов > 63 Тогда
			СообщенияПроверки = НСтр("ru = 'Длина адреса должна быть от 3 до 63 символов'");
		КонецЕсли;
	КонецЕсли;
	
	СообщениеПроверкиИмениДомена = СообщенияПроверки;
	
	Если ПустаяСтрока(СообщенияПроверки) Тогда
		ЦветТекста 			= ЦветСтиляТекстаПоля;
		ЦветТекстаСообщения = ЦветСтиляПоясняющийТекст;
	Иначе
		ЦветТекста 			= ЦветСтиляПоясняющийОшибкуТекст;
		ЦветТекстаСообщения = ЦветСтиляПоясняющийОшибкуТекст;
	КонецЕсли;
	
	Элементы.ИмяДомена.ЦветТекста 					= ЦветТекста;
	Элементы.ДекорацияИмяДоменаПояснение.Заголовок  = СообщениеПроверкиИмениДомена;
	Элементы.ДекорацияИмяДоменаПояснение.ЦветТекста = ЦветТекстаСообщения;
	
	Если ПроверятьОкончание Тогда
		ИмяДоменаСоответствуетПравилам = ПустаяСтрока(СообщенияПроверки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтветственноеЛицо

&НаСервере
Процедура ЗаполнитьОтветственного()

	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Если ЗначениеЗаполнено(ТекущийПользователь) Тогда
		Ответственный = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "ФизическоеЛицо");
		ЗаполнитьРеквизитыОтветственного(Ответственный, Логин, ЭлектроннаяПочта, МобильныйТелефон, Пол);
	КонецЕсли;
	ОбновитьЭУОтветственный(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыОтветственного(Ответственный, Логин, ЭлектроннаяПочта, МобильныйТелефон, Пол)
	
	Логин 			 = "";
	ЭлектроннаяПочта = "";
	МобильныйТелефон = "";
	Пол = Перечисления.ПолФизическогоЛица.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(Ответственный) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыОбъекта =  ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ответственный, "Фамилия,Инициалы,Пол");
	Пол = РеквизитыОбъекта["Пол"];
	Инициалы = СтрЗаменить(РеквизитыОбъекта["Инициалы"],".","");
	Инициалы = СтрЗаменить(Инициалы," ","");
	Логин = СтрШаблон("%1%2", РеквизитыОбъекта["Фамилия"], Инициалы);
	
	ВидыКонтактнойИнформации = Новый Массив;
	ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица);
	ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица);
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
								ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ответственный),,ВидыКонтактнойИнформации);
	Для каждого СтрокаТЗ Из КонтактнаяИнформация Цикл
		Если СтрокаТЗ.Вид = Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица Тогда
			ЭлектроннаяПочта = СтрокаТЗ.Представление;
		ИначеЕсли СтрокаТЗ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица Тогда
			МобильныйТелефон = СтрокаТЗ.Представление;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЭУОтветственный(Форма)
	
	Элементы = Форма.Элементы;
	Форма.ДанныеОтветственногоЗаполнены = Ложь;
	
	Если Не ЗначениеЗаполнено(Форма.Ответственный) Тогда
		Элементы.ДекорацияТелефонПочтаОтветственного.Заголовок = НСтр("ru = 'Укажите ответственное лицо'");
		Элементы.ДекорацияРеквизитыОтветственногоПояснение.Заголовок = НСтр("ru = 'Убедитесь в том, что у ответственного лица задан действующий мобильный телефон и адрес электронной почты'");
		Элементы.ДекорацияРеквизитыОтветственногоПояснение.ЦветТекста = Форма.ЦветСтиляИнформационнойНадписи;
	Иначе
		
		ТелефонУказан = Ложь;
		ТелефонСоответствуетТребованиям = Ложь;
		Если ЗначениеЗаполнено(Форма.МобильныйТелефон) Тогда
			СтрокаТелефон = СОКРЛП(Форма.МобильныйТелефон);
			ТелефонУказан = Истина;
			ТелефонСоответствуетТребованиям = (Лев(СтрокаТелефон,1) = "+");
		Иначе
			СтрокаТелефон = НСтр("ru = '<телефон не указан>'");
		КонецЕсли;
		
		ПочтаУказана = Ложь;
		ПочтаСоответствуетТребованиям = Ложь;
		Если ЗначениеЗаполнено(Форма.ЭлектроннаяПочта) Тогда
			СтрокаПочта = СОКРЛП(Форма.ЭлектроннаяПочта);
			ПочтаУказана = Истина;
			ПочтаСоответствуетТребованиям = ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(Форма.ЭлектроннаяПочта);
		Иначе
			СтрокаПочта = НСтр("ru = '<Email не указан>'");
		КонецЕсли;
		
		СтрокаТелефонПочта = СтрШаблон(НСтр("ru = 'Мобильный телефон и почта: %1, %2'"), СтрокаТелефон, СтрокаПочта);
		Элементы.ДекорацияТелефонПочтаОтветственного.Заголовок = СтрокаТелефонПочта;
		
		Если ТелефонУказан И ТелефонСоответствуетТребованиям И ПочтаУказана И ПочтаСоответствуетТребованиям И ЗначениеЗаполнено(Форма.Пол) Тогда
			Элементы.ДекорацияРеквизитыОтветственногоПояснение.ЦветТекста = Форма.ЦветСтиляИнформационнойНадписи;
			Элементы.ДекорацияРеквизитыОтветственногоПояснение.Заголовок = НСтр("ru = 'Убедитесь в том, что у ответственного лица задан действующий мобильный телефон и адрес электронной почты'");
			Форма.ДанныеОтветственногоЗаполнены = Истина;
		Иначе
			
			Если ТелефонУказан И ТелефонСоответствуетТребованиям И ПочтаУказана И ПочтаСоответствуетТребованиям Тогда
				СообщениеОбОшибке =НСтр("ru = 'Заполните, пожалуйста, пол ответственного'");
			Иначе
				
				СообщениеНеУказанПол = "";
				Если Не ЗначениеЗаполнено(Форма.Пол) Тогда
					СообщениеНеУказанПол = НСтр("ru = ', не указан пол'");
				КонецЕсли;
				
				СообщениеПочтаСоответствуетТребованиям = "";
				Если ПочтаУказана И Не ПочтаСоответствуетТребованиям Тогда
					СообщениеПочтаСоответствуетТребованиям = НСтр("ru = ', адрес электронной почты указан некорректно'");
				КонецЕсли;
				
				СообщениеТелефонСоответствуетТребованиям = "";
				Если ТелефонУказан И Не ТелефонСоответствуетТребованиям Тогда
					СообщениеТелефонСоответствуетТребованиям = НСтр("ru = ', номер телефон должен начинаться с символа ""+""'");
				КонецЕсли;
				
				СообщениеОбОшибке = СтрШаблон(
					НСтр("ru = 'Заполните, пожалуйста, контактные данные ответственного%1%2%3'"),
					СообщениеТелефонСоответствуетТребованиям,
					СообщениеПочтаСоответствуетТребованиям,
					СообщениеНеУказанПол);
				
			КонецЕсли;
			
			Элементы.ДекорацияРеквизитыОтветственногоПояснение.ЦветТекста = Форма.ЦветСтиляПоясняющийОшибкуТекст;
			Элементы.ДекорацияРеквизитыОтветственногоПояснение.Заголовок = СообщениеОбОшибке;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОбновитьРеквизитыПоОписаниюАдминистратора(ОписаниеАдминистратора)
	
	Логин 				= ОписаниеАдминистратора.Логин;
	МобильныйТелефон 	= СОКРЛП(ОписаниеАдминистратора.Телефон);
	ЭлектроннаяПочта 	= СОКРЛП(ОписаниеАдминистратора.АдресЭлектроннойПочты);
	СсылкаСтрока 		= ОписаниеАдминистратора.ФизическоеЛицо;
	Если Не ПустаяСтрока(СсылкаСтрока) Тогда
		ОтветственныйСсылка = Неопределено;
		Попытка
			ОтветственныйСсылка = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(СсылкаСтрока));
		Исключение
			ОтветственныйСсылка = Неопределено;
		КонецПопытки;
		Если ЗначениеЗаполнено(ОтветственныйСсылка) И ОбщегоНазначения.СсылкаСуществует(ОтветственныйСсылка) Тогда
			Ответственный = ОтветственныйСсылка;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ответственный) Тогда
		Элементы.ОтветственныйЗаСервис.Видимость = Истина;
		Элементы.Логин.Видимость = Ложь;
	Иначе
		Элементы.ОтветственныйЗаСервис.Видимость = Ложь;
		Элементы.Логин.Видимость = Истина;
	КонецЕсли;
	
	СтрокаТелефонПочта = СтрШаблон(НСтр("ru = 'Мобильный телефон и почта: %1, %2'"), МобильныйТелефон, ЭлектроннаяПочта);
	Элементы.ДекорацияТелефонПочтаОтветственногоЗаСервис.Заголовок = СтрокаТелефонПочта;	

КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыПоОписаниюАбонента(АбонентСервиса)

	ИспользуетсяПробныйПериод 		= АбонентСервиса.ИспользуетсяПробныйПериод;
	ОплаченоКабинетов 				= АбонентСервиса.ОплаченоКабинетов;
	НаименованиеАбонента 			= АбонентСервиса.Наименование;
	
	Если ЗначениеЗаполнено(АбонентСервиса.ДатаОкончанияПробногоПериода) Тогда
		ДатаОкончанияПробногоПериода = АбонентСервиса.ДатаОкончанияПробногоПериода;
	КонецЕсли;
	Если ЗначениеЗаполнено(АбонентСервиса.ДатаОкончанияОплаченногоПериода) Тогда
		ДатаОкончанияОплаченногоПериода = АбонентСервиса.ДатаОкончанияОплаченногоПериода;
	КонецЕсли;
	
	Строка1 = "";
	ПереводСтроки = "";
	Если ИспользуетсяПробныйПериод И ЗначениеЗаполнено(ДатаОкончанияПробногоПериода) Тогда
		ШаблонСтроки = НСтр("ru = 'Используется пробный период до: %1'");
		Строка1 = СтрШаблон(ШаблонСтроки, Формат(ДатаОкончанияПробногоПериода, "ДЛФ=D"));
		ПереводСтроки = Символы.ПС;
	КонецЕсли;
	Строка2 = "";
	Если ОплаченоКабинетов > 0 Тогда
		ШаблонСтроки = НСтр("ru = 'Оплачено кабинетов: %1 до %2'");
		Строка2 = СтрШаблон(ШаблонСтроки, ОплаченоКабинетов, Формат(ДатаОкончанияОплаченногоПериода, "ДЛФ=D"));
	Иначе
		Строка2 = НСтр("ru = 'Нет оплаченных кабинетов'");
	КонецЕсли;
	
	СтрокаСостояниеОплаты = СтрШаблон("%1%2%3", Строка1, ПереводСтроки, Строка2);
	Элементы.ДекорацияСостояниеОплаты.Заголовок = СтрокаСостояниеОплаты;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСозданияПриложения()
	
	Если АктивноеЗадание <> Неопределено И АктивноеЗадание.Имя = "ПроверкаСозданияПриложения" Тогда
		Возврат;
	КонецЕсли;
	
	НачатьПроверкуСозданияПриложения();
	ПриНачалеЗадания();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИмяПриложения()
	
	УстановитьПривилегированныйРежим(Истина);
	ИмяПриложения = Константы.ЗаголовокСистемы.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ПустаяСтрока(ИмяПриложения) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Организации КАК Организации";
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Наименование");
		УстановитьПривилегированныйРежим(Ложь);
		Если РезультатЗапроса.Количество() = 1 Тогда
			ИмяПриложения = РезультатЗапроса[0];
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеСообщения()
	
	Элементы.ДекорацияИмяДоменаПояснение.Заголовок = НСтр("ru = 'В адресе можно использовать только латинские буквы, цифры и дефис (""-"")'");
	
КонецПроцедуры

&НаКлиенте
Функция ПодключениеДоступно()

	ПодключениеДоступно = ИмяДоменаЗарезервировано И ДанныеОтветственногоЗаполнены;
	Если Не ПодключениеДоступно Тогда
		ТекстПредупреждения = НСтр("ru = 'Для подключения к сервису заполните данные в форме'");
		ПоказатьПредупреждение( ,ТекстПредупреждения);
	КонецЕсли;
	
	Возврат ПодключениеДоступно;

КонецФункции

&НаКлиенте
Процедура ОбновитьИнформациюПодключения(Результат, Параметры) Экспорт

	ОбновитьИнформациюПодключенияНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержкуЗавершение(Результат, Параметры) Экспорт

	Если Результат <> Неопределено Тогда
		Если ФормаВРежимеПодключения Тогда
			НачатьСценарийПодключения();
			ПриНачалеЗадания();
		Иначе
			ИзменитьАбонентаСервиса();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюПодключенияНаСервере()
	
	РассчитатьКоличествоКабинетов();
	Если СервисПодключен Тогда
		ОбновитьЗаголовокЛичныеКабинеты();
	Иначе	
		ОбновитьСообщениеОПубликации();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьКоличествоКабинетов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ФизическиеЛица.ФизическоеЛицо) КАК Количество,
	|	КОЛИЧЕСТВО(ОшибкиЗаполнения.ЕстьОшибки) КАК ЕстьОшибкиЗаполнения
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника КАК ОшибкиЗаполнения
	|		ПО ФизическиеЛица.ФизическоеЛицо = ОшибкиЗаполнения.ОбъектПубликации";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КоличествоКабинетов = Выборка.Количество;
		КоличествоКабинетовСОшибками = Выборка.ЕстьОшибкиЗаполнения;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция СтрокаАдресПриложения()
	
	ИмяДоменаВАдрес = ?(ПустаяСтрока(ИмяДомена),"<"+НСтр("ru = 'ваш сервис'")+">",СОКРЛП(ИмяДомена));
	Возврат СтрШаблон("%1%2",ИмяДоменаВАдрес,".1c-cabinet.ru");

КонецФункции

&НаСервере
Процедура ОбновитьСообщениеОПубликации()
	
	АдресПриложения = СтрокаАдресПриложения();
	ПубликуемыхКабинетов = КоличествоКабинетов - КоличествоКабинетовСОшибками;
	Если ПериодыРасчетныхЛистков.Количество() = 0 Тогда
		ПериодРасчетныхЛистков = "";
	Иначе
		
		Дата2 = ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(ПериодыРасчетныхЛистков[0]);
		Дата1 = ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(ПериодыРасчетныхЛистков[1]);
		ПредставлениеПериода = СтрШаблон("%1 - %2", Дата1, Дата2);
		
		Если ПубликуемыхКабинетов > 1 Тогда
			СтрокаШаблон = НСтр("ru = 'и их расчетные листки за %1'");
		Иначе
			СтрокаШаблон = НСтр("ru = 'и его расчетные листки за %1'");
		КонецЕсли;
		ПериодРасчетныхЛистков = СтрШаблон(СтрокаШаблон, ПредставлениеПериода);
	КонецЕсли;
	
	Если ПубликуемыхКабинетов > 1 Тогда
		СтрокаШаблон = НСтр("ru = 'При нажатии кнопки Подключить по адресу ""%1"" будут опубликованы данные %2 сотрудников %3.'");
		Строка1 = СтрШаблон(СтрокаШаблон, АдресПриложения, ПубликуемыхКабинетов, ПериодРасчетныхЛистков);
		Строка2 = НСтр("ru = 'Эти данные будут доступны только сотрудникам и их руководителям.'");
		СтрокаСообщения = СтрШаблон("%1" + Символы.ПС + "%2", Строка1, Строка2);
	Иначе
		СтрокаШаблон = НСтр("ru = 'При нажатии кнопки Подключить по адресу ""%1"" будут опубликованы данные ответственного лица %2.'");
		СтрокаСообщения = СтрШаблон(СтрокаШаблон, АдресПриложения, ПериодРасчетныхЛистков);
	КонецЕсли;
	Элементы.ДекорацияПодключениеОписание.Заголовок = СтрокаСообщения;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПериодРасчетныхЛистков()

	ПериодРасчетныхЛистков = "";
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НачислениеЗарплаты.МесяцНачисления КАК МесяцНачисления
	|ИЗ
	|	Документ.НачислениеЗарплаты КАК НачислениеЗарплаты
	|ГДЕ
	|	НачислениеЗарплаты.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	МесяцНачисления УБЫВ";
	РезультатЗапроса = Запрос.Выполнить();
	
	Периоды = Новый Массив;
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Периоды.Добавить(Выборка.МесяцНачисления);
		Периоды.Добавить(ДобавитьМесяц(Выборка.МесяцНачисления,-1));
	КонецЕсли;
	 
	ПериодыРасчетныхЛистков = Новый ФиксированныйМассив(Периоды);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокДекорацияПереходДляАдминистратора()
	
	ШаблонЗаголовка = НСтр("ru = '<body>Если вы - %1, тогда <a href=""%2"">%3</a> создайте личные кабинеты и разошлите приглашения своим сотрудникам</body>'");
	СтрокаЗаголовка = СтрШаблон(ШаблонЗаголовка, Строка(Ответственный), СсылкаДляАдминистратора, НСтр("ru = 'перейдите сюда,'"));
	ФорматированныйДокумент = Новый ФорматированныйДокумент;
	ФорматированныйДокумент.УстановитьHTML("<html>" + СтрокаЗаголовка + "</html>", Новый Структура);
	Элементы.ДекорацияПереходДляАдминистратора.Заголовок =ФорматированныйДокумент.ПолучитьФорматированнуюСтроку();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюОСервисеИзНастроекПрограммы()

	СтруктураНастроек = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	АдресПриложения 		= СтруктураНастроек.АдресПриложения;
	ИдентификаторПриложения = СтруктураНастроек.ИдентификаторПриложения;
	ИмяПриложения 			= СтруктураНастроек.НаименованиеПриложения;
	Ответственный           = СтруктураНастроек.Ответственный;
	
	ШаблонЗаголовка = НСтр("ru = '<body>Адрес приложения: <a href=""%1"">%2</a></body>'");
	СтрокаЗаголовка = СтрШаблон(ШаблонЗаголовка, АдресПриложения, АдресПриложения);
	ФорматированныйДокумент = Новый ФорматированныйДокумент;
	ФорматированныйДокумент.УстановитьHTML("<html>" + СтрокаЗаголовка + "</html>", Новый Структура);
	Элементы.ДекорацияАдресПриложения.Заголовок = ФорматированныйДокумент.ПолучитьФорматированнуюСтроку();
	
	ШаблонЗаголовка = НСтр("ru = 'При отключении будет удален сервис по адресу %1 и все его данные.
		|Для повторного подключения к сервису необходимо будет заново создать все кабинеты сотрудников и разослать приглашения.'");
	Элементы.ДекорацияОтключениеСервиса.Заголовок = СтрШаблон(ШаблонЗаголовка, АдресПриложения);
	
	РассчитатьКоличествоКабинетов();
	ОбновитьЗаголовокЛичныеКабинеты();
	
	СтрокаШаблон = НСтр("ru = 'Последние опубликованные расчетные листки:'");
	МесяцПубликацииПоследней = РегистрыСведений.РасчетныеЛисткиКабинетСотрудника.МесяцПубликацииРасчетныхЛистков();
	Если ЗначениеЗаполнено(МесяцПубликацииПоследней) Тогда
		МесяцПубликации = ДобавитьМесяц(МесяцПубликацииПоследней, 1);
		МесяцПубликацииРасчетныхЛистков = ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(МесяцПубликацииПоследней);
	Иначе
		МесяцПубликации = НачалоМесяца(ТекущаяДатаСеанса());
		МесяцПубликацииРасчетныхЛистков = НСтр("ru = 'Публикация не выполнялась'");
	КонецЕсли;
	Элементы.ДекорацияРасчетныеЛисткиПубликация.Заголовок = СтрШаблон("%1 %2", СтрокаШаблон, МесяцПубликацииРасчетныхЛистков);
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "МесяцПубликации", "МесяцПубликацииСтрокой");
	
	СтрокаСостояниеОплаты = НСтр("ru = 'Информация об оплаченных кабинетах отсутствует'");
	Элементы.ДекорацияСостояниеОплаты.Заголовок = СтрокаСостояниеОплаты;
	
	Элементы.ДекорацияТребуетсяПодключениеИП.Видимость = Не ИнтернетПоддержкаПодключена;
	
	МенеджерСервисаДоступен = КабинетСотрудникаМенеджерСервиса.МенеджерСервисаДоступен();
	Если Не МенеджерСервисаДоступен Тогда
		Элементы.СтраницыСостояниеСервиса.ТекущаяСтраница = Элементы.СтраницаСостояниеСервиса;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокЛичныеКабинеты()

	СтрокаШаблон =  НСтр("ru = 'Сейчас в сервисе публикуются данные для %1'");
	ПубликуемыхКабинетов = КоличествоКабинетов - КоличествоКабинетовСОшибками;
	Если ПубликуемыхКабинетов = 1 Тогда
		СтрокаПодстановки = НСтр("ru = '1 сотрудника'");
	Иначе
		СтрокаПодстановки = СтрШаблон(НСтр("ru = '%1 сотрудников'"), ПубликуемыхКабинетов);
	КонецЕсли;
	ТекстСообщения = СтрШаблон(СтрокаШаблон, СтрокаПодстановки);
	Элементы.ДекорацияЛичныеКабинеты.Заголовок = ТекстСообщения;
	
	ЕстьОшибкиЗаполнения = (КоличествоКабинетовСОшибками > 0);
	Элементы.ОшибкиЗаполнения.Видимость = ЕстьОшибкиЗаполнения;
	Элементы.ДекорацияЛичныеКабинетыОшибки.Видимость = ЕстьОшибкиЗаполнения;
	Если ЕстьОшибкиЗаполнения Тогда
		СтрокаШаблон =  НСтр("ru = 'Не публикуются данные из-за ошибок заполнения для %1'");
		Если КоличествоКабинетовСОшибками = 1 Тогда
			СтрокаПодстановки = НСтр("ru = '1 сотрудника'");
		Иначе
			СтрокаПодстановки = СтрШаблон(НСтр("ru = '%1 сотрудников'"), КоличествоКабинетовСОшибками);
		КонецЕсли;
		ТекстСообщенияНеПубликуется = СтрШаблон(СтрокаШаблон, СтрокаПодстановки);
		Элементы.ДекорацияЛичныеКабинетыОшибки.Заголовок = ТекстСообщенияНеПубликуется;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДанныеСервисаЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Результат.ИмяПриложения) И Не ЗначениеЗаполнено(Результат.Ответственный) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьОбновлениеСвойствПриложения(Результат);
	ПриНачалеЗадания();
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПривязкуАбонентаЗавершение(Результат, Параметры) Экспорт

	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	НачатьИзменениеАбонентаИнтернетПоддержки();
	ПриНачалеЗадания();
	
КонецПроцедуры

&НаСервере
Функция ОпубликоватьРасчетныеЛисткиНаСервере()
	
	ДлительнаяОперация = Неопределено;
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.Вставить("НаименованиеФоновогоЗадания",
		СтрШаблон(НСтр("ru = 'Выгрузка расчетных листов в 1С:Кабинет сотрудника'")));
	ПараметрыВыполненияВФоне.ОжидатьЗавершение = 0;
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"КабинетСотрудника.ОпубликоватьРасчетныеЛистыЗаМесяцВФоне",
		Новый Структура("Месяц", МесяцПубликации),
		ПараметрыВыполненияВФоне);
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьНаКлиентеПубликациюРасчетныхЛистков(ДлительнаяОперация, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ДлительнаяОперация) Тогда
		Если ДлительнаяОперация.Статус = "Ошибка" Тогда
			ПоказатьПредупреждение(, ДлительнаяОперация.КраткоеПредставлениеОшибки);
			Возврат;
		Иначе
			ТекстСообщения = НСтр("ru = 'Публикация расчетных листков выполнена.'");
			ПоказатьПредупреждение(, ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОтветеНаВопросОтключитьСервис(КодВозврата, ДополнительныеПараметры) Экспорт

	Если КодВозврата <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ОтключитьСервис.Доступность 	= Ложь;
	Элементы.ГруппаИнформация.Доступность 	= Ложь;
	Элементы.ГруппаСостояние.Доступность 	= Ложь;
	Элементы.ЛичныеКабинеты.Доступность 	= Ложь;
	Элементы.РасчетныеЛистки.Доступность 	= Ложь;
	
	НачатьОтключениеСервиса();
	ПриНачалеЗадания();

КонецПроцедуры

&НаКлиенте
Процедура ОпубликоватьОтветственноеЛицо()

	НачатьПубликациюОтветственногоЛица();
	ПриНачалеЗадания();

КонецПроцедуры

&НаКлиенте
Процедура СоздатьАдминистратораСервиса()

	НачатьСозданиеАдминистратораСервиса();
	ПриНачалеЗадания();	

КонецПроцедуры

&НаКлиенте
Процедура ОтложенноеОбновлениеИнтерфейса()

	ОбновитьИнтерфейс();

КонецПроцедуры

&НаСервере
Процедура ПерейтиКНовомуПодключению()

	РегистрыСведений.СостояниеОтложенногоПодключенияКСервису.СоздатьНаборЗаписей().Записать();
	ВыполнитьНачальноеЗаполнение();

КонецПроцедуры

&НаСервере
Процедура ВыполнитьНачальноеЗаполнение()

	НачатьСценарийПодключения = Ложь;
	НачатьПолучениеИнформацииОСервисе = Ложь;
	ОтложенноеПодключениеКСервису = Ложь;
	Элементы.СоздатьНовоеПодключение.Видимость = Ложь;
	
	СтрокаЗаголовок = НСтр("ru = '1С:Кабинет сотрудника. Подключение'");
	
	СервисПодключен = Константы.ИспользуетсяСервисКабинетСотрудника.Получить();
	СостояниеПодключения = РегистрыСведений.СостояниеОтложенногоПодключенияКСервису.СостояниеПодключенияКСервису();
	Если ЗначениеЗаполнено(СостояниеПодключения.Состояние) Тогда
		// Используется отложенное подключение к сервису.
		Если СостояниеПодключения.Состояние = Перечисления.СостоянияПодключенияКабинетСотрудника.Создано Тогда
			// подключение выполнено
			Если Не СервисПодключен Тогда
				СервисПодключен = Истина;
				ТребуетсяОбновитьИнтерфейс = Истина;
				Константы.ИспользуетсяСервисКабинетСотрудника.Установить(Истина);
				КабинетСотрудника.ВключитьНастройкиПрограммыПослеПодключенияСервиса();
				КабинетСотрудникаМенеджерСервиса.АктивироватьТестовыйТариф();
				// удаляем сведения отложенного подключения
				РегистрыСведений.СостояниеОтложенногоПодключенияКСервису.СоздатьНаборЗаписей().Записать();
			КонецЕсли;
		Иначе
			ИдентификаторПриложения = СостояниеПодключения.ИдентификаторПриложения;
			ОтложенноеПодключениеКСервису = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если СервисПодключен Тогда
		
		СтрокаЗаголовок = НСтр("ru = '1С:Кабинет сотрудника'");
		
		// Выключаем страницы, чтобы не было полосы прокрутки.
		Элементы.ПодключениеКСервису.Видимость = Ложь;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ИндикаторДлительнойОперацииОбновлениеПриложения", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ИндикаторДлительнойОперацииИзменениеАбонента", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ИндикаторДлительнойОтключениеСервиса", "Видимость", Ложь);
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СостояниеСервиса;
		Элементы.СтраницыСостояниеСервиса.ТекущаяСтраница = Элементы.СтраницаСостояниеСервиса;
		
		Если ЭтоАвтономноеРабочееМесто Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"СостояниеСервиса", "ТолькоПросмотр", Истина);
		Иначе
			
			НачатьПолучениеИнформацииОСервисе = Истина;
			
			Если ОбщегоНазначения.РазделениеВключено() Тогда
				Элементы.ИзменитьПривязкуАбонента.Видимость = Ложь;
				ИнтернетПоддержкаПодключена = Истина;
				Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
				Если Не Настройки.АбонентСервисаИнициализирован Тогда
					КабинетСотрудникаМенеджерСервиса.ИнициализироватьАбонентаСервиса();
				КонецЕсли;
			Иначе
				// Проверка наличия подсистемы уже выполнена.
				МодульИПП = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
				ИнтернетПоддержкаПодключена = МодульИПП.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьИнформациюОСервисеИзНастроекПрограммы();
		
	ИначеЕсли ОтложенноеПодключениеКСервису Тогда
		ИдентификаторПриложения = СостояниеПодключения.ИдентификаторПриложения;
		
		ФормаВРежимеПодключения = Истина;
		
		// Выключаем страницу, чтобы не было полосы прокрутки.
		Элементы.СостояниеСервиса.Видимость = Ложь;
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.ПодключениеКСервису;
		Элементы.СтраницыНовоеПодключение.ТекущаяСтраница = Элементы.СтраницаОтложенноеПодключение;
		ОшибкаСоздания = СостояниеПодключения.Состояние = Перечисления.СостоянияПодключенияКабинетСотрудника.ОшибкаСоздания;
		Элементы.СоздатьНовоеПодключение.Видимость = ОшибкаСоздания;
		Если ОшибкаСоздания Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ДекорацияОтложенноеПодключение",
				"Заголовок",
				НСтр("ru = 'При подключении к сервису возникли ошибки. Подробности в журнале регистрации.
					|Обратитесь в отдел технической поддержки сервиса по адресу support@1c-cabinet.ru'"));
		КонецЕсли;
	Иначе
		ФормаВРежимеПодключения = Истина;
		
		// Выключаем страницу, чтобы не было полосы прокрутки.
		Элементы.СостояниеСервиса.Видимость = Ложь;
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.ПодключениеКСервису;
		Элементы.СтраницыНовоеПодключение.ТекущаяСтраница = Элементы.СтраницаПодключение;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ИнтернетПоддержка", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ВыборАбонента", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ИндикаторДлительнойОперацииРезервированиеИмениДомена", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ИндикаторДлительнойОперацииПодключение", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"НастройкиПодключения", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"Этап5", "Видимость", Ложь);
		
		ЗаполнитьДанныеДляПроверкиИмениДомена();
		
		Если Не ЭтоАвтономноеРабочееМесто Тогда
			Если РазделениеВключено Тогда
				НачатьСценарийПодключения = Истина;
			Иначе
				// Проверка наличия подсистемы уже выполнена.
				МодульИПП = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
				ИнтернетПоддержкаПодключена = МодульИПП.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
				Если ИнтернетПоддержкаПодключена Тогда
					НачатьСценарийПодключения = Истина;
				Иначе
					ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
						"ИнтернетПоддержка", "Видимость", Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьНачальныеСообщения();
		ОбновитьЭУОтветственный(ЭтаФорма);
		КоличествоКабинетов = 1;
		РассчитатьПериодРасчетныхЛистков();
		ОбновитьСообщениеОПубликации();
		
	КонецЕсли;
	
	Заголовок = СтрокаЗаголовок;
	
	Если НачатьСценарийПодключения Тогда
		Элементы.СтраницыНовоеПодключение.ТекущаяСтраница = Элементы.СтраницаДлительнаяОперация;
		НачатьСценарийПодключения();
	ИначеЕсли НачатьПолучениеИнформацииОСервисе И МенеджерСервисаДоступен Тогда
		Элементы.СтраницыСостояниеСервиса.ТекущаяСтраница = Элементы.СтраницаСостояниеДлительнаяОперация;
		НачатьПолучениеИнформацииОСервисе();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

























