#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗначениеВДанныеФормы(НастройкаОтправкиИСостояниеПоследнейОтправки(), Организации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("ОбновитьСведенияНастроек", 300);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОрганизации

&НаКлиенте
Процедура ОрганизацииОтметкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	
	ИзменитьНастройкуПоОрганизации(ТекущиеДанные.Организация, Отметки(ТекущиеДанные));
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацииОСВПоСчетамПриИзменении(Элемент)
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	
	ИзменитьНастройкуПоОрганизации(ТекущиеДанные.Организация, Отметки(ТекущиеДанные));
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ОрганизацииСостояние" Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Состояние) Тогда
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("ОтборОрганизация", ТекущиеДанные.Организация);
			
			ОткрытьФорму("РегистрСведений.ЖурналПередачиОтчетностиВБанк.ФормаСписка",
				ПараметрыОткрытия, , ТекущиеДанные.Организация);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьСведенияНастроек()
	
	ОбновитьСведенияНастроекНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСведенияНастроекНаСервере()
	
	Отправки = НастройкаОтправкиИСостояниеПоследнейОтправки();
	
	Для Каждого СтрокаПоОрганизации Из Организации Цикл
		СтрокаНастройки = Отправки.Найти(СтрокаПоОрганизации.Организация, "Организация");
		Если СтрокаНастройки <> Неопределено Тогда
			СтрокаПоОрганизации.Транзакции  = СтрокаНастройки.Транзакции;
			СтрокаПоОрганизации.ОСВПоСчетам = СтрокаНастройки.ОСВПоСчетам;
			СтрокаПоОрганизации.Отправлено  = СтрокаНастройки.Отправлено;
			СтрокаПоОрганизации.Состояние   = СтрокаНастройки.Состояние;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НастройкаОтправкиИСостояниеПоследнейОтправки()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЖурналПередачиОтчетностиВБанк.Организация КАК Организация,
		|	МАКСИМУМ(ЖурналПередачиОтчетностиВБанк.ДатаОтправки) КАК ДатаОтправки
		|ПОМЕСТИТЬ ВТ_ПоследниеОтправки
		|ИЗ
		|	РегистрСведений.ЖурналПередачиОтчетностиВБанк КАК ЖурналПередачиОтчетностиВБанк
		|
		|СГРУППИРОВАТЬ ПО
		|	ЖурналПередачиОтчетностиВБанк.Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПоследниеОтправки.Организация КАК Организация,
		|	ВТ_ПоследниеОтправки.ДатаОтправки КАК ДатаОтправки,
		|	ЖурналПередачиОтчетностиВБанк.Состояние КАК Состояние
		|ПОМЕСТИТЬ ВТ_СостоянияПоследнихОтправок
		|ИЗ
		|	ВТ_ПоследниеОтправки КАК ВТ_ПоследниеОтправки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналПередачиОтчетностиВБанк КАК ЖурналПередачиОтчетностиВБанк
		|		ПО ВТ_ПоследниеОтправки.Организация = ЖурналПередачиОтчетностиВБанк.Организация
		|			И ВТ_ПоследниеОтправки.ДатаОтправки = ЖурналПередачиОтчетностиВБанк.ДатаОтправки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Организация,
		|	ЕСТЬNULL(НастройкиОтправкиОтчетностиВБанк.ОтправлятьОтчеты, ЛОЖЬ) КАК Транзакции,
		|	ЕСТЬNULL(НастройкиОтправкиОтчетностиВБанк.ОтправлятьОСВПоСчетам, ЛОЖЬ) КАК ОСВПоСчетам,
		|	ВТ_СостоянияПоследнихОтправок.ДатаОтправки КАК Отправлено,
		|	ВТ_СостоянияПоследнихОтправок.Состояние КАК Состояние
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтправкиОтчетностиВБанк КАК НастройкиОтправкиОтчетностиВБанк
		|		ПО Организации.Ссылка = НастройкиОтправкиОтчетностиВБанк.Организация
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СостоянияПоследнихОтправок КАК ВТ_СостоянияПоследнихОтправок
		|		ПО Организации.Ссылка = ВТ_СостоянияПоследнихОтправок.Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	НастройкиПоОрганизациям = Запрос.Выполнить().Выгрузить();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура();
	Отбор.Вставить("Метаданные", "ОтправкаОтчетностиВБанк");
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
	Для Каждого РегЗадание Из Задания Цикл
		Если РегЗадание.Параметры.Количество() > 0 Тогда
			Организация = РегЗадание.Параметры[0];
			СтрокаНастройки = НастройкиПоОрганизациям.Найти(Организация, "Организация");
			Если СтрокаНастройки <> Неопределено Тогда
				СтрокаНастройки.Транзакции  = (СтрокаНастройки.Транзакции И РегЗадание.Использование);
				СтрокаНастройки.ОСВПоСчетам = (СтрокаНастройки.ОСВПоСчетам И РегЗадание.Использование);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НастройкиПоОрганизациям;
	
КонецФункции

&НаКлиенте
Функция Отметки(СтрокаНастроек)
	
	Отметки = Новый Структура;
	Отметки.Вставить("Транзакции", СтрокаНастроек.Транзакции);
	Отметки.Вставить("ОСВПоСчетам", СтрокаНастроек.ОСВПоСчетам);
	
	Возврат Отметки;
	
КонецФункции

&НаСервере
Процедура ИзменитьНастройкуПоОрганизации(Организация, Отметки)
	
	ЗаписьНастройки = РегистрыСведений.НастройкиОтправкиОтчетностиВБанк.СоздатьМенеджерЗаписи();
	ЗаписьНастройки.Организация = Организация;
	
	ЗаписьНастройки.ОтправлятьОтчеты = Отметки.Транзакции;
	ЗаписьНастройки.ОтправлятьОСВПоСчетам = Отметки.ОСВПоСчетам;
	
	ЗаписьНастройки.Записать();
	
	ОтправлятьОтчеты = Ложь;
	Для Каждого Отметка Из Отметки Цикл
		ОтправлятьОтчеты = ОтправлятьОтчеты ИЛИ Отметка.Значение;
	КонецЦикла;
	
	Если ОтправлятьОтчеты Тогда
		ВключитьЗадание(Организация);
	Иначе
		ВыключитьЗадание(Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВключитьЗадание(Организация)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура();
	Отбор.Вставить("Метаданные", "ОтправкаОтчетностиВБанк");
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
	ТребуетсяСоздатьЗадание = Истина;
	
	Если Задания.Количество() > 0 Тогда
		Для Каждого РегЗадание Из Задания Цикл
			Если РегЗадание.Параметры.Количество() > 0 И РегЗадание.Параметры[0] = Организация Тогда
				ТребуетсяСоздатьЗадание = Ложь;
				
				Если НЕ РегЗадание.Использование Тогда
					ПараметрыЗадания = Новый Структура();
					ПараметрыЗадания.Вставить("Использование", Истина);
					РегламентныеЗаданияСервер.ИзменитьЗадание(РегЗадание, ПараметрыЗадания);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТребуетсяСоздатьЗадание Тогда
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ОтправкаОтчетностиВБанк);
		
		ПараметрыЗадания.Вставить("Параметры", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация));
		ПараметрыЗадания.Вставить("Расписание", РасписаниеОтправки());
		НаименованиеЗадания = СтрШаблон(НСтр("ru = 'Отправка отчетности в Сбербанк от %1'"), Организация);
		ПараметрыЗадания.Вставить("Наименование", НаименованиеЗадания);
		
		ПараметрыЗадания.Вставить("ИнтервалПовтораПриАварийномЗавершении",    1200);
		ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 3);
		ПараметрыЗадания.Вставить("Использование", Истина);
		
		РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ВыключитьЗадание(Организация)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура();
	Отбор.Вставить("Метаданные", "ОтправкаОтчетностиВБанк");
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
	Для Каждого РегЗадание Из Задания Цикл
		Если РегЗадание.Параметры.Количество() > 0 И РегЗадание.Параметры[0] = Организация Тогда
			РегламентныеЗаданияСервер.УдалитьЗадание(РегЗадание);
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Функция РасписаниеОтправки()
	
	ГСЧ = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ПериодПовтораДней = 1;
	Расписание.ПериодПовтораВТечениеДня = 0;
	Расписание.ВремяНачала = '00010101000000' + ГСЧ.СлучайноеЧисло(32400, 61200); // с 9:00 до 17:00
	
	Возврат Расписание;
	
КонецФункции

#КонецОбласти
