
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НастройкаХранилище = Константы.АР_НастройкаСроковОплаты.Получить();
	СтруктураНастроек = НастройкаХранилище.Получить();
	Если НЕ ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		СтруктураНастроек = Новый Структура;
	КонецЕсли;
	
	СтруктураНастроек.Свойство("ДетализацияСроковОплаты", ДетализацияСроковОплаты);
	Если СтруктураНастроек.Свойство("СрокиОплаты") Тогда
		СрокиОплаты.Загрузить(СтруктураНастроек.СрокиОплаты);
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонки();
	УстановитьУсловноеОформление();
	ВестиВзаиморасчетыПоУслугам = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимость();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СпособОпределенияСрокаОплатыПриИзменении(Элемент)
	
	ИндексСтроки = ПолучитьИндексСтроки(Элемент);
	СтрокаСрокОплаты = СрокиОплаты[ИндексСтроки];
	
	Если СтрокаСрокОплаты.СпособОпределенияСрокаОплаты = ПредопределенноеЗначение("Перечисление.АР_СпособыРасчетаПросрочки.ПоПериодуНачисления") Тогда
		СтрокаСрокОплаты.СрокОплаты = 1;
	КонецЕсли;
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаНачисленияПениПриИзменении(Элемент)
	
	ИндексСтроки = ПолучитьИндексСтроки(Элемент);
	СтрокаСрокОплаты = СрокиОплаты[ИндексСтроки];
		
	СтрокаСрокОплаты.КоличествоДнейОтсрочки = СтрокаСрокОплаты.ДатаНачалаНачисленияПени;
	Если СтрокаСрокОплаты.КоличествоДнейОтсрочки = 0 Тогда
		СтрокаСрокОплаты.УчитыватьТолькоРабочиеДниОтсрочки = Ложь;		
	КонецЕсли;
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоДнейПросрочкиПриИзменении(Элемент)
	
	ИндексСтроки = ПолучитьИндексСтроки(Элемент);
	СтрокаСрокОплаты = СрокиОплаты[ИндексСтроки];
	
	Если СтрокаСрокОплаты.КоличествоДнейОтсрочки = 0 Тогда
		СтрокаСрокОплаты.ДатаНачалаНачисленияПени = 0;
		СтрокаСрокОплаты.УчитыватьТолькоРабочиеДниОтсрочки = Ложь;		
	Иначе
		СтрокаСрокОплаты.ДатаНачалаНачисленияПени = 1;		
	КонецЕсли;
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоДнейОтДатыСчетаАктаПриИзменении(Элемент)
	
	ИндексСтроки = ПолучитьИндексСтроки(Элемент);
	СтрокаСрокОплаты = СрокиОплаты[ИндексСтроки];
	
	Если СтрокаСрокОплаты.КоличествоДнейОтДатыСчетаАкта = 0 Тогда
		СтрокаСрокОплаты.УчитыватьТолькоРабочиеДниОтДатыСчетаАкта = Ложь;		
	КонецЕсли;
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ДетализацияСроковОплатыПриИзменении(Элемент)
	
	Если ДетализацияСроковОплаты = ПредопределенноеЗначение("Перечисление.АР_ДетализацииСроковОплаты.ОбщиеУсловия") Тогда
		Пока СрокиОплаты.Количество() > 1 Цикл
			СрокиОплаты.Удалить(1);
		КонецЦикла;
		Если СрокиОплаты.Количество() < 1 Тогда
			СрокиОплаты.Добавить();
		КонецЕсли;
		СрокиОплаты[0].НазначениеСрока = ПредопределенноеЗначение("Перечисление.АР_ВариантыНазначенияСрокаОплаты.Общий");
		СрокиОплаты[0].Услуга = Неопределено;
	ИначеЕсли ДетализацияСроковОплаты = ПредопределенноеЗначение("Перечисление.АР_ДетализацииСроковОплаты.РаздельныеУсловия") Тогда
		Пока СрокиОплаты.Количество() > 2 Цикл
			СрокиОплаты.Удалить(1);
		КонецЦикла;
		Пока СрокиОплаты.Количество() < 2 Цикл
			СрокиОплаты.Добавить();
		КонецЦикла;
		СрокиОплаты[0].НазначениеСрока = ПредопределенноеЗначение("Перечисление.АР_ВариантыНазначенияСрокаОплаты.ПостояннаяЧасть");
		СрокиОплаты[1].НазначениеСрока = ПредопределенноеЗначение("Перечисление.АР_ВариантыНазначенияСрокаОплаты.ПеременнаяЧасть");
		СрокиОплаты[0].Услуга = Неопределено;
		СрокиОплаты[1].Услуга = Неопределено;
	Иначе
		Для каждого СтрокаСрокОплаты Из СрокиОплаты Цикл
			Если СтрокаСрокОплаты.НазначениеСрока = ПредопределенноеЗначение("Перечисление.АР_ВариантыНазначенияСрокаОплаты.Общий") Тогда
				СтрокаСрокОплаты.НазначениеСрока = ПредопределенноеЗначение("Перечисление.АР_ВариантыНазначенияСрокаОплаты.ПостояннаяЧасть");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура СрокиОплатыНазначениеСрокаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СрокиОплаты.ТекущиеДанные;
	Если ТекущиеДанные.НазначениеСрока <> ПредопределенноеЗначение("Перечисление.АР_ВариантыНазначенияСрокаОплаты.ДляУслуги") Тогда
		ТекущиеДанные.Услуга = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокиОплатыПериодСрокаОплатыПредставлениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СрокиОплаты.ТекущиеДанные;
	Если ТекущиеДанные.ПериодСрокаОплатыПредставление = "Предыдущий" Тогда
		ТекущиеДанные.ПериодСрокаОплаты = -1;
	ИначеЕсли ТекущиеДанные.ПериодСрокаОплатыПредставление = "Текущий" Тогда
		ТекущиеДанные.ПериодСрокаОплаты = 0;
	ИначеЕсли ТекущиеДанные.ПериодСрокаОплатыПредставление = "Следующий" Тогда
		ТекущиеДанные.ПериодСрокаОплаты = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокиОплатыСпособОпределенияСрокаОплатыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СрокиОплаты.ТекущиеДанные;
	Если ТекущиеДанные.СпособОпределенияСрокаОплаты = ПредопределенноеЗначение("Перечисление.АР_СпособыРасчетаПросрочки.ПоПериодуНачисления") Тогда
		ТекущиеДанные.КоличествоДнейОтДатыСчетаАкта = 0;
		ТекущиеДанные.УчитыватьТолькоРабочиеДниОтДатыСчетаАкта = Ложь;
	Иначе
		ТекущиеДанные.СрокОплаты = 0;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ЗаписатьИЗакрытьНаСервере();
	
	Оповестить("АР_ИзмененыНастройкиСроковОплаты");
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИндексСтроки(Элемент)
	
	Если Найти(Элемент.Имя, "ПостояннаяЧасть") > 0 Тогда
		ИндексСтроки = 0;
	Иначе
		ИндексСтроки = 1;
	КонецЕсли;
	Возврат ИндексСтроки;
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидимость()
	
	//Видимость элементов формы на закладке "Срок оплаты и начисление пени"
	ОбщиеУсловия = ДетализацияСроковОплаты = ПредопределенноеЗначение("Перечисление.АР_ДетализацииСроковОплаты.ОбщиеУсловия");
	РаздельныеУсловия = ДетализацияСроковОплаты = ПредопределенноеЗначение("Перечисление.АР_ДетализацииСроковОплаты.РаздельныеУсловия");
	ДетализацияДоУслуг = ДетализацияСроковОплаты = ПредопределенноеЗначение("Перечисление.АР_ДетализацииСроковОплаты.ДетализацияДоУслуг");
	КоличествоСтрок = СрокиОплаты.Количество();
	
	Элементы.ДетализацияСроковОплаты.Доступность = ВестиВзаиморасчетыПоУслугам;
	
	Элементы.ГруппаОбщиеУсловия.Видимость = ОбщиеУсловия ИЛИ РаздельныеУсловия;
	Элементы.ГруппаДетализацияДоУслуг.Видимость = ДетализацияДоУслуг;
	Элементы.ГруппаСрокОплатыПеременнаяЧасть.Видимость = РаздельныеУсловия;
	Элементы.ГруппаНачислениеПениПеременнаяЧасть.Видимость = РаздельныеУсловия;
	Элементы.ГруппаСрокОплатыПостояннаяЧасть.ОтображатьЗаголовок = РаздельныеУсловия;
	
	Элементы.ГруппаСрокОплатыПеременнаяЧасть.Доступность = ВестиВзаиморасчетыПоУслугам;
	Элементы.ГруппаНачислениеПениПеременнаяЧасть.Доступность = ВестиВзаиморасчетыПоУслугам;
	
	Элементы.СрокОплатыПостояннаяЧасть.Видимость = ?(КоличествоСтрок > 0, СрокиОплаты[0].СпособОпределенияСрокаОплаты = ПредопределенноеЗначение("Перечисление.АР_СпособыРасчетаПросрочки.ПоПериодуНачисления"), Ложь);
	Элементы.СрокОплатыПеременнаяЧасть.Видимость = ?(КоличествоСтрок > 1, СрокиОплаты[1].СпособОпределенияСрокаОплаты = ПредопределенноеЗначение("Перечисление.АР_СпособыРасчетаПросрочки.ПоПериодуНачисления"), Ложь);
	
	Элементы.ПериодСрокаОплатыПостояннаяЧасть.Видимость = ?(КоличествоСтрок > 0, СрокиОплаты[0].СпособОпределенияСрокаОплаты = ПредопределенноеЗначение("Перечисление.АР_СпособыРасчетаПросрочки.ПоПериодуНачисления"), Ложь);
	Элементы.ПериодСрокаОплатыПеременнаяЧасть.Видимость = ?(КоличествоСтрок > 1, СрокиОплаты[1].СпособОпределенияСрокаОплаты = ПредопределенноеЗначение("Перечисление.АР_СпособыРасчетаПросрочки.ПоПериодуНачисления"), Ложь);
		
	Элементы.УчитыватьТолькоРабочиеДниОтсрочкиПостояннаяЧасть.Доступность = ?(КоличествоСтрок > 0, СрокиОплаты[0].КоличествоДнейОтсрочки > 0, Ложь);
	Элементы.УчитыватьТолькоРабочиеДниОтсрочкиПеременнаяЧасть.Доступность = ?(КоличествоСтрок > 1, СрокиОплаты[1].КоличествоДнейОтсрочки > 0, Ложь);
	
	Элементы.УчитыватьТолькоРабочиеДниОтДатыСчетаАктаПостояннаяЧасть.Доступность = ?(КоличествоСтрок > 0, СрокиОплаты[0].КоличествоДнейОтДатыСчетаАкта > 0, Ложь);
	Элементы.УчитыватьТолькоРабочиеДниОтДатыСчетаАктаПеременнаяЧасть.Доступность = ?(КоличествоСтрок > 1, СрокиОплаты[1].КоличествоДнейОтДатыСчетаАкта > 0, Ложь);
	
	Элементы.ГруппаКоличествоДнейОтДатыСчетаАктаПостояннаяЧасть.Видимость = ?(КоличествоСтрок > 0, 
		СрокиОплаты[0].СпособОпределенияСрокаОплаты = ПредопределенноеЗначение("Перечисление.АР_СпособыРасчетаПросрочки.ПоДатеНачисления")
		ИЛИ СрокиОплаты[0].СпособОпределенияСрокаОплаты = ПредопределенноеЗначение("Перечисление.АР_СпособыРасчетаПросрочки.ПоДатеСчета"), Ложь);
	Элементы.ГруппаКоличествоДнейОтДатыСчетаАктаПеременнаяЧасть.Видимость = ?(КоличествоСтрок > 1, 
		СрокиОплаты[1].СпособОпределенияСрокаОплаты = ПредопределенноеЗначение("Перечисление.АР_СпособыРасчетаПросрочки.ПоДатеНачисления")
		ИЛИ СрокиОплаты[1].СпособОпределенияСрокаОплаты = ПредопределенноеЗначение("Перечисление.АР_СпособыРасчетаПросрочки.ПоДатеСчета"), Ложь);
	
	Если КоличествоСтрок > 0 Тогда
		Если СрокиОплаты[0].СпособОпределенияСрокаОплаты = ПредопределенноеЗначение("Перечисление.АР_СпособыРасчетаПросрочки.ПоДатеНачисления") Тогда
			Элементы.КоличествоДнейОтДатыСчетаАктаПостояннаяЧасть.Заголовок = "Количество дней от даты акта";
		ИначеЕсли СрокиОплаты[0].СпособОпределенияСрокаОплаты = ПредопределенноеЗначение("Перечисление.АР_СпособыРасчетаПросрочки.ПоДатеСчета") Тогда
			Элементы.КоличествоДнейОтДатыСчетаАктаПостояннаяЧасть.Заголовок = "Количество дней от даты счета";
		КонецЕсли;
	КонецЕсли;
	Если КоличествоСтрок > 1 Тогда
		Если СрокиОплаты[1].СпособОпределенияСрокаОплаты = ПредопределенноеЗначение("Перечисление.АР_СпособыРасчетаПросрочки.ПоДатеНачисления") Тогда
			Элементы.КоличествоДнейОтДатыСчетаАктаПеременнаяЧасть.Заголовок = "Количество дней от даты акта";
		ИначеЕсли СрокиОплаты[1].СпособОпределенияСрокаОплаты = ПредопределенноеЗначение("Перечисление.АР_СпособыРасчетаПросрочки.ПоДатеСчета") Тогда
			Элементы.КоличествоДнейОтДатыСчетаАктаПеременнаяЧасть.Заголовок = "Количество дней от даты счета";
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ГруппаКоличествоДнейПросрочкиПостояннаяЧасть.Видимость = ?(КоличествоСтрок > 0, СрокиОплаты[0].ДатаНачалаНачисленияПени = 1, Ложь);
	Элементы.ГруппаКоличествоДнейПросрочкиПеременнаяЧасть.Видимость = ?(КоличествоСтрок > 1, СрокиОплаты[1].ДатаНачалаНачисленияПени = 1, Ложь);
	
	Если ВестиВзаиморасчетыПоУслугам Тогда
		Элементы.ГруппаСрокОплатыПеременнаяЧасть.Подсказка = "Переменная часть";
		Элементы.ГруппаСрокОплатыПеременнаяЧасть.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
	Иначе
		Элементы.ГруппаСрокОплатыПеременнаяЧасть.Подсказка = "Настройки сроков оплаты постоянной и переменной части могут различаться только при условии 
		|ведения взаиморасчетов по услугам (установлен соответствующий признак в карточке договора контрагента).";
		Элементы.ГруппаСрокОплатыПеременнаяЧасть.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	КонецЕсли;
	
	Элементы.ГруппаОбщиеПараметры.ОтображатьЗаголовок = РаздельныеУсловия;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// СрокиОплатыУслуга

	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокиОплатыУслуга");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СрокиОплаты.НазначениеСрока", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.АР_ВариантыНазначенияСрокаОплаты.ДляУслуги);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
		
	// СрокиОплатыСрокОплаты

	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокиОплатыСрокОплаты");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокиОплатыПериодСрокаОплатыПредставление");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СрокиОплаты.СпособОпределенияСрокаОплаты", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.АР_СпособыРасчетаПросрочки.ПоПериодуНачисления);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
	// СрокиОплатыКоличествоДнейОтДатыСчетаАкта

	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокиОплатыКоличествоДнейОтДатыСчетаАкта");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокиОплатыУчитыватьТолькоРабочиеДниОтДатыСчетаАкта");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СрокиОплаты.СпособОпределенияСрокаОплаты", ВидСравненияКомпоновкиДанных.Равно, Перечисления.АР_СпособыРасчетаПросрочки.ПоПериодуНачисления);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонки()
	
	Для каждого СтрокаСрокОплаты Из СрокиОплаты Цикл
		СтрокаСрокОплаты.ДатаНачалаНачисленияПени = ?(СтрокаСрокОплаты.КоличествоДнейОтсрочки = 0, 0, 1);
		Если СтрокаСрокОплаты.ПериодСрокаОплаты = -1 Тогда
			СтрокаСрокОплаты.ПериодСрокаОплатыПредставление = "Предыдущий";
		ИначеЕсли СтрокаСрокОплаты.ПериодСрокаОплаты = 0 Тогда
			СтрокаСрокОплаты.ПериодСрокаОплатыПредставление = "Текущий";
		ИначеЕсли СтрокаСрокОплаты.ПериодСрокаОплаты = 1 Тогда
			СтрокаСрокОплаты.ПериодСрокаОплатыПредставление = "Следующий";
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаписатьИЗакрытьНаСервере()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ДетализацияСроковОплаты", ДетализацияСроковОплаты);
	СтруктураНастроек.Вставить("СрокиОплаты", СрокиОплаты.Выгрузить());
		
	НастрокаХранилище = Новый ХранилищеЗначения(СтруктураНастроек);
	Константы.АР_НастройкаСроковОплаты.Установить(НастрокаХранилище);
	
КонецПроцедуры

#КонецОбласти
