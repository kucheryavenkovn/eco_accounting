#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПрочитатьЗначенияКонстант();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		Отказ = Истина;
		
		Если ЗавершениеРаботы Тогда
			Возврат;
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если Не ИспользоватьСервисРегиональныеСтавкиНалогов Тогда
		МассивНепроверяемыхРеквизитов.Добавить("АдресСервисаРегиональныеСтавкиНалогов");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьСервисРегиональныеСтавкиНалоговПриИзменении(Элемент)
	
	Если Не ИспользоватьСервисРегиональныеСтавкиНалогов Тогда
		АдресСервисаРегиональныеСтавкиНалогов = "";
		Идентификатор = "";
		Секрет = "";
		ОписаниеВременногоТокена.Очистить();
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Секрет = "";
		СекретИзменен = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СекретПриИзменении(Элемент)
	
	СекретИзменен = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если ЗаписатьЗначенияКонстант() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	Если ЗаписатьЗначенияКонстант() Тогда
		ОбновитьТокенВФоне();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТокен(Команда)
	
	Если Не Модифицированность Или ЗаписатьЗначенияКонстант() Тогда
		ОбновитьТокенВФоне();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	ИспользоватьСервис = Форма.ИспользоватьСервисРегиональныеСтавкиНалогов;
	
	Элементы.АдресСервисаРегиональныеСтавкиНалогов.Доступность = ИспользоватьСервис;
	Элементы.УчетнаяЗапись.Доступность = ИспользоватьСервис;
	Элементы.Токен.Доступность = ИспользоватьСервис;
	
	Элементы.ОбновитьТокен.Доступность = Не ЗначениеЗаполнено(Форма.ИдентификаторЗадания);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьЗначенияКонстант()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИспользоватьСервисРегиональныеСтавкиНалогов.Значение КАК ИспользоватьСервисРегиональныеСтавкиНалогов,
	|	АдресСервисаРегиональныеСтавкиНалогов.Значение КАК АдресСервисаРегиональныеСтавкиНалогов
	|ИЗ
	|	Константа.ИспользоватьСервисРегиональныеСтавкиНалогов КАК ИспользоватьСервисРегиональныеСтавкиНалогов,
	|	Константа.АдресСервисаРегиональныеСтавкиНалогов КАК АдресСервисаРегиональныеСтавкиНалогов";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	КонецЕсли;
	
	Если ИспользоватьСервисРегиональныеСтавкиНалогов Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ДанныеБезопасногоХранилища = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
			РегиональныеСтавкиНалогов.ВладелецДанныхБезопасногоХранилища(),
			"Идентификатор, Секрет",
			Истина);
		Если ДанныеБезопасногоХранилища <> Неопределено Тогда
			Идентификатор = ДанныеБезопасногоХранилища.Идентификатор;
			Секрет = ?(ЗначениеЗаполнено(ДанныеБезопасногоХранилища.Секрет), ЭтотОбъект.УникальныйИдентификатор, "");
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
		
		Попытка
			СвойстваВременногоТокена = РегиональныеСтавкиНалогов.СвойстваВременногоТокена();
		Исключение
			// Сервис может быть уже включен, но учетная запись не задана,
			// поэтому получение свойств токена вызовет исключение.
			СвойстваВременногоТокена = Неопределено;
		КонецПопытки;
		
		ПоказатьСвойстваВременногоТокена(ЭтотОбъект, СвойстваВременногоТокена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьЗначенияКонстант()
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Константы.ИспользоватьСервисРегиональныеСтавкиНалогов.Установить(ИспользоватьСервисРегиональныеСтавкиНалогов);
		Константы.АдресСервисаРегиональныеСтавкиНалогов.Установить(АдресСервисаРегиональныеСтавкиНалогов);
		
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
			РегиональныеСтавкиНалогов.ВладелецДанныхБезопасногоХранилища(),
			Идентификатор,
			"Идентификатор");
		УстановитьПривилегированныйРежим(Ложь);
		
		Если СекретИзменен Тогда
			УстановитьПривилегированныйРежим(Истина);
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
				РегиональныеСтавкиНалогов.ВладелецДанныхБезопасногоХранилища(),
				Секрет,
				"Секрет");
			Секрет = ?(ЗначениеЗаполнено(Секрет), ЭтотОбъект.УникальныйИдентификатор, "");
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
		Если Не ИспользоватьСервисРегиональныеСтавкиНалогов Тогда
			ВременныйТокенУдален = РегиональныеСтавкиНалогов.УдалитьВременныйТокен();
			Если Не ВременныйТокенУдален Тогда
				ВызватьИсключение "Не удалось очистить значение временного токена";
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		СекретИзменен = Ложь;
		Модифицированность = Ложь;
		
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
	Возврат Не Модифицированность;
	
КонецФункции

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьЗначенияКонстант();
		Закрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#Область ОбновлениеТокена

&НаКлиенте
Процедура ОбновитьТокенВФоне()
	
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		ОписаниеВременногоТокена.Очистить();
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = ЗапуститьОбновлениеТокена(ИдентификаторЗадания, УникальныйИдентификатор);
	Если ДлительнаяОперация = Неопределено Тогда
		ОписаниеВременногоТокена.Очистить();
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ТекстСообщения = НСтр("ru = 'Получение результата обновления временного токена'");
		Обработчик = Новый ОписаниеОповещения("ОбработкаРезультатаОбновленияВременногоТокена", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ДлительнаяОперация.ПодробноеПредставлениеОшибки);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапуститьОбновлениеТокена(Знач ИдентификаторЗадания, Знач ИдентификаторФормы)
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	КонецЕсли;
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = Сервис Региональные ставки налогов: обновление временного токена'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"РегиональныеСтавкиНалогов.ОбновитьВременныйТокен", ,
		НастройкиЗапуска);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаРезультатаОбновленияВременногоТокена(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		
		Если ЭтоАдресВременногоХранилища(ДлительнаяОперация.АдресРезультата) Тогда
			СвойстваВременногоТокена = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
			УдалитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		КонецЕсли;
		
		ПоказатьСвойстваВременногоТокена(ЭтотОбъект, СвойстваВременногоТокена);
		
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ДлительнаяОперация.ПодробноеПредставлениеОшибки);
	КонецЕсли;
	
	ИдентификаторЗадания = Неопределено;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСвойстваВременногоТокена(Форма, СвойстваВременногоТокена)
	
	Форма.ОписаниеВременногоТокена.Очистить();
	
	Если ЗначениеЗаполнено(СвойстваВременногоТокена) Тогда
		
		КлючиДат = Новый Массив;
		КлючиДат.Добавить("iat");
		КлючиДат.Добавить("exp");
		
		Для Каждого КлючИЗначение Из СвойстваВременногоТокена Цикл
			Если КлючиДат.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
				Значение = СтрШаблон("%1 (%2)", КлючИЗначение.Значение, МестноеВремя(Дата(1970, 1, 1) + КлючИЗначение.Значение));
			Иначе
				Значение = КлючИЗначение.Значение;
			КонецЕсли;
			Форма.ОписаниеВременногоТокена.ДобавитьСтроку(СтрШаблон("%1: %2", КлючИЗначение.Ключ, Значение));
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
