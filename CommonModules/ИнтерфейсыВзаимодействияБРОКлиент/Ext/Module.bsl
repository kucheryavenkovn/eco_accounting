////////////////////////////////////////////////////////////////////////////////
// Модуль содержит процедуры и функции интерфейсов взаимодействия БРО
// с другими библиотеками/конфигурациями.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ЗапросВФНСНаПроверкуСведенийРаботников

// Процедура создает и записывает на диск файл(-ы) для представления в налоговую инспекцию
// запроса работодателя на проверку ИНН, ФИО, СНИЛС работающих лиц в электронной форме.
//
// Параметры:
//  СтруктураПараметров - Структура - варианты свойств:
//     Вариант 1:
//        * Организация - СправочникСсылка.Организации - организация, по работникам
//                        которой будут формироваться сведения для файла;
//        * ДатаПодписи - Дата - дата, на которую будут формироваться сведения для файла;
//        * РазмерПачки - Число - допустимое количество физических лиц в одном файле
//                        (необязательный параметр, по умолчанию допустимое количество равно 200;
//                        в случае превышения, будет записано необходимое количество файлов).
//     Вариант 2:
//        * РасчетПоСтраховымВзносам - ДокументСсылка.РегламентированныйОтчет - документ,
//                        по данным которого будут формироваться сведения для файла;
//        * РазмерПачки - Число - допустимое количество физических лиц в одном файле
//                        (необязательный параметр, по умолчанию допустимое количество равно 200;
//                        в случае превышения, будет записано необходимое количество файлов).
//
Процедура СформироватьИСохранитьНаДискФайлЗапросаВФНСНаПроверкуСведенийРаботников(СтруктураПараметров) Экспорт
	
	ПараметрыСохранения
	= ИнтерфейсыВзаимодействияБРОВызовСервера.СформироватьФайлЗапросаВФНСНаПроверкуСведенийРаботников(
	СтруктураПараметров);
	
	Если ТипЗнч(ПараметрыСохранения) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаДискФайлЗапросаВФНСНаПроверкуСведенийРаботников(ПараметрыСохранения);
	
КонецПроцедуры

#КонецОбласти

#Область РучнойВводСтатусовОтправки

// Процедура предназначена для установки вручную статуса отправки из экранных форм объектов,
// отображаемых на закладке "Отчеты" формы "1С-Отчетность", путем выбора значения из выпадающего списка.
//
// Параметры:
//  ПараметрыИзменения - Структура со свойствами:
//    "Форма" - ФормаКлиентскогоПриложения - форма регл. отчета или уведомления о спецрежимах налогообложения;
//    "Организация" - СправочникСсылка.Организации - организация;
//    "КонтролирующийОрган" - Перечисление.ТипыКонтролирующихОрганов - контролирующий орган;
//    "ТекстВопроса" (необязательный) - Строка - текст предупреждения при попытке установить статус "Сдано".
//
Процедура ИзменитьСтатусОтправки(ПараметрыИзменения) Экспорт
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

#Область УведомлениеОбИзмененииОКТМО

// Показывает организациям из Московской области уведомление об изменении ОКТМО в 2018 году.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - ссылка на организацию для которой нужно вывести уведомление.
//   ОповещениеПродолжения - ОписаниеОповещения - описание оповещения, вызываемого после закрытия формы.
//
Процедура ПоказатьУведомлениеОбИзмененииОКТМО46(Организация, ОповещениеПродолжения = Неопределено) Экспорт
	
	ТекущаяДата = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	Если ЗначениеЗаполнено(Организация) И ТекущаяДата < '2018-04-01'
	   И ИнтерфейсыВзаимодействияБРОВызовСервера.ТребуетсяВыводУведомлениеОбИзмененииОКТМО46(Организация) Тогда
		Параметры = Новый Структура;
		Параметры.Вставить("Организация", Организация);
		
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.УведомлениеОбИзменениеОКТМО46",
			Параметры, , , , , ОповещениеПродолжения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	Иначе
		Если ОповещениеПродолжения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПродолжения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ТаможенноеДекларирование

// Возвращает процедуры таможенного декларирования на сайте ФТС edata.customs.ru,
// при необходимости, запрашивает логин и пароль портала ФТС и может запомнить их в 1С-Отчетности.
//
// Параметры:
//   ОповещениеОЗавершении - ОписаниеОповещения - описание процедуры, принимающей результат.
//     Результат - Массив:
//       * РегистрационныйНомер  - Строка - пример: "10013160/160620/0302033", "null" - не задан
//                                          (для выпущенных и зарегистрированных ДТ всегда задан)
//       * ДатаСоздания          - Строка - пример: "2020-06-16T17:26:16";
//       * ТипПроцедуры          - Строка - пример: "ЭК 10", "ИМ 40", число кода процедуры согласно классификатору
//                                          в решении Комиссии Таможенного союза от 20.09.2010 N 378
//                                          (ред. от 21.04.2020) "О классификаторах, используемых для заполнения
//                                          таможенных документов", приложении 1
//                                          http://www.consultant.ru/document/cons_doc_LAW_105110/ec01d1f8f765126d090770e15d2f714e88c4bc67/
//       * Статус                - Строка - пример: "10", у старых ДТ пустая строка; классификатор статусов
//                                          есть в решении Комиссии Таможенного союза от 20.09.2010 N 378
//                                          (ред. от 21.04.2020) "О классификаторах, используемых для заполнения
//                                          таможенных документов", приложении 14
//                                          http://www.consultant.ru/document/cons_doc_LAW_105110/6b14436828c8d727b30feb8feaf7b8f9585b03cd/
//           Только для РежимПолучения = "":
//       * Примечание            - Строка.
//           Только для РежимПолучения = "ВыпущенныеДТ":
//       * ВсегоТоваровМест      - Строка - пример: "3/2"
//       * ОбщаяСтоимость        - Строка - пример: "8 620 403,79 RUB"
//       * ДатаРешения           - Строка - пример: "16.06.2020"
//       * Отправитель           - Строка - пример: ""MICROSOFT IRELAND OPERATIONS LTD" СО СКЛАДА "TEST" ИНН  КПП "
//       * Получатель            - Строка - пример: "ООО "Тест" ИНН 9620030509 КПП 962001001"
//       * СтранаОтправления     - Строка - пример: "НИДЕРЛАНДЫ"
//       * СтранаНазначения      - Строка - пример: "РОССИЯ"
//       * СтранаПроисхождения   - Строка - пример: "РАЗНЫЕ", "КИТАЙ"
//       * ОтветственныйЗаФинУрегулирование - Строка - пример: "ООО "Тест" ИНН 9620030509 КПП 962001001" (при импорте)
//       * Идентификатор         - Строка - пример: "f9c0e49e-f5b8-3e27-b9b4-84fdf001985c"
//       * ПроцедураВЛК          - Строка - пример: "null"
//       * ДатаРегистрации       - Строка - пример: "2020-06-16T00:00:00"
//       * КодРегистрации        - Строка - пример: "10015160"
//       * ПорядковыйНомер       - Строка - пример: "0305033"
//       * Декларант             - Строка - пример: "ООО "Тест" ИНН 9620030509 КПП 962001001"
//       * ИмяОтправителя        - Строка - пример: ""MICROSOFT IRELAND OPERATIONS LTD" СО СКЛАДА "TEST""
//       * ИмяПолучателя         - Строка - пример: "ООО "Тест""
//       * Модель                - Строка - пример: "AUDRequest"
//       * ИмяСтатуса            - Строка - пример: "Saved"
//       * Версия                - Строка - пример: "4.2.0/1.0.0"
//   Организация           - СправочникСсылка.Организации - ссылка на организацию,
//                                                          настройки обмена с ФТС которой используются.
//   РежимПолучения        - Строка - "ВыпущенныеДТ" для выпущенных и зарегистриорванных деклараций на товары,
//                                    примеры результатов приведены для этого варианта;
//                                  - "" для заводимых вручную в личном кабинете ФТС процедур декларирования.
//   Отборы - Структура с необязательными свойствами, по которым выполняется отбор, если свойства присутствуют, заданы:
//     * ТипПроцедуры         - Строка - "ЭК" - экспорт, "ИМ" - импорт;
//     * ДатаРешенияС         - Дата;
//     * ДатаРешенияПо        - Дата;
//     * РегистрационныйНомер - Строка.
//
Процедура ПолучитьПроцедурыДекларированияФТС(
		ОповещениеОЗавершении,
		Организация,
		РежимПолучения = "ВыпущенныеДТ",
		Отборы = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", 	ОповещениеОЗавершении);
	ДополнительныеПараметры.Вставить("Организация", 			Организация);
	ДополнительныеПараметры.Вставить("РежимПолучения", 			РежимПолучения);
	ДополнительныеПараметры.Вставить("Отборы", 					Отборы);
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьПроцедурыДекларированияФТСПослеПолученияКонтекста",
		ЭтотОбъект, ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(Оповещение);
	
КонецПроцедуры

#КонецОбласти

Процедура ЗапроситьВыпискуОперацийПоРасчетуСБюджетом(ОповещениеОЗавершении, Организация, РегистрацияВНалоговомОргане, Год) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	ДополнительныеПараметры.Вставить("Организация", Организация);
	ДополнительныеПараметры.Вставить("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
	ДополнительныеПараметры.Вставить("Год", Год);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗапроситьВыпискуОперацийПоРасчетуСБюджетом_Завершение", ЭтотОбъект, ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗапроситьВыпискуОперацийПоРасчетуСБюджетом_Завершение(Результат, ВходящийКонтекст) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ТекстОшибки);
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Неопределено);
		Возврат;
		
	КонецЕсли;
	
	КонтекстЭДОКлиент.ЗапроситьВыпискуОперацийПоРасчетуСБюджетом(ВходящийКонтекст);
	
КонецПроцедуры

#Область ЗапросВФНСНаПроверкуСведенийРаботников

Процедура СохранитьНаДискФайлЗапросаВФНСНаПроверкуСведенийРаботников(ПараметрыСохранения)
	
	Оп = Новый ОписаниеОповещения(
	"СохранитьНаДискФайлЗапросаВФНСНаПроверкуСведенийРаботниковПродолжение", ЭтотОбъект, ПараметрыСохранения);
	
	НачатьПодключениеРасширенияРаботыСФайлами(Оп);
	
КонецПроцедуры

Процедура СохранитьНаДискФайлЗапросаВФНСНаПроверкуСведенийРаботниковПродолжение(Подключено, ПараметрыСохранения) Экспорт
	
	Если НЕ Подключено Тогда
		Для каждого ОпПередаваемогоФайла Из ПараметрыСохранения.ПолучаемыеФайлы Цикл
			ПолучитьФайл(ОпПередаваемогоФайла.Хранение, ОпПередаваемогоФайла.Имя, Истина);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Оп = Новый ОписаниеОповещения(
	"СохранитьНаДискФайлЗапросаВФНСНаПроверкуСведенийРаботниковЗавершение", ЭтотОбъект, ПараметрыСохранения);
	
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.Заголовок = НСтр("ru = 'Укажите каталог'");
	
	НачатьПолучениеФайлов(Оп, ПараметрыСохранения.ПолучаемыеФайлы, ДиалогВыбораКаталога, Истина);
	
КонецПроцедуры

Процедура СохранитьНаДискФайлЗапросаВФНСНаПроверкуСведенийРаботниковЗавершение(ПолученныеФайлы, ПараметрыСохранения) Экспорт
	
	Если ПолученныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолученныеФайлы.Количество() = 1 Тогда
		
		РазделительПутиОС = ПолучитьРазделительПути();
		ПолноеИмяПолученногоФайла = СтрЗаменить(ПолученныеФайлы[0].ПолноеИмя, "/", РазделительПутиОС);
		ДанныеФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолноеИмяПолученногоФайла);
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
		"ru='Файл запроса в ФНС на проверку ИНН, ФИО, СНИЛС работающих лиц %1 сохранен в каталог %2.'"),
		ДанныеФайла.Имя, ДанныеФайла.Путь);
		Сообщение.Сообщить();
		
	ИначеЕсли ПолученныеФайлы.Количество() > 1 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		ТекстСообщения = "Файлы запроса в ФНС на проверку ИНН, ФИО, СНИЛС работающих лиц:";
		Для Каждого ПолучФайл Из ПолученныеФайлы Цикл
			ДанныеФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолучФайл.Имя);
			ТекстСообщения = ТекстСообщения + Символы.ПС + "- """ + ДанныеФайла.Имя + """;";
		КонецЦикла;
		ТекстСообщения = ТекстСообщения + Символы.ПС + "сохранены в каталог """ + ДанныеФайла.Путь + """.";
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура ПолучитьПроцедурыДекларированияФТСПослеПолученияКонтекста(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	КонтекстЭДОКлиент.ПолучитьПроцедурыДекларированияФТС(
		ДополнительныеПараметры.ОповещениеОЗавершении,
		ДополнительныеПараметры.Организация,
		ДополнительныеПараметры.РежимПолучения,
		ДополнительныеПараметры.Отборы);
	
КонецПроцедуры

#КонецОбласти