
#Область СлужебныйПрограммныйИнтерфейс

//Проверяет необходимость уточнения кода маркировки в составе упаковки, специфика ИС МП
//  * Маркировка молочной продукции: требуется заполнение данных ВетИС.
//
// Параметры:
//   СтрокаДерева - СтрокаДереваЗначений - строка в которой проверяется специфика
//   ПараметрыСканирования - Структура - см. ШтрихкодированиеИСКлиент.ПараметрыСканирования
// Возвращаемое значение:
//   Булево - для упаковки требуется уточнение данных
Функция ПроверитьНеобходимостьУточнения(СтрокаДерева, ПараметрыСканирования) Экспорт
	
	Если ПараметрыСканирования.ЗаполнятьДанныеВЕТИС Тогда
		Если Не ЗначениеЗаполнено(СтрокаДерева.ИдентификаторПроисхожденияВЕТИС)
			Или Не ЗначениеЗаполнено(СтрокаДерева.ГоденДо) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции

//Заполняет данные кода маркировки, специфика ИС МП
//  * Маркировка молочной продукции: в документе есть один подходящий к коду маркировки идентификатор ВетИС.
//
// Параметры:
//   СтрокаДанных - СтрокаТаблицыЗначений - строка в которой заполняется специфика
//   ПараметрыСканирования - Структура - см. ШтрихкодированиеИСКлиент.ПараметрыСканирования
//   ДанныеДокумента - ТаблицаЗначений - данные табличной части документа "Маркировка товаров"
// Возвращаемое значение:
//   Булево - для кода маркировки выполнено заполнение данных
Функция ЗаполнитьПоДокументуИОснованию(СтрокаДанных, ПараметрыСканирования, ДанныеДокумента) Экспорт
	
	Если Не ПараметрыСканирования.ЗаполнятьДанныеВЕТИС Тогда
		Возврат Ложь;
	ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.ИдентификаторПроисхожденияВЕТИС) Тогда
		Возврат Ложь;
	ИначеЕсли СтрокаДанных.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская Тогда
		Возврат Ложь;
	ИначеЕсли ДанныеДокумента = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли ДанныеДокумента.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПолеСрокГодности = ?(ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДокумента[0], "СрокГодности"),
		"СрокГодности", "ГоденДо");
	Отбор = Новый Структура("Номенклатура,Характеристика");
	ЗаполнитьЗначенияСвойств(Отбор, СтрокаДанных);
	Если ЗначениеЗаполнено(СтрокаДанных.ГоденДо) Тогда
		Отбор.Вставить(ПолеСрокГодности, СтрокаДанных.ГоденДо);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаДанных.Серия) Тогда
		Отбор.Вставить("Серия", СтрокаДанных.Серия);
	КонецЕсли;
	
	// Заполнение единственной серией
	НайденныеСтроки = ДанныеДокумента.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() = 1 Тогда
		СтрокаДанных.ИдентификаторПроисхожденияВЕТИС = НайденныеСтроки[0].ИдентификаторПроисхожденияВЕТИС;
		СтрокаДанных.ГоденДо = НайденныеСтроки[0][ПолеСрокГодности];
		СтрокаДанных.Серия = НайденныеСтроки[0].Серия;
		Возврат Истина;
	КонецЕсли;
	// Заполнение серией для которой проверка не завершена
	Если НайденныеСтроки.Количество() Тогда
		ПроверятьИзКолонкиСтатусПроверки = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НайденныеСтроки[0], "СтатусПроверкиГосИС");
		ПроверятьИзКолонкиКоличествоПодобрано = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НайденныеСтроки[0], "КоличествоПодобрано");
		Если Не(ПроверятьИзКолонкиСтатусПроверки Или ПроверятьИзКолонкиКоличествоПодобрано) Тогда
			Возврат Ложь;
		КонецЕсли;
		ПодходитСтрок = 0;
		ДанныеВыбора = Новый Структура("ИдентификаторПроисхожденияВЕТИС, СрокГодности, Серия");
		Для Каждого ВариантВыбора Из НайденныеСтроки Цикл
			Если ПроверятьИзКолонкиСтатусПроверки И ВариантВыбора.СтатусПроверкиГосИС <> 1 Тогда
				Продолжить;
			ИначеЕсли ПроверятьИзКолонкиКоличествоПодобрано И ВариантВыбора.Количество <= ВариантВыбора.КоличествоПодобрано Тогда
				Продолжить;
			КонецЕсли;
			Если ПодходитСтрок = 0 Тогда
				ПодходитСтрок = 1;
				ЗаполнитьЗначенияСвойств(ДанныеВыбора, ВариантВыбора);
				ДанныеВыбора.СрокГодности = ВариантВыбора[ПолеСрокГодности];
			ИначеЕсли ДанныеВыбора.Серия = ВариантВыбора.Серия
				И ДанныеВыбора.ИдентификаторПроисхожденияВЕТИС = ВариантВыбора.ИдентификаторПроисхожденияВЕТИС
				И ДанныеВыбора.СрокГодности = ВариантВыбора[ПолеСрокГодности] Тогда
			Иначе
				ПодходитСтрок = 2;
			КонецЕсли;
		КонецЦикла;
		Если ПодходитСтрок = 1 Тогда
			СтрокаДанных.ИдентификаторПроисхожденияВЕТИС = ДанныеВыбора.ИдентификаторПроисхожденияВЕТИС;
			СтрокаДанных.ГоденДо = ДанныеВыбора.СрокГодности;
			СтрокаДанных.Серия = ДанныеВыбора.Серия;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Дополняет дерево упаковок структуры "ДанныеПоШтрихкодам", специфика ИСМП.
//  * Маркировка молочной продукции: для логистических упаковок возможно заполнение общих идентификаторов ВетИС.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ОбновленныеКодыМаркировки - Массив - коды маркировки, в которых обновлялись реквизиты.
Процедура ОбновитьДеревоУпаковок(ДанныеПоШтрихкодам, Знач ОбновленныеКодыМаркировки) Экспорт
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоУпаковок = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
	ОбновляемыеГруппы = Новый Массив;
	Для Каждого СтрокаТаблицыКоды Из ОбновленныеКодыМаркировки Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицыКоды.ИдентификаторПроисхожденияВЕТИС) Тогда
			СтрокаДерева = ДеревоУпаковок.Строки.Найти(СтрокаТаблицыКоды.Штрихкод, "Штрихкод", Истина);
			Если СтрокаДерева<>Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаТаблицыКоды, "ИдентификаторПроисхожденияВЕТИС,ГоденДо");
				ОбновитьГруппу = СтрокаДерева.Родитель;
				Если ОбновитьГруппу <> Неопределено И ОбновляемыеГруппы.Найти(ОбновитьГруппу) = Неопределено Тогда
					ОбновляемыеГруппы.Добавить(ОбновитьГруппу);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Пока ОбновляемыеГруппы.Количество() Цикл
		НоваяИтерация = Новый Массив;
		Для Каждого Группа Из ОбновляемыеГруппы Цикл
			Результат = Новый Структура("ОбщаяСпецифика, ИдентификаторПроисхожденияВЕТИС, ГоденДо");
			Для Каждого ВложенныйЭлемент Из Группа.Строки Цикл
				Если Результат.ОбщаяСпецифика = Ложь Тогда
				ИначеЕсли Не ЗначениеЗаполнено(ВложенныйЭлемент.ИдентификаторПроисхожденияВЕТИС) Тогда
					Результат.ОбщаяСпецифика = Ложь;
				ИначеЕсли Результат.ОбщаяСпецифика = Неопределено Тогда
					Результат.ОбщаяСпецифика = Истина;
					Результат.ИдентификаторПроисхожденияВЕТИС = ВложенныйЭлемент.ИдентификаторПроисхожденияВЕТИС;
					Результат.ГоденДо = ВложенныйЭлемент.ГоденДо;
				ИначеЕсли Результат.ИдентификаторПроисхожденияВЕТИС <> ВложенныйЭлемент.ИдентификаторПроисхожденияВЕТИС
					Или Результат.ГоденДо <> ВложенныйЭлемент.ГоденДо Тогда
					Результат.ОбщаяСпецифика = Ложь;
	 			КонецЕсли;
			КонецЦикла;
			Если Результат.ОбщаяСпецифика Тогда
				Группа.ИдентификаторПроисхожденияВЕТИС = Результат.ИдентификаторПроисхожденияВЕТИС;
				Группа.ГоденДо = Результат.ГоденДо;
				ОбновитьГруппу = Группа.Родитель;
				Если ОбновитьГруппу <> Неопределено И НоваяИтерация.Найти(ОбновитьГруппу) = Неопределено Тогда
					НоваяИтерация.Добавить(ОбновитьГруппу);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ОбновляемыеГруппы = НоваяИтерация;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет структуру "ДанныеПоШтрихкодам" сведениями, необходимыми для продукции ИСМП.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьДанныеНеизвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	ДобавитьКолонкиТаблицыДанныеКодовМаркировки(ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
	Если ПараметрыСканирования.ЗапрашиватьСтатусыИСМП Тогда
		ЗаполнитьДанныеНеизвестнойМаркируемойПродукцииСЗапросомСведенийИСМП(ДанныеПоШтрихкодам, ПараметрыСканирования);
	Иначе
		ЗаполнитьДанныеНеизвестнойМаркируемойПродукцииБезЗапросаСведенийИСМП(ДанныеПоШтрихкодам, ПараметрыСканирования);
	КонецЕсли;

КонецПроцедуры

// Дополняет данные, полученные по штрихкодам спецификой, характерной для продукции ИС МП.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ДополнитьДанныеПоШтрихкодамСпецификой(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	Если ПараметрыСканирования.ЗапрашиватьСтатусыИСМП Тогда
		ДополнитьДанныеПоШтрихкодамСпецификойСЗапросомСтатусовИСМП(ДанныеПоШтрихкодам, ПараметрыСканирования);
	Иначе
		ДополнитьДанныеПоШтрихкодамСпецификойБезЗапросаСтатусовИСМП(ДанныеПоШтрихкодам, ПараметрыСканирования);
	КонецЕсли;
	
	Если ДанныеПоШтрихкодам.ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет представления статусов, владельцев и прочую дополнительную информацию
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьПредставленияДанных(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	МассивИНН = ДанныеПоШтрихкодам.ДанныеКодовМаркировки.ВыгрузитьКолонку("ИННВладельца");
	МассивИНН = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивИНН);
	Если МассивИНН.Количество() > 0 Тогда
		
		КонтрагентыПоИНН = ИнтеграцияИСМП.КонтрагентыПоСпискуИНН(МассивИНН);
		ОрганизацииПоИНН = ИнтеграцияИСМП.ОрганизацииПоСпискуИНН(МассивИНН);
		Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаДанных.Владелец)
				И ЗначениеЗаполнено(СтрокаДанных.ИННВладельца) Тогда
				СтрокаДанных.Владелец = КонтрагентыПоИНН.Получить(СтрокаДанных.ИННВладельца);
				Если Не ЗначениеЗаполнено(СтрокаДанных.Владелец) Тогда
					СтрокаДанных.Владелец = ОрганизацииПоИНН.Получить(СтрокаДанных.ИННВладельца);
				КонецЕсли;
				Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
					СтрокаДанных.СтрокаДерева.Владелец = СтрокаДанных.Владелец;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Дополняет свойства структуры Данные штрихкода свойствами, которые используются только для продукции ИС МП.
// 
// Параметры:
//  ДанныеШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
Процедура ДополнитьСвойстваДанныхШтрихкода(ДанныеШтрихкода) Экспорт
	
	ДанныеШтрихкода.Вставить("ИННВладельца"               "");
	ДанныеШтрихкода.Вставить("Владелец",                  Неопределено);
	ДанныеШтрихкода.Вставить("Статус",                    Неопределено);
	ДанныеШтрихкода.Вставить("ПредставлениеСтатуса"       "");
	ДанныеШтрихкода.Вставить("КоличествоВложенныхЕдиниц", 1);
	ДанныеШтрихкода.Вставить("ИННПроизводителя",          "");
	ДанныеШтрихкода.Вставить("Производитель",             Неопределено);
	ДанныеШтрихкода.Вставить("НаименованиеПроизводителя", "");
	ДанныеШтрихкода.Вставить("ДатаЭмиссии",               Неопределено);
	ДанныеШтрихкода.Вставить("ГоденДо",                   Неопределено);
	ДанныеШтрихкода.Вставить("GTIN",                      "");
	ДанныеШтрихкода.Вставить("СпособВводаВОборот",        Неопределено);
	ДанныеШтрихкода.Вставить("ОсобоеСостояние",           Неопределено);
	
КонецПроцедуры

// Дополняет свойства структуры результат обработки штрихкода специфичными свойствами, характерными для продукции ИС МП.
// 
// Параметры:
//  РезультатОбработкиШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
//  ДанныеШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
Процедура ДополнитьСвойстваРезультатаОбработкиШтрихкода(РезультатОбработкиШтрихкода, ДанныеШтрихкода) Экспорт
	
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяАвторизацияИСМП", Ложь);
	РезультатОбработкиШтрихкода.Вставить("ПараметрыВыбораСерии",     Новый Структура);
	
КонецПроцедуры

// Формирует структуру, описывающую результат обработки кода маркировки.
// 
// Параметры:
//  ДанныеШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор формы, во временное хранилище которой 
//  надо поместить данные.
//  Форма - ФормаКлиентскогоПриложения - Форма, для которой выполняется обработка штрихкода.
// Возвращаемое значение:
//  Структура - сожержит в себе информацию по результату обработки штрихкодов обувной продукции.
Функция РезультатОбработкиКодаМаркировки(ДанныеШтрихкода, ПараметрыСканирования, УникальныйИдентификатор, Форма = Неопределено) Экспорт
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода(ДанныеШтрихкода);
	РезультатОбработки.ДанныеШтрихкода = ДанныеШтрихкода;
	ЗаполнитьЗначенияСвойств(РезультатОбработки, ДанныеШтрихкода);
	
	Если ЗначениеЗаполнено(ДанныеШтрихкода.ТекстОшибки) Тогда
		Возврат РезультатОбработки;
	КонецЕсли;
	
	Если ДанныеШтрихкода.ЭтоКодВводаОстатков
		И ШтрихкодированиеИС.ДанныеШтрихкодаТребуетсяОбработатьКакМаркировкуОстатков(ДанныеШтрихкода, ПараметрыСканирования) Тогда
		
		Возврат ШтрихкодированиеИС.РезультатОбработкиТребуетсяОбработатьКодМаркировкиВводаОстатков(ДанныеШтрихкода);
		
	КонецЕсли;
	
	Если ДанныеШтрихкода.ТребуетсяВыборСерии Тогда
		
		РезультатОбработки.ТребуетсяУточнениеДанных = Истина;
		
	КонецЕсли;
	
	Если ДанныеШтрихкода.ТребуетсяВыборВСД Тогда
		
		Если ЗначениеЗаполнено(ДанныеШтрихкода.ИдентификаторПроисхожденияВЕТИС) Тогда
			ДанныеШтрихкода.ТребуетсяВыборВСД = Ложь;
		Иначе
			РезультатОбработки.ТребуетсяУточнениеДанных = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не РезультатОбработки.ТребуетсяУточнениеДанных И Форма <> Неопределено Тогда
		
		РезультатОбработки = ШтрихкодированиеИС.ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования);
		
	КонецЕсли;
	
	СохранениеКодаМаркировкиВПул(РезультатОбработки, ДанныеШтрихкода, ПараметрыСканирования);
	
	Возврат РезультатОбработки;
	
КонецФункции

// Сохраняет код маркировкив ПулКодовМаркировкиСУЗ с проверкой необходимости.
// 
// Параметры:
// 	РезультатОбработки    - Структура - результа обработки штрихкода.
// 	ДанныеШтрихкода       - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура СохранениеКодаМаркировкиВПул(РезультатОбработки, ДанныеШтрихкода, ПараметрыСканирования)
	
	Если ПараметрыСканирования.СохранятьКодыМаркировкиВПулИСМП
		И ШтрихкодированиеИС.ОбработкаДанныхПоШтрихкодамУспешноЗавершена(РезультатОбработки)
		И ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
		И Не ДанныеШтрихкода.ЕстьВПулеКодовМаркировки Тогда
		
		РегистрыСведений.ПулКодовМаркировкиСУЗ.ЗаписатьДанныеКодаМаркировки(ДанныеШтрихкода, ПараметрыСканирования);
		
	КонецЕсли;
	
КонецПроцедуры

// Инициализирует структуру, которая описывает результат обработки штрихкодов. Состоит из базовых свойств 
// (См.ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода), дополненных специфичными свойствами
// (См.ШтрихкодированиеИСМП.ДополнитьСвойстваРезультатаОбработкиШтрихкода).
// 
// Параметры:
//  ДанныеШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ИнициализироватьРезультатОбработкиШтрихкода(ДанныеШтрихкода = Неопределено) Экспорт
	
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(Неопределено, ДанныеШтрихкода);
	ДополнитьСвойстваРезультатаОбработкиШтрихкода(РезультатОбработкиШтрихкода, ДанныеШтрихкода);
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

// Выполняет поиск ошибок в данных по штрихкодам.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ВыполнитьПроверкуНаОшибки(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки) Экспорт
	
	ПравилаПроверкиНаОшибки = ПравилаПроверкиНаОшибки(ПараметрыСканирования, ДанныеПоШтрихкодам);
	ПроверитьНаОшибкиПоПравилам(ДанныеПоШтрихкодам, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки);
	
КонецПроцедуры

// Первый этап проверок. Выполняется сразу после считывания штрихкода. 
// 
// Параметры:
//  ДанныеКодовМаркировки - (См. ШтрихкодированиеИС.ИнициализацияТаблицыДанныхКодовМаркировки).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Соответствие - В случае удачного прохождения проверок - возвращает пустое соответствие,
//           В случае выявления ошибок или необходимого уточнения информации - возвращает заполненное соответствие с указанием причины.
Функция ВыполнитьПроверкиПередПолучениемДанныхПоШтрихкодам(ДанныеКодовМаркировки, ПараметрыСканирования) Экспорт

	Возврат ПроверитьНаНеобходимостьОбновленияКлючаСессии(ДанныеКодовМаркировки, ПараметрыСканирования);
	
КонецФункции

// Заполняет результат обработки, который информирует о необходимости выполнения авторизации ИС МП.
// 
// Параметры:
//  РезультатОбработкиШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьРезультатОбработкиТребуетсяАвторизация(РезультатОбработкиШтрихкода, ПараметрыСканирования) Экспорт

	РезультатОбработкиШтрихкода.ТребуетсяАвторизацияИСМП = Истина;
	
КонецПроцедуры

// Выполняет проверку на необходимость выполнения авторизации пользователя.
// 
// Параметры:
//  ДанныеКодовМаркировки - (См. ШтрихкодированиеИС.ИнициализацияТаблицыДанныхКодовМаркировки).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Соответствие - Ключ - Код маркировки, Значение - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ПроверитьНаНеобходимостьОбновленияКлючаСессии(ДанныеКодовМаркировки, ПараметрыСканирования) Экспорт

	РезультатыПроверок = Новый Соответствие;

	ТребуетсяАвторизацияИСМП = ТребуетсяАвторизацияПользователя(ПараметрыСканирования);
	Если Не ТребуетсяАвторизацияИСМП Тогда
		Возврат РезультатыПроверок;
	КонецЕсли;

	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл

		Если ЗначениеЗаполнено(СтрокаДанных.ВидПродукции)
			Или (СтрокаДанных.ВидыПродукцииКодаМаркировки.Количество() = 1 // Проверка на упаковку с 1 видом продукции.
			И ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаДанных.ВидыПродукцииКодаМаркировки[0])) Тогда

			РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования);
			ЗаполнитьРезультатОбработкиТребуетсяАвторизация(РезультатОбработкиШтрихкода, ПараметрыСканирования);
			РезультатыПроверок.Вставить(СтрокаДанных.Штрихкод, РезультатОбработкиШтрихкода);

		КонецЕсли;

	КонецЦикла;
	
	Возврат РезультатыПроверок;
	
КонецФункции

// Возвращает результат обработки штрихкода с описанием ошибки.
// 
// Параметры:
//  ДанныеШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Структура - (См. ШтрихкодированиеИСМПСлужебный.ИнициализироватьРезультатОбработкиШтрихкода).
Функция РезультатОбработкиКодаМаркировкиПриОшибках(ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	РезультатДобавления = ИнициализироватьРезультатОбработкиШтрихкода(ДанныеШтрихкода);
	РезультатДобавления.ДанныеШтрихкода = ДанныеШтрихкода;
	ЗаполнитьЗначенияСвойств(РезультатДобавления, ДанныеШтрихкода);
	РезультатДобавления.ВидыПродукции.Добавить(ДанныеШтрихкода.ВидПродукции);
	
	Возврат РезультатДобавления;
	
КонецФункции

// Реализует обработку действий пользователя. Возвращает результат обработки.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  Действие - Строка - Идентификатор действия.
//  Параметры - (См. ШтрихкодированиеИС.ИнициализироватьПараметрыОбработкиВыбора).
// Возвращаемое значение:
//  Структура - (См. ШтрихкодированиеИСМП.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ВыполнитьДействие(Форма, Действие, Параметры) Экспорт
	
	Если Действие = "ОбработатьВыборСерии" Или Действие = "ОбработатьУточнениеДанных" Тогда
		
		РезультатВыбора             = Параметры.РезультатВыбора;
		РезультатОбработкиШтрихкода = Параметры.РезультатОбработкиШтрихкода;
		КэшированныеЗначения        = Параметры.КэшированныеЗначения;
		РезультатВыбора = ОбработатьВыборСерии(Форма, РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
		
		Возврат РезультатВыбора;
		
	КонецЕсли;
	
КонецФункции

// Получает данные из государтсвенных информационных систем и заполняет данные для упаковок, о которых нет никакой 
// информации в справочнике Штрихкоды упаковок.
// 
// Параметры:
//  ДанныеПоШтрихкодам - См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам
//  ПараметрыСканирования - См. ШтрихкодированиеИС.ПараметрыСканирования
Процедура ЗаполнитьДанныеНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт

	МассивСтрокТаблицы = Новый Массив;
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл

		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковкаПоВиду(СтрокаДанных.ВидУпаковки)
			И Не СтрокаДанных.Идентифицирован
			И ШтрихкодированиеИС.ПрисутствуетПродукцияИСМП(СтрокаДанных.ВидыПродукцииКодаМаркировки) Тогда
			МассивСтрокТаблицы.Добавить(СтрокаДанных);
		КонецЕсли;

	КонецЦикла;

	Если МассивСтрокТаблицы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхУпаковокИСМП Тогда
		Если (ТипЗнч(ПараметрыСканирования.СсылкаНаОбъект) = Тип("ДокументСсылка.МаркировкаТоваровИСМП")
			И Не ПараметрыСканирования.РазрешенаОбработкаНеНайденныхЛогистическихУпаковок)
			Или ТипЗнч(ПараметрыСканирования.СсылкаНаОбъект) <> Тип("ДокументСсылка.МаркировкаТоваровИСМП") Тогда
			
			ДанныеПоШтрихкодам.ЕстьОшибки  = Истина;
			ДанныеПоШтрихкодам.ТекстОшибки = ТекстОшибкиЗапрещеноЗапрашиватьДанныеВИСМП();
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхУпаковокИСМП
		И Не ПараметрыСканирования.РазрешенаОбработкаНеНайденныхЛогистическихУпаковок
		И ТипЗнч(ПараметрыСканирования.СсылкаНаОбъект) <> Тип("ДокументСсылка.МаркировкаТоваровИСМП") Тогда
		
		ДанныеПоШтрихкодам.ЕстьОшибки  = Истина;
		ДанныеПоШтрихкодам.ТекстОшибки = ТекстОшибкиЗапрещеноЗапрашиватьДанныеВИСМП();
		
		Возврат;
		
	КонецЕсли;
	
	// В маркировке товаров разрешено добавлять пустые упаковки при выключенном запросе статусов
	Если ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхУпаковокИСМП Тогда
		
		Результат = ДеревоУпаковокПоДаннымИСМП(МассивСтрокТаблицы, ПараметрыСканирования);
		Если Не ПустаяСтрока(Результат.ТекстОшибки) Тогда
			
			ДанныеПоШтрихкодам.ЕстьОшибки  = Истина;
			ДанныеПоШтрихкодам.ТекстОшибки = Результат.ТекстОшибки;
			
			Возврат;
			
		КонецЕсли;
		
		ОбработатьДеревоПолученноеИзИСМП(Результат, ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
КонецПроцедуры

// Получает дерево упаковок по данным ИС МП.
// 
// Параметры:
//  МассивСтрокТаблицы - Массив из СтрокаТаблицыЗначений - (См. ШтрихкодированиеИС.ИнициализацияТаблицыДанныхКодовМаркировки).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Структура - Описание:
// * ТребуетсяОбновлениеКлючаСессии - Булево - Истина, если требуется авторизация пользователя.
// * ТекстОшибки - Строка - Описание ошибки при попытке получения дерева упаковок из сервиса.
// * ДеревоУпаковок - ДеревоЗначений - иерархия паковок.
// * GTIN - ТаблицаЗначений -:
// ** GTIN - Строка - GTIN кода маркировки.
Функция ДеревоУпаковокПоДаннымИСМП(МассивСтрокТаблицы, ПараметрыСканирования) Экспорт

	Детализация = Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.Полная;
	РезультатПолученияДерева = ИнтерфейсИСМП.ДеревоУпаковок(
		МассивСтрокТаблицы, Детализация, ПараметрыСканирования.Организация);
	
	Если РезультатПолученияДерева.ТребуетсяОбновлениеКлючаСессии Тогда
		РезультатПолученияДерева.ТекстОшибки = НСтр("ru = 'Не удалось получить данные из ИС МП.
		                                   |По причине: Требуется обновление ключа сессии.'");
	КонецЕсли;

	Возврат РезультатПолученияДерева;

КонецФункции

// Формирует структуру вложенных штрихкодов по ссылке на документ.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ.
//  Детализация - ПеречислениеСсылка.ДетализацияСтруктурыХраненияПродукцииИСМП - Детализация, с которой
//    требуется сформировать вложенные штрихкоды.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Структура - (См. ШтрихкодированиеИСМПСлужебный.ИнициализацияВложенныхШтрихкодов).
Функция ВложенныеШтрихкодыУпаковокПоДокументу(ДокументСсылка, Детализация, ПараметрыСканирования = Неопределено) Экспорт
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	Если МетаданныеДокумента.ТабличныеЧасти.Найти("ШтрихкодыУпаковок") = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'У документа %1 отсутствует табличная часть ШтрихкодыУпаковок.'");
		ВызватьИсключение СтрШаблон(ТекстОшибки, ДокументСсылка);
	КонецЕсли;
	
	Если ПараметрыСканирования = Неопределено Тогда
		ДанныеШапки           = ШтрихкодированиеИС.ПолучитьСтруктуруРеквизитовДокумента(ДокументСсылка);
		ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(ДанныеШапки);
	КонецЕсли;
	
	ИмяДокумента = МетаданныеДокумента.Имя;
	
	ЕстьКолонкаЗначениеШтрихкода = МетаданныеДокумента.ТабличныеЧасти.ШтрихкодыУпаковок.Реквизиты.Найти("ЗначениеШтрихкода") <> Неопределено;
	Если ЕстьКолонкаЗначениеШтрихкода И ИмяДокумента = "ПриемкаТоваровИСМП" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДокументШтрихкодыУпаковок.ШтрихкодУпаковки                                   КАК ШтрихкодУпаковки,
		|	ЕСТЬNULL(ДокументШтрихкодыУпаковок.ШтрихкодУпаковки.ЗначениеШтрихкода, ДокументШтрихкодыУпаковок.ЗначениеШтрихкода) КАК Штрихкод
		|ИЗ
		|	Документ.%1.ШтрихкодыУпаковок КАК ДокументШтрихкодыУпаковок
		|ГДЕ
		|	ДокументШтрихкодыУпаковок.Ссылка = &ДокументСсылка";
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДокументШтрихкодыУпаковок.ШтрихкодУпаковки                                   КАК ШтрихкодУпаковки,
		|	ЕСТЬNULL(ДокументШтрихкодыУпаковок.ШтрихкодУпаковки.ЗначениеШтрихкода, """") КАК Штрихкод
		|ИЗ
		|	Документ.%1.ШтрихкодыУпаковок КАК ДокументШтрихкодыУпаковок
		|ГДЕ
		|	ДокументШтрихкодыУпаковок.Ссылка = &ДокументСсылка";
	КонецЕсли;
	
	ТекстЗапроса = СтрШаблон(ТекстЗапроса, ИмяДокумента);
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	ШтрихкодыУпаковок   = Запрос.Выполнить().Выгрузить();
	ИзвестныеУпаковки   = Новый Массив;
	НеизвестныеУпаковки = Новый Массив;
	
	Для Каждого Строка Из ШтрихкодыУпаковок Цикл
		
		Если ЗначениеЗаполнено(Строка.ШтрихкодУпаковки) Тогда
			ИзвестныеУпаковки.Добавить(Строка.ШтрихкодУпаковки);
		Иначе
			НеизвестныеУпаковки.Добавить(Новый Структура("Штрихкод, Количество", Строка.Штрихкод, 1));
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеПоШтрихкодам = ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам();
	Если ИзвестныеУпаковки.Количество() > 0 Тогда
		
		ВложенныеШтрихкодыИзвестныхУпаковок = ШтрихкодированиеИС.ВложенныеШтрихкодыИзвестныхУпаковок(
			ИзвестныеУпаковки, ПараметрыСканирования);
		
		Если ВложенныеШтрихкодыИзвестныхУпаковок.ДеревоУпаковок.Строки.Количество() = 0 Тогда
			Результат = ИнициализацияРезультатаПолученияВложенныхШтрихкодовПоДаннымИСМП();
			Результат.ВложенныеШтрихкоды = ИнициализацияВложенныхШтрихкодов();
			Возврат Результат;
		КонецЕсли;
		
		ДанныеПоШтрихкодам.ВложенныеШтрихкоды = ВложенныеШтрихкодыИзвестныхУпаковок;
		ШтрихкодированиеИС.ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(
			ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ВложенныеШтрихкодыИзвестныхУпаковок.ДеревоУпаковок,, ПараметрыСканирования);
		ДополнитьДанныеПоШтрихкодамСпецификой(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
		Результат = ИнициализацияРезультатаПолученияВложенныхШтрихкодовПоДаннымИСМП();
		
		Если ДанныеПоШтрихкодам.ЕстьОшибки Тогда
			Результат.ЕстьОшибки  = Истина;
			Результат.ТекстОшибки = ДанныеПоШтрихкодам.ТекстОшибки;
			Результат.ТребуетсяОбновлениеКлючаСессии = ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии;
		Иначе
			Результат.ВложенныеШтрихкоды = ВложенныеШтрихкодыИзвестныхУпаковок;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецЕсли;
	
	Если НеизвестныеУпаковки.Количество() > 0 Тогда
		
		Возврат ВложенныеШтрихкодыПоДаннымИСМП(НеизвестныеУпаковки, ПараметрыСканирования);
		
	КонецЕсли;
	
	Результат = ИнициализацияРезультатаПолученияВложенныхШтрихкодовПоДаннымИСМП();
	Результат.ВложенныеШтрихкоды = ИнициализацияВложенныхШтрихкодов();
	
	Возврат Результат;
	
КонецФункции

// Обрабатывает выбор серии.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо обработать штрихкод.
//  РезультатВыбора - Структура, ОпределяемыйТип.СерияНоменклатуры - результат выбора серии пользователем.
//  РезультатОбработки - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
//  КэшированныеЗначения - Структура - кэшированные значения формы.
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ОбработатьВыборСерии(Форма, РезультатВыбора, РезультатОбработки, КэшированныеЗначения) Экспорт
	
	ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(Форма);
	
	ДанныеШтрихкода = РезультатОбработки.ДанныеШтрихкода;
	
	Номенклатура   = РезультатВыбора.ДанныеВыбора.Номенклатура;
	Характеристика = РезультатВыбора.ДанныеВыбора.Характеристика;
	Серия = РезультатВыбора.ДанныеВыбора.Серия;
	ДанныеШтрихкода.ДополнительныеПараметры = РезультатВыбора;
	
	ДанныеШтрихкода.Номенклатура   = Номенклатура;
	ДанныеШтрихкода.Характеристика = Характеристика;
	ДанныеШтрихкода.Серия          = Серия;
	
	Если ПараметрыСканирования.ИспользуютсяДанныеВыбораПоМаркируемойПродукции Тогда
		ШтрихкодированиеИСМПКлиентСервер.ОбработатьСохраненныйВыборДанныхПоМаркируемойПродукции(Форма, ДанныеШтрихкода);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки) Тогда
		
		НовыеРеквизиты = Новый Структура;
		НовыеРеквизиты.Вставить("Номенклатура",   Номенклатура);
		НовыеРеквизиты.Вставить("Характеристика", Характеристика);
		НовыеРеквизиты.Вставить("Серия",          Серия);
		
		Справочники.ШтрихкодыУпаковокТоваров.ИзменитьШтрихкодУпаковки(
			ДанныеШтрихкода.ШтрихкодУпаковки, НовыеРеквизиты);
		
	КонецЕсли;
	
	РезультатОбработки.ДанныеШтрихкода = ДанныеШтрихкода;
	
	ТипУпаковки = РезультатОбработки.ТипУпаковки;
	
	ВложенныеШтрихкоды = Неопределено;
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ТипУпаковки)
		И ЭтоАдресВременногоХранилища(РезультатОбработки.АдресДереваУпаковок) Тогда
		ВложенныеШтрихкоды = ИнициализацияВложенныхШтрихкодов();
		ВложенныеШтрихкоды.ДеревоУпаковок = ПолучитьИзВременногоХранилища(РезультатОбработки.АдресДереваУпаковок);
	КонецЕсли;
	
	РезультатОбработки = ШтрихкодированиеИС.ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
	
	Возврат РезультатОбработки;
	
КонецФункции

// Инициализирует дерево упаковок для обувной продукции.
// 
// Возвращаемое значение:
//  ДеревоЗначений - Иерархия упаковок.
Функция ИнициализироватьДеревоУпаковок() Экспорт
	
	ДеревоУпаковок = ШтрихкодированиеИС.ИнициализироватьДеревоУпаковок();
	НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ДеревоУпаковок);
	
	Возврат ДеревоУпаковок;
	
КонецФункции

// Выполняет запрос в систему ИС МП и возвращет ответ в виде дерева.
// 
// Параметры:
//  ДанныеШтрихкодовСписок - Массив из Структура - Описание:
//  * Штрихкод - Строка - Значение штрихкода,
//  * Количество - Число - количество штрихкодов.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  НормализоватьВложенныеШтрихкоды - Булево - Если требуется дополнить вложенные штрихкоды данными, специфичными для табачной продукции.
// Возвращаемое значение:
//  (См. ИнициализацияРезультатаПолученияВложенныхШтрихкодовПоДаннымИСМП).
Функция ВложенныеШтрихкодыПоДаннымИСМП(ДанныеШтрихкодовСписок, ПараметрыСканирования, НормализоватьВложенныеШтрихкоды = Истина) Экспорт
	
	РезультатФормированияВложенныхШтрихкодов = ИнициализацияРезультатаФормированияВложенныхШтрихкодов();
	
	РезультатФормированияВложенныхШтрихкодов.Вставить("ВложенныеШтрихкоды",             Неопределено);
	РезультатФормированияВложенныхШтрихкодов.Вставить("ЕстьОшибки",                     Ложь);
	РезультатФормированияВложенныхШтрихкодов.Вставить("ТекстОшибки",                    "");
	РезультатФормированияВложенныхШтрихкодов.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	РезультатФормированияВложенныхШтрихкодов.Вставить("СоответствиеСтрокДерева",        Новый Соответствие);
	
	ДанныеПоШтрихкодам = ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам();
	ШтрихкодированиеИС.ПодготовитьДанныеКодовМаркировкиДляОбработки(
		ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ДанныеШтрихкодовСписок, ПараметрыСканирования);
	
	РезультатПолученияДерева = ДеревоУпаковокПоДаннымИСМП(ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ПараметрыСканирования);
	РезультатФормированияВложенныхШтрихкодов.СоответствиеСтрокДерева        = РезультатПолученияДерева.СоответствиеСтрокДерева;
	РезультатФормированияВложенныхШтрихкодов.ТекстОшибки                    = РезультатПолученияДерева.ТекстОшибки;
	РезультатФормированияВложенныхШтрихкодов.ТребуетсяОбновлениеКлючаСессии = РезультатПолученияДерева.ТребуетсяОбновлениеКлючаСессии;
	РезультатФормированияВложенныхШтрихкодов.ЕстьОшибки                     = Не ПустаяСтрока(РезультатПолученияДерева.ТекстОшибки);
	
	Если РезультатФормированияВложенныхШтрихкодов.ЕстьОшибки Тогда
		Возврат РезультатФормированияВложенныхШтрихкодов;
	КонецЕсли;
	
	ОбработатьДеревоПолученноеИзИСМП(РезультатПолученияДерева, ДанныеПоШтрихкодам, ПараметрыСканирования);
	РезультатФормированияВложенныхШтрихкодов.ВложенныеШтрихкоды = ДанныеПоШтрихкодам.ВложенныеШтрихкоды;
	
	Возврат РезультатФормированияВложенныхШтрихкодов;
	
КонецФункции

Процедура ДобавитьКолонкиТаблицыДанныеКодовМаркировки(ДанныеКодовМаркировки) Экспорт
	
	ОбязательныеКолонки = Новый Структура;
	ОбязательныеКолонки.Вставить("ИННВладельца",                    Новый ОписаниеТипов("Строка"));
	ОбязательныеКолонки.Вставить("Владелец",                        Неопределено);
	ОбязательныеКолонки.Вставить("Статус",                          Неопределено);
	ОбязательныеКолонки.Вставить("ПредставлениеСтатуса",            Новый ОписаниеТипов("Строка"));
	ОбязательныеКолонки.Вставить("КоличествоВложенныхЕдиниц",       Новый ОписаниеТипов("Число"));
	ОбязательныеКолонки.Вставить("ИННПроизводителя",                Новый ОписаниеТипов("Строка"));
	ОбязательныеКолонки.Вставить("Производитель",                   Неопределено);
	ОбязательныеКолонки.Вставить("НаименованиеПроизводителя",       Новый ОписаниеТипов("Строка"));
	ОбязательныеКолонки.Вставить("ДатаЭмиссии",                     Неопределено);
	ОбязательныеКолонки.Вставить("ТребуетсяВыборСерии",             Новый ОписаниеТипов("Булево"));
	ОбязательныеКолонки.Вставить("GTIN",                            Новый ОписаниеТипов("Строка"));
	ОбязательныеКолонки.Вставить("СпособВводаВОборот",              Неопределено);
	ОбязательныеКолонки.Вставить("ОсобоеСостояние",                 Неопределено);
	ОбязательныеКолонки.Вставить("ЕстьВПулеКодовМаркировки",        Новый ОписаниеТипов("Булево"));
	// Реквизиты молочной продукции ВетИС
	ОбязательныеКолонки.Вставить("ТребуетсяВыборВСД",                Новый ОписаниеТипов("Булево"));
	ОбязательныеКолонки.Вставить("ИдентификаторПроисхожденияВЕТИС",  Метаданные.ОпределяемыеТипы.ИдентификаторПроисхожденияВЕТИС.Тип);
	ОбязательныеКолонки.Вставить("ИдентификаторыПроисхожденияВЕТИС", Новый ОписаниеТипов("Массив"));
	ОбязательныеКолонки.Вставить("Скоропортящаяся",                  Новый ОписаниеТипов("Булево"));
	ОбязательныеКолонки.Вставить("ГоденДо",                          Новый ОписаниеТипов("Дата"));
	
	Для Каждого КлючЗначение Из ОбязательныеКолонки Цикл
		
		ИмяКолонки    = КлючЗначение.Ключ;
		ОписаниеТипов = КлючЗначение.Значение;
		Если ДанныеКодовМаркировки.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
			ДанныеКодовМаркировки.Колонки.Добавить(ИмяКолонки, ОписаниеТипов);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКолонкиТаблицыДанныхДокумента(ТаблицаДанныхДокумента) Экспорт
	
	ТаблицаДанныхДокумента.Колонки.Добавить("ДанныеИдентификатораПроисхожденияВЕТИС", Новый ОписаниеТипов("Структура"));
	
КонецПроцедуры

#Область РазобратьКодМаркировки

Функция ЭлементКодаМаркировкиСоответствуетОписанию(Значение, ОписаниеЭлементаКМ, СоставКодаМаркировки, ПараметрыОписанияКодаМаркировки) Экспорт
	
	Если ОписаниеЭлементаКМ.Имя = "GTIN" Тогда
		
		ЗначениеEAN = EANПоКодуМаркировки(Значение);
		Если ЗначениеEAN = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		EANОписаниеЭлементаКМ = ОписаниеЭлементаКодаМаркировки("", "EAN", 0);
		ШтрихкодированиеИССлужебный.ЗаполнитьСоставКодаМаркировки(СоставКодаМаркировки, EANОписаниеЭлементаКМ, ЗначениеEAN);
		
	ИначеЕсли ОписаниеЭлементаКМ.Имя = "SSCC" Тогда
		
		КонтрольноеЧисло = ШтрихкодыУпаковокКлиентСервер.КонтрольноеЧислоSSCC(Лев(Значение, ОписаниеЭлементаКМ.Длина - 1));
		
		Возврат КонтрольноеЧисло =  Число(Прав(Значение, 1));
		
	ИначеЕсли ОписаниеЭлементаКМ.Имя = "МРЦСтрокой" Тогда
		
		МРЦ = 0;
		
		Если Не ЭлементКодаМаркировкиСоответствуетОписаниюМРЦ(Значение, ОписаниеЭлементаКМ, ПараметрыОписанияКодаМаркировки, МРЦ) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ШтрихкодированиеИССлужебный.ЗаполнитьСоставКодаМаркировки(
			СоставКодаМаркировки, Новый Структура("Имя", "МРЦ"), МРЦ);
		
		ШтрихкодированиеИССлужебный.ЗаполнитьСоставКодаМаркировки(
			СоставКодаМаркировки, Новый Структура("Имя", "ВключаетМРЦ"), Истина);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ПреобразоватьЗначениеДляЗаполненияСоставаКодаМаркировки(ПараметрыОписанияКодаМаркировки, СоставКодаМаркировки, ОписаниеЭлементаКМ, Значение) Экспорт
	
	Если СоставКодаМаркировки = Неопределено Или Не СоставКодаМаркировки.Свойство(ОписаниеЭлементаКМ.Имя) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОписаниеЭлементаКМ.Имя = "ГоденДо" Тогда
		
		Если ОписаниеЭлементаКМ.Код = "17" Тогда
			// Дата окончания срока годности продукции (срок хранения более 72 часов).
			// Формат: YYMMDD
			КвалификаторыДаты = Новый КвалификаторыДаты(ЧастиДаты.Дата);
		Иначе
			// Дата окончания срока годности продукции (срок хранения менее 72 часов)
			// Формат: YYMMDDHHMM
			КвалификаторыДаты = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
		КонецЕсли;
		
		ОписаниеТипа = Новый ОписаниеТипов("Дата",,, КвалификаторыДаты);
		Значение = ОписаниеТипа.ПривестиЗначение("20" + Значение);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭлементКодаМаркировкиСоответствуетОписаниюМРЦ(Значение, ОписаниеЭлементаКМ, ПараметрыОписанияКодаМаркировки, МРЦ = 0)
	
	Если ПараметрыОписанияКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
		
		МРЦ = 0;
		
		Для Индекс = 1 По СтрДлина(Значение) Цикл
			Символ = Сред(Значение, Индекс, 1);
			ИндексСимвола = СтрНайти(ОписаниеЭлементаКМ.Алфавит, Символ) - 1;
			Если ИндексСимвола < 0 Тогда
				Возврат Ложь;
			КонецЕсли;
			МРЦ = МРЦ + Pow(80, 4 - Индекс) * ИндексСимвола;
		КонецЦикла;
		
		// Если цена <= 5000 и нет копеек, то высокая вероятность, что это реальное МРЦ.
		Если МРЦ > 500000 Или МРЦ % 100 > 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		
		МРЦ = Число(Значение);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МРЦ) Тогда
		МРЦ = МРЦ / 100;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки) Экспорт
	
	СоставКодаМаркировки = Новый Структура;
	
	Если ТипШтрихкодаИВидУпаковки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
		Или ТипШтрихкодаИВидУпаковки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
		
		СоставКодаМаркировки.Вставить("GTIN",          "");
		СоставКодаМаркировки.Вставить("EAN",           "");
		СоставКодаМаркировки.Вставить("СерийныйНомер", "");
		
	ИначеЕсли ТипШтрихкодаИВидУпаковки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
		И ТипШтрихкодаИВидУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодов.SSCC Тогда
		
		СоставКодаМаркировки.Вставить("SSCC", "");
		
	КонецЕсли;
	
	Возврат СоставКодаМаркировки;
	
КонецФункции

Процедура ДополнитьНастройкиРазбораКодаМаркировки(НастройкиРазбораКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля) Экспорт
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
		
		ОписаниеКодаМаркировкиТабачногоБлока(НастройкиРазбораКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля);
		
		ОписаниеКодаМаркировкиТабачнойПачки(НастройкиРазбораКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля);
		
		ОписаниеКодаМаркировкиТабачнойПачкиКодПроверки8(НастройкиРазбораКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля);
		
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.Обувь Тогда
		
		ОписаниеКодаМаркировкиОбуви(НастройкиРазбораКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля);
		
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ЛегкаяПромышленность
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.Духи
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.Шины
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.Велосипеды
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.КреслаКоляски Тогда
		
		ОписаниеКодаМаркировкиЛегкойПромышленностиДуховШинВелосипедыКреслаКоляски(НастройкиРазбораКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля);
		
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукция Тогда
		
		ОписаниеКодаМаркировкиМолочнаяПродукция(НастройкиРазбораКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля);
		
		ОписаниеКодаМаркировкиМолочнаяПродукцияСкоропортящаяся(НастройкиРазбораКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля);
		
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.Фотоаппараты Тогда
		
		ОписаниеКодаМаркировкиФотоаппаратов(НастройкиРазбораКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	// Упаковка
	ОписаниеКодаМаркировкиЛогистическаяУпаковка20(НастройкиРазбораКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля);
	
	Если ВидПродукции <> Перечисления.ВидыПродукцииИС.Табак Тогда
		
		ОписаниеКодаМаркировкиЛогистическаяУпаковка18(НастройкиРазбораКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоНеФормализованныйКодМаркировки(ПараметрыРазбораКодаМаркировки, Настройки, ДанныеРезультата) Экспорт
	
	Если ЭтоНеФормализованныйКодМаркировкиГрупповойУпаковкиТабака(
			ПараметрыРазбораКодаМаркировки, Настройки, ДанныеРезультата) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЭтоНеФормализованныйКодМаркировкиЛогистическойУпаковкиТабакаGS1128(
			ПараметрыРазбораКодаМаркировки, Настройки, ДанныеРезультата) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоНеФормализованныйКодМаркировкиГрупповойУпаковкиТабака(ПараметрыРазбораКодаМаркировки, Настройки, ДанныеРезультата)
	
	ВидПродукции = Перечисления.ВидыПродукцииИС.Табак;
	
	Если Настройки.ДоступныеВидыПродукции.Найти(ВидПродукции) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// После идентификатора 93 для блоков и только для них может быть произвольное количество идентификаторов применения
	// 010460620310255621!MmNZo2800514900093Ij5E240FA075486.00
	
	ШаблонКодаМаркировкиДляПроверки = Новый Массив;
	
	ИдентификаторКодаПроверки = "КодПроверки";
	
	ОтборПоТабачнымБлокам  = Новый Структура("ВидПродукции, ВидУпаковки", ВидПродукции, Перечисления.ВидыУпаковокИС.Групповая);
	ШаблоныКодовМаркировки = Настройки.ШаблоныКодовМаркировкиПоВидамПродукции.НайтиСтроки(ОтборПоТабачнымБлокам);
	
	Для Каждого ШаблонКодаМаркировки Из ШаблоныКодовМаркировки Цикл
		
		ДанныеШаблона = Настройки.ШаблоныИОписанияВидовПродукции[ШаблонКодаМаркировки.Шаблон];
		
		Если ДанныеШаблона.ОписаниеКодаМаркировки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеИдентификатора = ДанныеШаблона.ОписаниеКодаМаркировки[ДанныеШаблона.ОписаниеКодаМаркировки.ВГраница()];
		
		Если ВРег(ОписаниеИдентификатора.Имя) = ВРег(ИдентификаторКодаПроверки) Тогда
			ШаблонКодаМаркировкиДляПроверки.Добавить(ШаблонКодаМаркировки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ШаблонКодаМаркировкиДляПроверки.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИсходныйКодМаркировки = ПараметрыРазбораКодаМаркировки.КодМаркировки;
	ДанныеРезультата      = Неопределено;
	
	Для Каждого ШаблонКодаМаркировки Из ШаблонКодаМаркировкиДляПроверки Цикл
		
		Если ПараметрыРазбораКодаМаркировки.НачинаетсяСоСкобки Или ПараметрыРазбораКодаМаркировки.СодержитGS1 Тогда
			ПараметрыРазбораКодаМаркировки.ДлинаКодаМаркировки = ШаблонКодаМаркировки.ДлинаСоСкобкой;
		Иначе
			ПараметрыРазбораКодаМаркировки.ДлинаКодаМаркировки = ШаблонКодаМаркировки.Длина;
		КонецЕсли;
		
		ПараметрыРазбораКодаМаркировки.КодМаркировки = Лев(ИсходныйКодМаркировки, ПараметрыРазбораКодаМаркировки.ДлинаКодаМаркировки);
		
		ДанныеРезультата = ШтрихкодированиеИССлужебный.КодМаркировкиСоответствуетШаблону(ПараметрыРазбораКодаМаркировки, Настройки, ШаблонКодаМаркировки);
		
		Если ЗначениеЗаполнено(ДанныеРезультата) Тогда
			
			ДанныеРезультата.КодМаркировки = ИсходныйКодМаркировки;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыРазбораКодаМаркировки.КодМаркировки       = ИсходныйКодМаркировки;
	ПараметрыРазбораКодаМаркировки.ДлинаКодаМаркировки = СтрДлина(ИсходныйКодМаркировки);
	
	Возврат ЗначениеЗаполнено(ДанныеРезультата);
	
КонецФункции

Функция ЭтоНеФормализованныйКодМаркировкиЛогистическойУпаковкиТабакаGS1128(ПараметрыРазбораКодаМаркировки, Настройки, ДанныеРезультата)
	
	ВидПродукции = Перечисления.ВидыПродукцииИС.Табак;
	
	Если Настройки.ДоступныеВидыПродукции.Найти(ВидПродукции) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ФильтрПоВидуПродукции = ПараметрыРазбораКодаМаркировки.ФильтрПоВидуПродукции;
	
	Если ФильтрПоВидуПродукции.Использовать
		И ФильтрПоВидуПродукции.ВидыПродукции.Количество() = 1
		И ФильтрПоВидуПродукции.ВидыПродукции[0] = ВидПродукции Тогда
		
		КодМаркировки = ПараметрыРазбораКодаМаркировки.КодМаркировки;

		Если ПараметрыРазбораКодаМаркировки.НачинаетсяСоСкобки Тогда
			РезультатРазбора = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьСтрокуШтрихкодаGS1(КодМаркировки);
			Если Не РезультатРазбора.Разобран Тогда
				Возврат Ложь;
			КонецЕсли;
		ИначеЕсли ПараметрыРазбораКодаМаркировки.СодержитGS1 Тогда
			// Тут все ОК
		Иначе
			// Делаем предположение что это табак!
			Если Не ШтрихкодированиеИСКлиентСервер.КодСоответствуетАлфавиту(КодМаркировки, Настройки.Алфавит.БуквыЦифрыЗнаки) Тогда
				Возврат Ложь;
			КонецЕсли;
			Если МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(КодМаркировки) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		ВидыПродукции = Новый ФиксированныйМассив(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидПродукции));
		
		ТипШтрихкодаИВидУпаковки = ШтрихкодированиеИССлужебный.ТипШтрихкодаИВидУпаковки();
		ТипШтрихкодаИВидУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_128;
		ТипШтрихкодаИВидУпаковки.ВидУпаковки  = Перечисления.ВидыУпаковокИС.Логистическая;
		
		СоставКодаМаркировки = НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки);
		
		ДанныеРезультата = ШтрихкодированиеИССлужебный.НовыйРезультатРазбораКодаМаркировки();
		ДанныеРезультата.КодМаркировки        = КодМаркировки;
		ДанныеРезультата.ТипШтрихкода         = ТипШтрихкодаИВидУпаковки.ТипШтрихкода;
		ДанныеРезультата.ВидУпаковки          = ТипШтрихкодаИВидУпаковки.ВидУпаковки;
		ДанныеРезультата.ВидыПродукции        = ВидыПродукции;
		ДанныеРезультата.СоставКодаМаркировки = СоставКодаМаркировки;
		
		НормализованныйКодМаркировки = ШтрихкодированиеИССлужебный.НормализоватьКодМаркировки(
			ДанныеРезультата, ВидПродукции);
		
		ДанныеРезультата.НормализованныйКодМаркировки = НормализованныйКодМаркировки;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Инициализирует результат формирования вложенных штрихкодов по кодам маркировки ИСМП.
//
// Возвращаемое значение:
//  Структура - Описание:
// * ВложенныеШтрихкоды - Структура - Описание:
// * ЕстьОшибки - Булево - Истина, если есть ошибки.
// * ТекстОшибки - Строка - Описание ошибки.
// * ТребуетсяОбновлениеКлючаСессии - Булево - Истина, если требуется авторизация.
Функция ИнициализацияРезультатаФормированияВложенныхШтрихкодов()
	
	РезультатФормированияВложенныхШтрихкодов = Новый Структура;
	
	РезультатФормированияВложенныхШтрихкодов.Вставить("ВложенныеШтрихкоды",             Неопределено);
	РезультатФормированияВложенныхШтрихкодов.Вставить("ЕстьОшибки",                     Ложь);
	РезультатФормированияВложенныхШтрихкодов.Вставить("ТекстОшибки",                    "");
	РезультатФормированияВложенныхШтрихкодов.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);

	Возврат РезультатФормированияВложенныхШтрихкодов;
	
КонецФункции

// Дополняет входящие в состав "Вложенных штрихкодов" коллекции - "Дерево упаковок" и "Маркированные товары" свойствами
// специфичными для табачной продукции и заполняет на основании данных - "Специфика штрихкодов".
//
// Параметры:
//  ВложенныеШтрихкоды - Структура - Включает в себя таблицу значений "Маркированные товары" и "Дерево упаковок".
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура НормализоватьДанныеВложенныхШтрихкодов(ВложенныеШтрихкоды, ПараметрыСканирования, ДанныеКодовМаркировки = Неопределено)
	
	ДеревоУпаковок      = ВложенныеШтрихкоды.ДеревоУпаковок;
	МаркированныеТовары = ВложенныеШтрихкоды.МаркированныеТовары;
	НормализоватьДанныеДереваУпаковок(ДеревоУпаковок, ПараметрыСканирования, ДанныеКодовМаркировки);
	НормализоватьДанныеТаблицыМаркированныеТовары(ДеревоУпаковок, МаркированныеТовары);
	
КонецПроцедуры

// Дополняет таблицу значений "Маркированные товары" свойствами специфичными для табачной продукции и заполняет
// на основании данных - "Дерева упаковок".
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
//  МаркированныеТовары - ТаблицаЗначений - Таблица с маркируемой продукцией.
Процедура НормализоватьДанныеТаблицыМаркированныеТовары(ДеревоУпаковок, МаркированныеТовары)
	
	МаркированныеТовары.Очистить();
	НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(МаркированныеТовары);
	ШтрихкодированиеИС.ЗаполнитьТаблицуМаркированныеТоварыПоСтрокамДереваУпаковок(ДеревоУпаковок.Строки, МаркированныеТовары);
	
КонецПроцедуры

// Формирует элементы справочника Штрихкоды упаковок на основании данных полученных из ИС МП.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура СоздатьЭлементыШтрихкодовУпаковокПоДереву(ДеревоУпаковок, ПараметрыСканирования)
	
	Если Не ПараметрыСканирования.СоздаватьШтрихкодУпаковки Тогда
		Возврат;
	КонецЕсли;
	
	Если ДеревоУпаковок.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		Если СтрокаДерева.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская
			И СтрокаДерева.Строки.Количество() = 0 Тогда  //Проверка на пустую упаковку.
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	НачатьТранзакцию();
	
	Попытка
		
		Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодыУпаковокПоДаннымДерева(ДеревоУпаковок);
		ЗаполнитьУпаковкуВерхнегоУровняДерева(ДеревоУпаковок);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ИмяСобытияЖурналРегистрации = НСтр("ru = 'Создание элементов справочника штрихкоды упаковок.'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
		
		ВызватьИсключение ПодробноеПредставлениеОшибки;
		
	КонецПопытки;
	
КонецПроцедуры

// Заполняет во всех строках дерева упаковку верхнего уровня.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
//  УпаковкаВерхнегоУровня - СтрокаДереваЗначений - верхний уровень дерева.
Процедура ЗаполнитьУпаковкуВерхнегоУровняДерева(ДеревоУпаковок, УпаковкаВерхнегоУровня = Неопределено)
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено Тогда
			УпаковкаВерхнегоУровня = СтрокаДерева.ШтрихкодУпаковки;
		КонецЕсли;
		
		СтрокаДерева.УпаковкаВерхнегоУровня = УпаковкаВерхнегоУровня;
		ЗаполнитьУпаковкуВерхнегоУровняДерева(СтрокаДерева, УпаковкаВерхнегоУровня);
		
	КонецЦикла;
	
КонецПроцедуры

// Получает информацию по коллекции EAN из сервиса МОТП.
//
// Параметры:
//  ШтрихкодыEANДляСопоставления - Массив - Штрихкоды EAN.
// Возвращаемое значение:
//  См. ИнтерфейсМОТП.ДанныеПродукцииПоШтрихкодуEAN
Функция ИнформацияНеизвестныхEANПоДаннымИСМП(ШтрихкодыEANДляСопоставления)
	
	ИнформацияНеизвестныхEAN = Новый Соответствие;
	Если ШтрихкодыEANДляСопоставления.Количество() = 0 Тогда
		Возврат ИнформацияНеизвестныхEAN;
	КонецЕсли;
	
	ДанныеИСМП = ИнтерфейсИСМП.ДанныеПродукцииПоШтрихкодуEAN(ШтрихкодыEANДляСопоставления);
	
	Если ДанныеИСМП.ТребуетсяОбновлениеКлючаСессии Тогда
		ВызватьИсключение НСтр("ru = 'Требуется обновление ключа сессии.'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИСМП.ТекстОшибки) Тогда
		ВызватьИсключение ДанныеИСМП.ТекстОшибки;
	КонецЕсли;
	
	Возврат ДанныеИСМП.ДанныеПродукцииПоШтрихкодуEAN;
	
КонецФункции

//Проверяет необходимость авторизации пользователя на сервере ИС МП.
// 
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Булево - Истина, если требуется авторизация.
Функция ТребуетсяАвторизацияПользователя(ПараметрыСканирования)
	
	ТребуетсяАвторизация = Ложь;
	
	Если ПараметрыСканирования.ЗапрашиватьСтатусыИСМП Тогда
		
		Организация = ПараметрыСканирования.Организация;
		Если ИнтерфейсАвторизацииИСМПВызовСервера.ТребуетсяОбновлениеКлючаСессии(
			ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация)) Тогда
			ТребуетсяАвторизация = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТребуетсяАвторизация;
	
КонецФункции

// Возвращает соответствие статусов их представлениям.
// 
// Параметры:
// Возвращаемое значение:
//  Соответствие - статусы и их представления.
Функция ПредставленияСтатусов() Экспорт
	
	ПредставленияСтатусов = Новый Соответствие();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтатусыКодовМаркировки.Ссылка                КАК Статус,
	|	ПРЕДСТАВЛЕНИЕ(СтатусыКодовМаркировки.Ссылка) КАК ПредставлениеСтатуса
	|ИЗ
	|	Перечисление.СтатусыКодовМаркировкиИСМП КАК СтатусыКодовМаркировки");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПредставленияСтатусов.Вставить(Выборка.Статус, Выборка.ПредставлениеСтатуса);
	КонецЦикла;
	
	Возврат ПредставленияСтатусов;
	
КонецФункции

// Выполняет проверку на ошибки по заданным правилам.
// 
// Параметры:
//  ДанныеПоШтрихкодам - См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам
//  ПравилаПроверкиНаОшибки - Структура - Описание:
//   * КонтрольСерий - Массив - Коллекция строк, где были выявлены ошибки по контролю серий.
//   * КонтрольСтатусов - Массив - Массив структур:
//     * СтрокиСОшибками - Массив - Коллекция строк, где были выявлены ошибки по контролю статусов.
//     * ДоступныеСтатусы - Массив из ПеречислениеСсылка.СтатусыКодовМаркировкиИСМП - Доступные статусы
//  ПараметрыСканирования - См. ШтрихкодированиеИСКлиент.ПараметрыСканирования
//  ЕстьОшибки - Булево - Истина, если найдена ошибка.
Процедура ПроверитьНаОшибкиПоПравилам(ДанныеПоШтрихкодам, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки)
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		
		ДеревоУпаковок = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
		
		ПроверитьНаОшибкиСтрокиДерева(ДеревоУпаковок.Строки, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ДанныеПоШтрихкодам, ЕстьОшибки);
		ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = ЕстьОшибки;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСтатусов")
			И ПравилаПроверкиНаОшибки.КонтрольСтатусов.СтрокиСОшибками.Количество() > 0 Тогда
			
			ПредставленияСтатусов = ПравилаПроверкиНаОшибки.КонтрольСтатусов.ПредставлениеСтатусов;
			Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтрольСтатусов.СтрокиСОшибками Цикл
				
				Если СтрокаДерева.ЕстьОшибки Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДерева.Статус)
					И ЗначениеЗаполнено(СтрокаДерева.ОсобоеСостояние) Тогда
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Статус: %1 (%2)'"),
						ПредставленияСтатусов.Получить(СтрокаДерева.Статус),
						ПредставленияСтатусов.Получить(СтрокаДерева.ОсобоеСостояние));
				Иначе
					ТекстОшибки = СтрШаблон(НСтр("ru = 'Статус: %1'"), ПредставленияСтатусов.Получить(СтрокаДерева.Статус));
				КонецЕсли;
				
				СтрокаДерева.ТекстОшибки = ТекстОшибки;
				СтрокаДерева.ЕстьОшибки  = Истина;
				
			КонецЦикла;
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца") Тогда 
			
			Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтрольВладельца Цикл
				
				Если СтрокаДерева.ЕстьОшибки Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДерева.Владелец) Тогда
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Владелец: %1 (%2)'"),
						СтрокаДерева.Владелец,
						СтрокаДерева.ИННВладельца);
				Иначе
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'ИНН владельца: %1'"),
						СтрокаДерева.ИННВладельца);
				КонецЕсли;
				
				СтрокаДерева.ТекстОшибки = ТекстОшибки;
				СтрокаДерева.ЕстьОшибки  = Истина;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСпособаВводаВОборот")
			И ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборот.Количество() > 0 Тогда
			
			Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборот Цикл
				
				Если СтрокаДерева.ЕстьОшибки Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаДерева.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Способ ввода в оборот: %1'"),
					СтрокаДерева.СпособВводаВОборот);
				
				СтрокаДерева.ЕстьОшибки = Истина;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольПустыхУпаковок")
			И ПравилаПроверкиНаОшибки.КонтрольПустыхУпаковок.Количество() > 0 Тогда
			
			Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтрольПустыхУпаковок Цикл
				
				Если СтрокаДерева.ЕстьОшибки Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаДерева.ТекстОшибки = НСтр("ru = 'Пустая упаковка'");
				СтрокаДерева.ЕстьОшибки  = Истина;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСоставаУпаковокИСМП") Тогда
			
			ЕстьРасхождения = Ложь;
			ШтрихкодированиеИС.ВыявитьРасхожденияВСоставахДеревьев(
				ДеревоУпаковок, ДанныеПоШтрихкодам.ДеревоПоДаннымСервиса, ЕстьРасхождения);
			
			Если ЕстьРасхождения Тогда
				ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольКодовВводаОстатков")
		И ПравилаПроверкиНаОшибки.КонтрольКодовВводаОстатков.Количество() > 0 Тогда
		
		Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтрольКодовВводаОстатков Цикл
			
			Если СтрокаДерева.ЕстьОшибки Тогда
				Продолжить;
			КонецЕсли;
			
			ПроизвестиКонтрольСпособаВводаВОборотОстатки(
				СтрокаДерева.Штрихкод, ДанныеПоШтрихкодам, ПараметрыСканирования, "КодМаркировки");
			
			СтрокаДерева.ЕстьОшибки = ЗначениеЗаполнено(СтрокаДерева.ТекстОшибки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольОкончанияСрокаГодности")
		И ПравилаПроверкиНаОшибки.КонтрольОкончанияСрокаГодности.Количество() > 0 Тогда
		
		Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтрольОкончанияСрокаГодности Цикл
			
			Если СтрокаДерева.ЕстьОшибки Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДерева.ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Истек срок годности продукции. Товар годен до: %1'"),
				СтрокаДерева.ГоденДо);
			СтрокаДерева.ЕстьОшибки  = Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПроверитьНаОшибкиТаблицуДанныеКодовМаркировки(
		ДанныеПоШтрихкодам, ПравилаПроверкиНаОшибки,
		ПараметрыСканирования, ЕстьОшибки);
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСтатусов")
		И ПравилаПроверкиНаОшибки.КонтрольСтатусов.СтрокиСОшибками.Количество() > 0 Тогда
		
		ПредставленияСтатусов = ПравилаПроверкиНаОшибки.КонтрольСтатусов.ПредставлениеСтатусов;
		Для Каждого СтрокаДанных Из ПравилаПроверкиНаОшибки.КонтрольСтатусов.СтрокиСОшибками Цикл
			
			Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДанных.Статус)
				И ЗначениеЗаполнено(СтрокаДанных.ОсобоеСостояние) Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Статус: %1 (%2)'"),
					ПредставленияСтатусов.Получить(СтрокаДанных.Статус),
					ПредставленияСтатусов.Получить(СтрокаДанных.ОсобоеСостояние));
			Иначе
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Статус: %1'"), ПредставленияСтатусов.Получить(СтрокаДанных.Статус));
			КонецЕсли;
			
			СтрокаДанных.ТекстОшибки = ТекстОшибки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца")
		И ПравилаПроверкиНаОшибки.КонтрольВладельца.Количество() > 0 Тогда
		
		Для Каждого СтрокаДанных Из ПравилаПроверкиНаОшибки.КонтрольВладельца Цикл
			
			Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДанных.Владелец) Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Владелец: %1 (%2)'"),
					СтрокаДанных.Владелец,
					СтрокаДанных.ИННВладельца);
			Иначе
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'ИНН владельца: %1'"),
					СтрокаДанных.ИННВладельца);
			КонецЕсли;
			
			СтрокаДанных.ТекстОшибки = ТекстОшибки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольКодовВводаОстатков")
		И ПравилаПроверкиНаОшибки.КонтрольКодовВводаОстатков.Количество() > 0 Тогда
		
		Для Каждого СтрокаДанных Из ПравилаПроверкиНаОшибки.КонтрольКодовВводаОстатков Цикл
			
			Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;
			
			ПроизвестиКонтрольСпособаВводаВОборотОстатки(
				СтрокаДанных.Штрихкод, ДанныеПоШтрихкодам, ПараметрыСканирования, "Штрихкод");
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСпособаВводаВОборот")
		И ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборот.Количество() > 0 Тогда
		
		Для Каждого СтрокаДанных Из ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборот Цикл
			
			Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;
			
			СпособВводаВОборот = СтрокаДанных.СпособВводаВОборот;
			Если СпособВводаВОборот = Неопределено Тогда
				СпособВводаВОборот = НСтр("ru='Неопределен'");
			КонецЕсли;
			
			СтрокаДанных.ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Способ ввода в оборот: %1
				           |Ожидаемый способ ввода в оборот: %2'"),
				СпособВводаВоборот, ПараметрыСканирования.ДопустимыйСпособВводаВОборот);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСрокаГодности")
		И ПравилаПроверкиНаОшибки.КонтрольСрокаГодности.ЕстьОшибка Тогда
		
		Для Каждого СтрокаДанных Из ПравилаПроверкиНаОшибки.КонтрольСрокаГодности.СтрокиСОшибками Цикл
			
			Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;
			
			СрокГодности = СтрокаДанных.СоставКодаМаркировки.ГоденДо;
			СтрокаДанных.ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Срок годности кода маркировки не соответствует ни одному ВСД.
				           |Срок годности: %1'"), СрокГодности);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольОкончанияСрокаГодности")
		И ПравилаПроверкиНаОшибки.КонтрольОкончанияСрокаГодности.Количество() > 0 Тогда
		
		Для Каждого СтрокаДанных Из ПравилаПроверкиНаОшибки.КонтрольОкончанияСрокаГодности Цикл
			
			Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДанных.ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Истек срок годности продукции. Товар годен до: %1'"),
				СтрокаДанных.ГоденДо);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ШтрихкодированиеИС.ПроконтролироватьЗаполнениеСерийСУчетомСохраненногоВыбора(
		ПравилаПроверкиНаОшибки, ПараметрыСканирования);
	
КонецПроцедуры

Процедура ПроизвестиКонтрольСпособаВводаВОборотОстатки(Штрихкод, ДанныеПоШтрихкодам, ПараметрыСканирования, ИмяПоляПоиска)
	
	МаркировкаОстатков = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков;
	ШаблонОшибки       = НСтр("ru = 'Способ ввода в оборот: %1
	                                |Ожидаемый способ ввода в оборот: %2'");
	
	СообщитьОбОшибке            = Истина;
	СпособВводаВОборот          = Неопределено;
	ОжидаемыйСпособВводаВОборот = Неопределено;
	Если ДанныеПоШтрихкодам.ДанныеКодовМаркировки.Колонки.Найти(ИмяПоляПоиска) = Неопределено Тогда
		ИмяПоляПоиска = "Штрихкод";
	КонецЕсли;
	СтрокаДанных = ДанныеПоШтрихкодам.ДанныеКодовМаркировки.Найти(Штрихкод, ИмяПоляПоиска);
	
	Если ПараметрыСканирования.ДопустимыйСпособВводаВОборот = МаркировкаОстатков
		Или ПараметрыСканирования.ЭтоМаркировкаОстатков = Истина Тогда
		
		СпособВводаВОборот          = СтрокаДанных.СпособВводаВОборот;
		ОжидаемыйСпособВводаВОборот = МаркировкаОстатков;
		
		Если СтрокаДанных.ЭтоКодВводаОстатков Тогда
			СообщитьОбОшибке = Ложь;
		ИначеЕсли СтрокаДанных.СпособВводаВОборот = МаркировкаОстатков Тогда
			СообщитьОбОшибке = Ложь;
		КонецЕсли;
		
	ИначеЕсли (ЗначениеЗаполнено(ПараметрыСканирования.ДопустимыйСпособВводаВОборот)
		И ПараметрыСканирования.ДопустимыйСпособВводаВОборот <> МаркировкаОстатков)
		Или ПараметрыСканирования.ЭтоМаркировкаОстатков = Ложь Тогда
		
		СпособВводаВОборот          = СтрокаДанных.СпособВводаВОборот;
		ОжидаемыйСпособВводаВОборот = ПараметрыСканирования.ДопустимыйСпособВводаВОборот;
		
		Если СтрокаДанных.СпособВводаВОборот <> МаркировкаОстатков Тогда
			СообщитьОбОшибке = Ложь;
		ИначеЕсли Не СтрокаДанных.ЭтоКодВводаОстатков Тогда
			СообщитьОбОшибке = Ложь;
		КонецЕсли;
		
	Иначе
		СообщитьОбОшибке = Ложь;
	КонецЕсли;
	
	Если СообщитьОбОшибке Тогда 
		СтрокаДанных.ТекстОшибки = СтрШаблон(
			ШаблонОшибки,
			СпособВводаВОборот,
			ОжидаемыйСпособВводаВОборот);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку строк дерева на ошибки.
//
// Параметры:
//  СтрокиДерева - КоллекцияСтрокДереваЗначений - Строки дерева упаковок.
//  ПравилаПроверкиНаОшибки - Структура - правила, по которым выполняется проверка:
//    * КонтрольСерий - Массив - для дерева заполнение серий не контролируется.
//    * КонтрольСтатусов - Массив - список строк дерева, в которых статус не соответствует ожидаемому.
//  ПараметрыСканирования - (См. ШтрихкодированиеИС.ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если при проверке выявлены ошибки.
Процедура ПроверитьНаОшибкиСтрокиДерева(СтрокиДерева, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ДанныеПоШтрихкодам, ЕстьОшибки)
	
	ВладелецМожетБытьПустым = Ложь;
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца") Тогда
		
		Если ЗначениеЗаполнено(ПараметрыСканирования.Владелец) Тогда
			
			СведенияОбОрганизации = Неопределено;
			Если ДанныеПоШтрихкодам.СведенияОбОрганизациях = Неопределено Тогда
				ДанныеПоШтрихкодам.СведенияОбОрганизациях = Новый Соответствие;
			Иначе
				СведенияОбОрганизации = ДанныеПоШтрихкодам.СведенияОбОрганизациях[ПараметрыСканирования.Владелец];
			КонецЕсли;
			Если СведенияОбОрганизации = Неопределено Тогда
				СведенияОбОрганизации = ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(ПараметрыСканирования.Владелец);
				ДанныеПоШтрихкодам.СведенияОбОрганизациях.Вставить(ПараметрыСканирования.Владелец, СведенияОбОрганизации);
			КонецЕсли;
			
			ОжидаемыйИННВладельца = СведенияОбОрганизации.ИНН;
			
		Иначе
			
			ОжидаемыйИННВладельца = "";
			
		КонецЕсли;
		
		ВладелецМожетБытьПустым = ПроверкаИПодборПродукцииИСМПКлиентСервер.ЭтоДокументПриобретения(ПараметрыСканирования.СсылкаНаОбъект);
		
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСтатусов") Тогда
			
			Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
				ДопустимыеСтатусыИСМП = ПравилаПроверкиНаОшибки.КонтрольСтатусов.ДопустимыеСтатусыУпаковок;
			Иначе
				ДопустимыеСтатусыИСМП = ПравилаПроверкиНаОшибки.КонтрольСтатусов.ДопустимыеСтатусы;
			КонецЕсли;
			
			ОтсутствуетДопустимыйСтатус = ДопустимыеСтатусыИСМП.Найти(СтрокаДерева.Статус) = Неопределено;
			Если Не ОтсутствуетДопустимыйСтатус
				И ЗначениеЗаполнено(СтрокаДерева.ОсобоеСостояние)
				И ДопустимыеСтатусыИСМП.Найти(СтрокаДерева.ОсобоеСостояние) = Неопределено Тогда
				ОтсутствуетДопустимыйСтатус = Истина;
			КонецЕсли;
			
			Если ОтсутствуетДопустимыйСтатус Тогда
				
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольСтатусов.СтрокиСОшибками.Добавить(СтрокаДерева);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСпособаВводаВОборот") Тогда
			
			Если СтрокаДерева.Статус <> Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен
				И СтрокаДерева.СпособВводаВОборот <> ПараметрыСканирования.ДопустимыйСпособВводаВОборот Тогда
				
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборот.Добавить(СтрокаДерева);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца") Тогда
			Если СтрокаДерева.Статус <> Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен
				И СтрокаДерева.Статус <> Неопределено
				И СтрокаДерева.ИННВладельца <> ОжидаемыйИННВладельца Тогда
				
				Если ВладелецМожетБытьПустым И Не ЗначениеЗаполнено(СтрокаДерева.ИННВладельца) Тогда
				Иначе
					ЕстьОшибки = Истина;
					ПравилаПроверкиНаОшибки.КонтрольВладельца.Добавить(СтрокаДерева);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольКодовВводаОстатков") Тогда
			
			НайденнаяСтрока = ДанныеПоШтрихкодам.ДанныеКодовМаркировки.Найти(СтрокаДерева.Штрихкод, "Штрихкод");
			
			Если НайденнаяСтрока <> Неопределено
				И НайденнаяСтрока.МаркируемаяПродукция
				И (Не НайденнаяСтрока.ЭтоКодВводаОстатков И ПараметрыСканирования.ЭтоМаркировкаОстатков
				Или НайденнаяСтрока.ЭтоКодВводаОстатков И Не ПараметрыСканирования.ЭтоМаркировкаОстатков) Тогда
				
				ПравилаПроверкиНаОшибки.КонтрольКодовВводаОстатков.Добавить(СтрокаДерева);
				ЕстьОшибки = Истина;
				
			КонецЕсли;
			
			Если ПравилаПроверкиНаОшибки.Свойство("КонтрольПустыхУпаковок")
				И ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки)
				И СтрокаДерева.Строки.Количество() = 0 Тогда
				
	 			ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольПустыхУпаковок.Добавить(СтрокаДерева);
			
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольОкончанияСрокаГодности") Тогда
			
			Если СтрокаДерева.ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукция
				И ЗначениеЗаполнено(СтрокаДерева.ГоденДо)
				И СтрокаДерева.ГоденДо < ПараметрыСканирования.ДатаДокумента Тогда
				
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольОкончанияСрокаГодности.Добавить(СтрокаДерева);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПравилаПроверкиНаОшибки.ПроверенныеШтрихкоды.Вставить(СтрокаДерева.Штрихкод, Истина);
		ПроверитьНаОшибкиСтрокиДерева(СтрокаДерева.Строки, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ДанныеПоШтрихкодам, ЕстьОшибки);
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет обработанные штрихкоды на ошибки по заданным правилам.
// 
// Параметры:
//  ДанныеПоШтрихкодам - См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам
//  ПравилаПроверкиНаОшибки - Структура - Описание:
// * КонтрольСерий - Массив - Коллекция строк, где были выявлены ошибки по контролю серий.
// * КонтрольСтатусов - Массив - Массив структур:
//     * СтрокиСОшибками - Массив - Коллекция строк, где были выявлены ошибки по контролю статусов.
//     * ДоступныеСтатусы - Массив Из ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП - Доступные статусы
//                          ошибки по контролю статусов.
//  ПараметрыСканирования - См. ШтрихкодированиеИС.ПараметрыСканирования
//  ЕстьОшибки - Булево - Истина, если найдена ошибка.
Процедура ПроверитьНаОшибкиТаблицуДанныеКодовМаркировки(ДанныеПоШтрихкодам, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки)
	
	ВладелецМожетБытьПустым = Ложь;
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца") Тогда
		ВладелецМожетБытьПустым = ПроверкаИПодборПродукцииИСМПКлиентСервер.ЭтоДокументПриобретения(ПараметрыСканирования.СсылкаНаОбъект);
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если СтрокаДанных.ЭтоШтрихкодНоменклатуры Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСерий") Тогда
			Если ТребуетсяВыборСерии(СтрокаДанных, ПараметрыСканирования) Тогда
				ПравилаПроверкиНаОшибки.КонтрольСерий.Добавить(СтрокаДанных);
			КонецЕсли;
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСрокаГодности") Тогда
			
			ПроверитьДанныеСтрокиПоСрокуГодности(СтрокаДанных, ПравилаПроверкиНаОшибки.КонтрольСрокаГодности, ПараметрыСканирования);
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.ПроверенныеШтрихкоды.Получить(СтрокаДанных.Штрихкод) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца") Тогда
			
			Если ЗначениеЗаполнено(ПараметрыСканирования.Владелец) Тогда
				
				СведенияОбОрганизации = Неопределено;
				Если ДанныеПоШтрихкодам.СведенияОбОрганизациях = Неопределено Тогда
					ДанныеПоШтрихкодам.СведенияОбОрганизациях = Новый Соответствие;
				Иначе
					СведенияОбОрганизации = ДанныеПоШтрихкодам.СведенияОбОрганизациях[ПараметрыСканирования.Владелец];
				КонецЕсли;
				Если СведенияОбОрганизации = Неопределено Тогда
					СведенияОбОрганизации = ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(ПараметрыСканирования.Владелец);
					ДанныеПоШтрихкодам.СведенияОбОрганизациях.Вставить(ПараметрыСканирования.Владелец, СведенияОбОрганизации);
				КонецЕсли;
				
				ОжидаемыйИННВладельца = СведенияОбОрганизации.ИНН;
				
			Иначе
				
				ОжидаемыйИННВладельца = "";
				
			КонецЕсли;
			
			Если ВладелецМожетБытьПустым И Не ЗначениеЗаполнено(СтрокаДанных.ИННВладельца) Тогда
			ИначеЕсли СтрокаДанных.ИННВладельца <> ОжидаемыйИННВладельца
				И СтрокаДанных.Статус <> Неопределено
				И СтрокаДанных.Статус <> Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен Тогда
				
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольВладельца.Добавить(СтрокаДанных);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСтатусов") Тогда
			
			Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
				ДопустимыеСтатусыИСМП = ПравилаПроверкиНаОшибки.КонтрольСтатусов.ДопустимыеСтатусыУпаковок;
			Иначе
				ДопустимыеСтатусыИСМП = ПравилаПроверкиНаОшибки.КонтрольСтатусов.ДопустимыеСтатусы;
			КонецЕсли;
			
			ДопустимыеСтатусыИСМП = ПравилаПроверкиНаОшибки.КонтрольСтатусов.ДопустимыеСтатусы;
			ОтсутствуетДопустимыйСтатус = ДопустимыеСтатусыИСМП.Найти(СтрокаДанных.Статус) = Неопределено;
			Если Не ОтсутствуетДопустимыйСтатус
				И ЗначениеЗаполнено(СтрокаДанных.ОсобоеСостояние)
				И ДопустимыеСтатусыИСМП.Найти(СтрокаДанных.ОсобоеСостояние) = Неопределено Тогда
				ОтсутствуетДопустимыйСтатус = Истина;
			КонецЕсли;
			
			Если ОтсутствуетДопустимыйСтатус Тогда
				
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольСтатусов.СтрокиСОшибками.Добавить(СтрокаДанных);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольКодовВводаОстатков") Тогда
			
			СтрокаДанных = ДанныеПоШтрихкодам.ДанныеКодовМаркировки.Найти(СтрокаДанных.Штрихкод, "Штрихкод");
			Если СтрокаДанных.ЭтоКодВводаОстатков
				Или ПараметрыСканирования.ЭтоМаркировкаОстатков <> Неопределено Тогда
				
				ПравилаПроверкиНаОшибки.КонтрольКодовВводаОстатков.Добавить(СтрокаДанных);
			
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСпособаВводаВОборот") Тогда
			
			Если ЗначениеЗаполнено(СтрокаДанных.СпособВводаВОборот) // Агрегация, новые упаковки.
				И СтрокаДанных.СпособВводаВОборот <> ПараметрыСканирования.ДопустимыйСпособВводаВОборот Тогда
				
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборот.Добавить(СтрокаДанных);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольОкончанияСрокаГодности") Тогда
			
			Если СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукция
				И ЗначениеЗаполнено(СтрокаДанных.ГоденДо)
				И СтрокаДанных.ГоденДо < ПараметрыСканирования.ДатаДокумента Тогда
				
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольОкончанияСрокаГодности.Добавить(СтрокаДанных);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьДанныеСтрокиПоСрокуГодностиДокументаОснования(СтрокаДанных, ПравилоПроверки, ПараметрыСканирования)
	
	Если Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования) Тогда
		Возврат;
	КонецЕсли;
	
	Скоропортящаяся = Ложь;
	ГоденДо         = '00010101';
	ГоденДоПоДаннымВСД = '00010101';
	Если СтрокаДанных.СоставКодаМаркировки <> Неопределено
		И СтрокаДанных.СоставКодаМаркировки.Свойство("ГоденДо")
		И ЗначениеЗаполнено(СтрокаДанных.СоставКодаМаркировки.ГоденДо) Тогда
		ГоденДо         = СтрокаДанных.СоставКодаМаркировки.ГоденДо;
		Скоропортящаяся = СтрокаДанных.СоставКодаМаркировки.Скоропортящаяся;
	КонецЕсли;
	
	ДанныеДокументаОснования = ПолучитьИзВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования);
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика", СтрокаДанных.Номенклатура, СтрокаДанных.Характеристика);
	НайденныеДанные = ДанныеДокументаОснования.НайтиСтроки(СтруктураПоиска);
	
	ПодходящиеИдентификаторыПроисхожденияВЕТИС = Новый Массив;
	Для Каждого НайденнаяСтрока Из НайденныеДанные Цикл
		
		ДанныеИдентификатораПроисхожденияВЕТИС = НайденнаяСтрока.ДанныеИдентификатораПроисхожденияВЕТИС;
		
		Если ЗначениеЗаполнено(ГоденДо) Тогда
			
			Если ДанныеИдентификатораПроисхожденияВЕТИС.Скоропортящаяся = Скоропортящаяся Тогда
				
				НачалоПериода = СрокГодностиСТочностьюЗаполнения(
					ДанныеИдентификатораПроисхожденияВЕТИС.НачалоПериода,
					ДанныеИдентификатораПроисхожденияВЕТИС.ТочностьЗаполнения);
				
				КонецПериода = СрокГодностиСТочностьюЗаполнения(
					ДанныеИдентификатораПроисхожденияВЕТИС.КонецПериода,
					ДанныеИдентификатораПроисхожденияВЕТИС.ТочностьЗаполнения,
					Истина);
				
				Если ГоденДо >= НачалоПериода
					И (ГоденДо <= КонецПериода Или Не ЗначениеЗаполнено(КонецПериода))Тогда
					ПодходящиеИдентификаторыПроисхожденияВЕТИС.Добавить(ДанныеИдентификатораПроисхожденияВЕТИС.ИдентификаторПроисхожденияВЕТИС);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(ДанныеИдентификатораПроисхожденияВЕТИС.НачалоПериода)
				И Не ЗначениеЗаполнено(ДанныеИдентификатораПроисхожденияВЕТИС.КонецПериода) Тогда
				ГоденДоПоДаннымВСД = ДанныеИдентификатораПроисхожденияВЕТИС.НачалоПериода;
			КонецЕсли;
			ПодходящиеИдентификаторыПроисхожденияВЕТИС.Добавить(ДанныеИдентификатораПроисхожденияВЕТИС.ИдентификаторПроисхожденияВЕТИС);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПодходящиеИдентификаторыПроисхожденияВЕТИС.Количество() > 1 Тогда
		СтрокаДанных.ИдентификаторыПроисхожденияВЕТИС = ПодходящиеИдентификаторыПроисхожденияВЕТИС;
	ИначеЕсли ПодходящиеИдентификаторыПроисхожденияВЕТИС.Количество() = 1 Тогда
		СтрокаДанных.ИдентификаторПроисхожденияВЕТИС = ПодходящиеИдентификаторыПроисхожденияВЕТИС[0];
		Если ЗначениеЗаполнено(ГоденДо) Тогда
			СтрокаДанных.ГоденДо = ГоденДо;
			СтрокаДанных.ТребуетсяВыборВСД = Ложь;
		ИначеЕсли ЗначениеЗаполнено(ГоденДоПоДаннымВСД) Тогда
			СтрокаДанных.ГоденДо = ГоденДоПоДаннымВСД;
			СтрокаДанных.ТребуетсяВыборВСД = Ложь;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДанных.СтрокаДерева) Тогда
			ЗаполнитьЗначенияСвойств(СтрокаДанных.СтрокаДерева, СтрокаДанных, "ИдентификаторПроисхожденияВЕТИС,ГоденДо");
		КонецЕсли;
	Иначе
		ПравилоПроверки.ЕстьОшибка     = Истина;
		СтрокаДанных.ТребуетсяВыборВСД = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДанныеСтрокиПоСрокуГодностиДокумента(СтрокаДанных, ПравилоПроверки, ПараметрыСканирования)
	
	Если ПравилоПроверки.ЕстьОшибка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.ДанныеТаблицыТовары) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеТаблицыТовары = ПолучитьИзВременногоХранилища(ПараметрыСканирования.ДанныеТаблицыТовары);
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика", СтрокаДанных.Номенклатура, СтрокаДанных.Характеристика);
	
	ГоденДо = '00010101';
	Если СтрокаДанных.СоставКодаМаркировки <> Неопределено
		И СтрокаДанных.СоставКодаМаркировки.Свойство("ГоденДо")
		И ЗначениеЗаполнено(СтрокаДанных.СоставКодаМаркировки.ГоденДо) Тогда
		ГоденДо = СтрокаДанных.СоставКодаМаркировки.ГоденДо;
		СтруктураПоиска.Вставить("СрокГодности", ГоденДо);
	КонецЕсли;
	
	НайденныеСтроки = ДанныеТаблицыТовары.НайтиСтроки(СтруктураПоиска);
	СтруктураПоиска.Удалить("Номенклатура");
	СтруктураПоиска.Удалить("Характеристика");
	
	ПодходящиеИдентификаторыПроисхожденияВЕТИС = Новый Массив;
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ПодходящиеИдентификаторыПроисхожденияВЕТИС.Добавить(НайденнаяСтрока.ИдентификаторПроисхожденияВЕТИС);
	КонецЦикла;
	ПодходящиеИдентификаторыПроисхожденияВЕТИС = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПодходящиеИдентификаторыПроисхожденияВЕТИС);
	
	ИдентификаторыПоДокументуОснованию = Новый Массив;
	Если ЗначениеЗаполнено(СтрокаДанных.ИдентификаторПроисхожденияВЕТИС) Тогда
		ИдентификаторыПоДокументуОснованию.Добавить(СтрокаДанных.ИдентификаторПроисхожденияВЕТИС);
	ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.ИдентификаторыПроисхожденияВЕТИС) Тогда
		ИдентификаторыПоДокументуОснованию = ОбщегоНазначения.СкопироватьРекурсивно(СтрокаДанных.ИдентификаторыПроисхожденияВЕТИС, Ложь);
	КонецЕсли;
	
	// Ограничим данными документа, если ввод по документу-очнованию
	Если ИдентификаторыПоДокументуОснованию.Количество() Тогда
		ПодходящиеИдентификаторыПроисхожденияВЕТИС = ИнтеграцияИС.ПересечениеМассивов(ПодходящиеИдентификаторыПроисхожденияВЕТИС, ИдентификаторыПоДокументуОснованию)
	КонецЕсли;
	
	Если ПодходящиеИдентификаторыПроисхожденияВЕТИС.Количество() > 1 Тогда
		СтрокаДанных.ИдентификаторПроисхожденияВЕТИС = ПодходящиеИдентификаторыПроисхожденияВЕТИС;
	ИначеЕсли ПодходящиеИдентификаторыПроисхожденияВЕТИС.Количество() = 1 Тогда
		СтрокаДанных.ИдентификаторПроисхожденияВЕТИС = ПодходящиеИдентификаторыПроисхожденияВЕТИС[0];
		Если ЗначениеЗаполнено(ГоденДо) Тогда
			СтрокаДанных.ГоденДо = ГоденДо;
			СтрокаДанных.ТребуетсяВыборВСД = Ложь;
		Иначе
			СтруктураПоиска.Вставить("ИдентификаторПроисхожденияВЕТИС", СтрокаДанных.ИдентификаторПроисхожденияВЕТИС);
			НайденныеСтроки = ДанныеТаблицыТовары.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() = 1 Тогда
				СтрокаДанных.ГоденДо = НайденныеСтроки[0].СрокГодности;
				СтрокаДанных.ТребуетсяВыборВСД = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДанных.СтрокаДерева) Тогда
			ЗаполнитьЗначенияСвойств(СтрокаДанных.СтрокаДерева, СтрокаДанных, "ИдентификаторПроисхожденияВЕТИС,ГоденДо");
		КонецЕсли;
	ИначеЕсли ИдентификаторыПоДокументуОснованию.Количество() Тогда
		ПравилоПроверки.ЕстьОшибка     = Истина;
		СтрокаДанных.ТребуетсяВыборВСД = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДанныеСтрокиПоСрокуГодности(СтрокаДанных, ПравилоПроверки, ПараметрыСканирования)
	
	Если СтрокаДанных.ВидПродукции <> Перечисления.ВидыПродукцииИС.МолочнаяПродукция Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДанных.ТребуетсяВыборВСД = Истина;
	
	ПроверитьДанныеСтрокиПоСрокуГодностиДокументаОснования(СтрокаДанных, ПравилоПроверки, ПараметрыСканирования);
	ПроверитьДанныеСтрокиПоСрокуГодностиДокумента(СтрокаДанных, ПравилоПроверки, ПараметрыСканирования);
	
КонецПроцедуры

Функция СрокГодностиСТочностьюЗаполнения(СрокГодности, ТочностьЗаполнения, КонецИнтервала = Ложь)
	
	Если Не ЗначениеЗаполнено(СрокГодности) Тогда
		Возврат СрокГодности;
	КонецЕсли;
	
	СрокГодностиСТочностьюЗаполнения = СрокГодности;
	
	Если ТочностьЗаполнения = Перечисления.ТочностьЗаполненияПериодаВЕТИС.ГГГГ Тогда
		СрокГодностиСТочностьюЗаполнения = ?(КонецИнтервала, КонецГода(СрокГодности),НачалоГода(СрокГодности));
	ИначеЕсли ТочностьЗаполнения = Перечисления.ТочностьЗаполненияПериодаВЕТИС.ММГГГГ Тогда
		СрокГодностиСТочностьюЗаполнения = ?(КонецИнтервала, КонецМесяца(СрокГодности),НачалоМесяца(СрокГодности));
	ИначеЕсли ТочностьЗаполнения = Перечисления.ТочностьЗаполненияПериодаВЕТИС.ДДММГГГГ Тогда
		СрокГодностиСТочностьюЗаполнения = ?(КонецИнтервала, КонецДня(СрокГодности),НачалоДня(СрокГодности));
	ИначеЕсли ТочностьЗаполнения = Перечисления.ТочностьЗаполненияПериодаВЕТИС.ДДММГГГГЧЧ Тогда
		СрокГодностиСТочностьюЗаполнения = ?(КонецИнтервала, КонецЧаса(СрокГодности),НачалоЧаса(СрокГодности));
	КонецЕсли;
	
	Возврат СрокГодностиСТочностьюЗаполнения;
	
КонецФункции

// Определяет необходимость указания серии для маркиремой продукции.
// 
// Параметры:
//  ДанныеШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Булево - Истина, если требуется указать серию.
Функция ТребуетсяВыборСерии(ДанныеШтрихкода, ПараметрыСканирования)
	
	ТребуетсяВыбор = Ложь;
	
	Если ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар 
		И ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура)
		И Не ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
		
		ТребуетсяВыбор = ИнтеграцияИС.ТребуетсяВыборСерии(ДанныеШтрихкода, ПараметрыСканирования);
		
	КонецЕсли;
	
	Возврат ТребуетсяВыбор;
	
КонецФункции

// Инициализирует структуру правил для проверки на ошибки данных по кодам маркировки.
// 
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
// Возвращаемое значение:
//  Структура - Описание:
// * КонтрольВладельца - Массив - коллекция, куда требуется поместить строки с ошибками при контроле владельца.
// * КонтрольСоставаУпаковокИСМП - Массив - коллекция, куда требуется поместить строки с ошибками при контроле состава упаковок.
// * КонтрольСпособаВводаВОборот - Массив - коллекция, куда требуется поместить строки с ошибками при контроле способа ввода в оборот.
// * КонтрольСерий - Массив - коллекция, куда требуется поместить строки с ошибками при контроле серий.
// * КонтрольСтатусов - Массив - коллекция, куда требуется поместить строки с ошибками при контроле допустимых статусов.
Функция ПравилаПроверкиНаОшибки(ПараметрыСканирования, ДанныеПоШтрихкодам, ПроверенныеШтрихкоды = Неопределено)
	
	ПравилаПроверкиНаОшибки = Новый Структура;
	ПравилаПроверкиНаОшибки.Вставить("ПроверенныеШтрихкоды", Новый Соответствие);
	
	Если ПараметрыСканирования.ДопустимыеСтатусыИСМП.Количество() > 0
		И ПараметрыСканирования.ЗапрашиватьСтатусыИСМП Тогда
		
		ПравилоКонтроляСтатусов = Новый Структура;
		ПравилоКонтроляСтатусов.Вставить("ДопустимыеСтатусы",         ПараметрыСканирования.ДопустимыеСтатусыИСМП);
		ПравилоКонтроляСтатусов.Вставить("ДопустимыеСтатусыУпаковок", ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП);
		ПравилоКонтроляСтатусов.Вставить("ПредставлениеСтатусов",     ПредставленияСтатусов());
		ПравилоКонтроляСтатусов.Вставить("СтрокиСОшибками",           Новый Массив);
		
		ПравилаПроверкиНаОшибки.Вставить("КонтрольСтатусов", ПравилоКонтроляСтатусов);
		
	КонецЕсли;
	
	Если ПараметрыСканирования.ПараметрыУказанияСерий <> Неопределено Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольСерий", Новый Массив);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыСканирования.ДопустимыйСпособВводаВОборот)
		И ПараметрыСканирования.ЗапрашиватьСтатусыИСМП Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольСпособаВводаВОборот", Новый Массив);
	КонецЕсли;
	
	Если ПараметрыСканирования.КонтрольСоставаУпаковокИСМП
		И ДанныеПоШтрихкодам.ДеревоПоДаннымСервиса <> Неопределено Тогда
		
		ПравилаПроверкиНаОшибки.Вставить("КонтрольСоставаУпаковокИСМП", Новый Массив);
		
	КонецЕсли;
	
	Если ПараметрыСканирования.ЗапрашиватьСтатусыИСМП
		И ЗначениеЗаполнено(ПараметрыСканирования.Владелец) Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольВладельца", Новый Массив);
	КонецЕсли;
	
	Если ПараметрыСканирования.ЭтоМаркировкаОстатков <> Неопределено
		И НЕ ПараметрыСканирования.ЭтоАгрегацияКодовМаркировки Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольКодовВводаОстатков", Новый Массив);
	КонецЕсли;
	
	Если ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(Перечисления.ВидыПродукцииИС.МолочнаяПродукция) <> Неопределено
		И ПараметрыСканирования.ЗаполнятьДанныеВЕТИС Тогда
		
		ПравилоКонтроляСрокаГодности = Новый Структура;
		ПравилоКонтроляСрокаГодности.Вставить("ЕстьОшибка",      Ложь);
		ПравилоКонтроляСрокаГодности.Вставить("СтрокиСОшибками", Новый Массив);
		
		ПравилаПроверкиНаОшибки.Вставить("КонтрольСрокаГодности", ПравилоКонтроляСрокаГодности);
		
	КонецЕсли;
	
	Если ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(Перечисления.ВидыПродукцииИС.МолочнаяПродукция) <> Неопределено
		И ПараметрыСканирования.КонтролироватьОкончаниеСрокаГодности Тогда
		
		ПравилаПроверкиНаОшибки.Вставить("КонтрольОкончанияСрокаГодности", Новый Массив);
		
	КонецЕсли;
	
	Возврат ПравилаПроверкиНаОшибки;
	
КонецФункции

#Область ЗаполнениеДанных

// Заполняет структуру "ДанныеПоШтрихкодам" сведениями, необходимыми для продукции ИС МП. Сведения формируются на основании
//  данных, полученных из сервиса ИС МП.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьДанныеНеизвестнойМаркируемойПродукцииСЗапросомСведенийИСМП(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	МассивСтрокТаблицы = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если СтрокаТаблицы.ЭтоКодВводаОстатков
			И СтрокаТаблицы.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			СтрокаТаблицы.КоличествоВложенныхЕдиниц = 1;
		КонецЕсли;
		
		Если Не СтрокаТаблицы.Идентифицирован
			И ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаТаблицы.ВидПродукции)
			И Не СтрокаТаблицы.ЭтоШтрихкодНоменклатуры
			И СтрокаТаблицы.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			МассивСтрокТаблицы.Добавить(СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивСтрокТаблицы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ДеревоУпаковокПоДаннымИСМП(МассивСтрокТаблицы, ПараметрыСканирования);
	
	Если Не ПустаяСтрока(Результат.ТекстОшибки) Тогда
		
		ДанныеПоШтрихкодам.ЕстьОшибки  = Истина;
		ДанныеПоШтрихкодам.ТекстОшибки = Результат.ТекстОшибки;
		
		Возврат;
	КонецЕсли;
	
	ОбработатьДеревоПолученноеИзИСМП(Результат, ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ШтрихкодыПродукцииДляСопоставления.Количество() > 0 Тогда
		
		Для Каждого ШтрихкодКСопоставлению Из ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ШтрихкодыПродукцииДляСопоставления Цикл
			НайденнаяСтрока = ДанныеПоШтрихкодам.ДанныеКодовМаркировки.Найти(ШтрихкодКСопоставлению, "EAN");
			НайденнаяСтрока.ТребуетсяСопоставление    = Истина;
			ДанныеПоШтрихкодам.ТребуетсяСопоставление = Истина;
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
	ШтрихкодированиеИС.ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(
		ДанныеПоШтрихкодам.ДанныеКодовМаркировки, Результат.ДеревоУпаковок,, ПараметрыСканирования);
	
КонецПроцедуры

// Заполняет структуру "ДанныеПоШтрихкодам" сведениями, необходимыми для продукции ИС МП. Сведения формируются без запроса
// данных в сервисе ИС МП.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьДанныеНеизвестнойМаркируемойПродукцииБезЗапросаСведенийИСМП(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	Для Каждого СтрокаТаблицы Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если СтрокаТаблицы.Идентифицирован Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.ЭтоКодВводаОстатков
			И СтрокаТаблицы.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			СтрокаТаблицы.КоличествоВложенныхЕдиниц = 1;
		КонецЕсли;
		
		Если ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаТаблицы.ВидПродукции)
			И (СтрокаТаблицы.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
				Или СтрокаТаблицы.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая) Тогда
			СтрокаТаблицы.ШтрихкодУпаковки = ШтрихкодированиеИС.СоздатьМаркированныйТоварПоДаннымШтрихкода(СтрокаТаблицы, ПараметрыСканирования);
			СтрокаТаблицы.КоличествоВложенныхЕдиниц = 1;
			СтрокаТаблицы.Идентифицирован           = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Дополняет данные по штрихкодам спецификой, исключая информацию без обращения в систему ИС МП.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ДополнитьДанныеПоШтрихкодамСпецификойБезЗапросаСтатусовИСМП(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ДобавитьКолонкиТаблицыДанныеКодовМаркировки(ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
	
	СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок = Новый Соответствие;
	СтрокиТаблицыДанных = СтрокиТаблицыДанныхДляПолученияСпецифики(
		ДанныеПоШтрихкодам.ДанныеКодовМаркировки,
		СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок,
		ПараметрыСканирования);
	
	ЗаполнитьСтрокиТаблицыДанныхПоГрупповымУпаковкам(СтрокиТаблицыДанных, ДанныеПоШтрихкодам);
	ЗаполнитьСтрокиТаблицыДанныхСпецификойПоДаннымПула(СтрокиТаблицыДанных, ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Для Каждого СтрокаДанных Из СтрокиТаблицыДанных Цикл
		Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			СтрокаДанных.КоличествоВложенныхЕдиниц = 1;
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеПоШтрихкодам.Свойство("ВложенныеШтрихкоды")
		И ЗначениеЗаполнено(ДанныеПоШтрихкодам.ВложенныеШтрихкоды) Тогда
		
		ДеревоУпаковок      = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
		МаркированныеТовары = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары;
		НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(МаркированныеТовары);
		НормализоватьДанныеДереваУпаковок(
			ДеревоУпаковок, ПараметрыСканирования, ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
		ПривестиДанныеМаркированныхТоваровВСоответствиеДеревуУпаковок(МаркированныеТовары);
		
		ДополнитьВложенныеШтрихкодыДаннымиВЕТИС(ДанныеПоШтрихкодам.ВложенныеШтрихкоды, ПараметрыСканирования);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает все коды маркировки, находящиеся в данных по штрихкодам.
// 
// Параметры:
//  ДанныеПоШтрихкодам                                 - См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам
//  СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок - Соответствие
//  ПараметрыСканирования                              - См. ШтрихкодированиеИС.ПараметрыСканирования
// Возвращаемое значение:
//  Массив из Строка - Коды маркировки.
Функция СтрокиТаблицыДанныхДляПолученияСпецифики(ДанныеКодовМаркировки, СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок, ПараметрыСканирования)
	
	СтрокиТаблицыДанных = Новый Массив;
	
	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл
		
		Если (ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаДанных.ВидПродукции)
			Или Не ЗначениеЗаполнено(СтрокаДанных.ВидПродукции))
			И Не СтрокаДанных.ЭтоШтрихкодНоменклатуры
			И ЗначениеЗаполнено(СтрокаДанных.ШтрихкодУпаковки)
			И СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок[СтрокаДанных] = Неопределено Тогда
			СтрокиТаблицыДанных.Добавить(СтрокаДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрокиТаблицыДанных;
	
КонецФункции

// Режим работы с групповыми потребительскими упаковками без индивидуальных.
//  * Заполнение количества в групповых товарных упаковках.
// 
// Параметры:
//  СтрокиТаблицыДанных - Массив из СтрокаТаблицыЗначений - Строки таблицы "ДанныеКодовМаркировки",
//                                                          которые будут заполненые спецификой.
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам)
Процедура ЗаполнитьСтрокиТаблицыДанныхПоГрупповымУпаковкам(СтрокиТаблицыДанных, ДанныеПоШтрихкодам) Экспорт
	
	НоменклатураУпаковок = Новый Массив;
	Для Каждого СтрокаДанных Из СтрокиТаблицыДанных Цикл
		Если ЗначениеЗаполнено(СтрокаДанных.Номенклатура)
			И СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
			НоменклатураУпаковок.Добавить(СтрокаДанных.Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
	Коэффициенты = РегистрыСведений.ГрупповыеУпаковкиИСМП.КоэффициентыГрупповыхУпаковок(НоменклатураУпаковок);
	
	Для Каждого СтрокаДанных Из СтрокиТаблицыДанных Цикл
		Если ЗначениеЗаполнено(СтрокаДанных.Номенклатура)
			И СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
			И Коэффициенты.Получить(СтрокаДанных.Номенклатура) <> Неопределено Тогда
			СтрокаДанных.КоличествоВложенныхЕдиниц = Коэффициенты.Получить(СтрокаДанных.Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет специфику, сформированную по данным регистра сведений "Пул кодов маркировки СУЗ".
// 
// Параметры:
//  СтрокиТаблицыДанных - Массив из СтрокаТаблицыЗначений - Строки таблицы "ДанныеКодовМаркировки",
//                                                          которые будут заполненые спецификой.
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам)
//  ПараметрыСканирования - (См. ШтрихкодированиеИС.ПараметрыСканирования)
Процедура ЗаполнитьСтрокиТаблицыДанныхСпецификойПоДаннымПула(СтрокиТаблицыДанных, ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	КодыМаркировки = Новый ТаблицаЗначений;
	КодыМаркировки.Колонки.Добавить("КодМаркировки",          Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(200, ДопустимаяДлина.Переменная)));
	КодыМаркировки.Колонки.Добавить("ХешСуммаКодаМаркировки", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50,  ДопустимаяДлина.Переменная)));
	
	СоотвествиеСтрокКодам = Новый Соответствие;
	Для Каждого СтрокаДанных Из СтрокиТаблицыДанных Цикл
		
		СтрокаТЧ = КодыМаркировки.Добавить();
		СтрокаТЧ.КодМаркировки          = СтрокаДанных.Штрихкод;
		СтрокаТЧ.ХешСуммаКодаМаркировки = ИнтеграцияИС.ХешированиеДанныхSHA256(СтрокаТЧ.КодМаркировки);
		
		СоотвествиеСтрокКодам.Вставить(СтрокаДанных.Штрихкод, СтрокаДанных);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.КодМаркировки          КАК КодМаркировки,
	|	Т.ХешСуммаКодаМаркировки КАК ХешСуммаКодаМаркировки
	|ПОМЕСТИТЬ КодыМаркировки
	|ИЗ
	|	&КодыМаркировки КАК Т
	|ИНДЕКСИРОВАТЬ ПО
	|	КодМаркировки,
	|	ХешСуммаКодаМаркировки
	|;
	|
	|///////////////////////////////////////
	|ВЫБРАТЬ
	|	ПулКодовМаркировкиСУЗ.КодМаркировки           КАК КодМаркировки,
	|	ПулКодовМаркировкиСУЗ.ДатаПечатиУниверсальная КАК ДатаПечати,
	|	ПулКодовМаркировкиСУЗ.Организация             КАК Владелец,
	|	ПулКодовМаркировкиСУЗ.МаркировкаОстатков      КАК МаркировкаОстатков,
	|	ПулКодовМаркировкиСУЗ.СпособВводаВОборот      КАК СпособВводаВОборот
	|ИЗ
	|	КодыМаркировки КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
	|		ПО ПулКодовМаркировкиСУЗ.КодМаркировки          = Т.КодМаркировки
	|		 И ПулКодовМаркировкиСУЗ.ХешСуммаКодаМаркировки = Т.ХешСуммаКодаМаркировки
	|");
	Запрос.Параметры.Вставить("КодыМаркировки", КодыМаркировки);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ПредставленияСтатусов = ПредставленияСтатусов();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаДанных = СоотвествиеСтрокКодам.Получить(Выборка.КодМаркировки);
		
		Если ЗначениеЗаполнено(ПараметрыСканирования.Владелец) Тогда
			
			СведенияОбОрганизации = Неопределено;
			Если ДанныеПоШтрихкодам.СведенияОбОрганизациях = Неопределено Тогда
				ДанныеПоШтрихкодам.СведенияОбОрганизациях = Новый Соответствие;
			Иначе
				СведенияОбОрганизации = ДанныеПоШтрихкодам.СведенияОбОрганизациях[Выборка.Владелец];
			КонецЕсли;
			Если СведенияОбОрганизации = Неопределено Тогда
				СведенияОбОрганизации = ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(ПараметрыСканирования.Владелец);
				ДанныеПоШтрихкодам.СведенияОбОрганизациях.Вставить(Выборка.Владелец, СведенияОбОрганизации);
			КонецЕсли;
			
			СтрокаДанных.ИННВладельца = СведенияОбОрганизации.ИНН;
			СтрокаДанных.Владелец     = Выборка.Владелец;
			
		КонецЕсли;
		
		Если Выборка.МаркировкаОстатков Тогда
			СтрокаДанных.СпособВводаВОборот = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков;
		Иначе
			СтрокаДанных.СпособВводаВОборот = Выборка.СпособВводаВОборот;
		КонецЕсли;
		
		СтрокаДанных.ПредставлениеСтатуса = НСтр("ru='Неопределен'");
		
		Если ЗначениеЗаполнено(ПараметрыСканирования.СтатусКодаМаркировкиПоУмолчанию) Тогда
			СтрокаДанных.Статус               = ПараметрыСканирования.СтатусКодаМаркировкиПоУмолчанию;
			СтрокаДанных.ПредставлениеСтатуса = ПредставленияСтатусов.Получить(СтрокаДанных.Статус);
		КонецЕсли;
		
		СтрокаДанных.ЕстьВПулеКодовМаркировки = Истина;
		
	КонецЦикла;
	
	ПредставлениеОстаточныхШтрихкодов = ПредставлениеОстаточныхШтрихкодов(СтрокиТаблицыДанных, ПараметрыСканирования);
	Для Каждого СтрокаТаблицы Из СтрокиТаблицыДанных Цикл
		
		ПредставлениеШтрихкода = ПредставлениеОстаточныхШтрихкодов.Получить(СтрокаТаблицы.Штрихкод);
		Если ПредставлениеШтрихкода <> Неопределено Тогда
			СтрокаТаблицы.ПредставлениеНоменклатуры = ПредставлениеШтрихкода;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеОстаточныхШтрихкодов(СтрокиТаблицыДанных, ПараметрыСканирования)
	
	ТаблицаПредставлениеОстаточныхШтрихкодов = Новый ТаблицаЗначений;
	ТаблицаПредставлениеОстаточныхШтрихкодов.Колонки.Добавить("КодМаркировки",            Новый ОписаниеТипов("Строка"));
	ТаблицаПредставлениеОстаточныхШтрихкодов.Колонки.Добавить("Номенклатура",             Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаПредставлениеОстаточныхШтрихкодов.Колонки.Добавить("GTIN",                     Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ТаблицаПредставлениеОстаточныхШтрихкодов.Колонки.Добавить("ПредставлениеGTINОстатки", Новый ОписаниеТипов("Строка"));
	ТаблицаПредставлениеОстаточныхШтрихкодов.Колонки.Добавить("ВидПродукции",             Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицыДанных Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ВидУпаковки) Тогда
			// Код маркировки не удалось разобрать и возможно он содержит ошибки
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			Продолжить;
		КонецЕсли;
		
		GTIN = СтрокаТаблицы.СоставКодаМаркировки.GTIN;
		Если ЗначениеЗаполнено(GTIN)
			И ШтрихкодированиеИСКлиентСервер.ЭтоШтрихкодВводаОстатков(GTIN) Тогда
			НоваяСтрока = ТаблицаПредставлениеОстаточныхШтрихкодов.Добавить();
			НоваяСтрока.КодМаркировки = СтрокаТаблицы.Штрихкод;
			НоваяСтрока.GTIN = GTIN;
		КонецЕсли;
		
	КонецЦикла;
	
	ВидПродукции = Неопределено;
	Если ПараметрыСканирования.ДопустимыеВидыПродукции.Количество() = 1 Тогда
		ВидПродукции = ПараметрыСканирования.ДопустимыеВидыПродукции[0];
	КонецЕсли;
	
	РегистрыСведений.КэшОписанияОстатковИСМП.ЗаполнитьТаблицуПредставленийGTINОстатки(
		ТаблицаПредставлениеОстаточныхШтрихкодов,,ВидПродукции);
	
	ПредставлениеОстаточныхШтрихкодов = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из ТаблицаПредставлениеОстаточныхШтрихкодов Цикл
		ПредставлениеОстаточныхШтрихкодов.Вставить(СтрокаТаблицы.КодМаркировки, СтрокаТаблицы.ПредставлениеGTINОстатки);
	КонецЦикла;
	
	Возврат ПредставлениеОстаточныхШтрихкодов;
	
КонецФункции

// Заполняет связанные строки таблицы Маркированные товары данными строк дерева упаковок.
// 
// Параметры:
//  МаркированныеТовары - ТаблицаЗначений - Таблица маркируемой продукции.
Процедура ПривестиДанныеМаркированныхТоваровВСоответствиеДеревуУпаковок(МаркированныеТовары)
	
	Для Каждого СтрокаТовары Из МаркированныеТовары Цикл
		ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаТовары.СтрокаДерева);
	КонецЦикла;
	
КонецПроцедуры

// Выполняет заполнение данных по штрихкодам спецификой продукции ИС МП.
// 
// Параметры:
//  ДанныеПоШтрихкодам - См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам
//  ПараметрыСканирования - См. ШтрихкодированиеИС.ПараметрыСканирования
Процедура ДополнитьДанныеПоШтрихкодамСпецификойСЗапросомСтатусовИСМП(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок = СформироватьДеревоУпаковокПоДаннымСервиса(
		ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	ПотребительскиеУпаковки = СтрокиТаблицыДанныхДляПолученияСпецифики(
		ДанныеПоШтрихкодам.ДанныеКодовМаркировки, СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок, ПараметрыСканирования);
	
	Если ПотребительскиеУпаковки.Количество() = 0
		И СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьКолонкиТаблицыДанныеКодовМаркировки(ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
	
	Если ПотребительскиеУпаковки.Количество() > 0 Тогда
		
		Результат = СпецификаДляДополненияДанныхПоШтрихкодам(ПотребительскиеУпаковки, ПараметрыСканирования);
		Если Результат.ЕстьОшибки Тогда
			
			ДанныеПоШтрихкодам.ЕстьОшибки                     = Истина;
			ДанныеПоШтрихкодам.ТекстОшибки                    = Результат.ТекстОшибки;
			ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии = Результат.ТребуетсяОбновлениеКлючаСессии;
			
			Возврат;
		
		Иначе
			СпецификаШтрихкодовПотребительскихУпаковок = Результат.СпецификаШтрихкодов;
		КонецЕсли;
		
	Иначе
		СпецификаШтрихкодовПотребительскихУпаковок = Новый Соответствие;
	КонецЕсли;
	
	ПредставлениеОстаточныхШтрихкодов = ПредставлениеОстаточныхШтрихкодов(ПотребительскиеУпаковки, ПараметрыСканирования);
	
	ДополнитьТаблицуДанныеКодовМаркировкиСпецификой(
		СпецификаШтрихкодовПотребительскихУпаковок,
		СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок,
		ПредставлениеОстаточныхШтрихкодов, ПараметрыСканирования);
	
	Если ДанныеПоШтрихкодам.Свойство("ВложенныеШтрихкоды")
		И ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		
		ВложенныеШтрихкоды = ДанныеПоШтрихкодам.ВложенныеШтрихкоды;
		НормализоватьДанныеВложенныхШтрихкодов(ВложенныеШтрихкоды, ПараметрыСканирования, ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
		
		ДополнитьВложенныеШтрихкодыДаннымиВЕТИС(ДанныеПоШтрихкодам.ВложенныеШтрихкоды, ПараметрыСканирования);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьДеревоУпаковокПоДаннымСервиса(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	Если Не ПараметрыСканирования.КонтрольСоставаУпаковокИСМП Тогда
		Возврат Новый Соответствие;
	КонецЕсли;
	
	СтрокиТаблицыДляЗапроса = Новый Массив;
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковкаПоВиду(СтрокаДанных.ВидУпаковки)
			И ШтрихкодированиеИС.ПрисутствуетПродукцияИСМП(СтрокаДанных.ВидыПродукцииКодаМаркировки)
			И ЗначениеЗаполнено(СтрокаДанных.ШтрихкодУпаковки)
			И СтрокаДанных.Входящий Тогда
			
			СтрокиТаблицыДляЗапроса.Добавить(СтрокаДанных);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокиТаблицыДляЗапроса.Количество() = 0 Тогда
		Возврат Новый Соответствие;
	КонецЕсли;
	
	РезультатПолученияДанных = ДеревоУпаковокПоДаннымИСМП(СтрокиТаблицыДляЗапроса, ПараметрыСканирования); 
	Если ЗначениеЗаполнено(РезультатПолученияДанных.ТекстОшибки) Тогда
		ДанныеПоШтрихкодам.ЕстьОшибки  = Истина;
		ДанныеПоШтрихкодам.ТекстОшибки = РезультатПолученияДанных.ТекстОшибки;
	Иначе
		ДанныеПоШтрихкодам.ДеревоПоДаннымСервиса = РезультатПолученияДанных.ДеревоУпаковок;
	КонецЕсли;
	
	Возврат РезультатПолученияДанных.СоответствиеСтрокДерева;
	
КонецФункции

Процедура ДополнитьТаблицуДанныеКодовМаркировкиСпецификой(
	СпецификаШтрихкодовПотребительскихУпаковок, СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок,
	ПредставлениеОстаточныхШтрихкодов, ПараметрыСканирования)
	
	ПредставленияСтатусов = ПредставленияСтатусов();
	НаличиеКолонокВДанных = Новый Соответствие;
	КодыМаркировкиДляЗаполненияВводаВОборот = Новый Массив;
	СтрокиТаблицыДляЗаполненияВводаВОборот  = Новый Массив;
	
	Для Каждого КлючЗначение Из СпецификаШтрихкодовПотребительскихУпаковок Цикл
		
		СтрокаТаблицыДанных = КлючЗначение.Ключ;
		СпецификаСтроки     = КлючЗначение.Значение;
		
		ПоляДляЗаполнения = Новый Массив;
		Для Каждого КлючИЗначение Из СпецификаСтроки Цикл
			
			ИмяСвойства  = КлючИЗначение.Ключ;
			ЕстьСвойство = НаличиеКолонокВДанных.Получить(ИмяСвойства);
			Если ЕстьСвойство = Неопределено Тогда
				ЕстьСвойство = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыДанных, ИмяСвойства);
				НаличиеКолонокВДанных.Вставить(ИмяСвойства, ЕстьСвойство);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КлючИЗначение.Значение)
				И ЕстьСвойство Тогда
				ПоляДляЗаполнения.Добавить(КлючИЗначение.Ключ);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПоляДляЗаполнения.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыДанных, СпецификаСтроки, СтрСоединить(ПоляДляЗаполнения, ","));
		КонецЕсли;
		
		СтрокаТаблицыДанных.КоличествоВложенныхЕдиниц = 1;
		
		Если ЗначениеЗаполнено(СтрокаТаблицыДанных.Статус)
			И ЗначениеЗаполнено(СтрокаТаблицыДанных.ОсобоеСостояние) Тогда
			ПредставлениеСтатуса = СтрШаблон(
				НСтр("ru = '%1 (%2)'"),
				ПредставленияСтатусов.Получить(СтрокаТаблицыДанных.Статус),
				ПредставленияСтатусов.Получить(СтрокаТаблицыДанных.ОсобоеСостояние));
		ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицыДанных.Статус) Тогда
			ПредставлениеСтатуса = ПредставленияСтатусов.Получить(СтрокаТаблицыДанных.Статус);
		Иначе
			ПредставлениеСтатуса = "";
		КонецЕсли;
		
		СтрокаТаблицыДанных.ПредставлениеСтатуса = ПредставлениеСтатуса;
		
		ПредставлениеШтрихкода = ПредставлениеОстаточныхШтрихкодов.Получить(СтрокаТаблицыДанных.Штрихкод);
		Если ПредставлениеШтрихкода = Неопределено Тогда
			СтрокаТаблицыДанных.ПредставлениеНоменклатуры = СпецификаСтроки.НаименованиеПродукции;
		Иначе
			СтрокаТаблицыДанных.ПредставлениеНоменклатуры = ПредставлениеШтрихкода;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицыДанных.СпособВводаВОборот) Тогда
			КодыМаркировкиДляЗаполненияВводаВОборот.Добавить(СтрокаТаблицыДанных.Штрихкод);
			СтрокиТаблицыДляЗаполненияВводаВОборот.Добавить(СтрокаТаблицыДанных);
		КонецЕсли;
		
		ЗаполнитьСтрокуПоДаннымРазбораКодаМаркировки(СтрокаТаблицыДанных, ПараметрыСканирования);
		
	КонецЦикла;
	
	СвойстваДереваУпаковок = Новый Массив;
	СвойстваДереваУпаковок.Добавить("Статус");
	СвойстваДереваУпаковок.Добавить("ОсобоеСостояние");
	СвойстваДереваУпаковок.Добавить("ГоденДо");
	СвойстваДереваУпаковок.Добавить("ИННВладельца");
	// НаименованиеПродукции?
	
	Для Каждого КлючЗначение Из СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок Цикл
		
		СтрокаТаблицыДанных = КлючЗначение.Ключ;
		СпецификаСтроки     = КлючЗначение.Значение;
		
		Если ЗначениеЗаполнено(СпецификаСтроки) Тогда
			
			ПоляДляЗаполнения = Новый Массив;
			Для Каждого ИмяСвойства Из СвойстваДереваУпаковок Цикл
				
				Если ЗначениеЗаполнено(СпецификаСтроки[ИмяСвойства])
					И Не ЗначениеЗаполнено(СтрокаТаблицыДанных[ИмяСвойства]) Тогда
					СтрокаТаблицыДанных[ИмяСвойства] = СпецификаСтроки[ИмяСвойства];
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЗначениеЗаполнено(СтрокаТаблицыДанных.Статус)
				И ЗначениеЗаполнено(СтрокаТаблицыДанных.ОсобоеСостояние) Тогда
				ПредставлениеСтатуса = СтрШаблон(
					НСтр("ru = '%1 (%2)'"),
					ПредставленияСтатусов.Получить(СтрокаТаблицыДанных.Статус),
					ПредставленияСтатусов.Получить(СтрокаТаблицыДанных.ОсобоеСостояние));
			ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицыДанных.Статус) Тогда
				ПредставлениеСтатуса = ПредставленияСтатусов.Получить(СтрокаТаблицыДанных.Статус);
			Иначе
				ПредставлениеСтатуса = "";
			КонецЕсли;
			
			СтрокаТаблицыДанных.ПредставлениеСтатуса = ПредставлениеСтатуса;
			
			СтрокаТаблицыДанных.КоличествоВложенныхЕдиниц = СпецификаСтроки.КоличествоПотребительскихУпаковок;
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицыДанных.СпособВводаВОборот) Тогда
				КодыМаркировкиДляЗаполненияВводаВОборот.Добавить(СтрокаТаблицыДанных.Штрихкод);
				СтрокиТаблицыДляЗаполненияВводаВОборот.Добавить(СтрокаТаблицыДанных);
			КонецЕсли;
			
			ЗаполнитьСтрокуПоДаннымРазбораКодаМаркировки(СтрокаТаблицыДанных, ПараметрыСканирования);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КодыМаркировкиДляЗаполненияВводаВОборот.Количество() > 0 Тогда
		ЗаполнитьСпособВводаВОборотСтрокТаблицыДанныеКодовМаркировки(
			СтрокиТаблицыДляЗаполненияВводаВОборот, КодыМаркировкиДляЗаполненияВводаВОборот, ПараметрыСканирования);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет способ ввода в оборот специфики кодов маркировки. Сначала выполянется заполнение на основании данных регистра
//    сведений "Пул кодов маркировки СУЗ", если получить способа ввода в оборот не удается выполняется обращение в сервис ИС МП.
// 
// Параметры:
//  СпецификаШтрихкодов - Неопределено, соответствие - Ключ - код маркировки, значение - данные, полученные из ИС МП.
//  КодыМаркировки - Массив из Строка - Список кодов маркировки.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьСпособВводаВОборотСтрокТаблицыДанныеКодовМаркировки(СтрокиТаблицыДанных, КодыМаркировки, ПараметрыСканирования)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеПулаПоКодамМаркировки = РегистрыСведений.ПулКодовМаркировкиСУЗ.ДанныеКодовМаркировки(КодыМаркировки);
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицыДанных Цикл
		
		ДанныеПулаПоКоду = Неопределено;
		Если ДанныеПулаПоКодамМаркировки <> Неопределено Тогда
			ДанныеПулаПоКоду = ДанныеПулаПоКодамМаркировки.Найти(СтрокаТаблицы.Штрихкод, "КодМаркировки");
		КонецЕсли;
		
		СпособВводаВОборот = Неопределено;
		Если ДанныеПулаПоКоду <> Неопределено Тогда
			
			Если ДанныеПулаПоКоду.МаркировкаОстатков Тогда
				СпособВводаВОборот = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков;
			Иначе
				СпособВводаВОборот = ДанныеПулаПоКоду.СпособВводаВОборот;
			КонецЕсли;
			
			СтрокаТаблицы.ЭтоКодВводаОстатков      = ДанныеПулаПоКоду.МаркировкаОстатков;
			СтрокаТаблицы.ЕстьВПулеКодовМаркировки = Истина;
			
		ИначеЕсли СтрокаТаблицы.Статус <> Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен Тогда
			
			СпособВводаВОборот = СпособВводаВОборотКодаМаркировки(СтрокаТаблицы, ПараметрыСканирования);
			
			Если СпособВводаВОборот = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков Тогда
				СтрокаТаблицы.ЭтоКодВводаОстатков = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаТаблицы.СпособВводаВОборот = СпособВводаВОборот;
		
	КонецЦикла;
	
КонецПроцедуры

// Получает способ ввода в оборот по коду маркировки.
// 
// Параметры:
//  КодМаркировки - Произвольный - Описание
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Неопределено, ПеречислениеСсылка.СпособыВводаВОборотСУЗ - Способ ввода в оборот кода маркировки.
Функция СпособВводаВОборотКодаМаркировки(СтрокаТаблицы, ПараметрыСканирования)
	
	Если Не ПараметрыСканирования.ЗапрашиватьСпособВводаВОборот Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыСредстваИдентификации = ИнтерфейсИСМП.ПараметрыСредстваИдентификации(
		СтрокаТаблицы, ПараметрыСканирования.Организация);
	Если ПараметрыСредстваИдентификации.ПараметрыКодаМаркировки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПараметрыСредстваИдентификации.ПараметрыКодаМаркировки.СпособВводаВОборот;
	
КонецФункции

// Получение спицифичных данных, используемых только для табачной продукции.
// 
// Параметры:
//  ШтрихкодыДляПолученияСпецифики - Массив Из СтрокаТаблицыЗначений: см. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам - Коды маркировки
//  ПараметрыСканирования - см. ШтрихкодированиеИС.ПараметрыСканирования
//
// Возвращаемое значение:
//  Структура - Описание:
//   * СпецификаШтрихкодов - Неопределено, соответствие - Ключ - код маркировки, значение - данные, полученные из ИС МП.
//   * ЕстьОшибки - Булево - Истина, если при попытке получения данных из ИСМП возникла ошибка.
//   * ТекстОшибки - Строка - Описание ошибки.
Функция СпецификаДляДополненияДанныхПоШтрихкодам(СтрокиТаблицыДанныхДляПолученияСпецифики, ПараметрыСканирования)
	
	Результат = Новый Структура;
	Результат.Вставить("СпецификаШтрихкодов",            Неопределено);
	Результат.Вставить("ЕстьОшибки",                     Ложь);
	Результат.Вставить("ТекстОшибки",                    "");
	Результат.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	
	ДанныеПоШтрихкодамИСМП = ИнтерфейсИСМП.СтатусыКодовМаркировки(
		СтрокиТаблицыДанныхДляПолученияСпецифики,
		ПараметрыСканирования.Организация);
	
	Если ДанныеПоШтрихкодамИСМП.ТребуетсяОбновлениеКлючаСессии Тогда
		
		Результат.ЕстьОшибки  = Истина;
		Результат.ТекстОшибки = НСтр("ru = 'Не удалось получить данные из ИС МП.
		                                   |По причине: Требуется обновление ключа сессии.'");
		Результат.ТребуетсяОбновлениеКлючаСессии = Истина;
		
		Возврат Результат;
		
	ИначеЕсли ЗначениеЗаполнено(ДанныеПоШтрихкодамИСМП.ТекстОшибки) Тогда
		
		Результат.ЕстьОшибки  = Истина;
		Результат.ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Не удалось получить данные из ИС МП.
			           |По причине: %1'"), ДанныеПоШтрихкодамИСМП.ТекстОшибки);
		
		Возврат Результат;
		
	КонецЕсли;
	
	Результат.СпецификаШтрихкодов = ДанныеПоШтрихкодамИСМП.СтатусыКодовМаркировки;
	
	Возврат Результат;
	
КонецФункции

// Дополняет дерево упаковок колонками, специфичными для табачной продукции. Заполняет значения специфичных колонок.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ДанныеКодовМаркировки - (См. ШтрихкодированиеИС.ИнициализацияТаблицыДанныхКодовМаркировки).
Процедура НормализоватьДанныеДереваУпаковок(ДеревоУпаковок, ПараметрыСканирования, ДанныеКодовМаркировки = Неопределено)
	
	НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ДеревоУпаковок);
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ДанныеКодовМаркировки",  ДанныеКодовМаркировки);
	ПараметрыЗаполнения.Вставить("Кэш",                    Новый Структура());
	ПараметрыЗаполнения.Вставить("ПараметрыСканирования",  ПараметрыСканирования);
	
	ПараметрыЗаполнения.Кэш.Вставить("ЗаполняемыеКолонки",  Неопределено);
	
	ЗаполнитьСтрокиДерева(ДеревоУпаковок.Строки, ПараметрыЗаполнения);
	
КонецПроцедуры

// Заполняет строки дерева упаковок данными специфичными для обувной продукции.
//
// Параметры:
//  СтрокиДерева - КоллекцияСтрокДереваЗначений - Строки дерева упаковок.
//  ПараметрыЗаполнения - (См. ШтрихкодированиеИС.ИнициализацияТаблицыДанныхКодовМаркировки).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  УпаковкаВерхнегоУровня - СтрокаДереваЗначений - Самая верхняя строка иерархии дерева упаковок.
//  ЭтоПервыйУровень - Булево - Истина, если это верхний уровень дерева.
Функция ЗаполнитьСтрокиДерева(СтрокиДерева, ПараметрыЗаполнения,
	УпаковкаВерхнегоУровня = Неопределено, ЭтоПервыйУровень = Истина)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если ЗначениеЗаполнено(СтрокаДерева.ВидПродукции)
			И Не ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаДерева.ВидПродукции) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.Родитель = Неопределено Тогда
			УпаковкаВерхнегоУровня = СтрокаДерева.ШтрихкодУпаковки;
		КонецЕсли;
		
		СтрокаДерева.УпаковкаВерхнегоУровня = УпаковкаВерхнегоУровня;
		ЗаполнитьСтрокиДерева(
			СтрокаДерева.Строки, ПараметрыЗаполнения, УпаковкаВерхнегоУровня, Ложь);
		
		Если ПараметрыЗаполнения.ДанныеКодовМаркировки <> Неопределено Тогда
			
			СтрокаДанных = ПараметрыЗаполнения.ДанныеКодовМаркировки.Найти(СтрокаДерева.Штрихкод, "Штрихкод");
			Если СтрокаДанных <> Неопределено Тогда
				
				Если ПараметрыЗаполнения.Кэш.ЗаполняемыеКолонки = Неопределено Тогда
					
					ПараметрыЗаполнения.Кэш.ЗаполняемыеКолонки = Новый Массив;
					
					КолонкиДерева = СтрокаДерева.Владелец().Колонки;
					Для Каждого Колонка Из ПараметрыЗаполнения.ДанныеКодовМаркировки.Колонки Цикл
						
						ИмяКолонки = Колонка.Имя;
						
						Если КолонкиДерева.Найти(ИмяКолонки) = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						ПараметрыЗаполнения.Кэш.ЗаполняемыеКолонки.Добавить(ИмяКолонки);
						
					КонецЦикла;
					
				КонецЕсли;
				
				ЗаполнитьСтрокуДереваПоДаннымТаблицыКодыМаркировок(СтрокаДерева, СтрокаДанных, ПараметрыЗаполнения);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьХарактеристикиСтрокиДереваПоПодчиненнымСтрокам(СтрокаДерева, СтрокаДанных);
		
		РассчитатьКоличественныеПоказателиСтрокиДерева(СтрокаДерева);
		
		ЗаполнитьСтрокуПоДаннымРазбораКодаМаркировки(СтрокаДерева, ПараметрыЗаполнения.ПараметрыСканирования);
		ЗаполнитьСпособВводаВОборот(СтрокаДерева, СтрокаДанных, ПараметрыЗаполнения.ПараметрыСканирования);
		
	КонецЦикла;
	
КонецФункции

Процедура ЗаполнитьСтрокуПоДаннымРазбораКодаМаркировки(СтрокаДанных, ПараметрыСканирования) Экспорт
	
	Если СтрокаДанных.СоставКодаМаркировки = Неопределено Тогда
		
		ДанныеРазбора = ШтрихкодированиеИССлужебный.РазобратьКодМаркировки(СтрокаДанных.Штрихкод, ПараметрыСканирования.ДопустимыеВидыПродукции);
		Если ДанныеРазбора = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаДанных.ВидУпаковки          = ДанныеРазбора.ВидУпаковки;
		СтрокаДанных.СоставКодаМаркировки = ДанныеРазбора.СоставКодаМаркировки;
		
	КонецЕсли;
	
	Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		Возврат;
	КонецЕсли;
	
	СоставКодаМаркировки = СтрокаДанных.СоставКодаМаркировки;
	
	СтрокаДанных.GTIN = СоставКодаМаркировки.GTIN;
	СтрокаДанных.EAN  = СоставКодаМаркировки.EAN;
	
	Если СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукция
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДанных, "ГоденДо")
		И СоставКодаМаркировки.Свойство("ГоденДо") И ЗначениеЗаполнено(СоставКодаМаркировки.ГоденДо) Тогда
		
		СтрокаДанных.ГоденДо         = СоставКодаМаркировки.ГоденДо;
		СтрокаДанных.Скоропортящаяся = СоставКодаМаркировки.Скоропортящаяся;
		
	ИначеЕсли СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.Табак
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДанных, "МРЦ")
		И СоставКодаМаркировки.Свойство("МРЦ") И ЗначениеЗаполнено(СоставКодаМаркировки.МРЦ) Тогда
		
		СтрокаДанных.МРЦ = СоставКодаМаркировки.МРЦ;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьХарактеристикиСтрокиДереваПоПодчиненнымСтрокам(СтрокаДерева, СтрокаДанных)
	
	Если СтрокаДерева.Строки.Количество() = 0 Тогда
		
		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
		Иначе
			// Групповая упаковка - всегда монотоварная.
			// Логистическая упаковка без вложений - с большой вероятностью является монотоварной.
			СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
		КонецЕсли;
		
		Если СтрокаДерева.Номенклатура = Неопределено Тогда
			СтрокаДерева.Номенклатура = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура");
		КонецЕсли;
		
		Если СтрокаДерева.Характеристика = Неопределено Тогда
			СтрокаДерева.Характеристика = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры");
		КонецЕсли;
		
		Если СтрокаДерева.Серия = Неопределено Тогда
			СтрокаДерева.Серия = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры");
		КонецЕсли;
		
	Иначе
		
		ПроверятьНоменклатуру   = Истина;
		ПроверятьХарактеристику = Истина;
		ПроверятьСерию          = Истина;
		
		СтрокаДерева.Номенклатура   = Неопределено;
		СтрокаДерева.Характеристика = Неопределено;
		СтрокаДерева.Серия          = Неопределено;
		
		СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
		
		Для Каждого Строка Из СтрокаДерева.Строки Цикл
			
			Если ПроверятьНоменклатуру Тогда
				Если СтрокаДерева.Номенклатура = Неопределено Тогда
					СтрокаДерева.Номенклатура = Строка.Номенклатура;
				ИначеЕсли СтрокаДерева.Номенклатура <> Строка.Номенклатура Тогда
					СтрокаДерева.Номенклатура = Неопределено;
					ПроверятьНоменклатуру = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ПроверятьХарактеристику Тогда
				Если СтрокаДерева.Характеристика = Неопределено Тогда
					СтрокаДерева.Характеристика = Строка.Характеристика;
				ИначеЕсли СтрокаДерева.Характеристика <> Строка.Характеристика Тогда
					СтрокаДерева.Характеристика = Неопределено;
					ПроверятьХарактеристику = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ПроверятьСерию Тогда
				Если СтрокаДерева.Серия = Неопределено Тогда
					СтрокаДерева.Серия = Строка.Серия;
				ИначеЕсли СтрокаДерева.Серия <> Строка.Серия Тогда
					СтрокаДерева.Серия = Неопределено;
					ПроверятьСерию = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ПроверятьНоменклатуру Или Не ПроверятьХарактеристику Или Не ПроверятьСерию Тогда
				СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
			КонецЕсли;
			
			Если Не ПроверятьНоменклатуру И Не ПроверятьХарактеристику И Не ПроверятьСерию Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтрокаДанных <> Неопределено Тогда
			
			СтрокаДанных.Номенклатура   = СтрокаДерева.Номенклатура;
			СтрокаДерева.Характеристика = СтрокаДерева.Характеристика;
			СтрокаДерева.Серия          = СтрокаДерева.Серия;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуДереваПоДаннымТаблицыКодыМаркировок(СтрокаДерева, СтрокаДанных, ПараметрыЗаполнения)
	
	Для Каждого ИмяКолонки Из ПараметрыЗаполнения.Кэш.ЗаполняемыеКолонки Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаДанных[ИмяКолонки]) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДерева[ИмяКолонки] = СтрокаДанных[ИмяКолонки];
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(СтрокаДерева.Статус) Тогда
		СтрокаДерева.Статус = Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен;
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаДерева.ПредставлениеСтатуса) Тогда
		СтрокаДерева.ПредставлениеСтатуса = Строка(СтрокаДерева.Статус);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет способ ввода в оборот в строке дерева упаковок.
//
// Параметры:
//  СтрокаДерева          - СтрокаДереваЗначений - Строка дерева упаковок.
//  СтрокаДанных          - СтрокаТаблицыЗначений: См. ШтрихкодированиеИС.ИнициализацияТаблицыДанныхКодовМаркировки
//  ПараметрыСканирования - См. ШтрихкодированиеИС.ПараметрыСканирования
Процедура ЗаполнитьСпособВводаВОборот(СтрокаДерева, СтрокаДанных, ПараметрыСканирования)
	
	Если СтрокаДерева.Статус <> Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен
		И Не ЗначениеЗаполнено(СтрокаДерева.СпособВводаВОборот) Тогда
		
		Если СтрокаДанных <> Неопределено
			И ЗначениеЗаполнено(СтрокаДанных.СпособВводаВОборот) Тогда
			СтрокаДерева.СпособВводаВОборот = СтрокаДанных.СпособВводаВОборот;
			Возврат;
		КонецЕсли;
		
		СтрокаДерева.СпособВводаВОборот = СпособВводаВОборотКодаМаркировки(СтрокаДерева, ПараметрыСканирования);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет расчет количественных показателей строки дерева.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Строка дерева упаковок.
Процедура РассчитатьКоличественныеПоказателиСтрокиДерева(СтрокаДерева)
	
	Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
		СтрокаДерева.КоличествоВложенныхЕдиниц = 1;
	Иначе // Для групповых и логистических упаковок
		// Количество загружено из справочника. Актуально для детализации: Короба с групповыми упаковками
		Если СтрокаДерева.КоличествоВложенныхЕдиниц = 0
			И СтрокаДерева.Строки.Количество() = 0 Тогда
			СтрокаДерева.КоличествоВложенныхЕдиниц = СтрокаДерева.Количество;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаДерева.Родитель <> Неопределено Тогда
		
		СтрокаДерева.Родитель.КоличествоВложенныхЕдиниц = СтрокаДерева.Родитель.КоличествоВложенныхЕдиниц
		                                                + СтрокаДерева.КоличествоВложенныхЕдиниц;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьДеревоПолученноеИзИСМП(Результат, ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ВложенныеШтрихкоды = ИнициализацияВложенныхШтрихкодов();
	ВложенныеШтрихкоды.ДеревоУпаковок = Результат.ДеревоУпаковок;
	НормализоватьДанныеДереваУпаковок(
		ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыСканирования,
		// Для заполнения способа ввода в оборот в дереве упаковок
		ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
	НормализоватьДанныеТаблицыМаркированныеТовары(
		ВложенныеШтрихкоды.ДеревоУпаковок, ВложенныеШтрихкоды.МаркированныеТовары);
	
	ДобавленныеСтроки = Новый Массив;
	ШтрихкодированиеИС.ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(
		ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ВложенныеШтрихкоды.ДеревоУпаковок, ДобавленныеСтроки, ПараметрыСканирования);
	// Если форма проверки и подбора загружается по данным сервиса из
	// документа приемки или поступления товаров - то нужно поискать сопоставленные товары в штрихкодах упаковок
	ШтрихкодированиеИС.ЗаполнитьДанныеИзвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ДобавленныеСтроки, ПараметрыСканирования);
	ШтрихкодированиеИС.ЗаполнитьСведенияПоШтрихкодамEAN(ДобавленныеСтроки, ПараметрыСканирования);
	
	ПредставлениеОстаточныхШтрихкодов = ПредставлениеОстаточныхШтрихкодов(ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ПараметрыСканирования);
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		ПредставлениеНоменклатуры = ПредставлениеОстаточныхШтрихкодов.Получить(СтрокаДанных.Штрихкод);
		Если Не ЗначениеЗаполнено(ПредставлениеНоменклатуры) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаДанных.ПредставлениеНоменклатуры = ПредставлениеНоменклатуры;
		Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
			СтрокаДанных.СтрокаДерева.ПредставлениеНоменклатуры = ПредставлениеНоменклатуры;
		КонецЕсли;
	КонецЦикла;
	
	ТребуетсяСопоставление       = Ложь;
	МассивНеизвестныхEAN         = Новый Массив;
	СтрокиДанныхДляСопоставления = Новый Массив;
	ВидыПродукции                = Новый Массив;
	Для Каждого СтрокаДанных Из ДобавленныеСтроки Цикл
		Если СтрокаДанных.ТребуетсяСопоставление Тогда
			ТребуетсяСопоставление = Истина;
			МассивНеизвестныхEAN.Добавить(СтрокаДанных.EAN);
			СтрокиДанныхДляСопоставления.Добавить(СтрокаДанных);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыПродукции, СтрокаДанных.ВидыПродукцииКодаМаркировки, Истина);
		КонецЕсли;
	КонецЦикла;
	МассивНеизвестныхEAN = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивНеизвестныхEAN);
	
	Если ТребуетсяСопоставление И ПараметрыСканирования.СопоставлятьНоменклатуру Тогда
		
		НормализоватьДанныеВложенныхШтрихкодов(ВложенныеШтрихкоды, ПараметрыСканирования, ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
		ШтрихкодированиеИС.ДобавитьВДанныеШтрихкодовВложенныеШтрихкоды(ДанныеПоШтрихкодам, ВложенныеШтрихкоды);
		
		Возврат;
		
	КонецЕсли;
	
	СсылкаНаОбъект = ПараметрыСканирования.СсылкаНаОбъект;
	Если ЗначениеЗаполнено(СсылкаНаОбъект)
		И ПроверкаИПодборПродукцииИСМПКлиентСервер.ЭтоДокументПриобретения(СсылкаНаОбъект) Тогда
		
		ЭлектронныйДокумент = ОбменСКонтрагентами.СтатусДокументооборота(СсылкаНаОбъект).ЭлектронныйДокумент;
		
		Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
			
			СтрокиДляСопоставленияПоУПД = Новый Массив;
			Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
				Если Не ЗначениеЗаполнено(СтрокаДанных.Номенклатура) Тогда
					СтрокиДляСопоставленияПоУПД.Добавить(СтрокаДанных);
				КонецЕсли;
			КонецЦикла;
			
			Если СтрокиДляСопоставленияПоУПД.Количество() > 0 Тогда
				СопоставитьКодыМаркировкиНоменклатуреПоДаннымУПД(
					СтрокиДляСопоставленияПоУПД,
					ПараметрыСканирования,
					ЭлектронныйДокумент);
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТребуетсяСопоставление Тогда
		ЗаполнитьПредставлениеНоменклатурыПоДаннымИСМП(СтрокиДанныхДляСопоставления, МассивНеизвестныхEAN);
	КонецЕсли;
	
	НормализоватьДанныеВложенныхШтрихкодов(ВложенныеШтрихкоды, ПараметрыСканирования, ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
	СоздатьЭлементыШтрихкодовУпаковокПоДереву(ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыСканирования);
	
	Для Каждого МаркированныйТовар Из ВложенныеШтрихкоды.МаркированныеТовары Цикл
		Если МаркированныйТовар.СтрокаДерева <> Неопределено Тогда
			МаркированныйТовар.ШтрихкодУпаковки = МаркированныйТовар.СтрокаДерева.ШтрихкодУпаковки;
		КонецЕсли;
	КонецЦикла;
	Для Каждого ДанныеКодаМаркировки Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		Если ДанныеКодаМаркировки.СтрокаДерева <> Неопределено Тогда
			ДанныеКодаМаркировки.ШтрихкодУпаковки = ДанныеКодаМаркировки.СтрокаДерева.ШтрихкодУпаковки;
		КонецЕсли;
	КонецЦикла;
	
	ШтрихкодированиеИС.ДобавитьВДанныеШтрихкодовВложенныеШтрихкоды(ДанныеПоШтрихкодам, ВложенныеШтрихкоды);
	
	ВидыПродукцииНоменклатуры = ДанныеПоШтрихкодам.ДанныеКодовМаркировки.ВыгрузитьКолонку("ВидПродукции");
	ДанныеПоШтрихкодам.ВидыПродукции = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВидыПродукцииНоменклатуры);
	
КонецПроцедуры

// Выполняет заполнение представления номенклатуры по данным, полученным из сервиса ИСМП.
// 
// Параметры:
//  ДанныеКодовМаркировки - ТаблицаЗначений, Массив из СтрокаТаблицыЗначений - Описание
//  СписокEAN - Массив из Строка - Список штрихкодов формата EAN.
Процедура ЗаполнитьПредставлениеНоменклатурыПоДаннымИСМП(ДанныеКодовМаркировки, СписокEAN)
	
	СведенияМОТППоШтрихкодамEAN = ИнформацияНеизвестныхEANПоДаннымИСМП(СписокEAN);
	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл
		
		СведенияПоEAN = СведенияМОТППоШтрихкодамEAN.Получить(СтрокаДанных.EAN);
		Если СведенияПоEAN = Неопределено Тогда
			СтрокаДанных.ПредставлениеНоменклатуры = НСтр("ru = '<Не загружено>'");
		Иначе
			СтрокаДанных.ПредставлениеНоменклатуры = СведенияПоEAN.Наименование;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СопоставитьКодыМаркировкиНоменклатуреПоДаннымУПД(ДанныеКодовМаркировки, ПараметрыСканирования, ЭлектронныйДокумент = Неопределено) Экспорт
	
	ДанныеНоменклатурыПоДаннымУПД = ДанныеМаркируемойНоменклатурыПоДаннымУПД(ПараметрыСканирования.СсылкаНаОбъект, ЭлектронныйДокумент);
	
	// Штрихкод в УПД может храниться в не нормализованном виде,
	// в ДанныеКодовМаркировки штрихкод уже нормализован.
	ШтрихкодыУпаковок = Новый Массив;
	Для Каждого КлючЗначение Из ДанныеНоменклатурыПоДаннымУПД Цикл
		ШтрихкодыУпаковок.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	ВидПродукции = ПараметрыСканирования.ДопустимыеВидыПродукции[0];
	Для Каждого ШтрихкодУпаковки Из ШтрихкодыУпаковок Цикл
		ДанныеРазбора = ШтрихкодированиеИССлужебный.РазобратьКодМаркировки(ШтрихкодУпаковки, ВидПродукции);
		Если ДанныеРазбора = Неопределено Или ШтрихкодУпаковки = ДанныеРазбора.НормализованныйКодМаркировки Тогда
			Продолжить;
		КонецЕсли;
		ДанныеНоменклатурыПоДаннымУПД[ДанныеРазбора.НормализованныйКодМаркировки] = ДанныеНоменклатурыПоДаннымУПД[ШтрихкодУпаковки];
	КонецЦикла;
	
	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл
		
		СведенияПоEAN = ДанныеНоменклатурыПоДаннымУПД.Получить(СтрокаДанных.Штрихкод);
		Если СведенияПоEAN = Неопределено Тогда
			
			Если (СтрокаДанных.СтрокаДерева.Родитель) <> Неопределено Тогда
				СтрокаДереваПоиска = СтрокаДанных.СтрокаДерева.Родитель;
				Пока СведенияПоEAN = Неопределено Цикл
					СведенияПоEAN = ДанныеНоменклатурыПоДаннымУПД.Получить(СтрокаДереваПоиска.Штрихкод);
					Если СтрокаДереваПоиска.Родитель = Неопределено Тогда
						Прервать;
					Иначе
						СтрокаДереваПоиска = СтрокаДереваПоиска.Родитель;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если СведенияПоEAN = Неопределено Или СведенияПоEAN.МультитоварнаяУпаковка Тогда
				СтрокаДанных.ПредставлениеНоменклатуры = НСтр("ru = '<Не загружено>'");
			Иначе
				СтрокаДанных.Номенклатура              = СведенияПоEAN.Номенклатура;
				СтрокаДанных.Характеристика            = СведенияПоEAN.Характеристика;
				СтрокаДанных.ПредставлениеНоменклатуры = Строка(СведенияПоEAN.Номенклатура);
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДанных, "НоменклатураСопоставленаПоУПД") Тогда
					СтрокаДанных.НоменклатураСопоставленаПоУПД = Истина;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			СтрокаДанных.Номенклатура              = СведенияПоEAN.Номенклатура;
			СтрокаДанных.Характеристика            = СведенияПоEAN.Характеристика;
			СтрокаДанных.ПредставлениеНоменклатуры = Строка(СведенияПоEAN.Номенклатура);
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДанных, "НоменклатураСопоставленаПоУПД") Тогда
				СтрокаДанных.НоменклатураСопоставленаПоУПД = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьВложенныеШтрихкодыДаннымиВЕТИС(ВложенныеШтрихкоды, ПараметрыСканирования)
	
	Если Не (ПараметрыСканирования.ЗаполнятьДанныеВЕТИС И ЗначениеЗаполнено(ПараметрыСканирования.СсылкаНаОбъект)) Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = ПараметрыСканирования.СсылкаНаОбъект.Метаданные();
	ИмяДокумента = МетаданныеДокумента.Имя;
	
	Если ПараметрыСканирования.ТипИдентификатораПроисхожденияВЕТИС = Тип("СправочникСсылка.ВетеринарноСопроводительныйДокументВЕТИС") Тогда
		ИмяИдентификатора = "ВетеринарноСопроводительныйДокументВЕТИС";
	Иначе
		ИмяИдентификатора = "ЗаписиСкладскогоЖурналаВЕТИС";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДокументИСМПШтрихкодыУпаковок.ШтрихкодУпаковки,
	|	ДокументИСМПШтрихкодыУпаковок.ИдентификаторПроисхожденияВЕТИС,
	|	ЕСТЬNULL(ДокументИСМПШтрихкодыУпаковок.ИдентификаторПроисхожденияВЕТИС.СкоропортящаясяПродукция, ЛОЖЬ) КАК Скоропортящаяся,
	|	ДокументИСМПШтрихкодыУпаковок.СрокГодности КАК ГоденДо
	|ИЗ
	|	Документ.%1.ШтрихкодыУпаковок КАК ДокументИСМПШтрихкодыУпаковок
	|ГДЕ
	|	ДокументИСМПШтрихкодыУпаковок.Ссылка = &Ссылка
	|	И ДокументИСМПШтрихкодыУпаковок.ИдентификаторПроисхожденияВЕТИС
	|		ССЫЛКА Справочник.%2
	|	И ДокументИСМПШтрихкодыУпаковок.ИдентификаторПроисхожденияВЕТИС <> ЗНАЧЕНИЕ(Справочник.%2.ПустаяСсылка)
	|	И ДокументИСМПШтрихкодыУпаковок.СрокГодности <> ДАТАВРЕМЯ(1, 1, 1)";
	
	ТекстЗапроса = СтрШаблон(ТекстЗапроса, ИмяДокумента, ИмяИдентификатора);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ПараметрыСканирования.СсылкаНаОбъект);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	УпаковкиСДаннымиВЕТИС = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеВЕТИС = Новый Структура("ИдентификаторПроисхожденияВЕТИС, ГоденДо, Скоропортящаяся",
			Выборка.ИдентификаторПроисхожденияВЕТИС, Выборка.ГоденДо, Выборка.Скоропортящаяся);
		
		УпаковкиСДаннымиВЕТИС.Вставить(Выборка.ШтрихкодУпаковки, ДанныеВЕТИС);
		
	КонецЦикла;
	
	ДеревоУпаковок      = ВложенныеШтрихкоды.ДеревоУпаковок;
	МаркированныеТовары = ВложенныеШтрихкоды.МаркированныеТовары;
	
	ДополнитьВложенныеШтрихкодыДереваДаннымиВЕТИС(ДеревоУпаковок, УпаковкиСДаннымиВЕТИС);
	
	Для Каждого СтрокаТЧ Из МаркированныеТовары Цикл
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТЧ.СтрокаДерева, "ИдентификаторПроисхожденияВЕТИС, ГоденДо, Скоропортящаяся");
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьВложенныеШтрихкодыДереваДаннымиВЕТИС(ДеревоУпаковок, УпаковкиСДаннымиВЕТИС, Знач ДанныеВЕТИС = Неопределено)
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если ДанныеВЕТИС = Неопределено Тогда
			ТекущиеДанныеВЕТИС = УпаковкиСДаннымиВЕТИС[СтрокаДерева.ШтрихкодУпаковки];
		Иначе
			ТекущиеДанныеВЕТИС = ДанныеВЕТИС;
		КонецЕсли;
		
		Если ТекущиеДанныеВЕТИС <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаДерева, ТекущиеДанныеВЕТИС);
		ИначеЕсли СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
			Или СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
				ВызватьИсключение НСтр("ru = 'Внутренняя ошибка'");
		КонецЕсли;
		
		ДополнитьВложенныеШтрихкодыДереваДаннымиВЕТИС(СтрокаДерева, УпаковкиСДаннымиВЕТИС, ТекущиеДанныеВЕТИС);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

// Формирует вложенные штрихкоды путем получения базовых коллекций "ДеревоУпаковок" и "МаркированныеТовары" и дополнения
// их колонками специфичными для табачной продукции.
//
// Параметры:
// Возвращаемое значение:
//  Структура - (См. ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов)
//   и (См. ШтрихкодированиеИСМП.НормализоватьСвойстваКоллекцииВложенныхШтрихкодов).
Функция ИнициализацияВложенныхШтрихкодов()
	
	ВложенныеШтрихкоды = ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов();
	
	НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ВложенныеШтрихкоды.ДеревоУпаковок);
	НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ВложенныеШтрихкоды.МаркированныеТовары);
	
	Возврат ВложенныеШтрихкоды;
	
КонецФункции

// Дополняет свойства таблицы значений - "МаркированныеТовары" или дерево значение - "ДеревоУпаковок" колонками,
// специфичными для табачной продукции.
//
// Параметры:
//  Коллекция - ТаблицаЗначений, ДеревоЗначений - "МаркированныеТовары" или "ДеревоУпаковок".
Процедура НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(Коллекция) Экспорт
	
	Если Коллекция.Колонки.Найти("КоличествоПотребительскихУпаковок") <> Неопределено Тогда
		Коллекция.Колонки.Найти("КоличествоПотребительскихУпаковок").Имя = "КоличествоВложенныхЕдиниц";
	КонецЕсли;
	
	Если Коллекция.Колонки.Найти("НаименованиеПродукции") <> Неопределено Тогда
		Коллекция.Колонки.Найти("НаименованиеПродукции").Имя = "ПредставлениеНоменклатуры";
	КонецЕсли;
	
	Если ТипЗнч(Коллекция) = Тип("ДеревоЗначений") Тогда
		КоллекцияОбязательныхКолонок = ШтрихкодированиеИС.КолонкиДереваУпаковок();
		КоллекцияОбязательныхКолонок.Вставить("ОсобоеСостояние");
	ИначеЕсли ТипЗнч(Коллекция) = Тип("ТаблицаЗначений") Тогда 
		КоллекцияОбязательныхКолонок = ШтрихкодированиеИС.КолонкиТаблицыМаркированныеТовары();
	КонецЕсли;
	
	КоллекцияОбязательныхКолонок.Вставить("ИННВладельца",                    Новый ОписаниеТипов("Строка"));
	КоллекцияОбязательныхКолонок.Вставить("Владелец",                        Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("GTIN",                            Метаданные.ОпределяемыеТипы.GTIN.Тип);
	КоллекцияОбязательныхКолонок.Вставить("EAN",                             Метаданные.ОпределяемыеТипы.GTIN.Тип);
	КоллекцияОбязательныхКолонок.Вставить("Статус",                          Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("ОсобоеСостояние",                 Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("ПредставлениеСтатуса",            Новый ОписаниеТипов("Строка"));
	КоллекцияОбязательныхКолонок.Вставить("ПредставлениеНоменклатуры",       Новый ОписаниеТипов("Строка"));
	КоллекцияОбязательныхКолонок.Вставить("КоличествоВложенныхЕдиниц",       Новый ОписаниеТипов("Число"));
	КоллекцияОбязательныхКолонок.Вставить("СпособВводаВОборот",              Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("ИдентификаторПроисхожденияВЕТИС", Метаданные.ОпределяемыеТипы.ИдентификаторПроисхожденияВЕТИС.Тип);
	КоллекцияОбязательныхКолонок.Вставить("Скоропортящаяся",                 Новый ОписаниеТипов("Булево"));
	КоллекцияОбязательныхКолонок.Вставить("ГоденДо",                         Новый ОписаниеТипов("Дата"));
	КоллекцияОбязательныхКолонок.Вставить("НоменклатураСопоставленаПоУПД",   Новый ОписаниеТипов("Булево"));
	КоллекцияОбязательныхКолонок.Вставить("РодительскаяУпаковка",            Новый ОписаниеТипов("Строка"));
	Для Каждого КлючЗначение Из КоллекцияОбязательныхКолонок Цикл
		
		Если Коллекция.Колонки.Найти(КлючЗначение.Ключ) = Неопределено Тогда
			Коллекция.Колонки.Добавить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Инициаилизирует структуру, описывающую результат получения вложенных штрихкродов по данным ИС МП.
// 
// Параметры:
// Возвращаемое значение:
// 	Структура - Описание:
// * ТекстОшибки - Строка - Ошибка, возникшая в результате запроса данных из ИС МП.
// * ЕстьОшибки - Булево - Истина, если возникла ошибка.
// * ВложенныеШтрихкоды - (См. ИнициализацияВложенныхШтрихкодов).
Функция ИнициализацияРезультатаПолученияВложенныхШтрихкодовПоДаннымИСМП()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ВложенныеШтрихкоды",             Неопределено);
	Результат.Вставить("ЕстьОшибки",                     Ложь);
	Результат.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	Результат.Вставить("ТекстОшибки",                    "");
	
	Возврат Результат;
	
КонецФункции

// Возвращает текст ошибки о запрещении запрашивать данные по неизвестным кодам в ИС МП.
// 
// Возвращаемое значение:
//  Строка - Текст ошибки.
Функция ТекстОшибкиЗапрещеноЗапрашиватьДанныеВИСМП()
	
	Возврат НСтр("ru = 'Запрещено запрашивать данные по неизвестным штрихкодам в ИС МП.'");
	
КонецФункции

#КонецОбласти

#Область РазобратьКодМаркировкиСлужебный

// Формирует описание кода маркировки для табачного блока
Процедура ОписаниеКодаМаркировкиТабачногоБлока(НастройкиРазбораКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля)
	
	Алфавит = НастройкиРазбораКодаМаркировки.Алфавит;
	
	ОписаниеЭлементовКМ = Новый Структура("GTIN, СерийныйНомер, МРЦСтрокой, КодПроверки, КодТНВЭД");
	ОписаниеЭлементовКМ.GTIN          = ОписаниеЭлементаКодаМаркировки("01",   "GTIN",         14);
	ОписаниеЭлементовКМ.СерийныйНомер = ОписаниеЭлементаКодаМаркировки("21",   "СерийныйНомер", 7, Алфавит.БуквыЦифрыЗнаки);
	ОписаниеЭлементовКМ.МРЦСтрокой    = ОписаниеЭлементаКодаМаркировки("8005", "МРЦСтрокой",    6, Алфавит.Цифры);
	ОписаниеЭлементовКМ.КодПроверки   = ОписаниеЭлементаКодаМаркировки("93",   "КодПроверки",   4, Алфавит.БуквыЦифрыЗнаки);
	ОписаниеЭлементовКМ.КодТНВЭД      = ОписаниеЭлементаКодаМаркировки("240",  "КодТНВЭД",      8, Алфавит.Цифры);
	
	ШаблоныСтрокой = Новый Массив;
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + МРЦСтрокой");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + МРЦСтрокой + КодПроверки");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + МРЦСтрокой + КодТНВЭД");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + МРЦСтрокой + КодПроверки + КодТНВЭД");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + КодПроверки");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + КодТНВЭД");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + КодПроверки + КодТНВЭД");
	
	СписокШаблонов = ШтрихкодированиеИССлужебный.ОписанияШаблоновКодаМаркировки(ОписаниеЭлементовКМ, ШаблоныСтрокой);
	
	ТипШтрихкодаИВидУпаковки = ШтрихкодированиеИССлужебный.ТипШтрихкодаИВидУпаковки();
	ТипШтрихкодаИВидУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataMatrix;
	ТипШтрихкодаИВидУпаковки.ВидУпаковки  = Перечисления.ВидыУпаковокИС.Групповая;
	
	СоставКодаМаркировки = НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки);
	СоставКодаМаркировки.Вставить("ВключаетМРЦ", Ложь);
	СоставКодаМаркировки.Вставить("МРЦ",         0);
	СоставКодаМаркировки.Вставить("МРЦСтрокой", "");
	СоставКодаМаркировки.Вставить("КодТНВЭД",   "");
	
	Для Каждого ОписаниеШаблонаКодаМаркировки Из СписокШаблонов Цикл
	
		НастройкаОписанияКодаМаркировки = Новый Структура(
			"ВидПродукции, ТипШтрихкодаИВидУпаковки, СоставКодаМаркировки, ОписаниеШаблонаКодаМаркировки, ДанныеОбщегоМодуля");
		НастройкаОписанияКодаМаркировки.ВидПродукции                  = ВидПродукции;
		НастройкаОписанияКодаМаркировки.ТипШтрихкодаИВидУпаковки      = ТипШтрихкодаИВидУпаковки;
		НастройкаОписанияКодаМаркировки.СоставКодаМаркировки          = СоставКодаМаркировки;
		НастройкаОписанияКодаМаркировки.ОписаниеШаблонаКодаМаркировки = ОписаниеШаблонаКодаМаркировки;
		НастройкаОписанияКодаМаркировки.ДанныеОбщегоМодуля            = ДанныеОбщегоМодуля;
		
		ШтрихкодированиеИССлужебный.ДобавитьОписаниеШаблонаКодаМаркировкиВидаПродукции(
			НастройкиРазбораКодаМаркировки, НастройкаОписанияКодаМаркировки);
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует описание кода маркировки для табачной пачки
Процедура ОписаниеКодаМаркировкиТабачнойПачки(НастройкиРазбораКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля)
	
	Алфавит = НастройкиРазбораКодаМаркировки.Алфавит;
	
	ОписаниеЭлементовКМ = Новый Структура("GTIN, СерийныйНомер, МРЦСтрокой, КодПроверки");
	ОписаниеЭлементовКМ.GTIN          = ОписаниеЭлементаКодаМаркировки("", "GTIN",         14);
	ОписаниеЭлементовКМ.СерийныйНомер = ОписаниеЭлементаКодаМаркировки("", "СерийныйНомер", 7, Алфавит.БуквыЦифрыЗнаки);
	ОписаниеЭлементовКМ.МРЦСтрокой    = ОписаниеЭлементаКодаМаркировки("", "МРЦСтрокой",    4, Алфавит.БуквыЦифрыЗнакиМРЦ);
	ОписаниеЭлементовКМ.КодПроверки   = ОписаниеЭлементаКодаМаркировки("", "КодПроверки",   4, Алфавит.БуквыЦифрыЗнаки);
	
	ШаблоныСтрокой = Новый Массив;
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + МРЦСтрокой");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + МРЦСтрокой + КодПроверки");
	
	СписокШаблонов = ШтрихкодированиеИССлужебный.ОписанияШаблоновКодаМаркировки(ОписаниеЭлементовКМ, ШаблоныСтрокой);
	
	ТипШтрихкодаИВидУпаковки = ШтрихкодированиеИССлужебный.ТипШтрихкодаИВидУпаковки();
	ТипШтрихкодаИВидУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix;
	ТипШтрихкодаИВидУпаковки.ВидУпаковки  = Перечисления.ВидыУпаковокИС.Потребительская;
	
	СоставКодаМаркировки = НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки);
	СоставКодаМаркировки.Вставить("ВключаетМРЦ", Ложь);
	СоставКодаМаркировки.Вставить("МРЦ",         0);
	СоставКодаМаркировки.Вставить("МРЦСтрокой", "");
	
	Для Каждого ОписаниеШаблонаКодаМаркировки Из СписокШаблонов Цикл
		
		НастройкаОписанияКодаМаркировки = Новый Структура(
			"ВидПродукции, ТипШтрихкодаИВидУпаковки, СоставКодаМаркировки, ОписаниеШаблонаКодаМаркировки, ДанныеОбщегоМодуля");
		НастройкаОписанияКодаМаркировки.ВидПродукции                  = ВидПродукции;
		НастройкаОписанияКодаМаркировки.ТипШтрихкодаИВидУпаковки      = ТипШтрихкодаИВидУпаковки;
		НастройкаОписанияКодаМаркировки.СоставКодаМаркировки          = СоставКодаМаркировки;
		НастройкаОписанияКодаМаркировки.ОписаниеШаблонаКодаМаркировки = ОписаниеШаблонаКодаМаркировки;
		НастройкаОписанияКодаМаркировки.ДанныеОбщегоМодуля            = ДанныеОбщегоМодуля;
		
		ШтрихкодированиеИССлужебный.ДобавитьОписаниеШаблонаКодаМаркировкиВидаПродукции(
			НастройкиРазбораКодаМаркировки, НастройкаОписанияКодаМаркировки);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОписаниеКодаМаркировкиТабачнойПачкиКодПроверки8(НастройкиРазбораКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля)
	
	Алфавит = НастройкиРазбораКодаМаркировки.Алфавит;
	
	ОписаниеЭлементовКМ = Новый Структура("GTIN, СерийныйНомер, КодПроверки");
	ОписаниеЭлементовКМ.GTIN          = ОписаниеЭлементаКодаМаркировки("", "GTIN",         14);
	ОписаниеЭлементовКМ.СерийныйНомер = ОписаниеЭлементаКодаМаркировки("", "СерийныйНомер", 7, Алфавит.БуквыЦифрыЗнаки);
	ОписаниеЭлементовКМ.КодПроверки   = ОписаниеЭлементаКодаМаркировки("", "КодПроверки",   8, Алфавит.БуквыЦифрыЗнаки);
	
	ШаблоныСтрокой = Новый Массив;
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + КодПроверки");
	
	СписокШаблонов = ШтрихкодированиеИССлужебный.ОписанияШаблоновКодаМаркировки(ОписаниеЭлементовКМ, ШаблоныСтрокой);
	
	ТипШтрихкодаИВидУпаковки = ШтрихкодированиеИССлужебный.ТипШтрихкодаИВидУпаковки();
	ТипШтрихкодаИВидУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix;
	ТипШтрихкодаИВидУпаковки.ВидУпаковки  = Перечисления.ВидыУпаковокИС.Потребительская;
	
	СоставКодаМаркировки = НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки);
	СоставКодаМаркировки.Вставить("ВключаетМРЦ", Ложь);
	СоставКодаМаркировки.Вставить("МРЦ",         0);
	СоставКодаМаркировки.Вставить("МРЦСтрокой", "");
	
	Для Каждого ОписаниеШаблонаКодаМаркировки Из СписокШаблонов Цикл
		
		НастройкаОписанияКодаМаркировки = Новый Структура(
			"ВидПродукции, ТипШтрихкодаИВидУпаковки, СоставКодаМаркировки, ОписаниеШаблонаКодаМаркировки, ДанныеОбщегоМодуля");
		НастройкаОписанияКодаМаркировки.ВидПродукции                  = ВидПродукции;
		НастройкаОписанияКодаМаркировки.ТипШтрихкодаИВидУпаковки      = ТипШтрихкодаИВидУпаковки;
		НастройкаОписанияКодаМаркировки.СоставКодаМаркировки          = СоставКодаМаркировки;
		НастройкаОписанияКодаМаркировки.ОписаниеШаблонаКодаМаркировки = ОписаниеШаблонаКодаМаркировки;
		НастройкаОписанияКодаМаркировки.ДанныеОбщегоМодуля            = ДанныеОбщегоМодуля;
		
		ШтрихкодированиеИССлужебный.ДобавитьОписаниеШаблонаКодаМаркировкиВидаПродукции(
			НастройкиРазбораКодаМаркировки, НастройкаОписанияКодаМаркировки);
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует описание кода маркировки для обуви
Процедура ОписаниеКодаМаркировкиОбуви(НастройкиРазбораКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля)
	
	Алфавит = НастройкиРазбораКодаМаркировки.Алфавит;
	
	ОписаниеЭлементовКМ = Новый Структура("GTIN, СерийныйНомер, КодТНВЭД, КлючПроверки, Подпись");
	ОписаниеЭлементовКМ.GTIN          = ОписаниеЭлементаКодаМаркировки("01",  "GTIN",          14);
	ОписаниеЭлементовКМ.СерийныйНомер = ОписаниеЭлементаКодаМаркировки("21",  "СерийныйНомер", 13, Алфавит.БуквыЦифрыЗнаки);
	ОписаниеЭлементовКМ.КодТНВЭД      = ОписаниеЭлементаКодаМаркировки("240", "КодТНВЭД",       4, Алфавит.Цифры);
	ОписаниеЭлементовКМ.КлючПроверки  = ОписаниеЭлементаКодаМаркировки("91",  "КлючПроверки",   4, Алфавит.БуквыЦифрыЗнаки);
	ОписаниеЭлементовКМ.Подпись       = ОписаниеЭлементаКодаМаркировки("92",  "Подпись",       88, Алфавит.БуквыЦифрыЗнаки);
	
	ШаблоныСтрокой = Новый Массив;
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + КодТНВЭД");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + КодТНВЭД + КлючПроверки + Подпись");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + КлючПроверки + Подпись");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + КлючПроверки + Подпись + КодТНВЭД");
	
	СписокШаблонов = ШтрихкодированиеИССлужебный.ОписанияШаблоновКодаМаркировки(ОписаниеЭлементовКМ, ШаблоныСтрокой);
	
	ТипШтрихкодаИВидУпаковки = ШтрихкодированиеИССлужебный.ТипШтрихкодаИВидУпаковки();
	ТипШтрихкодаИВидУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataMatrix;
	ТипШтрихкодаИВидУпаковки.ВидУпаковки  = Перечисления.ВидыУпаковокИС.Потребительская;
	
	СоставКодаМаркировки = НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки);
	СоставКодаМаркировки.Вставить("КодТНВЭД", "");
	
	Для Каждого ОписаниеШаблонаКодаМаркировки Из СписокШаблонов Цикл
		
		НастройкаОписанияКодаМаркировки = Новый Структура(
			"ВидПродукции, ТипШтрихкодаИВидУпаковки, СоставКодаМаркировки, ОписаниеШаблонаКодаМаркировки, ДанныеОбщегоМодуля");
		НастройкаОписанияКодаМаркировки.ВидПродукции                  = ВидПродукции;
		НастройкаОписанияКодаМаркировки.ТипШтрихкодаИВидУпаковки      = ТипШтрихкодаИВидУпаковки;
		НастройкаОписанияКодаМаркировки.СоставКодаМаркировки          = СоставКодаМаркировки;
		НастройкаОписанияКодаМаркировки.ОписаниеШаблонаКодаМаркировки = ОписаниеШаблонаКодаМаркировки;
		НастройкаОписанияКодаМаркировки.ДанныеОбщегоМодуля            = ДанныеОбщегоМодуля;
		
		ШтрихкодированиеИССлужебный.ДобавитьОписаниеШаблонаКодаМаркировкиВидаПродукции(
			НастройкиРазбораКодаМаркировки, НастройкаОписанияКодаМаркировки);
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует описание кода маркировки для продукции: Легкая промышленность, Духи, Шины, Велосипелы, Кресла-Коляски.
Процедура ОписаниеКодаМаркировкиЛегкойПромышленностиДуховШинВелосипедыКреслаКоляски(НастройкиРазбораКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля)
	
	// Легкая промышленность, Духи, Шины:
	
	Алфавит = НастройкиРазбораКодаМаркировки.Алфавит;
	
	ОписаниеЭлементовКМ = Новый Структура("GTIN, СерийныйНомер, КлючПроверки, Подпись");
	ОписаниеЭлементовКМ.GTIN          = ОписаниеЭлементаКодаМаркировки("01", "GTIN",          14);
	ОписаниеЭлементовКМ.СерийныйНомер = ОписаниеЭлементаКодаМаркировки("21", "СерийныйНомер", 13, Алфавит.БуквыЦифрыЗнаки);
	ОписаниеЭлементовКМ.КлючПроверки  = ОписаниеЭлементаКодаМаркировки("91", "КлючПроверки",   4, Алфавит.БуквыЦифрыЗнаки);
	ОписаниеЭлементовКМ.Подпись       = ОписаниеЭлементаКодаМаркировки("92", "Подпись",       44, Алфавит.БуквыЦифрыЗнаки);
	
	ШаблоныСтрокой = Новый Массив;
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + КлючПроверки + Подпись");
	
	СписокШаблонов = ШтрихкодированиеИССлужебный.ОписанияШаблоновКодаМаркировки(ОписаниеЭлементовКМ, ШаблоныСтрокой);
	
	ТипШтрихкодаИВидУпаковки = ШтрихкодированиеИССлужебный.ТипШтрихкодаИВидУпаковки();
	ТипШтрихкодаИВидУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataMatrix;
	ТипШтрихкодаИВидУпаковки.ВидУпаковки  = Перечисления.ВидыУпаковокИС.Потребительская;
	
	СоставКодаМаркировки = НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки);
	
	Для Каждого ОписаниеШаблонаКодаМаркировки Из СписокШаблонов Цикл
		
		НастройкаОписанияКодаМаркировки = Новый Структура(
			"ВидПродукции, ТипШтрихкодаИВидУпаковки, СоставКодаМаркировки, ОписаниеШаблонаКодаМаркировки, ДанныеОбщегоМодуля");
		НастройкаОписанияКодаМаркировки.ВидПродукции                  = ВидПродукции;
		НастройкаОписанияКодаМаркировки.ТипШтрихкодаИВидУпаковки      = ТипШтрихкодаИВидУпаковки;
		НастройкаОписанияКодаМаркировки.СоставКодаМаркировки          = СоставКодаМаркировки;
		НастройкаОписанияКодаМаркировки.ОписаниеШаблонаКодаМаркировки = ОписаниеШаблонаКодаМаркировки;
		НастройкаОписанияКодаМаркировки.ДанныеОбщегоМодуля            = ДанныеОбщегоМодуля;
		
		ШтрихкодированиеИССлужебный.ДобавитьОписаниеШаблонаКодаМаркировкиВидаПродукции(
			НастройкиРазбораКодаМаркировки, НастройкаОписанияКодаМаркировки);
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует описание кода маркировки для Фотоаппаратов
Процедура ОписаниеКодаМаркировкиФотоаппаратов(НастройкиРазбораКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля)
	
	// Фотоаппараты:
	// 01 + GTIN + 21 + serial (20 chars) + Криптохвост (44 chars)
	
	Алфавит = НастройкиРазбораКодаМаркировки.Алфавит;
	
	ОписаниеЭлементовКМ = Новый Структура("GTIN, СерийныйНомер, КлючПроверки, Подпись");
	ОписаниеЭлементовКМ.GTIN          = ОписаниеЭлементаКодаМаркировки("01", "GTIN",          14);
	ОписаниеЭлементовКМ.СерийныйНомер = ОписаниеЭлементаКодаМаркировки("21", "СерийныйНомер", 20, Алфавит.БуквыЦифрыЗнаки);
	ОписаниеЭлементовКМ.КлючПроверки  = ОписаниеЭлементаКодаМаркировки("91", "КлючПроверки",   4, Алфавит.БуквыЦифрыЗнаки);
	ОписаниеЭлементовКМ.Подпись       = ОписаниеЭлементаКодаМаркировки("92", "Подпись",       44, Алфавит.БуквыЦифрыЗнаки);
	
	ШаблоныСтрокой = Новый Массив;
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + КлючПроверки + Подпись");
	
	СписокШаблонов = ШтрихкодированиеИССлужебный.ОписанияШаблоновКодаМаркировки(ОписаниеЭлементовКМ, ШаблоныСтрокой);
	
	ТипШтрихкодаИВидУпаковки = ШтрихкодированиеИССлужебный.ТипШтрихкодаИВидУпаковки();
	ТипШтрихкодаИВидУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataMatrix;
	ТипШтрихкодаИВидУпаковки.ВидУпаковки  = Перечисления.ВидыУпаковокИС.Потребительская;
	
	СоставКодаМаркировки = НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки);
	
	Для Каждого ОписаниеШаблонаКодаМаркировки Из СписокШаблонов Цикл
		
		НастройкаОписанияКодаМаркировки = Новый Структура(
			"ВидПродукции, ТипШтрихкодаИВидУпаковки, СоставКодаМаркировки, ОписаниеШаблонаКодаМаркировки, ДанныеОбщегоМодуля");
		НастройкаОписанияКодаМаркировки.ВидПродукции                  = ВидПродукции;
		НастройкаОписанияКодаМаркировки.ТипШтрихкодаИВидУпаковки      = ТипШтрихкодаИВидУпаковки;
		НастройкаОписанияКодаМаркировки.СоставКодаМаркировки          = СоставКодаМаркировки;
		НастройкаОписанияКодаМаркировки.ОписаниеШаблонаКодаМаркировки = ОписаниеШаблонаКодаМаркировки;
		НастройкаОписанияКодаМаркировки.ДанныеОбщегоМодуля            = ДанныеОбщегоМодуля;
	
		ШтрихкодированиеИССлужебный.ДобавитьОписаниеШаблонаКодаМаркировкиВидаПродукции(
			НастройкиРазбораКодаМаркировки, НастройкаОписанияКодаМаркировки);
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует описание кода маркировки для молочной продукции
Процедура ОписаниеКодаМаркировкиМолочнаяПродукция(НастройкиРазбораКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля)
	
	Алфавит = НастройкиРазбораКодаМаркировки.Алфавит;
	
	ОписаниеЭлементовКМ = Новый Структура("GTIN, СерийныйНомер, ГоденДо, КодПроверки");
	ОписаниеЭлементовКМ.GTIN          = ОписаниеЭлементаКодаМаркировки("01",   "GTIN",          14);
	ОписаниеЭлементовКМ.СерийныйНомер = ОписаниеЭлементаКодаМаркировки("21",   "СерийныйНомер", 13, Алфавит.БуквыЦифрыЗнаки);
	ОписаниеЭлементовКМ.ГоденДо       = ОписаниеЭлементаКодаМаркировки("17",   "ГоденДо",        6, Алфавит.Цифры);
	ОписаниеЭлементовКМ.КодПроверки   = ОписаниеЭлементаКодаМаркировки("93",   "КодПроверки",    4, Алфавит.БуквыЦифрыЗнаки);
	
	ШаблоныСтрокой = Новый Массив;
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + ГоденДо");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + КодПроверки");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + ГоденДо + КодПроверки");
	
	СписокШаблонов = ШтрихкодированиеИССлужебный.ОписанияШаблоновКодаМаркировки(ОписаниеЭлементовКМ, ШаблоныСтрокой);
	
	ТипШтрихкодаИВидУпаковки = ШтрихкодированиеИССлужебный.ТипШтрихкодаИВидУпаковки();
	ТипШтрихкодаИВидУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataMatrix;
	ТипШтрихкодаИВидУпаковки.ВидУпаковки  = Перечисления.ВидыУпаковокИС.Потребительская;
	
	СоставКодаМаркировки = НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки);
	СоставКодаМаркировки.Вставить("ГоденДо",         '00010101');
	СоставКодаМаркировки.Вставить("Скоропортящаяся", Ложь);
	
	Для Каждого ОписаниеШаблонаКодаМаркировки Из СписокШаблонов Цикл
		
		НастройкаОписанияКодаМаркировки = Новый Структура(
			"ВидПродукции, ТипШтрихкодаИВидУпаковки, СоставКодаМаркировки, ОписаниеШаблонаКодаМаркировки, ДанныеОбщегоМодуля");
		НастройкаОписанияКодаМаркировки.ВидПродукции                  = ВидПродукции;
		НастройкаОписанияКодаМаркировки.ТипШтрихкодаИВидУпаковки      = ТипШтрихкодаИВидУпаковки;
		НастройкаОписанияКодаМаркировки.СоставКодаМаркировки          = СоставКодаМаркировки;
		НастройкаОписанияКодаМаркировки.ОписаниеШаблонаКодаМаркировки = ОписаниеШаблонаКодаМаркировки;
		НастройкаОписанияКодаМаркировки.ДанныеОбщегоМодуля            = ДанныеОбщегоМодуля;
		
		ШтрихкодированиеИССлужебный.ДобавитьОписаниеШаблонаКодаМаркировкиВидаПродукции(
			НастройкиРазбораКодаМаркировки, НастройкаОписанияКодаМаркировки);
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует описание кода маркировки для молочной продукции
Процедура ОписаниеКодаМаркировкиМолочнаяПродукцияСкоропортящаяся(НастройкиРазбораКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля)
	
	Алфавит = НастройкиРазбораКодаМаркировки.Алфавит;
	
	ОписаниеЭлементовКМ = Новый Структура("GTIN, СерийныйНомер, ГоденДо, КодПроверки");
	ОписаниеЭлементовКМ.GTIN          = ОписаниеЭлементаКодаМаркировки("01",   "GTIN",          14);
	ОписаниеЭлементовКМ.СерийныйНомер = ОписаниеЭлементаКодаМаркировки("21",   "СерийныйНомер", 13, Алфавит.БуквыЦифрыЗнаки);
	ОписаниеЭлементовКМ.ГоденДо       = ОписаниеЭлементаКодаМаркировки("7003", "ГоденДо",       10, Алфавит.Цифры);
	ОписаниеЭлементовКМ.КодПроверки   = ОписаниеЭлементаКодаМаркировки("93",   "КодПроверки",    4, Алфавит.БуквыЦифрыЗнаки);
	
	ШаблоныСтрокой = Новый Массив;
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + ГоденДо");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + КодПроверки");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + ГоденДо + КодПроверки");
	
	СписокШаблонов = ШтрихкодированиеИССлужебный.ОписанияШаблоновКодаМаркировки(ОписаниеЭлементовКМ, ШаблоныСтрокой);
	
	ТипШтрихкодаИВидУпаковки = ШтрихкодированиеИССлужебный.ТипШтрихкодаИВидУпаковки();
	ТипШтрихкодаИВидУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataMatrix;
	ТипШтрихкодаИВидУпаковки.ВидУпаковки  = Перечисления.ВидыУпаковокИС.Потребительская;
	
	СоставКодаМаркировки = НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки);
	СоставКодаМаркировки.Вставить("ГоденДо",         '00010101');
	СоставКодаМаркировки.Вставить("Скоропортящаяся", Истина);
	
	Для Каждого ОписаниеШаблонаКодаМаркировки Из СписокШаблонов Цикл
		
		НастройкаОписанияКодаМаркировки = Новый Структура(
			"ВидПродукции, ТипШтрихкодаИВидУпаковки, СоставКодаМаркировки, ОписаниеШаблонаКодаМаркировки, ДанныеОбщегоМодуля");
		НастройкаОписанияКодаМаркировки.ВидПродукции                  = ВидПродукции;
		НастройкаОписанияКодаМаркировки.ТипШтрихкодаИВидУпаковки      = ТипШтрихкодаИВидУпаковки;
		НастройкаОписанияКодаМаркировки.СоставКодаМаркировки          = СоставКодаМаркировки;
		НастройкаОписанияКодаМаркировки.ОписаниеШаблонаКодаМаркировки = ОписаниеШаблонаКодаМаркировки;
		НастройкаОписанияКодаМаркировки.ДанныеОбщегоМодуля            = ДанныеОбщегоМодуля;
		
		ШтрихкодированиеИССлужебный.ДобавитьОписаниеШаблонаКодаМаркировкиВидаПродукции(
			НастройкиРазбораКодаМаркировки, НастройкаОписанияКодаМаркировки);
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует описание кода маркировки для логистической упаковки
Процедура ОписаниеКодаМаркировкиЛогистическаяУпаковка18(НастройкиРазбораКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля)
	
	// Примеры:
	//	- исмп:
	//	* 199988888800000013 - из сервиса
	
	Алфавит = НастройкиРазбораКодаМаркировки.Алфавит;
	
	ОписаниеЭлементовКМ = Новый Структура("SSCC");
	ОписаниеЭлементовКМ.SSCC = ОписаниеЭлементаКодаМаркировки("", "SSCC", 18, Алфавит.Цифры); // Серийный код транспортной упаковки, представленный в виде цифрового номера.
	
	ШаблоныСтрокой = Новый Массив;
	ШаблоныСтрокой.Добавить("SSCC");
	
	СписокШаблонов = ШтрихкодированиеИССлужебный.ОписанияШаблоновКодаМаркировки(ОписаниеЭлементовКМ, ШаблоныСтрокой);
	
	ТипШтрихкодаИВидУпаковки = ШтрихкодированиеИССлужебный.ТипШтрихкодаИВидУпаковки();
	ТипШтрихкодаИВидУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодов.SSCC;
	ТипШтрихкодаИВидУпаковки.ВидУпаковки  = Перечисления.ВидыУпаковокИС.Логистическая;
	
	СоставКодаМаркировки = НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки);
	
	Для Каждого ОписаниеШаблонаКодаМаркировки Из СписокШаблонов Цикл
		
		НастройкаОписанияКодаМаркировки = Новый Структура(
			"ВидПродукции, ТипШтрихкодаИВидУпаковки, СоставКодаМаркировки, ОписаниеШаблонаКодаМаркировки, ДанныеОбщегоМодуля");
		НастройкаОписанияКодаМаркировки.ВидПродукции                  = ВидПродукции;
		НастройкаОписанияКодаМаркировки.ТипШтрихкодаИВидУпаковки      = ТипШтрихкодаИВидУпаковки;
		НастройкаОписанияКодаМаркировки.СоставКодаМаркировки          = СоставКодаМаркировки;
		НастройкаОписанияКодаМаркировки.ОписаниеШаблонаКодаМаркировки = ОписаниеШаблонаКодаМаркировки;
		НастройкаОписанияКодаМаркировки.ДанныеОбщегоМодуля            = ДанныеОбщегоМодуля;
		
		ШтрихкодированиеИССлужебный.ДобавитьОписаниеШаблонаКодаМаркировкиВидаПродукции(
			НастройкиРазбораКодаМаркировки, НастройкаОписанияКодаМаркировки);
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует описание кода маркировки для логистической упаковки
Процедура ОписаниеКодаМаркировкиЛогистическаяУпаковка20(НастройкиРазбораКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля)
	
	// Примеры:
	//	- исмп:
	//	* (00)199988888800000013 - в ИБ
	//	* 00199988888800000013 - от сканера
	//	- мотп:
	//	* 00199988888800000013 - из сервиса, от сканера
	//	* (00)199988888800000013 - в ИБ
	
	Алфавит = НастройкиРазбораКодаМаркировки.Алфавит;
	
	ОписаниеЭлементовКМ = Новый Структура("SSCC");
	ОписаниеЭлементовКМ.SSCC = ОписаниеЭлементаКодаМаркировки("00", "SSCC", 18, Алфавит.Цифры); // Серийный код транспортной упаковки, представленный в виде цифрового номера.
	
	ШаблоныСтрокой = Новый Массив;
	ШаблоныСтрокой.Добавить("SSCC");
	
	СписокШаблонов = ШтрихкодированиеИССлужебный.ОписанияШаблоновКодаМаркировки(ОписаниеЭлементовКМ, ШаблоныСтрокой);
	
	ТипШтрихкодаИВидУпаковки = ШтрихкодированиеИССлужебный.ТипШтрихкодаИВидУпаковки();
	ТипШтрихкодаИВидУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодов.SSCC;
	ТипШтрихкодаИВидУпаковки.ВидУпаковки  = Перечисления.ВидыУпаковокИС.Логистическая;
	
	СоставКодаМаркировки = НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки);
	
	Для Каждого ОписаниеШаблонаКодаМаркировки Из СписокШаблонов Цикл
		
		НастройкаОписанияКодаМаркировки = Новый Структура(
			"ВидПродукции, ТипШтрихкодаИВидУпаковки, СоставКодаМаркировки, ОписаниеШаблонаКодаМаркировки, ДанныеОбщегоМодуля");
		НастройкаОписанияКодаМаркировки.ВидПродукции                  = ВидПродукции;
		НастройкаОписанияКодаМаркировки.ТипШтрихкодаИВидУпаковки      = ТипШтрихкодаИВидУпаковки;
		НастройкаОписанияКодаМаркировки.СоставКодаМаркировки          = СоставКодаМаркировки;
		НастройкаОписанияКодаМаркировки.ОписаниеШаблонаКодаМаркировки = ОписаниеШаблонаКодаМаркировки;
		НастройкаОписанияКодаМаркировки.ДанныеОбщегоМодуля            = ДанныеОбщегоМодуля;
		
		ШтрихкодированиеИССлужебный.ДобавитьОписаниеШаблонаКодаМаркировкиВидаПродукции(
			НастройкиРазбораКодаМаркировки, НастройкаОписанияКодаМаркировки);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОписаниеЭлементаКодаМаркировки(Код, Имя, КоличествоЗнаков, АлфавитДопустимыхСимволов = "")
	Возврат ШтрихкодированиеИССлужебный.ОписаниеЭлементаКодаМаркировки(Код, Имя, КоличествоЗнаков, АлфавитДопустимыхСимволов);
КонецФункции

// Вычисляет штрихкода EAN по коду маркировки.
//
// Параметры:
//  КодМаркировки - Строка - Описание
// Возвращаемое значение:
//  Неопределено, Строка - Описание
Функция EANПоКодуМаркировки(КодМаркировки)
	
	Если СтрНачинаетсяС(КодМаркировки, "(") Тогда
		GTIN = Сред(КодМаркировки, 5, 14);
	Иначе
		GTIN = Лев(КодМаркировки, 14);
	КонецЕсли;
	
	ЭтоGTIN = МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(GTIN);
	Если Не ЭтоGTIN Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	EAN = ШтрихкодированиеИСКлиентСервер.ШтрихкодEANИзGTIN(GTIN);
	
	Возврат EAN;
	
КонецФункции

#КонецОбласти

#Область СборИнформацииПоДаннымУПД

// Получает данные кодов маркировки и соответствующую кодам номенклатуру и характеристику информационной базы по данным
//   УПД учетного документа.
// 
// Параметры:
//  УчетныйДокумент     - ЛюбаяСсылка                       - Документ, формируемый на основании УПД.
//  ЭлектронныйДокумент - ЭлектронныйДокумент, Неопределено - ДокументСсылка.ЭлектронныйДокументИсходящий, 
//               ДокументСсылка.ЭлектронныйДокументВходящий - ссылка на электронный документ. Если в
//               параметре "Документ" передан учетный документ, возвращается актуальный
//               для него электронный. Если передан электронный - возвращается та же ссылка.
// Возвращаемое значение:
//  Соответствие - Ключ - Код маркировки, значение - Структура:
//   * Номенклатура - ОпределяемыйТип.Номенклатура - номенклатура кода маркировки по данным ИБ.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика по данным ИБ.
Функция ДанныеМаркируемойНоменклатурыПоДаннымУПД(УчетныйДокумент, ЭлектронныйДокумент = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(УчетныйДокумент) Тогда
		Возврат Новый Соответствие;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		// Получаем электронный документ и присоединенный файл титула продавца
		ЭлектронныйДокумент = ОбменСКонтрагентами.СтатусДокументооборота(УчетныйДокумент).ЭлектронныйДокумент;
	КонецЕсли;
	
	Если ЭлектронныйДокумент = Неопределено Тогда
		Возврат Новый Соответствие;
	КонецЕсли;
	
	СсылкаНаФайл = ОбменСКонтрагентамиСлужебный.ПрисоединенныйФайл(ЭлектронныйДокумент);
	
	// Сохраняем файл на диск
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(СсылкаНаФайл);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	//Формируем дерево документа
	ОписаниеЭД = ОбменСКонтрагентамиВнутренний.СформироватьДеревоРазбора(ИмяВременногоФайла);
	ДеревоДокумента = ОписаниеЭД.СтрокаОбъекта.ЗначениеРеквизита;
	
	// Заполняем номенклатуру информационной базы в дереве.
	ОбменСКонтрагентамиСлужебный.ЗаполнитьНоменклатуруИБВДеревеДокумента(
		ЭлектронныйДокумент, ДеревоДокумента);
	
	ИмяСобытия = НСтр("ru = 'Формирование дерева разбора ЭДО.Удаление временного файла.'");
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат ДанныеМаркируемойНоменклатурыПоДаннымДереваУПД(ДеревоДокумента);
	
КонецФункции

// Получает данные кодов маркировки и соответствующую кодам номенклатуру и характеристику информационной базы по данным
//   дерева, сформированного по УПД.
// 
// Параметры:
//  ДеревоДокумента - ДеревоЗначений - Дерево по данным УПД.
// Возвращаемое значение:
//  Соответствие - Ключ - Код маркировки, значение - Структура:
//   * Номенклатура - ОпределяемыйТип.Номенклатура - номенклатура кода маркировки по данным ИБ.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика по данным ИБ.
Функция ДанныеМаркируемойНоменклатурыПоДаннымДереваУПД(ДеревоДокумента)
	
	СоответствиеКодаМаркировкиНоменклатуре = Новый Соответствие;
	СведенияОТоварах = ДеревоДокумента.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Если СведенияОТоварах = Неопределено Тогда
		Возврат СоответствиеКодаМаркировкиНоменклатуре;
	КонецЕсли;
	
	ПутьКИндивидуальнымУпаковкам155 = "СведенияОТоварах.НомерСтроки.СведенияОМаркировке.КодыИндивидуальныхУпаковок";
	ПутьКИндивидуальнымУпаковкам820 = "СведенияОТоварах.НомерСтроки.СведенияОМаркировке.ИндивидуальныеУпаковки";
	ПутьКНоменклатуре               = "СведенияОТоварах.НомерСтроки.Сопоставление.НоменклатураИБ";
	ПутьКХарактеристике             = "СведенияОТоварах.НомерСтроки.Сопоставление.ХарактеристикаИБ";
	
	ПутьКИЗ = "СведенияОТоварах.НомерСтроки.СведенияОМаркировке.КонтрольныеИдентификационныеЗнаки";
	ПутьТранспортныеУпаковки = "СведенияОТоварах.НомерСтроки.СведенияОМаркировке.ТранспортныеУпаковки";
	
	ПустаяХарактеристика = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры");
	
	Для Каждого СтрокаТовары Из СведенияОТоварах.Строки Цикл
		
		НоменклатураИБ = СтрокаТовары.Строки.Найти(ПутьКНоменклатуре, "ПолныйПуть", Истина);
		Если НоменклатураИБ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Номенклатура = НоменклатураИБ.Значение;
		
		ХарактеристикаИБ = СтрокаТовары.Строки.Найти(ПутьКХарактеристике, "ПолныйПуть", Истина);
		Если ХарактеристикаИБ = Неопределено Тогда
			Характеристика = ПустаяХарактеристика;
		Иначе
			Характеристика = ХарактеристикаИБ.Значение;
		КонецЕсли;
		
		ДанныеНоменклатуры = Новый Структура;
		ДанныеНоменклатуры.Вставить("Номенклатура",              Номенклатура);
		ДанныеНоменклатуры.Вставить("Характеристика",            Характеристика);
		ДанныеНоменклатуры.Вставить("ПредставлениеНоменклатуры", Строка(Номенклатура));
		ДанныеНоменклатуры.Вставить("МультитоварнаяУпаковка",    Ложь);
		
		ИндивидуальныеУпаковки = СтрокаТовары.Строки.Найти(ПутьКИндивидуальнымУпаковкам820, "ПолныйПуть", Истина);
		Если ИндивидуальныеУпаковки = Неопределено Тогда
			
			ИндивидуальныеУпаковки = СтрокаТовары.Строки.Найти(ПутьКИндивидуальнымУпаковкам155, "ПолныйПуть", Истина);
			Если ИндивидуальныеУпаковки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИндивидуальныеУпаковки <> Неопределено Тогда
			ДополнитьСоотвествиеКодовМаркировкиНоменклатуре(
				СоответствиеКодаМаркировкиНоменклатуре, ИндивидуальныеУпаковки, ДанныеНоменклатуры);
		КонецЕсли;
		
		КИЗ = СтрокаТовары.Строки.Найти(ПутьКИЗ, "ПолныйПуть", Истина);
		Если КИЗ <> Неопределено Тогда
			ДополнитьСоотвествиеКодовМаркировкиНоменклатуре(
				СоответствиеКодаМаркировкиНоменклатуре, КИЗ, ДанныеНоменклатуры);
		КонецЕсли;
		
		ТранспортныеУпаковки = СтрокаТовары.Строки.Найти(ПутьТранспортныеУпаковки, "ПолныйПуть", Истина);
		Если ТранспортныеУпаковки <> Неопределено Тогда
			ДополнитьСоотвествиеКодовМаркировкиНоменклатуре(
				СоответствиеКодаМаркировкиНоменклатуре, ТранспортныеУпаковки, ДанныеНоменклатуры);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоответствиеКодаМаркировкиНоменклатуре;
	
КонецФункции

Процедура ДополнитьСоотвествиеКодовМаркировкиНоменклатуре(СоответствиеКодаМаркировкиНоменклатуре,
														ИндивидуальныеУпаковки, 
														ДанныеНоменклатуры)
	
	Для Каждого ИндивидуальнаяУпаковка Из ИндивидуальныеУпаковки.Строки Цикл
		
		Если ИндивидуальнаяУпаковка.Строки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КодМаркировки = ИндивидуальнаяУпаковка.Строки[0].Значение;
		
		Если ПустаяСтрока(КодМаркировки) Тогда // Товар без маркировки.
			Продолжить;
		КонецЕсли;
		
		НайденноеСоответствие = СоответствиеКодаМаркировкиНоменклатуре.Получить(КодМаркировки);
		
		Если НайденноеСоответствие = Неопределено Тогда
			СоответствиеКодаМаркировкиНоменклатуре.Вставить(КодМаркировки, ДанныеНоменклатуры);
		ИначеЕсли НайденноеСоответствие.Номенклатура <> ДанныеНоменклатуры.Номенклатура
			Или НайденноеСоответствие.Характеристика <> ДанныеНоменклатуры.Характеристика Тогда
			НайденноеСоответствие.Вставить("МультитоварнаяУпаковка", Истина);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти