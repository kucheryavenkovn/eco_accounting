// Функция возвращает структуру со значениями параметров начисления пени
// Параметры:
//		ДоговорКонтрагента - договор, по которому выбираются параметры
//		МоментВремени - момент времени, на который выбираются параметры
Функция ПолучитьПараметрыНачисленияПени(ДоговорКонтрагента, Период) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	МАКСИМУМ(СрокиОплаты.Период) КАК Период,
	|	СрокиОплаты.ДоговорКонтрагента КАК ДоговорКонтрагента
	|ПОМЕСТИТЬ ВТПоследнийПериод
	|ИЗ
	|	РегистрСведений.АР_СрокиОплатыИПараметрыНачисленияПеней.СрезПоследних(
	|			&Период,
	|			ДоговорКонтрагента = &ДоговорКонтрагента
	|				И (СрокДействия >= &Период
	|					ИЛИ СрокДействия = ДАТАВРЕМЯ(1, 1, 1))) КАК СрокиОплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	СрокиОплаты.ДоговорКонтрагента,
	|	СрокиОплаты.СпособНачисленияПени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СрокиОплаты.СтавкаПени КАК СтавкаПени,
	|	СрокиОплаты.СпособПогашенияПени КАК СпособПогашенияПени,
	|	СрокиОплаты.СпособНачисленияПени КАК СпособНачисленияПени
	|ИЗ
	|	РегистрСведений.АР_СрокиОплатыИПараметрыНачисленияПеней.СрезПоследних(
	|			&Период,
	|			ДоговорКонтрагента = &ДоговорКонтрагента
	|				И (СрокДействия >= &Период
	|					ИЛИ СрокДействия = ДАТАВРЕМЯ(1, 1, 1))) КАК СрокиОплаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоследнийПериод КАК ВТПоследнийПериод
	|		ПО СрокиОплаты.Период = ВТПоследнийПериод.Период
	|			И СрокиОплаты.ДоговорКонтрагента = ВТПоследнийПериод.ДоговорКонтрагента";

	Запрос.УстановитьПараметр("Период", ?(ЗначениеЗаполнено(Период), КонецДня(Период), КонецДня(ТекущаяДата())));
	Запрос.УстановитьПараметр("ДоговорКонтрагента",ДоговорКонтрагента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("СтавкаПени, СпособПогашенияПени, СпособНачисленияПени", Выборка.СтавкаПени, Выборка.СпособПогашенияПени, Выборка.СпособНачисленияПени);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает структуру со значениями параметров начисления пени
// Параметры:
//		ДоговорКонтрагента - договор, по которому выбираются параметры
//		МоментВремени - момент времени, на который выбираются параметры
Функция ПолучитьСрокиОплатыИПараметрыНачисленияПеней(ДоговорКонтрагента, Период) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПараметрыНачисленияПени();
	Запрос.УстановитьПараметр("МоментВремени", ?(ЗначениеЗаполнено(Период), КонецДня(Период), КонецДня(ТекущаяДата())));
	Запрос.УстановитьПараметр("ДоговорКонтрагента",ДоговорКонтрагента);
	
	Возврат АР_ПроцедурыНачисленияПереопределяемый.ПолучитьПараметрыНачисленияПени(Запрос);
	
КонецФункции

// Функция возвращает таблицу значений с данными о начислении пени. Предварительно анализируются параметры начисления пени,
// расчет суммы пени производится в соответствии со значениями этих параметров.
//
// Параметры:
//		ДоговорКонтрагента - договор контрагента, для которого анализируются задолженности по объектам аренды.
//		МоментВремени - момент времени начисления пени
Функция НачислениеПени(ДоговорКонтрагента, МоментВремени, НеУчитыватьНДС = Ложь) Экспорт
	
	Если ТипЗнч(ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		СписокДоговоровКонтрагента = Новый Массив;
		СписокДоговоровКонтрагента.Добавить(ДоговорКонтрагента);
	Иначе
		СписокДоговоровКонтрагента = ДоговорКонтрагента;
	КонецЕсли;
	
	МассивУдаляемыхДоговоров = Новый Массив;
	Для Каждого Договор Из СписокДоговоровКонтрагента Цикл 
		Если НЕ ЗначениеЗаполнено(Договор) Тогда
			Если МассивУдаляемыхДоговоров.Найти(Договор) = Неопределено Тогда
				МассивУдаляемыхДоговоров.Добавить(Договор);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		ДатаЗаключенияДоговора = НачалоДня(АР_ОбщиеПроцедуры.ПолучитьДатуЗаключенияДоговора(Договор));
		Если НЕ ЗначениеЗаполнено(ДатаЗаключенияДоговора) Тогда
			ТекстСообщения = "По договору """ + Договор + """ не найден документ заключения договора";
			АР_ОбщиеПроцедурыПереопределяемый.СообщениеПользователю(ТекстСообщения);
			Если МассивУдаляемыхДоговоров.Найти(Договор) = Неопределено Тогда
				МассивУдаляемыхДоговоров.Добавить(Договор);
			КонецЕсли;
		КонецЕсли;
	
		ПараметрыНачисленияПени = ПолучитьПараметрыНачисленияПени(Договор, МоментВремени);	
		Если ПараметрыНачисленияПени = Неопределено Тогда
			ТекстСообщения = "По договору """ + Договор + """ не определены параметры начисления пени";
			АР_ОбщиеПроцедурыПереопределяемый.СообщениеПользователю(ТекстСообщения);
			Если МассивУдаляемыхДоговоров.Найти(Договор) = Неопределено Тогда
				МассивУдаляемыхДоговоров.Добавить(Договор);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Договор Из МассивУдаляемыхДоговоров Цикл
		Индекс = СписокДоговоровКонтрагента.Найти(Договор);
		Если НЕ Индекс = Неопределено Тогда
			СписокДоговоровКонтрагента.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
	Если СписокДоговоровКонтрагента.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Проверим заполненность произв. календаря на период расчета
	НачалоКалендаря = АР_ПроцедурыНачисления.ОпределитьДатуЗаключенияДоговораНаДату(СписокДоговоровКонтрагента);
	КонецКалендаря = ДобавитьМесяц(?(ТипЗнч(МоментВремени) = Тип("Дата"), НачалоДня(МоментВремени), НачалоДня(МоментВремени.Дата)), 1);
	
	Если Не АР_ПроцедурыНачисленияПереопределяемый.ПроизводственныйКалендарьЗаполненНаПериод(НачалоКалендаря, КонецКалендаря) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураРабочихПериодов = ПодготовитьСтруктуруРабочихПериодов(НачалоКалендаря, КонецКалендаря);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаПоискРабочейДаты", 	СтруктураРабочихПериодов.ТаблицаПоискРабочейДаты);
	Запрос.УстановитьПараметр("ТаблицаКалендарь",		 	СтруктураРабочихПериодов.ТаблицаКалендарь);
	Запрос.УстановитьПараметр("ТаблицаКалендарьРаб", 		СтруктураРабочихПериодов.ТаблицаКалендарьРаб);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВТПоискРабочейДаты
	|ИЗ
	|	&ТаблицаПоискРабочейДаты КАК ТаблицаПоискРабочейДаты";
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВТКалендарь
	|ИЗ
	|	&ТаблицаКалендарь КАК ТаблицаКалендарь";
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВТКалендарьРаб
	|ИЗ
	|	&ТаблицаКалендарьРаб КАК ТаблицаКалендарьРаб";
	Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("СрокОплатыВсегдаРабочийДень", Константы.АР_ПриРасчетеПениСрокОплатыРабочийДень.Получить());
	Запрос.УстановитьПараметр("ПустойСчетНаАренду",Документы.АР_СчетНаАренду.ПустаяСсылка());
	Запрос.УстановитьПараметр("ДатаНачисленияПени", ?(ТипЗнч(МоментВремени) = Тип("Дата"), КонецДня(МоментВремени), КонецДня(МоментВремени.Дата)));
	Запрос.УстановитьПараметр("МоментНачисленияПени", ?(ТипЗнч(МоментВремени) = Тип("Дата"), КонецДня(МоментВремени), МоментВремени));
	Запрос.УстановитьПараметр("СписокДоговоров", СписокДоговоровКонтрагента);
	
	БезНДС = НеУчитыватьНДС;
	Дата = ?(ТипЗнч(МоментВремени) = Тип("Дата"), КонецДня(МоментВремени), КонецДня(МоментВремени.Дата));
	Если ТипЗнч(ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(ДоговорКонтрагента.Организация, Дата);
		ПрименяетсяОсвобождениеОтУплатыНДС = УчетнаяПолитика.ПрименяетсяОсвобождениеОтУплатыНДС(ДоговорКонтрагента.Организация, Дата);
		Если НЕ ПлательщикНДС ИЛИ ПрименяетсяОсвобождениеОтУплатыНДС Тогда
			БезНДС = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("БезНДС", БезНДС);
	
	АР_ПроцедурыНачисленияПереопределяемый.УстановитьРегистрВзаиморасчетовКакВременнуюТаблицу(Запрос);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос.Текст = АР_ПроцедурыНачисленияПереопределяемый.ПолучитьТекстЗапросаОпределенияПараметровНачисленияПени(Запрос, СписокДоговоровКонтрагента);
	Запрос.Выполнить();
	
	ВТПараметрыНачисленияПени = Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВТПараметрыНачисленияПени");
	ПараметрыНачисленияПени = ВТПараметрыНачисленияПени.ПолучитьДанные().Выгрузить();
	ПараметрыНачисленияПени.Сортировать("ДоговорКонтрагента, НачалоПериода");
	Сч = 1;
	Пока Сч < ПараметрыНачисленияПени.Количество() Цикл			
		ТекущаяСтрока = ПараметрыНачисленияПени[Сч-1];
		СледующаяСтрока = ПараметрыНачисленияПени[Сч];
		Если ТекущаяСтрока.ДоговорКонтрагента = СледующаяСтрока.ДоговорКонтрагента
			И ТекущаяСтрока.СтавкаПени = СледующаяСтрока.СтавкаПени
			И ТекущаяСтрока.КонецПериода = СледующаяСтрока.НачалоПериода Тогда
			ТекущаяСтрока.КонецПериода = СледующаяСтрока.КонецПериода;
			ПараметрыНачисленияПени.Удалить(Сч);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВТПараметрыНачисленияПениСтавки
	|ИЗ
	|	&ПараметрыНачисленияПени КАК ПараметрыНачисленияПени";
	Запрос.УстановитьПараметр("ПараметрыНачисленияПени", ПараметрыНачисленияПени);
	Запрос.Выполнить();
	
	Запрос.Текст = ПолучитьТекстЗапросаОпределенияЗадолженностиДляРасчетаПени();
	Запрос.Выполнить();
	
	Запрос.Текст = АР_ПроцедурыНачисленияПереопределяемый.ПолучитьТекстЗапросаОпределенияСроковОплатыДляРасчетаПени(Запрос, СписокДоговоровКонтрагента);
	Запрос.Выполнить();
	
	Запрос.Текст = ПолучитьТекстЗапросаПоНачислениюПени();
	
	ДанныеПоНачислениям = Запрос.Выполнить().Выгрузить();
	ДанныеПоНачислениям.Колонки.Добавить("Контрагент");
	ДанныеПоНачислениям.Колонки.Добавить("ДоговорКонтрагента");
	ДанныеПоНачислениям.Колонки.Добавить("СчетРасчетов");
	
	Для каждого СтрокаТаб Из ДанныеПоНачислениям Цикл
		Если ТипЗнч(СтрокаТаб.СтавкаНДС) = Тип("ПеречислениеСсылка.ВидыСтавокНДС") Тогда
			СтрокаТаб.СтавкаНДС = Перечисления.СтавкиНДС.СтавкаНДС(СтрокаТаб.СтавкаНДС, Дата);
		КонецЕсли;
	КонецЦикла;
	
	АР_ПроцедурыНачисленияПереопределяемый.ПереименоватьКолонкиРезультатаПоНачислениюПени(ДанныеПоНачислениям);
	
	Возврат ДанныеПоНачислениям;
	
КонецФункции

Функция ПоДоговорамЕстьОбособленныйУчетПени(Объект, Знач РасшифровкаПлатежа = Неопределено, ДоговорКонтрагента = Неопределено) Экспорт
	
	ЕстьОбособленныйУчетПени = Ложь;
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет")
		ИЛИ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета")
		ИЛИ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
		ИЛИ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда 
		
		Если РасшифровкаПлатежа = Неопределено Тогда
			РасшифровкаПлатежа = Объект.РасшифровкаПлатежа;
		КонецЕсли;
		
		ТаблицаДоговоров = РасшифровкаПлатежа.Выгрузить(, "ДоговорКонтрагента");
		ТаблицаДоговоров.Свернуть("ДоговорКонтрагента");
		Для Каждого СтрокаТаб Из ТаблицаДоговоров Цикл
			ПараметрыНачисленияПени = ПолучитьПараметрыНачисленияПени(СтрокаТаб.ДоговорКонтрагента, Объект.Дата);
			ОбособленныйУчетПени = ?(ПараметрыНачисленияПени = Неопределено, Ложь, ПараметрыНачисленияПени.СпособПогашенияПени = ПредопределенноеЗначение("Перечисление.АР_СпособыПогашенияПени.ВестиОбособленныйУчетПени"));
			Если ОбособленныйУчетПени Тогда
				ЕстьОбособленныйУчетПени = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ПараметрыНачисленияПени = ПолучитьПараметрыНачисленияПени(ДоговорКонтрагента, Объект.Дата);
		ОбособленныйУчетПени = ?(ПараметрыНачисленияПени = Неопределено, Ложь, ПараметрыНачисленияПени.СпособПогашенияПени = ПредопределенноеЗначение("Перечисление.АР_СпособыПогашенияПени.ВестиОбособленныйУчетПени"));
		Если ОбособленныйУчетПени Тогда
			ЕстьОбособленныйУчетПени = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЕстьОбособленныйУчетПени;

КонецФункции

Функция ПоДоговорамНеВедетсяОбособленныйУчетПени(Объект, Знач РасшифровкаПлатежа = Неопределено, ДоговорКонтрагента = Неопределено) Экспорт
	
	НеВедетсяОбособленныйУчетПени = Ложь;
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет")
		ИЛИ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета")
		ИЛИ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
		ИЛИ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда 
		
		Если РасшифровкаПлатежа = Неопределено Тогда
			РасшифровкаПлатежа = Объект.РасшифровкаПлатежа;
		КонецЕсли;
		
		ТаблицаДоговоров = РасшифровкаПлатежа.Выгрузить(, "ДоговорКонтрагента");
		ТаблицаДоговоров.Свернуть("ДоговорКонтрагента");
		Для Каждого СтрокаТаб Из ТаблицаДоговоров Цикл
			ПараметрыНачисленияПени = ПолучитьПараметрыНачисленияПени(СтрокаТаб.ДоговорКонтрагента, Объект.Дата);
			ОбособленныйУчетПени = ?(ПараметрыНачисленияПени = Неопределено, Ложь, ПараметрыНачисленияПени.СпособПогашенияПени = ПредопределенноеЗначение("Перечисление.АР_СпособыПогашенияПени.ВестиОбособленныйУчетПени"));
			Если НЕ ПараметрыНачисленияПени = Неопределено И НЕ ОбособленныйУчетПени Тогда
				НеВедетсяОбособленныйУчетПени = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ПараметрыНачисленияПени = ПолучитьПараметрыНачисленияПени(ДоговорКонтрагента, Объект.Дата);
		ОбособленныйУчетПени = ?(ПараметрыНачисленияПени = Неопределено, Ложь, ПараметрыНачисленияПени.СпособПогашенияПени = ПредопределенноеЗначение("Перечисление.АР_СпособыПогашенияПени.ВестиОбособленныйУчетПени"));
		Если НЕ ПараметрыНачисленияПени = Неопределено И НЕ ОбособленныйУчетПени Тогда
			НеВедетсяОбособленныйУчетПени = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НеВедетсяОбособленныйУчетПени;

КонецФункции

Функция ПоДоговоруЕстьОбособленныйУчетПени(ДоговорКонтрагента, Период) Экспорт
	
	ЕстьОбособленныйУчетПени = Ложь;
		
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ПараметрыНачисленияПени = ПолучитьПараметрыНачисленияПени(ДоговорКонтрагента, Период);
		ОбособленныйУчетПени = ?(ПараметрыНачисленияПени = Неопределено, Ложь, ПараметрыНачисленияПени.СпособПогашенияПени = Перечисления.АР_СпособыПогашенияПени.ВестиОбособленныйУчетПени);
		Если ОбособленныйУчетПени Тогда
			ЕстьОбособленныйУчетПени = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЕстьОбособленныйУчетПени;

КонецФункции

// Процедура предназначена для расчета суммы начисления по известному периоду начисления и ставке
// Параметры:
//		Стр - строка таблицы значений с данными для расчета. В строке указывается период начисления и ставка
Процедура РассчитатьСтрокуНачисления(СтрокаТаблицы, НачалоПериода = Неопределено, КонецПериода = Неопределено) Экспорт
	
	Если НачалоПериода = Неопределено Тогда
		НачалоПериода = Макс(СтрокаТаблицы.ДатаНачалаАренды, СтрокаТаблицы.ПериодНачало);
	КонецЕсли;
	Если КонецПериода = Неопределено Тогда
		КонецПериода = Мин(СтрокаТаблицы.ДатаОкончанияАренды, СтрокаТаблицы.ПериодКонец);
	КонецЕсли;
	
	СтрокаТаблицы.КоличествоДней = (НачалоДня(КонецПериода) - НачалоДня(НачалоПериода)) / 86400 + 1; //количество дней;
	ПериодНачисления = СтрокаТаблицы.СпособНачисления.ПериодНачисления;
	
	Коэффициент = АР_ОбщиеПроцедуры.ПолучитьКоэффициентПересчетаДней(НачалоПериода, КонецПериода, ПериодНачисления);
	
	Результат = СтрокаТаблицы.СтавкаСпособаНачисления * СтрокаТаблицы.Количество * Коэффициент;
	СтрокаТаблицы.Сумма = Окр(Результат, 2);
	// СтрокаТаблицы.Цена = СтрокаТаблицы.Сумма / СтрокаТаблицы.Количество; //СВД 
	
	Если СтрокаТаблицы.Цена=0 Тогда
		Сообщить("Что-то не так!!!")
	КонецЕсли;
	
	Если Коэффициент<1 и СтрокаТаблицы.Цена>0 Тогда		
		СтрокаТаблицы.Количество = СтрокаТаблицы.Сумма/СтрокаТаблицы.Цена;
	Иначе
		СтрокаТаблицы.Цена = СтрокаТаблицы.Сумма / СтрокаТаблицы.Количество;
	КонецЕсли;
		
КонецПроцедуры

// Процедура предназначена для расчета суммы начисления по известному периоду начисления и ставке
// Параметры:
//		ДанныеУчета - таблица значений с данными для расчета. В строках таблицы указывается период начисления и ставка
Процедура РассчитатьСуммуНачисления(ДанныеУчета) Экспорт
	
	Для Каждого Стр Из ДанныеУчета Цикл
		РассчитатьСтрокуНачисления(Стр);
	КонецЦикла;		
	Кол = ДанныеУчета.Количество();
	Для К = 1 по Кол Цикл
		Стр = ДанныеУчета[Кол - К];
		Если Стр.КоличествоДней = 0 Тогда
			ДанныеУчета.Удалить(ДанныеУчета.Индекс(Стр));	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура предназначена для автоматического заполнения счета на аренду и начисления арендной платы в случае заполнения не по счетам услугами
// постоянной части оплаты
// Параметры:
//		Объект - документ-объект
//		ИмяТабличнойЧасти - имя табличной части, которая будет заполнена данными из выборки
Процедура ПолучитьПостояннуюЧастьОплаты(Объект, ИмяТабличнойЧасти, СкрыватьСообщенияОбНДС = Ложь) Экспорт
	
	ДанныеУчета = Новый ТаблицаЗначений;
	ДанныеУчета.Колонки.Добавить("Номенклатура");
	ДанныеУчета.Колонки.Добавить("ОбъектАренды");
	ДанныеУчета.Колонки.Добавить("ПериодАренды");
	ДанныеУчета.Колонки.Добавить("ПериодНачало");
	ДанныеУчета.Колонки.Добавить("ПериодКонец");
	ДанныеУчета.Колонки.Добавить("ДатаНачалаАренды");
	ДанныеУчета.Колонки.Добавить("ДатаОкончанияАренды");
	ДанныеУчета.Колонки.Добавить("СтавкаСпособаНачисления");
	ДанныеУчета.Колонки.Добавить("Цена");
	ДанныеУчета.Колонки.Добавить("Количество");
	ДанныеУчета.Колонки.Добавить("Коэффициент");
	ДанныеУчета.Колонки.Добавить("СпособНачисления");
	ДанныеУчета.Колонки.Добавить("СтавкаНДС");
	ДанныеУчета.Колонки.Добавить("Сумма");
	ДанныеУчета.Колонки.Добавить("КоличествоДней");
	ДанныеУчета.Колонки.Добавить("Валюта");
	ДанныеУчета.Колонки.Добавить("Курс");
	ДанныеУчета.Колонки.Добавить("Кратность");
	ДанныеУчета.Колонки.Добавить("ДокументБезНДС");
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НачалоПериода", Объект.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", Объект.ОкончаниеПериода);
	Запрос.УстановитьПараметр("Договор", Объект.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ВАренде", Перечисления.АР_СтатусыОбъектовАренды.ВАренде);
	Запрос.УстановитьПараметр("МоментВремени", Объект.МоментВремени());
	Запрос.УстановитьПараметр("ДатаСреза", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаКурса", КонецДня(Объект.ДатаКурса));
	
	БезНДС = Ложь;
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	ПрименяетсяОсвобождениеОтУплатыНДС = УчетнаяПолитика.ПрименяетсяОсвобождениеОтУплатыНДС(Объект.Организация, Объект.Дата);
	Если НЕ ПлательщикНДС ИЛИ ПрименяетсяОсвобождениеОтУплатыНДС Тогда
		БезНДС = Истина;
	КонецЕсли;
	Запрос.УстановитьПараметр("БезНДС", БезНДС);
	
	НоваяСхемаНДС = ПолучитьФункциональнуюОпцию("АР_ИспользоватьСхемуОпределенияСтавокНДСПоАрендеНаОсновеДоговора");
	Запрос.УстановитьПараметр("НоваяСхемаНДС", НоваяСхемаНДС);
	
	Запрос.Текст = ПолучитьТекстЗапросаПоНачислениюПостояннойЧасти();
				
	ВыборкаУслуг = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаУслуг.Следующий() Цикл
		//обход по услугам
		ВыборкаОбъектов = ВыборкаУслуг.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаОбъектов.Следующий() Цикл
			//обход по объектам аренды
			ВыборкаДанных = ВыборкаОбъектов.Выбрать();
			
			КоличествоПериодов = ВыборкаДанных.Количество();
			КоличествоОбработанныхПериодов = 0;
			
			Пока ВыборкаДанных.Следующий() Цикл
				//обход по периодам изменения параметров начисления арендной платы
				
				Если ВыборкаДанных.ПериодКонец <= ВыборкаДанных.ДатаНачалаАренды Тогда // Объект сдан не с начала периода
					КоличествоПериодов = КоличествоПериодов - 1;
					Продолжить;
				КонецЕсли;
				
				Если КоличествоОбработанныхПериодов = 0
					И Не ЗначениеЗаполнено(ВыборкаДанных.СпособНачисления) Тогда
					ТекстСообщения = "Для объекта аренды """ + ВыборкаДанных.ОбъектАренды + """ по услуге """ + ВыборкаДанных.Номенклатура 
					+ """ на дату " + Формат(ВыборкаДанных.ПериодНачало, "ДФ=dd.MM.yyyy") + " не задана ставка!";
					АР_ОбщиеПроцедурыПереопределяемый.СообщениеПользователю(ТекстСообщения);
				КонецЕсли;
				
				Если КоличествоОбработанныхПериодов>0 Тогда
					ДанныеУчета[ДанныеУчета.Количество()-1].ПериодКонец = НачалоДня(ВыборкаДанных.ПериодНачало-1);	
				КонецЕсли;
				
				Стр = ДанныеУчета.Добавить();
				ЗаполнитьЗначенияСвойств(Стр,ВыборкаДанных);
				Если ТипЗнч(ВыборкаДанных.СтавкаНДС) = Тип("ПеречислениеСсылка.ВидыСтавокНДС") Тогда
					Стр.СтавкаНДС = Перечисления.СтавкиНДС.СтавкаНДС(ВыборкаДанных.СтавкаНДС, Объект.Дата);
				ИначеЕсли Не ЗначениеЗаполнено(ВыборкаДанных.СтавкаНДС) Тогда
					Стр.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
				КонецЕсли;
				
				Если (ТипЗнч(Стр.количество)=тип("null")) или (Стр.количество=0) тогда
					Стр.количество=1;	
				конецЕсли;
				
				КоличествоОбработанныхПериодов = КоличествоОбработанныхПериодов+1;
				Если КоличествоОбработанныхПериодов = КоличествоПериодов Тогда
					Стр.ПериодКонец = Мин(ВыборкаДанных.ДатаОкончанияАренды,Объект.ОкончаниеПериода);
				КонецЕсли;
				
			КонецЦикла;	
			
		КонецЦикла;
		
	КонецЦикла;
	
	//необходимо разбить все периоды по периодам договора или периодам способа начисления
	НомерСтроки = 0;
	Пока НомерСтроки < ДанныеУчета.Количество() Цикл
		СтрокаТаб = ДанныеУчета[НомерСтроки];
		Если Объект.ДоговорКонтрагента.АР_ВестиВзаиморасчетыПоПериодам Тогда
			Периодичность = Объект.ДоговорКонтрагента.АР_Периодичность;
		Иначе
			Периодичность = СтрокаТаб.СпособНачисления.ПериодНачисления;
			Если Не ЗначениеЗаполнено(Периодичность) Тогда
				Периодичность = Константы.АР_ПериодНачисленияАренднойПлаты.Получить();
			КонецЕсли;
		КонецЕсли;
		СтрокаТаб.ПериодАренды = НачалоПериода(СтрокаТаб.ПериодНачало, Периодичность);
		
		// Если периодичность больше месяца, то разобъем по месяцам
		// кроме случа Периодичность = Год и период начисления - календарный год или несколько
		Если Периодичность = Перечисления.Периодичность.Год
			И СтрокаТаб.ПериодНачало = НачалоГода(СтрокаТаб.ПериодНачало)
			И КонецДня(СтрокаТаб.ПериодКонец) = КонецГода(СтрокаТаб.ПериодКонец) Тогда
		ИначеЕсли (Периодичность = Перечисления.Периодичность.Год ИЛИ Периодичность = Перечисления.Периодичность.Полугодие)
			И СтрокаТаб.ПериодНачало = НачалоПериода(СтрокаТаб.ПериодНачало, Перечисления.Периодичность.Полугодие)
			И КонецДня(СтрокаТаб.ПериодКонец) = КонецПериода(СтрокаТаб.ПериодКонец, Перечисления.Периодичность.Полугодие) Тогда
			Периодичность = Перечисления.Периодичность.Полугодие;
		ИначеЕсли (Периодичность = Перечисления.Периодичность.Год ИЛИ Периодичность = Перечисления.Периодичность.Полугодие ИЛИ Периодичность = Перечисления.Периодичность.Квартал)
			И СтрокаТаб.ПериодНачало = НачалоПериода(СтрокаТаб.ПериодНачало, Перечисления.Периодичность.Квартал)
			И КонецДня(СтрокаТаб.ПериодКонец) = КонецПериода(СтрокаТаб.ПериодКонец, Перечисления.Периодичность.Квартал) Тогда
			Периодичность = Перечисления.Периодичность.Квартал;
		ИначеЕсли Не (Периодичность = Перечисления.Периодичность.День ИЛИ Периодичность = Перечисления.Периодичность.Неделя) Тогда
			Периодичность = Перечисления.Периодичность.Месяц;
		КонецЕсли;
		
		// Если период разбит ДС, но ставка не изменилась, то строки свернем
		Если НомерСтроки > 0 Тогда
			ПредыдущаяСтрока = ДанныеУчета[НомерСтроки-1];
			Если СтрокаТаб.ОбъектАренды = ПредыдущаяСтрока.ОбъектАренды
				И СтрокаТаб.Номенклатура = ПредыдущаяСтрока.Номенклатура
				И СтрокаТаб.СтавкаСпособаНачисления = ПредыдущаяСтрока.СтавкаСпособаНачисления
				И СтрокаТаб.Количество = ПредыдущаяСтрока.Количество
				И НачалоПериода(СтрокаТаб.ПериодНачало, Периодичность) = НачалоПериода(ПредыдущаяСтрока.ПериодНачало, Периодичность) Тогда
				ПредыдущаяСтрока.ПериодКонец = СтрокаТаб.ПериодКонец;
				ДанныеУчета.Удалить(НомерСтроки);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если НачалоПериода(СтрокаТаб.ПериодНачало, Периодичность) < НачалоПериода(СтрокаТаб.ПериодКонец, Периодичность) Тогда
			НоваяСтрокаТаб = ДанныеУчета.Вставить(НомерСтроки + 1);
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТаб, СтрокаТаб);
			СтрокаТаб.ПериодКонец = КонецПериода(СтрокаТаб.ПериодНачало, Периодичность);
			НоваяСтрокаТаб.ПериодНачало = КонецПериода(СтрокаТаб.ПериодНачало, Периодичность) + 1;
		КонецЕсли;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	АР_ПроцедурыНачисления.РассчитатьСуммуНачисления(ДанныеУчета);	
	
	УстановитьЦенуПоСпециальномуКурсу(Объект, ДанныеУчета);
	
	ДокументБезНДС = Объект.ДокументБезНДС;
	
	УстановитьПризнакДокументБезНДС(Объект, ИмяТабличнойЧасти, ДанныеУчета);
	
	Если Объект.ДоговорКонтрагента.АР_ВестиВзаиморасчетыПоПериодам Тогда
		ДанныеУчета.Свернуть("Номенклатура,ОбъектАренды,Цена,СтавкаСпособаНачисления,СпособНачисления,Количество,СтавкаНДС,Коэффициент, ПериодАренды","Сумма,КоличествоДней");
	Иначе
		ДанныеУчета.Свернуть("Номенклатура,ОбъектАренды,Цена,СтавкаСпособаНачисления,СпособНачисления,Количество,СтавкаНДС,Коэффициент","Сумма,КоличествоДней");
	КонецЕсли;
	ДанныеУчета.ЗаполнитьЗначения(1, "Коэффициент");
	
	СуммаВключаетНДС = Объект.СуммаВключаетНДС;
	
	УстановитьПризнакВключенияНДСВСтоимость(Объект, ИмяТабличнойЧасти, ДанныеУчета);
	
	Если НЕ СуммаВключаетНДС = Объект.СуммаВключаетНДС Тогда
		СтарыйПризнакНДССтрока = ?(СуммаВключаетНДС, "НДС в сумме", "НДС сверху");
		НовыйПризнакНДССтрока = ?(Объект.ДокументБезНДС, "Документ без НДС", ?(Объект.СуммаВключаетНДС, "НДС в сумме", "НДС сверху"));
		// пересчитаем сумму НДС по строкам, рассчитанным с другим принаком НДС
		БылПересчет = Ложь;
		Для каждого СтрокаТЧ Из Объект[ИмяТабличнойЧасти] Цикл
			СтрокаТЧ.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(СтрокаТЧ.Сумма, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС));
			БылПересчет = Истина;
		КонецЦикла;
		Если БылПересчет И НЕ СкрыватьСообщенияОбНДС Тогда
			Сообщить("Вариант учета НДС изменен на """ + НовыйПризнакНДССтрока + """, в соответствии с условиями договора");
		КонецЕсли;
	ИначеЕсли НЕ ДокументБезНДС = Объект.ДокументБезНДС Тогда
		НовыйПризнакНДССтрока = ?(Объект.ДокументБезНДС, "Документ без НДС", ?(Объект.СуммаВключаетНДС, "НДС в сумме", "НДС сверху"));
		БылПересчет = Ложь;
		Для каждого СтрокаТЧ Из Объект[ИмяТабличнойЧасти] Цикл
			Если Объект.ДокументБезНДС Тогда
				СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			КонецЕсли;
			СтрокаТЧ.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(СтрокаТЧ.Сумма, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС));
			БылПересчет = Истина;
		КонецЦикла;
		Если БылПересчет И НЕ СкрыватьСообщенияОбНДС Тогда
			Сообщить("Вариант учета НДС изменен на """ + НовыйПризнакНДССтрока + """, в соответствии с условиями договора");
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.АР_НачислениеАренднойПлаты") Тогда
		ДанныеУчета = АР_ПроцедурыНачисления.РазбитьСуммуПоСобственникамУчета(Объект, ДанныеУчета);
	КонецЕсли;
	
	УстановитьЦенуПоСтавкеДляГраничныхУсловий(Объект, ДанныеУчета);
	
	АР_ПроцедурыНачисленияПереопределяемый.ПереименоватьКолонкиРезультатаПоНачислениюАренды(ДанныеУчета);
	
	ЗаполнитьДокументДаннымиНачисленияАрендыПостояннаяЧасть(Объект, ИмяТабличнойЧасти, ДанныеУчета);
	
КонецПроцедуры

// Процедура предназначена для автоматического заполнения счета на аренду и начисления арендной платы в случае заполнения не по счетам услугами
// переменной части оплаты
// Параметры:
//		Объект - документ-объект
//		ИмяТабличнойЧасти - имя табличной части, которая будет заполнена данными из выборки
Процедура ПолучитьПеременнуюЧастьОплаты(Объект, ИмяТабличнойЧасти, ОпределятьСтавкуНДСПоДатеДокумента = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачалоПериода", Объект.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", Объект.ОкончаниеПериода);
	Запрос.УстановитьПараметр("УчитыватьПериодичность", Объект.ДоговорКонтрагента.АР_ВестиВзаиморасчетыПоПериодам);
	Запрос.УстановитьПараметр("Договор", Объект.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("МоментВремени", Объект.МоментВремени());
	Запрос.УстановитьПараметр("ДатаСреза", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("ВАренде", Перечисления.АР_СтатусыОбъектовАренды.ВАренде);
	
	БезНДС = Ложь;
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	ПрименяетсяОсвобождениеОтУплатыНДС = УчетнаяПолитика.ПрименяетсяОсвобождениеОтУплатыНДС(Объект.Организация, Объект.Дата);
	Если НЕ ПлательщикНДС ИЛИ ПрименяетсяОсвобождениеОтУплатыНДС Тогда
		БезНДС = Истина;
	КонецЕсли;
	Запрос.УстановитьПараметр("БезНДС", БезНДС);
	
	НоваяСхемаНДС = ПолучитьФункциональнуюОпцию("АР_ИспользоватьСхемуОпределенияСтавокНДСПоАрендеНаОсновеДоговора");
	Запрос.УстановитьПараметр("НоваяСхемаНДС", НоваяСхемаНДС);
	
	АР_ПроцедурыНачисленияПереопределяемый.УстановитьНачислениеПоТарифицируемымУслугамКакВременнуюТаблицу(Запрос);
	Запрос.Текст = ПолучитьТекстЗапросаПоНачислениюПеременнойЧасти();
	
	ДанныеУчета = Запрос.Выполнить().Выгрузить();
	
	ДанныеУчета.Колонки.Добавить("Коэффициент");
	ДанныеУчета.ЗаполнитьЗначения(1,"Коэффициент");
	ДанныеУчета.Колонки.Добавить("ПериодАренды");

	Для Каждого СтрокаТаб Из ДанныеУчета Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаб.СпособНачисления) Тогда
			ТекстСообщения = "Для объекта аренды """ + СтрокаТаб.ОбъектАренды + """ по услуге """ + СтрокаТаб.Номенклатура + """ на дату " + Формат(Объект.ОкончаниеПериода, "ДФ=dd.MM.yyyy") + " не задана ставка!";
			АР_ОбщиеПроцедурыПереопределяемый.СообщениеПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(СтрокаТаб.СтавкаНДС) = Тип("ПеречислениеСсылка.ВидыСтавокНДС") Тогда
			СтрокаТаб.СтавкаНДС = Перечисления.СтавкиНДС.СтавкаНДС(СтрокаТаб.СтавкаНДС, Объект.Дата);
		КонецЕсли;
	КонецЦикла;
	
	УстановитьЦенуПоСпециальномуКурсу(Объект, ДанныеУчета);
	
	Для Каждого СтрокаТаб Из ДанныеУчета Цикл
		Если Объект.ДоговорКонтрагента.АР_ВестиВзаиморасчетыПоПериодам Тогда
			СтрокаТаб.ПериодАренды = НачалоПериода(Объект.НачалоПериода, Объект.ДоговорКонтрагента.АР_Периодичность);
		Иначе
			СтрокаТаб.ПериодАренды = Объект.НачалоПериода;			
		КонецЕсли;
		СтрокаТаб.Цена = ?(СтрокаТаб.Количество = 0, СтрокаТаб.Цена, СтрокаТаб.Сумма / СтрокаТаб.Количество);
		Количество = ?(СтрокаТаб.Количество = 0, 1, СтрокаТаб.Количество);
		Если СтрокаТаб.Валюта = Объект.ВалютаДокумента 
			И Окр(СтрокаТаб.СтавкаСпособаНачисления * Количество, 2) = СтрокаТаб.Сумма Тогда
			СтрокаТаб.Цена = СтрокаТаб.СтавкаСпособаНачисления;
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.АР_НачислениеАренднойПлаты") Тогда
		ДанныеУчета = АР_ПроцедурыНачисления.РазбитьСуммуПоСобственникамУчета(Объект, ДанныеУчета);
	КонецЕсли;

	АР_ПроцедурыНачисленияПереопределяемый.ПересчитатьСтавкуПоПериодуДокумента(ДанныеУчета, Объект);
	
	АР_ПроцедурыНачисленияПереопределяемый.ПереименоватьКолонкиРезультатаПоНачислениюАренды(ДанныеУчета);
	
	ЗаполнитьДокументДаннымиНачисленияАрендыПеременнаяЧасть(Объект, ИмяТабличнойЧасти, ДанныеУчета);
	
КонецПроцедуры

Процедура УстановитьЦенуПоСтавкеДляГраничныхУсловий(Объект, ДанныеУчета)
	
	Если НЕ (ТипЗнч(Объект) = Тип("ДокументОбъект.АР_НачислениеАренднойПлаты") 
		ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.АР_СчетНаАренду"))Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Стр Из ДанныеУчета Цикл
		Если ЦенаДолжнаБытьРавнаСтавке(Объект, Стр.СпособНачисления, Стр.КоличествоДней) Тогда
			Стр.Цена = Стр.СтавкаСпособаНачисления;
		Иначе
			Стр.Цена = Стр.Сумма / Стр.Количество;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЦенаДолжнаБытьРавнаСтавке(Объект, СпособНачисления, КоличествоДней) Экспорт
 
	Если НЕ (ТипЗнч(Объект) = Тип("ДокументОбъект.АР_НачислениеАренднойПлаты") ИЛИ ТипЗнч(Объект) = Тип("ДокументСсылка.АР_НачислениеАренднойПлаты") 
		ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.АР_СчетНаАренду") ИЛИ ТипЗнч(Объект) = Тип("ДокументСсылка.АР_СчетНаАренду"))Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СпособНачисления) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПериодичностьСтавки = СпособНачисления.ПериодНачисления;
	Если Не ЗначениеЗаполнено(ПериодичностьСтавки) Тогда
		ПериодичностьСтавки = Константы.АР_ПериодНачисленияАренднойПлаты.Получить();
	КонецЕсли;
	// в случае взаиморасчетов по периоду строки разбиваются по периодам начисления договора
	// в случае если период документа день или произвольный, то на периодичность документа не смотрим
	Если Объект.ДоговорКонтрагента.АР_ВестиВзаиморасчетыПоПериодам 
		И НЕ Объект.ВидПериода = Перечисления.ДоступныеПериодыОтчета.День 
		И НЕ Объект.ВидПериода = Перечисления.ДоступныеПериодыОтчета.ПроизвольныйПериод Тогда
		
		ПериодичностьСтроки = Объект.ДоговорКонтрагента.АР_Периодичность;
		Если Не ЗначениеЗаполнено(ПериодичностьСтроки) Тогда
			ПериодичностьСтроки = Константы.АР_ПериодНачисленияАренднойПлаты.Получить();
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(Объект.ВидПериода) Тогда
			ПериодичностьСтроки = Объект.ВидПериода;
		Иначе
			ПериодичностьСтроки = Перечисления.Периодичность.Месяц;
		КонецЕсли;
		
	КонецЕсли;

	КоэффициентПересчетаПериодов = АР_ОбщиеПроцедуры.ПолучитьКоэффициентПересчетаПериодов(ПериодичностьСтавки, ПериодичностьСтроки);

	Если НЕ КоэффициентПересчетаПериодов = 1 Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	Возврат ((Объект.НачалоПериода = НачалоПериода(Объект.НачалоПериода, СпособНачисления.ПериодНачисления)
	   И КонецДня(Объект.ОкончаниеПериода) = КонецПериода(Объект.ОкончаниеПериода, СпособНачисления.ПериодНачисления)
	   И (Объект.ОкончаниеПериода - Объект.НачалоПериода) / 86400 + 1 = КоличествоДней) ИЛИ КоличествоДней = 0)
	   И Объект.ВалютаДокумента = СпособНачисления.Валюта; 
 
КонецФункции

// Возвращает курс валюты на дату
//
// Параметры:
//  Валюта     - Валюта (элемент справочника "Валюты")
//  ДатаКурса  - Дата, на которую следует получить курс
//
// Возвращаемое значение: 
//  Структура, содержащая:
//   Курс      - курс валюты
//   Кратность - кратность валюты
//
Функция ПолучитьКурсВалюты(Валюта, ДатаКурса, Договор) Экспорт

	Если НЕ ЗначениеЗаполнено(Договор) ИЛИ НЕ Договор.АР_АрендныйДоговор Тогда
		Возврат РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, ДатаКурса);
	КонецЕсли;
	
	Возврат АР_ПроцедурыНачисленияПереопределяемый.ПолучитьКурсВалюты(Валюта, ДатаКурса, Договор);

КонецФункции // ПолучитьКурсВалюты()

Процедура ЗаполнитьДанныеПоАгентскимУслугам(СтрокаТабличнойЧасти, Организация, Дата = '00010101') Экспорт
	
	АР_ПроцедурыНачисленияПереопределяемый.ЗаполнитьДанныеПоАгентскимУслугам(СтрокаТабличнойЧасти, Организация, Дата);
	
КонецПроцедуры

Процедура УстановитьЦенуПоСпециальномуКурсу(Объект, ДанныеНачисления) Экспорт
	
	// Установим цену по специальному курсу
	Для Каждого СтрокаТаб Из ДанныеНачисления Цикл
		Если ЗначениеЗаполнено(СтрокаТаб.Цена) И ЗначениеЗаполнено(Объект.ВалютаДокумента) И ЗначениеЗаполнено(СтрокаТаб.Валюта) Тогда
			Если СтрокаТаб.Валюта <> Объект.ВалютаДокумента Тогда
				СтруктураКурсаСтроки = ПолучитьКурсВалюты(СтрокаТаб.Валюта, Объект.ДатаКурса, Объект.ДоговорКонтрагента);
				Если Объект.ВалютаДокумента = Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
					КурсДокумента = Объект.КурсВзаиморасчетов;
					КратностьДокумента = Объект.КратностьВзаиморасчетов;
				Иначе
					СтруктураКурсаДокумента = АР_ОбщиеПроцедурыПереопределяемый.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.ДатаКурса);
					КурсДокумента = СтруктураКурсаДокумента.Курс;
					КратностьДокумента = СтруктураКурсаДокумента.Кратность;
				КонецЕсли;
				СтрокаТаб.Цена = АР_ОбщиеПроцедурыПереопределяемый.ПересчитатьИзВалютыВВалюту(СтрокаТаб.Цена,
							СтрокаТаб.Валюта, Объект.ВалютаДокумента,
							СтруктураКурсаСтроки.Курс, КурсДокумента,
							СтруктураКурсаСтроки.Кратность, КратностьДокумента);
				СтрокаТаб.Сумма = АР_ОбщиеПроцедурыПереопределяемый.ПересчитатьИзВалютыВВалюту(СтрокаТаб.Сумма,
							СтрокаТаб.Валюта, Объект.ВалютаДокумента,
							СтруктураКурсаСтроки.Курс, КурсДокумента,
							СтруктураКурсаСтроки.Кратность, КратностьДокумента);
			КонецЕсли;															
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ОпределитьДатуЗаключенияДоговораНаДату(Договор) Экспорт
	
	Если ТипЗнч(Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		СписокДоговоровКонтрагента = Новый Массив;
		СписокДоговоровКонтрагента.Добавить(Договор);
	Иначе
		СписокДоговоровКонтрагента = Договор;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДоговоровКонтрагента", СписокДоговоровКонтрагента);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МИНИМУМ(АР_СтатусыОбъектовАрендыСрезПоследних.ДатаНачалаАренды) КАК Период
	|ИЗ
	|	РегистрСведений.АР_СтатусыОбъектовАренды.СрезПоследних(, Договор В (&СписокДоговоровКонтрагента)) КАК АР_СтатусыОбъектовАрендыСрезПоследних";
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ДатаЗаключения = Выборка.Период;
		Возврат ?(ЗначениеЗаполнено(ДатаЗаключения), ДобавитьМесяц(ДатаЗаключения, -1), Дата(1,1,1));
	Иначе 
		Возврат	Дата(1,1,1);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТекстЗапросаПараметрыНачисленияПени(ДляСпискаДоговоров = Ложь)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(СрокиОплаты.Период) КАК Период,
	|	СрокиОплаты.ДоговорКонтрагента КАК ДоговорКонтрагента
	|ПОМЕСТИТЬ ВТПоследнийПериод
	|ИЗ
	|	РегистрСведений.АР_СрокиОплатыИПараметрыНачисленияПеней.СрезПоследних(
	|			&МоментВремени,
	|			ДоговорКонтрагента = &ДоговорКонтрагента
	|				И (СрокДействия >= НАЧАЛОПЕРИОДА(&МоментВремени, ДЕНЬ)
	|					ИЛИ СрокДействия = ДАТАВРЕМЯ(1, 1, 1))) КАК СрокиОплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	СрокиОплаты.ДоговорКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СрокиОплаты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	СрокиОплаты.НазначениеСрока КАК НазначениеСрока,
	|	СрокиОплаты.Услуга КАК Услуга,
	|	СрокиОплаты.СпособОпределенияСрокаОплаты КАК СпособОпределенияСрокаОплаты,
	|	СрокиОплаты.СрокОплаты КАК СрокОплаты,
	|	СрокиОплаты.ПериодСрокаОплаты КАК ПериодСрокаОплаты,
	|	СрокиОплаты.КоличествоДнейОтДатыСчетаАкта КАК КоличествоДнейОтДатыСчетаАкта,
	|	СрокиОплаты.УчитыватьТолькоРабочиеДниОтДатыСчетаАкта КАК УчитыватьТолькоРабочиеДниОтДатыСчетаАкта,
	|	СрокиОплаты.СпособНачисленияПени КАК СпособНачисленияПени,
	|	СрокиОплаты.СтавкаПени КАК СтавкаПени,
	|	СрокиОплаты.СпособПогашенияПени КАК СпособПогашенияПени,
	|	СрокиОплаты.КоличествоДнейОтсрочки КАК КоличествоДнейОтсрочки,
	|	СрокиОплаты.УчитыватьТолькоРабочиеДниОтсрочки КАК УчитыватьТолькоРабочиеДниОтсрочки,
	|	СрокиОплаты.УчитыватьТолькоРабочиеДниПриРасчетеПени КАК УчитыватьТолькоРабочиеДниПриРасчетеПени
	|ИЗ
	|	РегистрСведений.АР_СрокиОплатыИПараметрыНачисленияПеней.СрезПоследних(
	|			&МоментВремени,
	|			ДоговорКонтрагента = &ДоговорКонтрагента
	|				И (СрокДействия >= НАЧАЛОПЕРИОДА(&МоментВремени, ДЕНЬ)
	|					ИЛИ СрокДействия = ДАТАВРЕМЯ(1, 1, 1))) КАК СрокиОплаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоследнийПериод КАК ВТПоследнийПериод
	|		ПО СрокиОплаты.Период = ВТПоследнийПериод.Период
	|			И СрокиОплаты.ДоговорКонтрагента = ВТПоследнийПериод.ДоговорКонтрагента";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаОпределенияЗадолженностиДляРасчетаПени()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ РегистрВзаиморасчетов
	|ИЗ
	|	ВТРегистрВзаиморасчетов КАК ВТРегистрВзаиморасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ РегистрВзаиморасчетовОбороты
	|ИЗ
	|	ВТРегистрВзаиморасчетовОбороты КАК ВТРегистрВзаиморасчетовОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрВзаиморасчетов.ДоговорКонтрагента,
	|	РегистрВзаиморасчетов.УслугаАренды,
	|	РегистрВзаиморасчетов.ОбъектАренды,
	|	РегистрВзаиморасчетов.ПериодАренды,
	|	МАКСИМУМ(РегистрВзаиморасчетов.ДатаРасчетаПени) КАК ДатаРасчетаПени
	|ПОМЕСТИТЬ ВТПериодРасчетаПени
	|ИЗ
	|	РегистрВзаиморасчетов КАК РегистрВзаиморасчетов
	|ГДЕ
	|	РегистрВзаиморасчетов.Пени
	|	И РегистрВзаиморасчетов.ДоговорКонтрагента В (&СписокДоговоров)
	|	И РегистрВзаиморасчетов.ДатаРасчетаПени <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И РегистрВзаиморасчетов.Период < &МоментНачисленияПени
	|
	|СГРУППИРОВАТЬ ПО
	|	РегистрВзаиморасчетов.ДоговорКонтрагента,
	|	РегистрВзаиморасчетов.УслугаАренды,
	|	РегистрВзаиморасчетов.ОбъектАренды,
	|	РегистрВзаиморасчетов.ПериодАренды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрВзаиморасчетовОбороты.УслугаАренды,
	|	РегистрВзаиморасчетовОбороты.ОбъектАренды,
	|	РегистрВзаиморасчетовОбороты.СчетНаАренду,
	|	РегистрВзаиморасчетовОбороты.ПериодАренды,
	|	РегистрВзаиморасчетовОбороты.ДоговорКонтрагента,
	|	РегистрВзаиморасчетовОбороты.ДокументРасчетов,
	|	РегистрВзаиморасчетовОбороты.Сумма,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК Период
	|ПОМЕСТИТЬ ВТЗадолженностьОбороты1
	|ИЗ
	|	РегистрВзаиморасчетовОбороты КАК РегистрВзаиморасчетовОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РегистрВзаиморасчетов.УслугаАренды,
	|	РегистрВзаиморасчетов.ОбъектАренды,
	|	РегистрВзаиморасчетов.СчетНаАренду,
	|	РегистрВзаиморасчетов.ПериодАренды,
	|	РегистрВзаиморасчетов.ДоговорКонтрагента,
	|	РегистрВзаиморасчетов.ДокументРасчетов,
	|	-РегистрВзаиморасчетов.СуммаВзаиморасчетов,
	|	НАЧАЛОПЕРИОДА(ЕСТЬNULL(РегистрВзаиморасчетов.ДокументОплаты.Дата, РегистрВзаиморасчетов.Период), ДЕНЬ)
	|ИЗ
	|	РегистрВзаиморасчетов КАК РегистрВзаиморасчетов
	|ГДЕ
	|	РегистрВзаиморасчетов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И РегистрВзаиморасчетов.Сумма > 0
	|	И РегистрВзаиморасчетов.ДоговорКонтрагента В (&СписокДоговоров)
	|	И РегистрВзаиморасчетов.Период < &МоментНачисленияПени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТЗадолженностьОбороты.УслугаАренды,
	|	ВТЗадолженностьОбороты.ОбъектАренды,
	|	ВТЗадолженностьОбороты.СчетНаАренду,
	|	ВТЗадолженностьОбороты.ПериодАренды,
	|	ВТЗадолженностьОбороты.ДоговорКонтрагента,
	|	ВТЗадолженностьОбороты.ДокументРасчетов,
	|	СУММА(ВТЗадолженностьОбороты.Сумма) КАК Сумма,
	|	ВТЗадолженностьОбороты.Период
	|ПОМЕСТИТЬ ВТЗадолженностьОбороты
	|ИЗ
	|	ВТЗадолженностьОбороты1 КАК ВТЗадолженностьОбороты
	|СГРУППИРОВАТЬ ПО
	|	ВТЗадолженностьОбороты.Период,
	|	ВТЗадолженностьОбороты.УслугаАренды,
	|	ВТЗадолженностьОбороты.ОбъектАренды,
	|	ВТЗадолженностьОбороты.СчетНаАренду,
	|	ВТЗадолженностьОбороты.ПериодАренды,
	|	ВТЗадолженностьОбороты.ДоговорКонтрагента,
	|	ВТЗадолженностьОбороты.ДокументРасчетов
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТЗадолженностьОбороты.УслугаАренды,
	|	ВТЗадолженностьОбороты.ОбъектАренды,
	|	ВТЗадолженностьОбороты.СчетНаАренду,
	|	ВТЗадолженностьОбороты.ПериодАренды,
	|	ВТЗадолженностьОбороты.ДоговорКонтрагента,
	|	ВТЗадолженностьОбороты.ДокументРасчетов,
	|	ВТЗадолженностьОбороты.Период КАК ОкончаниеПериода,
	|	СУММА(ВТЗадолженностьОборотыКопия.Сумма) КАК Сумма,
	|	МАКСИМУМ(ВТЗадолженностьОборотыКопия.Период) КАК НачалоПериода
	|ПОМЕСТИТЬ ВТЗадолженностьОстатки
	|ИЗ
	|	ВТЗадолженностьОбороты КАК ВТЗадолженностьОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗадолженностьОбороты КАК ВТЗадолженностьОборотыКопия
	|		ПО ВТЗадолженностьОбороты.УслугаАренды = ВТЗадолженностьОборотыКопия.УслугаАренды
	|			И ВТЗадолженностьОбороты.ОбъектАренды = ВТЗадолженностьОборотыКопия.ОбъектАренды
	|			И ВТЗадолженностьОбороты.СчетНаАренду = ВТЗадолженностьОборотыКопия.СчетНаАренду
	|			И ВТЗадолженностьОбороты.ПериодАренды = ВТЗадолженностьОборотыКопия.ПериодАренды
	|			И ВТЗадолженностьОбороты.ДокументРасчетов = ВТЗадолженностьОборотыКопия.ДокументРасчетов
	|			И ВТЗадолженностьОбороты.Период > ВТЗадолженностьОборотыКопия.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТЗадолженностьОбороты.УслугаАренды,
	|	ВТЗадолженностьОбороты.ОбъектАренды,
	|	ВТЗадолженностьОбороты.СчетНаАренду,
	|	ВТЗадолженностьОбороты.ПериодАренды,
	|	ВТЗадолженностьОбороты.ДоговорКонтрагента,
	|	ВТЗадолженностьОбороты.ДокументРасчетов,
	|	ВТЗадолженностьОбороты.Период
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВТЗадолженностьОборотыКопия.Сумма) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТЗадолженностьОбороты.УслугаАренды,
	|	ВТЗадолженностьОбороты.ОбъектАренды,
	|	ВТЗадолженностьОбороты.СчетНаАренду,
	|	ВТЗадолженностьОбороты.ПериодАренды,
	|	ВТЗадолженностьОбороты.ДоговорКонтрагента,
	|	ВТЗадолженностьОбороты.ДокументРасчетов,
	|	&ДатаНачисленияПени,
	|	СУММА(ВТЗадолженностьОбороты.Сумма),
	|	МАКСИМУМ(ВТЗадолженностьОбороты.Период)
	|ИЗ
	|	ВТЗадолженностьОбороты КАК ВТЗадолженностьОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТЗадолженностьОбороты.УслугаАренды,
	|	ВТЗадолженностьОбороты.ОбъектАренды,
	|	ВТЗадолженностьОбороты.СчетНаАренду,
	|	ВТЗадолженностьОбороты.ПериодАренды,
	|	ВТЗадолженностьОбороты.ДоговорКонтрагента,
	|	ВТЗадолженностьОбороты.ДокументРасчетов
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВТЗадолженностьОбороты.Сумма) > 0 И
	|	МАКСИМУМ(ВТЗадолженностьОбороты.Период) < &ДатаНачисленияПени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТЗадолженностьОстатки.УслугаАренды,
	|	ВТЗадолженностьОстатки.ОбъектАренды,
	|	ВТЗадолженностьОстатки.СчетНаАренду,
	|	ВТЗадолженностьОстатки.ПериодАренды,
	|	ВТЗадолженностьОстатки.ДоговорКонтрагента,
	|	ВТЗадолженностьОстатки.ДокументРасчетов,
	|	ВЫБОР 
	|		КОГДА ВТЗадолженностьОстатки.НачалоПериода < ДобавитьКДате(ВТПараметрыНачисленияПени.НачалоПериода, День, -1)
	|			ТОГДА ДобавитьКДате(ВТПараметрыНачисленияПени.НачалоПериода, День, -1) 
	|		ИНАЧЕ ВТЗадолженностьОстатки.НачалоПериода 
	|	КОНЕЦ КАК НачалоПериода,
	|	ВЫБОР 
	|		КОГДА ВТЗадолженностьОстатки.ОкончаниеПериода > ДобавитьКДате(ВТПараметрыНачисленияПени.КонецПериода, День, -1) 
	|			ТОГДА ДобавитьКДате(ВТПараметрыНачисленияПени.КонецПериода, День, -1) 
	|		ИНАЧЕ ВТЗадолженностьОстатки.ОкончаниеПериода 
	|	КОНЕЦ КАК ОкончаниеПериода,
	|	ВТЗадолженностьОстатки.Сумма КАК Сумма,
	|	ВТПараметрыНачисленияПени.СтавкаПени КАК СтавкаПени
	|ПОМЕСТИТЬ ВТЗадолженностьИСтавка
	|ИЗ
	|	ВТЗадолженностьОстатки КАК ВТЗадолженностьОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПараметрыНачисленияПениСтавки КАК ВТПараметрыНачисленияПени
	|		ПО ВТЗадолженностьОстатки.ДоговорКонтрагента = ВТПараметрыНачисленияПени.ДоговорКонтрагента
	|			И ВТЗадолженностьОстатки.НачалоПериода <= ДобавитьКДате(ВТПараметрыНачисленияПени.КонецПериода, День, -1)
	|			И ВТЗадолженностьОстатки.ОкончаниеПериода >= ДобавитьКДате(ВТПараметрыНачисленияПени.НачалоПериода, День, -1)
	|			И (ВТЗадолженностьОстатки.УслугаАренды = ВТПараметрыНачисленияПени.Услуга
	|				ИЛИ ВТПараметрыНачисленияПени.Услуга = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И (ВТЗадолженностьОстатки.УслугаАренды = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|						ИЛИ НЕ ВТЗадолженностьОстатки.УслугаАренды В
	|									(ВЫБРАТЬ
	|										ВТПараметрыНачисленияПени.Услуга
	|									ИЗ
	|										ВТПараметрыНачисленияПениСтавки КАК ВТПараметрыНачисленияПени)
	|							И (ВТПараметрыНачисленияПени.НазначениеСрока = ЗНАЧЕНИЕ(Перечисление.АР_ВариантыНазначенияСрокаОплаты.Общий)
	|								ИЛИ ВТПараметрыНачисленияПени.НазначениеСрока = ЗНАЧЕНИЕ(Перечисление.АР_ВариантыНазначенияСрокаОплаты.ПостояннаяЧасть)
	|									И ВТЗадолженностьОстатки.УслугаАренды.АР_ПостояннаяЧастьОплаты
	|								ИЛИ ВТПараметрыНачисленияПени.НазначениеСрока = ЗНАЧЕНИЕ(Перечисление.АР_ВариантыНазначенияСрокаОплаты.ПеременнаяЧасть)
	|									И НЕ ВТЗадолженностьОстатки.УслугаАренды.АР_ПостояннаяЧастьОплаты)))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаПоНачислениюПени()
			
	ТекстЗапроса = 
	// Добавим кол-во дней от даты счета/акта
	"ВЫБРАТЬ
	|	Задолженность.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Задолженность.УслугаАренды КАК УслугаАренды,
	|	Задолженность.ОбъектАренды КАК ОбъектАренды,
	|	Задолженность.СчетНаАренду КАК СчетНаАренду,
	|	Задолженность.ПериодАренды КАК ПериодАренды,
	|	Задолженность.ДокументРасчетов КАК ДокументРасчетов,
	|	Задолженность.Сумма КАК Сумма,
	|	Задолженность.НачалоПериода КАК НачалоПериода,
	|	Задолженность.ОкончаниеПериода КАК ОкончаниеПериода,
	|	Задолженность.КоличествоДнейОтсрочки КАК КоличествоДнейОтсрочки,
	|	Задолженность.УчитыватьТолькоРабочиеДниОтсрочки КАК УчитыватьТолькоРабочиеДниОтсрочки,
	|	Задолженность.УчитыватьТолькоРабочиеДниПриРасчетеПени КАК УчитыватьТолькоРабочиеДниПриРасчетеПени,
	|	Задолженность.СпособНачисленияПени КАК СпособНачисленияПени,
	|	Задолженность.СтавкаПени КАК СтавкаПени,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА Задолженность.КоличествоДней = 0
	|				ТОГДА Задолженность.СрокОплаты
	|			ИНАЧЕ ВТКалендарьКопия.ДатаКалендаря
	|		КОНЕЦ) КАК СрокОплаты
	|ПОМЕСТИТЬ ВТЗадолженностьСрокОплаты
	|ИЗ
	|	ВТЗадолженность КАК Задолженность
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКалендарь КАК ВТКалендарь
	|		ПО Задолженность.СрокОплаты < ВТКалендарь.ДатаКалендаря
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКалендарь КАК ВТКалендарьКопия
	|		ПО (ВТКалендарь.ПорядковыйНомер + Задолженность.КоличествоДней - 1 = ВТКалендарьКопия.ПорядковыйНомер)
	|ГДЕ
	|	НЕ Задолженность.УчитыватьТолькоРабочиеДниОтДатыСчетаАкта
	|
	|СГРУППИРОВАТЬ ПО
	|	Задолженность.КоличествоДнейОтсрочки,
	|	Задолженность.УчитыватьТолькоРабочиеДниОтсрочки,
	|	Задолженность.УчитыватьТолькоРабочиеДниПриРасчетеПени,
	|	Задолженность.СпособНачисленияПени,
	|	Задолженность.СтавкаПени,
	|	Задолженность.ДоговорКонтрагента,
	|	Задолженность.ОбъектАренды,
	|	Задолженность.УслугаАренды,
	|	Задолженность.СчетНаАренду,
	|	Задолженность.ПериодАренды,
	|	Задолженность.ДокументРасчетов,
	|	Задолженность.Сумма,
	|	Задолженность.НачалоПериода,
	|	Задолженность.ОкончаниеПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Задолженность.ДоговорКонтрагента,
	|	Задолженность.УслугаАренды,
	|	Задолженность.ОбъектАренды,
	|	Задолженность.СчетНаАренду,
	|	Задолженность.ПериодАренды,
	|	Задолженность.ДокументРасчетов,
	|	Задолженность.Сумма,
	|	Задолженность.НачалоПериода,
	|	Задолженность.ОкончаниеПериода,
	|	Задолженность.КоличествоДнейОтсрочки,
	|	Задолженность.УчитыватьТолькоРабочиеДниОтсрочки,
	|	Задолженность.УчитыватьТолькоРабочиеДниПриРасчетеПени,
	|	Задолженность.СпособНачисленияПени,
	|	Задолженность.СтавкаПени,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА Задолженность.КоличествоДней = 0
	|				ТОГДА Задолженность.СрокОплаты
	|			ИНАЧЕ ВТКалендарьКопия.ДатаКалендаря
	|		КОНЕЦ)
	|ИЗ
	|	ВТЗадолженность КАК Задолженность
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКалендарьРаб КАК ВТКалендарь
	|		ПО Задолженность.СрокОплаты < ВТКалендарь.ДатаКалендаря
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКалендарьРаб КАК ВТКалендарьКопия
	|		ПО (ВТКалендарь.ПорядковыйНомер + Задолженность.КоличествоДней - 1 = ВТКалендарьКопия.ПорядковыйНомер)
	|ГДЕ
	|	Задолженность.УчитыватьТолькоРабочиеДниОтДатыСчетаАкта
	|
	|СГРУППИРОВАТЬ ПО
	|	Задолженность.КоличествоДнейОтсрочки,
	|	Задолженность.УчитыватьТолькоРабочиеДниОтсрочки,
	|	Задолженность.УчитыватьТолькоРабочиеДниПриРасчетеПени,
	|	Задолженность.СпособНачисленияПени,
	|	Задолженность.СтавкаПени,
	|	Задолженность.ДоговорКонтрагента,
	|	Задолженность.ОбъектАренды,
	|	Задолженность.УслугаАренды,
	|	Задолженность.СчетНаАренду,
	|	Задолженность.ПериодАренды,
	|	Задолженность.ДокументРасчетов,
	|	Задолженность.Сумма,
	|	Задолженность.НачалоПериода,
	|	Задолженность.ОкончаниеПериода"
	+ "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|"
	+
	// Сдвигаем срок оплаты на рабочий день
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &СрокОплатыВсегдаРабочийДень
	|			ТОГДА ВТПоискРабочейДаты.РабочиеДни
	|		ИНАЧЕ ВТПоискРабочейДаты.ВсеДни
	|	КОНЕЦ КАК СрокОплаты,
	|	Задолженность.ДоговорКонтрагента,
	|	Задолженность.УслугаАренды,
	|	Задолженность.ОбъектАренды,
	|	Задолженность.СчетНаАренду,
	|	Задолженность.ПериодАренды,
	|	Задолженность.ДокументРасчетов,
	|	Задолженность.ОкончаниеПериода,
	|	Задолженность.Сумма,
	|	Задолженность.КоличествоДнейОтсрочки КАК КоличествоДнейОтсрочки,
	|	Задолженность.УчитыватьТолькоРабочиеДниОтсрочки КАК УчитыватьТолькоРабочиеДниОтсрочки,
	|	Задолженность.УчитыватьТолькоРабочиеДниПриРасчетеПени КАК УчитыватьТолькоРабочиеДниПриРасчетеПени,
	|	Задолженность.СпособНачисленияПени,
	|	Задолженность.СтавкаПени,
	|	Задолженность.НачалоПериода
	|ПОМЕСТИТЬ ВТЗадолженностьРабДата
	|ИЗ
	|	ВТЗадолженностьСрокОплаты КАК Задолженность
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоискРабочейДаты КАК ВТПоискРабочейДаты
	|		ПО Задолженность.СрокОплаты = ВТПоискРабочейДаты.ВсеДни"
	+ "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|"
	+
	// Добавляем отсрочку
	"ВЫБРАТЬ
	|	Задолженность.ДоговорКонтрагента,
	|	Задолженность.УслугаАренды КАК УслугаАренды,
	|	Задолженность.ОбъектАренды КАК ОбъектАренды,
	|	Задолженность.СчетНаАренду КАК СчетНаАренду,
	|	Задолженность.ПериодАренды КАК ПериодАренды,
	|	Задолженность.ДокументРасчетов КАК ДокументРасчетов,
	|	Задолженность.Сумма КАК Сумма,
	|	Задолженность.СрокОплаты КАК СрокОплаты,
	|	Задолженность.НачалоПериода,
	|	Задолженность.ОкончаниеПериода,
	|	Задолженность.УчитыватьТолькоРабочиеДниПриРасчетеПени КАК УчитыватьТолькоРабочиеДниПриРасчетеПени,
	|	Задолженность.СпособНачисленияПени,
	|	Задолженность.СтавкаПени,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА Задолженность.КоличествоДнейОтсрочки = 0
	|				ТОГДА Задолженность.СрокОплаты
	|			ИНАЧЕ ВТКалендарьКопия.ДатаКалендаря
	|		КОНЕЦ) КАК СрокОплатыСОтсрочкой
	|ПОМЕСТИТЬ ВТЗадолженность2
	|ИЗ
	|	ВТЗадолженностьРабДата КАК Задолженность
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКалендарь КАК ВТКалендарь
	|		ПО Задолженность.СрокОплаты < ВТКалендарь.ДатаКалендаря
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКалендарь КАК ВТКалендарьКопия
	|		ПО (ВТКалендарь.ПорядковыйНомер + Задолженность.КоличествоДнейОтсрочки - 1 = ВТКалендарьКопия.ПорядковыйНомер)
	|ГДЕ
	|   НЕ Задолженность.УчитыватьТолькоРабочиеДниОтсрочки
	|
	|СГРУППИРОВАТЬ ПО
	|	Задолженность.УчитыватьТолькоРабочиеДниПриРасчетеПени,
	|	Задолженность.СпособНачисленияПени,
	|	Задолженность.СтавкаПени,
	|	Задолженность.ДоговорКонтрагента,
	|	Задолженность.ОбъектАренды,
	|	Задолженность.УслугаАренды,
	|	Задолженность.СчетНаАренду,
	|	Задолженность.ПериодАренды,
	|	Задолженность.ДокументРасчетов,
	|	Задолженность.СрокОплаты,
	|	Задолженность.Сумма,
	|	Задолженность.НачалоПериода,
	|	Задолженность.ОкончаниеПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Задолженность.ДоговорКонтрагента,
	|	Задолженность.УслугаАренды КАК УслугаАренды,
	|	Задолженность.ОбъектАренды КАК ОбъектАренды,
	|	Задолженность.СчетНаАренду КАК СчетНаАренду,
	|	Задолженность.ПериодАренды КАК ПериодАренды,
	|	Задолженность.ДокументРасчетов КАК ДокументРасчетов,
	|	Задолженность.Сумма КАК Сумма,
	|	Задолженность.СрокОплаты КАК СрокОплаты,
	|	Задолженность.НачалоПериода,
	|	Задолженность.ОкончаниеПериода,
	|	Задолженность.УчитыватьТолькоРабочиеДниПриРасчетеПени,
	|	Задолженность.СпособНачисленияПени,
	|	Задолженность.СтавкаПени,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА Задолженность.КоличествоДнейОтсрочки = 0
	|				ТОГДА Задолженность.СрокОплаты
	|			ИНАЧЕ ВТКалендарьКопия.ДатаКалендаря
	|		КОНЕЦ) КАК СрокОплатыСОтсрочкой
	|ИЗ
	|	ВТЗадолженностьРабДата КАК Задолженность
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКалендарьРаб КАК ВТКалендарь
	|		ПО Задолженность.СрокОплаты < ВТКалендарь.ДатаКалендаря
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКалендарьРаб КАК ВТКалендарьКопия
	|		ПО (ВТКалендарь.ПорядковыйНомер + Задолженность.КоличествоДнейОтсрочки - 1 = ВТКалендарьКопия.ПорядковыйНомер)
	|ГДЕ
	|   Задолженность.УчитыватьТолькоРабочиеДниОтсрочки
	|
	|СГРУППИРОВАТЬ ПО
	|	Задолженность.УчитыватьТолькоРабочиеДниПриРасчетеПени,
	|	Задолженность.СпособНачисленияПени,
	|	Задолженность.СтавкаПени,
	|	Задолженность.ДоговорКонтрагента,
	|	Задолженность.ОбъектАренды,
	|	Задолженность.УслугаАренды,
	|	Задолженность.СчетНаАренду,
	|	Задолженность.ПериодАренды,
	|	Задолженность.ДокументРасчетов,
	|	Задолженность.СрокОплаты,
	|	Задолженность.Сумма,
	|	Задолженность.НачалоПериода,
	|	Задолженность.ОкончаниеПериода"
	+ "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|"
	+
	// Считаем кол-во дней просрочки
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.ДоговорКонтрагента,
	|	ВложенныйЗапрос.УслугаАренды КАК УслугаАренды,
	|	ВложенныйЗапрос.ОбъектАренды КАК ОбъектАренды,
	|	ВложенныйЗапрос.СчетНаАренду КАК СчетНаАренду,
	|	ВложенныйЗапрос.ПериодАренды КАК ПериодАренды,
	|	ВложенныйЗапрос.ДокументРасчетов КАК ДокументРасчетов,
	|	ВложенныйЗапрос.Сумма КАК Сумма,
	|	ВложенныйЗапрос.СрокОплаты КАК СрокОплаты,
	|	ВложенныйЗапрос.УчитыватьТолькоРабочиеДниПриРасчетеПени,
	|	ВложенныйЗапрос.СпособНачисленияПени,
	|	ВложенныйЗапрос.СтавкаПени,
	|	ВЫБОР
	|		КОГДА МИНИМУМ(ВложенныйЗапрос.СрокОплатыСОтсрочкой) > ВложенныйЗапрос.НачалоПериода
	|			ТОГДА МИНИМУМ(ВложенныйЗапрос.СрокОплатыСОтсрочкой)
	|		ИНАЧЕ ВложенныйЗапрос.НачалоПериода
	|	КОНЕЦ КАК СрокОплатыСОтсрочкой,
	|	ВложенныйЗапрос.НачалоПериода,
	|	ВложенныйЗапрос.ОкончаниеПериода
	|ПОМЕСТИТЬ ВТЗадолженность3
	|ИЗ
	|	ВТЗадолженность2 КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.УчитыватьТолькоРабочиеДниПриРасчетеПени,
	|	ВложенныйЗапрос.СпособНачисленияПени,
	|	ВложенныйЗапрос.СтавкаПени,
	|	ВложенныйЗапрос.ДоговорКонтрагента,
	|	ВложенныйЗапрос.СчетНаАренду,
	|	ВложенныйЗапрос.СрокОплаты,
	|	ВложенныйЗапрос.ОбъектАренды,
	|	ВложенныйЗапрос.УслугаАренды,
	|	ВложенныйЗапрос.ПериодАренды,
	|	ВложенныйЗапрос.ДокументРасчетов,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.НачалоПериода,
	|	ВложенныйЗапрос.ОкончаниеПериода
	|
	|ИМЕЮЩИЕ
	|	МИНИМУМ(ВложенныйЗапрос.СрокОплатыСОтсрочкой) < ВложенныйЗапрос.ОкончаниеПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АР_СтатусыОбъектовАренды.Договор КАК ДоговорКонтрагента,
	|	МИНИМУМ(АР_СтатусыОбъектовАренды.Регистратор.ДатаЗаключенияДоговора) КАК ДатаЗаключенияДоговора
	|ПОМЕСТИТЬ ВТДатыЗаключенияДоговоров
	|ИЗ
	|	РегистрСведений.АР_СтатусыОбъектовАренды КАК АР_СтатусыОбъектовАренды
	|ГДЕ
	|	АР_СтатусыОбъектовАренды.Регистратор ССЫЛКА Документ.АР_ЗаключениеДоговораАренды
	|	И АР_СтатусыОбъектовАренды.Договор В (&СписокДоговоров)
	|
	|СГРУППИРОВАТЬ ПО
	|	АР_СтатусыОбъектовАренды.Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТЗадолженность3.ДоговорКонтрагента,
	|	ВТЗадолженность3.УслугаАренды,
	|	ВТЗадолженность3.ОбъектАренды,
	|	ВТЗадолженность3.СчетНаАренду,
	|	ВТЗадолженность3.ПериодАренды,
	|	ВТЗадолженность3.ДокументРасчетов,
	|	ВТЗадолженность3.УчитыватьТолькоРабочиеДниПриРасчетеПени,
	|	ВТЗадолженность3.СпособНачисленияПени,
	|	ВТЗадолженность3.СтавкаПени,
	|	ВТЗадолженность3.Сумма,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА ЕСТЬNULL(ВТПериодРасчетаПени.ДатаРасчетаПени, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) > ВТЗадолженность3.СрокОплатыСОтсрочкой
	|					ТОГДА ВТПериодРасчетаПени.ДатаРасчетаПени
	|				ИНАЧЕ ВТЗадолженность3.СрокОплатыСОтсрочкой
	|			КОНЕЦ < ВТДатыЗаключенияДоговоров.ДатаЗаключенияДоговора
	|			ТОГДА ВТДатыЗаключенияДоговоров.ДатаЗаключенияДоговора
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(ВТПериодРасчетаПени.ДатаРасчетаПени, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) > ВТЗадолженность3.СрокОплатыСОтсрочкой
	|					ТОГДА ВТПериодРасчетаПени.ДатаРасчетаПени
	|				ИНАЧЕ ВТЗадолженность3.СрокОплатыСОтсрочкой
	|			КОНЕЦ
	|	КОНЕЦ КАК СрокОплатыСОтсрочкой,
	|	ВТЗадолженность3.НачалоПериода,
	|	ВТЗадолженность3.ОкончаниеПериода
	|ПОМЕСТИТЬ ВТЗадолженность4
	|ИЗ
	|	ВТЗадолженность3 КАК ВТЗадолженность3
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыЗаключенияДоговоров КАК ВТДатыЗаключенияДоговоров
	|		ПО ВТЗадолженность3.ДоговорКонтрагента = ВТДатыЗаключенияДоговоров.ДоговорКонтрагента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодРасчетаПени КАК ВТПериодРасчетаПени
	|		ПО ВТЗадолженность3.УслугаАренды = ВТПериодРасчетаПени.УслугаАренды
	|			И ВТЗадолженность3.ДоговорКонтрагента = ВТПериодРасчетаПени.ДоговорКонтрагента
	|			И ВТЗадолженность3.ОбъектАренды = ВТПериодРасчетаПени.ОбъектАренды
	|			И ВТЗадолженность3.ПериодАренды = ВТПериодРасчетаПени.ПериодАренды
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ЕСТЬNULL(ВТПериодРасчетаПени.ДатаРасчетаПени, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) > ВТЗадолженность3.СрокОплатыСОтсрочкой
	|				ТОГДА ВТПериодРасчетаПени.ДатаРасчетаПени
	|			ИНАЧЕ ВТЗадолженность3.СрокОплатыСОтсрочкой
	|		КОНЕЦ < ВТЗадолженность3.ОкончаниеПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ДоговорКонтрагента,
	|	ВложенныйЗапрос.УслугаАренды,
	|	ВложенныйЗапрос.ОбъектАренды,
	|	ВложенныйЗапрос.СчетНаАренду,
	|	ВложенныйЗапрос.ПериодАренды,
	|	ВложенныйЗапрос.ДокументРасчетов,
	|	ВложенныйЗапрос.СрокОплатыСОтсрочкой КАК СрокОплатыСОтсрочкой,
	|	ВложенныйЗапрос.НачалоПериода,
	|	МАКСИМУМ(ВТКалендарь.ПорядковыйНомер) - МИНИМУМ(ВТКалендарь.ПорядковыйНомер) + 1 КАК Количество
	|ПОМЕСТИТЬ ВТКоличествоДнейПросрочки
	|ИЗ
	|	ВТЗадолженность4 КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКалендарь КАК ВТКалендарь
	|		ПО ВложенныйЗапрос.СрокОплатыСОтсрочкой < ВТКалендарь.ДатаКалендаря
	|			И (ВТКалендарь.ДатаКалендаря <= ВложенныйЗапрос.ОкончаниеПериода)
	|			И НЕ ВложенныйЗапрос.УчитыватьТолькоРабочиеДниПриРасчетеПени
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ДоговорКонтрагента,
	|	ВложенныйЗапрос.УслугаАренды,
	|	ВложенныйЗапрос.ОбъектАренды,
	|	ВложенныйЗапрос.СчетНаАренду,
	|	ВложенныйЗапрос.ПериодАренды,
	|	ВложенныйЗапрос.ДокументРасчетов,
	|	ВложенныйЗапрос.НачалоПериода,
	|	ВложенныйЗапрос.СрокОплатыСОтсрочкой
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ДоговорКонтрагента,
	|	ВложенныйЗапрос.УслугаАренды,
	|	ВложенныйЗапрос.ОбъектАренды,
	|	ВложенныйЗапрос.СчетНаАренду,
	|	ВложенныйЗапрос.ПериодАренды,
	|	ВложенныйЗапрос.ДокументРасчетов,
	|	ВложенныйЗапрос.СрокОплатыСОтсрочкой КАК СрокОплатыСОтсрочкой,
	|	ВложенныйЗапрос.НачалоПериода,
	|	МАКСИМУМ(ВТКалендарь.ПорядковыйНомер) - МИНИМУМ(ВТКалендарь.ПорядковыйНомер) + 1 КАК Количество
	|ИЗ
	|	ВТЗадолженность4 КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКалендарьРаб КАК ВТКалендарь
	|		ПО ВложенныйЗапрос.СрокОплатыСОтсрочкой < ВТКалендарь.ДатаКалендаря
	|			И (ВТКалендарь.ДатаКалендаря <= ВложенныйЗапрос.ОкончаниеПериода)
	|			И ВложенныйЗапрос.УчитыватьТолькоРабочиеДниПриРасчетеПени
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ДоговорКонтрагента,
	|	ВложенныйЗапрос.УслугаАренды,
	|	ВложенныйЗапрос.ОбъектАренды,
	|	ВложенныйЗапрос.СчетНаАренду,
	|	ВложенныйЗапрос.ПериодАренды,
	|	ВложенныйЗапрос.ДокументРасчетов,
	|	ВложенныйЗапрос.НачалоПериода,
	|	ВложенныйЗапрос.СрокОплатыСОтсрочкой
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ДоговорКонтрагента КАК Договор,
	|	ВложенныйЗапрос.УслугаАренды КАК Номенклатура,
	|	ВложенныйЗапрос.ОбъектАренды,
	|	ВложенныйЗапрос.СчетНаАренду,
	|	ВложенныйЗапрос.ПериодАренды,
	|	ВложенныйЗапрос.ДокументРасчетов,
	|	1 КАК Количество,
	|	1 КАК Коэффициент,
	|	СУММА(ВложенныйЗапрос.Сумма) КАК ДолгЗаПериод,
	|	ДобавитьКДате(ВложенныйЗапрос.СрокОплатыСОтсрочкой, День, 1) КАК СрокОплаты,
	|	ВТКоличествоДнейПросрочки.Количество КАК КоличествоДнейПросрочки,    
	|	ВложенныйЗапрос.СтавкаПени,
	|	ВЫБОР
	|		КОГДА &БезНДС
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|		ИНАЧЕ ЕСТЬNULL(ВложенныйЗапрос.УслугаАренды.ВидСтавкиНДС, ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС))
	|	КОНЕЦ КАК СтавкаНДС,
	|	СУММА(ВЫБОР
	|			КОГДА ВложенныйЗапрос.СпособНачисленияПени = ЗНАЧЕНИЕ(Перечисление.АР_СпособыНачисленияПени.ПропорциональноСуммеСроку)
	|				ТОГДА ВТКоличествоДнейПросрочки.Количество * ВложенныйЗапрос.СтавкаПени / 100 * ВложенныйЗапрос.Сумма
	|			ИНАЧЕ ВложенныйЗапрос.СтавкаПени
	|		КОНЕЦ) КАК Цена,
	|	СУММА(ВЫБОР
	|			КОГДА ВложенныйЗапрос.СпособНачисленияПени = ЗНАЧЕНИЕ(Перечисление.АР_СпособыНачисленияПени.ПропорциональноСуммеСроку)
	|				ТОГДА ВТКоличествоДнейПросрочки.Количество * ВложенныйЗапрос.СтавкаПени / 100 * ВложенныйЗапрос.Сумма
	|			ИНАЧЕ ВложенныйЗапрос.СтавкаПени
	|		КОНЕЦ) КАК Сумма
	|ИЗ
	|	ВТЗадолженность4 КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКоличествоДнейПросрочки КАК ВТКоличествоДнейПросрочки
	|		ПО ВложенныйЗапрос.СрокОплатыСОтсрочкой = ВТКоличествоДнейПросрочки.СрокОплатыСОтсрочкой
	|			И ВложенныйЗапрос.ДоговорКонтрагента = ВТКоличествоДнейПросрочки.ДоговорКонтрагента
	|			И ВложенныйЗапрос.УслугаАренды = ВТКоличествоДнейПросрочки.УслугаАренды
	|			И ВложенныйЗапрос.ОбъектАренды = ВТКоличествоДнейПросрочки.ОбъектАренды
	|			И ВложенныйЗапрос.СчетНаАренду = ВТКоличествоДнейПросрочки.СчетНаАренду
	|			И ВложенныйЗапрос.ПериодАренды = ВТКоличествоДнейПросрочки.ПериодАренды
	|			И ВложенныйЗапрос.ДокументРасчетов = ВТКоличествоДнейПросрочки.ДокументРасчетов
	|			И ВложенныйЗапрос.НачалоПериода = ВТКоличествоДнейПросрочки.НачалоПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ДокументРасчетов,   
	|	ВложенныйЗапрос.СтавкаПени,
	|	ВложенныйЗапрос.ДоговорКонтрагента,
	|	ВложенныйЗапрос.УслугаАренды,
	|	ВложенныйЗапрос.ОбъектАренды,
	|	ВложенныйЗапрос.СчетНаАренду,
	|	ВложенныйЗапрос.ПериодАренды,
	|	ВложенныйЗапрос.СрокОплатыСОтсрочкой,
	|	ВТКоличествоДнейПросрочки.Количество,
	|	ВЫБОР
	|		КОГДА &БезНДС
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|		ИНАЧЕ ЕСТЬNULL(ВложенныйЗапрос.УслугаАренды.ВидСтавкиНДС, ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС))
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	ВложенныйЗапрос.ОбъектАренды,
	|	ВложенныйЗапрос.СчетНаАренду,
	|	ВложенныйЗапрос.ПериодАренды,
	|	СрокОплаты";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаПоНачислениюПостояннойЧасти()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(АР_СтавкиСрезПоследних.Период, ДЕНЬ) КАК ДатаЗаписи,
	|	АР_СтавкиСрезПоследних.Услуга КАК Услуга,
	|	АР_СтавкиСрезПоследних.ОбъектАренды КАК ОбъектАренды,
	|	АР_СтавкиСрезПоследних.Ставка КАК Ставка,
	|	АР_СтавкиСрезПоследних.СпособНачисления КАК СпособНачисления,
	|	АР_СтавкиСрезПоследних.Площадь КАК Площадь,
	|	АР_СтавкиСрезПоследних.СтавкаНДС КАК СтавкаНДС,
	|	АР_СтавкиСрезПоследних.Регистратор.ДокументБезНДС КАК ДокументБезНДС
	|ПОМЕСТИТЬ ВТСтавки
	|ИЗ
	|	РегистрСведений.АР_Ставки.СрезПоследних(
	|			КОНЕЦПЕРИОДА(&НачалоПериода, ДЕНЬ),
	|			Договор = &Договор
	|				И (СрокДействия >= &НачалоПериода
	|					ИЛИ СрокДействия = ДАТАВРЕМЯ(1, 1, 1))) КАК АР_СтавкиСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(АР_Ставки.Период, ДЕНЬ),
	|	АР_Ставки.Услуга,
	|	АР_Ставки.ОбъектАренды,
	|	АР_Ставки.Ставка,
	|	АР_Ставки.СпособНачисления,
	|	АР_Ставки.Площадь,
	|	АР_Ставки.СтавкаНДС,
	|	ЛОЖЬ
	|ИЗ
	|	РегистрСведений.АР_Ставки КАК АР_Ставки
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(АР_Ставки.Период, ДЕНЬ) > &НачалоПериода
	|	И НАЧАЛОПЕРИОДА(АР_Ставки.Период, ДЕНЬ) <= &КонецПериода
	|	И АР_Ставки.Договор = &Договор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(ВложенныйЗапрос.СрокДействия, ДЕНЬ, 1),
	|	ВложенныйЗапрос.Услуга,
	|	ВложенныйЗапрос.ОбъектАренды,
	|	ПредыдущееЗначение.Ставка,
	|	ПредыдущееЗначение.СпособНачисления,
	|	ПредыдущееЗначение.Площадь,
	|	ПредыдущееЗначение.СтавкаНДС,
	|	ЛОЖЬ
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ПредыдущееЗначение.Период) КАК Период,
	|		АР_Ставки.Договор КАК Договор,
	|		АР_Ставки.СрокДействия КАК СрокДействия,
	|		АР_Ставки.Услуга КАК Услуга,
	|		АР_Ставки.ОбъектАренды КАК ОбъектАренды
	|	ИЗ
	|		РегистрСведений.АР_Ставки КАК АР_Ставки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АР_Ставки КАК ПредыдущееЗначение
	|			ПО АР_Ставки.Услуга = ПредыдущееЗначение.Услуга
	|				И АР_Ставки.ОбъектАренды = ПредыдущееЗначение.ОбъектАренды
	|				И АР_Ставки.Договор = ПредыдущееЗначение.Договор
	|				И АР_Ставки.СрокДействия > ПредыдущееЗначение.Период
	|				И (ПредыдущееЗначение.СрокДействия = ДАТАВРЕМЯ(1, 1, 1)
	|					ИЛИ ПредыдущееЗначение.СрокДействия > АР_Ставки.СрокДействия)
	|	ГДЕ
	|		АР_Ставки.СрокДействия > &НачалоПериода
	|		И АР_Ставки.СрокДействия <= &КонецПериода
	|		И АР_Ставки.СрокДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|		И АР_Ставки.Договор = &Договор
	|	
	|	СГРУППИРОВАТЬ ПО
	|		АР_Ставки.Договор,
	|		АР_Ставки.СрокДействия,
	|		АР_Ставки.Услуга,
	|		АР_Ставки.ОбъектАренды) КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АР_Ставки КАК ПредыдущееЗначение
	|		ПО ВложенныйЗапрос.Услуга = ПредыдущееЗначение.Услуга
	|			И ВложенныйЗапрос.ОбъектАренды = ПредыдущееЗначение.ОбъектАренды
	|			И ВложенныйЗапрос.Договор = ПредыдущееЗначение.Договор
	|			И ВложенныйЗапрос.Период = ПредыдущееЗначение.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикСтавок.Ссылка КАК График,
	|	ГрафикСтавок.Дата КАК Дата,
	|	ГрафикСтавок.Ставка КАК Ставка
	|ПОМЕСТИТЬ ВТГрафикиСтавок
	|ИЗ
	|	Справочник.АР_ГрафикиИзмененияСтавокНаУслуги.ГрафикСтавок КАК ГрафикСтавок
	|ГДЕ
	|	ГрафикСтавок.Ссылка.Владелец = &Договор
	|	И ВЫБОР
	|			КОГДА ГрафикСтавок.Ссылка.Документ ССЫЛКА Документ.АР_ДополнительноеСоглашение
	|				ТОГДА ГрафикСтавок.Дата >= НАЧАЛОПЕРИОДА(ГрафикСтавок.Ссылка.Документ.Дата, ДЕНЬ)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСтавки.ДатаЗаписи КАК ДатаЗаписи,
	|	ВЫБОР
	|		КОГДА АР_ГрафикиИзмененияСтавокНаУслугиГрафикСтавок.График ЕСТЬ NULL
	|			ТОГДА ВТСтавки.ДатаЗаписи
	|		ИНАЧЕ АР_ГрафикиИзмененияСтавокНаУслугиГрафикСтавок.Дата
	|	КОНЕЦ КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА АР_ГрафикиИзмененияСтавокНаУслугиГрафикСтавок.График ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ВТСтавки.Ставка ССЫЛКА Справочник.АР_ГрафикиИзмененияСтавокНаУслуги
	|						ТОГДА 0
	|					ИНАЧЕ ВТСтавки.Ставка
	|				КОНЕЦ
	|		ИНАЧЕ АР_ГрафикиИзмененияСтавокНаУслугиГрафикСтавок.Ставка
	|	КОНЕЦ КАК Ставка,
	|	ВТСтавки.Услуга КАК Услуга,
	|	ВТСтавки.ОбъектАренды КАК ОбъектАренды,
	|	ВЫБОР
	|		КОГДА АР_ГрафикиИзмененияСтавокНаУслугиГрафикСтавок.График ЕСТЬ NULL
	|				И ВТСтавки.Ставка ССЫЛКА Справочник.АР_ГрафикиИзмененияСтавокНаУслуги
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.АР_СпособыНачисленияАренднойПлаты.ПустаяСсылка)
	|		ИНАЧЕ ВТСтавки.СпособНачисления
	|	КОНЕЦ КАК СпособНачисления,
	|	ВТСтавки.Площадь КАК Площадь,
	|	АР_ГрафикиИзмененияСтавокНаУслугиГрафикСтавок.График КАК График,
	|	ВТСтавки.СтавкаНДС КАК СтавкаНДС
	|ПОМЕСТИТЬ ВТСтавкиДатыНачалаБезПересечения
	|ИЗ
	|	ВТСтавки КАК ВТСтавки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиСтавок КАК АР_ГрафикиИзмененияСтавокНаУслугиГрафикСтавок
	|		ПО ВТСтавки.Ставка = АР_ГрафикиИзмененияСтавокНаУслугиГрафикСтавок.График
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТСтавкиДатыНачалаБезПересечения.ДатаЗаписи КАК ДатаЗаписи,
	|	ВТСтавкиДатыНачалаБезПересечения.График КАК График,
	|	ВТСтавкиДатыНачалаБезПересечения.Услуга КАК Услуга,
	|	ВТСтавкиДатыНачалаБезПересечения.ОбъектАренды КАК ОбъектАренды,
	|	МИНИМУМ(ЕСТЬNULL(ВТСтавкиДатыНачалаБезПересеченияОгр.ДатаЗаписи, ДОБАВИТЬКДАТЕ(&КонецПериода, ДЕНЬ, 1))) КАК ДатаОкончанияГрафика
	|ПОМЕСТИТЬ ПериодыГрафиков
	|ИЗ
	|	ВТСтавкиДатыНачалаБезПересечения КАК ВТСтавкиДатыНачалаБезПересечения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиДатыНачалаБезПересечения КАК ВТСтавкиДатыНачалаБезПересеченияОгр
	|		ПО ВТСтавкиДатыНачалаБезПересечения.ДатаЗаписи < ВТСтавкиДатыНачалаБезПересеченияОгр.ДатаЗаписи
	|			И ВТСтавкиДатыНачалаБезПересечения.Услуга = ВТСтавкиДатыНачалаБезПересеченияОгр.Услуга
	|			И ВТСтавкиДатыНачалаБезПересечения.ОбъектАренды = ВТСтавкиДатыНачалаБезПересеченияОгр.ОбъектАренды
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТСтавкиДатыНачалаБезПересечения.ДатаЗаписи,
	|	ВТСтавкиДатыНачалаБезПересечения.Услуга,
	|	ВТСтавкиДатыНачалаБезПересечения.ОбъектАренды,
	|	ВТСтавкиДатыНачалаБезПересечения.График
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСтавкиДатыНачалаБезПересечения.ДатаЗаписи КАК ДатаЗаписи,
	|	ВТСтавкиДатыНачалаБезПересечения.ДатаНачала КАК ДатаНачала,
	|	ВТСтавкиДатыНачалаБезПересечения.Ставка КАК Ставка,
	|	ВТСтавкиДатыНачалаБезПересечения.График КАК График,
	|	ВТСтавкиДатыНачалаБезПересечения.Услуга КАК Услуга,
	|	ВТСтавкиДатыНачалаБезПересечения.ОбъектАренды КАК ОбъектАренды,
	|	ВТСтавкиДатыНачалаБезПересечения.СпособНачисления КАК СпособНачисления,
	|	ВТСтавкиДатыНачалаБезПересечения.Площадь КАК Площадь,
	|	ПериодыГрафиков.ДатаОкончанияГрафика КАК ДатаОкончанияГрафика,
	|	ВТСтавкиДатыНачалаБезПересечения.СтавкаНДС КАК СтавкаНДС
	|ПОМЕСТИТЬ ВТСтавкиДатаНачала
	|ИЗ
	|	ВТСтавкиДатыНачалаБезПересечения КАК ВТСтавкиДатыНачалаБезПересечения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПериодыГрафиков КАК ПериодыГрафиков
	|		ПО ВТСтавкиДатыНачалаБезПересечения.ДатаНачала <= ПериодыГрафиков.ДатаОкончанияГрафика
	|			И ВТСтавкиДатыНачалаБезПересечения.ДатаЗаписи = ПериодыГрафиков.ДатаЗаписи
	|			И ВТСтавкиДатыНачалаБезПересечения.Услуга = ПериодыГрафиков.Услуга
	|			И ВТСтавкиДатыНачалаБезПересечения.ОбъектАренды = ПериодыГрафиков.ОбъектАренды
	|			И (ВЫБОР
	|				КОГДА ВТСтавкиДатыНачалаБезПересечения.График ЕСТЬ NULL
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВТСтавкиДатыНачалаБезПересечения.График = ПериодыГрафиков.График
	|			КОНЕЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ВТСтавкиДатыНачалаБезПересечения.ДатаЗаписи),
	|	&НачалоПериода,
	|	0,
	|	NULL,
	|	ВТСтавкиДатыНачалаБезПересечения.Услуга,
	|	ВТСтавкиДатыНачалаБезПересечения.ОбъектАренды,
	|	ЗНАЧЕНИЕ(Справочник.АР_СпособыНачисленияАренднойПлаты.ПустаяСсылка),
	|	NULL,
	|	ДОБАВИТЬКДАТЕ(&НачалоПериода, ДЕНЬ, 1),
	|	ВТСтавкиДатыНачалаБезПересечения.СтавкаНДС
	|ИЗ
	|	ВТСтавкиДатыНачалаБезПересечения КАК ВТСтавкиДатыНачалаБезПересечения
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТСтавкиДатыНачалаБезПересечения.Услуга,
	|	ВТСтавкиДатыНачалаБезПересечения.ОбъектАренды,
	|	ВТСтавкиДатыНачалаБезПересечения.СтавкаНДС
	|
	|ИМЕЮЩИЕ
	|	МИНИМУМ(ВТСтавкиДатыНачалаБезПересечения.ДатаНачала) > &НачалоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСтавкиДатаНачала.ДатаЗаписи КАК ДатаЗаписи,
	|	ВТСтавкиДатаНачала.Услуга КАК Услуга,
	|	ВТСтавкиДатаНачала.ОбъектАренды КАК ОбъектАренды,
	|	ВТСтавкиДатаНачала.Ставка КАК Ставка,
	|	ВТСтавкиДатаНачала.СпособНачисления КАК СпособНачисления,
	|	ВТСтавкиДатаНачала.Площадь КАК Площадь,
	|	ВТСтавкиДатаНачала.ДатаНачала КАК ДатаНачала,
	|	ВТСтавкиДатаНачала.ДатаОкончанияГрафика КАК ДатаОкончанияГрафика,
	|	ВТСтавкиДатаОкончания.ДатаНачала КАК ДатаНачала1,
	|	МИНИМУМ(ЕСТЬNULL(ВТСтавкиДатаОкончания.ДатаОкончанияГрафика, ДОБАВИТЬКДАТЕ(&КонецПериода, ДЕНЬ, 1))) КАК ДатаОкончания,
	|	ВТСтавкиДатаНачала.СтавкаНДС КАК СтавкаНДС
	|ПОМЕСТИТЬ ВТСтавкиПоПериодам
	|ИЗ
	|	ВТСтавкиДатаНачала КАК ВТСтавкиДатаНачала
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиДатаНачала КАК ВТСтавкиДатаОкончания
	|		ПО ВТСтавкиДатаНачала.ОбъектАренды = ВТСтавкиДатаОкончания.ОбъектАренды
	|			И ВТСтавкиДатаНачала.Услуга = ВТСтавкиДатаОкончания.Услуга
	|			И ВТСтавкиДатаНачала.ДатаНачала <= ВТСтавкиДатаОкончания.ДатаНачала
	|			И ВТСтавкиДатаНачала.ДатаЗаписи <= ВТСтавкиДатаОкончания.ДатаЗаписи
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТСтавкиДатаНачала.СпособНачисления,
	|	ВТСтавкиДатаНачала.ДатаОкончанияГрафика,
	|	ВТСтавкиДатаОкончания.ДатаНачала,
	|	ВТСтавкиДатаНачала.ОбъектАренды,
	|	ВТСтавкиДатаНачала.ДатаЗаписи,
	|	ВТСтавкиДатаНачала.ДатаНачала,
	|	ВТСтавкиДатаНачала.Услуга,
	|	ВТСтавкиДатаНачала.Ставка,
	|	ВТСтавкиДатаНачала.Площадь,
	|	ВТСтавкиДатаНачала.СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСтавкиПоПериодам.ДатаЗаписи КАК ДатаЗаписи,
	|	ВТСтавкиПоПериодам.Услуга КАК Услуга,
	|	ВТСтавкиПоПериодам.ОбъектАренды КАК ОбъектАренды,
	|	ЕСТЬNULL(АР_ГрафикиИзмененияСтавокНаУслугиГрафикСтавок.Ставка, ВТСтавкиПоПериодам.Ставка) КАК Ставка,
	|	ВТСтавкиПоПериодам.СпособНачисления КАК СпособНачисления,
	|	ВТСтавкиПоПериодам.Площадь КАК Площадь,
	|	ЕСТЬNULL(АР_ГрафикиИзмененияСтавокНаУслугиГрафикСтавок.Дата, ВТСтавкиПоПериодам.ДатаНачала) КАК ДатаНачала,
	|	ВТСтавкиПоПериодам.ДатаОкончания КАК ДатаОкончанияПериода,
	|	ВТСтавкиПоПериодам.СтавкаНДС КАК СтавкаНДС
	|ПОМЕСТИТЬ ВТСтавкиЧислоДатаНачала
	|ИЗ
	|	ВТСтавкиПоПериодам КАК ВТСтавкиПоПериодам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиСтавок КАК АР_ГрафикиИзмененияСтавокНаУслугиГрафикСтавок
	|		ПО ВТСтавкиПоПериодам.Ставка = АР_ГрафикиИзмененияСтавокНаУслугиГрафикСтавок.График
	|			И (АР_ГрафикиИзмененияСтавокНаУслугиГрафикСтавок.Дата >= ВТСтавкиПоПериодам.ДатаНачала)
	|			И (АР_ГрафикиИзмененияСтавокНаУслугиГрафикСтавок.Дата <= ВТСтавкиПоПериодам.ДатаОкончания)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСтавкиЧислоДатаНачала.ДатаЗаписи КАК ДатаЗаписи,
	|	ВТСтавкиЧислоДатаНачала.Услуга КАК Услуга,
	|	ВТСтавкиЧислоДатаНачала.ОбъектАренды КАК ОбъектАренды,
	|	ВТСтавкиЧислоДатаНачала.Ставка КАК Ставка,
	|	ВТСтавкиЧислоДатаНачала.СпособНачисления КАК СпособНачисления,
	|	ВТСтавкиЧислоДатаНачала.Площадь КАК Площадь,
	|	ВЫБОР
	|		КОГДА ВТСтавкиЧислоДатаНачала.ДатаНачала > ВТСтавкиЧислоДатаНачала.ДатаЗаписи
	|			ТОГДА ВТСтавкиЧислоДатаНачала.ДатаНачала
	|		ИНАЧЕ ВТСтавкиЧислоДатаНачала.ДатаЗаписи
	|	КОНЕЦ КАК ДатаНачала,
	|	МИНИМУМ(ЕСТЬNULL(ВТСтавкиЧислоДатаОкончания.ДатаНачала, ВТСтавкиЧислоДатаНачала.ДатаОкончанияПериода)) КАК ДатаОкончания,
	|	ВТСтавкиЧислоДатаНачала.СтавкаНДС КАК СтавкаНДС
	|ПОМЕСТИТЬ ВТГрафикИзмененияСтавок
	|ИЗ
	|	ВТСтавкиЧислоДатаНачала КАК ВТСтавкиЧислоДатаНачала
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиЧислоДатаНачала КАК ВТСтавкиЧислоДатаОкончания
	|		ПО ВТСтавкиЧислоДатаНачала.Услуга = ВТСтавкиЧислоДатаОкончания.Услуга
	|			И ВТСтавкиЧислоДатаНачала.ОбъектАренды = ВТСтавкиЧислоДатаОкончания.ОбъектАренды
	|			И ВТСтавкиЧислоДатаНачала.ДатаНачала < ВТСтавкиЧислоДатаОкончания.ДатаНачала
	|			И ВТСтавкиЧислоДатаНачала.ДатаЗаписи = ВТСтавкиЧислоДатаОкончания.ДатаЗаписи
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТСтавкиЧислоДатаНачала.СпособНачисления,
	|	ВТСтавкиЧислоДатаНачала.Услуга,
	|	ВТСтавкиЧислоДатаНачала.ДатаЗаписи,
	|	ВЫБОР
	|		КОГДА ВТСтавкиЧислоДатаНачала.ДатаНачала > ВТСтавкиЧислоДатаНачала.ДатаЗаписи
	|			ТОГДА ВТСтавкиЧислоДатаНачала.ДатаНачала
	|		ИНАЧЕ ВТСтавкиЧислоДатаНачала.ДатаЗаписи
	|	КОНЕЦ,
	|	ВТСтавкиЧислоДатаНачала.ОбъектАренды,
	|	ВТСтавкиЧислоДатаНачала.Ставка,
	|	ВТСтавкиЧислоДатаНачала.Площадь,
	|	ВТСтавкиЧислоДатаНачала.СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусыОбъектовАренды.Услуга КАК Номенклатура,
	|	СтатусыОбъектовАренды.ОбъектАренды КАК ОбъектАренды,
	|	ВЫБОР
	|		КОГДА ВТГрафикИзмененияСтавок.СпособНачисления.ВариантРасчета = ЗНАЧЕНИЕ(Перечисление.АР_ВариантыРасчета.ПоСтавкеЗаОбъектВЦелом)
	|			ТОГДА 1
	|		ИНАЧЕ ВТГрафикИзмененияСтавок.Площадь
	|	КОНЕЦ КАК Количество,
	|	ВТГрафикИзмененияСтавок.Ставка КАК СтавкаСпособаНачисления,
	|	ВТГрафикИзмененияСтавок.Ставка КАК Цена,
	|	ВТГрафикИзмененияСтавок.СпособНачисления КАК СпособНачисления,
	|	ВЫБОР
	|		КОГДА ВТГрафикИзмененияСтавок.ДатаНачала < &НачалоПериода
	|				И СтатусыОбъектовАренды.ДатаНачалаАренды < &НачалоПериода
	|			ТОГДА &НачалоПериода
	|		КОГДА ВТГрафикИзмененияСтавок.ДатаНачала < &НачалоПериода
	|			ТОГДА СтатусыОбъектовАренды.ДатаНачалаАренды
	|		КОГДА ВТГрафикИзмененияСтавок.ДатаНачала < ВТГрафикИзмененияСтавок.ДатаЗаписи
	|			ТОГДА ВТГрафикИзмененияСтавок.ДатаЗаписи
	|		ИНАЧЕ ВТГрафикИзмененияСтавок.ДатаНачала
	|	КОНЕЦ КАК ПериодНачало,
	|	ВЫБОР
	|		КОГДА ВТГрафикИзмененияСтавок.ДатаОкончания > ДОБАВИТЬКДАТЕ(&КонецПериода, ДЕНЬ, 1)
	|				И СтатусыОбъектовАренды.ДатаОкончанияАренды > ДОБАВИТЬКДАТЕ(&КонецПериода, ДЕНЬ, 1)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&КонецПериода, ДЕНЬ, 1)
	|		КОГДА ВТГрафикИзмененияСтавок.ДатаОкончания > ДОБАВИТЬКДАТЕ(&КонецПериода, ДЕНЬ, 1)
	|			ТОГДА СтатусыОбъектовАренды.ДатаОкончанияАренды
	|		ИНАЧЕ ВТГрафикИзмененияСтавок.ДатаОкончания
	|	КОНЕЦ КАК ПериодКонец,
	|	СтатусыОбъектовАренды.ДатаНачалаАренды КАК ДатаНачалаАренды,
	|	СтатусыОбъектовАренды.ДатаОкончанияАренды КАК ДатаОкончанияАренды,
	|	ВЫБОР
	|		КОГДА &НоваяСхемаНДС
	|			ТОГДА ВТГрафикИзмененияСтавок.СтавкаНДС
	|		КОГДА &БезНДС
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|		ИНАЧЕ СтатусыОбъектовАренды.Услуга.ВидСтавкиНДС
	|	КОНЕЦ КАК СтавкаНДС,
	|	ВТГрафикИзмененияСтавок.СпособНачисления.Валюта КАК Валюта,
	|	СтатусыОбъектовАренды.Договор КАК Договор,
	|	СтатусыОбъектовАренды.Регистратор.ДокументБезНДС КАК ДокументБезНДС
	|ИЗ
	|	РегистрСведений.АР_СтатусыОбъектовАренды.СрезПоследних(
	|			&ДатаСреза,
	|			Договор = &Договор
	|				И Услуга.АР_ПостояннаяЧастьОплаты) КАК СтатусыОбъектовАренды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГрафикИзмененияСтавок КАК ВТГрафикИзмененияСтавок
	|		ПО СтатусыОбъектовАренды.Услуга = ВТГрафикИзмененияСтавок.Услуга
	|			И СтатусыОбъектовАренды.ОбъектАренды = ВТГрафикИзмененияСтавок.ОбъектАренды
	|			И (ВТГрафикИзмененияСтавок.ДатаНачала <= СтатусыОбъектовАренды.ДатаОкончанияАренды)
	|			И (ВТГрафикИзмененияСтавок.ДатаНачала <= &КонецПериода)
	|			И (ВТГрафикИзмененияСтавок.ДатаОкончания >= СтатусыОбъектовАренды.ДатаНачалаАренды)
	|			И (ВТГрафикИзмененияСтавок.ДатаОкончания >= &НачалоПериода)
	|			И (ВТГрафикИзмененияСтавок.ДатаНачала < ВТГрафикИзмененияСтавок.ДатаОкончания)
	|ГДЕ
	|	СтатусыОбъектовАренды.Статус = &ВАренде
	|	И СтатусыОбъектовАренды.ДатаНачалаАренды <= &КонецПериода
	|	И СтатусыОбъектовАренды.ДатаОкончанияАренды >= &НачалоПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	ОбъектАренды,
	|	ВТГрафикИзмененияСтавок.ДатаЗаписи,
	|	ПериодНачало,
	|	ПериодКонец
	|ИТОГИ ПО
	|	Номенклатура,
	|	ОбъектАренды";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаПоНачислениюПеременнойЧасти()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВТРегистрНачисленияПоУслугам.Услуга КАК Услуга,
	|	ВТРегистрНачисленияПоУслугам.ОбъектАренды КАК ОбъектАренды,
	|	ВТРегистрНачисленияПоУслугам.Ставка КАК Ставка,
	|	ВТРегистрНачисленияПоУслугам.Количество КАК Количество,
	|	ВТРегистрНачисленияПоУслугам.Сумма КАК Сумма,
	|	ВТРегистрНачисленияПоУслугам.СпособНачисления КАК СпособНачисления,
	|	ВТРегистрНачисленияПоУслугам.СтавкаНДС КАК СтавкаНДС,
	|	ВТРегистрНачисленияПоУслугам.Валюта КАК Валюта,
	|	ВТРегистрНачисленияПоУслугам.Договор КАК Договор,
	|	ВТРегистрНачисленияПоУслугам.ДокументБезНДС КАК ДокументБезНДС
	|ПОМЕСТИТЬ РегистрНачисленияПоУслугам
	|ИЗ
	|	ВТРегистрНачисленияПоУслугам КАК ВТРегистрНачисленияПоУслугам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(АР_СтавкиСрезПоследних.Период, ДЕНЬ) КАК ДатаЗаписи,
	|	АР_СтавкиСрезПоследних.Услуга КАК Услуга,
	|	АР_СтавкиСрезПоследних.ОбъектАренды КАК ОбъектАренды,
	|	АР_СтавкиСрезПоследних.Ставка КАК Ставка,
	|	АР_СтавкиСрезПоследних.СтавкаНДС КАК СтавкаНДС,
	|	АР_СтавкиСрезПоследних.СпособНачисления КАК СпособНачисления,
	|	АР_СтавкиСрезПоследних.Площадь КАК Площадь
	|ПОМЕСТИТЬ ВТСтавки
	|ИЗ
	|	РегистрСведений.АР_Ставки.СрезПоследних(
	|			КОНЕЦПЕРИОДА(&НачалоПериода, ДЕНЬ),
	|			НЕ Услуга.АР_ПостояннаяЧастьОплаты
	|				И Услуга.АР_ОплачиваетсяАвансом
	|				И Договор = &Договор
	|				И (СрокДействия >= &НачалоПериода
	|					ИЛИ СрокДействия = ДАТАВРЕМЯ(1, 1, 1))) КАК АР_СтавкиСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(АР_Ставки.Период, ДЕНЬ),
	|	АР_Ставки.Услуга,
	|	АР_Ставки.ОбъектАренды,
	|	АР_Ставки.Ставка,
	|	АР_Ставки.СтавкаНДС,
	|	АР_Ставки.СпособНачисления,
	|	АР_Ставки.Площадь
	|ИЗ
	|	РегистрСведений.АР_Ставки КАК АР_Ставки
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(АР_Ставки.Период, ДЕНЬ) > &НачалоПериода
	|	И НАЧАЛОПЕРИОДА(АР_Ставки.Период, ДЕНЬ) <= &КонецПериода
	|	И АР_Ставки.Договор = &Договор
	|	И НЕ АР_Ставки.Услуга.АР_ПостояннаяЧастьОплаты
	|	И АР_Ставки.Услуга.АР_ОплачиваетсяАвансом
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(ВложенныйЗапрос.СрокДействия, ДЕНЬ, 1),
	|	ВложенныйЗапрос.Услуга,
	|	ВложенныйЗапрос.ОбъектАренды,
	|	ПредыдущееЗначение.Ставка,
	|	ПредыдущееЗначение.СтавкаНДС,
	|	ПредыдущееЗначение.СпособНачисления,
	|	ПредыдущееЗначение.Площадь
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ПредыдущееЗначение.Период) КАК Период,
	|		АР_Ставки.Договор КАК Договор,
	|		АР_Ставки.СрокДействия КАК СрокДействия,
	|		АР_Ставки.Услуга КАК Услуга,
	|		АР_Ставки.ОбъектАренды КАК ОбъектАренды
	|	ИЗ
	|		РегистрСведений.АР_Ставки КАК АР_Ставки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АР_Ставки КАК ПредыдущееЗначение
	|			ПО АР_Ставки.Услуга = ПредыдущееЗначение.Услуга
	|				И АР_Ставки.ОбъектАренды = ПредыдущееЗначение.ОбъектАренды
	|				И АР_Ставки.Договор = ПредыдущееЗначение.Договор
	|				И АР_Ставки.СрокДействия > ПредыдущееЗначение.Период
	|				И (ПредыдущееЗначение.СрокДействия = ДАТАВРЕМЯ(1, 1, 1)
	|					ИЛИ ПредыдущееЗначение.СрокДействия > АР_Ставки.СрокДействия)
	|	ГДЕ
	|		АР_Ставки.СрокДействия > &НачалоПериода
	|		И АР_Ставки.СрокДействия <= &КонецПериода
	|		И АР_Ставки.СрокДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|		И АР_Ставки.Договор = &Договор
	|		И НЕ АР_Ставки.Услуга.АР_ПостояннаяЧастьОплаты
	|		И АР_Ставки.Услуга.АР_ОплачиваетсяАвансом
	|	
	|	СГРУППИРОВАТЬ ПО
	|		АР_Ставки.Договор,
	|		АР_Ставки.СрокДействия,
	|		АР_Ставки.Услуга,
	|		АР_Ставки.ОбъектАренды) КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АР_Ставки КАК ПредыдущееЗначение
	|		ПО ВложенныйЗапрос.Услуга = ПредыдущееЗначение.Услуга
	|			И ВложенныйЗапрос.ОбъектАренды = ПредыдущееЗначение.ОбъектАренды
	|			И ВложенныйЗапрос.Договор = ПредыдущееЗначение.Договор
	|			И ВложенныйЗапрос.Период = ПредыдущееЗначение.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСтавки.ДатаЗаписи КАК ДатаЗаписи,
	|	ВЫБОР
	|		КОГДА АР_ГрафикиИзмененияСтавокНаУслугиГрафикСтавок.Ссылка ЕСТЬ NULL
	|			ТОГДА ВТСтавки.ДатаЗаписи
	|		ИНАЧЕ АР_ГрафикиИзмененияСтавокНаУслугиГрафикСтавок.Дата
	|	КОНЕЦ КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА АР_ГрафикиИзмененияСтавокНаУслугиГрафикСтавок.Ссылка ЕСТЬ NULL
	|			ТОГДА ВТСтавки.Ставка
	|		ИНАЧЕ АР_ГрафикиИзмененияСтавокНаУслугиГрафикСтавок.Ставка
	|	КОНЕЦ КАК Ставка,
	|	ВТСтавки.СтавкаНДС КАК СтавкаНДС,
	|	ВТСтавки.Услуга КАК Услуга,
	|	ВТСтавки.ОбъектАренды КАК ОбъектАренды,
	|	ВТСтавки.СпособНачисления КАК СпособНачисления,
	|	ВТСтавки.Площадь КАК Площадь,
	|	АР_ГрафикиИзмененияСтавокНаУслугиГрафикСтавок.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТСтавкиДатыНачалаБезПересечения
	|ИЗ
	|	ВТСтавки КАК ВТСтавки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АР_ГрафикиИзмененияСтавокНаУслуги.ГрафикСтавок КАК АР_ГрафикиИзмененияСтавокНаУслугиГрафикСтавок
	|		ПО ВТСтавки.Ставка = АР_ГрафикиИзмененияСтавокНаУслугиГрафикСтавок.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТСтавкиДатыНачалаБезПересечения.ДатаЗаписи КАК ДатаЗаписи,
	|	ВТСтавкиДатыНачалаБезПересечения.Ссылка КАК Ссылка,
	|	МИНИМУМ(ЕСТЬNULL(ВТСтавкиДатыНачалаБезПересеченияОгр.ДатаЗаписи, &КонецПериода)) КАК ДатаОкончанияГрафика
	|ПОМЕСТИТЬ ПериодыГрафиков
	|ИЗ
	|	ВТСтавкиДатыНачалаБезПересечения КАК ВТСтавкиДатыНачалаБезПересечения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиДатыНачалаБезПересечения КАК ВТСтавкиДатыНачалаБезПересеченияОгр
	|		ПО ВТСтавкиДатыНачалаБезПересечения.ДатаЗаписи < ВТСтавкиДатыНачалаБезПересеченияОгр.ДатаЗаписи
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТСтавкиДатыНачалаБезПересечения.ДатаЗаписи,
	|	ВТСтавкиДатыНачалаБезПересечения.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСтавкиДатыНачалаБезПересечения.ДатаЗаписи КАК ДатаЗаписи,
	|	ВТСтавкиДатыНачалаБезПересечения.ДатаНачала КАК ДатаНачала,
	|	ВТСтавкиДатыНачалаБезПересечения.Ставка КАК Ставка,
	|	ВТСтавкиДатыНачалаБезПересечения.СтавкаНДС КАК СтавкаНДС,
	|	ВТСтавкиДатыНачалаБезПересечения.Ссылка КАК Ссылка,
	|	ВТСтавкиДатыНачалаБезПересечения.Услуга КАК Услуга,
	|	ВТСтавкиДатыНачалаБезПересечения.ОбъектАренды КАК ОбъектАренды,
	|	ВТСтавкиДатыНачалаБезПересечения.СпособНачисления КАК СпособНачисления,
	|	ВТСтавкиДатыНачалаБезПересечения.Площадь КАК Площадь,
	|	ПериодыГрафиков.ДатаОкончанияГрафика КАК ДатаОкончанияГрафика
	|ПОМЕСТИТЬ ВТСтавкиДатаНачала
	|ИЗ
	|	ВТСтавкиДатыНачалаБезПересечения КАК ВТСтавкиДатыНачалаБезПересечения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПериодыГрафиков КАК ПериодыГрафиков
	|		ПО ВТСтавкиДатыНачалаБезПересечения.ДатаНачала <= ПериодыГрафиков.ДатаОкончанияГрафика
	|			И ВТСтавкиДатыНачалаБезПересечения.ДатаЗаписи = ПериодыГрафиков.ДатаЗаписи
	|			И (ВЫБОР
	|				КОГДА ВТСтавкиДатыНачалаБезПересечения.Ссылка ЕСТЬ NULL
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВТСтавкиДатыНачалаБезПересечения.Ссылка = ПериодыГрафиков.Ссылка
	|			КОНЕЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ВТСтавкиДатыНачалаБезПересечения.ДатаЗаписи),
	|	&НачалоПериода,
	|	0,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС),
	|	NULL,
	|	ВТСтавкиДатыНачалаБезПересечения.Услуга,
	|	ВТСтавкиДатыНачалаБезПересечения.ОбъектАренды,
	|	ЗНАЧЕНИЕ(Справочник.АР_СпособыНачисленияАренднойПлаты.ПустаяСсылка),
	|	NULL,
	|	ДОБАВИТЬКДАТЕ(&НачалоПериода, ДЕНЬ, 1)
	|ИЗ
	|	ВТСтавкиДатыНачалаБезПересечения КАК ВТСтавкиДатыНачалаБезПересечения
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТСтавкиДатыНачалаБезПересечения.Услуга,
	|	ВТСтавкиДатыНачалаБезПересечения.ОбъектАренды
	|
	|ИМЕЮЩИЕ
	|	МИНИМУМ(ВТСтавкиДатыНачалаБезПересечения.ДатаНачала) > &НачалоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСтавкиДатаНачала.ДатаЗаписи КАК ДатаЗаписи,
	|	ВТСтавкиДатаНачала.Услуга КАК Услуга,
	|	ВТСтавкиДатаНачала.ОбъектАренды КАК ОбъектАренды,
	|	ВТСтавкиДатаНачала.Ставка КАК Ставка,
	|	ВТСтавкиДатаНачала.СтавкаНДС КАК СтавкаНДС,
	|	ВТСтавкиДатаНачала.СпособНачисления КАК СпособНачисления,
	|	ВТСтавкиДатаНачала.Площадь КАК Площадь,
	|	ВТСтавкиДатаНачала.ДатаНачала КАК ДатаНачала,
	|	МИНИМУМ(ЕСТЬNULL(ВТСтавкиДатаОкончания.ДатаОкончанияГрафика, &КонецПериода)) КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТСтавкиПоПериодам
	|ИЗ
	|	ВТСтавкиДатаНачала КАК ВТСтавкиДатаНачала
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиДатаНачала КАК ВТСтавкиДатаОкончания
	|		ПО ВТСтавкиДатаНачала.ОбъектАренды = ВТСтавкиДатаОкончания.ОбъектАренды
	|			И ВТСтавкиДатаНачала.Услуга = ВТСтавкиДатаОкончания.Услуга
	|			И ВТСтавкиДатаНачала.ДатаНачала <= ВТСтавкиДатаОкончания.ДатаНачала
	|			И ВТСтавкиДатаНачала.ДатаЗаписи <= ВТСтавкиДатаОкончания.ДатаЗаписи
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТСтавкиДатаНачала.СпособНачисления,
	|	ВТСтавкиДатаНачала.ОбъектАренды,
	|	ВТСтавкиДатаНачала.ДатаЗаписи,
	|	ВТСтавкиДатаНачала.ДатаНачала,
	|	ВТСтавкиДатаНачала.Услуга,
	|	ВТСтавкиДатаНачала.Ставка,
	|	ВТСтавкиДатаНачала.СтавкаНДС,
	|	ВТСтавкиДатаНачала.Площадь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСтавкиПоПериодам.ДатаЗаписи КАК ДатаЗаписи,
	|	ВТСтавкиПоПериодам.Услуга КАК Услуга,
	|	ВТСтавкиПоПериодам.ОбъектАренды КАК ОбъектАренды,
	|	ЕСТЬNULL(АР_ГрафикиИзмененияСтавокНаУслугиГрафикСтавок.Ставка, ВТСтавкиПоПериодам.Ставка) КАК Ставка,
	|	ВТСтавкиПоПериодам.СтавкаНДС КАК СтавкаНДС,
	|	ВТСтавкиПоПериодам.СпособНачисления КАК СпособНачисления,
	|	ВТСтавкиПоПериодам.Площадь КАК Площадь,
	|	ЕСТЬNULL(АР_ГрафикиИзмененияСтавокНаУслугиГрафикСтавок.Дата, ВТСтавкиПоПериодам.ДатаНачала) КАК ДатаНачала,
	|	ВТСтавкиПоПериодам.ДатаОкончания КАК ДатаОкончанияПериода
	|ПОМЕСТИТЬ ВТСтавкиЧислоДатаНачала
	|ИЗ
	|	ВТСтавкиПоПериодам КАК ВТСтавкиПоПериодам
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АР_ГрафикиИзмененияСтавокНаУслуги.ГрафикСтавок КАК АР_ГрафикиИзмененияСтавокНаУслугиГрафикСтавок
	|		ПО ВТСтавкиПоПериодам.Ставка = АР_ГрафикиИзмененияСтавокНаУслугиГрафикСтавок.Ссылка
	|			И (АР_ГрафикиИзмененияСтавокНаУслугиГрафикСтавок.Дата >= ВТСтавкиПоПериодам.ДатаНачала)
	|			И (АР_ГрафикиИзмененияСтавокНаУслугиГрафикСтавок.Дата <= ВТСтавкиПоПериодам.ДатаОкончания)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСтавкиЧислоДатаНачала.ДатаЗаписи КАК ДатаЗаписи,
	|	ВТСтавкиЧислоДатаНачала.Услуга КАК Услуга,
	|	ВТСтавкиЧислоДатаНачала.ОбъектАренды КАК ОбъектАренды,
	|	ВТСтавкиЧислоДатаНачала.Ставка КАК Ставка,
	|	ВТСтавкиЧислоДатаНачала.СпособНачисления КАК СпособНачисления,
	|	ВТСтавкиЧислоДатаНачала.Площадь КАК Площадь,
	|	ВЫБОР
	|		КОГДА ВТСтавкиЧислоДатаНачала.ДатаНачала > ВТСтавкиЧислоДатаНачала.ДатаЗаписи
	|			ТОГДА ВТСтавкиЧислоДатаНачала.ДатаНачала
	|		ИНАЧЕ ВТСтавкиЧислоДатаНачала.ДатаЗаписи
	|	КОНЕЦ КАК ДатаНачала,
	|	МИНИМУМ(ЕСТЬNULL(ВТСтавкиЧислоДатаОкончания.ДатаНачала, ВТСтавкиЧислоДатаНачала.ДатаОкончанияПериода)) КАК ДатаОкончания,
	|	ВТСтавкиЧислоДатаНачала.СтавкаНДС КАК СтавкаНДС
	|ПОМЕСТИТЬ ВТГрафикИзмененияСтавок
	|ИЗ
	|	ВТСтавкиЧислоДатаНачала КАК ВТСтавкиЧислоДатаНачала
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиЧислоДатаНачала КАК ВТСтавкиЧислоДатаОкончания
	|		ПО ВТСтавкиЧислоДатаНачала.Услуга = ВТСтавкиЧислоДатаОкончания.Услуга
	|			И ВТСтавкиЧислоДатаНачала.ОбъектАренды = ВТСтавкиЧислоДатаОкончания.ОбъектАренды
	|			И ВТСтавкиЧислоДатаНачала.ДатаНачала < ВТСтавкиЧислоДатаОкончания.ДатаНачала
	|			И ВТСтавкиЧислоДатаНачала.ДатаЗаписи = ВТСтавкиЧислоДатаОкончания.ДатаЗаписи
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТСтавкиЧислоДатаНачала.СпособНачисления,
	|	ВТСтавкиЧислоДатаНачала.Услуга,
	|	ВТСтавкиЧислоДатаНачала.ДатаЗаписи,
	|	ВЫБОР
	|		КОГДА ВТСтавкиЧислоДатаНачала.ДатаНачала > ВТСтавкиЧислоДатаНачала.ДатаЗаписи
	|			ТОГДА ВТСтавкиЧислоДатаНачала.ДатаНачала
	|		ИНАЧЕ ВТСтавкиЧислоДатаНачала.ДатаЗаписи
	|	КОНЕЦ,
	|	ВТСтавкиЧислоДатаНачала.ОбъектАренды,
	|	ВТСтавкиЧислоДатаНачала.Ставка,
	|	ВТСтавкиЧислоДатаНачала.Площадь,
	|	ВТСтавкиЧислоДатаНачала.СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрНачисленияПоУслугам.Услуга КАК Услуга,
	|	РегистрНачисленияПоУслугам.ОбъектАренды КАК ОбъектАренды,
	|	РегистрНачисленияПоУслугам.Ставка КАК Ставка,
	|	РегистрНачисленияПоУслугам.Количество КАК Количество,
	|	РегистрНачисленияПоУслугам.Сумма КАК Сумма,
	|	РегистрНачисленияПоУслугам.СпособНачисления КАК СпособНачисления,
	|	РегистрНачисленияПоУслугам.СтавкаНДС КАК СтавкаНДС,
	|	РегистрНачисленияПоУслугам.Валюта КАК Валюта,
	|	РегистрНачисленияПоУслугам.Договор КАК Договор,
	|	РегистрНачисленияПоУслугам.ДокументБезНДС КАК ДокументБезНДС
	|ПОМЕСТИТЬ ВТНачисленияПоУслугам
	|ИЗ
	|	РегистрНачисленияПоУслугам КАК РегистрНачисленияПоУслугам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусыОбъектовАренды.Услуга КАК Услуга,
	|	ВЫБОР
	|		КОГДА &НоваяСхемаНДС
	|			ТОГДА ГрафикИзмененияСтавок.СтавкаНДС
	|		КОГДА &БезНДС
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|		ИНАЧЕ СтатусыОбъектовАренды.Услуга.ВидСтавкиНДС
	|	КОНЕЦ КАК СтавкаНДС,
	|	СтатусыОбъектовАренды.ОбъектАренды КАК ОбъектАренды,
	|	СтатусыОбъектовАренды.Договор КАК Договор,
	|	ГрафикИзмененияСтавок.ДатаНачала КАК Период,
	|	0 КАК Количество,
	|	ГрафикИзмененияСтавок.Ставка КАК Ставка,
	|	ГрафикИзмененияСтавок.СпособНачисления КАК СпособНачисления,
	|	ГрафикИзмененияСтавок.СпособНачисления.Валюта КАК Валюта,
	|	СтатусыОбъектовАренды.ДатаНачалаАренды КАК ДатаНачалаАренды,
	|	СтатусыОбъектовАренды.ДатаОкончанияАренды КАК ДатаОкончанияАренды,
	|	СтатусыОбъектовАренды.Регистратор.ДокументБезНДС КАК ДокументБезНДС
	|ПОМЕСТИТЬ ВТУслугиВАренде
	|ИЗ
	|	РегистрСведений.АР_СтатусыОбъектовАренды.СрезПоследних(
	|			&ДатаСреза,
	|			Договор = &Договор
	|				И НЕ Услуга.АР_ПостояннаяЧастьОплаты
	|				И Услуга.АР_ОплачиваетсяАвансом) КАК СтатусыОбъектовАренды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГрафикИзмененияСтавок КАК ГрафикИзмененияСтавок
	|		ПО (ГрафикИзмененияСтавок.ДатаОкончания = &КонецПериода)
	|			И СтатусыОбъектовАренды.Услуга = ГрафикИзмененияСтавок.Услуга
	|			И СтатусыОбъектовАренды.ОбъектАренды = ГрафикИзмененияСтавок.ОбъектАренды
	|			И (ГрафикИзмененияСтавок.ДатаНачала < СтатусыОбъектовАренды.ДатаОкончанияАренды)
	|			И (ГрафикИзмененияСтавок.ДатаНачала < &КонецПериода)
	|			И (ГрафикИзмененияСтавок.ДатаОкончания = &КонецПериода)
	|ГДЕ
	|	СтатусыОбъектовАренды.Статус = &ВАренде
	|	И СтатусыОбъектовАренды.ДатаНачалаАренды <= &КонецПериода
	|	И СтатусыОбъектовАренды.ДатаОкончанияАренды >= &НачалоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(НачисленияПоУслугам.Услуга, УслугиВАренде.Услуга) КАК Номенклатура,
	|	ЕСТЬNULL(НачисленияПоУслугам.ОбъектАренды, УслугиВАренде.ОбъектАренды) КАК ОбъектАренды,
	|	ЕСТЬNULL(НачисленияПоУслугам.Ставка, УслугиВАренде.Ставка) КАК СтавкаСпособаНачисления,
	|	ЕСТЬNULL(НачисленияПоУслугам.Ставка, УслугиВАренде.Ставка) КАК Цена,
	|	ЕСТЬNULL(НачисленияПоУслугам.Количество, УслугиВАренде.Количество) КАК Количество,
	|	ЕСТЬNULL(НачисленияПоУслугам.Сумма, 0) КАК Сумма,
	|	ЕСТЬNULL(НачисленияПоУслугам.СпособНачисления, УслугиВАренде.СпособНачисления) КАК СпособНачисления,
	|	ЕСТЬNULL(НачисленияПоУслугам.СтавкаНДС, УслугиВАренде.СтавкаНДС) КАК СтавкаНДС,
	|	ЕСТЬNULL(НачисленияПоУслугам.Валюта, УслугиВАренде.Валюта) КАК Валюта,
	|	ЕСТЬNULL(НачисленияПоУслугам.ДокументБезНДС, УслугиВАренде.ДокументБезНДС) КАК ДокументБезНДС
	|ИЗ
	|	ВТУслугиВАренде КАК УслугиВАренде
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТНачисленияПоУслугам КАК НачисленияПоУслугам
	|		ПО УслугиВАренде.Услуга = НачисленияПоУслугам.Услуга
	|			И УслугиВАренде.ОбъектАренды = НачисленияПоУслугам.ОбъектАренды";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПодготовитьСтруктуруРабочихПериодов(НачалоКалендаря, КонецКалендаря)
	
	ТаблицаПоискРабочейДаты = Новый ТаблицаЗначений;
	ТаблицаПоискРабочейДаты.Колонки.Добавить("ВсеДни", Новый ОписаниеТипов("Дата", , ,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаПоискРабочейДаты.Колонки.Добавить("РабочиеДни", Новый ОписаниеТипов("Дата", , ,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	
	ТаблицаКалендарь = Новый ТаблицаЗначений;
	ТаблицаКалендарь.Колонки.Добавить("ДатаКалендаря", Новый ОписаниеТипов("Дата", , ,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаКалендарь.Колонки.Добавить("ПорядковыйНомер", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Любой)));
	
	ТаблицаКалендарьРаб = Новый ТаблицаЗначений;
	ТаблицаКалендарьРаб.Колонки.Добавить("ДатаКалендаря", Новый ОписаниеТипов("Дата", , ,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаКалендарьРаб.Колонки.Добавить("ПорядковыйНомер", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Любой)));
	
	Запрос = АР_ПроцедурыНачисленияПереопределяемый.ПолучитьЗапросДляРасчетаРабочихДней(НачалоКалендаря, КонецКалендаря);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЭтоРабочийДень Тогда
			НоваяСтрока = ТаблицаКалендарьРаб.Добавить();
			НоваяСтрока.ДатаКалендаря = Выборка.Дата;
			НоваяСтрока.ПорядковыйНомер = ТаблицаКалендарьРаб.Индекс(НоваяСтрока);
		КонецЕсли;
		
		НоваяСтрока = ТаблицаКалендарь.Добавить();
		НоваяСтрока.ДатаКалендаря = Выборка.Дата;
		НоваяСтрока.ПорядковыйНомер = ТаблицаКалендарь.Индекс(НоваяСтрока);
		
		НоваяСтрока = ТаблицаПоискРабочейДаты.Добавить();
		НоваяСтрока.ВсеДни = Выборка.Дата;
		Если Выборка.ЭтоРабочийДень Тогда
			НоваяСтрока.РабочиеДни = Выборка.Дата;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Сч = 2 По ТаблицаПоискРабочейДаты.Количество() Цикл
		СтрокаТаб = ТаблицаПоискРабочейДаты[ТаблицаПоискРабочейДаты.Количество() - Сч];
		СтрокаТабСледущая = ТаблицаПоискРабочейДаты[ТаблицаПоискРабочейДаты.Количество() - Сч + 1];
		Если Не ЗначениеЗаполнено(СтрокаТаб.РабочиеДни) Тогда
			СтрокаТаб.РабочиеДни = СтрокаТабСледущая.РабочиеДни;
		КонецЕсли;
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("ТаблицаПоискРабочейДаты", 			ТаблицаПоискРабочейДаты);
	Результат.Вставить("ТаблицаКалендарь", 	ТаблицаКалендарь);
	Результат.Вставить("ТаблицаКалендарьРаб", ТаблицаКалендарьРаб);
	Возврат Результат;
	
КонецФункции

Функция НачалоПериода(Дата, Периодичность) Экспорт 
	
	Если Периодичность = Перечисления.Периодичность.День Тогда
		Возврат НачалоДня(Дата);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		Возврат НачалоНедели(Дата);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		Возврат НачалоМесяца(Дата);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		Возврат НачалоКвартала(Дата);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		Возврат НачалоГода(Дата);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		Если Месяц(Дата)<7 Тогда
			Возврат НачалоГода(Дата);
		Иначе
			Возврат ДобавитьМесяц(НачалоГода(Дата),6);
		КонецЕсли;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
		День = День(Дата);
		Если День < 11 Тогда
			Возврат Дата(Год(Дата), Месяц(Дата), 1);
		ИначеЕсли День < 21 Тогда
			Возврат Дата(Год(Дата), Месяц(Дата), 11);
		Иначе
			Возврат Дата(Год(Дата), Месяц(Дата), 21);
		КонецЕсли;
	Иначе
		Возврат НачалоДня(Дата);
	КонецЕсли;	
	
КонецФункции

Функция КонецПериода(Дата, Периодичность) Экспорт
	
	Если Периодичность = Перечисления.Периодичность.День Тогда
		Возврат КонецДня(Дата);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		Возврат КонецНедели(Дата);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		Возврат КонецМесяца(Дата);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		Возврат КонецКвартала(Дата);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		Возврат КонецГода(Дата);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		Если Месяц(Дата)<7 Тогда
			Возврат ДобавитьМесяц(НачалоГода(Дата), 6) - 1;
		Иначе
			Возврат КонецГода(Дата);
		КонецЕсли;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
		День = День(Дата);
		Если День < 11 Тогда
			Возврат Дата(Год(Дата), Месяц(Дата), 10, 23,59, 59);
		ИначеЕсли День < 21 Тогда
			Возврат Дата(Год(Дата), Месяц(Дата), 20, 23,59, 59);
		Иначе
			Возврат КонецМесяца(Дата);
		КонецЕсли;
	Иначе
		Возврат КонецДня(Дата);
	КонецЕсли;	
	
КонецФункции

Процедура ЗаполнитьДокументДаннымиНачисленияАрендыПостояннаяЧасть(ДокументОбъект, ИмяТабличнойЧасти, ДанныеНачисления)
	
	Для Каждого Стр Из ДанныеНачисления Цикл
		Если Стр.Цена = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрТЧ = ДокументОбъект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(СтрТЧ,Стр);
		
		НаименованиеПолное = СтрТЧ.Номенклатура.НаименованиеПолное;
		Если ПустаяСтрока(НаименованиеПолное) Тогда
			СтрТЧ.Содержание = СтрТЧ.Номенклатура.Наименование;
		Иначе
			СтрТЧ.Содержание = НаименованиеПолное;
		КонецЕсли;
		СтрТЧ.Содержание = РаботаСНоменклатуройКлиентСервер.СодержаниеУслуги(СтрТЧ.Содержание, СтрТЧ.Номенклатура.ПериодичностьУслуги, 
			ДокументОбъект.НачалоПериода, Истина, ДокументОбъект.ВидПериода);
		
		Если НЕ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.АР_НачислениеАренднойПлаты") Тогда 
			АР_ОбщиеПроцедурыПереопределяемый.РассчитатьСуммуНДСТабЧасти(СтрТЧ, ДокументОбъект);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДокументДаннымиНачисленияАрендыПеременнаяЧасть(ДокументОбъект, ИмяТабличнойЧасти, ДанныеНачисления)
	
	Для Каждого Стр Из ДанныеНачисления Цикл
		Если Стр.Цена = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрТЧ = ДокументОбъект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(СтрТЧ,Стр);
		Если Не ЗначениеЗаполнено(СтрТЧ.Сумма) Тогда
			АР_ОбщиеПроцедурыПереопределяемый.РассчитатьСуммуТабЧасти(СтрТЧ, ДокументОбъект);															 
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрТЧ.Номенклатура) И СтрТЧ.СпособНачисления.ВариантРасчета = Перечисления.АР_ВариантыРасчета.РасчетПоПроизвольнойФормуле Тогда
			СтрТЧ.Цена = СтрТЧ.Сумма;
			СтрТЧ.Количество = 1;
		КонецЕсли;
		
		НаименованиеПолное = СтрТЧ.Номенклатура.НаименованиеПолное;
		Если ПустаяСтрока(НаименованиеПолное) Тогда
			СтрТЧ.Содержание = СтрТЧ.Номенклатура.Наименование;
		Иначе
			СтрТЧ.Содержание = НаименованиеПолное;
		КонецЕсли;
		СтрТЧ.Содержание = РаботаСНоменклатуройКлиентСервер.СодержаниеУслуги(СтрТЧ.Содержание, СтрТЧ.Номенклатура.ПериодичностьУслуги, 
			ДокументОбъект.НачалоПериода, Истина, ДокументОбъект.ВидПериода);
		
		Если НЕ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.АР_НачислениеАренднойПлаты") Тогда
			АР_ОбщиеПроцедурыПереопределяемый.РассчитатьСуммуНДСТабЧасти(СтрТЧ, ДокументОбъект);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция РазбитьСуммуПоСобственникамУчета(ДокументОбъект, Знач ДанныеУчета) Экспорт
	
	Если ДанныеУчета = Неопределено Тогда 
		Возврат ДанныеУчета;
	КонецЕсли;
	
	Если ДанныеУчета.Колонки.Найти("Контрагент") = Неопределено Тогда  
		ДанныеУчета.Колонки.Добавить("Контрагент");
	КонецЕсли;
	Если ДанныеУчета.Колонки.Найти("ДоговорКонтрагента") = Неопределено Тогда
		ДанныеУчета.Колонки.Добавить("ДоговорКонтрагента");
	КонецЕсли;
	Если ДанныеУчета.Колонки.Найти("СчетРасчетов") = Неопределено Тогда
		ДанныеУчета.Колонки.Добавить("СчетРасчетов");
	КонецЕсли;
	Если ДанныеУчета.Колонки.Найти("Количество") = Неопределено Тогда
		ДанныеУчета.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,3)));
	КонецЕсли;
	Если ДанныеУчета.Колонки.Найти("Цена") = Неопределено Тогда
		ДанныеУчета.Колонки.Добавить("Цена",  Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,2)));
	КонецЕсли;
	Если ДанныеУчета.Колонки.Найти("СуммаНДС") = Неопределено Тогда
		ДанныеУчета.Колонки.Добавить("СуммаНДС",  Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,2)));
	КонецЕсли;
	
	НоваяТаблицаДанныеУчета = ДанныеУчета.СкопироватьКолонки();
	
	ОбъектыАренды = ДанныеУчета.Скопировать();
	ОбъектыАренды.Свернуть("ОбъектАренды");
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.АР_НачислениеАренднойПлаты") Тогда  
		ТаблицаСобственники = ПолучитьСобственниковПоАгентскойСхеме(КонецДня(ДокументОбъект.ОкончаниеПериода), ОбъектыАренды);
	Иначе 
		ТаблицаСобственники = ПолучитьСобственниковПоАгентскойСхеме(КонецДня(ДокументОбъект.Дата), ОбъектыАренды);
	КонецЕсли;
	
	ДолиРаспределенияНаОбъектАренды = ТаблицаСобственники.Скопировать();
	ДолиРаспределенияНаОбъектАренды.Свернуть("ОбъектАренды", "Доля");
	
	Для Каждого СтрокаДанныеУчета из ДанныеУчета Цикл 
		
		Если Не СтрокаДанныеУчета.Номенклатура.АР_АгентскаяСхема Тогда
			НоваяСтрока = НоваяТаблицаДанныеУчета.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанныеУчета);
			НоваяСтрока.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
												СтрокаДанныеУчета.Сумма,
												ДокументОбъект.СуммаВключаетНДС,
												УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаДанныеУчета.СтавкаНДС, Ложь));
			Продолжить;
		КонецЕсли;
		
		стрОтбор = Новый Структура("ОбъектАренды", СтрокаДанныеУчета.ОбъектАренды);
		
		НайденныеСтроки = ТаблицаСобственники.НайтиСтроки(стрОтбор);
		СтрокаОбщаяДоляРаспределения = ДолиРаспределенияНаОбъектАренды.НайтиСтроки(стрОтбор);
		
		Если НайденныеСтроки.Количество() = 0 Тогда 
			НоваяСтрока = НоваяТаблицаДанныеУчета.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанныеУчета);
			НоваяСтрока.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
												СтрокаДанныеУчета.Сумма,
												ДокументОбъект.СуммаВключаетНДС,
												УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаДанныеУчета.СтавкаНДС, Ложь));

		Иначе 
			СуммаДо      = СтрокаДанныеУчета.Сумма;
			СуммаОстаток = СтрокаДанныеУчета.Сумма;
			
			КоличествоДо      = СтрокаДанныеУчета.Количество;
			КоличествоОстаток = СтрокаДанныеУчета.Количество;
			
			СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
												СтрокаДанныеУчета.Сумма,
												ДокументОбъект.СуммаВключаетНДС,
												УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаДанныеУчета.СтавкаНДС, Ложь));
												
			СуммаНДСДо = Окр(СуммаНДС, 2);
			СуммаНДСОстаток = СуммаНДСДо;
						
			ОбщаяСуммаДолей = 0;
			
			Для Каждого ДанныеСобственника из НайденныеСтроки Цикл
				
				Контрагент         = Неопределено;
				ДоговорКонтрагента = Неопределено;
				СчетРасчетов       = Неопределено;
										
				Если ЗначениеЗаполнено(ДанныеСобственника.ДоговорКонтрагента) И ДанныеСобственника.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
					Если ДанныеСобственника.ДоговорКонтрагента.Организация = ДокументОбъект.Организация Тогда
						Контрагент         = ДанныеСобственника.Контрагент;
						ДоговорКонтрагента = ДанныеСобственника.ДоговорКонтрагента;
						
						СчетаУчета = АР_ОбщиеПроцедурыПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(ДокументОбъект.Организация, ДанныеСобственника.Контрагент, ДанныеСобственника.ДоговорКонтрагента);
						СчетРасчетов = СчетаУчета.СчетРасчетовСКомитентом;
					КонецЕсли;
				Иначе
					Если АР_ОбщиеПроцедурыПереопределяемый.УстановитьДоговорКонтрагента(ДанныеСобственника.ДоговорКонтрагента, ДанныеСобственника.Контрагент, ДокументОбъект.Организация, Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) Тогда
						Контрагент = ДанныеСобственника.Контрагент;
						СчетаУчета = АР_ОбщиеПроцедурыПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(ДокументОбъект.Организация, ДанныеСобственника.Контрагент, ДанныеСобственника.ДоговорКонтрагента);
						СчетРасчетов = СчетаУчета.СчетРасчетовСКомитентом;
					КонецЕсли;
				КонецЕсли;
				
				Если Контрагент = Неопределено или ДоговорКонтрагента = Неопределено Тогда 
					Продолжить;
				КонецЕсли;
				
				Результат = СуммаДо * ДанныеСобственника.Доля/100;
				РезультатРасчета = Окр(Результат, 2);
				
				РезультатКоличество = КоличествоДо * ДанныеСобственника.Доля/100;
				РезультатРасчетаКоличество = Окр(РезультатКоличество, 3);
				
				Если РезультатРасчета = 0 Тогда 
					Продолжить;
				КонецЕсли;
				
				ОбщаяСуммаДолей = ОбщаяСуммаДолей + ДанныеСобственника.Доля;
								
				НоваяСтрока = НоваяТаблицаДанныеУчета.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанныеУчета);
				НоваяСтрока.Контрагент         = Контрагент;
				НоваяСтрока.ДоговорКонтрагента = ДоговорКонтрагента;
				НоваяСтрока.СчетРасчетов       = СчетРасчетов;
				
				НоваяСтрока.Сумма = РезультатРасчета;
				НоваяСтрока.Количество = РезультатРасчетаКоличество;
				
				СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
												НоваяСтрока.Сумма,
												ДокументОбъект.СуммаВключаетНДС,
												УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаДанныеУчета.СтавкаНДС, Ложь));
												
				НоваяСтрока.СуммаНДС = Окр(СуммаНДС, 2);
					
				СуммаОстаток      = СуммаОстаток - НоваяСтрока.Сумма;
				КоличествоОстаток = КоличествоОстаток - НоваяСтрока.Количество;
				СуммаНДСОстаток   = СуммаНДСОстаток - НоваяСтрока.СуммаНДС;
			КонецЦикла;
			
			Если НЕ СуммаОстаток = 0 или НЕ КоличествоОстаток = 0 или НЕ СуммаНДСОстаток = 0 Тогда
				Если НЕ ОбщаяСуммаДолей = 100 И (НЕ СуммаОстаток = 0 ИЛИ НЕ КоличествоОстаток = 0) Тогда 
					НоваяСтрока = НоваяТаблицаДанныеУчета.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанныеУчета);
					НоваяСтрока.Сумма      = 0;
					НоваяСтрока.Количество = 0;
					НоваяСтрока.СуммаНДС   = 0;
				КонецЕсли;
				
				НоваяСтрока.Сумма      = НоваяСтрока.Сумма + СуммаОстаток;
				НоваяСтрока.Количество = НоваяСтрока.Количество + КоличествоОстаток;
				НоваяСтрока.СуммаНДС   = НоваяСтрока.СуммаНДС + СуммаНДСОстаток;
				
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	Возврат НоваяТаблицаДанныеУчета;
		
КонецФункции

Функция ПолучитьСобственниковПоАгентскойСхеме(Период, ОбъектыАренды)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АР_ОбъектыАренды.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ втОбъектыНедвижимости
		|ИЗ
		|	Справочник.АР_ОбъектыАренды КАК АР_ОбъектыАренды
		|ГДЕ
		|	АР_ОбъектыАренды.Ссылка В(&ОбъектыАренды)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АР_СобственникиОбъектовАрендыСрезПоследних.Собственник КАК Собственник,
		|	АР_СобственникиОбъектовАрендыСрезПоследних.ОбъектАренды КАК ОбъектАренды
		|ПОМЕСТИТЬ втСобственники
		|ИЗ
		|	втОбъектыНедвижимости КАК втОбъектыНедвижимости
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АР_СобственникиОбъектовАренды.СрезПоследних(&Период, ОбъектАренды В (&ОбъектыАренды)) КАК АР_СобственникиОбъектовАрендыСрезПоследних
		|		ПО втОбъектыНедвижимости.Ссылка = АР_СобственникиОбъектовАрендыСрезПоследних.ОбъектАренды
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Собственник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втОбъектыНедвижимости.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ втОбъектыБезСобственников
		|ИЗ
		|	втОбъектыНедвижимости КАК втОбъектыНедвижимости
		|ГДЕ
		|	НЕ втОбъектыНедвижимости.Ссылка В
		|				(ВЫБРАТЬ
		|					втСобственники.ОбъектАренды КАК ОбъектАренды
		|				ИЗ
		|					втСобственники КАК втСобственники
		|				СГРУППИРОВАТЬ ПО
		|					втСобственники.ОбъектАренды)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втСобственники.Собственник КАК Собственник,
		|	втСобственники.ОбъектАренды КАК ОбъектАренды
		|ПОМЕСТИТЬ втСписокСобственников
		|ИЗ
		|	втСобственники КАК втСобственники
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	АР_СобственникиОбъектовАрендыСрезПоследних.Собственник,
		|	втОбъектыБезСобственников.Ссылка
		|ИЗ
		|	втОбъектыБезСобственников КАК втОбъектыБезСобственников,
		|	РегистрСведений.АР_СобственникиОбъектовАренды.СрезПоследних(&Период, ОбъектАренды = ЗНАЧЕНИЕ(Справочник.АР_ОбъектыАренды.ПустаяСсылка)) КАК АР_СобственникиОбъектовАрендыСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втСписокСобственников.ОбъектАренды КАК ОбъектАренды,
		|	АР_СобственникиОбъектовНедвижимостиСобственники.Собственник КАК Контрагент,
		|	АР_СобственникиОбъектовНедвижимостиСобственники.АгентскийДоговор КАК ДоговорКонтрагента,
		|	АР_СобственникиОбъектовНедвижимостиСобственники.АгентскаяСхема КАК АгентскаяСхема,
		|	АР_СобственникиОбъектовНедвижимостиСобственники.Доля КАК Доля
		|ИЗ
		|	втСписокСобственников КАК втСписокСобственников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АР_СобственникиОбъектовНедвижимости.Собственники КАК АР_СобственникиОбъектовНедвижимостиСобственники
		|		ПО втСписокСобственников.Собственник = АР_СобственникиОбъектовНедвижимостиСобственники.Ссылка
		|ГДЕ
		|	АР_СобственникиОбъектовНедвижимостиСобственники.АгентскаяСхема = ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	Доля УБЫВ,
		|	АР_СобственникиОбъектовНедвижимостиСобственники.Собственник.Наименование";
	
	Запрос.УстановитьПараметр("ОбъектыАренды", ОбъектыАренды);
	Запрос.УстановитьПараметр("Период",        Период);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
	
	Возврат ВыборкаДетальныеЗаписи;
	
КонецФункции

Процедура УстановитьПризнакВключенияНДСВСтоимость(Объект, ИмяТабличнойЧасти, ДанныеУчета = Неопределено, СообщатьОНесоответствии = Истина) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("АР_ИспользоватьСхемуОпределенияСтавокНДСПоАрендеНаОсновеДоговора") Тогда
		Возврат;
	КонецЕсли;
	
	СписокУслуг = Новый СписокЗначений;
	
	Если ДанныеУчета = Неопределено Тогда
		СписокУслуг.ЗагрузитьЗначения(Объект[ИмяТабличнойЧасти].Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	Иначе
		СписокУслуг.ЗагрузитьЗначения(ДанныеУчета.ВыгрузитьКолонку("Номенклатура"));
	КонецЕсли;
	ЕстьУслуги = Ложь;
	Для каждого Элемент Из СписокУслуг Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			ЕстьУслуги = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Не ЕстьУслуги Тогда
		СписокУслуг.Добавить(Константы.АР_ОсновнаяУслугаПоАренде.Получить());
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтатусыОбъектовАренды.Регистратор.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	СтатусыОбъектовАренды.Регистратор.ДокументБезНДС КАК ДокументБезНДС
	|ПОМЕСТИТЬ ВТПризнаки
	|ИЗ
	|	РегистрСведений.АР_СтатусыОбъектовАренды.СрезПоследних(
	|			&НачалоПериодаКД,
	|			Договор = &Договор
	|				И Услуга В (&СписокУслуг)) КАК СтатусыОбъектовАренды
	|ГДЕ
	|	СтатусыОбъектовАренды.ДатаНачалаАренды <= &КонецПериода
	|	И СтатусыОбъектовАренды.ДатаОкончанияАренды >= &НачалоПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтатусыОбъектовАренды.Регистратор.СуммаВключаетНДС,
	|	СтатусыОбъектовАренды.Регистратор.ДокументБезНДС
	|ИЗ
	|	РегистрСведений.АР_СтатусыОбъектовАренды.СрезПоследних(
	|			&КонецПериода,
	|			Договор = &Договор
	|				И Услуга В (&СписокУслуг)) КАК СтатусыОбъектовАренды
	|ГДЕ
	|	СтатусыОбъектовАренды.ДатаНачалаАренды <= &КонецПериода
	|	И СтатусыОбъектовАренды.ДатаОкончанияАренды >= &НачалоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТПризнаки.СуммаВключаетНДС КАК СуммаВключаетНДС
	|ИЗ
	|	ВТПризнаки КАК ВТПризнаки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтатусыОбъектовАренды.Регистратор.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	СтатусыОбъектовАренды.Регистратор.ДокументБезНДС КАК ДокументБезНДС
	|ИЗ
	|	РегистрСведений.АР_СтатусыОбъектовАренды.СрезПоследних(
	|			&КонецПериода,
	|			Договор = &Договор
	|				И Услуга В (&СписокУслуг)) КАК СтатусыОбъектовАренды
	|ГДЕ
	|	СтатусыОбъектовАренды.ДатаНачалаАренды <= &КонецПериода
	|	И СтатусыОбъектовАренды.ДатаОкончанияАренды >= &НачалоПериода";
	
	НачалоПериода = Объект.НачалоПериода;
	КонецПериода = Объект.ОкончаниеПериода;
	
	Запрос.УстановитьПараметр("НачалоПериодаКД", КонецДня(НачалоПериода));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("Договор", Объект.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("СписокУслуг", СписокУслуг);
	
	РезультатПакет = Запрос.ВыполнитьПакет();
	Выборка = РезультатПакет[1].Выбрать();
	Если Выборка.Количество() > 1 Тогда
		ПредставлениеПериода = ВыборПериодаКлиентСервер.ПолучитьПредставлениеПериодаОтчета(Объект.ВидПериода, Объект.НачалоПериода, Объект.ОкончаниеПериода); 
		ТекстСообщения = "По договору """ + Объект.ДоговорКонтрагента + """ (контрагент """ + Объект.Контрагент + """) обнаружены разные признаки включения НДС за " + ПредставлениеПериода;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект);
	КонецЕсли;
	Выборка = РезультатПакет[2].Выбрать();
	Если Выборка.Следующий() Тогда
		Объект.СуммаВключаетНДС = Выборка.СуммаВключаетНДС;		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПризнакДокументБезНДС(Объект, ИмяТабличнойЧасти, ДанныеУчета) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("АР_ИспользоватьСхемуОпределенияСтавокНДСПоАрендеНаОсновеДоговора") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеУчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДокументБезНДС = ДанныеУчета.Скопировать(,"ДокументБезНДС");
	ТаблицаДокументБезНДС.Свернуть("ДокументБезНДС");
	
	Если ТаблицаДокументБезНДС.Количество() = 1 Тогда
		Объект.ДокументБезНДС = ТаблицаДокументБезНДС[0].ДокументБезНДС;
	ИначеЕсли ТаблицаДокументБезНДС.Количество() > 1 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Контрагент """ + Объект.Контрагент + """, договор """ + Объект.ДоговорКонтрагента + """: обнаружены разные признаки включения НДС за период по услугам", Объект);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСрокОплатыСчетаНаАренду(СчетНаАренду) Экспорт
	
	ДатаСчета = ?(ЗначениеЗаполнено(СчетНаАренду.Дата), СчетНаАренду.Дата, ТекущаяДата());
	
	СрокОплаты = '00010101';
	Если СчетНаАренду.ВидОперации = Перечисления.АР_ВидыОперацийСчетНаАренду.ОплатаАренды Тогда
		Если ЗначениеЗаполнено(СчетНаАренду.ДоговорКонтрагента) Тогда
			ПараметрыНачисленияПени = АР_ПроцедурыНачисления.ПолучитьСрокиОплатыИПараметрыНачисленияПеней(СчетНаАренду.ДоговорКонтрагента, СчетНаАренду.Дата);
			Если ПараметрыНачисленияПени = Неопределено Тогда
				СрокОплаты = СрокиОплатыДокументов.СрокОплатыНовогоСчетаПокупателю(ДатаСчета);
			Иначе
				Для каждого СтрокаТЧ Из СчетНаАренду.Состав Цикл
					Если СчетНаАренду.ДоговорКонтрагента.АР_ВестиВзаиморасчетыПоУслугам Тогда
						Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
							Продолжить;
						КонецЕсли;
						СрокОплатыПоНоменклатуре = ПолучитьСрокОплатыПоАренде(СчетНаАренду, СтрокаТЧ.Номенклатура, ПараметрыНачисленияПени);
					Иначе
						СрокОплатыПоНоменклатуре = ПолучитьСрокОплатыПоАренде(СчетНаАренду, Справочники.Номенклатура.ПустаяСсылка(), ПараметрыНачисленияПени);
					КонецЕсли;
					Если ЗначениеЗаполнено(СрокОплатыПоНоменклатуре) Тогда
						Если Не ЗначениеЗаполнено(СрокОплаты) Тогда
							СрокОплаты = СрокОплатыПоНоменклатуре;
						Иначе
							СрокОплаты = Мин(СрокОплаты, СрокОплатыПоНоменклатуре);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			СрокОплаты = СрокиОплатыДокументов.СрокОплатыНовогоСчетаПокупателю(ДатаСчета);
		КонецЕсли;
	Иначе
		СрокОплаты = СрокиОплатыДокументов.СрокОплатыНовогоСчетаПокупателю(ДатаСчета);
	КонецЕсли;
	
	Возврат СрокОплаты;

КонецФункции

Функция ПолучитьСрокОплатыПоАренде(СчетНаАренду, Номенклатура, ПараметрыНачисленияПени)
	
	ДатаСчета = ?(ЗначениеЗаполнено(СчетНаАренду.Дата), СчетНаАренду.Дата, ТекущаяДата());
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		СтрокиПараметров = ПараметрыНачисленияПени.НайтиСтроки(Новый Структура("Услуга", Номенклатура));
		Если СтрокиПараметров.Количество() = 0 Тогда
			Если Номенклатура.АР_ПостояннаяЧастьОплаты Тогда
				СтрокиПараметров = ПараметрыНачисленияПени.НайтиСтроки(Новый Структура("НазначениеСрока", Перечисления.АР_ВариантыНазначенияСрокаОплаты.ПостояннаяЧасть));
			Иначе
				СтрокиПараметров = ПараметрыНачисленияПени.НайтиСтроки(Новый Структура("НазначениеСрока", Перечисления.АР_ВариантыНазначенияСрокаОплаты.ПеременнаяЧасть));				
			КонецЕсли;
			Если СтрокиПараметров.Количество() = 0 Тогда
				СтрокиПараметров = ПараметрыНачисленияПени.НайтиСтроки(Новый Структура("НазначениеСрока", Перечисления.АР_ВариантыНазначенияСрокаОплаты.Общий));
			КонецЕсли;
		КонецЕсли;
	Иначе
		СтрокиПараметров = ПараметрыНачисленияПени.НайтиСтроки(Новый Структура("НазначениеСрока", Перечисления.АР_ВариантыНазначенияСрокаОплаты.Общий));
		Если СтрокиПараметров.Количество() = 0 Тогда
			СтрокиПараметров = ПараметрыНачисленияПени.НайтиСтроки(Новый Структура("НазначениеСрока", Перечисления.АР_ВариантыНазначенияСрокаОплаты.ПостояннаяЧасть));
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокиПараметров.Количество() = 0 Тогда
		Возврат СрокиОплатыДокументов.СрокОплатыНовогоСчетаПокупателю(ДатаСчета);
	КонецЕсли;
	
	СтрокаПараметров = СтрокиПараметров[0];
	
	Если СтрокаПараметров.СпособОпределенияСрокаОплаты = Перечисления.АР_СпособыРасчетаПросрочки.ПоДатеСчета Тогда
		СрокОплатыПоАренде = СчетНаАренду.Дата;
		СрокОплатыПоАренде = АР_ОбщиеПроцедуры.ДобавитьКДатеДни(СрокОплатыПоАренде, СтрокаПараметров.КоличествоДнейОтДатыСчетаАкта, СтрокаПараметров.УчитыватьТолькоРабочиеДниОтДатыСчетаАкта);
	ИначеЕсли СтрокаПараметров.СпособОпределенияСрокаОплаты = Перечисления.АР_СпособыРасчетаПросрочки.ПоПериодуНачисления Тогда
		СрокОплатыПоАренде = СчетНаАренду.НачалоПериода;
		Периодичность = СчетНаАренду.ДоговорКонтрагента.АР_Периодичность;
		Если Не ЗначениеЗаполнено(Периодичность) Тогда
			Периодичность = Константы.АР_ПериодНачисленияАренднойПлаты.Получить();
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Периодичность) Тогда
			Периодичность = Перечисления.Периодичность.Месяц;
		КонецЕсли;
		СрокОплатыПоАренде = АР_ОбщиеПроцедуры.ДобавитьПериод(СрокОплатыПоАренде, Периодичность, СтрокаПараметров.ПериодСрокаОплаты);
		СрокОплатыПоАренде = АР_ОбщиеПроцедуры.ДобавитьКДатеДни(СрокОплатыПоАренде, ?(ЗначениеЗаполнено(СтрокаПараметров.СрокОплаты), СтрокаПараметров.СрокОплаты-1, 0), Ложь);
	Иначе
		СрокОплатыПоАренде = СрокиОплатыДокументов.СрокОплатыНовогоСчетаПокупателю(ДатаСчета);
	КонецЕсли;
	Если Константы.АР_ПриРасчетеПениСрокОплатыРабочийДень.Получить() Тогда
		СрокОплатыПоАренде = АР_ОбщиеПроцедуры.ДобавитьКДатеДни(СрокОплатыПоАренде, 0, Истина);
	КонецЕсли;
	Возврат СрокОплатыПоАренде;
	
КонецФункции

