
// Функция позволяет выбрать период, используя стандартный диалог выбора периода
Процедура ВыборПериодаПоДоговору(НачалоПериода, КонецПериода, ДанныеПериодичности = Неопределено, ОбработчикОповещения = Неопределено) Экспорт

	Диалог = Новый ДиалогРедактированияСтандартногоПериода;
	
	Если ТипЗнч(ДанныеПериодичности) = Тип("ПеречислениеСсылка.Периодичность") Тогда
		Периодичность = ДанныеПериодичности;
	ИначеЕсли ТипЗнч(ДанныеПериодичности) = Тип("СправочникСсылка.АР_СценарииПланирования") Тогда
		Периодичность = АР_ОбщиеПроцедуры.ЗначениеРеквизитаОбъекта(ДанныеПериодичности, "Периодичность");
	ИначеЕсли ТипЗнч(ДанныеПериодичности) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Если ЗначениеЗаполнено(ДанныеПериодичности) И АР_ОбщиеПроцедуры.ЗначениеРеквизитаОбъекта(ДанныеПериодичности, "АР_ВестиВзаиморасчетыПоПериодам") Тогда
			Периодичность = АР_ОбщиеПроцедуры.ЗначениеРеквизитаОбъекта(ДанныеПериодичности, "АР_Периодичность");
		Иначе
			Периодичность = Неопределено;
		КонецЕсли;
	Иначе
		Периодичность = Неопределено;	
	КонецЕсли;
	
	Если Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
		Период = Новый СтандартныйПериод(ВариантСтандартногоПериода.ЭтотГод);	
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
		Период = Новый СтандартныйПериод(ВариантСтандартногоПериода.ЭтотМесяц);	
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
		Период = Новый СтандартныйПериод(ВариантСтандартногоПериода.ЭтотКвартал);	
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
		Период = Новый СтандартныйПериод(ВариантСтандартногоПериода.ЭтоПолугодие);	
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
		Период = Новый СтандартныйПериод(ВариантСтандартногоПериода.ЭтаНеделя);	
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
		Период = Новый СтандартныйПериод(ВариантСтандартногоПериода.Сегодня);
	Иначе
		Период = Новый СтандартныйПериод(НачалоПериода, КонецПериода);
	КонецЕсли;
	
	Диалог.Период = Период;
	
	ДополнительныеПараметры = Новый Структура;
	ИнтервалДат = Новый Структура("НачалоПериода, КонецПериода", НачалоПериода, КонецПериода);
	ДополнительныеПараметры.Вставить("ИнтервалДат", ИнтервалДат);
	ДополнительныеПараметры.Вставить("ОбработчикОповещения", ОбработчикОповещения);
	
	Диалог.Показать(ОбработчикОповещения);
	
КонецПроцедуры

Процедура СоздатьСчетНаАрендуНаОсновании(Основание) Экспорт
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.АР_ЗаключениеДоговораАренды")
		ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.АР_ДополнительноеСоглашение") Тогда
		
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить(1, "Депозит");
		СписокВыбора.Добавить(2, "Постоянная часть аренды");
		СписокВыбора.Добавить(3, "Переменная часть аренды");
		СписокВыбора.Добавить(4, "Пени");
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Основание", Основание);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьСчетНаАрендуНаОснованииПродолжение", ЭтотОбъект, ДополнительныеПараметры);
	
		СтруктураПараметров = Новый Структура("Заголовок, Список",
			НСтр("ru = 'Выберите способ заполнения'"),
			СписокВыбора);
		
		ОткрытьФорму("ОбщаяФорма.АР_ФормаВыбораИзСписка", СтруктураПараметров,,,,, ОписаниеОповещения);
		
	Иначе
		Возврат;		
	КонецЕсли;
		
КонецПроцедуры

Процедура СоздатьСчетНаАрендуНаОснованииПродолжение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Основание = ДополнительныеПараметры.Основание;
	
	ПостояннаяЧастьОплаты = Ложь;
	Если ВыбранноеЗначение <> Неопределено Тогда
		Если ВыбранноеЗначение.Значение = 1 Тогда
			Если Не АР_ОбщиеПроцедуры.ЗначениеРеквизитаОбъекта(Основание, "УчитыватьЗалог") Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("По договору не ведется учет депозита. Ввод счета на аренду невозможен");
				Отказ = Истина;
				Возврат;	
			КонецЕсли;
			ВидОперации = ПредопределенноеЗначение("Перечисление.АР_ВидыОперацийСчетНаАренду.ОплатаДепозита");
		ИначеЕсли ВыбранноеЗначение.Значение = 2 Тогда
			ВидОперации = ПредопределенноеЗначение("Перечисление.АР_ВидыОперацийСчетНаАренду.ОплатаАренды");
			ПостояннаяЧастьОплаты = Истина;
		ИначеЕсли ВыбранноеЗначение.Значение = 3 Тогда 
			ВидОперации = ПредопределенноеЗначение("Перечисление.АР_ВидыОперацийСчетНаАренду.ОплатаАренды");
		Иначе
			ВидОперации = ПредопределенноеЗначение("Перечисление.АР_ВидыОперацийСчетНаАренду.ОплатаПени");
		КонецЕсли;
		
	Иначе
		Возврат;			
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Основание", Основание);
	Форма = ПолучитьФорму("Документ.АР_СчетНаАренду.Форма.ФормаДокумента", ПараметрыФормы);
	Если Форма.Открыта() Тогда
		Форма.Активизировать();
	Иначе 
		ДанныеФормы = Форма.Объект;
		АР_ОбщиеПроцедуры.СоздатьСчетНаАренду(Основание, ВидОперации, ПостояннаяЧастьОплаты, ДанныеФормы);
		КопироватьДанныеФормы(ДанныеФормы, Форма.Объект);
		Форма.Открыть();
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////
// Печать шаблонов Word

// Функция заполняет и открывает вородовский шаблон по переданному документу
Функция ПечатьШаблонаВорд(ДанныеКоманды, СсылкаНаОбъект, УникальныйИдентификатор = Неопределено) Экспорт
	
	Если Не мИспользоватьМенеджерЛицензий Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Нарушение прав доступа!'"));
		Возврат Неопределено;
	ИначеЕсли Не ДоступнаРаботаMSOffice(1) Тогда
		Возврат Неопределено;		
	КонецЕсли;
	
	ЭтоВебКлиент = Ложь;
	#Если ВебКлиент	Тогда
	ЭтоВебКлиент = Истина;	
	#КонецЕсли

	ОбрабатыватьШаблоныИПланировкиНаКлиенте = НЕ ЭтоВебКлиент И АР_ОбщиеПроцедуры.ПолучитьЗначениеКонстанты("АР_ОбрабатыватьШаблоныИПланировкиНаКлиенте");
	
	Если НЕ ОбрабатыватьШаблоныИПланировкиНаКлиенте Тогда
		ДанныеФайла = АР_ОбщиеПроцедуры.ПечатьШаблонаВорд(ДанныеКоманды, СсылкаНаОбъект, мИспользоватьМенеджерЛицензий);
		Если Не ДанныеФайла = Неопределено Тогда
			
			СохранятьКак = АР_ОбщиеПроцедурыКлиентСервер.ПолучитьИмяФайлаШаблона(ДанныеФайла.Шаблон, ДанныеФайла.ИмяФайла);
			Параметры = Новый Структура;
			Параметры.Вставить("ДанныеФайла", ДанныеФайла);
			Параметры.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
			Параметры.Вставить("СохранятьКак", СохранятьКак);
			
			Если ЭтоВебКлиент И НЕ АР_ОбщиеПроцедуры.ПредлагатьСохранятьДокументWord() Тогда
				ПечатьШаблонаВордРасширениеПредложено(Ложь, Параметры);
			Иначе
				ОписаниеОповещения = Новый ОписаниеОповещения("ПечатьШаблонаВордРасширениеПредложено", ЭтотОбъект, Параметры);
				ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(ОписаниеОповещения);
			КонецЕсли;
				
		КонецЕсли;
	Иначе
		Шаблон = АР_ОбщиеПроцедуры.ПолучитьШаблон(ДанныеКоманды.Код);
		Если ЗначениеЗаполнено(Шаблон) Тогда
			АР_ОбщиеПроцедурыКлиентСервер.ПечатьШаблонаВорд(Шаблон, СсылкаНаОбъект, мИспользоватьМенеджерЛицензий);	
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции	

Процедура ПечатьШаблонаВордРасширениеПредложено(РасширениеРаботыСФайламиПодключено, ДополнительныеПараметры) Экспорт
	Перем ПолноеИмяФайла;
	
	ЭтоВебКлиент = Ложь;
	#Если ВебКлиент	Тогда
	ЭтоВебКлиент = Истина;	
	#КонецЕсли
	
	ДанныеФайла = ДополнительныеПараметры.ДанныеФайла;
	СсылкаНаОбъект = ДополнительныеПараметры.СсылкаНаОбъект;
	СохранятьКак = ДополнительныеПараметры.СохранятьКак;

	Если РасширениеРаботыСФайламиПодключено Тогда
		РабочийКаталогПользователя = РаботаСФайламиСлужебныйКлиент.РабочийКаталогПользователя();
		Если ПустаяСтрока(РабочийКаталогПользователя) Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не задан рабочий каталог'"));
			Возврат;
		КонецЕсли;
		
		ДокументНеНужноСохранять = ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.АР_ЗаявкаНаОбслуживание")
			ИЛИ ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.АР_ВыполнениеРаботПоОбслуживанию")
			ИЛИ ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.АР_ВводПараметровЭксплуатацииОбъектов");
			
		ПолныйПуть = "";
		
		Файл = Новый Файл(СохранятьКак);
		ИмяФайла = Файл.Имя;
		Если НЕ ЭтоВебКлиент Тогда
			ФайлМожноОткрывать = РаботаСФайламиСлужебныйКлиент.ПолучитьФайлВРабочийКаталог(
				ДанныеФайла.СсылкаНаДвоичныеДанныеФайла,
				"",
				ТекущаяДата(),
				ИмяФайла,
				РабочийКаталогПользователя,
				ПолныйПуть);
		Иначе
			ФайлМожноОткрывать = Истина;
			ПолныйПуть = РабочийКаталогПользователя + ИмяФайла;
		КонецЕсли;
		Если ФайлМожноОткрывать Тогда
			Попытка
				Если НЕ ЭтоВебКлиент И АР_ОбщиеПроцедуры.ПредлагатьСохранятьДокументWord() И НЕ ДокументНеНужноСохранять Тогда
					ШаблонCOM = ПолучитьCOMОбъект(ПолныйПуть);
					Приложение = ШаблонCOM.Application;
					Попытка
						ШаблонCOM.Close();
					Исключение
					КонецПопытки;
				Иначе
					Приложение = Неопределено;
					ШаблонCOM = Неопределено;
				КонецЕсли;
			Исключение
				Приложение = Неопределено;
				ШаблонCOM = Неопределено;
			КонецПопытки;
			Оповещение = Новый ОписаниеОповещения("ПослеЗапускаПриложения", АР_ОбщиеПроцедурыКлиент); 
			НачатьЗапускПриложения(Оповещение, ПолныйПуть);
		КонецЕсли; 
		
		ДополнительныеПараметры.Вставить("ПолноеИмяФайла", ПолныйПуть);
		ДополнительныеПараметры.Вставить("Приложение", Приложение);
		
		Если АР_ОбщиеПроцедуры.ПредлагатьСохранятьДокументWord() И НЕ ДокументНеНужноСохранять Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ПечатьШаблонаВордСохранениеФайлаВБазе", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Вы желаете сохранить сформированный документ в базе?'"), РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		
	Иначе
		ПолучитьФайл(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, СохранятьКак, Истина);
	КонецЕсли;
	                                                                        
КонецПроцедуры

Процедура ПечатьШаблонаВордСохранениеФайлаВБазе(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЭтоВебКлиент = Ложь;
		#Если ВебКлиент	Тогда
		ЭтоВебКлиент = Истина;	
		#КонецЕсли
		
		ДанныеФайла = ДополнительныеПараметры.ДанныеФайла;
		СсылкаНаОбъект = ДополнительныеПараметры.СсылкаНаОбъект;
		СохранятьКак = ДополнительныеПараметры.СохранятьКак;
		
		Приложение = ДополнительныеПараметры.Приложение;
		
		Если НЕ Приложение = Неопределено Тогда
			Попытка
				Попытка
					ДокументыWord = Приложение.Documents;
				Исключение
					Документ = ПолучитьCOMОбъект(СохранятьКак);
					Приложение = Документ.Application;
					ДокументыWord = Приложение.Documents;
				КонецПопытки;
				
				Индекс = 0;
				Для Индекс = 1 По ДокументыWord.Count Цикл
					Документ = ДокументыWord.Item(Индекс);
					Если Документ.FullName = СохранятьКак Тогда
						Документ.Save();
						ДокументыWord.Item(Индекс).Close();
						Документ = Неопределено;
						ДокументыWord = Неопределено;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если Приложение.Documents.Count = 0 Тогда
					Приложение.Quit(0);
				КонецЕсли;
				Документ = Неопределено;
				Приложение = Неопределено;
				ДокументыWord = Неопределено;
			Исключение
				Документ = Неопределено;
				Приложение = Неопределено;
				ДокументыWord = Неопределено;
			КонецПопытки;
		КонецЕсли;
		
		Попытка
			Файл = Новый Файл(СохранятьКак);
			ИмяБезРасширения = Файл.ИмяБезРасширения;
			Расширение = Файл.Расширение;
			
			Если ЭтоВебКлиент Тогда
				СсылкаНаДвоичныеДанныеФайла = ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
			Иначе
				ДвоичныеДанные = Новый ДвоичныеДанные(СохранятьКак);
				СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
			КонецЕсли;
			
			ПараметрыФайла = Новый Структура;
			ПараметрыФайла.Вставить("ВладелецФайлов",              СсылкаНаОбъект);
			ПараметрыФайла.Вставить("Автор",                       Неопределено);
			ПараметрыФайла.Вставить("ИмяБезРасширения",            ИмяБезРасширения);
			ПараметрыФайла.Вставить("РасширениеБезТочки",          Расширение);
			ПараметрыФайла.Вставить("ВремяИзменения",              Неопределено);
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
			
			ПрисоединенныйФайл = РаботаСФайламиСлужебныйВызовСервера.ДобавитьФайл(ПараметрыФайла, СсылкаНаДвоичныеДанныеФайла);
			Оповестить("Запись_ПрисоединенныйФайл", Новый Структура("ЭтоНовый", Истина), 
			ПрисоединенныйФайл);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Сохранение файла не удалось. Перед сохранением файла в базе сохраните и закройте файл Word");
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	Иначе
		ДополнительныеПараметры.Приложение = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Функция ВыполнитьКомандуПечатиПланировок(ОписаниеКоманды) Экспорт
	
	пВыполнитьКомандуПечатиПланировок(ОписаниеКоманды);
	
КонецФункции

Процедура пВыполнитьКомандуПечатиПланировок(ОписаниеКоманды)
	
	Если Не ДоступнаРаботаMSOffice(2) Тогда
		Возврат;		
	КонецЕсли;
	
	ЭтоВебКлиент = Ложь;
	#Если ВебКлиент	Тогда
	ЭтоВебКлиент = Истина;	
	#КонецЕсли

	ОбрабатыватьШаблоныИПланировкиНаКлиенте = НЕ ЭтоВебКлиент И АР_ОбщиеПроцедуры.ПолучитьЗначениеКонстанты("АР_ОбрабатыватьШаблоныИПланировкиНаКлиенте");
	
	Если мИспользоватьМенеджерЛицензий Тогда
		Для Каждого ОбъектПечати Из ОписаниеКоманды.ОбъектыПечати Цикл 
			
			Если НЕ ОбрабатыватьШаблоныИПланировкиНаКлиенте Тогда
				
				МассивДанных = АР_ОбщиеПроцедуры.ПечатьПланировок(ОбъектПечати);
				
				Если НЕ ЗначениеЗаполнено(МассивДанных) Тогда
					Продолжить;
				КонецЕсли;	
					
				Для Каждого Данные Из МассивДанных Цикл
					СохранятьКак = АР_ОбщиеПроцедурыКлиентСервер.ПолучитьИмяФайлаПланировки(Данные.ФайлПланировки, "Печать планировок");
					Файл = Новый Файл(СохранятьКак);
					ИмяФайла = Файл.Имя;
					
					ДополнительныеПараметры = Новый Структура;
					ДополнительныеПараметры.Вставить("ДанныеФайла", Данные);
					ДополнительныеПараметры.Вставить("СохранятьКак", СохранятьКак);
					ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
					
					Если ЭтоВебКлиент Тогда
						СформироватьОтчетРасширениеПредложено(Ложь, ДополнительныеПараметры);
					Иначе
						ОписаниеОповещения = Новый ОписаниеОповещения("СформироватьОтчетРасширениеПредложено", ЭтотОбъект, ДополнительныеПараметры);
						ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(ОписаниеОповещения);
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				
				ДанныеПланировок = АР_ОбщиеПроцедуры.ПолучитьДанныеПланировок(ОбъектПечати);
				МассивДанных = АР_ОбщиеПроцедурыКлиентСервер.ПечатьПланировок(ДанныеПланировок, ОбъектПечати);
				
				Для Каждого Данные Из МассивДанных Цикл
					СохранятьКак = АР_ОбщиеПроцедурыКлиентСервер.ПолучитьИмяФайлаПланировки(Данные.ФайлПланировки, "Печать планировок");
					ДвоичныеДанные = ПолучитьИзВременногоХранилища(Данные.АдресХранилища);
					Оповещение = Новый ОписаниеОповещения("ПродолжитьПослеЗаписиДвоичныхДанных", АР_ОбщиеПроцедурыКлиент, Новый Структура("СохранятьКак", СохранятьКак)); 
					ДвоичныеДанные.НачатьЗапись(Оповещение, СохранятьКак);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
	Иначе
		Сообщить("Конфигурация <Аренда и управление недвижимостью> работает в демонстрационном режиме!");
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьОтчетРасширениеПредложено(РасширениеРаботыСФайламиПодключено, ДополнительныеПараметры) Экспорт
	
	ДанныеФайла = ДополнительныеПараметры.ДанныеФайла;
	СохранятьКак = ДополнительныеПараметры.СохранятьКак;
	ИмяФайла = ДополнительныеПараметры.ИмяФайла;

	Если РасширениеРаботыСФайламиПодключено Тогда
		РабочийКаталогПользователя = РаботаСФайламиСлужебныйКлиент.РабочийКаталогПользователя();
		Если ПустаяСтрока(РабочийКаталогПользователя) Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не задан рабочий каталог'"));
			Возврат;
		КонецЕсли;
		
		ПолныйПуть = "";
		ФайлМожноОткрывать = РаботаСФайламиСлужебныйКлиент.ПолучитьФайлВРабочийКаталог(
				ДанныеФайла.СсылкаНаДвоичныеДанныеФайла,
				"",
				ТекущаяДата(),
				ИмяФайла,
				РабочийКаталогПользователя,
				ПолныйПуть
			);

		Если ФайлМожноОткрывать Тогда
			Оповещение = Новый ОписаниеОповещения("ПослеЗапускаПриложения", АР_ОбщиеПроцедурыКлиент); 
			НачатьЗапускПриложения(Оповещение, ПолныйПуть);
		КонецЕсли; 
		
	Иначе
		ПолучитьФайл(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, СохранятьКак, Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция ВыполнитьКомандуПечатиШаблоновWord(ОписаниеКоманды) Экспорт
	
	ОбъектыПечати = ОписаниеКоманды.ОбъектыПечати;
	Если ОбъектыПечати.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	// Открыть форму выбора печатных форм
	Параметры = Новый Структура;
	Параметры.Вставить("Объект", ОбъектыПечати[0]);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОписаниеКоманды", ОписаниеКоманды);
	ДополнительныеПараметры.Вставить("УникальныйИдентификатор", ОписаниеКоманды.Форма.УникальныйИдентификатор);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборПечатнойФормыПродолжение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("ОбщаяФорма.АР_ФормаВыбораПечатныхФормУправляемая", Параметры,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
КонецФункции

Процедура ВыборПечатнойФормыПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ОписаниеКоманды = ДополнительныеПараметры.ОписаниеКоманды;
	Если Результат = Неопределено Тогда
		Возврат;
	Иначе
		Для Каждого ОбъектПечати Из ОписаниеКоманды.ОбъектыПечати Цикл 
			АР_ОбщиеПроцедурыКлиент.ПечатьШаблонаВорд(Результат, ОбъектПечати, ДополнительныеПараметры.УникальныйИдентификатор);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры 

Процедура ПродолжитьПослеЗаписиДвоичныхДанных(Параметры) Экспорт
	Оповещение = Новый ОписаниеОповещения("ПослеЗапускаПриложения", АР_ОбщиеПроцедурыКлиент); 
	НачатьЗапускПриложения(Оповещение, Параметры.СохранятьКак);
КонецПроцедуры

Процедура ПослеЗапускаПриложения(ВыбранныйЭлемент, Параметры) Экспорт
	// Процедура заглушка, т.к. НачатьЗапускПриложения требуется наличие обработчика оповещения.
КонецПроцедуры

//////////////////////////////////////////////////////////////////
// Печать планировок

Процедура УстановитьМакросыВФайлПланировки(ПутьКФайлу, ТолькоОсновныеМакросы = Ложь) Экспорт
	
	#Если ВебКлиент Тогда
	Возврат;	
	#КонецЕсли
	
	xlExcel8 = 56; // формат xls
	xlOpenXMLWorkbook = 51; // формат xlsx
	xlOpenXMLWorkbookMacroEnabled =	52; // Формат xlsm
	
	Файл = Новый Файл(ПутьКФайлу);
	Если Не Файл.Существует() Тогда
		Возврат;
	КонецЕсли;
	Если ВРег(Файл.Расширение) = ".XLSX" Тогда
		Расширение = "xlsm";
		ФорматФайла = xlOpenXMLWorkbookMacroEnabled;
	Иначе
		Расширение = Файл.Расширение;
		Если ВРег(Файл.Расширение) = ".XLS" Тогда
			ФорматФайла = xlExcel8;
		ИначеЕсли ВРег(Файл.Расширение) = ".XLSM" Тогда
			ФорматФайла = xlOpenXMLWorkbookMacroEnabled;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ИмяВременногоФайла = "";
	#Если НЕ ВебКлиент Тогда
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	#КонецЕсли
	Excel = Новый COMОбъект("Excel.Application");
	Книга = Excel.Workbooks.Open(СокрЛП(ПутьКФайлу),, Истина); 
	
	НашлиМакрос = Ложь;
	НашлиВсеМакросы = Ложь;
	WorkBook = Неопределено;
	
	Попытка
		Если Книга.VBProject.Protection = 1 Тогда
			Excel.DisplayAlerts = False;
			Книга.CheckCompatibility = False;
			ВременноеИмя = "";
			#Если НЕ ВебКлиент Тогда
			ВременноеИмя = ПолучитьИмяВременногоФайла("xlsx");
			#КонецЕсли
			Попытка
				Книга.SaveAs(ВременноеИмя, xlOpenXMLWorkbook);
				Книга.Close();
			Исключение
				Сообщить("Ошибка редактирования макросов. Дополнительные функции MS Excel при клике по объекту (вывод информации во всплывающих окнах и открытие объекта в 1С) отключены. Для использования указанных функций снимите защиту с макросов.");
				Возврат;
			КонецПопытки;
			Книга = Excel.Workbooks.Open(ВременноеИмя);
		КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
		ТекстСообщения = "В настройках безопасности Excel необходимо установить флажок ""Доверять доступ к объектной модели проектов VBA"" (закладка Параметры макросов в Центре управления Безопасностью)";
		Сообщить(ТекстСообщения);
		ЗакрытьКнигуЭксельБезСохранения(Книга);
		Возврат;
	КонецПопытки;
	
	Попытка
		ТекстМакроса = АР_ОбщиеПроцедуры.ПолучитьТекстМакросаОписание();
		Если НЕ WorkBook = Неопределено Тогда
			ТекстМакроса = ТекстМакроса + Символы.ПС +
			"Private Sub Workbook_Open()
			|    Application.OnKey ""{ESC}"", ""ClosePopup""
			|End Sub
			|Private Sub Workbook_BeforeClose(Cancel As Boolean)
			|    Application.OnKey ""{ESC}"", """"
			|End Sub";
		КонецЕсли;
		НужноУстановитьМакрос = Истина;
		ТекстДокумент = Новый ТекстовыйДокумент;
		ПутьКМакросу = "";
		#Если НЕ ВебКлиент	Тогда
			ПутьКМакросу = ПолучитьИмяВременногоФайла("txt");
		#КонецЕсли
		
		Для Каждого Модуль Из Книга.VBProject.VBComponents Цикл
			Если Модуль.Type = 1 Тогда
				Книга.VBProject.VBComponents(Модуль.Name).Export(ПутьКМакросу);
				ТекстДокумент.Прочитать(ПутьКМакросу);
				НужноУстановитьМакрос = НужноУстановитьМакрос И СтрНайти(ТекстДокумент.ПолучитьТекст(), "ИнициализоватьОбработчик") = 0;
			КонецЕсли;
		КонецЦикла;
		Если НужноУстановитьМакрос Тогда
			ТекстДокумент.УстановитьТекст(ТекстМакроса);
			ТекстДокумент.Записать(ПутьКМакросу, "windows-1251");
			Книга.VBProject.VBComponents.Import(ПутьКМакросу);
		КонецЕсли;
	Исключение
		Возврат;
	КонецПопытки;
	
	Excel.DisplayAlerts = Ложь;
	Книга.SaveAs(ИмяВременногоФайла, ФорматФайла);
	Книга.Close();
	Книга = Excel.Workbooks.Open(ИмяВременногоФайла);
	Если НЕ ТолькоОсновныеМакросы Тогда
		Excel.Application.Run("ИнициализоватьОбработчик");
		Excel.DisplayAlerts = Ложь;
	КонецЕсли;
	Если Прав(ПутьКФайлу, 4) = "xlsx" Тогда
		ПутьКФайлу = СтрЗаменить(ПутьКФайлу, ".xlsx", ".xlsm"); 
	КонецЕсли;
	Книга.SaveAs(ПутьКФайлу, ФорматФайла);
	Книга.Close();
	Книга = Неопределено;
	
КонецПроцедуры

Процедура ЗакрытьКнигуЭксельБезСохранения(Книга) Экспорт
	
	Попытка
		Excel = Книга.Application();
		Excel.DisplayAlerts = Ложь;
		Книга.Close();

		Книга = Неопределено; 
		Если Excel.Workbooks.Count() = 0 Тогда
			Excel.Quit();
			Excel = Неопределено;
		КонецЕсли;
	Исключение
		Книга = Неопределено; 
	КонецПопытки;

КонецПроцедуры

//////////////////////////////////////////////////////////////////
// Отбор данных

Процедура ОтборОбработатьВыборЗначения(Форма, Элемент, СтандартнаяОбработка, Значение, СписокПараметров, ТипПоля) Экспорт
	
	Если ТипЗнч(ТипПоля) <> Тип("ОписаниеТипов") Тогда
		
		Возврат;
		
	ИначеЕсли ТипПоля.Типы().Количество() > 0 Тогда
		
		ТипЭлемента = ТипЗнч(Значение);
		Если ?(ТипЭлемента = Неопределено, Истина, не ТипПоля.СодержитТип(ТипЭлемента)) Тогда
			ТипЭлемента = ТипПоля.Типы()[0];
		КонецЕсли; 
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ТипЭлемента = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ЗначенияОтборов = Новый Структура;
		Если ЗначениеЗаполнено(СписокПараметров.Организация) Тогда
			ЗначенияОтборов.Вставить("Организация", СписокПараметров.Организация);
		КонецЕсли;
		Если ЗначениеЗаполнено(СписокПараметров.Контрагент) Тогда
			ЗначенияОтборов.Вставить("Владелец", СписокПараметров.Контрагент);
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("Отбор", ЗначенияОтборов);
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаВыбора", ПараметрыФормы, Элемент);
				
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтборыПравоеЗначениеНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка, СписокПараметров) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если Элементы.Отборы.ТекущиеДанные <> Неопределено Тогда
		Поле         = Элементы.Отборы.ТекущиеДанные.ЛевоеЗначение;
		Значение     = Элементы.Отборы.ТекущиеДанные.ПравоеЗначение;
		
		ВидСравненияСтрока = Строка(Элементы.Отборы.ТекущиеДанные.ВидСравнения);
		
		ТипПоля = БухгалтерскиеОтчетыКлиентСервер.ПолучитьСвойствоПоля(Форма.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора, Поле, "Тип");
		
		// Принятая в конфигурации обработка работает только для равенства/неравенства
		Если ВидСравненияСтрока = Строка(ВидСравненияКомпоновкиДанных.Равно)
			ИЛИ ВидСравненияСтрока = Строка(ВидСравненияКомпоновкиДанных.НеРавно) Тогда
			
			Для Каждого СтрокаОтбора Из Форма.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
				Если ТипЗнч(СтрокаОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
					Если ТипЗнч(СтрокаОтбора.ПравоеЗначение) <> Тип("ПолеКомпоновкиДанных") Тогда
						ЗначениеОтбора = ?(ТипЗнч(СтрокаОтбора.ПравоеЗначение) <> Тип("СписокЗначений"), СтрокаОтбора.ПравоеЗначение, СтрокаОтбора.ПравоеЗначение[0].Значение);
						ТипЗначенияПоля = БухгалтерскиеОтчетыКлиентСервер.ПолучитьСвойствоПоля(Форма.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора, СтрокаОтбора.ЛевоеЗначение, "Тип");
						
						Если ТипЗначенияПоля = Новый ОписаниеТипов("СправочникСсылка.Организации") Тогда
							СписокПараметров.Вставить("Организация", ЗначениеОтбора);
						ИначеЕсли ТипЗначенияПоля = Новый ОписаниеТипов("СправочникСсылка.Контрагенты") Тогда
							СписокПараметров.Вставить("Контрагент", ЗначениеОтбора);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ОтборОбработатьВыборЗначения(Форма, Элемент, СтандартнаяОбработка, Значение, СписокПараметров, ТипПоля);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////
//  Работа с графиком ставок

Процедура ОткрытьГрафикИзФормыДокумента(График, ДокументСсылка, ЭтоПостояннаяЧасть)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЭтоПостояннаяЧасть", ЭтоПостояннаяЧасть);
	ПараметрыФормы.Вставить("ДокументВладелец", ДокументСсылка);
	ПараметрыФормы.Вставить("Ключ", График);

	ФормаГрафика = ПолучитьФорму("Справочник.АР_ГрафикиИзмененияСтавокНаУслуги.ФормаОбъекта", ПараметрыФормы);
	ФормаГрафика.Открыть();
	
КонецПроцедуры

Процедура НачалоВыбораГрафикаИзФормыДокумента(Элемент, ТекущиеДанные, ДокументОбъект,  ЭтоПостояннаяЧасть)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента) Тогда
		ТекстСообщения = "Необходимо выбрать договор арендатора";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокументОбъект.Ссылка, "ДоговорКонтрагента", "Объект", Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Услуга) Тогда
		ТекстСообщения = "Необходимо выбрать услугу в текущей строке";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокументОбъект.Ссылка, "ПостояннаяЧастьАренднойПлаты[" + Строка(ТекущиеДанные.НомерСтроки - 1) + "].Услуга", "Объект", Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ОбъектАренды) Тогда
		ТекстСообщения = "Необходимо выбрать объект аренды в текущей строке";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокументОбъект.Ссылка, "ПостояннаяЧастьАренднойПлаты[" + Строка(ТекущиеДанные.НомерСтроки - 1) + "].ОбъектАренды", "Объект", Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если АР_ОбщиеПроцедуры.СуществуютГрафикиПоДокументу(ДокументОбъект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДокументВладелец", ДокументОбъект.Ссылка);
		ПараметрыФормы.Вставить("ЭтоПостояннаяЧасть", Истина);
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Документ, Владелец", ДокументОбъект.Ссылка, ДокументОбъект.ДоговорКонтрагента));
		ПараметрыФормы.Вставить("Услуга", ТекущиеДанные.Услуга);
		ПараметрыФормы.Вставить("ОбъектАренды", ТекущиеДанные.ОбъектАренды);

		ФормаГрафика = ПолучитьФорму("Справочник.АР_ГрафикиИзмененияСтавокНаУслуги.ФормаВыбора", ПараметрыФормы, Элемент);
		ФормаГрафика.Открыть();
	Иначе
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ЭтоПостояннаяЧасть", ЭтоПостояннаяЧасть);
		ПараметрыФормы.Вставить("ДокументВладелец", ДокументОбъект.Ссылка);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);

		ФормаГрафика = ПолучитьФорму("Справочник.АР_ГрафикиИзмененияСтавокНаУслуги.ФормаОбъекта", ПараметрыФормы, Элемент);
		ФормаГрафика.Объект.Владелец = ДокументОбъект.ДоговорКонтрагента;
		ФормаГрафика.Объект.Документ = ДокументОбъект.Ссылка;
		ФормаГрафика.Объект.Наименование = "График изменения ставок по услуге """ + ТекущиеДанные.Услуга + """ и объекту """ + ТекущиеДанные.ОбъектАренды + """";
		ФормаГрафика.ЗакрыватьПриВыборе = Ложь;
		ФормаГрафика.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытиеСтавки(ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(ДополнительныеПараметры.Объект.Ссылка) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытиеСтавкиПродолжение", АР_ОбщиеПроцедурыКлиент, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'График ставок можно создать только после записи документа. Записать?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		ОткрытиеСтавкиЗавершение(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытиеСтавкиПродолжение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ДополнительныеПараметры.Форма.Записать();
		ОткрытиеСтавкиЗавершение(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры
	
Процедура ОткрытиеСтавкиЗавершение(ДополнительныеПараметры)
	
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	Элемент = ДополнительныеПараметры.Элемент;
	ЭтоПостояннаяЧасть = ДополнительныеПараметры.ЭтоПостояннаяЧасть;
	Если ЗначениеЗаполнено(ТекущиеДанные.Ставка) Тогда
		ОткрытьГрафикИзФормыДокумента(ТекущиеДанные.Ставка, ДополнительныеПараметры.Объект.Ссылка, ЭтоПостояннаяЧасть);
	Иначе
		НачалоВыбораГрафикаИзФормыДокумента(Элемент, ТекущиеДанные, ДополнительныеПараметры.Объект, ЭтоПостояннаяЧасть);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачалоВыбораГрафика(ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(ДополнительныеПараметры.Объект.Ссылка) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачалоВыбораГрафикаПродолжение", АР_ОбщиеПроцедурыКлиент, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'График ставок можно создать только после записи документа. Записать?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		НачалоВыбораГрафикаЗавершение(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачалоВыбораГрафикаПродолжение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ДополнительныеПараметры.Форма.Записать();
		НачалоВыбораГрафикаЗавершение(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры
	
Процедура НачалоВыбораГрафикаЗавершение(ДополнительныеПараметры)
	
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	Элемент = ДополнительныеПараметры.Элемент;
	ЭтоПостояннаяЧасть = ДополнительныеПараметры.ЭтоПостояннаяЧасть;
	
	НачалоВыбораГрафикаИзФормыДокумента(Элемент, ТекущиеДанные, ДополнительныеПараметры.Объект, ЭтоПостояннаяЧасть);
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////
//  Работа со списком счетчиков

Процедура ОткрытьСчетчикИзФормыДокумента(График, ДокументСсылка)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДокументВладелец", ДокументСсылка);
	ПараметрыФормы.Вставить("Ключ", График);

	ФормаГрафика = ПолучитьФорму("Справочник.АР_СпискиСчетчиков.ФормаОбъекта", ПараметрыФормы);
	ФормаГрафика.Открыть();
	
КонецПроцедуры

Процедура НачалоВыбораСчетчикаИзФормыДокумента(Элемент, ТекущиеДанные, ДокументОбъект, ИспользоватьСписокСчетчиков)
	
	Если НЕ ИспользоватьСписокСчетчиков Тогда 
		ФормаГрафика = ПолучитьФорму("Справочник.АР_Счетчики.ФормаВыбора", Новый Структура("ОбъектАренды", ТекущиеДанные.ОбъектАренды), Элемент);
		ФормаГрафика.Открыть();
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента) Тогда
		ТекстСообщения = "Необходимо выбрать договор арендатора";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокументОбъект.Ссылка, "ДоговорКонтрагента", "Объект", Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Услуга) Тогда
		ТекстСообщения = "Необходимо выбрать услугу в текущей строке";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокументОбъект.Ссылка, "ПеременнаяЧастьАренднойПлаты[" + Строка(ТекущиеДанные.НомерСтроки - 1) + "].Услуга", "Объект", Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ОбъектАренды) Тогда
		ТекстСообщения = "Необходимо выбрать объект аренды в текущей строке";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокументОбъект.Ссылка, "ПеременнаяЧастьАренднойПлаты[" + Строка(ТекущиеДанные.НомерСтроки - 1) + "].ОбъектАренды", "Объект", Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если АР_ОбщиеПроцедуры.СуществуютСпискиСчетчиковПоДокументу(ДокументОбъект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДокументВладелец", ДокументОбъект.Ссылка);
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Документ, Владелец", ДокументОбъект.Ссылка, ДокументОбъект.ДоговорКонтрагента));
		ПараметрыФормы.Вставить("Услуга", ТекущиеДанные.Услуга);
		ПараметрыФормы.Вставить("ОбъектАренды", ТекущиеДанные.ОбъектАренды);

		ФормаГрафика = ПолучитьФорму("Справочник.АР_СпискиСчетчиков.ФормаВыбора", ПараметрыФормы, Элемент);
		ФормаГрафика.Открыть();
	Иначе
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДокументВладелец", ДокументОбъект.Ссылка);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);

		ФормаГрафика = ПолучитьФорму("Справочник.АР_СпискиСчетчиков.ФормаОбъекта", ПараметрыФормы, Элемент);
		ФормаГрафика.Объект.Владелец = ДокументОбъект.ДоговорКонтрагента;
		ФормаГрафика.Объект.Документ = ДокументОбъект.Ссылка;
		ФормаГрафика.Объект.Наименование = "Счетчики по услуге """ + ТекущиеДанные.Услуга + """ и объекту """ + ТекущиеДанные.ОбъектАренды + """";
		ФормаГрафика.ЗакрыватьПриВыборе = Ложь;
		ФормаГрафика.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытиеСчетчика(ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(ДополнительныеПараметры.Объект.Ссылка) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытиеСчетчикаПродолжение", АР_ОбщиеПроцедурыКлиент, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Список счетчиков можно создать только после записи документа. Записать?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		ОткрытиеСчетчикаЗавершение(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытиеСчетчикаПродолжение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ДополнительныеПараметры.Форма.Записать();
		ОткрытиеСчетчикаЗавершение(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры
	
Процедура ОткрытиеСчетчикаЗавершение(ДополнительныеПараметры)
	
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	Элемент = ДополнительныеПараметры.Элемент;
	Если ЗначениеЗаполнено(ТекущиеДанные.Счетчик) Тогда
		ОткрытьСчетчикИзФормыДокумента(ТекущиеДанные.Счетчик, ДополнительныеПараметры.Объект.Ссылка);
	Иначе
		НачалоВыбораСчетчикаИзФормыДокумента(Элемент, ТекущиеДанные, ДополнительныеПараметры.Объект, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачалоВыбораСчетчика(ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Форма.ИспользоватьСписокСчетчиков И НЕ ЗначениеЗаполнено(ДополнительныеПараметры.Объект.Ссылка) И ДополнительныеПараметры.СписокСчетчиков Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачалоВыбораСчетчикаПродолжение", АР_ОбщиеПроцедурыКлиент, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Список счетчиков можно создать только после записи документа. Записать?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		НачалоВыбораСчетчикаЗавершение(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачалоВыбораСчетчикаПродолжение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ДополнительныеПараметры.Форма.Записать();
		НачалоВыбораСчетчикаЗавершение(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачалоВыбораСчетчикаЗавершение(ДополнительныеПараметры)
	
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	Элемент = ДополнительныеПараметры.Элемент;
	
	НачалоВыбораСчетчикаИзФормыДокумента(Элемент, ТекущиеДанные, ДополнительныеПараметры.Объект, ДополнительныеПараметры.СписокСчетчиков);
	
КонецПроцедуры

// Вариант = 1, Шаблоны Word
// Вариант = 2, Планировки
Функция ДоступнаРаботаMSOffice(Вариант) Экспорт
	
	Результат = АР_ОбщийМодульСЛКПовтИсп.ПолучитьЗначениеПараметра("msoffice") <> "false";
	Если Не Результат Тогда
		ОткрытьФорму("Обработка.АР_ДемонстрационнаяВерсия.Форма.Информация", Новый Структура("Вариант", Вариант),,,,, Новый ОписаниеОповещения("ЗакрытиеИнформацииЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Процедура ЗакрытиеИнформацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОткрытьФорму("Обработка.АР_ДемонстрационнаяВерсия.Форма.Обозреватель", Новый Структура("Вариант", Результат));
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьПоЭлектроннойПочте(МассивДокументов, ИмяФормыДокумента, УчетнаяЗапись) Экспорт
	
	ОбъектыПоКонтрагентам = АР_ОбщиеПроцедуры.РазбитьОбъектыПоКонтрагентам(МассивДокументов);
	ЕстьОбъектыДляОтправки = Ложь;
	Для Каждого Элемент Из ОбъектыПоКонтрагентам Цикл
		Если Элемент.Значение = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("У контрагента """ + Элемент.Ключ + """ не задан адрес электронной почты");
		Иначе
			ЕстьОбъектыДляОтправки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьОбъектыДляОтправки Тогда
		Возврат
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяФормыДокумента" , ИмяФормыДокумента);
	ПараметрыФормы.Вставить("ОбъектыОтправки"   , МассивДокументов);
	ПараметрыФормы.Вставить("АР_БыстраяОтправка", Истина);
	ПараметрыФормы.Вставить("АР_РазбиватьПоКонтрагентам", Истина);
	ПараметрыФормы.Вставить("АР_УчетнаяЗапись"  , УчетнаяЗапись);
	ПараметрыФормы.Вставить("АР_ПодписиИПечати");
	
	Оповещение = Новый ОписаниеОповещения("ОтправитьПоЭлектроннойПочтеЗавершение", АР_ОбщиеПроцедурыКлиент);
	ОткрытьФорму("ОбщаяФорма.ОтправкаДокументовПоЭлектроннойПочте", ПараметрыФормы,,,,, Оповещение);
	
КонецПроцедуры

Процедура ОтправитьПоЭлектроннойПочтеЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатЗакрытия = Неопределено И ТипЗнч(РезультатЗакрытия) = Тип("Структура") И РезультатЗакрытия.Свойство("АР_БыстраяОтправка") Тогда
		Если РезультатЗакрытия.АР_БыстраяОтправка Тогда
			Состояние("Сообщения успешно отправлены");
	    КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьНастройкуГрупповыхОбработок(Форма) Экспорт
	
	ПараметрыФормы = Новый Структура("УчетнаяЗаписьЭлектроннойПочты", Форма.УчетнаяЗаписьЭлектроннойПочты);
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьНастройкуГрупповыхОбработокЗавершение", АР_ОбщиеПроцедурыКлиент, Форма);
	ОткрытьФорму("ОбщаяФорма.АР_НастройкаГрупповыхОбработок", ПараметрыФормы,,,,, Оповещение);
	
КонецПроцедуры

Процедура ОткрытьНастройкуГрупповыхОбработокЗавершение(РезультатЗакрытия, Форма) Экспорт
	
	Если НЕ РезультатЗакрытия = Неопределено Тогда
		Форма.УчетнаяЗаписьЭлектроннойПочты = РезультатЗакрытия.УчетнаяЗаписьЭлектроннойПочты;
	КонецЕсли;
	
КонецПроцедуры
