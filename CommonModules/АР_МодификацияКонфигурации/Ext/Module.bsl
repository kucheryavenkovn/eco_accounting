#Область ПрограммныйИнтерфейс

#Область ЗаполнениеОбработчиковФормы

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
// 	Форма - форма, из обработчика события которой происходит вызов процедуры.
//	см. справочную информацию по событиям управляемой формы.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ПроверитьДоступКДокументу(Форма, Отказ, СтандартнаяОбработка);
	
	ИмяПравила = ПараметрыСеанса.АР_ПравилаДобавленияЭлементовФорм.Получить(Форма.ИмяФормы);
	
	Если ИмяПравила = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПравил = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяПравила, Символы.ПС, Истина);
	
	Для Каждого ИмяПравила Из ИменаПравил Цикл
	
		ДобавитьЭлементыНаФорму(ИмяПравила, Форма, Отказ, СтандартнаяОбработка);
		
		Если ИмяПравила = "Договоры" Тогда
			
			АР_МодификацияКонфигурацииКлиентСервер.УправлениеФормойДоговора(Форма);
			
		ИначеЕсли ИмяПравила = "ПлатежныеДокументыОбщие" Тогда
			
			АР_МодификацияКонфигурацииКлиентСервер.УправлениеФормойПлатежныйДокумент(Форма);
			
		ИначеЕсли ИмяПравила = "ПлатежныеДокументыПриход" Тогда
			
			АР_МодификацияКонфигурацииКлиентСервер.УправлениеФормойПлатежныйДокумент(Форма);
			
		ИначеЕсли ИмяПравила = "ПоступлениеНаРасчетныйСчетОднострочный"
			ИЛИ ИмяПравила = "ПоступлениеНаРасчетныйСчетОднострочный1" Тогда
			
			АР_МодификацияКонфигурацииКлиентСервер.УправлениеФормойПлатежныйДокументОднострочный(Форма);
			
		ИначеЕсли ИмяПравила = "ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа"
			ИЛИ ИмяПравила = "ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа1" Тогда
			
			ПлатежныеДокументыУстановитьУсловноеОформление(Форма, Истина);
			АР_МодификацияКонфигурацииКлиентСервер.УправлениеФормойПлатежныйДокумент(Форма);
			
		ИначеЕсли ИмяПравила = "ПлатежныеДокументыОднострочныйОбщие"
			ИЛИ ИмяПравила = "ПлатежныеДокументыОднострочныйОбщие1" Тогда
			
			АР_МодификацияКонфигурацииКлиентСервер.УправлениеФормойПлатежныйДокументОднострочный(Форма);
			ПлатежныеДокументыОднострочныйНастроитьВыборСчетаНаАренду(Форма);
			
		ИначеЕсли ИмяПравила = "ПлатежныеДокументыРасшифровкаПлатежа"
			ИЛИ ИмяПравила = "ПлатежныеДокументыРасшифровкаПлатежа1" Тогда
			
			АР_МодификацияКонфигурацииКлиентСервер.УправлениеФормойПлатежныйДокумент(Форма);
			ПлатежныеДокументыРасшифровкаПлатежаНастроитьВыборСчетаНаАренду(Форма);
			
		ИначеЕсли ИмяПравила = "ПлатежныеДокументыПриход" Тогда
			
			ПлатежныеДокументыУстановитьУсловноеОформление(Форма);
			АР_МодификацияКонфигурацииКлиентСервер.УправлениеФормойПлатежныйДокумент(Форма);
			
		ИначеЕсли ИмяПравила = "КорректировкаРеализации" Тогда	
			
			ОтключитьСводнуюКомандуПечати(Форма);
			КорректировкаРеализацииУстановитьУсловноеОформление(Форма);
			АР_МодификацияКонфигурацииКлиентСервер.УправлениеФормойКорректировкаРеализации(Форма);
			
		ИначеЕсли ИмяПравила = "ОтправкаДокументовПоЭлектроннойПочте" Тогда	
			
			Если Форма.Параметры.Свойство("АР_БыстраяОтправка") Тогда
				Форма.АР_БыстраяОтправка = Форма.Параметры.АР_БыстраяОтправка;
			КонецЕсли;
			Если Форма.Параметры.Свойство("АР_УчетнаяЗапись") Тогда
				Форма.АР_УчетнаяЗапись = Форма.Параметры.АР_УчетнаяЗапись;
			КонецЕсли;
			Если Форма.Параметры.Свойство("АР_РазбиватьПоКонтрагентам") Тогда
				Форма.АР_РазбиватьПоКонтрагентам = Форма.Параметры.АР_РазбиватьПоКонтрагентам;
			КонецЕсли;
			Если Форма.Параметры.Свойство("АР_ПодписиИПечати") Тогда
				Форма.АР_ПодписиИПечати = ХранилищеОбщихНастроек.Загрузить("УправлениеФаксимиле", "ВыводитьФаксимиле");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
// 	Форма - форма, из обработчика события которой происходит вызов процедуры.
//	см. справочную информацию по событиям управляемой формы.
//
Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	ИмяПравила = ПараметрыСеанса.АР_ПравилаДобавленияЭлементовФорм.Получить(Форма.ИмяФормы);
	
	Если ИмяПравила = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
// 	Форма - форма, из обработчика события которой происходит вызов процедуры.
//	см. справочную информацию по событиям управляемой формы.
//
Процедура ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи)Экспорт
	
	ИмяПравила = ПараметрыСеанса.АР_ПравилаДобавленияЭлементовФорм.Получить(Форма.ИмяФормы);
	
	Если ИмяПравила = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
// 	Форма - форма, из обработчика события которой происходит вызов процедуры.
//	см. справочную информацию по событиям управляемой формы.
//
Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи)Экспорт
	
	ИмяПравила = ПараметрыСеанса.АР_ПравилаДобавленияЭлементовФорм.Получить(Форма.ИмяФормы);
	
	Если ИмяПравила = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ПолучитьПравилаДобавленияЭлементовФорм() Экспорт
	
	ПравилаДобавленияЭлементовФорм = Новый Соответствие;
	
	// получим список форм, для которых установленно использование дополнительных элементов
	МакетПравил = ПолучитьОбщийМакет("АР_ПравилаДобавленияЭлементовФорм");
	
	Область = МакетПравил.Области.Найти("ДоработанныеФормы");
	
	Если НЕ Область = Неопределено Тогда
		Для К = Область.Верх По Область.Низ	Цикл
			Если МакетПравил.Область(К, 3).Текст = "Истина" Тогда // признак использования правила
				ПравилаДобавленияЭлементовФорм.Вставить(СокрЛП(МакетПравил.Область(К, 1).Текст), СокрЛП(МакетПравил.Область(К, 2).Текст));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПравилаДобавленияЭлементовФорм;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыОформленияЭлементов

Функция СтандартноеОформлениеФлажка(Элемент)
	
	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	
КонецФункции

Функция СтандартноеОформлениеГоризонтальнойГруппы(Элемент)
	
	Элемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	Элемент.ОтображатьЗаголовок = Ложь;
	Если Элемент.Вид = ВидГруппыФормы.ОбычнаяГруппа Тогда
		Элемент.Отображение = ОтображениеОбычнойГруппы.Нет;
	КонецЕсли;
	
КонецФункции

Функция ОформлениеЭлементаБезРастягивания(Элемент)
	
	Элемент.РастягиватьПоГоризонтали = Ложь;
	
КонецФункции

Функция ОформлениеЭлементаБезЗаголовка(Элемент)
	
	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	
КонецФункции

Функция ОформлениеСтраницОтображениеСтраниц(Элемент, Отображение)
	
	Элемент.ОтображениеСтраниц = ОтображениеСтраницФормы[Отображение];
	
КонецФункции

Функция АвтоОтметкаНезаполненного(Элемент)
	
	Элемент.АвтоОтметкаНезаполненного = Истина;
	
КонецФункции

Функция СкопироватьОформление(Элемент, Форма, ИмяЭлементаИсточник, СвойстваИсточник)
	
	МассивСвойств = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СвойстваИсточник,, Истина, Истина);
	ЭлементИсточник = Форма.Элементы.Найти(ИмяЭлементаИсточник);
	Если НЕ ЭлементИсточник = Неопределено Тогда
		Для Каждого Свойство Из МассивСвойств Цикл
			Элемент[Свойство] = ЭлементИсточник[Свойство];	
		КонецЦикла;
	КонецЕсли;	
	
КонецФункции

Функция УстановитьОформление(Элемент, Свойства, Значение1 = "", Значение2 = "", Значение3 = "", Значение4 = "", Значение5 = "", Значение6 = "", Значение7 = "", Значение8 = "", Значение9 = "")
	                        
	Значения = Новый Структура("Значение1, Значение2, Значение3, Значение4, Значение5, Значение6, Значение7, Значение8, Значение9",
								Значение1, Значение2, Значение3, Значение4, Значение5, Значение6, Значение7, Значение8, Значение9);
	МассивСвойств = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Свойства,, Истина, Истина);
	Для К = 1 По Мин(МассивСвойств.Количество(), 9) Цикл
		ИмяСвойства = МассивСвойств[К - 1];
		Элемент[ИмяСвойства] = Значения["Значение" + К];
	КонецЦикла;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьДоступКДокументу(Форма, Отказ, СтандартнаяОбработка)
	
	Если РольДоступна("ПолныеПрава") Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.ИмяФормы = "Документ.ПоступлениеНаРасчетныйСчет.Форма.ФормаДокумента"
		ИЛИ Форма.ИмяФормы = "Документ.ПоступлениеНаРасчетныйСчет.Форма.ФормаДокументаОднострочная"
		ИЛИ Форма.ИмяФормы = "Документ.ПоступлениеНаРасчетныйСчет.Форма.ФормаДокументаОднострочнаяИнтеграцияСБанком" 
		ИЛИ Форма.ИмяФормы = "Документ.ПриходныйКассовыйОрдер.Форма.ФормаДокумента"
		ИЛИ Форма.ИмяФормы = "Документ.ПриходныйКассовыйОрдер.Форма.ФормаДокументаОднострочная" 
		ИЛИ Форма.ИмяФормы = "Документ.ПриходныйКассовыйОрдер.Форма.ФормаДокументаОднострочнаяИнтеграцияСБанком" 
		ИЛИ Форма.ИмяФормы = "Документ.СписаниеСРасчетногоСчета.Форма.ФормаДокумента"
		ИЛИ Форма.ИмяФормы = "Документ.СписаниеСРасчетногоСчета.Форма.ФормаДокументаОднострочная" 
		ИЛИ Форма.ИмяФормы = "Документ.СписаниеСРасчетногоСчета.Форма.ФормаДокументаОднострочнаяИнтеграцияСБанком" 
		ИЛИ Форма.ИмяФормы = "Документ.РасходныйКассовыйОрдер.Форма.ФормаДокумента"
		ИЛИ Форма.ИмяФормы = "Документ.РасходныйКассовыйОрдер.Форма.ФормаДокументаОднострочная" 
		ИЛИ Форма.ИмяФормы = "Документ.РасходныйКассовыйОрдер.Форма.ФормаДокументаОднострочнаяИнтеграцияСБанком" Тогда
		
		Если Форма.Объект.АР_ОплатаАренды И НЕ РольДоступна("АР_ЧтениеДанныхБухгалтерииАренды") Тогда
			ВызватьИсключение "Нарушение прав доступа. Необходимы права к подсистеме недвижимости";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЭлементыНаФорму(ИмяПравила, Форма, Отказ, СтандартнаяОбработка) 
	
	Элементы = Форма.Элементы;
	
	ТаблицаОписания = ПрочитатьОписаниеВТаблицуЗначений(ИмяПравила);
	
	ТаблицаРеквизитовФормы = ТаблицаОписания.Скопировать(Новый Структура("ТипЭлемента", "РеквизитФормы"));
	
	ДобавляемыеРеквизиты = Новый Массив;
	Для Каждого Реквизит Из ТаблицаРеквизитовФормы Цикл
		СоставОписанияТипов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Реквизит.ВидЭлемента,, Истина, Истина);
		ОписаниеТипа = ПолучитьОписаниеТипов(СоставОписанияТипов);
		НовыйРеквизит = Новый РеквизитФормы(Реквизит.ИмяЭлемента, ОписаниеТипа, Реквизит.ИмяРодителя, Реквизит.ЗаголовокЭлемента, ЗначениеЗаполнено(Реквизит.ПропускатьПриОтсутствииРодителя));
		РеквизитыФормы = Форма.ПолучитьРеквизиты(Реквизит.ИмяРодителя);
		ЭтоНовыйРеквизит = Истина;
		Для Каждого Элемент Из РеквизитыФормы Цикл
			Если Элемент.Имя = Реквизит.ИмяЭлемента Тогда
				ЭтоНовыйРеквизит = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЭтоНовыйРеквизит Тогда
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		Если ДобавляемыеРеквизиты.Количество() > 0 Тогда
			Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);	
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при добавлении к форме реквизитов");	
	КонецПопытки;
	
	Для Каждого Стр Из ТаблицаОписания Цикл
		
		Попытка
			
			Если Стр.ТипЭлемента = "РеквизитФормы" Тогда
				Продолжить;
			КонецЕсли;
			
			Родитель = ?(ЗначениеЗаполнено(Стр.ИмяРодителя), Элементы.Найти(Стр.ИмяРодителя), Форма);
			Если Родитель = Неопределено И Стр.ПропускатьПриОтсутствииРодителя = "Истина" Тогда
				Продолжить;
			КонецЕсли;
			
			ЭлементПеред = Неопределено;
			Если ЗначениеЗаполнено(Стр.РазместитьПеред) Тогда
				ЭлементПеред = Элементы.Найти(Стр.РазместитьПеред);
			КонецЕсли;
			
			Элемент = Элементы.Найти(Стр.ИмяЭлемента);
			Если Элемент = Неопределено Тогда
				Если НЕ Родитель = Неопределено Тогда
					Элемент = Элементы.Добавить(Стр.ИмяЭлемента, Тип(Стр.ТипЭлемента), Родитель);
				Иначе
					Элемент = Элементы.Добавить(Стр.ИмяЭлемента, Тип(Стр.ТипЭлемента), Родитель);
				КонецЕсли;
				Если НЕ ЭлементПеред = Неопределено Тогда
					Элементы.Переместить(Элемент, Родитель, ЭлементПеред);	
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(Стр.ИмяРодителя) И НЕ Родитель = Неопределено Тогда
					Элементы.Переместить(Элемент, Родитель, ЭлементПеред);	
				КонецЕсли;
				Если ЗначениеЗаполнено(Стр.ПутьКДанным) Тогда // Случай повторного добавления элемента
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(Стр.ЗаголовокЭлемента) Тогда
				Элемент.Заголовок = Стр.ЗаголовокЭлемента;
			КонецЕсли;
			Если ЗначениеЗаполнено(Стр.ВидЭлемента) Тогда 
				Если Стр.ТипЭлемента = "ПолеФормы" Тогда
					Элемент.Вид = ВидПоляФормы[Стр.ВидЭлемента];
				ИначеЕсли Стр.ТипЭлемента = "ГруппаФормы" Тогда
					Элемент.Вид = ВидГруппыФормы[Стр.ВидЭлемента];
				ИначеЕсли Стр.ТипЭлемента = "ДекорацияФормы" Тогда
					Элемент.Вид = ВидДекорацииФормы[Стр.ВидЭлемента];
				ИначеЕсли Стр.ТипЭлемента = "КнопкаФормы" Тогда
					Элемент.Вид = ВидКнопкиФормы[Стр.ВидЭлемента];
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Стр.ПутьКДанным) Тогда
				ЧастиПутиКДанным = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр.ПутьКДанным, ".");
				Если Стр.ТипЭлемента = "КнопкаФормы" Тогда
					Если ЧастиПутиКДанным.Количество() = 1 Тогда
						Команда = Форма.Команды.Добавить(Стр.ИмяЭлемента);
						Команда.Действие = Стр.ПутьКДанным;
						Элемент.ИмяКоманды = Стр.ИмяЭлемента;
					КонецЕсли;
				Иначе
					Если ТипЗнч(Форма[ЧастиПутиКДанным[0]]) = Тип("ДинамическийСписок") И ЧастиПутиКДанным.Количество() > 1 Тогда
						ДоработатьДинамическийСписок(Форма[ЧастиПутиКДанным[0]], ЧастиПутиКДанным[1]);	
					КонецЕсли;
					Элемент.ПутьКДанным = Стр.ПутьКДанным;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(Стр.ПроцедурыОформления) Тогда
				МассивПроцедур = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр.ПроцедурыОформления, Символы.ПС, Истина);
				Для Каждого Проц Из МассивПроцедур Цикл
					Попытка
						Результат = Вычислить(Проц);
					Исключение
						ТекстОшибки = "Ошибка при оформлении """ + Проц + """ элемента """ + Стр.ИмяЭлемента + """";
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
					КонецПопытки;
				КонецЦикла;
			КонецЕсли;
			Если ЗначениеЗаполнено(Стр.ПроцедурыСобытий) Тогда
				МассивПроцедур = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр.ПроцедурыСобытий, Символы.ПС, Истина);
				Для Каждого Событие Из МассивПроцедур Цикл
					ОписаниеСобытия = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Событие, ":");
					Попытка
						Элемент.УстановитьДействие(ОписаниеСобытия[0], ОписаниеСобытия[1]);
					Исключение
						ТекстОшибки = "Ошибка установки события """ + ОписаниеСобытия[0] + """ для элемента """ + Стр.ИмяЭлемента + """";
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
					КонецПопытки;
				КонецЦикла;
			КонецЕсли;
			
		Исключение
			ТекстОшибки = "Ошибка при размещении на форме элемента """ + Стр.ИмяЭлемента + """";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДоработатьДинамическийСписок(ДинамическийСписок, ВыбираемоеПоле)
	
	Если ДинамическийСписок.ПроизвольныйЗапрос Тогда
		
		ТекстЗапроса = ДинамическийСписок.ТекстЗапроса;
		
		НеобходимаДоработка = Истина;
		
		Индекс = Найти(ТекстЗапроса, "." + ВыбираемоеПоле);
		Если Индекс > 0 Тогда
			// проверим, что следующий символ - символ разделителя
			СледСимвол = Сред(ТекстЗапроса, Индекс + СтрДлина(ВыбираемоеПоле) + 1, 1);
			ПробельныеСимволы = ", " + Символы.ПС + Символы.Таб;
			Если НЕ Найти(ПробельныеСимволы, СледСимвол) Тогда
				НеобходимаДоработка = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимаДоработка Тогда
			Если СтрЧислоВхождений(ТекстЗапроса, "ВЫБРАТЬ") = 1 Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ", "ВЫБРАТЬ" + Символы.ПС + Символы.Таб + ВыбираемоеПоле + ","); 	
			КонецЕсли;
			ДинамическийСписок.ТекстЗапроса = ТекстЗапроса;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПлатежныеДокументыУстановитьУсловноеОформление(Форма, ЭтоРасшифровкаПлатежа = Ложь) Экспорт
	
	Если НЕ ЭтоРасшифровкаПлатежа Тогда
		Префикс = "Объект.";
		Коллекция = Форма.Объект.РасшифровкаПлатежа;
	Иначе
		Префикс = "";
		Коллекция = Форма.РасшифровкаПлатежа;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	УсловноеОформление = Форма.УсловноеОформление;
	
	Для Каждого Стр Из Коллекция Цикл
		Если ТипЗнч(Стр.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			Стр.АР_ВестиВзаиморасчетыПоУслугам = Стр.ДоговорКонтрагента.АР_ВестиВзаиморасчетыПоУслугам;	
			Стр.АР_ВестиВзаиморасчетыПоОбъектам = Стр.ДоговорКонтрагента.АР_ВестиВзаиморасчетыПоОбъектам;	
			ПараметрыНачисленияПени = АР_ПроцедурыНачисления.ПолучитьПараметрыНачисленияПени(Стр.ДоговорКонтрагента, Форма.Объект.Дата);
			ОбособленныйУчетПени = ?(ПараметрыНачисленияПени = Неопределено, Ложь, ПараметрыНачисленияПени.СпособПогашенияПени = ПредопределенноеЗначение("Перечисление.АР_СпособыПогашенияПени.ВестиОбособленныйУчетПени"));
			Стр.АР_ОбособленныйУчетПеней = ОбособленныйУчетПени;	
		КонецЕсли;
	КонецЦикла;
	
	// установим условное оформление
	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаПлатежаАР_УслугаАренды.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Префикс + "РасшифровкаПлатежа.АР_УслугаАренды");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Префикс + "РасшифровкаПлатежа.АР_ВестиВзаиморасчетыПоУслугам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.DarkGray);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Авто>'"));
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаПлатежаАР_ОбъектАренды.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Префикс + "РасшифровкаПлатежа.АР_ОбъектАренды");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Префикс + "РасшифровкаПлатежа.АР_ВестиВзаиморасчетыПоОбъектам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.DarkGray);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Авто>'"));
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаПлатежаАР_СчетПеней.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Префикс + "РасшифровкаПлатежа.АР_ОбособленныйУчетПеней");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
КонецПроцедуры

Процедура ПлатежныеДокументыОднострочныйНастроитьВыборСчетаНаАренду(Форма)
	
	МассивСвязей = Новый Массив();
	Связь = Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация");
	МассивСвязей.Добавить(Связь);
	Связь = Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.Контрагент");
	МассивСвязей.Добавить(Связь);
	Связь = Новый СвязьПараметраВыбора("Отбор.ДоговорКонтрагента", "РасшифровкаПлатежаДоговорКонтрагента");
	МассивСвязей.Добавить(Связь);
	Форма.Элементы.АР_СчетНаАренду.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязей);
	
КонецПроцедуры

Процедура ПлатежныеДокументыРасшифровкаПлатежаНастроитьВыборСчетаНаАренду(Форма)
	
	МассивСвязей = Новый Массив();
	Связь = Новый СвязьПараметраВыбора("Отбор.Организация", "Организация");
	МассивСвязей.Добавить(Связь);
	Связь = Новый СвязьПараметраВыбора("Отбор.Контрагент", "Контрагент");
	МассивСвязей.Добавить(Связь);
	Связь = Новый СвязьПараметраВыбора("Отбор.ДоговорКонтрагента", "РасшифровкаПлатежа.ДоговорКонтрагента");
	МассивСвязей.Добавить(Связь);
	Форма.Элементы.РасшифровкаПлатежаАР_СчетНаАренду.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязей);
	
КонецПроцедуры

Процедура КорректировкаРеализацииУстановитьУсловноеОформление(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	УсловноеОформление = Форма.УсловноеОформление;
	
	Форма.АР_ИсправлениеАренды = ТипЗнч(Объект.ДокументРеализации) = Тип("ДокументСсылка.АР_НачислениеАренднойПлаты");
	Форма.АР_ИсправлениеПени = ТипЗнч(Объект.ДокументРеализации) = Тип("ДокументСсылка.АР_НачислениеПени");
	
	// УслугиОбъектАренды, УслугиПериодАренды, УслугиСчетНаАренду
	// АгентскиеУслугиОбъектАренды, АгентскиеУслугиПериодАренды, АгентскиеУслугиСчетНаАренду
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиАР_ОбъектАренды");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиАР_ПериодАренды");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиАР_СчетНаАренду");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиАР_ОбъектАренды");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиАР_ПериодАренды");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиАР_СчетНаАренду");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"АР_ИсправлениеАренды", ВидСравненияКомпоновкиДанных.НеРавно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"АР_ИсправлениеПени", ВидСравненияКомпоновкиДанных.НеРавно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// УслугиКоличествоДоКорректировки, УслугиКоличествоДоИзменения, УслугиКоличество, УслугиЦенаДоКорректировки, УслугиЦенаДоИзменения, УслугиЦена
	// АгентскиеУслугиКоличествоДоКорректировки, АгентскиеУслугиКоличествоДоИзменения, АгентскиеУслугиКоличество, АгентскиеУслугиЦенаДоКорректировки, АгентскиеУслугиЦенаДоИзменения, АгентскиеУслугиЦена
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиКоличествоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиКоличествоДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиКоличество");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиЦенаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиЦенаДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиЦена");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиКоличествоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиКоличествоДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиКоличество");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиЦенаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиЦенаДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиЦена");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"АР_ИсправлениеПени", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Определяются по данным документа - основания

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиОбъектАренды");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиПериодАренды");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСчетНаАренду");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиОбъектАренды");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиПериодАренды");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСчетНаАренду");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КорректироватьБУиНУ", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.ЕстьВДокументеРеализации", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

Процедура ОтключитьСводнуюКомандуПечати(Форма) Экспорт
	
	Документ = Неопределено;
	Если Форма.Объект.Свойство("ДокументРеализации") Тогда
		Документ = Форма.Объект.ДокументРеализации;
	ИначеЕсли Форма.Объект.Свойство("ДокументОснование") Тогда
		Документ = Форма.Объект.ДокументОснование;
	КонецЕсли;
	
	Если Документ = Неопределено ИЛИ Документы.СчетФактураВыданный.ДокументОснованияОтноситсяКАренде(Документ) Тогда
		Возврат;
	КонецЕсли;
	
	СписокОтключаемыхКомандЗаголовки = Новый Массив;
	СписокОтключаемыхКомандЗаголовки.Добавить("Счет-фактура (сводный по услугам)");
	СписокОтключаемыхКомандЗаголовки.Добавить("Универсальный передаточный документ (УПД) (сводный по услугам)");
	
	СписокОтключаемыхКоманд = Новый Массив;
	Для Каждого Команда Из Форма.Команды Цикл
		Для Каждого Элемент Из СписокОтключаемыхКомандЗаголовки Цикл
			Если Найти(Команда.Заголовок, Элемент) > 0 Тогда
				СписокОтключаемыхКоманд.Добавить(Команда.Имя);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ПодменюПечать = Форма.Элементы.Найти("ПодменюПечать");
	Если НЕ ПодменюПечать = Неопределено Тогда
		Для Каждого Элемент Из СписокОтключаемыхКоманд Цикл
			ОтключитьКомандыПечати(ПодменюПечать, Элемент);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтключитьКомандыПечати(Группа, КомандаСодержитТекст, ВключитьКоманды = Ложь) Экспорт
	
	Для Каждого Элемент Из Группа.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			ОтключитьКомандыПечати(Элемент, КомандаСодержитТекст, ВключитьКоманды);
		ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы") И Найти(Элемент.Имя, КомандаСодержитТекст) > 0 Тогда
			Элемент.Видимость = ВключитьКоманды;	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПрочитатьОписаниеВТаблицуЗначений(ИмяПравила) Экспорт
	
	МакетОписания = ПолучитьОбщийМакет("АР_ОписаниеДобавленныхЭлементовФорм");
	
	ТаблицаОписания = Новый ТаблицаЗначений;
	СтруктураОбластей = Новый Структура;
	
	Для Каждого Область Из МакетОписания.Области Цикл
		Если ЗначениеЗаполнено(Область.Лево) Тогда // это вертикальная область
			СтруктураОбластей.Вставить(Область.Имя, Область.Лево);
			ТаблицаОписания.Колонки.Добавить(Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Область = МакетОписания.Области.Найти(ИмяПравила);
	
	Если НЕ Область = Неопределено Тогда
		Для К = Область.Верх По Область.Низ	Цикл
			Если ЗначениеЗаполнено(МакетОписания.Область(К, СтруктураОбластей.ИмяЭлемента).Текст) Тогда
				СтрокаОписания = ТаблицаОписания.Добавить();
				Для Каждого Элемент Из СтруктураОбластей Цикл
					СтрокаОписания[Элемент.Ключ] = СокрЛП(МакетОписания.Область(К, Элемент.Значение).Текст)
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаОписания;
	
КонецФункции

Функция ПолучитьОписаниеТипов(СоставОписанияТипов)
	
	КвЧисла = Новый КвалификаторыЧисла;
	КвСтроки = Новый КвалификаторыСтроки;
	КвДаты = Новый КвалификаторыДаты;
	
	Если СоставОписанияТипов.Количество() > 1 Тогда
		Если СоставОписанияТипов[0] = "Число" Тогда
			Если СоставОписанияТипов.Количество() = 2 Тогда
				КвЧисла = Новый КвалификаторыЧисла(СоставОписанияТипов[1]);	
			ИначеЕсли СоставОписанияТипов.Количество() = 3 Тогда
				КвЧисла = Новый КвалификаторыЧисла(СоставОписанияТипов[1], СоставОписанияТипов[2]);
			Иначе
				КвЧисла = Новый КвалификаторыЧисла(СоставОписанияТипов[1], СоставОписанияТипов[2], ДопустимыйЗнак[СоставОписанияТипов[3]]);
			КонецЕсли;
		ИначеЕсли СоставОписанияТипов[0] = "Строка" Тогда	
			Если СоставОписанияТипов.Количество() = 2 Тогда
				КвСтроки = Новый КвалификаторыСтроки(СоставОписанияТипов[1]);	
			Иначе
				КвСтроки = Новый КвалификаторыСтроки(СоставОписанияТипов[1], ДопустимаяДлина[СоставОписанияТипов[2]]);
			КонецЕсли;
		ИначеЕсли СоставОписанияТипов[0] = "Дата" Тогда	
			КвДаты = Новый КвалификаторыДаты(ЧастиДаты[СоставОписанияТипов[1]]);	
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый ОписаниеТипов(СоставОписанияТипов[0], КвЧисла, КвСтроки, КвДаты);
	
КонецФункции

#КонецОбласти
