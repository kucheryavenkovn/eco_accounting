// ЭлектронныйДокументооборотСКонтролирующимиОрганамиОбновлениеИнформационнойБазы
#Область ПрограммныйИнтерфейс

// Выполняет обмен с сервером СЭДО ФСС из фонового задания.
Процедура ВыполнитьОбменСФСС() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбменСФСС);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Организации = СписокДопустимыхОрганизацийВОбъектахОбменаФСС();
	
	Если Организации.Количество() = 0 Тогда
		ОтключитьОбменСФСС();
		Возврат;
	КонецЕсли;
	
	КлючКоличествоОшибокСоединения = "КоличествоОшибокСоединения";
	КоличествоОшибокСоединения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		КлючОбъектаОбщихНастроек(),
		КлючКоличествоОшибокСоединения,
		0);
	
	БылиОшибки = Ложь;
	БылиОшибкиСоединения = Ложь;
	Для каждого Организация Из Организации Цикл
		
		РегистрационныйНомерФСС = РегистрационныйНомерФССОрганизации(Организация);
		Если ПустаяСтрока(РегистрационныйНомерФСС) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = МетаданныеВходящихСообщенийСЭДОФСС(Организация);
		
		Если НЕ Результат.Выполнено Тогда
			Шаблон = НСтр("ru='При получении данных СЭДО ФСС по организации %1 произошла ошибка: %2.'");
			ОписаниеОшибки = СтрШаблон(Шаблон, Организация, Результат.ОписаниеОшибки);
			ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Ошибка, ОписаниеОшибки);
			БылиОшибкиСоединения = Результат.ОшибкаСоединения;
			БылиОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ОдинРазВСутки = Ложь;
	МаксимальноеКоличествоОшибокСоединенияПодряд = 3;
	Если БылиОшибкиСоединения Тогда
		КоличествоОшибокСоединения = КоличествоОшибокСоединения + 1;
		Если КоличествоОшибокСоединения >= МаксимальноеКоличествоОшибокСоединенияПодряд Тогда
			// Если были ошибки подключения и они повторялись три и более раз подряд,
			// то меняем расписание рег.задания.
			ОдинРазВСутки = Истина;
		КонецЕсли;
	Иначе
		КоличествоОшибокСоединения = 0;
	КонецЕсли;
	
	Если ТребуетсяЗапускРегламентногоЗаданияОбменаСФСС(Организации) Тогда
		ВключитьОбменСФСС(ОдинРазВСутки);
	Иначе
		ОтключитьОбменСФСС();
	КонецЕсли;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		КлючОбъектаОбщихНастроек(),
		КлючКоличествоОшибокСоединения,
		КоличествоОшибокСоединения);
		
	Если БылиОшибки Тогда
		ОписаниеОшибки = НСтр("ru='При получении данных СЭДО ФСС происходили ошибки. Подробную информацию об ошибках см. в технологическом журнале.'");
		ВызватьИсключение(ОписаниеОшибки);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ТребуетсяЗапускРегламентногоЗаданияОбменаСФСС(Организации) Экспорт
	
	КонтекстЭДО = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДО.ТребуетсяЗапускРегламентногоЗаданияОбменаСФСС(Организации);
	
КонецФункции

// Получает метаданные входящих сообщений на сервере СЭДО ФСС и возвращает результат.
Функция МетаданныеВходящихСообщенийСЭДОФСС(Организация) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Результат = КонтекстЭДОСервер.МетаданныеВходящихСообщенийСЭДОФСС(Организация);
	
	Возврат Результат;
	
КонецФункции

// Включает регламентное задание обмена с сервером СЭДО ФСС.
Процедура ВключитьОбменСФСС(ОдинРазВСутки = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КоличествоСекундВЧасе = 3600;
	Если ОдинРазВСутки Тогда
		ПериодПовтораВТечениеДня = 0;
	Иначе
		ПериодПовтораВТечениеДня = КоличествоСекундВЧасе;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ключ", ИдентификаторРегламентногоЗадания());
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	Если Задания.Количество() > 0 Тогда
		ПараметрыЗадания = Задания[0];
		Если ПараметрыЗадания.Использование Тогда
			Если ПараметрыЗадания.Расписание.ПериодПовтораВТечениеДня <> ПериодПовтораВТечениеДня Тогда
				ПараметрыЗадания.Расписание.ПериодПовтораВТечениеДня = ПериодПовтораВТечениеДня;
				НовыеПараметры = Новый Структура;
				НовыеПараметры.Вставить("Расписание", ПараметрыЗадания.Расписание);
				НовыеПараметры.Вставить("ИнтервалПовтораПриАварийномЗавершении", 0);
				НовыеПараметры.Вставить("КоличествоПовторовПриАварийномЗавершении", 0);
				РегламентныеЗаданияСервер.ИзменитьЗадание(ПараметрыЗадания.УникальныйИдентификатор, НовыеПараметры);
			КонецЕсли;
			Возврат;
		Иначе
			ОтключитьОбменСФСС();
		КонецЕсли;
	КонецЕсли;
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ПериодПовтораВТечениеДня = ПериодПовтораВТечениеДня;
	Расписание.ПериодПовтораДней 		= 1;

	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ОбменСФСС);
	ПараметрыЗадания.Вставить("Ключ", ИдентификаторРегламентногоЗадания());
	ПараметрыЗадания.Вставить("Расписание", Расписание);
	ПараметрыЗадания.Вставить("Использование", Истина);
	ПараметрыЗадания.Вставить("ИнтервалПовтораПриАварийномЗавершении", 0);
	ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 0);
	ПараметрыЗадания.Вставить("Наименование", НСтр("ru='Обмен с ФСС'"));
	
	РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Отключает регламентное задание обмена с сервером СЭДО ФСС.
Процедура ОтключитьОбменСФСС() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура("Ключ", ИдентификаторРегламентногоЗадания());
	НайденныеЗадания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
	Для Каждого Задание Из НайденныеЗадания Цикл
		РегламентныеЗаданияСервер.УдалитьЗадание(Задание.УникальныйИдентификатор);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Определяет следующие свойств регламентных заданий:
//  - зависимость от функциональных опций.
//  - возможность выполнения в различных режимах работы программы.
//  - прочие параметры.
//
// Параметры:
//  Настройки - ТаблицаЗначений - таблица значений с колонками:
//    * РегламентноеЗадание - ОбъектМетаданных:РегламентноеЗадание - регламентное задание.
//    * ФункциональнаяОпция - ОбъектМетаданных:ФункциональнаяОпция - функциональная опция,
//        от которой зависит регламентное задание.
//    * ЗависимостьПоИ      - Булево - если регламентное задание зависит более, чем
//        от одной функциональной опции и его необходимо включать только тогда,
//        когда все функциональные опции включены, то следует указывать Истина
//        для каждой зависимости.
//        По умолчанию Ложь - если хотя бы одна функциональная опция включена,
//        то регламентное задание тоже включено.
//    * ВключатьПриВключенииФункциональнойОпции - Булево, Неопределено - если Ложь, то при
//        включении функциональной опции регламентное задание не будет включаться. Значение
//        Неопределено соответствует значению Истина.
//        По умолчанию - неопределено.
//    * ДоступноВПодчиненномУзлеРИБ - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в РИБ.
//        По умолчанию - неопределено.
//    * ДоступноВАвтономномРабочемМесте - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в автономном рабочем месте.
//        По умолчанию - неопределено.
//    * ДоступноВМоделиСервиса      - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в модели сервиса.
//        По умолчанию - неопределено.
//    * РаботаетСВнешнимиРесурсами  - Булево - Истина, если регламентное задание модифицирует данные
//        во внешних источниках (получение почты, синхронизация данных и т.п.).
//        По умолчанию - Ложь.
//    * Параметризуется             - Булево - Истина, если регламентное задание параметризованное.
//        По умолчанию - Ложь.
//
// Например:
//	Настройка = Настройки.Добавить();
//	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбновлениеСтатусовДоставкиSMS;
//	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьПочтовыйКлиент;
//	Настройка.ДоступноВМоделиСервиса = Ложь;
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбменСФСС;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
КонецПроцедуры

// Заполняет соответствие имен методов их псевдонимам для вызова из очереди заданий.
// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
//
// Параметры:
//  СоответствиеИменПсевдонимам - Соответствие - 
//    * Ключ - псевдоним метода, например ОчиститьОбластьДанных.
//    * Значение - имя метода для вызова, например РаботаВМоделиСервиса.ОчиститьОбластьДанных.
//        В качестве значения можно указать Неопределено, в этом случае считается что имя 
//        совпадает с псевдонимом.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОбменСФСС.ИмяМетода);
	
КонецПроцедуры

// Возвращает массив новых сообщений СЭДО ФСС.
// Параметры:
//   Отбор - Структура - параметры отбора сообщений.
//     * Организация - СправочникСсылка.Организации, Массив - организация(и) для отбора по организациям.
//     * Тип - Строка, Массив - тип(ы) сообщения(ий) для отбора по типу.
//     * ТребуетсяПодтверждение - Булево - признак отбора сообщений требующих подтверждение.
// Возвращаемое значение:
//   Таблица значений с колонками:
//     * Идентификатор - Строка - идентификатор сообщения.
//     * Организация - СправочникСсылка.Организации - организация сообщения.
//     * Тип - Строка - тип сообщения.
//     * Тип - Строка - тип сообщения.
Функция НовыеСообщенияСЭДОФСС(Знач Отбор = Неопределено) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Результат = КонтекстЭДОСервер.НовыеСообщенияСЭДОФСС(Отбор);
	
КонецФункции

Функция ПриПолученииСпискаНовыхСообщенийСЭДО(Организация, ДанныеСообщений) Экспорт
	
	Обработанные = Новый Массив;
	ЭлектронныйДокументооборотСФССПереопределяемый.
		ПослеЗагрузкиУведомленийОНовыхСообщенияхСЭДО(Организация, ДанныеСообщений, Обработанные);
	Возврат Обработанные;
	
КонецФункции

Функция ПриПолученииСодержимогоСообщенияСЭДО(Организация, ДанныеСообщения) Экспорт
	
	РезультатОбработки = Новый Структура;
	РезультатОбработки.Вставить("Обработано", Ложь);
	РезультатОбработки.Вставить("ОшибкаОбработки", Ложь);
	РезультатОбработки.Вставить("ОписаниеОшибки", "");
	
	ЭлектронныйДокументооборотСФССПереопределяемый.
		ПослеРасшифровкиСообщенияСЭДО(Организация, ДанныеСообщения, РезультатОбработки);
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция РегистрационныйНомерФССОрганизации(Организация) Экспорт
	
	КонтекстЭДО = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	СвойстваОрганизации = КонтекстЭДО.СвойстваОрганизацииДляОбмена(Организация);

	Возврат СвойстваОрганизации.РегистрационныйНомерФСС;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИдентификаторРегламентногоЗадания()
	
	Возврат "ОбменСФСС";
	
КонецФункции

Функция СписокДопустимыхОрганизацийВОбъектахОбменаФСС()
	
	КонтекстЭДО = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДО.СписокДопустимыхОрганизацийВОбъектахОбменаФСС();
	
КонецФункции

Функция СобытиеЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Автоматический обмен с СЭДО ФСС'");
	
КонецФункции

Процедура ЗаписатьСобытиеВЖурнал(Уровень, ТекстСобытия, Данные = Неопределено)
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), Уровень, , Данные, ТекстСобытия);
	
КонецПроцедуры

Функция КлючОбъектаОбщихНастроек()
	
	Возврат "ЭлектронныйДокументооборотСФСС";
	
КонецФункции

#КонецОбласти