#Область ПрограммныйИнтерфейс

// Построить дерево упаковок на основании данных о кодах маркировки.
//
// Параметры:
// 	Значение - Массив, Строка - Коды маркировки для которых необходимо построить дерево упаковок.
// 	Детализация - ПеречислениеСсылка.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП, Неопределено - Детализация хранения табачной продукции.
// 	ВариантПолученияМРЦ - Строка, Неопределено - Вариант получения МРЦ ("ВычислениеИЗапрос" или "Вычиление").
// Возвращаемое значение:
// 	Структура - Описание:
//	 * ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
//	 * ТекстОшибки                    - Строка - Текст ошибки.
//	 * ДеревоУпаковок                 - ДеревоЗначений, Неопределено - Дерево упаковок, построенное по переданным кодам маркировки.
//	 * GTIN - ТаблицаЗначений - Список GTIN в разрезе МРЦ:
//	  ** GTIN - Строка - GTIN.
//	  ** МРЦ - Число - МРЦ.
//
Функция ДеревоУпаковок(Значение, Детализация = Неопределено, ВариантПолученияМРЦ = "ВычислениеИЗапрос") Экспорт
	
	ДеревоУпаковок = Новый ДеревоЗначений;
	ДеревоУпаковок.Колонки.Добавить("Штрихкод",             Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200)));
	ДеревоУпаковок.Колонки.Добавить("ТипШтрихкода",         Новый ОписаниеТипов("ПеречислениеСсылка.ТипыШтрихкодов"));
	ДеревоУпаковок.Колонки.Добавить("ВидУпаковки",          Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС"));
	ДеревоУпаковок.Колонки.Добавить("ВидПродукции",         Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	ДеревоУпаковок.Колонки.Добавить("СоставКодаМаркировки");
	
	ДеревоУпаковок.Колонки.Добавить("GTIN",                 Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ДеревоУпаковок.Колонки.Добавить("Статус",               Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП"));
	ДеревоУпаковок.Колонки.Добавить("ИННВладельца",         Новый ОписаниеТипов("Строка"));
	ДеревоУпаковок.Колонки.Добавить("МРЦ",                  Новый ОписаниеТипов("Число"));
	ДеревоУпаковок.Колонки.Добавить("КоличествоБлоков",     Новый ОписаниеТипов("Число"));
	ДеревоУпаковок.Колонки.Добавить("КоличествоПачек",      Новый ОписаниеТипов("Число"));
	ДеревоУпаковок.Колонки.Добавить("СодержимоеНедоступно", Новый ОписаниеТипов("Булево"));
	
	СоответствиеСтрокДерева = Новый Соответствие;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ДеревоУпаковок",                 Неопределено);
	ВозвращаемоеЗначение.Вставить("GTIN",                           Неопределено);
	ВозвращаемоеЗначение.Вставить("СоответствиеСтрокДерева",        СоответствиеСтрокДерева);
	
	Если ТипЗнч(Значение) = Тип("Структура") Тогда
		
		ИсходныйМассивСтрок = Новый Массив();
		ИсходныйМассивСтрок.Добавить(Значение);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Или ТипЗнч(Значение) = Тип("ТаблицаЗначений") Тогда
		ИсходныйМассивСтрок = Значение;
	Иначе
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка'");
	КонецЕсли;
	
	ЛогистическиеУпаковкиСоСкобками = Новый Соответствие;
	ЛогистическиеУпаковкиБезСкобок  = Новый Соответствие;
	
	ПараметрыНормализацииТабакЛогистическаяУпаковка = ШтрихкодированиеИССлужебный.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииТабакЛогистическаяУпаковка.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииТабакЛогистическаяУпаковка.НачинаетсяСоСкобки       = Ложь;
	
	ПакетыКодовМаркировки = Новый Массив;
	ПакетКодовМаркировки  = Неопределено;
	КоличествоВПакете     = 100;
	
	Для Каждого СтрокаКодаМаркировки Из ИсходныйМассивСтрок Цикл
		
		Если ПакетКодовМаркировки = Неопределено
			Или ПакетКодовМаркировки.Количество() >= КоличествоВПакете Тогда
			ПакетКодовМаркировки = Новый Массив;
			ПакетыКодовМаркировки.Добавить(ПакетКодовМаркировки);
		КонецЕсли;
		
		Если СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			
			КодМаркировкиБезСкобок = ШтрихкодированиеИССлужебный.НормализоватьКодМаркировки(
				СтрокаКодаМаркировки, Перечисления.ВидыПродукцииИС.Табак, ПараметрыНормализацииТабакЛогистическаяУпаковка);
			
			Если КодМаркировкиБезСкобок <> СтрокаКодаМаркировки.Штрихкод Тогда
				
				// Формирование копии элемента без скобок
				СтрокаКодаМаркировкиБезСкобок = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода();
				ЗаполнитьЗначенияСвойств(СтрокаКодаМаркировкиБезСкобок, СтрокаКодаМаркировки);
				СтрокаКодаМаркировкиБезСкобок.Штрихкод = КодМаркировкиБезСкобок;
				
				ЛогистическиеУпаковкиБезСкобок.Вставить(СтрокаКодаМаркировкиБезСкобок, СтрокаКодаМаркировки);
				ЛогистическиеУпаковкиСоСкобками.Вставить(СтрокаКодаМаркировки, СтрокаКодаМаркировкиБезСкобок);
				
				ПакетКодовМаркировки.Добавить(СтрокаКодаМаркировкиБезСкобок);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПакетКодовМаркировки.Добавить(СтрокаКодаМаркировки);
		
	КонецЦикла;
	
	СтатусыКодовМаркировки = Новый Соответствие;
	
	Для Каждого ПакетКодовМаркировки Из ПакетыКодовМаркировки Цикл
		
		РезультатЗапросаСтатусовКодовМаркировок = ЗапроситьСтатусыКодовМаркировкиПакетно(ПакетКодовМаркировки, СтатусыКодовМаркировки);
		
		Если РезультатЗапросаСтатусовКодовМаркировок.ТребуетсяОбновлениеКлючаСессии Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки                    = РезультатЗапросаСтатусовКодовМаркировок.ТекстОшибки;
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатЗапросаСтатусовКодовМаркировок.СтатусыКодовМаркировки = Неопределено Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = РезультатЗапросаСтатусовКодовМаркировок.ТекстОшибки;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Соответствие кодов маркировки и строк дерева
	КешGTIN = Новый ТаблицаЗначений;
	КешGTIN.Колонки.Добавить("GTIN", Метаданные.ОпределяемыеТипы.GTIN.Тип);
	КешGTIN.Колонки.Добавить("МРЦ",  Новый ОписаниеТипов("Число"));
	КешGTIN.Индексы.Добавить("GTIN, МРЦ");
	
	Кеш = Новый Структура;
	Кеш.Вставить("GTIN",                КешGTIN);
	Кеш.Вставить("КодыМаркировки",      Новый Соответствие);
	Кеш.Вставить("ЗапросИУстановкаМРЦ", Новый Массив);
	Кеш.Вставить("ВычислениеМРЦ",       Новый Массив);

	Для Каждого ПакетКодовМаркировки Из ПакетыКодовМаркировки Цикл
		
		Для Каждого СтрокаКодаМаркировки Из ПакетКодовМаркировки Цикл
			
			СтрокаДереваИзКеша = Кеш.КодыМаркировки[СтрокаКодаМаркировки.Штрихкод];
			Если СтрокаДереваИзКеша <> Неопределено Тогда
				// Код маркировки уже добавлен в упаковку
				Продолжить;
			КонецЕсли;
			
			Если СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
				
				ДанныеСтатуса = СтатусыКодовМаркировки[СтрокаКодаМаркировки];
				
				СтрокаДерева = ДеревоУпаковок.Строки.Добавить();
				СтрокаДерева.Штрихкод     = СтрокаКодаМаркировки.Штрихкод;
				
				СтрокаДерева.ТипШтрихкода         = СтрокаКодаМаркировки.ТипШтрихкода;
				СтрокаДерева.ВидУпаковки          = СтрокаКодаМаркировки.ВидУпаковки;
				СтрокаДерева.ВидПродукции         = СтрокаКодаМаркировки.ВидПродукции;
				СтрокаДерева.СоставКодаМаркировки = СтрокаКодаМаркировки.СоставКодаМаркировки;
				
				СтрокаДерева.Статус          = ДанныеСтатуса.Статус;
				СтрокаДерева.ИННВладельца    = ДанныеСтатуса.ИННВладельца;
				Если СтрокаКодаМаркировки.СоставКодаМаркировки <> Неопределено Тогда
					СтрокаКодаМаркировки.СоставКодаМаркировки.Свойство("МРЦ",  СтрокаДерева.МРЦ);
					СтрокаКодаМаркировки.СоставКодаМаркировки.Свойство("GTIN", СтрокаДерева.GTIN);
				КонецЕсли;
				СтрокаДерева.КоличествоПачек = 1;
				
				Если Не ЗначениеЗаполнено(СтрокаДерева.МРЦ) Тогда
					
					ДанныеСтатуса.Свойство("МРЦ", СтрокаДерева.МРЦ);
					
				КонецЕсли;
				
				Кеш.КодыМаркировки.Вставить(СтрокаКодаМаркировки.Штрихкод, СтрокаДерева);
				ОбновитьКешGTIN(СтрокаДерева, Кеш.GTIN);
				СоответствиеСтрокДерева.Вставить(СтрокаКодаМаркировки, СтрокаДерева);
				
			Иначе
				
				Если СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
					
					ДанныеСтатуса                   = СтатусыКодовМаркировки[СтрокаКодаМаркировки];
					СтрокаКодаМаркировкиДляПроверки = СтрокаКодаМаркировки;
					
				Иначе
					
					СтрокаКодаМаркировкиБезСкобок  = ЛогистическиеУпаковкиСоСкобками.Получить(СтрокаКодаМаркировки);
					СтрокаКодаМаркировкиСоСкобками = ЛогистическиеУпаковкиБезСкобок.Получить(СтрокаКодаМаркировки);
					
					Если СтрокаКодаМаркировкиБезСкобок <> Неопределено
						Или СтрокаКодаМаркировкиСоСкобками <> Неопределено Тогда
						
						// Обрабатываем из пары только код со скобками
						Если СтрокаКодаМаркировкиБезСкобок = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						СтрокаКодаМаркировкиСоСкобками = СтрокаКодаМаркировки;
						
						ДанныеСтатусаБезСкобок  = СтатусыКодовМаркировки[СтрокаКодаМаркировкиБезСкобок];
						ДанныеСтатусаСоСкобками = СтатусыКодовМаркировки[СтрокаКодаМаркировкиСоСкобками];
						
						Если ДанныеСтатусаСоСкобками <> Неопределено Тогда
							ДанныеСтатуса                   = ДанныеСтатусаСоСкобками;
							СтрокаКодаМаркировкиДляПроверки = СтрокаКодаМаркировкиСоСкобками;
						ИначеЕсли ДанныеСтатусаБезСкобок <> Неопределено Тогда
							ДанныеСтатуса                   = ДанныеСтатусаБезСкобок;
							СтрокаКодаМаркировкиДляПроверки = СтрокаКодаМаркировкиБезСкобок;
						Иначе
							ДанныеСтатуса                   = ИнтерфейсМОТПСлужебный.ПараметрыКодаМаркировки();
							ДанныеСтатуса.Статус            = Перечисления.СтатусыКодовМаркировкиМОТП.Неопределен;
							СтрокаКодаМаркировкиДляПроверки = СтрокаКодаМаркировкиСоСкобками;
						КонецЕсли;
						
					Иначе
						ДанныеСтатуса = СтатусыКодовМаркировки[СтрокаКодаМаркировки];
						СтрокаКодаМаркировкиДляПроверки = СтрокаКодаМаркировки;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ДанныеСтатуса.Статус <> Перечисления.СтатусыКодовМаркировкиМОТП.Неопределен Тогда
					
					Результат = ЗапроситьДанныеОбАгрегацииКодовМаркировки(СтрокаКодаМаркировкиДляПроверки);
					Если Результат.ДанныеОбАгрегации <> Неопределено
						И Результат.ДанныеОбАгрегации.Количество() > 0 Тогда
						
						ДанныеСтроки = Новый Структура;
						ДанныеСтроки.Вставить("МРЦ",              ДанныеСтатуса.МРЦ);
						ДанныеСтроки.Вставить("GTIN",             "");
						ДанныеСтроки.Вставить("КоличествоПачек",  0);
						ДанныеСтроки.Вставить("КоличествоБлоков", 0);
						ДанныеСтроки.Вставить("ИННВладельца",     ДанныеСтатуса.ИННВладельца);
						ДанныеСтроки.Вставить("Статус",           ДанныеСтатуса.Статус);
						
						Если СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
							
							ДанныеСтроки.КоличествоБлоков = 1;
							Если СтрокаКодаМаркировки.СоставКодаМаркировки <> Неопределено Тогда
								Если Не ЗначениеЗаполнено(ДанныеСтроки.МРЦ) Тогда
									СтрокаКодаМаркировки.СоставКодаМаркировки.Свойство("МРЦ",  ДанныеСтроки.МРЦ);
								КонецЕсли;
								СтрокаКодаМаркировки.СоставКодаМаркировки.Свойство("GTIN", ДанныеСтроки.GTIN);
							КонецЕсли;
							
						КонецЕсли;
						
						Если Не ЗначениеЗаполнено(Детализация)
							Или Детализация = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Полная
							Или (СтрокаКодаМаркировки.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Групповая И Детализация = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Коробки)
							Или Детализация = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.КоробкиСБлоками
							Или (СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая И Детализация = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.БлокиСПачками) Тогда
							
							СтрокаДерева = ДеревоУпаковок.Строки.Добавить();
							СтрокаДерева.Штрихкод = СтрокаКодаМаркировки.Штрихкод;
							
							СтрокаДерева.ТипШтрихкода         = СтрокаКодаМаркировки.ТипШтрихкода;
							СтрокаДерева.ВидУпаковки          = СтрокаКодаМаркировки.ВидУпаковки;
							СтрокаДерева.ВидПродукции         = СтрокаКодаМаркировки.ВидПродукции;
							СтрокаДерева.СоставКодаМаркировки = СтрокаКодаМаркировки.СоставКодаМаркировки;
							
							СтрокаДерева.Статус           = ДанныеСтроки.Статус;
							СтрокаДерева.ИННВладельца     = ДанныеСтроки.ИННВладельца;
							СтрокаДерева.GTIN             = ДанныеСтроки.GTIN;
							СтрокаДерева.МРЦ              = ДанныеСтроки.МРЦ;
							СтрокаДерева.КоличествоБлоков = ДанныеСтроки.КоличествоБлоков;
							СтрокаДерева.КоличествоПачек  = ДанныеСтроки.КоличествоПачек;
							
							ПараметрыЗаполнения = ПараметрыЗаполненияДереваУпаковок();
							ПараметрыЗаполнения.ДеревоУпаковок         = СтрокаДерева;
							ПараметрыЗаполнения.ДанныеВерхнегоУровня   = СтрокаДерева;
							ПараметрыЗаполнения.КодыМаркировкиУпаковок = Результат.ДанныеОбАгрегации;
							ПараметрыЗаполнения.Кеш                    = Кеш;
							ПараметрыЗаполнения.Детализация            = Детализация;
							ПараметрыЗаполнения.ВариантПолученияМРЦ    = ВариантПолученияМРЦ;
							ПараметрыЗаполнения.СоответствиеСтрокДерева = СоответствиеСтрокДерева;
							
							ЗаполнитьДеревоУпаковокРекурсивно(ПараметрыЗаполнения);
							
							ОбновитьКешGTIN(СтрокаДерева, Кеш.GTIN);
							СоответствиеСтрокДерева.Вставить(СтрокаКодаМаркировки, СтрокаДерева);
							
						Иначе
							
							ПараметрыЗаполнения = ПараметрыЗаполненияДереваУпаковок();
							ПараметрыЗаполнения.ДеревоУпаковок          = ДеревоУпаковок;
							ПараметрыЗаполнения.ДанныеВерхнегоУровня    = ДанныеСтроки;
							ПараметрыЗаполнения.КодыМаркировкиУпаковок  = Результат.ДанныеОбАгрегации;
							ПараметрыЗаполнения.Кеш                     = Кеш;
							ПараметрыЗаполнения.Детализация             = Детализация;
							ПараметрыЗаполнения.ВариантПолученияМРЦ     = ВариантПолученияМРЦ;
							ПараметрыЗаполнения.СоответствиеСтрокДерева = СоответствиеСтрокДерева;
							
							ЗаполнитьДеревоУпаковокРекурсивно(ПараметрыЗаполнения);
							
							ОбновитьКешGTIN(ДанныеСтроки, Кеш.GTIN);
							
						КонецЕсли;
						
					Иначе
						
						Если Результат.ТребуетсяОбновлениеКлючаСессии Тогда
							
							ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
							
							Возврат ВозвращаемоеЗначение;
							
						ИначеЕсли ЗначениеЗаполнено(Результат.ТекстОшибки)
							И Не Результат.СодержимоеНедоступно Тогда
							
							ВозвращаемоеЗначение.ТекстОшибки = Результат.ТекстОшибки;
							
							Возврат ВозвращаемоеЗначение;
							
						Иначе
							
							// Коробка без вложений или содержимое недоступно
							СтрокаДерева = ДеревоУпаковок.Строки.Добавить();
							СтрокаДерева.Штрихкод     = СтрокаКодаМаркировки.Штрихкод;
							
							СтрокаДерева.ТипШтрихкода         = СтрокаКодаМаркировки.ТипШтрихкода;
							СтрокаДерева.ВидУпаковки          = СтрокаКодаМаркировки.ВидУпаковки;
							СтрокаДерева.ВидПродукции         = СтрокаКодаМаркировки.ВидПродукции;
							СтрокаДерева.СоставКодаМаркировки = СтрокаКодаМаркировки.СоставКодаМаркировки;
							
							СтрокаДерева.Статус       = ДанныеСтатуса.Статус;
							СтрокаДерева.ИННВладельца = ДанныеСтатуса.ИННВладельца;
							
							Если СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
								Если СтрокаКодаМаркировки.СоставКодаМаркировки <> Неопределено Тогда
									СтрокаКодаМаркировки.СоставКодаМаркировки.Свойство("МРЦ",  СтрокаДерева.МРЦ);
									СтрокаКодаМаркировки.СоставКодаМаркировки.Свойство("GTIN", СтрокаДерева.GTIN);
								КонецЕсли;
								Если Не ЗначениеЗаполнено(СтрокаДерева.МРЦ) Тогда
									ДанныеСтатуса.Свойство("МРЦ", СтрокаДерева.МРЦ);
								КонецЕсли;
								СтрокаДерева.КоличествоБлоков = 1;
							КонецЕсли;
							
							СтрокаДерева.СодержимоеНедоступно = Результат.СодержимоеНедоступно;
							
							Кеш.КодыМаркировки.Вставить(СтрокаКодаМаркировки.Штрихкод, СтрокаДерева);
							ОбновитьКешGTIN(СтрокаДерева, Кеш.GTIN);
							СоответствиеСтрокДерева.Вставить(СтрокаКодаМаркировки, СтрокаДерева);
							
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					
					// Статус неопределен => вложений не существует
					СтрокаДерева = ДеревоУпаковок.Строки.Добавить();
					СтрокаДерева.Штрихкод     = СтрокаКодаМаркировки.Штрихкод;
					
					СтрокаДерева.ТипШтрихкода         = СтрокаКодаМаркировки.ТипШтрихкода;
					СтрокаДерева.ВидУпаковки          = СтрокаКодаМаркировки.ВидУпаковки;
					СтрокаДерева.ВидПродукции         = СтрокаКодаМаркировки.ВидПродукции;
					СтрокаДерева.СоставКодаМаркировки = СтрокаКодаМаркировки.СоставКодаМаркировки;
					
					СтрокаДерева.Статус       = ДанныеСтатуса.Статус;
					СтрокаДерева.ИННВладельца = ДанныеСтатуса.ИННВладельца;
					
					Если СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
						Если СтрокаКодаМаркировки.СоставКодаМаркировки <> Неопределено Тогда
							СтрокаКодаМаркировки.СоставКодаМаркировки.Свойство("МРЦ",  СтрокаДерева.МРЦ);
							СтрокаКодаМаркировки.СоставКодаМаркировки.Свойство("GTIN", СтрокаДерева.GTIN);
						КонецЕсли;
						СтрокаДерева.КоличествоБлоков = 1;
					КонецЕсли;
					
					Кеш.КодыМаркировки.Вставить(СтрокаКодаМаркировки.Штрихкод, СтрокаДерева);
					ОбновитьКешGTIN(СтрокаДерева, Кеш.GTIN);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;

	ЗапросМРЦПоСтрокамДерева(Кеш.ЗапросИУстановкаМРЦ);
	ШтрихкодированиеМОТП.РасчетМРЦПоСтрокамДерева(Кеш.ВычислениеМРЦ);
	
	ВозвращаемоеЗначение.GTIN           = Кеш.GTIN;
	ВозвращаемоеЗначение.ДеревоУпаковок = ДеревоУпаковок;

	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получить данные продукции по штрихкоду EAN.
// 
// Параметры:
// 	Значение - Массив Из Строка, Строка - GTIN для которых необходимо получить представление и прочие данные.
// Возвращаемое значение:
// 	Структура - Описание:
// 	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
// 	* ДанныеПродукцииПоШтрихкодуEAN - Соответствие Из КлючИЗначение, Неопределено - Соответствие штрихкода EAN и данных продукции из сервиса ИС МОТП:
// 	 ** Ключ - Строка - Штрихкод EAN.
// 	 ** Значение - Структура - Реквизиты продукции:
// 		*** Идентификатор - Строка - Идентификатор продукции.
// 		*** Наименование - Строка - Идентификатор продукции.
// 		*** НаименованиеПолное - Строка - Идентификатор продукции.
// 		*** GTIN - Строка - Идентификатор продукции.
// 		*** ТорговаяМарка - Строка - Идентификатор продукции.
// 		*** ТипУпаковки - Строка - Идентификатор продукции.
// 		*** КоличествоВложенныхЕдиниц - Строка - Идентификатор продукции.
// 		*** Производители - Массив Из Структура - Массив производителей:
// 			**** Наименование - Строка - Наименование производителя.
// 			**** НаименованиеПолное - Строка - Полное наименование организации.
// 			**** ИНН - Строка - ИНН.
// 			**** КПП - Строка - КПП.
// 			**** ФИО - Строка - ФИО.
// 			**** Адрес - Строка - Фактический адрес организации.
// 		*** ВыполненаСинхронизацияGS1 - Булево - Признак выполненной синхронизации с GS1.
// 	* ТекстОшибки                    - Строка - Текст ошибки.
Функция ДанныеПродукцииПоШтрихкодуEAN(Значение) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("ДанныеПродукцииПоШтрихкодуEAN",  Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	ДанныеПродукцииПоШтрихкодуEAN = Новый Соответствие;
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		ДанныеПродукцииПоШтрихкодуEAN.Вставить(Значение, Неопределено);
	ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
		Для Каждого Штрихкод Из Значение Цикл
			ДанныеПродукцииПоШтрихкодуEAN.Вставить(Штрихкод, Неопределено);
		КонецЦикла;
	Иначе
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка'");
	КонецЕсли;
	
	МассивGTIN = Новый Массив();
	Для Каждого КлючИЗначение Из ДанныеПродукцииПоШтрихкодуEAN Цикл
		ШтрихкодEAN = КлючИЗначение.Ключ;
		МассивGTIN.Добавить(ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(ШтрихкодEAN));
	КонецЦикла;
	
	РезультатЗапросаСпискаПродукции  = ЗапроситьКарточкуПродукции(МассивGTIN);
	
	ВозвращаемоеЗначение.ТекстОшибки = РезультатЗапросаСпискаПродукции.ТекстОшибки;
	
	Если РезультатЗапросаСпискаПродукции.ДанныеПродукции <> Неопределено Тогда
		
		ДанныеПродукции = РезультатЗапросаСпискаПродукции.ДанныеПродукции;
		
		Для Каждого КлючИЗначение Из ДанныеПродукцииПоШтрихкодуEAN Цикл
			
			ШтрихкодEAN = КлючИЗначение.Ключ;
			
			ПолученныеДанные = ДанныеПродукции.Получить(ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(ШтрихкодEAN));
			Если ПолученныеДанные <> Неопределено Тогда
				
				ДанныеПродукцииПоШтрихкодуEAN.Вставить(ШтрихкодEAN, ПолученныеДанные);
				
			КонецЕсли;
			
		КонецЦикла;
	
	ИначеЕсли РезультатЗапросаСпискаПродукции.ТребуетсяОбновлениеКлючаСессии Тогда
		
		ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
		Возврат ВозвращаемоеЗначение;
		
	Иначе
		
		Возврат ВозвращаемоеЗначение;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение.ДанныеПродукцииПоШтрихкодуEAN = ДанныеПродукцииПоШтрихкодуEAN;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#Область РеестрКодовМаркировки

// Запрос статусов кодов маркировки (включая владельца).
// В результате успешного выполнения запроса в ответе вернется список кодов маркировки,
// их статус и владелец на момент запроса. Статусы могут принимать следующие значение:
// 	EMITTED - Эмитирован,
// 	APPLIED - Нанесён,
// 	INTRODUCED - Введён в оборот,
// 	WRITTEN_OFF - Выведен из оборота, списан,
// 	WITHDRAWN - Выведен из оборота, продан,
// 	UNDEFINED - Неопределен.
// 
// Параметры:
// 	ДанныеДляЗапроса          - Массив из Структура,СтрокаТаблицыЗначений,СтрокаДереваЗначений
// 	                            Структура,СтрокаТаблицыЗначений           - Данные для запроса статусов.
// 	СтатусыКодовМаркировкиКеш - Соответствие, Неопределено                - Кеш статусов кодов маркировки.
// 	Организация               - ОпределяемыйТип.Организация               - Организация.
// Возвращаемое значение:
//	Структура - Описание:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
//	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON).
//	* СтатусыКодовМаркировки - Соответствие - кодов маркировки и структур:
//		* Статус       - ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП - Статус кода маркировки.
//		* ИННВладельца - Строка                                        - ИНН владельца кода маркировки.
// * ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция ЗапроситьСтатусыКодовМаркировки(ДанныеДляЗапроса, СтатусыКодовМаркировкиКеш = Неопределено, Организация = Неопределено) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсМОТПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("СтатусыКодовМаркировки",         Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ЛогистическиеУпаковкиСоСкобками = Новый Соответствие;
	ЛогистическиеУпаковкиБезСкобок  = Новый Соответствие;
	
	ПараметрыНормализацииТабакЛогистическаяУпаковка = ШтрихкодированиеИССлужебный.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииТабакЛогистическаяУпаковка.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииТабакЛогистическаяУпаковка.НачинаетсяСоСкобки       = Ложь;
	
	ПакетыКодовМаркировки = Новый Массив;
	ПакетКодовМаркировки  = Неопределено;
	
	Если ТипЗнч(ДанныеДляЗапроса) = Тип("Структура")
		Или ТипЗнч(ДанныеДляЗапроса) = Тип("СтрокаТаблицыЗначений") 
		Или ТипЗнч(ДанныеДляЗапроса) = Тип("СтрокаДереваЗначений") Тогда
		
		МассивИсходныхСтрок = Новый Массив();
		МассивИсходныхСтрок.Добавить(ДанныеДляЗапроса);
		
	Иначе
		
		МассивИсходныхСтрок = ДанныеДляЗапроса;
		
	КонецЕсли;
	
	Для Каждого СтрокаКодаМаркировки Из МассивИсходныхСтрок Цикл
		
		Если ПакетКодовМаркировки = Неопределено
			Или ПакетКодовМаркировки.Количество() >= 25 Тогда
			ПакетКодовМаркировки = Новый Массив();
			ПакетыКодовМаркировки.Добавить(ПакетКодовМаркировки);
		КонецЕсли;
		
		Если СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			
			КодМаркировкиБезСкобок = ШтрихкодированиеИССлужебный.НормализоватьКодМаркировки(
				СтрокаКодаМаркировки, Перечисления.ВидыПродукцииИС.Табак, ПараметрыНормализацииТабакЛогистическаяУпаковка);
			
			Если КодМаркировкиБезСкобок <> СтрокаКодаМаркировки.Штрихкод Тогда
				
				// Формирование копии элемента без скобок
				СтрокаКодаМаркировкиБезСкобок = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода(, СтрокаКодаМаркировки.ВидПродукции);
				ЗаполнитьЗначенияСвойств(СтрокаКодаМаркировкиБезСкобок, СтрокаКодаМаркировки);
				СтрокаКодаМаркировкиБезСкобок.Штрихкод = КодМаркировкиБезСкобок;
				
				ЛогистическиеУпаковкиБезСкобок.Вставить(СтрокаКодаМаркировкиБезСкобок, СтрокаКодаМаркировки);
				ЛогистическиеУпаковкиСоСкобками.Вставить(СтрокаКодаМаркировки, СтрокаКодаМаркировкиБезСкобок);
				
				ПакетКодовМаркировки.Добавить(СтрокаКодаМаркировкиБезСкобок);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПакетКодовМаркировки.Добавить(СтрокаКодаМаркировки);
		
	КонецЦикла;
	
	СтатусыКодовМаркировки = Новый Соответствие;
	
	Для Каждого ПакетКодовМаркировки Из ПакетыКодовМаркировки Цикл
		
		РезультатЗапросаСтатусовКодовМаркировок = ЗапроситьСтатусыКодовМаркировкиПакетно(
			ПакетКодовМаркировки, СтатусыКодовМаркировки, Организация);
		
		ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатЗапросаСтатусовКодовМаркировок.РезультатОтправкиЗапроса;
		
		Если РезультатЗапросаСтатусовКодовМаркировок.ТребуетсяОбновлениеКлючаСессии Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки                    = РезультатЗапросаСтатусовКодовМаркировок.ТекстОшибки;
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли ЗначениеЗаполнено(РезультатЗапросаСтатусовКодовМаркировок.ТекстОшибки) Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = РезультатЗапросаСтатусовКодовМаркировок.ТекстОшибки;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ПакетКодовМаркировки Из ПакетыКодовМаркировки Цикл
		
		Для Каждого СтрокаКодаМаркировки Из ПакетКодовМаркировки Цикл
			
			Если СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
				
				СтрокаКодаМаркировкиБезСкобок  = ЛогистическиеУпаковкиСоСкобками.Получить(СтрокаКодаМаркировки);
				СтрокаКодаМаркировкиСоСкобками = ЛогистическиеУпаковкиБезСкобок.Получить(СтрокаКодаМаркировки);
				
				Если СтрокаКодаМаркировкиБезСкобок <> Неопределено
					Или СтрокаКодаМаркировкиСоСкобками <> Неопределено Тогда
					
					// Обрабатываем из пары только код со скобками
					Если СтрокаКодаМаркировкиБезСкобок = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаКодаМаркировкиСоСкобками = СтрокаКодаМаркировки;
					
					ДанныеСтатусаБезСкобок  = СтатусыКодовМаркировки[СтрокаКодаМаркировкиБезСкобок];
					ДанныеСтатусаСоСкобками = СтатусыКодовМаркировки[СтрокаКодаМаркировкиСоСкобками];
					
					Если ДанныеСтатусаСоСкобками <> Неопределено
						И ДанныеСтатусаСоСкобками.Статус <> Перечисления.СтатусыКодовМаркировкиМОТП.Неопределен Тогда
						ДанныеСтатуса = ДанныеСтатусаСоСкобками;
					ИначеЕсли ДанныеСтатусаБезСкобок <> Неопределено
						И ДанныеСтатусаБезСкобок.Статус <> Перечисления.СтатусыКодовМаркировкиМОТП.Неопределен Тогда
						ДанныеСтатуса = ДанныеСтатусаБезСкобок;
					Иначе
						ДанныеСтатуса = ДанныеСтатусаБезСкобок;
					КонецЕсли;
					
					СтатусыКодовМаркировки[СтрокаКодаМаркировки] = ДанныеСтатуса;
					СтатусыКодовМаркировки.Удалить(СтрокаКодаМаркировкиБезСкобок);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ВозвращаемоеЗначение.СтатусыКодовМаркировки = СтатусыКодовМаркировки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполнить запрос статусов для списка кодов маркировки.
// В результате успешного выполнения запроса в ответе вернется список кодов маркировки,
// их статус и владелец на момент запроса. Статусы могут принимать следующие значение:
// 	EMITTED - Эмитирован,
// 	APPLIED - Нанесён,
// 	INTRODUCED - Введён в оборот,
// 	WRITTEN_OFF - Выведен из оборота, списан,
// 	WITHDRAWN - Выведен из оборота, продан,
// 	UNDEFINED - Неопределен.
// 
// Параметры:
// 	МассивИсходныхСтрок       - Массив из Структура,СтрокаТаблицыЗначений - Массив кодов маркировки.
// 	СтатусыКодовМаркировкиКеш - Соответствие, Неопределено                - Кеш статусов кодов маркировки.
// 	Организация               - ОпределяемыйТип.Организация               - Организация.
// Возвращаемое значение:
//	Структура - Описание:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
//	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON).
//	* СтатусыКодовМаркировки - Соответствие - кодов маркировки и структур:
//		* Статус       - ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП - Статус кода маркировки.
//		* ИННВладельца - Строка                                        - ИНН владельца кода маркировки.
// * ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция ЗапроситьСтатусыКодовМаркировкиПакетно(МассивИсходныхСтрок, СтатусыКодовМаркировкиКеш = Неопределено, Организация = Неопределено) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсМОТПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("СтатусыКодовМаркировки",         Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	НормализованныеКодыМаркировки = Новый Массив;
	СоответствиеКодовМаркировки   = Новый Соответствие;
	
	ПараметрыНормализации = ШтрихкодированиеИССлужебный.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализации.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализации.ВключатьМРЦ = Ложь;
	
	Для Каждого СтрокаТаблицы Из МассивИсходныхСтрок Цикл
		
		Если СтрокаТаблицы.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			НормализованныйКодМаркировки = СтрокаТаблицы.Штрихкод;
		Иначе
			НормализованныйКодМаркировки = ШтрихкодированиеИССлужебный.НормализоватьКодМаркировки(
				СтрокаТаблицы, СтрокаТаблицы.ВидПродукции, ПараметрыНормализации);
		КонецЕсли;
		
		Если НормализованныеКодыМаркировки.Найти(НормализованныйКодМаркировки) = Неопределено Тогда
			НормализованныеКодыМаркировки.Добавить(НормализованныйКодМаркировки);
			СоответствиеКодовМаркировки.Вставить(НормализованныйКодМаркировки, Новый Массив);
		КонецЕсли;
		
		СоответствиеКодовМаркировки[НормализованныйКодМаркировки].Добавить(СтрокаТаблицы);
		
	КонецЦикла;
	
	URLЗапроса = "v3/cises/list";
	РезультатЗапроса = ИнтеграцияИСМП.ОтправитьДанныеВСервис(URLЗапроса, НормализованныеКодыМаркировки, КлючСессии, "POST", ИнтерфейсМОТПКлиентСервер.ПараметрыОтправкиHTTPЗапросов());
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				Если ТипЗнч(ДанныеОбработки) = Тип("Массив") Тогда

					Если СтатусыКодовМаркировкиКеш = Неопределено Тогда
						ВозвращаемоеЗначение.СтатусыКодовМаркировки = Новый Соответствие;
					Иначе
						ВозвращаемоеЗначение.СтатусыКодовМаркировки = СтатусыКодовМаркировкиКеш;
					КонецЕсли;
					
					Для Каждого Элемент Из ДанныеОбработки Цикл
						
						ПараметрыКодаМаркировки = ИнтерфейсМОТПСлужебный.ПараметрыКодаМаркировки();
						ПараметрыКодаМаркировки.Статус = ИнтерфейсМОТПСлужебный.СтатусКодаМаркировки(Элемент.status);
						Если Элемент.Свойство("ownerInn") Тогда
							ПараметрыКодаМаркировки.ИННВладельца = Элемент.ownerInn;
						КонецЕсли;
						
						Если Элемент.Свойство("ProducerInn") Тогда
							ПараметрыКодаМаркировки.ИННПроизводителя = Элемент.ProducerInn;
						КонецЕсли;
						
						Если Элемент.Свойство("producerName") Тогда
							ПараметрыКодаМаркировки.НаименованиеПроизводителя = Элемент.producerName;
						КонецЕсли;
						
						Если Элемент.Свойство("maxRetailPrice") Тогда
							ПараметрыКодаМаркировки.МРЦ = Элемент.maxRetailPrice;
							ПривестиЗначениеМРЦ(ПараметрыКодаМаркировки);
						КонецЕсли;
						
						Если Элемент.Свойство("productName") Тогда
							ПараметрыКодаМаркировки.Наименование = Элемент.productName;
						КонецЕсли;
						
						Для Каждого СтрокаТаблицы Из СоответствиеКодовМаркировки[Элемент.cis] Цикл
							
							ВозвращаемоеЗначение.СтатусыКодовМаркировки.Вставить(
								СтрокаТаблицы, ПараметрыКодаМаркировки);
							
						КонецЦикла;
						
					КонецЦикла;

				КонецЕсли;
				
			КонецЕсли;
		
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
	
	ИначеЕсли ВозвращаемоеЗначение.РезультатОтправкиЗапроса.КодСостояния = 404 Тогда
		
		Если СтатусыКодовМаркировкиКеш = Неопределено Тогда
			ВозвращаемоеЗначение.СтатусыКодовМаркировки = Новый Соответствие;
		Иначе
			ВозвращаемоеЗначение.СтатусыКодовМаркировки = СтатусыКодовМаркировкиКеш;
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из МассивИсходныхСтрок Цикл
			
			ПараметрыКодаМаркировки        = ИнтерфейсМОТПСлужебный.ПараметрыКодаМаркировки();
			ПараметрыКодаМаркировки.Статус = Перечисления.СтатусыКодовМаркировкиМОТП.Неопределен;
			
			ВозвращаемоеЗначение.СтатусыКодовМаркировки.Вставить(СтрокаТаблицы, ПараметрыКодаМаркировки);
			
		КонецЦикла;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполнить запрос данных об агрегации кодов маркировки в ИС МОТП.
// В результате успешного выполнения запроса в ответе вернется информация о составе кода агрегата.
// В запросе следует указывать только один код маркировки.
// 
// Параметры:
// 	СтрокаКодаМаркировки - Структура, СтрокаТаблицыЗначений - Строка кода маркировки.
// Возвращаемое значение:
//	 Структура - Вложенные коды упаковок:
//		* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
//		* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON).
//		* ТекстОшибки - Строка - Текст ошибки
//		* ДанныеОбАгрегации - Массив из Структура:
//			* КодМаркировки - Строка                                        - Код маркировки.
//			* Статус        - ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП - Статус кода маркировки.
//			* ИНН           - Строка                                        - ИНН владельца кода маркировки.
Функция ЗапроситьДанныеОбАгрегацииКодовМаркировки(СтрокаКодаМаркировки) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсМОТПКлиентСервер.ПараметрыЗапросаКлючаСессии());
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ДанныеОбАгрегации",              Неопределено);
	ВозвращаемоеЗначение.Вставить("СодержимоеНедоступно",           Ложь);
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ПараметрыНормализации = ШтрихкодированиеИССлужебный.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализации.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализации.ВключатьМРЦ = Ложь;
	
	Если СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		НормализованныйКодМаркировки = СтрокаКодаМаркировки.Штрихкод;
	Иначе
		НормализованныйКодМаркировки = ШтрихкодированиеИССлужебный.НормализоватьКодМаркировки(СтрокаКодаМаркировки, СтрокаКодаМаркировки.ВидПродукции, ПараметрыНормализации);
	КонецЕсли;
	
	URLЗапроса = СтрШаблон(
		"v3/cises/%1/aggregated",
		КодироватьСтроку(
			НормализованныйКодМаркировки,
			СпособКодированияСтроки.КодировкаURL));
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, КлючСессии, ИнтерфейсМОТПКлиентСервер.ПараметрыОтправкиHTTPЗапросов());
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.ДанныеОбАгрегации = ДанныеОбработки;
				
			КонецЕсли;
		
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 403 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.СодержимоеНедоступно = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// В результате успешного выполнения запроса в ответе вернется информация о максимальной
// розничной цене табачной продукции, если она установлена.
// 
// Параметры:
// 	ДанныеДляЗапроса - Массив из Структура,СтрокаТаблицыЗначений,СтрокаДереваЗначений,
// 	Структура,СтрокаТаблицыЗначений,СтрокаДереваЗначений - Коллекция или элемент коллекции.
// Возвращаемое значение:
//	Структура - Описание:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
//	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON).
//	* ДанныеПродукции - Соответствие - где:
//   * Ключ - Структура,СтрокаТаблицыЗначений,СтрокаДереваЗначений - Переданное значение в параметре ДанныеДляЗапроса,
//   * Значение - Структура - данные о статусе и МРЦ:
//		** Статус - ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП - Статус кода.
//		** МРЦ  - Число  - МРЦ для кода маркировки. Если указано -1, то МРЦ не ограничено.
//		** Наименование - Строка - Наименование продукции.
// * ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция ЗапроситьМРЦДляКодаМаркировки(ДанныеДляЗапроса) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ДанныеПродукции",                Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
		
	РезультатЗапросаСтатусов =  ЗапроситьСтатусыКодовМаркировки(ДанныеДляЗапроса);
	
	Если РезультатЗапросаСтатусов.СтатусыКодовМаркировки <> Неопределено Тогда
		
		ВозвращаемоеЗначение.ДанныеПродукции = РезультатЗапросаСтатусов.СтатусыКодовМаркировки;
		
	ИначеЕсли РезультатЗапросаСтатусов.ТребуетсяОбновлениеКлючаСессии Тогда
		
		ВозвращаемоеЗначение.ТекстОшибки = РезультатЗапросаСтатусов.ТекстОшибки;
		ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
		
		Возврат ВозвращаемоеЗначение;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = РезультатЗапросаСтатусов.ТекстОшибки;
		
		Возврат ВозвращаемоеЗначение;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Запрос списка кодов происходит в несколько этапов:
// 1. Формирование заказа на список кодов.
// Фильтр указания типа упаковки:
// 	Короб - box
// 	Блок  - block
// 	Пачка - pack
// 2. Проверка статуса заказа на формирование списка кодов маркировки участника.
// 3. Получение результата заказа на формирование списка кодов маркировки участника.
// 
// После успешного завершения по адресу результата заказа будет доступен архив со списком кодов,
// принадлежащих участнику, сформировавший запрос.
// Файл будет доступен для скачивание в течение часа, после чего будет удален.
// 
// Параметры:
// 	Организация - СправочникСсылка.Организации - Организация.
// 	ТипУпаковки - Строка - Для получения списка логистических упаковок: "box", для блоков: "black", для пачек "pack".
// Возвращаемое значение:
//	Структура - Описание:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
//	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON).
//	* ИдентификаторЗапроса - Строка - Идентификатор запроса.
//	* ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция СоздатьЗаказНаФормированиеСпискаКодовМаркировкиУчастника(Организация, ТипУпаковки = "box") Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсМОТПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ИдентификаторЗаказа",            Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;

	Если ТипУпаковки <> Неопределено Тогда
		ТелоЗапроса = Новый Структура;
		ТелоЗапроса.Вставить("packageType", ТипУпаковки);
	КонецЕсли;
	
	URLЗапроса = "v3/cises/my";
	РезультатЗапроса = ИнтеграцияИСМП.ОтправитьДанныеВСервис(URLЗапроса, ТелоЗапроса, КлючСессии, "POST", ИнтерфейсМОТПКлиентСервер.ПараметрыОтправкиHTTPЗапросов());
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ВозвращаемоеЗначение.ИдентификаторЗаказа = РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);

			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;

			Возврат ВозвращаемоеЗначение;

		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область РеестрУчастников

// Выполнить запрос статуса регистрации в МОТП по ИНН.
// В результате успешного выполнения запроса в ответе вернется
// информация о статусе регистрации в ИС МОТП, запрошенного ИНН.
// Сценарий использования: Проверка статуса регистрации перед передачей заявки о регистрации участника.
// 
// Параметры:
// 	ИНН - Строка - ИНН участника.
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Необходимость обновления ключа сессии.
//	* РезультатОтправкиЗапроса       - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON).
//	* Статус                         - ПеречислениеСсылка.СтатусыУчастниковМОТП - Статус участника.
//  * ТекстОшибки                    - Строка - Текст сообщения об ошибке.
Функция ЗапроситьСтатусРегистрацииУчастника(ИНН) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсМОТПКлиентСервер.ПараметрыЗапросаКлючаСессии());
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("Статус",                         Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ПустаяСтрока(ИНН) Тогда
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка: В метод ЗапроситьСтатусРегистрацииУчастника не передан ИНН'");
	КонецЕсли;
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	URLЗапроса = СтрШаблон(
		"v3/participants/%1",
		ИНН);
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, КлючСессии, ИнтерфейсМОТПКлиентСервер.ПараметрыОтправкиHTTPЗапросов());
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.Статус = ИнтерфейсМОТПСлужебный.СтатусУчастника(ДанныеОбработки.status);
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);

			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;

			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;

	Иначе

		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);

	КонецЕсли;

	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполнить запрос списка ИНН контрагентов организации.
// В результате успешного выполнения запроса в ответе вернется список, состоящий из ИНН контрагентов.
// Организация должна быть авторизована в ИС МОТП.
// 
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация, для которой запрашивается список ИНН контрагентов.
// 
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//	* ТребуетсяОбновлениеКлючаСессии - Булево    - Необходимость обновления ключа сессии.
//	* РезультатОтправкиЗапроса       - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON)
//	* ИННКонтрагентов                - Массив    - Список ИНН контрагентов.
//  * ТекстОшибки                    - Строка    - Текст сообщения об ошибке.
Функция ЗапроситьСписокКонтрагентовУчастника(Организация) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсМОТПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ИННКонтрагентов",                Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	URLЗапроса = "v3/partners/my";
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, КлючСессии, ИнтерфейсМОТПКлиентСервер.ПараметрыОтправкиHTTPЗапросов());
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.ИННКонтрагентов = ДанныеОбработки;
				
			КонецЕсли;

		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);

			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;

			Возврат ВозвращаемоеЗначение;

		КонецЕсли;

	Иначе

		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область РеестрПродукции

// Выполнить запрос списка продукции.
// В результате успешного выполнения запроса в ответе вернется список продукции,
// содержащие id - идентификатор продукта, gtin - международный товарный идентификатор и producerINN - ИНН производителя.
// 
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//	* ТребуетсяОбновлениеКлючаСессии - Булево          - Необходимость обновления ключа сессии.
//	* РезультатОтправкиЗапроса       - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON).
//	* ПродукцияОрганизации           - ТаблицаЗначений - Список продукции организации:
//		** GTIN                - Строка - GTIN товара.
//		** ИННПроизводителя    - Строка - ИНН производителя.
//		** ТипУпаковки         - Строка - Тип упаковки товара.
//		** КоличествоВложенных - Число  - Количество вложенных единиц.
//  * ТекстОшибки                    - Строка          - Текст сообщения об ошибке.
Функция ЗапроситьСписокПродукции() Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсМОТПКлиентСервер.ПараметрыЗапросаКлючаСессии());
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ПродукцияОрганизации",           Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	URLЗапроса = "v3/products";
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, КлючСессии, ИнтерфейсМОТПКлиентСервер.ПараметрыОтправкиHTTPЗапросов());
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ПродукцияОрганизации = Новый ТаблицаЗначений();
				ПродукцияОрганизации.Колонки.Добавить("GTIN",             Метаданные.ОпределяемыеТипы.GTIN.Тип);
				ПродукцияОрганизации.Колонки.Добавить("ИННПроизводителя", Новый ОписаниеТипов("Строка"));
				ПродукцияОрганизации.Колонки.Добавить("ТипУпаковки",      Новый ОписаниеТипов("Строка"));
				ПродукцияОрганизации.Колонки.Добавить("КоличествоВложенныхЕдиниц", Новый ОписаниеТипов("Число"));
				
				Для Каждого ЭлементМассива Из ДанныеОбработки.content Цикл
					
					СтрокаТЧ                           = ПродукцияОрганизации.Добавить();
					СтрокаТЧ.GTIN                      = ЭлементМассива.gtin;
					СтрокаТЧ.КоличествоВложенныхЕдиниц = ЭлементМассива.innerUnitCount;
					ЭлементМассива.Свойство("producerInn", СтрокаТЧ.ИННПроизводителя);
					ЭлементМассива.Свойство("packageType", СтрокаТЧ.ТипУпаковки);
					
				КонецЦикла;
				
				ВозвращаемоеЗначение.ПродукцияОрганизации = ПродукцияОрганизации;
				
			КонецЕсли;

		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;

			Возврат ВозвращаемоеЗначение;

		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполнить запрос карточки продукции по идентификатору.
// В результате успешного выполнения запроса в ответе вернется информация о продукте и ее производителе.
// Адрес URL запроса заканчивается идентификатором продукта из реестра продукции.
// 
// Параметры:
//	МассивGTIN  - Массив из Строка  GTIN'ы товаров.
//	
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//	* ТребуетсяОбновлениеКлючаСессии - Булево          - Необходимость обновления ключа сессии.
//	* РезультатОтправкиЗапроса       - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON).
//	* ДанныеПродукции - Структура - Реквизиты продукции:
//		** Идентификатор - Строка - Идентификатор продукции.
//		** Наименование - Строка - Идентификатор продукции.
//		** НаименованиеПолное - Строка - Идентификатор продукции.
//		** GTIN - Строка - Идентификатор продукции.
//		** ТорговаяМарка - Строка - Идентификатор продукции.
//		** ТипУпаковки - Строка - Идентификатор продукции.
//		** КоличествоВложенныхЕдиниц - Строка - Идентификатор продукции.
//		** Производители - Массив Из Структура - Массив производителей:
//			*** Наименование - Строка - Наименование производителя.
//			*** НаименованиеПолное - Строка - Полное наименование организации.
//			*** ИНН - Строка - ИНН.
//			*** КПП - Строка - КПП.
//			*** ФИО - Строка - ФИО.
//			*** Адрес - Строка - Фактический адрес организации.
//		** ВыполненаСинхронизацияGS1 - Булево - Признак выполненной синхронизации с GS1.
//  * ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция ЗапроситьКарточкуПродукции(МассивGTIN) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсМОТПКлиентСервер.ПараметрыЗапросаКлючаСессии());
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ДанныеПродукции",                Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	Если МассивGTIN.Количество() = 1 Тогда
		
		URLЗапроса       = СтрШаблон("v3/products/%1", МассивGTIN[0]);
		РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(
			URLЗапроса,
			КлючСессии,
			ИнтерфейсМОТПКлиентСервер.ПараметрыОтправкиHTTPЗапросов());
		
	Иначе
		
		ДанныеЗапроса = Новый Структура();
		ДанныеЗапроса.Вставить("gtins", МассивGTIN);
		
		URLЗапроса       = "v3/products/list";
		РезультатЗапроса = ИнтеграцияИСМП.ОтправитьДанныеВСервис(
			URLЗапроса,
			ДанныеЗапроса,
			КлючСессии,
			"POST",
			ИнтерфейсМОТПКлиентСервер.ПараметрыОтправкиHTTPЗапросов());
		
	КонецЕсли;

	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеРезультата = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеРезультата = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				Если МассивGTIN.Количество() = 1 Тогда
					ДанныеОбработки = Новый Массив;
					ДанныеОбработки.Добавить(ДанныеРезультата);
				Иначе
					ДанныеОбработки = ДанныеРезультата
				КонецЕсли;
				
				ДанныеПродукции = Новый Соответствие();
				
				Для Каждого СтрокаДанных Из ДанныеОбработки Цикл
					
					СтрокаПродукции = Новый Структура;
					СтрокаПродукции.Вставить("GTIN",             СтрокаДанных.gtin);
					СтрокаПродукции.Вставить("Наименование",     Неопределено);
					СтрокаПродукции.Вставить("ВидПродукции",     Перечисления.ВидыПродукцииИС.Табак);
					СтрокаПродукции.Вставить("ИННПроизводителя", Неопределено);
					СтрокаПродукции.Вставить("ТипУпаковки",      Неопределено);
					СтрокаПродукции.Вставить("ТорговаяМарка",    Неопределено);
					СтрокаПродукции.Вставить("КоличествоВложенныхЕдиниц", СтрокаДанных.innerUnitCount);
					
					СтрокаДанных.Свойство("productName", СтрокаПродукции.Наименование);
					СтрокаДанных.Свойство("brand",       СтрокаПродукции.ТорговаяМарка);
					СтрокаДанных.Свойство("packageType", СтрокаПродукции.ТипУпаковки);
					СтрокаДанных.Свойство("producerInn", СтрокаПродукции.ИННПроизводителя);
					
					ДанныеПродукции.Вставить(СтрокаДанных.gtin, СтрокаПродукции);
					
				КонецЦикла;
				
				ВозвращаемоеЗначение.ДанныеПродукции = ДанныеПродукции;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);

			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;

			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;

	Иначе

		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);

	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область РеестрДокументов

// В результате успешного выполнения запрос в ответе вернется содержание документа.
// В качестве идентификатора следует указывать имя файла документа без расширения
// 
// Параметры:
// 	Идентификатор - Строка - Имя файла документа без расширения.
// Возвращаемое значение:
//	Структура - Описание:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
//	* РезультатОтправкиЗапроса       - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакФайл).
//	* ИмяФайла                       - Строка - Имя временного файла с содержимым документа.
//	* ТекстОшибки                    - Строка - Текст сообщения об ошибке.
Функция ЗапроситьДокументПоИдентификатору(Идентификатор, ИмяВременногоФайла) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсМОТПКлиентСервер.ПараметрыЗапросаКлючаСессии());
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ИмяФайла",                       Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	URLЗапроса = СтрШаблон(
		"v3/documents/%1/body",
		Идентификатор);
	
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, КлючСессии, ИнтерфейсМОТПКлиентСервер.ПараметрыОтправкиHTTPЗапросов());
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакФайл(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ВозвращаемоеЗначение.ИмяФайла = РезультатОтправкиЗапроса.ИмяФайла;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);

			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;

			Возврат ВозвращаемоеЗначение;

		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Устарел. В API версии 3 данный метод не поддерживается.
// Запрос списка кодов происходит в несколько этапов:
// 1. Формирование заказа на список кодов.
// Фильтр по типу документа:
// 	Чек - receipt
// 2. Проверка статуса заказа на формирование списка документов участника.
// 3. Получение результата заказа на формирование списка документов участника.
// 
// После успешного завершения по адресу результата заказа будет доступен
// архив со списком документов, в которых упоминался участник, выполнивший запрос.
// Файл будет доступен для скачивание в течение часа, после чего будет удален.
// 
// Параметры:
// 	Организация - СправочникСсылка.Организации - Организация.
// 	ТипДокумента - ПеречислениеСсылка.ТипыДокументовМОТП - Тип документа МОТП.
// Возвращаемое значение:
//	Структура - Описание:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
//	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON).
//	* ИдентификаторЗапроса - Строка - Идентификатор запроса.
//	* ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция СоздатьЗаказНаФормированиеСпискаДокументовУчастника(Организация, ТипДокумента = Неопределено) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсМОТПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ИдентификаторЗаказа",            Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;

	Если ТипДокумента <> Неопределено Тогда
		ТелоЗапроса = Новый Структура;
		ТелоЗапроса.Вставить("documentType", ТипДокумента);
	КонецЕсли;
	
	URLЗапроса = "private-office-api/api/v2/documents/my";
	РезультатЗапроса = ИнтеграцияИСМП.ОтправитьДанныеВСервис(URLЗапроса, ТелоЗапроса, КлючСессии, "POST", ИнтерфейсМОТПКлиентСервер.ПараметрыОтправкиHTTPЗапросов(""));
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ВозвращаемоеЗначение.ИдентификаторЗаказа = РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);

			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;

			Возврат ВозвращаемоеЗначение;

		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

// Проверка статуса заказа участника.
// 	В процессе выполнения          - IN PROGRESS
// 	Задание выполнено              - SUCCESS
// 	При выполнении возникла ошибка - ERROR
// 	Результат устарел              - RESULT_EXPIRED
// 
// Параметры:
// 	ИдентификаторЗаказа - Строка - Идентификатор заказа.
// Возвращаемое значение:
//	Структура - Описание:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
//	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON).
//	* СтатусЗаказа - Строка - Статус заказа.
//	* ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция ЗапроситьСтатусЗаказа(ИдентификаторЗаказа) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсМОТПКлиентСервер.ПараметрыЗапросаКлючаСессии());
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("СтатусЗаказа",                   Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	URLЗапроса = СтрШаблон(
		"v3/orders/%1/status",
		ИдентификаторЗаказа);
		
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, КлючСессии, ИнтерфейсМОТПКлиентСервер.ПараметрыОтправкиHTTPЗапросов());
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ВозвращаемоеЗначение.СтатусЗаказа = РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);

			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;

			Возврат ВозвращаемоеЗначение;

		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получение результата заказа на формирование списка кодов маркировки участника.
// 
// Параметры:
// 	ИдентификаторЗаказа - Строка - Идентификатор заказа на формирование списка кодов маркировки участника.
// 	ИмяВременногоФайла  - Строка - Имя временного файла
// Возвращаемое значение:
//	Структура - Описание:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
//	* РезультатОтправкиЗапроса       - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакФайл).
//	* РезультатЗаказа - Строка       - Имя файла с результатом заказа.
//	* ТекстОшибки                    - Строка - Текст сообщения об ошибке.
Функция ЗапроситьРезультатЗаказа(ИдентификаторЗаказа, ИмяВременногоФайла) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсМОТПКлиентСервер.ПараметрыЗапросаКлючаСессии());
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатЗаказа",                Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	URLЗапроса = СтрШаблон(
		"v3/orders/%1/result ",
		ИдентификаторЗаказа);
	
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, КлючСессии, ИнтерфейсМОТПКлиентСервер.ПараметрыОтправкиHTTPЗапросов());
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакФайл(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ВозвращаемоеЗначение.РезультатЗаказа = РезультатОтправкиЗапроса.ИмяФайла;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);

			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;

			Возврат ВозвращаемоеЗначение;

		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Запросить цепочки движения кода маркировки.
// В результате успешного выполнения запроса в ответе вернется информация
// о движении кода маркировки. Каждый участник видит производителя продукции,
// своего продавца и текущего владельца. Если данных участника, сформировавшего запрос,
// нет в цепочки движения, то будет виден только производитель и текущий владелец.
// Если код выведен из оборота, то вместо текущего владельца будет соответствующая информация.
// 
// Параметры:
// 	КодМаркировки - Строка - Код маркировки.
// Возвращаемое значение:
//	Структура - Описание:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
//	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON).
//	* ИсторияДвижения - Массив Из Структура - История движения кода маркировки в МОТП:
//		** ДатаОперации                 - Дата - Дата операции
//		** ТипОперации                  - ПеречислениеСсылка.ТипыОперацийДвиженияКодовМаркировкиМОТП - Тип операции движения в МОТП
//		** ГрузоотправительИНН          - Строка - ИНН грузоотправителя
//		** ГрузоотправительНаименование - Строка - Наименование грузоотправителя
//		** ГрузополучательИНН           - Строка  - ИНН грузополучателя
//		** ГрузополучательНаименование  - Строка - Наименование грузополучателя
//		** ИдентификаторДокумента       - Строка - Идентификатор документа
//		** ТипДокумента                 - ПеречислениеСсылка.ТипыДокументовМОТП - Тип документа
//		** СтатусДокумента              - Строка - Статус документа
//	* ДанныеПродукции - Структура - Сведения о продукции:
//		** ИННПроизводителя - Строка - ИНН производителя.
//		** НаименованиеПроизводителя - Строка - Наименование производителя продукции.
//		** ИННВладельца - Строка - ИНН владельца продукции.
//		** НаименованиеВладельца - Строка - Наименование владельца продукции.
//	* ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция ЗапроситьИсториюДвиженияКодаМаркировки(КодМаркировки) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсМОТПКлиентСервер.ПараметрыЗапросаКлючаСессии());
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ДанныеПродукции",                Неопределено);
	ВозвращаемоеЗначение.Вставить("ИсторияДвижения",                Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	URLЗапроса = СтрШаблон(
		"p/v3/cises/%1/history ",
		КодироватьСтроку(КодМаркировки, СпособКодированияСтроки.КодировкаURL));
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, КлючСессии, ИнтерфейсМОТПКлиентСервер.ПараметрыОтправкиHTTPЗапросов());
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ДанныеПродукции = Новый Структура;
				ДанныеПродукции.Вставить("ИННПроизводителя",          ДанныеОбработки.producerInn);
				ДанныеПродукции.Вставить("НаименованиеПроизводителя", ДанныеОбработки.producerName);
				ДанныеПродукции.Вставить("ИННВладельца",              ДанныеОбработки.ownerInn);
				ДанныеПродукции.Вставить("НаименованиеВладельца",     ДанныеОбработки.ownerName);
				
				ВозвращаемоеЗначение.ДанныеПродукции = ДанныеПродукции;
				
				ИсторияДвижения = Новый ТаблицаЗначений();
				ИсторияДвижения.Колонки.Добавить("ДатаОперации",                 Новый ОписаниеТипов("Дата"));
				ИсторияДвижения.Колонки.Добавить("ТипОперации",                  Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОперацийДвиженияКодовМаркировкиМОТП"));
				ИсторияДвижения.Колонки.Добавить("ГрузоотправительИНН",          Новый ОписаниеТипов("Строка"));
				ИсторияДвижения.Колонки.Добавить("ГрузоотправительНаименование", Новый ОписаниеТипов("Строка"));
				ИсторияДвижения.Колонки.Добавить("ГрузополучательИНН",           Новый ОписаниеТипов("Строка"));
				ИсторияДвижения.Колонки.Добавить("ГрузополучательНаименование",  Новый ОписаниеТипов("Строка"));
				ИсторияДвижения.Колонки.Добавить("ИдентификаторДокумента",       Новый ОписаниеТипов("Строка"));
				ИсторияДвижения.Колонки.Добавить("ТипДокумента",                 Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДокументовМОТП"));
				ИсторияДвижения.Колонки.Добавить("СтатусДокумента",              Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыДокументовМОТП"));
				
				ИсторияДвижения.Колонки.Добавить("КодРодительскойУпаковки",      Новый ОписаниеТипов("Строка"));
				ИсторияДвижения.Колонки.Добавить("ТипРодительскойУпаковки",      Новый ОписаниеТипов("Строка"));
				
				Для Каждого ЭлементИстории Из ДанныеОбработки.history Цикл
					
					СтрокаТЧ = ИсторияДвижения.Добавить();
					
					СтрокаТЧ.ДатаОперации = ИнтеграцияИС.ДатаИзСтрокиUNIX(ЭлементИстории.operationDate);
					СтрокаТЧ.ТипОперации  = ИнтерфейсМОТПСлужебный.ТипОперацииДвиженияКодаМаркировки(ЭлементИстории.type);
					
					Если ЭлементИстории.Свойство("participant1Inn") Тогда
						СтрокаТЧ.ГрузоотправительИНН          = Формат(ЭлементИстории.participant1Inn, "ЧГ=0");
						СтрокаТЧ.ГрузоотправительНаименование = ЭлементИстории.participant1Name;
					КонецЕсли;
					
					Если ЭлементИстории.Свойство("participant2Inn") Тогда
						СтрокаТЧ.ГрузополучательИНН           = Формат(ЭлементИстории.participant2Inn, "ЧГ=0");
						СтрокаТЧ.ГрузополучательНаименование  = ЭлементИстории.participant2Name;
					КонецЕсли;
					
					Если ЭлементИстории.Свойство("docId") Тогда
						
						СтрокаТЧ.ИдентификаторДокумента = ЭлементИстории.docId;
						СтрокаТЧ.ТипДокумента           = ИнтерфейсМОТПСлужебный.ТипДокумента(ЭлементИстории.documentType);
						СтрокаТЧ.СтатусДокумента        = ИнтерфейсМОТПСлужебный.СтатусДокумента(ЭлементИстории.documentStatus);
					
					КонецЕсли;
					
					Если ЭлементИстории.Свойство("aggregationCis") Тогда
						
						СтрокаТЧ.ИдентификаторДокумента = ЭлементИстории.aggregationCis;
						СтрокаТЧ.ТипДокумента           = ЭлементИстории.parentCisPackageType;
					
					КонецЕсли;
					
				КонецЦикла;
				
				ВозвращаемоеЗначение.ИсторияДвижения = ИсторияДвижения;
				
			КонецЕсли;

		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);

			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;

			Возврат ВозвращаемоеЗначение;

		КонецЕсли;

	Иначе

		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);

	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Параметры заполнения дерева упаковок.
// Параметры:
// 	ИсходныеПараметры = Структура, Неопределено - Исходные параметры.
// Возвращаемое значение:
// 	Структура - Описание:
// * ВариантПолученияМРЦ    - Строка - Вариант получения МРЦ.
// * Детализация            - ПеречислениеСсылка.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП - Деталиция упаковок.
// * Кеш                    - Структура - 
// * КодыМаркировкиУпаковок - Соответствие -
// * ДанныеВерхнегоУровня   - СтрокаДереваЗначений, Структура - 
// * ДеревоУпаковок         - ДеревоЗначений, СтрокаДереваЗначений - 
Функция ПараметрыЗаполненияДереваУпаковок(ИсходныеПараметры = Неопределено) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ДеревоУпаковок");
	Результат.Вставить("ДанныеВерхнегоУровня");
	Результат.Вставить("КодыМаркировкиУпаковок");
	Результат.Вставить("Кеш");
	Результат.Вставить("Детализация");
	Результат.Вставить("ВариантПолученияМРЦ");
	Результат.Вставить("СоответствиеСтрокДерева");
	
	Если ИсходныеПараметры <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Результат, ИсходныеПараметры);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Запрашивает МРЦ по строкам дерева.
//
// Параметры:
// 	ЗапрашиваемыеСтроки - Массив из СтрокаДереваЗначений - Запрашиваемые данные.
Процедура ЗапросМРЦПоСтрокамДерева(ЗапрашиваемыеСтроки) Экспорт

	Если ЗапрашиваемыеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	РезутатЗапросаСтатусовДляМРЦ = ИнтерфейсМОТП.ЗапроситьМРЦДляКодаМаркировки(ЗапрашиваемыеСтроки);

	Если РезутатЗапросаСтатусовДляМРЦ.ДанныеПродукции <> Неопределено Тогда

		ДанныеПродукции = РезутатЗапросаСтатусовДляМРЦ.ДанныеПродукции;

		Для Каждого СтрокаЗапроса Из ЗапрашиваемыеСтроки Цикл

			ДанныеСтроки = ДанныеПродукции.Получить(СтрокаЗапроса);
			Если ДанныеСтроки <> Неопределено Тогда
				СтрокаЗапроса.МРЦ = ДанныеСтроки.МРЦ;
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// Формирует МРЦ стройкой с лидирующими нулями.
// 
// Параметры:
//  МРЦ   - Число - Максимальная розничная цена.
//  Длина - Число - Минимальная длинна итогового значения.
// Возвращаемое значение:
//  Строка - МРЦ блока.
Функция ЗначениеМРЦСтрокой(МРЦ, Длина = 6) Экспорт
	
	СтрокаМРЦ = Формат(МРЦ * 100, "ЧГ=0;"); // МРЦ в копейках
	Пока СтрДлина(СтрокаМРЦ) < Длина Цикл
		СтрокаМРЦ = "0" + СтрокаМРЦ;
	КонецЦикла;
	
	Возврат СтрокаМРЦ;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПривестиЗначениеМРЦ(СтрокаДанных)
	
	Если ТипЗнч(СтрокаДанных.МРЦ) = Тип("Число") Тогда
		СтрокаДанных.МРЦ = СтрокаДанных.МРЦ / 100;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДеревоУпаковокРекурсивно(ПараметрыЗаполнения)
	
	ДеревоУпаковок         = ПараметрыЗаполнения.ДеревоУпаковок;
	ДанныеВерхнегоУровня   = ПараметрыЗаполнения.ДанныеВерхнегоУровня;
	КодыМаркировкиУпаковок = ПараметрыЗаполнения.КодыМаркировкиУпаковок;
	Кеш                    = ПараметрыЗаполнения.Кеш;
	Детализация            = ПараметрыЗаполнения.Детализация;
	ВариантПолученияМРЦ    = ПараметрыЗаполнения.ВариантПолученияМРЦ;
	
	ДанныеСтроки = Новый Структура;
	ДанныеСтроки.Вставить("GTIN",         NULL);
	ДанныеСтроки.Вставить("ИННВладельца", NULL);
	ДанныеСтроки.Вставить("МРЦ",          NULL);
	
	КоличествоПачек  = 0;
	КоличествоБлоков = 0;
	
	Для Каждого ЗначениеВложенногоКода Из КодыМаркировкиУпаковок Цикл
		
		Если ТипЗнч(ЗначениеВложенногоКода) = Тип("Строка") Тогда // Не имеет вложенных кодов
			КодМаркировки           = ЗначениеВложенногоКода;
			ВложенныеКодыМаркировки = Новый Массив();
		Иначе
			КодМаркировки           = ЗначениеВложенногоКода.Ключ;
			ВложенныеКодыМаркировки = ЗначениеВложенногоКода.Значение;
		КонецЕсли;
		
		СтрокаКодаМаркировки = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода(
			КодМаркировки, Перечисления.ВидыПродукцииИС.Табак);
		
		Если СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
			Или СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда // Логистическая упаковка или блок
			
			GTIN = "";
			МРЦ = 0;
			
			ЭтоКодМаркировкиБлока = (СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая);
			Если ЭтоКодМаркировкиБлока Тогда
				GTIN = СтрокаКодаМаркировки.СоставКодаМаркировки.GTIN;
				МРЦ  = СтрокаКодаМаркировки.СоставКодаМаркировки.МРЦ;
			КонецЕсли;
			
			// Детализация Не Пачки
			Если Детализация = Неопределено
				Или Детализация = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.ПустаяСсылка()
				Или Детализация = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.БлокиСПачками
				Или Детализация = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Коробки
				Или Детализация = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.КоробкиСБлоками
				Или Детализация = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Полная Тогда
				
				ИнтерфейсИСМПСлужебный.ПроверитьИсправитьДублиСтрокДереваУпаковок(КодМаркировки, Кеш.КодыМаркировки);
				
				СтрокаДерева = ДеревоУпаковок.Строки.Добавить();
				СтрокаДерева.Штрихкод = СтрокаКодаМаркировки.Штрихкод;
				
				СтрокаДерева.ТипШтрихкода         = СтрокаКодаМаркировки.ТипШтрихкода;
				СтрокаДерева.ВидУпаковки          = СтрокаКодаМаркировки.ВидУпаковки;
				СтрокаДерева.ВидПродукции         = СтрокаКодаМаркировки.ВидПродукции;
				СтрокаДерева.СоставКодаМаркировки = СтрокаКодаМаркировки.СоставКодаМаркировки;
				
				СтрокаДерева.Статус       = ДанныеВерхнегоУровня.Статус;
				СтрокаДерева.ИННВладельца = ДанныеВерхнегоУровня.ИННВладельца;
				
				Если ЗначениеЗаполнено(GTIN) Тогда
					СтрокаДерева.GTIN = GTIN;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(МРЦ) Тогда
					СтрокаДерева.МРЦ = МРЦ;
				КонецЕсли;
				
				ПараметрыЗаполненияВложенные = ПараметрыЗаполненияДереваУпаковок(ПараметрыЗаполнения);
				ПараметрыЗаполненияВложенные.ДеревоУпаковок         = СтрокаДерева;
				ПараметрыЗаполненияВложенные.ДанныеВерхнегоУровня   = СтрокаДерева;
				ПараметрыЗаполненияВложенные.КодыМаркировкиУпаковок = ВложенныеКодыМаркировки;
				
				Если ЭтоКодМаркировкиБлока Тогда
					Если ЗначениеЗаполнено(СтрокаДерева.МРЦ) Тогда
						ПараметрыЗаполненияВложенные.ВариантПолученияМРЦ = "Вычисление";
					ИначеЕсли ВариантПолученияМРЦ = "ВычислениеИЗапрос" Тогда
						ПараметрыЗаполненияВложенные.ВариантПолученияМРЦ = "ВычислениеОтРодителя";
						Кеш.ЗапросИУстановкаМРЦ.Добавить(СтрокаДерева);
					КонецЕсли;
				КонецЕсли;

				ЗаполнитьДеревоУпаковокРекурсивно(ПараметрыЗаполненияВложенные);
				
				ИнтерфейсИСМПСлужебный.ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, "GTIN");
				ИнтерфейсИСМПСлужебный.ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, "ИННВладельца");
				ИнтерфейсИСМПСлужебный.ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, "МРЦ");
				
				Если ЭтоКодМаркировкиБлока Тогда
					СтрокаДерева.КоличествоБлоков = СтрокаДерева.КоличествоБлоков + 1;
				КонецЕсли;
				
				КоличествоПачек  = КоличествоПачек  + СтрокаДерева.КоличествоПачек;
				КоличествоБлоков = КоличествоБлоков + СтрокаДерева.КоличествоБлоков;
				
				Кеш.КодыМаркировки.Вставить(СтрокаКодаМаркировки.Штрихкод, СтрокаДерева);
				ОбновитьКешGTIN(СтрокаДерева, Кеш.GTIN);
				
			// Если Детализация - пачки
			Иначе
				
				ДанныеСтрокиВместоДанныеВерхнегоУровня = Новый Структура;
				ДанныеСтрокиВместоДанныеВерхнегоУровня.Вставить("GTIN",             ?(ЭтоКодМаркировкиБлока, СтрокаКодаМаркировки.GTIN, ""));
				ДанныеСтрокиВместоДанныеВерхнегоУровня.Вставить("МРЦ",              ?(ЭтоКодМаркировкиБлока, СтрокаКодаМаркировки.МРЦ,  0));
				ДанныеСтрокиВместоДанныеВерхнегоУровня.Вставить("ИННВладельца",     ДанныеВерхнегоУровня.ИННВладельца);
				ДанныеСтрокиВместоДанныеВерхнегоУровня.Вставить("Статус",           ДанныеВерхнегоУровня.Статус);
				ДанныеСтрокиВместоДанныеВерхнегоУровня.Вставить("КоличествоПачек",  0);
				ДанныеСтрокиВместоДанныеВерхнегоУровня.Вставить("КоличествоБлоков", 0);
				
				ПараметрыЗаполненияВложенные = ПараметрыЗаполненияДереваУпаковок(ПараметрыЗаполнения);
				ПараметрыЗаполненияВложенные.ДеревоУпаковок         = ДеревоУпаковок;
				ПараметрыЗаполненияВложенные.ДанныеВерхнегоУровня   = ДанныеСтрокиВместоДанныеВерхнегоУровня;
				ПараметрыЗаполненияВложенные.КодыМаркировкиУпаковок = ВложенныеКодыМаркировки;
				
				ЗаполнитьДеревоУпаковокРекурсивно(ПараметрыЗаполненияВложенные);
				
				КоличествоПачек  = КоличествоПачек  + ДанныеСтрокиВместоДанныеВерхнегоУровня.КоличествоПачек;
				КоличествоБлоков = КоличествоБлоков + ДанныеСтрокиВместоДанныеВерхнегоУровня.КоличествоБлоков + ?(ЭтоКодМаркировкиБлока, 1, 0);
				
				ОбновитьКешGTIN(ДанныеСтрокиВместоДанныеВерхнегоУровня, Кеш.GTIN);
				
			КонецЕсли;
			
		Иначе // Табачная пачка
			
			ИнтерфейсИСМПСлужебный.ПроверитьИсправитьДублиСтрокДереваУпаковок(КодМаркировки, Кеш.КодыМаркировки);
			
			GTIN = "";
			МРЦ  = 0;
			
			ЭтоКодМаркировкиТабачнойПачки = (СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская);
			Если ЭтоКодМаркировкиТабачнойПачки Тогда
				GTIN = СтрокаКодаМаркировки.СоставКодаМаркировки.GTIN;
				МРЦ  = СтрокаКодаМаркировки.СоставКодаМаркировки.МРЦ;
			КонецЕсли;
			
			Если Детализация = Неопределено
				Или Детализация = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Полная
				Или Детализация = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки
				Или Детализация = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.БлокиСПачками Тогда
				
				СтрокаДерева = ДеревоУпаковок.Строки.Добавить();
				СтрокаДерева.Штрихкод = СтрокаКодаМаркировки.Штрихкод;
				
				СтрокаДерева.ТипШтрихкода         = СтрокаКодаМаркировки.ТипШтрихкода;
				СтрокаДерева.ВидУпаковки          = СтрокаКодаМаркировки.ВидУпаковки;
				СтрокаДерева.ВидПродукции         = СтрокаКодаМаркировки.ВидПродукции;
				СтрокаДерева.СоставКодаМаркировки = СтрокаКодаМаркировки.СоставКодаМаркировки;
				
				СтрокаДерева.Статус       = ДанныеВерхнегоУровня.Статус;
				СтрокаДерева.ИННВладельца = ДанныеВерхнегоУровня.ИННВладельца;
				
				СтрокаДерева.GTIN = GTIN;
				СтрокаДерева.МРЦ  = МРЦ;
				
				СтрокаДерева.КоличествоПачек = 1;
				
				ИнтерфейсИСМПСлужебный.ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, "ИННВладельца");
				ИнтерфейсИСМПСлужебный.ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, "GTIN");
				ИнтерфейсИСМПСлужебный.ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, "МРЦ");
				
				Если Не ЗначениеЗаполнено(МРЦ) Тогда
					Если ВариантПолученияМРЦ = "ВычислениеИЗапрос" Тогда
						Кеш.ЗапросИУстановкаМРЦ.Добавить(СтрокаДерева);
					ИначеЕсли ВариантПолученияМРЦ = "ВычислениеОтРодителя" Тогда
						Кеш.ВычислениеМРЦ.Добавить(СтрокаДерева);
					КонецЕсли;
				КонецЕсли;
				
				Кеш.КодыМаркировки.Вставить(КодМаркировки, СтрокаДерева);
				ОбновитьКешGTIN(СтрокаДерева, Кеш.GTIN);
				
			Иначе
				
				СтрокаДереваВременная = Новый Структура;
				СтрокаДереваВременная.Вставить("ИННВладельца", ДанныеВерхнегоУровня.ИННВладельца);
				СтрокаДереваВременная.Вставить("GTIN",         GTIN);
				СтрокаДереваВременная.Вставить("МРЦ",          МРЦ);
				
				ИнтерфейсИСМПСлужебный.ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДереваВременная, "ИННВладельца");
				ИнтерфейсИСМПСлужебный.ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДереваВременная, "GTIN");
				ИнтерфейсИСМПСлужебный.ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДереваВременная, "МРЦ");
				
				ОбновитьКешGTIN(СтрокаДереваВременная, Кеш.GTIN);
				
			КонецЕсли;
			
			КоличествоПачек = КоличествоПачек + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеВерхнегоУровня.ИННВладельца = ДанныеСтроки.ИННВладельца;
	Если ПустаяСтрока(ДанныеВерхнегоУровня.GTIN) И ДанныеСтроки.GTIN <> NULL Тогда
		ДанныеВерхнегоУровня.GTIN = ДанныеСтроки.GTIN;
	КонецЕсли;
	
	Если ДанныеВерхнегоУровня.МРЦ = 0 И ДанныеСтроки.МРЦ <> NULL Тогда
		ДанныеВерхнегоУровня.МРЦ = ДанныеСтроки.МРЦ;
	КонецЕсли;
	
	ДанныеВерхнегоУровня.КоличествоПачек  = ДанныеВерхнегоУровня.КоличествоПачек  + КоличествоПачек;
	ДанныеВерхнегоУровня.КоличествоБлоков = ДанныеВерхнегоУровня.КоличествоБлоков + КоличествоБлоков;
	
КонецПроцедуры

Процедура ОбновитьКешGTIN(СтрокаДерева, КешGTIN)
	
	Если ПустаяСтрока(СтрокаДерева.GTIN) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("GTIN", СтрокаДерева.GTIN);
	ПараметрыОтбора.Вставить("МРЦ",  СтрокаДерева.МРЦ);
	НайденныеСтроки = КешGTIN.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() = 0 Тогда
		НоваяСтрокаКешаGTIN = КешGTIN.Добавить();
		НоваяСтрокаКешаGTIN.GTIN = СтрокаДерева.GTIN;
		НоваяСтрокаКешаGTIN.МРЦ  = СтрокаДерева.МРЦ;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти