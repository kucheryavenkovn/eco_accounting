
// Серия используемых ключей
Функция Серия() Экспорт
	
	Возврат "92D5";
	
КонецФункции

// 
// Подключение компоненты СЛК
//
Процедура ПодключитьКомпоненту() Экспорт
	
	Если НЕ ПодключитьВнешнююКомпоненту("ОбщийМакет.АР_КомпонентаСЛК", "Licence") Тогда
		СисИнфо = Новый СистемнаяИнформация;
		ВызватьИсключение "Ошибка подключения компоненты СЛК " + СисИнфо.ТипПлатформы;
	КонецЕсли;
	
КонецПроцедуры

// Получение менеджера защищенных объектов СЛК
Функция МенеджерОбъектов(Режим = Ложь) Экспорт
	
	// Пытаемся получить сохраненный ранее объект
	//Попытка
	//	МенеджерОбъектов = ПолучитьИзВременногоХранилища(ПараметрыСеанса.АР_МенеджерОбъектов);
	//Исключение
		МенеджерОбъектов = Неопределено;
	//КонецПопытки;
	
	// Если не получили (первое создание или истек период) создаем новый
	Если МенеджерОбъектов = Неопределено Тогда
		ПодключитьКомпоненту();
		
		// Создание объекта компоненты 
		МенеджерЛицензий = Новый("AddIn.Licence.LicenceExtension20");
		
		// В файловом варианте отключает показ окна установки связи
		МенеджерЛицензий.ОкноУстановкиСвязи = Ложь;
		
		// Установка параметров связи с сервером СЛК. 
		Сервер = Константы.АР_СерверСЛК.Получить();
		Порт = Константы.АР_ПортСЛК.Получить();
		Если ЗначениеЗаполнено(Сервер) Тогда
			МенеджерЛицензий.ПараметрыСвязи = "host=" + Сервер + ?(ЗначениеЗаполнено(Порт), ";port=" + Порт, "");			
		КонецЕсли;
		
		// Запуск
		Если НЕ МенеджерЛицензий.Запуск(Серия()) Тогда
			ВызватьИсключение МенеджерЛицензий.ПолучитьОписаниеОшибки();
		КонецЕсли;
		
		Защита = Неопределено;
		// Обход ошибки обычного приложения
		Если ТекущийРежимЗапуска() <> РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение Тогда
			Попытка
				Защита = Новый ("ОписаниеЗащитыОтОпасныхДействий");
				Защита.ПредупреждатьОбОпасныхДействиях = Ложь;
			Исключение
				// Исключение возможно на предыдущих версиях платформы без механизма
				// защиты от опасных действий
			КонецПопытки;
		КонецЕсли;
		
		// Создание менеджера объектов
		Попытка
			Если Защита = Неопределено Тогда
				// Предыдущие версии платформы без механизма защиты
				МенеджерОбъектов = ВнешниеОбработки.Создать(МенеджерЛицензий.МенеджерОбъектов, БезопасныйРежим());
			Иначе
				МенеджерОбъектов = ВнешниеОбработки.Создать(
					ВнешниеОбработки.Подключить(
						ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(МенеджерЛицензий.МенеджерОбъектов)), , БезопасныйРежим(), Защита));
			КонецЕсли;
					
			// Настройка менеджера объектов
			МенеджерОбъектов.УстановитьМенеджерЛицензий(МенеджерЛицензий, Защита);
		Исключение
			ВызватьИсключение "Ошибка создания менеджера объектов СЛК: " + ОписаниеОшибки();
		КонецПопытки;
	
	КонецЕсли; // МенеджерОбъектов = Неопределено
	
	Возврат МенеджерОбъектов;
	
КонецФункции

// Возврат версии компоненты СЛК
Функция Версия() Экспорт
	
	ПодключитьКомпоненту();
	СисИнфо = Новый СистемнаяИнформация;
	МенеджерЛицензий = Новый("AddIn.Licence.LicenceExtension20");
	Возврат МенеджерЛицензий.Версия + " (" + СисИнфо.ТипПлатформы + ")";
	
КонецФункции

// Информация о текущем сеансе работы
Функция ДанныеСеанса() Экспорт
	НомерСеанса = НомерСеансаИнформационнойБазы();
	
	Сеансы = ПолучитьСеансыИнформационнойБазы();
	Для Каждого С Из Сеансы Цикл
		Если С.НомерСеанса = НомерСеанса Тогда
			Сеанс = С;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Строка(Сеанс.НомерСеанса) + "," + Сеанс.ИмяКомпьютера + "," + Сеанс.ИмяПриложения + "," + Сеанс.Пользователь;
КонецФункции

// Запуск СЛК
Процедура Запуск() Экспорт
	
	//МенеджерОбъектов().ПроверитьЛицензиюСеанса();
	Менеджер = АР_ОбщийМодульСЛКПовтИсп.МенеджерОбъектов();
	Менеджер.ПроверитьЛицензиюСеанса();
	
КонецПроцедуры

// Проверка лицензии сеанса
Процедура ПроверитьЛицензию() Экспорт
	
	АР_ОбщийМодульСЛКПовтИсп.МенеджерОбъектов().ПроверитьЛицензиюСеанса();
	
КонецПроцедуры

// Отладочная информация
Функция ПолучитьОтладочнуюСтроку() Экспорт
	
	Возврат АР_ОбщийМодульСЛКПовтИсп.МенеджерОбъектов().ПолучитьОтладочнуюСтроку();
	
КонецФункции

// Создание объекта по его имени в файле данных
Функция СоздатьОбъект(Имя) Экспорт
	
	Если Имя = "ЗаполнениеПолейШаблона" Тогда
		Возврат Обработки.АР_ЗаполнениеПолейШаблона.Создать();
	ИначеЕсли Имя = "ОтобразитьНаПлане" Тогда
		Возврат Обработки.АР_ОтобразитьНаПлане.Создать();
	Иначе	
		Возврат АР_ОбщийМодульСЛКПовтИсп.МенеджерОбъектов().СоздатьОбъект(Имя);
	КонецЕсли;	
	
КонецФункции

Функция СоздатьЗащищеннуюОбработку(Имя) Экспорт
	
	Объект = СоздатьОбъект(Имя);
	Если Объект = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;		
	КонецЕсли;
		
КонецФункции

//  Получение значений лицензионных параметров
Функция ПолучитьЗначениеПараметра(Имя) Экспорт
	
	Попытка
		Возврат АР_ОбщийМодульСЛКПовтИсп.МенеджерОбъектов().ПолучитьЗначениеПараметра(Имя);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

// Чтение памяти ключа защиты
Функция ПрочитатьПамятьКлюча(Пароль) Экспорт
	
	Возврат АР_ОбщийМодульСЛКПовтИсп.МенеджерОбъектов().ПрочитатьПамятьКлюча(Пароль);
	
КонецФункции

// Запись памяти ключа защиты
Процедура ЗаписатьПамятьКлюча(Пароль, Данные) Экспорт
	
	АР_ОбщийМодульСЛКПовтИсп.МенеджерОбъектов().ЗаписатьПамятьКлюча(Пароль, Данные);
	
КонецПроцедуры

// Установка паролей на память ключа
Процедура УстановитьПаролиНаПамятьКлюча(НаЧтениеСтарый, НаЗаписьСтарый, НаЧтениеНовый, НаЗаписьНовый) Экспорт
	
	АР_ОбщийМодульСЛКПовтИсп.МенеджерОбъектов().УстановитьПаролиНаПамятьКлюча(НаЧтениеСтарый, НаЗаписьСтарый, НаЧтениеНовый, НаЗаписьНовый);
	
КонецПроцедуры

// Обнуление памяти ключа защиты и сброс паролей
Процедура ОбнулитьПамятьКлюча() Экспорт
	
	АР_ОбщийМодульСЛКПовтИсп.МенеджерОбъектов().ОбнулитьПамятьКлюча();
	
КонецПроцедуры

// Получение списка ключей на сервере СЛК
Функция ПолучитьСписокКлючей() Экспорт
	
	Возврат АР_ОбщийМодульСЛКПовтИсп.МенеджерОбъектов().ПолучитьСписокКлючей();
	
КонецФункции

// Получение номера ключа, лицензию которого занял сеанс
Функция ПолучитьНомерКлюча() Экспорт
	
	Возврат АР_ОбщийМодульСЛКПовтИсп.МенеджерОбъектов().ПолучитьНомерКлюча();
	
КонецФункции

// Общее количество доступных лицензий
Функция ОбщееКоличествоЛицензий() Экспорт
	
	Возврат АР_ОбщийМодульСЛКПовтИсп.МенеджерОбъектов().ПолучитьОбщееКоличествоЛицензий();
	
КонецФункции

