////////////////////////////////////////////////////////////////////////////////
//
// Серверные процедуры и функции регламентированных отчетов ФСРАР общего назначения 
// с кешируемым результатом на всремя сеанса.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует пустую структуру сведений по обособленному подразделению, 
// состоящей из Наименования, КПП и адресной информации.
//
// Параметры:
// 		Нет.
// Возвращаемое значение:
// 		Структура, со свойствами:
//			
//			* УникальныйНомерФИАС 	- Уникальный идентификатор адреса в системе ФИАС.
//			* ДополнительныеКоды	- пустая структура
//			* КодСтраны
//			* Страна
//			* Индекс
//			* КодРегиона
//			* Регион
//			* Район
//			* Город
//			* НаселенныйПункт
//			* Улица
//			* Дом
//			* Корпус
//			* Литера
//			* Квартира
//
//			* ТипДома
//			* ТипКорпуса
//			* ТипКвартиры
//
//			* ПредставлениеАдреса
//			* АдресXML				- XML представление адреса подсистемы УправлениеКонтактнойИнформацией
//
Функция ПолучитьПустуюСтруктуруАдреса() Экспорт

	СтруктураАдреса = Новый Структура;
	
	ВерсияБСПЧислом = Неопределено;
	ИмяОбщегоМодуляРаботаСАдресами = ПолучитьИмяОбщегоМодуляРаботаСАдресами(ВерсияБСПЧислом);

	Если ИмяОбщегоМодуляРаботаСАдресами = "РаботаСАдресами" Тогда
		
		Попытка
			ОбщийМодульРаботаСАдресамиКлиентСервер = ОбщегоНазначения.ОбщийМодуль("РаботаСАдресамиКлиентСервер");
		Исключение

			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не найден общий модуль "
				+ ИмяОбщегоМодуляРаботаСАдресами + "!'");
			Сообщение.Сообщить();

			Возврат Неопределено;

		КонецПопытки;
		
		СтруктураАдреса = ОбщийМодульРаботаСАдресамиКлиентСервер.ПоляАдреса();
		
	Иначе
		
		СтруктураАдреса = Новый Структура;		
		
		СтруктураАдреса.Вставить("Индекс", "");		
		СтруктураАдреса.Вставить("Регион", "");
		СтруктураАдреса.Вставить("Район", "");
		СтруктураАдреса.Вставить("Город", "");
		СтруктураАдреса.Вставить("НаселенныйПункт", "");
		СтруктураАдреса.Вставить("Улица", "");
			
	КонецЕсли; 
	
	СтруктураАдреса.Вставить("КодСтраны", "643");
	СтруктураАдреса.Вставить("Страна", "РОССИЯ");
	СтруктураАдреса.Вставить("КодРегиона", "");
	СтруктураАдреса.Вставить("Дом", "");
	СтруктураАдреса.Вставить("Корпус", "");
	СтруктураАдреса.Вставить("Литера", "");
	СтруктураАдреса.Вставить("Квартира", "");
	
	СтруктураАдреса.Вставить("ТипДома", "");
	СтруктураАдреса.Вставить("ТипКорпуса", "");
	СтруктураАдреса.Вставить("ТипКвартиры", "");

	СтруктураАдреса.Вставить("ПредставлениеАдреса", "");
	СтруктураАдреса.Вставить("Представление", "");
	
	ПустойАдресXML = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПустойАдресXMLилиJSON("XML");
	
	СтруктураАдреса.Вставить("АдресXML", ПустойАдресXML);
	
	ПустойАдресJSON = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПустойАдресXMLилиJSON("JSON");
	
	СтруктураАдреса.Вставить("АдресJSON", ПустойАдресJSON);
	
	СтруктураАдреса.Вставить("ПроверенАдрес", Ложь);
	СтруктураАдреса.Вставить("ДатаПроверки", 0);
	СтруктураАдреса.Вставить("ЕстьXML", Ложь);
	СтруктураАдреса.Вставить("ЕстьJSON", Ложь);
	
	СтруктураАдреса.Вставить("УникальныйНомерФИАС", "");
	

	Попытка
		ОбщийМодульРаботаСАдресами = ОбщегоНазначения.ОбщийМодуль(ИмяОбщегоМодуляРаботаСАдресами);
	Исключение

		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не найден общий модуль "
			+ ИмяОбщегоМодуляРаботаСАдресами + "!'");
		Сообщение.Сообщить();

		Возврат СтруктураАдреса;

	КонецПопытки;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КодыКЛАДР", Истина);
	ДополнительныеПараметры.Вставить("КодыАдреса", Истина);
	ДополнительныеПараметры.Вставить("ПроверитьАдрес", Ложь);
	ДополнительныеПараметры.Вставить("НаименованиеВключаетСокращение", Истина);
	
	СтруктураАдресаСМассивами = ОбщийМодульРаботаСАдресами.СведенияОбАдресе(ПустойАдресJSON, ДополнительныеПараметры);
	
	РегламентированнаяОтчетностьАЛКОКлиентСервер.ОбъединитьСтруктурыИлиСоответствия(
												СтруктураАдреса, СтруктураАдресаСМассивами);
	
	Возврат СтруктураАдреса;

КонецФункции

// Формирует пустую структуру сведений по обособленному подразделению, 
// состоящей из Наименования, КПП и адресной информации.
//
// Параметры:
// 		Нет.
// Возвращаемое значение:
// 		Структура, со свойствами:
//			* Наименование 			- Наимкенование ОП.
//			* КПП					- КПП ОП.
//
//			Адресные поля
//			* КодСтраны
//			* Страна
//			* Индекс
//			* КодРегиона
//			* Регион
//			* Район
//			* Город
//			* НаселенныйПункт
//			* Улица
//			* Дом
//			* Корпус
//			* Литера
//			* Квартира
//
//			* ТипДома
//			* ТипКорпуса
//			* ТипКвартиры
//
//			* ПредставлениеАдреса
//			* АдресXML				- XML представление адреса подсистемы УправлениеКонтактнойИнформацией
//
Функция ПолучитьПустуюСтруктуруСведенийОбОП() Экспорт

	СтруктураПустогоАдреса = ПолучитьПустуюСтруктуруАдреса();	
	СтруктураСведенияОбОП = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПустогоАдреса);
	
	СтруктураСведенияОбОП.Вставить("Наименование", "");
	СтруктураСведенияОбОП.Вставить("КПП", "");

	Возврат СтруктураСведенияОбОП;

КонецФункции

// Возвращает номер версии подсистемы, встроенной в конфигурацию.
//
// Параметры:
//  ИмяПодсистемы  - Строка - имя подсистемы, определенное в конфигурации.
// Возвращаемое значение:
//  Строка - версия подсистемы, например "1.0.1.1".
//
Функция ВерсияПодсистемыКонфигурации(знач ИмяПодсистемы) Экспорт

	Возврат ОбновлениеИнформационнойБазы.ВерсияИБ(ИмяПодсистемы);

КонецФункции

// Возвращает версию подсистемы в виде числового значения.
//
// Параметры
//  ИмяПодсистемы  - Строка - имя подсистемы, определенное в конфигурации. 
// Возвращаемое значение:
//   Число.
//
Функция ПолучитьВерсиюПодсистемыКонфигурацииЧислом(знач ИмяПодсистемы) Экспорт

	Версия = ВерсияПодсистемыКонфигурации(ИмяПодсистемы);

	Возврат ПолучитьВерсиюЧислом(Версия);

КонецФункции

// Возвращает приведенное к числу значение версии подсистемы.
// Параметры
//	 СтрокаВерсии - Строка. Строка версии вида "0.0.0.0".
// Возвращаемое значение:
//   Число.
//
Функция ПолучитьВерсиюЧислом(знач СтрокаВерсии) Экспорт

	ПервоеЧисло = 0;
	ВтороеЧисло = 0;
	ТретьеЧисло = 0;
	ЧетвертоеЧисло = 0;

	Если ТипЗнч(СтрокаВерсии) = Тип("Строка")
			И ЗначениеЗаполнено(СтрокаВерсии) Тогда

		СтрокаВерсииБезТочек = СтрЗаменить(СтрокаВерсии, ".", "");
		СтрокаВерсииБезТочек = СтрЗаменить(СтрокаВерсииБезТочек, " ", "");

		ПравильнаяСтрокаВерсии = РегламентированнаяОтчетностьАЛКО.ВСтрокеВсеЦифры(СтрокаВерсииБезТочек);

		Если НЕ ПравильнаяСтрокаВерсии Тогда
			Возврат 0;
		КонецЕсли;

		ПозТочка = СтрНайти(СтрокаВерсии, ".");
		Если ПозТочка > 1 Тогда

			ПервоеЧисло = Число(Лев(СтрокаВерсии, ПозТочка - 1));
			Если СтрДлина(СтрокаВерсии) >= ПозТочка + 1 Тогда
				СтрокаВерсии = Сред(СтрокаВерсии, ПозТочка + 1);
			Иначе
				СтрокаВерсии = "";
			КонецЕсли;

		ИначеЕсли ПозТочка = 1 Тогда

			ПервоеЧисло = 0;
			Если СтрДлина(СтрокаВерсии) >= ПозТочка + 1 Тогда
				СтрокаВерсии = Сред(СтрокаВерсии, ПозТочка + 1);
			Иначе
				СтрокаВерсии = "";
			КонецЕсли;

		Иначе

		// Нет точки.
			Если СтрДлина(СтрокаВерсии) > 0 Тогда
				ПервоеЧисло = Число(СтрокаВерсии);
			Иначе
				ПервоеЧисло = 0;
			КонецЕсли;
			СтрокаВерсии = "";

		КонецЕсли;

		ПозТочка = СтрНайти(СтрокаВерсии, ".");
		Если ПозТочка > 1 Тогда

			ВтороеЧисло = Число(Лев(СтрокаВерсии, ПозТочка - 1));
			Если СтрДлина(СтрокаВерсии) >= ПозТочка + 1 Тогда
				СтрокаВерсии = Сред(СтрокаВерсии, ПозТочка + 1);
			Иначе
				СтрокаВерсии = "";
			КонецЕсли;

		ИначеЕсли ПозТочка = 1 Тогда

			ВтороеЧисло = 0;
			Если СтрДлина(СтрокаВерсии) >= ПозТочка + 1 Тогда
				СтрокаВерсии = Сред(СтрокаВерсии, ПозТочка + 1);
			Иначе
				СтрокаВерсии = "";
			КонецЕсли;

		Иначе

		// Нет точки.
			Если СтрДлина(СтрокаВерсии) > 0 Тогда
				ВтороеЧисло = Число(СтрокаВерсии);
			Иначе
				ВтороеЧисло = 0;
			КонецЕсли;
			СтрокаВерсии = "";

		КонецЕсли;

		ПозТочка = СтрНайти(СтрокаВерсии, ".");
		Если ПозТочка > 1 Тогда

			ТретьеЧисло = Число(Лев(СтрокаВерсии, ПозТочка - 1));
			Если СтрДлина(СтрокаВерсии) >= ПозТочка + 1 Тогда
				СтрокаВерсии = Сред(СтрокаВерсии, ПозТочка + 1);
			Иначе
				СтрокаВерсии = "";
			КонецЕсли;

		ИначеЕсли ПозТочка = 1 Тогда

			ТретьеЧисло = 0;
			Если СтрДлина(СтрокаВерсии) >= ПозТочка + 1 Тогда
				СтрокаВерсии = Сред(СтрокаВерсии, ПозТочка + 1);
			Иначе
				СтрокаВерсии = "";
			КонецЕсли;

		Иначе

		// Нет точки.
			Если СтрДлина(СтрокаВерсии) > 0 Тогда
				ТретьеЧисло = Число(СтрокаВерсии);
			Иначе
				ТретьеЧисло = 0;
			КонецЕсли;
			СтрокаВерсии = "";

		КонецЕсли;

		ПозТочка = СтрНайти(СтрокаВерсии, ".");
		Если ПозТочка > 1 Тогда

			ЧетвертоеЧисло = Число(Лев(СтрокаВерсии, ПозТочка - 1));
			Если СтрДлина(СтрокаВерсии) >= ПозТочка + 1 Тогда
				СтрокаВерсии = Сред(СтрокаВерсии, ПозТочка + 1);
			Иначе
				СтрокаВерсии = "";
			КонецЕсли;

		ИначеЕсли ПозТочка = 1 Тогда

			ЧетвертоеЧисло = 0;
			Если СтрДлина(СтрокаВерсии) >= ПозТочка + 1 Тогда
				СтрокаВерсии = Сред(СтрокаВерсии, ПозТочка + 1);
			Иначе
				СтрокаВерсии = "";
			КонецЕсли;

		Иначе

		// Нет точки.
			Если СтрДлина(СтрокаВерсии) > 0 Тогда
				ЧетвертоеЧисло = Число(СтрокаВерсии);
			Иначе
				ЧетвертоеЧисло = 0;
			КонецЕсли;
			СтрокаВерсии = "";

		КонецЕсли;

	КонецЕсли;

	ЧислоСтрокаВерсии = ПервоеЧисло * 1000000000 + ВтороеЧисло * 1000000
		+ ТретьеЧисло * 1000 + ЧетвертоеЧисло;

	Возврат ЧислоСтрокаВерсии;

КонецФункции

// Возвращает версию подсистемы "СтандартныеПодсистемы" в виде числового значения.
//
// Параметры
//	 
// Возвращаемое значение:
//   Число.
//
Функция ПолучитьВерсиюБСПЧислом() Экспорт

	УстановитьПривилегированныйРежим(Истина);

	ВерсияБСП = СтандартныеПодсистемыСервер.ВерсияБиблиотеки();

	УстановитьПривилегированныйРежим(Ложь);

	ВерсияБСПЧислом = ПолучитьВерсиюЧислом(ВерсияБСП);
	
	Версия = РегламентированнаяОтчетностьАЛКОКлиентСервер.СкопироватьЗначение(ВерсияБСПЧислом);

	Возврат Версия;

КонецФункции

Функция ПолучитьИмяОбщегоМодуляРаботаСАдресами(ВерсияБСПЧислом = Неопределено) Экспорт

	Если ВерсияБСПЧислом = Неопределено Тогда
		ВерсияБСПЧислом = ПолучитьВерсиюБСПЧислом();
	КонецЕсли;

	ЧислоВерсияБСП2_4_1 = ПолучитьВерсиюЧислом("2.4.1");

	СтаршеБСП2_4_1 = (ВерсияБСПЧислом >= ЧислоВерсияБСП2_4_1);

	ИмяОбщегоМодуля = ?(СтаршеБСП2_4_1, "РаботаСАдресами", "УправлениеКонтактнойИнформацией");

	Возврат ИмяОбщегоМодуля;

КонецФункции

Функция ВерсияПлатформы() Экспорт

	СистемнаяИнформация 	= Новый СистемнаяИнформация;
	Возврат СистемнаяИнформация.ВерсияПриложения;

КонецФункции

Функция РежимСовместимости() Экспорт

	Возврат Метаданные.РежимСовместимости;

КонецФункции
 
#КонецОбласти