#Область ПрограммныйИнтерфейс

// Для задания обработчиков параметров сеанса следует использовать шаблон:
// Обработчики.Вставить("<ИмяПараметраСеанса>|<НачалоИмениПараметраСеанса*>", "Обработчик");
//
// Примечание. Символ '*'используется в конце имени параметра сеанса и обозначает,
//             что один обработчик будет вызван для инициализации всех параметров сеанса
//             с именем, начинающимся на слово НачалоИмениПараметраСеанса
//
Процедура ОбработчикиИнициализацииПараметровСеанса(Обработчики) Экспорт
	
	Обработчики.Вставить("АР_ПравилаДобавленияЭлементовФорм", "АР_ОбщиеПроцедуры.УстановитьПараметрСеансаПравилаДобавленияЭлементовФорм");
	
КонецПроцедуры

Процедура УстановитьПараметрСеансаПравилаДобавленияЭлементовФорм(ИмяПараметра = Неопределено, УстановленныеПараметры = Неопределено) Экспорт
	
	ПравилаДобавленияЭлементовФорм = АР_МодификацияКонфигурации.ПолучитьПравилаДобавленияЭлементовФорм();
	ПараметрыСеанса.АР_ПравилаДобавленияЭлементовФорм = Новый ФиксированноеСоответствие(ПравилаДобавленияЭлементовФорм);
	Если УстановленныеПараметры <> Неопределено Тогда 
		УстановленныеПараметры.Добавить("АР_ПравилаДобавленияЭлементовФорм");
	КонецЕсли;
	
КонецПроцедуры

// Определяет объекты, в которых есть процедура ДобавитьКомандыПечати().
// Подробнее см. УправлениеПечатьюПереопределяемый.
//
// Параметры:
//  СписокОбъектов - Массив - список менеджеров объектов.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.АР_АктПриемаВозвратаАрендуемогоПомещения);
	СписокОбъектов.Добавить(Документы.АР_АктПриемаПередачиПомещенияВАренду);
	СписокОбъектов.Добавить(Документы.АР_АктСнятияПоказанийСчетчика);
	СписокОбъектов.Добавить(Документы.АР_ВводПараметровЭксплуатацииОбъектов);
	СписокОбъектов.Добавить(Документы.АР_ВыполнениеРаботПоОбслуживанию);
	СписокОбъектов.Добавить(Документы.АР_ДополнительноеСоглашение);
	СписокОбъектов.Добавить(Документы.АР_ЗаключениеДоговораАренды);
	СписокОбъектов.Добавить(Документы.АР_ЗакрытиеЗаявкиНаОбслуживание);
	СписокОбъектов.Добавить(Документы.АР_ЗаявкаНаОбслуживание);
	СписокОбъектов.Добавить(Документы.АР_ИзменениеСтатусовОбъектов);
	СписокОбъектов.Добавить(Документы.АР_НачислениеАренднойПлаты);
	СписокОбъектов.Добавить(Документы.АР_НачислениеПени);
	СписокОбъектов.Добавить(Документы.АР_ПланированиеЗатратНаЭксплуатацию);
	СписокОбъектов.Добавить(Документы.АР_ПланируемыеПоступленияДенежныхСредств);
	СписокОбъектов.Добавить(Документы.АР_РасторжениеДоговораАренды);
	СписокОбъектов.Добавить(Документы.АР_СчетНаАренду);
	СписокОбъектов.Добавить(Документы.АР_УстановкаЦенНаАренду);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПодписокНаСобытие

Процедура ДоговорКонтрагентаПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ДоговорыКонтрагентов") Тогда
		
		Если НЕ Источник.ЭтоГруппа И НЕ Источник.АР_АрендныйДоговор Тогда
			Источник.АР_Субаренда = Ложь;
			Источник.АР_ВестиВзаиморасчетыПоПериодам = Ложь;
			Источник.АР_ВестиВзаиморасчетыПоОбъектам = Ложь;
			Источник.АР_ВестиВзаиморасчетыПоСчетамПерем = Ложь;
			Источник.АР_ВестиВзаиморасчетыПоСчетамПост = Ложь;
			Источник.АР_Периодичность = Перечисления.Периодичность.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументыПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = Источник.Метаданные();
	
	ЭтоПлатежныйДокумент = ТипЗнч(Источник) = Тип("ДокументОбъект.ПоступлениеНаРасчетныйСчет")
						ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.СписаниеСРасчетногоСчета")
						ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер")
						ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.РасходныйКассовыйОрдер");
	
	ДоступнаОплатаАренды = ЭтоПлатежныйДокумент И (Источник.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя")
					ИЛИ Источник.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю")
					ИЛИ Источник.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаПокупателя")
					ИЛИ Источник.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратПокупателю"));
					
	Если ЭтоПлатежныйДокумент И НЕ ДоступнаОплатаАренды 
		И НЕ МетаданныеДокумента.Реквизиты.Найти("АР_ОплатаАренды") = Неопределено Тогда
		Источник.АР_ОплатаАренды = Ложь;
	КонецЕсли;
					
	Если НЕ МетаданныеДокумента.Реквизиты.Найти("АР_ОплатаАренды") = Неопределено
		И НЕ МетаданныеДокумента.ТабличныеЧасти.Найти("РасшифровкаПлатежа") = Неопределено
		И НЕ Источник.АР_ОплатаАренды Тогда
		
		Для Каждого СтрокаПлатежа Из Источник.РасшифровкаПлатежа Цикл
			СтрокаПлатежа.АР_ОбъектАренды = Справочники.АР_ОбъектыАренды.ПустаяСсылка();
			СтрокаПлатежа.АР_Депозит = Ложь;
			СтрокаПлатежа.АР_Пени = Ложь;
			СтрокаПлатежа.АР_ПериодАренды = '00010101';
			СтрокаПлатежа.АР_СчетНаАренду = Документы.АР_СчетНаАренду.ПустаяСсылка();
			СтрокаПлатежа.АР_УслугаАренды = Справочники.Номенклатура.ПустаяСсылка();
		КонецЦикла;
		
	ИначеЕсли МетаданныеДокумента.Имя = "ВводНачальныхОстатков" Тогда
		
		Если Источник.АР_ВводОстатковВзаиморасчетовПоАренде И НЕ (Источник.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками
			ИЛИ Источник.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами) Тогда
			Источник.АР_ВводОстатковВзаиморасчетовПоАренде = Ложь;
		КонецЕсли;

		Если Не Источник.АР_ВводОстатковВзаиморасчетовПоАренде И Источник.АР_ДополнительнаяАналитикаВзаиморасчетовПоАренде.Количество() > 0 Тогда
			Источник.АР_ДополнительнаяАналитикаВзаиморасчетовПоАренде.Очистить();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура АналитикаАрендыОбработкаПроверкиЗаполнения(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;	
	
	ЭтоПлатежныйДокумент = ТипЗнч(Источник) = Тип("ДокументОбъект.ПоступлениеНаРасчетныйСчет")
						ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.СписаниеСРасчетногоСчета")
						ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер")
						ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.РасходныйКассовыйОрдер");
	
	ЭтоОплата = ТипЗнч(Источник) = Тип("ДокументОбъект.ПоступлениеНаРасчетныйСчет")
						ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер");
						
	ДоступнаОплатаАренды = ЭтоПлатежныйДокумент И (Источник.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя")
					ИЛИ Источник.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю")
					ИЛИ Источник.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаПокупателя")
					ИЛИ Источник.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратПокупателю"));
					
	ЭтоПлатежныйДокумент = ЛОЖЬ; //СВД
					
	Если ЭтоПлатежныйДокумент И НЕ Источник.АР_ОплатаАренды Тогда
		
		Если НЕ ДоступнаОплатаАренды Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого СтрокаПлатежа Из Источник.РасшифровкаПлатежа Цикл
			
			Префикс = "РасшифровкаПлатежа[" + Формат(СтрокаПлатежа.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
			ИмяСписка = "Расшифровка платежа";
		
			Если НЕ ТипЗнч(СтрокаПлатежа.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаПлатежа.ДоговорКонтрагента) Тогда
				Продолжить;
			КонецЕсли;
			
			//Если СтрокаПлатежа.ДоговорКонтрагента.АР_АрендныйДоговор Тогда
			//	ТекстСообщения = НСтр("ru = 'Договор """ + Строка(СтрокаПлатежа.ДоговорКонтрагента) + """ является договором аренды. Для отражения платежа во взаиморасчетах по аренде требуется установить признак ""Оплата аренды""'");
			//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			//	Продолжить;
			//КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ЭтоПлатежныйДокумент И Источник.АР_ОплатаАренды Тогда
		
		Если НЕ ДоступнаОплатаАренды Тогда
			Возврат;
		КонецЕсли;
		
		ЕстьАрендныйДоговор = Ложь;
		
		Для Каждого СтрокаПлатежа Из Источник.РасшифровкаПлатежа Цикл
			
			Префикс = "РасшифровкаПлатежа[" + Формат(СтрокаПлатежа.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
			ИмяСписка = "Расшифровка платежа";
		
			Если ПроверяемыеРеквизиты.Найти("РасшифровкаПлатежа.ДоговорКонтрагента") = Неопределено Тогда
				ПроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа.ДоговорКонтрагента");
			КонецЕсли;
			
			Если НЕ ТипЗнч(СтрокаПлатежа.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаПлатежа.ДоговорКонтрагента) Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ СтрокаПлатежа.ДоговорКонтрагента.АР_АрендныйДоговор Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭтоОплата И ЗначениеЗаполнено(СтрокаПлатежа.АР_СчетНаАренду) И ЗначениеЗаполнено(СтрокаПлатежа.СчетНаОплату) Тогда
				Если Источник.РасшифровкаПлатежа.Количество() = 1 И НЕ Константы.ИспользоватьТабличныеФормыБанковскихДокументов.Получить() Тогда
					ТекстСообщения = НСтр("ru = 'В документе указаны одновременно счет на аренду и типовой счет на оплату. Информация об оплате будет зафиксирована только для счета на аренду.'");
				Иначе
					ТекстСообщения = НСтр("ru = 'В строке №" + СтрокаПлатежа.НомерСтроки + " указаны одновременно счет на аренду и типовой счет на оплату. Информация об оплате будет зафиксирована только для счета на аренду.'");
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Источник, , "Объект",);
			КонецЕсли;
			
			ЕстьАрендныйДоговор = Истина;
			
			Если СтрокаПлатежа.АР_Депозит Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаПлатежа.АР_СчетНаАренду) И ЗначениеЗаполнено(СтрокаПлатежа.АР_УслугаАренды)
				И ((СтрокаПлатежа.ДоговорКонтрагента.АР_ВестиВзаиморасчетыПоСчетамПост И СтрокаПлатежа.АР_УслугаАренды.АР_ПостояннаяЧастьОплаты)
				ИЛИ (СтрокаПлатежа.ДоговорКонтрагента.АР_ВестиВзаиморасчетыПоСчетамПерем И НЕ СтрокаПлатежа.АР_УслугаАренды.АР_ПостояннаяЧастьОплаты)) Тогда
				ТекстСообщения = НСтр("ru = 'Для договора """ + Строка(СтрокаПлатежа.ДоговорКонтрагента) + """ и услуги """ + Строка(СтрокаПлатежа.АР_УслугаАренды) + """ необходимо указать счет на аренду, по которому ведутся взаиморасчеты'");
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(,, НСтр("ru = 'Счет на аренду'"),
				СтрокаПлатежа.НомерСтроки, ИмяСписка, ТекстСообщения);
				Поле = Префикс + "АР_СчетНаАренду";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Источник, Поле, "Объект", Отказ);
			КонецЕсли;
				
			Если НЕ ЗначениеЗаполнено(СтрокаПлатежа.АР_ПериодАренды) И СтрокаПлатежа.ДоговорКонтрагента.АР_ВестиВзаиморасчетыПоПериодам Тогда
				ТекстСообщения = НСтр("ru = 'Для договора """ + Строка(СтрокаПлатежа.ДоговорКонтрагента) + """ необходимо указать период оплаты'");
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(,, НСтр("ru = 'Период оплаты'"),
				СтрокаПлатежа.НомерСтроки, ИмяСписка, ТекстСообщения);
				Поле = Префикс + "АР_ПериодАренды";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Источник, Поле, "Объект", Отказ);
			КонецЕсли;
			
			ПараметрыНачисленияПени = АР_ПроцедурыНачисления.ПолучитьПараметрыНачисленияПени(СтрокаПлатежа.ДоговорКонтрагента, Источник.Дата);
			ОбособленныйУчетПени = ?(ПараметрыНачисленияПени = Неопределено, Ложь, ПараметрыНачисленияПени.СпособПогашенияПени = Перечисления.АР_СпособыПогашенияПени.ВестиОбособленныйУчетПени);
			Если НЕ ОбособленныйУчетПени И СтрокаПлатежа.АР_Пени Тогда
				ТекстСообщения = НСтр("ru = 'Для договора """ + Строка(СтрокаПлатежа.ДоговорКонтрагента) + """ не ведется обособленный учет пени. Признак пени не должен быть установлен'");
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", НСтр("ru = 'Пени'"),
				СтрокаПлатежа.НомерСтроки, ИмяСписка, ТекстСообщения);
				Поле = Префикс + "АР_Пени";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Источник, Поле, "Объект", Отказ);
			КонецЕсли;
			Если ЭтоОплата Тогда
				Если ОбособленныйУчетПени И ЗначениеЗаполнено(СтрокаПлатежа.АР_СчетПеней) Тогда
					ТекстСообщения = НСтр("ru = 'В строке " + СтрокаПлатежа.НомерСтроки + " по договору """ + Строка(СтрокаПлатежа.ДоговорКонтрагента) + """ ведется обособленный учет пени, отдельное указание счета расчетов по пеням не требуется'");
					Поле = Префикс + "АР_СчетПеней";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Источник, Поле, "Объект", Отказ);
			    КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ЕстьАрендныйДоговор Тогда
			ТекстСообщения = "В документе не указано ни одного договора аренды. Признак Оплата аренды необходимо снять";
			Поле = "АР_ОплатаАренды";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Источник, Поле, "Объект", Отказ);	
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ВводНачальныхОстатков") Тогда	
		
		Если Источник.АР_ВводОстатковВзаиморасчетовПоАренде Тогда
			ВводНачальныхОстатковПроверитьСоответствиеСуммДополнительнойАналитики(Источник, Отказ);
			ВводНачальныхОстатковПроверитьЧтоНетЛишнейАналитики(Источник, Отказ);
		КонецЕсли; 
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПроверитьДоступКДокументамПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если РольДоступна("ПолныеПрава") Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоПлатежныйДокумент = ТипЗнч(Источник) = Тип("ДокументОбъект.ПоступлениеНаРасчетныйСчет")
		ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.СписаниеСРасчетногоСчета")
		ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер")
		ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.РасходныйКассовыйОрдер");
		
	Если ЭтоПлатежныйДокумент И Источник.АР_ОплатаАренды И НЕ РольДоступна("АР_ДобавлениеИзменениеДанныхБухгалтерииАренды") Тогда
		Отказ = Истина;
	КонецЕсли;		
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьЗначениеКонстанты(ИмяКонстанты) Экспорт
	
	Возврат Константы[ИмяКонстанты].Получить();
	
КонецФункции

Процедура ВводНачальныхОстатковПроверитьСоответствиеСуммДополнительнойАналитики(Источник, Отказ)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РасчетыСКонтрагентами", Источник.РасчетыСКонтрагентами.Выгрузить());
	Запрос.УстановитьПараметр("ДополнительнаяАналитика", Источник.АР_ДополнительнаяАналитикаВзаиморасчетовПоАренде.Выгрузить());
	
	Для каждого СтрокаТЧ Из Источник.АР_ДополнительнаяАналитикаВзаиморасчетовПоАренде Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Сумма) И Не ЗначениеЗаполнено(СтрокаТЧ.СуммаКт) Тогда
			Префикс = "АР_ДополнительнаяАналитикаВзаиморасчетовПоАренде[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
			ТекстСообщения = НСтр("ru = 'Одновременно не заполнены значения колонок ""Остаток по дебету"" и ""Остаток по кредиту""'");
			Поле = Префикс + "Сумма";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Источник, Поле, "Объект", Отказ);
		КонецЕсли;
	КонецЦикла;

	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Запрос.Текст =	
	"ВЫБРАТЬ
	|	РасчетыСКонтрагентами.НомерСтроки,
	|	РасчетыСКонтрагентами.АР_Ключ,
	|	РасчетыСКонтрагентами.Сумма,
	|	РасчетыСКонтрагентами.СуммаКт
	|ПОМЕСТИТЬ ВТРасчетыСКонтрагентами
	|ИЗ
	|	&РасчетыСКонтрагентами КАК РасчетыСКонтрагентами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительнаяАналитика.Ключ,
	|	ДополнительнаяАналитика.Сумма,
	|	ДополнительнаяАналитика.СуммаКт
	|ПОМЕСТИТЬ ВТДополнительнаяАналитика
	|ИЗ
	|	&ДополнительнаяАналитика КАК ДополнительнаяАналитика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСКонтрагентами.НомерСтроки,
	|	МАКСИМУМ(РасчетыСКонтрагентами.Сумма) - МАКСИМУМ(РасчетыСКонтрагентами.СуммаКт) КАК Сумма,
	|	СУММА(ДополнительнаяАналитика.Сумма) - СУММА(ДополнительнаяАналитика.СуммаКт) КАК СуммаДопАналитика
	|ИЗ
	|	ВТРасчетыСКонтрагентами КАК РасчетыСКонтрагентами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДополнительнаяАналитика КАК ДополнительнаяАналитика
	|		ПО РасчетыСКонтрагентами.АР_Ключ = ДополнительнаяАналитика.Ключ
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСКонтрагентами.НомерСтроки";
	Выборка = Запрос.Выполнить().Выбрать();
	ИмяСписка = "Расчеты с контрагентами";
	Пока Выборка.Следующий() Цикл
		Если НЕ (Выборка.Сумма = Выборка.СуммаДопАналитика) Тогда
			Префикс = "РасчетыСКонтрагентами[" + Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
			Если Выборка.Сумма > 0 Тогда
				Реквизит = "Сумма";
				ПредставлениеРеквизита = НСтр("ru = 'Остаток по дебету'");
			Иначе
				Реквизит = "СуммаКт";
				ПредставлениеРеквизита = НСтр("ru = 'Остаток по кредиту'");
			КонецЕсли;
			ТекстСообщения = НСтр("ru = 'Сумма по дополнительной аналитике не соответствует сумме в основной таблице'");
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", ПредставлениеРеквизита,
			Выборка.НомерСтроки, ИмяСписка, ТекстСообщения);
			Поле = Префикс + Реквизит;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Источник, Поле, "Объект", Отказ);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ВводНачальныхОстатковПроверитьЧтоНетЛишнейАналитики(Источник, Отказ)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РасчетыСКонтрагентами", Источник.РасчетыСКонтрагентами.Выгрузить());
	Запрос.УстановитьПараметр("ДополнительнаяАналитика", Источник.АР_ДополнительнаяАналитикаВзаиморасчетовПоАренде.Выгрузить());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетыСКонтрагентами.НомерСтроки,
	|	РасчетыСКонтрагентами.Аванс,
	|	РасчетыСКонтрагентами.АР_Ключ,
	|	РасчетыСКонтрагентами.ДоговорКонтрагента
	|ПОМЕСТИТЬ ВТРасчетыСКонтрагентами
	|ИЗ
	|	&РасчетыСКонтрагентами КАК РасчетыСКонтрагентами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительнаяАналитика.НомерСтроки,
	|	ДополнительнаяАналитика.Ключ,
	|	ДополнительнаяАналитика.Депозит,
	|	ДополнительнаяАналитика.УслугаАренды,
	|	ДополнительнаяАналитика.ОбъектАренды,
	|	ДополнительнаяАналитика.СчетНаАренду,
	|	ДополнительнаяАналитика.ПериодАренды
	|ПОМЕСТИТЬ ВТДополнительнаяАналитика
	|ИЗ
	|	&ДополнительнаяАналитика КАК ДополнительнаяАналитика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСКонтрагентами.Аванс,
	|	РасчетыСКонтрагентами.ДоговорКонтрагента,
	|	РасчетыСКонтрагентами.ДоговорКонтрагента.АР_АрендныйДоговор КАК АрендныйДоговор,
	|	РасчетыСКонтрагентами.ДоговорКонтрагента.АР_ВестиВзаиморасчетыПоПериодам КАК ВестиВзаиморасчетыПоПериодам,
	|	РасчетыСКонтрагентами.ДоговорКонтрагента.АР_ВестиВзаиморасчетыПоОбъектам КАК ВестиВзаиморасчетыПоОбъектам,
	|	РасчетыСКонтрагентами.ДоговорКонтрагента.АР_ВестиВзаиморасчетыПоСчетамПост КАК ВестиВзаиморасчетыПоСчетамПост,
	|	РасчетыСКонтрагентами.ДоговорКонтрагента.АР_ВестиВзаиморасчетыПоСчетамПерем КАК ВестиВзаиморасчетыПоСчетамПерем,
	|	РасчетыСКонтрагентами.ДоговорКонтрагента.АР_ВестиВзаиморасчетыПоУслугам КАК ВестиВзаиморасчетыПоУслугам,
	|	ДополнительнаяАналитика.НомерСтроки КАК НомерСтрокиДопАналитики,
	|	ДополнительнаяАналитика.Депозит,
	|	ДополнительнаяАналитика.УслугаАренды,
	|	ДополнительнаяАналитика.ОбъектАренды,
	|	ДополнительнаяАналитика.СчетНаАренду,
	|	ДополнительнаяАналитика.ПериодАренды,
	|	РасчетыСКонтрагентами.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТРасчетыСКонтрагентами КАК РасчетыСКонтрагентами
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДополнительнаяАналитика КАК ДополнительнаяАналитика
	|		ПО РасчетыСКонтрагентами.АР_Ключ = ДополнительнаяАналитика.Ключ
	|ИТОГИ ПО
	|	НомерСтроки";
	ВыборкаНомерСтроки = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ИмяСписка = "Расчеты с контрагентами";
	Шаблон = НСтр("ru = 'Некорректно заполнены данные по строке %1 списка ""%2"".
				|
				|%3'");
	Пока ВыборкаНомерСтроки.Следующий() Цикл
		
		Префикс = "РасчетыСКонтрагентами[" + Формат(ВыборкаНомерСтроки.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		Поле = Префикс + "ДоговорКонтрагента";
		
		ЕстьУслуги = Ложь;
		ЕстьОбъектыАренды = Ложь;
		ЕстьПериод = Ложь;
		ЕстьСчет = Ложь;
		НетУслуги = Ложь;
		НетОбъектыАренды = Ложь;
		НетПериод = Ложь;
		НетСчет = Ложь;
		Выборка = ВыборкаНомерСтроки.Выбрать();
		ДоговорКонтрагента = Неопределено;
		Пока Выборка.Следующий() Цикл
			ДоговорКонтрагента = Выборка.ДоговорКонтрагента;
			НетСтрокДопАналитики = НЕ ЗначениеЗаполнено(Выборка.НомерСтрокиДопАналитики);
			Если НЕ Выборка.ВестиВзаиморасчетыПоПериодам И ЗначениеЗаполнено(Выборка.ПериодАренды) Тогда
				ЕстьПериод = Истина;
			ИначеЕсли Выборка.ВестиВзаиморасчетыПоПериодам И НЕ ЗначениеЗаполнено(Выборка.ПериодАренды) И НЕ Выборка.Депозит Тогда
				НетПериод = НЕ Выборка.Аванс;
			КонецЕсли;
			Если НЕ Выборка.ВестиВзаиморасчетыПоОбъектам И ЗначениеЗаполнено(Выборка.ОбъектАренды) Тогда
				ЕстьОбъектыАренды = Истина;
			ИначеЕсли Выборка.ВестиВзаиморасчетыПоОбъектам И НЕ ЗначениеЗаполнено(Выборка.ОбъектАренды) И НЕ Выборка.Депозит Тогда
				НетОбъектыАренды = НЕ Выборка.Аванс;
			КонецЕсли;
			Если НЕ Выборка.ВестиВзаиморасчетыПоУслугам И ЗначениеЗаполнено(Выборка.УслугаАренды) Тогда
				ЕстьУслуги = Истина;
			ИначеЕсли Выборка.ВестиВзаиморасчетыПоУслугам И НЕ ЗначениеЗаполнено(Выборка.УслугаАренды) И НЕ Выборка.Депозит Тогда
				НетУслуги = НЕ Выборка.Аванс;
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.УслугаАренды) Тогда
				Если Выборка.УслугаАренды.АР_ПостояннаяЧастьОплаты И НЕ Выборка.ВестиВзаиморасчетыПоСчетамПост И ЗначениеЗаполнено(Выборка.СчетНаАренду) Тогда
					ЕстьСчет = Истина;
				ИначеЕсли НЕ Выборка.УслугаАренды.АР_ПостояннаяЧастьОплаты И НЕ Выборка.ВестиВзаиморасчетыПоСчетамПерем И ЗначениеЗаполнено(Выборка.СчетНаАренду) Тогда
					ЕстьСчет = Истина;
				ИначеЕсли (НЕ Выборка.ВестиВзаиморасчетыПоСчетамПерем И НЕ Выборка.ВестиВзаиморасчетыПоСчетамПост) И ЗначениеЗаполнено(Выборка.СчетНаАренду) Тогда
					ЕстьСчет = Истина;
				КонецЕсли;
			ИначеЕсли (Выборка.ВестиВзаиморасчетыПоСчетамПост ИЛИ Выборка.ВестиВзаиморасчетыПоСчетамПерем) И НЕ ЗначениеЗаполнено(Выборка.СчетНаАренду) Тогда
				НетСчет = Истина;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьУслуги Тогда
			ТекстСообщения = НСтр("ru = 'В подчиненной таблице ""Дополнительная аналитика"" есть строки с заполненной услугой, хотя взаиморасчеты по услугам не ведутся'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ВыборкаНомерСтроки.НомерСтроки, ИмяСписка, ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Источник, Поле, "Объект", Отказ);
		ИначеЕсли НетУслуги Тогда	
			Если НетСтрокДопАналитики Тогда
				ТекстСообщения = НСтр("ru = 'По договору """ + ДоговорКонтрагента +  """ ведутся взаиморасчеты по услугам. Следует заполнить табличную часть ""Дополнительная аналитика"". Услуга обязательна к заполнению'");
			Иначе
				ТекстСообщения = НСтр("ru = 'В подчиненной таблице ""Дополнительная аналитика"" есть строки с незаполненной услугой, хотя взаиморасчеты по услугам ведутся'");
			КонецЕсли;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ВыборкаНомерСтроки.НомерСтроки, ИмяСписка, ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Источник, Поле, "Объект", Отказ);
		КонецЕсли;
		Если ЕстьОбъектыАренды Тогда
			ТекстСообщения = НСтр("ru = 'В подчиненной таблице ""Дополнительная аналитика"" есть строки с заполненными объектами аренды, хотя взаиморасчеты по объектам аренды не ведутся'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ВыборкаНомерСтроки.НомерСтроки, ИмяСписка, ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Источник, Поле, "Объект", Отказ);
		ИначеЕсли НетОбъектыАренды Тогда
			Если НетСтрокДопАналитики Тогда
				ТекстСообщения = НСтр("ru = 'По договору """ + ДоговорКонтрагента +  """ ведутся взаиморасчеты по объектам аренды. Следует заполнить табличную часть ""Дополнительная аналитика"". Объект аренды обязателен к заполнению'");
			Иначе
				ТекстСообщения = НСтр("ru = 'В подчиненной таблице ""Дополнительная аналитика"" есть строки с незаполненными объектами аренды, хотя взаиморасчеты по объектам аренды ведутся'");
			КонецЕсли;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ВыборкаНомерСтроки.НомерСтроки, ИмяСписка, ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Источник, Поле, "Объект", Отказ);
		КонецЕсли;
		Если ЕстьПериод Тогда
			ТекстСообщения = НСтр("ru = 'В подчиненной таблице ""Дополнительная аналитика"" есть строки с заполненным периодом оплаты, хотя взаиморасчеты по периодам не ведутся'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ВыборкаНомерСтроки.НомерСтроки, ИмяСписка, ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Источник, Поле, "Объект", Отказ);
		ИначеЕсли НетПериод Тогда
			Если НетСтрокДопАналитики Тогда
				ТекстСообщения = НСтр("ru = 'По договору """ + ДоговорКонтрагента +  """ ведутся взаиморасчеты по периодам. Следует заполнить табличную часть ""Дополнительная аналитика"". Период оплаты обязателен к заполнению'");
			Иначе
				ТекстСообщения = НСтр("ru = 'В подчиненной таблице ""Дополнительная аналитика"" есть строки с незаполненным периодом оплаты, хотя взаиморасчеты по периодам ведутся'");
			КонецЕсли;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ВыборкаНомерСтроки.НомерСтроки, ИмяСписка, ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Источник, Поле, "Объект", Отказ);
		КонецЕсли;
		Если ЕстьСчет Тогда
			ТекстСообщения = НСтр("ru = 'В подчиненной таблице ""Дополнительная аналитика"" есть строки с заполненным счетом, хотя взаиморасчеты по счетам не ведутся'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ВыборкаНомерСтроки.НомерСтроки, ИмяСписка, ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Источник, Поле, "Объект", Отказ);
		ИначеЕсли НетСчет Тогда
			Если НетСтрокДопАналитики Тогда
				ТекстСообщения = НСтр("ru = 'По договору """ + ДоговорКонтрагента +  """ ведутся взаиморасчеты по счетам. Следует заполнить табличную часть ""Дополнительная аналитика"". Счет на аренду обязателен к заполнению'");
			Иначе
				ТекстСообщения = НСтр("ru = 'В подчиненной таблице ""Дополнительная аналитика"" есть строки с незаполненным счетом, хотя взаиморасчеты по счетам ведутся'");
			КонецЕсли;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ВыборкаНомерСтроки.НомерСтроки, ИмяСписка, ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Источник, Поле, "Объект", Отказ);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Процедура конвертирует поле Ключ (берется из УдалитьКлюч) в табличных частях
// - Расчеты с контрагентами
// Остальные случаи (когда ключ берется из другой табличной части) реализуются
// процедурой ВыполнитьКонвертациюНоменклатурыПриПереходеС2БП, которая запускается раньше
//
Процедура ВводНачальныхОстатковВыполнитьКонвертациюКлючейСвязиРасчетовСКонтрагентамиПриПереходеС2БП(ДокументОбъект) Экспорт
	
	Для Каждого ТекущаяСтрока Из ДокументОбъект.РасчетыСКонтрагентами Цикл
		Если ПустаяСтрока(ТекущаяСтрока.АР_Ключ) И (ТекущаяСтрока.УдалитьАР_Ключ <> 0) Тогда
			НовыйУИН = Новый УникальныйИдентификатор;
			ТекущаяСтрока.АР_Ключ = НовыйУИН;
			МассивПодчиненныхСтрок = ДокументОбъект.АР_ДополнительнаяАналитикаВзаиморасчетовПоАренде.НайтиСтроки(Новый Структура("УдалитьКлюч", ТекущаяСтрока.УдалитьАР_Ключ));
			Для Каждого ТекущаяПодчиненнаяСтрока Из МассивПодчиненныхСтрок Цикл
				ТекущаяПодчиненнаяСтрока.Ключ = НовыйУИН;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьВерсиюАренды(Версия) Экспорт
	
	НоваяВерсия = Версия;
	Ном = Найти(НоваяВерсия, "/");
	Если Ном > 0 Тогда
		НоваяВерсия = Сред(НоваяВерсия, Ном + 1);
	КонецЕсли;
	Возврат НоваяВерсия;
	
КонецФункции 

Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции 

Функция ЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты) Экспорт
	
	Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда
		Если ПустаяСтрока(Реквизиты) Тогда
			Возврат Новый Структура;
		КонецЕсли;
		Реквизиты = СтрРазделить(Реквизиты, ",", Ложь);
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура;
	Если ТипЗнч(Реквизиты) = Тип("Структура") Или ТипЗнч(Реквизиты) = Тип("ФиксированнаяСтруктура") Тогда
		СтруктураРеквизитов = Реквизиты;
	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Массив") Или ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда
		Для Каждого Реквизит Из Реквизиты Цикл
			СтруктураРеквизитов.Вставить(СтрЗаменить(Реквизит, ".", ""), Реквизит);
		КонецЦикла;
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неверный тип второго параметра Реквизиты: %1'"), Строка(ТипЗнч(Реквизиты)));
	КонецЕсли;
	
	ТекстПолей = "";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Ключ));
		
		Псевдоним = СокрЛП(КлючИЗначение.Ключ);
		
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
		|	" + ИмяПоля + " КАК " + Псевдоним;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|" + ТекстПолей + "
	|ИЗ
	|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
	|ГДЕ
	|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСтавкуНДСНоменклатуры(Номенклатура, Период = '00010101') Экспорт
	
	Если Период = '00010101' Тогда
		ТекПериод = ТекущаяДатаСеанса();
	Иначе
		ТекПериод = Период;
	КонецЕсли;
	
	Возврат Перечисления.СтавкиНДС.СтавкаНДС(Номенклатура.ВидСтавкиНДС, ТекПериод);
	
КонецФункции

Функция ЭтоАрендныйДокумент(Документ) Экспорт
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") И Документ.АР_ОплатаАренды Тогда
		Возврат Истина;
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") И Документ.АР_ОплатаАренды Тогда
		Возврат Истина;
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") И Документ.АР_ОплатаАренды Тогда
		Возврат Истина;
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") И Документ.АР_ОплатаАренды Тогда
		Возврат Истина;
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.АР_НачислениеАренднойПлаты") Тогда
		Возврат Истина;
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.АР_НачислениеПени") Тогда
		Возврат Истина;
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаРеализации") И 
		(ТипЗнч(Документ.ДокументРеализации) = Тип("ДокументСсылка.АР_НачислениеАренднойПлаты") ИЛИ ТипЗнч(Документ.ДокументРеализации) = Тип("ДокументСсылка.АР_НачислениеПени")) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////////////
// Печать шаблонов Word

Процедура ЗаполнитьКолонтитул(НомерСекции, НомерКолонтитула, WD, WordDoc, СсылкаНаОбъект, ИспользоватьМенеджерЛицензий)
	
	ЧислоПолей = WordDoc.Sections(НомерСекции).Headers(НомерКолонтитула).Range.Fields.Count;
	Для Инд = 1 По ЧислоПолей Цикл
		Ном = ЧислоПолей - Инд + 1;
		Если Ном > ЧислоПолей Тогда 
			Продолжить 
		КонецЕсли;
		WordDoc.Sections(НомерСекции).Headers(НомерКолонтитула).Range.Fields(Ном).Select(); 
		ИмяРеквизита = WD.Selection.Text;
		Если ПустаяСтрока(ИмяРеквизита) Тогда
			WD.ActiveWindow.View.ShowFieldCodes = -1;
			WD.Selection.Delete();
			WD.ActiveWindow.View.ShowFieldCodes = 0;
			Продолжить;
		КонецЕсли;                                  
		Значение = ПолучитьЗначениеРеквизитаДляWord(СсылкаНаОбъект, ИмяРеквизита, ИспользоватьМенеджерЛицензий);
		Если Значение <> Неопределено Тогда
			Wd.ActiveWindow.View.ShowFieldCodes = -1;
			Wd.Selection.Text = Строка(Значение);
			Wd.ActiveWindow.View.ShowFieldCodes = 0;
		КонецЕсли;
	КонецЦикла;

	ЧислоПолей = WordDoc.Sections(НомерСекции).Footers(НомерКолонтитула).Range.Fields.Count;
	Для Инд = 1 По ЧислоПолей Цикл
		Ном = ЧислоПолей - Инд + 1;
		Если Ном > ЧислоПолей Тогда 
			Продолжить 
		КонецЕсли;
		WordDoc.Sections(НомерСекции).Footers(НомерКолонтитула).Range.Fields(Ном).Select(); 
		ИмяРеквизита = WD.Selection.Text;
		Если ПустаяСтрока(ИмяРеквизита) Тогда
			WD.ActiveWindow.View.ShowFieldCodes = -1;
			WD.Selection.Delete();
			WD.ActiveWindow.View.ShowFieldCodes = 0;
			Продолжить;
		КонецЕсли;                                  
		Значение = ПолучитьЗначениеРеквизитаДляWord(СсылкаНаОбъект, ИмяРеквизита, ИспользоватьМенеджерЛицензий);
		Если Значение <> Неопределено Тогда
			Wd.ActiveWindow.View.ShowFieldCodes = -1;
			Wd.Selection.Text = Строка(Значение);
			Wd.ActiveWindow.View.ShowFieldCodes = 0;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Функция заполняет и открывает вородовский шаблон по переданному документу
Функция ПечатьШаблонаВорд(ДанныеКоманды, СсылкаНаОбъект, мИспользоватьМенеджерЛицензий, УникальныйИдентификатор = Неопределено) Экспорт
	
	Шаблон = АР_ОбщиеПроцедуры.ПолучитьШаблон(ДанныеКоманды.Код);
	
	Если Не ЗначениеЗаполнено(Шаблон) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПолноеИмяФайла = АР_ОбщиеПроцедурыКлиентСервер.ПечатьШаблонаВорд(Шаблон, СсылкаНаОбъект, мИспользоватьМенеджерЛицензий);
	
	Файл = Новый Файл(ПолноеИмяФайла);
	Если Файл.Существует() Тогда
		ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
		
		УИД = ?(УникальныйИдентификатор = Неопределено, Новый УникальныйИдентификатор, УникальныйИдентификатор);
		СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УИД);
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("СсылкаНаДвоичныеДанныеФайла", СсылкаНаДвоичныеДанныеФайла);
		СтруктураДанных.Вставить("ИмяФайла", Файл.Имя);
		СтруктураДанных.Вставить("Шаблон", Шаблон);
		
		Возврат СтруктураДанных;
	Иначе 
		Возврат Неопределено;		
	КонецЕсли;
	
КонецФункции	

// Процедура сохраняет значение реквизита Хранилище (двоичные данные) на диск.
// При необходимости открывает файл с использованием ассоциированного с ним приложения.
//
// Параметры:
//  ИмяВнешнегоФайла - путь, имя файла дле сохранения на диске
//  Запустить - булево, признак запускать ассоциированное с файлом приложение.
//
Функция СохранитьФайл(Шаблон, ПолноеИмяФайла) Экспорт
	
	ИмяФайла = Шаблон.ИмяФайла;
	Расширение = Прав(ИмяФайла, 4);
	Если Лев(Расширение, 1) = "." Тогда
		Расширение = Прав(ИмяФайла, 3);
	КонецЕсли;
	
	Если ВРег(Расширение) <> "DOC" И  ВРег(Расширение) <> "DOCX" Тогда // Файл не является word-овским
		Сообщить("Файл шаблона не является файлом Word", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
		
	ДвоичныеДанные = Шаблон.Хранилище.Получить();
	ПолноеИмяФайла = ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанные.Записать(ПолноеИмяФайла);
	
	Возврат Истина;
		
КонецФункции // СохранитьЗапуститьФайл()

// Функция возвращает ссылку на шаблон документа по коду
Функция ПолучитьШаблон(Код) Экспорт
	
	Возврат Справочники.АР_ШаблоныДокументов.НайтиПоКоду(Код);
	
КонецФункции

// Функция помещает данные шаблона во временное хранилище
// и возвращает ссылку на временное хранилище
Функция ПолучитьДанныеФайла(Шаблон) Экспорт
	
	ДвоичныеДанные = Шаблон.Хранилище.Получить();
	СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("СсылкаНаДвоичныеДанныеФайла", СсылкаНаДвоичныеДанныеФайла);
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция ПолучитьДанныеФайлаШаблона(ПолноеИмяФайла) Экспорт
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
	СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("СсылкаНаДвоичныеДанныеФайла", СсылкаНаДвоичныеДанныеФайла);
	
	Возврат СтруктураДанных;
	
КонецФункции

// Функция возвращает количество табличных частей объекта
Функция ПолучитьКоличествоТЧ(СсылкаНаОбъект) Экспорт
	
	Возврат СсылкаНаОбъект.Метаданные().ТабличныеЧасти.Количество();
	
КонецФункции

// Функция проверяет, содержит ли данный объект табличную часть
// с указанным именем
Функция ОбъектСодержитТЧ(Ссылка, ИмяРеквизита, СтруктураТабЧасти) Экспорт
	
	ПозицияТочки = Найти(ИмяРеквизита, ".");
	Если ПозицияТочки > 0 Тогда
		ИмяТЧ = Лев(ИмяРеквизита, ПозицияТочки - 1);
		Если ИмяТЧ = "ПостояннаяЧасть" ИЛИ ИмяТЧ = "ПеременнаяЧасть" Тогда
			ИмяТЧ = ИмяТЧ + "АренднойПлаты";
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Если Ссылка.Метаданные().ТабличныеЧасти.Найти(ИмяТЧ) <> Неопределено Тогда
		СтруктураТабЧасти.Ссылка = Ссылка;
		СтруктураТабЧасти.ИмяТабЧасти = ИмяТЧ;
		СтруктураТабЧасти.ИмяРеквизита = Сред(ИмяРеквизита, ПозицияТочки + 1);
		Возврат Истина;
	ИначеЕсли Ссылка.Метаданные().Реквизиты.Найти(ИмяТЧ) <> Неопределено Тогда
		Возврат ОбъектСодержитТЧ(Ссылка[ИмяТЧ], Сред(ИмяРеквизита, ПозицияТочки + 1), СтруктураТабЧасти);
	Иначе
	    Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Функция получает значение реквизита объекта
Функция ПолучитьЗначениеРеквизитаДляWord(Источник, Реквизит, ИспользоватьМенеджерЛицензий = Ложь, ДатаСреза = '00010101') Экспорт
	
	Если ИспользоватьМенеджерЛицензий Тогда
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Источник));
		Если ДатаСреза = '00010101' И ОбъектМетаданных <> Неопределено И Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда // Это документ
			ДатаСреза = Источник.Дата;
		КонецЕсли;
		ЗначениеРеквизита = ПолучитьЗначениеРеквизита(Источник, Реквизит,, ДатаСреза);
		Возврат ЗначениеРеквизита;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
		
КонецФункции

// Функция получает значение реквизита строки табличной части
Функция ПолучитьЗначениеРеквизитаТЧДляWord(Источник, ИмяТЧ, НомерСтроки, Реквизит, ИспользоватьМенеджерЛицензий = Ложь) Экспорт
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Источник));
	Если ОбъектМетаданных <> Неопределено И Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда // Это документ
		ДатаСреза = Источник.Дата;
	Иначе
		ДатаСреза = '00010101';
	КонецЕсли;
	СтрокаТЧ = Источник[ИмяТЧ][НомерСтроки - 1];
	Возврат  ПолучитьЗначениеРеквизита(СтрокаТЧ, Реквизит,, ДатаСреза, Новый Структура("Объект", Источник));
	
КонецФункции

// Функция возвращает количество строк в табличной части
Функция ПолучитьКоличествоСтрокТЧ(Ссылка, ИмяТЧ) Экспорт
	
	Возврат Ссылка[ИмяТЧ].Количество();
	
КонецФункции

// Функция получает значение дополнительного свойства
// или представление контактной информации
Функция ПолучитьЗначениеСвойства(Объект, НаименованиеСвойства) Экспорт
	
	ЕстьМетаданные = Истина;
	Попытка
		ИмяОбъекта = Объект.Метаданные().Имя;
	Исключение
		ЕстьМетаданные = Ложь;
	КонецПопытки;
	
	Если НЕ ЕстьМетаданные Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЕстьКонтактнаяИнформация = (Объект.Метаданные().ТабличныеЧасти.Найти("КонтактнаяИнформация") <> Неопределено);
	ЕстьДополнительныеРеквизиты = (Объект.Метаданные().ТабличныеЧасти.Найти("ДополнительныеРеквизиты") <> Неопределено);
	ИмяОбъекта = Объект.Метаданные().Имя;
	ЭтоДокумент = Метаданные.Документы.Содержит(Объект.Метаданные());
	ЭтоСправочник = Метаданные.Справочники.Содержит(Объект.Метаданные());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Наименование", НаименованиеСвойства);
	Запрос.Текст =
	"ВЫБРАТЬ
	| &Наименование КАК Свойство,
	| ДополнительныеСведения.Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	| ДополнительныеСведения.Объект = &Объект
	| И (ДополнительныеСведения.Свойство.Наименование = &Наименование
	| ИЛИ ДополнительныеСведения.Свойство.Заголовок = &Наименование)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	| ДополнительныеСведения.Свойство.Представление КАК Свойство,
	| ДополнительныеСведения.Значение
	|ИЗ
	| РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	| ДополнительныеСведения.Объект = &Объект
	| И ДополнительныеСведения.Свойство.Наименование <> &Наименование
	| И ДополнительныеСведения.Свойство.Заголовок <> &Наименование
	|
	|
	|" + ?(ЕстьКонтактнаяИнформация, "ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	| &Наименование КАК Свойство,
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(1000))
	|ИЗ
	|	" + ?(ЭтоДокумент, "Документ", "Справочник") + "." + ИмяОбъекта + ".КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Ссылка = &Объект
	|	И КонтактнаяИнформация.Вид.Наименование = &Наименование
	|", "") + ?(ЕстьДополнительныеРеквизиты, "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	| &Наименование КАК Свойство,
	| ДополнительныеРеквизиты.Значение
	|ИЗ
	| " + ?(ЭтоДокумент, "Документ", "Справочник") + "." + ИмяОбъекта + ".ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|ГДЕ
	| (ДополнительныеРеквизиты.Свойство.Наименование = &Наименование
	| ИЛИ ДополнительныеРеквизиты.Свойство.Заголовок = &Наименование)
	| И ДополнительныеРеквизиты.Ссылка = &Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	| ДополнительныеРеквизиты.Свойство.Представление КАК Свойство,
	| ДополнительныеРеквизиты.Значение
	|ИЗ
	| " + ?(ЭтоДокумент, "Документ", "Справочник") + "." + ИмяОбъекта + ".ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|ГДЕ
	| ДополнительныеРеквизиты.Свойство.Наименование <> &Наименование
	| И ДополнительныеРеквизиты.Свойство.Заголовок <> &Наименование
	| И ДополнительныеРеквизиты.Ссылка = &Объект", "");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Свойство = НаименованиеСвойства Тогда
			Возврат Выборка.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Наименование КАК Свойство,
	|	НаборыДополнительныхРеквизитовИСведений.ТипЗначения КАК ТипЗначения
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК НаборыДополнительныхРеквизитовИСведений
	|ГДЕ
	|	(НаборыДополнительныхРеквизитовИСведений.Наименование = &Наименование
	|			ИЛИ НаборыДополнительныхРеквизитовИСведений.Заголовок = &Наименование)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НаборыДополнительныхРеквизитовИСведений.Представление КАК Свойство,
	|	НаборыДополнительныхРеквизитовИСведений.ТипЗначения
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК НаборыДополнительныхРеквизитовИСведений
	|ГДЕ
	|	НаборыДополнительныхРеквизитовИСведений.Наименование <> &Наименование
	|		И НаборыДополнительныхРеквизитовИСведений.Заголовок <> &Наименование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Наименование КАК Свойство,
	|	ВидыКонтактнойИнформации.Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Наименование = &Наименование";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Свойство = НаименованиеСвойства Тогда
			Возврат "";
		КонецЕсли;
	КонецЦикла;
		
	Возврат Неопределено;
	
КонецФункции

// Функция возвращает значение реквизита объекта
Функция ПолучитьЗначениеРеквизита(Объект, ИмяРеквизита, СоответствиеСвойств = Неопределено, ДатаСреза = '00010101', ДополнительныеДанные = Неопределено) Экспорт
	
	Если ТипЗнч(Объект) = Тип("Строка") Тогда
		Возврат Объект;
	ИначеЕсли Не ЗначениеЗаполнено(Объект) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ДополнительныеДанные = Неопределено Тогда
		ДополнительныеДанные = Новый Структура("Объект", Объект);
	КонецЕсли;
	
	Ном1 = Найти(ИмяРеквизита, "[");
	Если СоответствиеСвойств = Неопределено И Ном1 > 0 Тогда
		СоответствиеСвойств = Новый Соответствие;
		ИмяРеквизитаВременное = ИмяРеквизита;
		ИмяРеквизита = "";
		Сч = 0;
		Пока Ном1 > 0 Цикл
			Сч = Сч + 1;
			Наименование = "";
			
			НашлиКонецСвойства = Ложь;
			ВремСтрока = Сред(ИмяРеквизитаВременное, Ном1 + 1);
			Ном2 = Найти(ВремСтрока, "]");
			Пока Ном2 > 0 Цикл
				Если Ном2 = СтрДлина(ВремСтрока) ИЛИ Не Сред(ВремСтрока, Ном2 + 1, 1) = "]" Тогда
					Наименование = Наименование + Лев(ВремСтрока, Ном2 - 1);
					ВремСтрока = Сред(ВремСтрока, Ном2 + 1);
					НашлиКонецСвойства = Истина;
					Прервать;
				Иначе
					Наименование = Наименование + Лев(ВремСтрока, Ном2 - 1) + "]";
					ВремСтрока = Сред(ВремСтрока, Ном2 + 2);
				КонецЕсли;
				Ном2 = Найти(ВремСтрока, "]");
			КонецЦикла;
			Если Не НашлиКонецСвойства Тогда // неверный формат
				Возврат Неопределено;			
			КонецЕсли;
			СоответствиеСвойств.Вставить("Свойство" + Сч, Наименование);
			ИмяРеквизитаВременное = Лев(ИмяРеквизитаВременное, Ном1) + "Свойство" + Сч + "]" + Прав(ИмяРеквизитаВременное, СтрДлина(ВремСтрока));
			Ном = Найти(ИмяРеквизитаВременное, "]");
			ИмяРеквизита = ИмяРеквизита + Лев(ИмяРеквизитаВременное, Ном);
			ИмяРеквизитаВременное = Сред(ИмяРеквизитаВременное, Ном + 1);
			Ном1 = Найти(ИмяРеквизитаВременное, "[");
		КонецЦикла;	
		ИмяРеквизита = ИмяРеквизита + ИмяРеквизитаВременное;
	КонецЕсли;
	
	ПозицияТочки = Найти(ИмяРеквизита, ".");
	ЕстьФорматнаяСтрока = Прав(ИмяРеквизита, 1) = ")";
	Если ЕстьФорматнаяСтрока Тогда
		ИмяРеквизитаКопия = ИмяРеквизита;
		Пока Найти(ИмяРеквизитаКопия,"(") > 0 Цикл
			ПозицияСкобки = Найти(ИмяРеквизитаКопия,"(");
			Если ПозицияСкобки > ПозицияТочки И ПозицияТочки > 0 Тогда // оставляем форм. строку "на потом"
				ПозицияСкобки = 0;
				ЕстьФорматнаяСтрока = Ложь;
				Прервать;
			КонецЕсли;
			ИмяРеквизитаКопия = Сред(ИмяРеквизитаКопия, ПозицияСкобки + 1);
		КонецЦикла;
		Если ЕстьФорматнаяСтрока И ПозицияСкобки < ПозицияТочки Тогда
			ПозицияТочки = 0;
		КонецЕсли;
	Иначе
		ПозицияСкобки = 0;
	КонецЕсли;
	Если ПозицияСкобки > 0 тогда
		ФорматнаяСтрока = Сред(ИмяРеквизита, ПозицияСкобки + 1, СтрДлина(ИмяРеквизита) - ПозицияСкобки - 1);
		ИмяРеквизита = Лев(ИмяРеквизита, ПозицияСкобки - 1);
	КонецЕСли;
	
	Если ПозицияТочки > 0 Тогда
		ИмяСубРеквизита = Сред(ИмяРеквизита, ПозицияТочки + 1);
		ИмяРеквизита = Лев(ИмяРеквизита, ПозицияТочки - 1);
	КонецЕсли;
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Объект));
	Если ОбъектМетаданных <> Неопределено И Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда // Это документ
		ЭтоДокумент = Истина;
		ИмяТЧ = ИмяРеквизита;
		Если ИмяТЧ = "ПостояннаяЧасть" ИЛИ ИмяТЧ = "ПеременнаяЧасть" Тогда
			ИмяТЧ = ИмяТЧ + "АренднойПлаты";
		КонецЕсли;
		Если ОбъектМетаданных.ТабличныеЧасти.Найти(ИмяТЧ) <> Неопределено Тогда // Это табличная часть
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		ЭтоДокумент = Ложь;
	КонецЕсли;
	
	СписокРеквизитов = Новый СписокЗначений;
	Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
		СписокРеквизитов.Добавить(Реквизит.Имя);
	КонецЦикла;
	Для Каждого Реквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
		СписокРеквизитов.Добавить(Реквизит.Имя);
	КонецЦикла;
	
	ПозицияКвадратнойСкобки = Найти(ИмяРеквизита, "[");
	Если ПозицияКвадратнойСкобки > 1 Тогда // Это строка табличной части
		НомерСтрокиСвойство = Сред(ИмяРеквизита, ПозицияКвадратнойСкобки + 1, СтрДлина(ИмяРеквизита) - ПозицияКвадратнойСкобки - 1);
		НомерСтрокиСтрока = СоответствиеСвойств.Получить(НомерСтрокиСвойство);
		НомерСтроки = Число(НомерСтрокиСтрока);
		ИмяТЧ = Лев(ИмяРеквизита, ПозицияКвадратнойСкобки - 1);
		Если ИмяТЧ = "ПостояннаяЧасть" ИЛИ ИмяТЧ = "ПеременнаяЧасть" Тогда
			ИмяТЧ = ИмяТЧ + "АренднойПлаты";
		КонецЕсли;
		Если Не ЭтоДокумент Тогда
			Возврат Неопределено;
		ИначеЕсли ОбъектМетаданных.ТабличныеЧасти.Найти(ИмяТЧ) = Неопределено Тогда // Нет такой табличной части
			Возврат Неопределено;
		ИначеЕсли Объект[ИмяТЧ].Количество() < НомерСтроки Тогда // В таблице меньшее количество строк, чем указанная
			Возврат Неопределено;
		КонецЕсли;
		СтрокаТЧ = Объект[ИмяТЧ][НомерСтроки - 1];
		ЗначениеРеквизита = СтрокаТЧ;			
	ИначеЕсли ПозицияКвадратнойСкобки = 1 Тогда // это дополнительное свойство
		НаименованиеДопСведения = СоответствиеСвойств.Получить(Сред(ИмяРеквизита, 2, СтрДлина(ИмяРеквизита) - 2));
		ЗначениеРеквизита = ПолучитьЗначениеСвойства(Объект, НаименованиеДопСведения);
	ИначеЕсли СписокРеквизитов.НайтиПоЗначению(ИмяРеквизита) <> Неопределено Тогда // Это реквизит
		Если ИмяРеквизита = "Ставка" Тогда
			ЗначениеРеквизита = ПолучитьСтавкуПрописью(Объект.Ставка);
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.АР_ОбъектыАренды")
			И (ИмяРеквизита = "ВидПрава" ИЛИ ИмяРеквизита = "ДатаВыдачиСвидетельстваОПраве" 
			ИЛИ ИмяРеквизита = "СерияСвидетельстваОПраве" ИЛИ ИмяРеквизита = "НомерСвидетельстваОПраве"
			ИЛИ ИмяРеквизита = "ДатаЗаписиВЕГРП" ИЛИ ИмяРеквизита = "НомерЗаписиВЕГРП") Тогда
			Если Не ЗначениеЗаполнено(Объект["ВидПрава"]) И ЗначениеЗаполнено(Объект["Родитель"]) Тогда
				ЗначениеРеквизита = ПолучитьЗначениеРеквизита(Объект["Родитель"], ИмяРеквизита,, ДатаСреза);
			Иначе
				ЗначениеРеквизита = Объект[ИмяРеквизита];
			КонецЕсли;
		Иначе
			ЗначениеРеквизита = Объект[ИмяРеквизита];
		КонецЕсли;
	ИначеЕсли ЭтоДокумент И ИмяРеквизита = "ЮридическийАдресОрганизации" Тогда
		ЗначениеРеквизита = СокрЛП(БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Объект.Организация, ТекущаяДата()).ЮридическийАдрес);
	ИначеЕсли ЭтоДокумент И ИмяРеквизита = "ФактическийАдресОрганизации" Тогда
		ЗначениеРеквизита = СокрЛП(БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Объект.Организация, ТекущаяДата()).ФактическийАдрес);
	ИначеЕсли ЭтоДокумент И ИмяРеквизита = "ТелефоныОрганизации" Тогда
		ЗначениеРеквизита = СокрЛП(БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Объект.Организация, ТекущаяДата()).Телефоны);
	ИначеЕсли ЭтоДокумент И ИмяРеквизита = "РуководительОрганизации" Тогда
		Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Объект.Организация, ТекущаяДата(),);
		ЗначениеРеквизита = СокрЛП(Руководители.Руководитель);
	ИначеЕсли ЭтоДокумент И ИмяРеквизита = "ЮридическийАдресКонтрагента" Тогда
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ЗначениеРеквизита = СокрЛП(БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Объект.Контрагент, ТекущаяДата()).ЮридическийАдрес);
		Иначе
			ЗначениеРеквизита = "";
		КонецЕсли;
	ИначеЕсли ЭтоДокумент И ИмяРеквизита = "ФактическийАдресКонтрагента" Тогда
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ЗначениеРеквизита = СокрЛП(БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Объект.Контрагент, ТекущаяДата()).ФактическийАдрес);
		Иначе
			ЗначениеРеквизита = "";
		КонецЕсли;
	ИначеЕсли ЭтоДокумент И ИмяРеквизита = "ТелефоныКонтрагента" Тогда
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ЗначениеРеквизита = СокрЛП(БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Объект.Контрагент, ТекущаяДата()).Телефоны);
		Иначе
			ЗначениеРеквизита = "";
		КонецЕсли;
	ИначеЕсли ЭтоДокумент И ИмяРеквизита = "ОбщаяПлощадь" Тогда
		Если ТипЗнч(Объект) = Тип("ДокументСсылка.АР_ЗаключениеДоговораАренды") 
			ИЛИ ТипЗнч(Объект) = Тип("ДокументСсылка.АР_ДополнительноеСоглашение") Тогда 
			ЗначениеРеквизита = Объект.ПостояннаяЧастьАренднойПлаты.Итог("Количество");
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.АР_АктСнятияПоказанийСчетчика") Тогда
			ЗначениеРеквизита = Объект.Показания.Итог("Площадь");
		ИначеЕсли ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ДоговорКонтрагента", ОбъектМетаданных)
			И ОбщегоНазначенияБП.ЕстьТабЧастьДокумента("Состав", ОбъектМетаданных)
			И ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("ОбъектАренды", ОбъектМетаданных, "Состав") Тогда
			ЗначениеРеквизита = ПолучитьОбщуюПлощадьПоДоговору(Объект, ОбъектМетаданных);
		Иначе 
			ЗначениеРеквизита = 0;	
		КонецЕсли;
	ИначеЕсли ЭтоДокумент И ИмяРеквизита = "ОбщаяСуммаПостояннойЧастиБезНДС" 
		И Не ОбъектМетаданных.ТабличныеЧасти.Найти("ПостояннаяЧастьАренднойПлаты") = Неопределено Тогда
		ИтогоСумма = 0;
		Для Каждого СтрокаТЧ Из Объект.ПостояннаяЧастьАренднойПлаты Цикл
			Сумма = Окр(ПолучитьСтавку(СтрокаТЧ.Ставка) * 
				?(СтрокаТЧ.СпособНачисления.ВариантРасчета = Перечисления.АР_ВариантыРасчета.ПоСтавкеЗаОбъектВЦелом, 1, СтрокаТЧ.Количество), 2);
			СтавкаНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС);	
			СуммаНДС = Окр(Сумма / (100 + ?(Объект.СуммаВключаетНДС, СтавкаНДС, 0)) * СтавкаНДС, 2);
			ИтогоСумма = ИтогоСумма + Сумма - ?(Объект.СуммаВключаетНДС, СуммаНДС, 0);
		КонецЦикла;
		ЗначениеРеквизита = ИтогоСумма;
	ИначеЕсли ЭтоДокумент И ИмяРеквизита = "ОбщаяСуммаПостояннойЧастиСНДС"
		И Не ОбъектМетаданных.ТабличныеЧасти.Найти("ПостояннаяЧастьАренднойПлаты") = Неопределено Тогда
		ИтогоСумма = 0;
		Для Каждого СтрокаТЧ Из Объект.ПостояннаяЧастьАренднойПлаты Цикл
			Сумма = Окр(ПолучитьСтавку(СтрокаТЧ.Ставка) * 
				?(СтрокаТЧ.СпособНачисления.ВариантРасчета = Перечисления.АР_ВариантыРасчета.ПоСтавкеЗаОбъектВЦелом, 1, СтрокаТЧ.Количество), 2);
			СтавкаНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС);	
			СуммаНДС = Окр(Сумма / (100 + ?(Объект.СуммаВключаетНДС, СтавкаНДС, 0)) * СтавкаНДС, 2);
			ИтогоСумма = ИтогоСумма + Сумма + ?(Объект.СуммаВключаетНДС, 0, СуммаНДС);
		КонецЦикла;
		ЗначениеРеквизита = ИтогоСумма;
	ИначеЕсли ЭтоДокумент И ИмяРеквизита = "ОбщаяСуммаНДС"
		И Не ОбъектМетаданных.ТабличныеЧасти.Найти("ПостояннаяЧастьАренднойПлаты") = Неопределено Тогда
		ИтогоСумма = 0;
		Для Каждого СтрокаТЧ Из Объект.ПостояннаяЧастьАренднойПлаты Цикл
			Сумма = Окр(ПолучитьСтавку(СтрокаТЧ.Ставка) * 
				?(СтрокаТЧ.СпособНачисления.ВариантРасчета = Перечисления.АР_ВариантыРасчета.ПоСтавкеЗаОбъектВЦелом, 1, СтрокаТЧ.Количество), 2);
			СтавкаНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС);	
			СуммаНДС = Окр(Сумма / (100 + ?(Объект.СуммаВключаетНДС, СтавкаНДС, 0)) * СтавкаНДС, 2);
			ИтогоСумма = ИтогоСумма + СуммаНДС;
		КонецЦикла;
		ЗначениеРеквизита = ИтогоСумма;
	ИначеЕсли ЭтоДокумент И ИмяРеквизита = "ОбщаяСуммаПостояннойЧасти" Тогда
		ИтогоСумма = 0;
		Для Каждого СтрокаТЧ Из Объект.ПостояннаяЧастьАренднойПлаты Цикл
			ИтогоСумма = ИтогоСумма + Окр(ПолучитьСтавку(СтрокаТЧ.Ставка) * 
				?(СтрокаТЧ.СпособНачисления.ВариантРасчета = Перечисления.АР_ВариантыРасчета.ПоСтавкеЗаОбъектВЦелом, 1, СтрокаТЧ.Количество), 2);
		КонецЦикла;
		ЗначениеРеквизита = ИтогоСумма;
	ИначеЕсли ЭтоДокумент И ИмяРеквизита = "ОбщаяСумма" Тогда
		ИтогоСумма = 0;
		Если ТипЗнч(Объект) = Тип("ДокументСсылка.АР_АктСнятияПоказанийСчетчика") Тогда
			ИтогоСумма = Объект.Показания.Итог("Сумма");
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.АР_ВыполнениеРаботПоОбслуживанию") Тогда	
			ИтогоСумма = Объект.Работы.Итог("Сумма") + Объект.Материалы.Итог("Сумма");
		КонецЕсли;
		ЗначениеРеквизита = ИтогоСумма;
	ИначеЕсли ЭтоДокумент И ИмяРеквизита = "ОбщаяСуммаРабот" Тогда
		ИтогоСумма = 0;
		Если ТипЗнч(Объект) = Тип("ДокументСсылка.АР_ВыполнениеРаботПоОбслуживанию") Тогда
			ИтогоСумма = Объект.Работы.Итог("Сумма");
		КонецЕсли;
		ЗначениеРеквизита = ИтогоСумма;
	ИначеЕсли ЭтоДокумент И ИмяРеквизита = "ОбщаяСуммаМатериалов" Тогда
		ИтогоСумма = 0;
		Если ТипЗнч(Объект) = Тип("ДокументСсылка.АР_ВыполнениеРаботПоОбслуживанию") Тогда
			ИтогоСумма = Объект.Материалы.Итог("Сумма");
		КонецЕсли;
		ЗначениеРеквизита = ИтогоСумма;
	ИначеЕсли ЭтоДокумент И ИмяРеквизита = "ОбщаяСуммаПостояннойЧастиПрописью" Тогда
		ИтогоСумма = 0;
		Валюта = Неопределено;
		Для Каждого СтрокаТЧ Из Объект.ПостояннаяЧастьАренднойПлаты Цикл
			ИтогоСумма = ИтогоСумма + Окр(ПолучитьСтавку(СтрокаТЧ.Ставка) * 
				?(СтрокаТЧ.СпособНачисления.ВариантРасчета = Перечисления.АР_ВариантыРасчета.ПоСтавкеЗаОбъектВЦелом, 1, СтрокаТЧ.Количество), 2);
			Если Не ЗначениеЗаполнено(Валюта) Тогда
				Валюта = СтрокаТЧ.СпособНачисления.Валюта;
			КонецЕсли;
		КонецЦикла;
		ЗначениеРеквизита = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(ИтогоСумма, Валюта);
	ИначеЕсли ИмяРеквизита = "Сумма" Тогда // Сумма в строке постоянной части
		ЗначениеРеквизита = Окр(ПолучитьСтавку(Объект.Ставка) * 
			?(Объект.СпособНачисления.ВариантРасчета = Перечисления.АР_ВариантыРасчета.ПоСтавкеЗаОбъектВЦелом, 1, Объект.Количество), 2);
	ИначеЕсли ИмяРеквизита = "Разница" Тогда // Разница в акте снятия показаний счетчика
		ЗначениеРеквизита = Окр((Объект.ПоказаниеНаКонецПериода - Объект.ПоказаниеНаНачалоПериода) * ?(ЗначениеЗаполнено(Объект.КоэффициентОтнесенияСчетчика), Объект.КоэффициентОтнесенияСчетчика, 1), 3);
	ИначеЕсли ЭтоДокумент И ТипЗнч(Объект) = Тип("ДокументСсылка.АР_АктСнятияПоказанийСчетчика") И ИмяРеквизита = "ОбщаяРазница" Тогда
		Сумма = 0;
		Для Каждого СтрокаТЧ Из Объект.Показания Цикл
			Сумма = Сумма + ?(ЗначениеЗаполнено(СтрокаТЧ.КоэффициентОтнесенияСчетчика), СтрокаТЧ.КоэффициентОтнесенияСчетчика, 1) *
			(СтрокаТЧ.ПоказаниеНаКонецПериода - СтрокаТЧ.ПоказаниеНаНачалоПериода);
		КонецЦикла;
		ЗначениеРеквизита = Окр(Сумма, 3);
	ИначеЕсли ИмяРеквизита = "СуммаНДС" Тогда // Сумма НДС в строке постоянной части
		СуммаВключаетНДС = Истина;
		Если ДополнительныеДанные.Свойство("Объект") Тогда
			СуммаВключаетНДС = ДополнительныеДанные["Объект"]["СуммаВключаетНДС"];
		КонецЕсли;
		Сумма = Окр(ПолучитьСтавку(Объект.Ставка) * 
			?(Объект.СпособНачисления.ВариантРасчета = Перечисления.АР_ВариантыРасчета.ПоСтавкеЗаОбъектВЦелом, 1, Объект.Количество), 2);
		СтавкаНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС);	
		СуммаНДС = Окр(Сумма / (100 + ?(СуммаВключаетНДС, СтавкаНДС, 0)) * СтавкаНДС, 2);
		ЗначениеРеквизита = Окр(СуммаНДС, 2);
	ИначеЕсли ИмяРеквизита = "Всего" Тогда // Всего в строке постоянной части
		СуммаВключаетНДС = Истина;
		Если ДополнительныеДанные.Свойство("Объект") Тогда
			СуммаВключаетНДС = ДополнительныеДанные["Объект"]["СуммаВключаетНДС"];
		КонецЕсли;
		Сумма = Окр(ПолучитьСтавку(Объект.Ставка) * 
			?(Объект.СпособНачисления.ВариантРасчета = Перечисления.АР_ВариантыРасчета.ПоСтавкеЗаОбъектВЦелом, 1, Объект.Количество), 2);
		СтавкаНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС);	
		СуммаНДС = Окр(Сумма / (100 + ?(СуммаВключаетНДС, СтавкаНДС, 0)) * СтавкаНДС, 2);
		Всего = ?(СуммаВключаетНДС, Сумма, Сумма + СуммаНДС);
		ЗначениеРеквизита = Окр(Всего, 2);
	ИначеЕсли ЭтоДокумент И ИмяРеквизита = "СписокОбъектовАрендыЧерезЗапятую" Тогда
		СписокОбъектов = "";
		Если ТипЗнч(Объект) = Тип("ДокументСсылка.АР_ЗаключениеДоговораАренды")
			ИЛИ ТипЗнч(Объект) = Тип("ДокументСсылка.АР_ДополнительноеСоглашение")
			ИЛИ ТипЗнч(Объект) = Тип("ДокументСсылка.АР_РасторжениеДоговораАренды") Тогда
			ТаблицаОбъектов = Объект.ПостояннаяЧастьАренднойПлаты.Выгрузить(, "ОбъектАренды");
			ТаблицаОбъектов.Свернуть("ОбъектАренды", "");
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.АР_АктПриемаВозвратаАрендуемогоПомещения")
			ИЛИ ТипЗнч(Объект) = Тип("ДокументСсылка.АР_АктПриемаПередачиПомещенияВАренду") Тогда
			ТаблицаОбъектов = Объект.Состав.Выгрузить(, "ОбъектАренды");
			ТаблицаОбъектов.Свернуть("ОбъектАренды", "");
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.АР_АктСнятияПоказанийСчетчика") Тогда
			ТаблицаОбъектов = Объект.Показания.Выгрузить(, "ОбъектАренды");
			ТаблицаОбъектов.Свернуть("ОбъектАренды", "");
		Иначе
			ТаблицаОбъектов = Новый ТаблицаЗначений;
		КонецЕсли;
		Для Каждого СтрокаТаб Из ТаблицаОбъектов Цикл
			СписокОбъектов = СписокОбъектов + ?(ЗначениеЗаполнено(СписокОбъектов), ", ", "") + Строка(СтрокаТаб.ОбъектАренды);
		КонецЦикла;
		ЗначениеРеквизита = СписокОбъектов;
	ИначеЕсли ИмяРеквизита = "ПодлежитСдачеВАренду" Тогда
		ЗначениеРеквизита = ПодлежитСдачеВАренду(Объект);
	ИначеЕсли ИмяРеквизита = "Собственник" Тогда
		ДанныеОСобственнике = ПолучитьДанныеОСобственнике(Объект, ДатаСреза, ИмяСубРеквизита, СоответствиеСвойств);
		ЗначениеРеквизита = ДанныеОСобственнике.СобственникПредставление;	
	ИначеЕсли ИмяРеквизита = "ДоговорСобственника" Тогда
		ДанныеОСобственнике = ПолучитьДанныеОСобственнике(Объект, ДатаСреза, ИмяСубРеквизита, СоответствиеСвойств);
		ЗначениеРеквизита = ДанныеОСобственнике.ДоговорСобственника;	
	ИначеЕсли ИмяРеквизита = "СтруктураАссортимента" Тогда // Перечислим через запятую структуру ассортимента
		ЗначениеРеквизита = ПолучитьСтруктуруАссортимента(Объект);
	ИначеЕсли ИмяРеквизита = "АдресОбъектаНедвижимости"	Тогда
		ЗначениеРеквизита = ПолучитьАдресОбъектаАренды(Объект);
	Иначе // Попробуем найти дополнительное свойство	
		ЗначениеРеквизита = ПолучитьЗначениеСвойства(Объект, ИмяРеквизита);
	КонецЕсли;
	
	Если ЗначениеРеквизита = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Значение = Неопределено;
	Попытка
		Значение = ?(ПозицияТочки > 0, ПолучитьЗначениеРеквизита(ЗначениеРеквизита, ИмяСубРеквизита, СоответствиеСвойств, ДатаСреза, ДополнительныеДанные), ЗначениеРеквизита);
		Если ПозицияСкобки > 0 Тогда
			Если ВРег(ФорматнаяСтрока) = "ПРОПИСЬЮ" Тогда
				Сумма = Значение;
				Если Не ТипЗнч(Сумма) = Тип("Число") Тогда
					Возврат Сумма;
				КонецЕсли;
				Если Найти(ИмяРеквизита, "Свойство") > 0 Тогда
					ИмяСвойства	= СтрЗаменить(СтрЗаменить(ИмяРеквизита, "[", ""), "]", "");
					Если НЕ СоответствиеСвойств[ИмяСвойства] = Неопределено Тогда
						ИмяСвойства = СоответствиеСвойств[ИмяСвойства];
					КонецЕсли;
				КонецЕсли;
				Если Найти(ВРег(ИмяРеквизита), "СУММА") > 0 ИЛИ Найти(ВРег(ИмяСубРеквизита), "СУММА") > 0 ИЛИ Найти(ВРег(ИмяСвойства), "СУММА") > 0
					ИЛИ ВРег(ИмяРеквизита) = "СТАВКА" ИЛИ ВРег(ИмяСубРеквизита) = "СТАВКА"  ИЛИ Найти(ВРег(ИмяСвойства), "СТАВКА") > 0 Тогда
					
					Валюта = ПолучитьВалютуДокумента(Объект, ИмяРеквизита, Значение, СписокРеквизитов);
					
					Если ЗначениеЗаполнено(Валюта) Тогда
						Значение = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(Сумма, Валюта);
					Иначе
						Значение = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(Сумма, Константы.ВалютаРегламентированногоУчета.Получить()); 
					КонецЕсли;
					
				Иначе
					Если Окр(Сумма, 0) = Сумма Тогда
						Значение = ЧислоПрописью(Окр(Сумма, 0), "НП = Ложь");
						Значение = СокрЛП(СтрЗаменить(Значение, "00", ""));
					Иначе
						Значение = ЧислоПрописью(Сумма, "ДП = Истина", "целый, целых, целых, м, сотая, сотых, сотых, ж");				
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ВРег(ФорматнаяСтрока) = "ИМЕНИТЕЛЬНЫЙ" Тогда
				Значение = Строка(Значение);
			ИначеЕсли ВРег(ФорматнаяСтрока) = "РОДИТЕЛЬНЫЙ" Тогда
				Значение = СклонениеПредставленийОбъектов.ПросклонятьПредставление(Строка(Значение), 2);
			ИначеЕсли ВРег(ФорматнаяСтрока) = "ДАТЕЛЬНЫЙ" Тогда
				Значение = СклонениеПредставленийОбъектов.ПросклонятьПредставление(Строка(Значение), 3);
			ИначеЕсли ВРег(ФорматнаяСтрока) = "ВИНИТЕЛЬНЫЙ" Тогда
				Значение = СклонениеПредставленийОбъектов.ПросклонятьПредставление(Строка(Значение), 4);
			ИначеЕсли ВРег(ФорматнаяСтрока) = "ТВОРИТЕЛЬНЫЙ" Тогда
				Значение = СклонениеПредставленийОбъектов.ПросклонятьПредставление(Строка(Значение), 5);
			ИначеЕсли ВРег(ФорматнаяСтрока) = "ПРЕДЛОЖНЫЙ" Тогда
				Значение = СклонениеПредставленийОбъектов.ПросклонятьПредставление(Строка(Значение), 6);
			Иначе	
				Значение = Формат(Значение, ФорматнаяСтрока);
			КонецЕсли;
		КонецЕсли;
		Если ТипЗнч(Значение) = Тип("Дата")
			И НачалоДня(Значение) = Значение 
			И НЕ ЗначениеЗаполнено(ФорматнаяСтрока) Тогда
			ФорматнаяСтрока = "ДФ=dd.MM.yyyy";
			Значение = Формат(Значение, ФорматнаяСтрока);
		КонецЕсли;
		Если ТипЗнч(Значение) = Тип("Строка") Тогда
			Значение = СокрЛП(Значение);
		КонецЕсли;
	Исключение 
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Значение;
	
КонецФункции

Функция ПолучитьВалютуДокумента(Объект, ИмяРеквизита, ЗначениеРеквизита, СписокРеквизитов)
	
	МетаданныеСтроки = Метаданные.НайтиПоТипу(ТипЗнч(ЗначениеРеквизита));
	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(Объект));
	Если ИмяРеквизита = "ОбщаяСуммаПостояннойЧасти" Тогда
		Валюта = Неопределено;
		Для Каждого СтрокаТЧ Из Объект.ПостояннаяЧастьАренднойПлаты Цикл
			Если Не ЗначениеЗаполнено(Валюта) Тогда
				Валюта = СтрокаТЧ.СпособНачисления.Валюта;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ИмяРеквизита = "СуммаЗалога" И СписокРеквизитов.НайтиПоЗначению("ВалютаДепозита") <> Неопределено Тогда
		Валюта = Объект.ВалютаДепозита;
	ИначеЕсли НЕ МетаданныеСтроки = Неопределено И Не МетаданныеСтроки.Реквизиты.Найти("СпособНачисления") = Неопределено Тогда
		Валюта = ЗначениеРеквизита.СпособНачисления.Валюта;
	ИначеЕсли НЕ МетаданныеОбъекта = Неопределено И Не МетаданныеОбъекта.Реквизиты.Найти("СпособНачисления") = Неопределено Тогда
		Валюта = Объект.СпособНачисления.Валюта;
	Иначе
		Валюта = Неопределено;
		Если СписокРеквизитов.НайтиПоЗначению("ВалютаДокумента") <> Неопределено Тогда
			Валюта = Объект["ВалютаДокумента"];
		КонецЕсли;
	КонецЕсли;
	
	Возврат Валюта;
	
КонецФункции

Функция ПредлагатьСохранятьДокументWord() Экспорт
	
	Возврат Константы.АР_СохранятьДокументWord.Получить();
	
КонецФункции

Функция ПолучитьСтруктуруАссортимента(ОбъектАренды)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АР_СтруктураАссортимента.Наименование КАК Наименование
	|ИЗ
	|	Справочник.АР_СтруктураАссортимента КАК АР_СтруктураАссортимента
	|ГДЕ
	|	АР_СтруктураАссортимента.Владелец = &Владелец
	|	И НЕ АР_СтруктураАссортимента.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";

	Запрос.УстановитьПараметр("Владелец", ОбъектАренды);
	СтруктураАссортимента = "";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураАссортимента = СтруктураАссортимента + ?(ЗначениеЗаполнено(СтруктураАссортимента), ", ", "") + Выборка.Наименование;
	КонецЦикла;

	Возврат СтруктураАссортимента;
	
КонецФункции

Функция ПолучитьДанныеОСобственнике(ОбъектАренды, Дата = '00010101', ИмяСубРеквизита = "", СоответствиеСвойств = Неопределено) Экспорт
	
	СтруктураВозврата = Новый Структура("Собственник, ДоговорСобственника, МассивСобственников, СобственникПредставление, СобственникКонтрагент", "", "", Новый Массив, "");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбъектАренды", ОбъектАренды);
	Запрос.УстановитьПараметр("ДатаСреза", Дата);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АР_СобственникиОбъектовНедвижимостиСобственники.Ссылка КАК СобственникСправочник,
	|	АР_СобственникиОбъектовНедвижимостиСобственники.Ссылка.ПредставлениеСобственника КАК Собственник
	|ИЗ
	|	РегистрСведений.АР_СобственникиОбъектовАренды.СрезПоследних(&ДатаСреза,) КАК АР_СобственникиОбъектовАрендыСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АР_СобственникиОбъектовНедвижимости.Собственники КАК АР_СобственникиОбъектовНедвижимостиСобственники
	|		ПО АР_СобственникиОбъектовАрендыСрезПоследних.Собственник = АР_СобственникиОбъектовНедвижимостиСобственники.Ссылка
	|ГДЕ
	|	АР_СобственникиОбъектовАрендыСрезПоследних.ОбъектАренды = &ОбъектАренды";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураВозврата.Собственник = Выборка.Собственник;
		Договор = "";
		ТаблицаСобственников = Выборка.СобственникСправочник.Собственники.Выгрузить();
		ТаблицаСобственников.Свернуть("Собственник");
		МассивСобственников = ТаблицаСобственников.ВыгрузитьКолонку("Собственник");
		СтруктураВозврата.СобственникКонтрагент = ТаблицаСобственников[0].Собственник;
		Для Каждого СтрокаСобственник Из Выборка.СобственникСправочник.Собственники Цикл
			ТекДоговор = СтрокаСобственник.АгентскийДоговор;
			Если ЗначениеЗаполнено(ИмяСубРеквизита) Тогда
				Если ЗначениеЗаполнено(СоответствиеСвойств) Тогда
					НовоеСоответствиеСвойств = ОбщегоНазначенияКлиентСервер.СкопироватьСоответствие(СоответствиеСвойств);
				Иначе
					НовоеСоответствиеСвойств = Неопределено;	
				КонецЕсли;
				НовыйСубРеквизит = "" + ИмяСубРеквизита;
				ТекДоговорНаименование = ПолучитьЗначениеРеквизита(ТекДоговор, НовыйСубРеквизит, НовоеСоответствиеСвойств, Дата);
				ТекСобственникНаименование = ПолучитьЗначениеРеквизита(СтрокаСобственник.Собственник, НовыйСубРеквизит, НовоеСоответствиеСвойств, Дата);
			Иначе
				ТекДоговорНаименование = ТекДоговор.Наименование;
				ТекСобственникНаименование = СтрокаСобственник.Собственник.Наименование;
			КонецЕсли;
			Договор = ?(ЗначениеЗаполнено(Договор), Договор + Символы.ПС, "") + ТекДоговорНаименование 
				+ ?(ТаблицаСобственников.Количество() = 1, "", " (" + СтрокаСобственник.Собственник + ")");
			СобственникПредставление = ?(ЗначениеЗаполнено(СобственникПредставление), СобственникПредставление + Символы.ПС, "") + ТекСобственникНаименование
				+ ?(ТаблицаСобственников.Количество() = 1, "", " (" + СтрокаСобственник.Собственник + ")");
		КонецЦикла;
		Если ЗначениеЗаполнено(ИмяСубРеквизита) Тогда
			СтруктураВозврата.СобственникПредставление = СобственникПредставление;
		Иначе
			СтруктураВозврата.СобственникПредставление = Выборка.Собственник;
		КонецЕсли;
		СтруктураВозврата.ДоговорСобственника = Договор;
		СтруктураВозврата.МассивСобственников = МассивСобственников;
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектАренды.Родитель) Тогда
		Возврат ПолучитьДанныеОСобственнике(ОбъектАренды.Родитель, Дата, ИмяСубРеквизита, СоответствиеСвойств);
	ИначеЕсли НЕ ОбъектАренды = Справочники.АР_ОбъектыАренды.ПустаяСсылка() Тогда
		Возврат ПолучитьДанныеОСобственнике(Справочники.АР_ОбъектыАренды.ПустаяСсылка(), Дата, ИмяСубРеквизита, СоответствиеСвойств);
	Иначе
		Возврат СтруктураВозврата;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСобственникаДляОтчета(ОбъектАренды, Дата = '00010101' ) Экспорт
	Возврат ПолучитьДанныеОСобственнике(ОбъектАренды, Дата).СобственникКонтрагент;	
КонецФункции

Функция ПодлежитСдачеВАренду(ОбъектАренды)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбъектАренды", ОбъектАренды);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыПодлежащиеСдачеВАренду.ПодлежитСдачеВАренду КАК ПодлежитСдаче
	|ИЗ
	|	РегистрСведений.АР_ОбъектыПодлежащиеСдачеВАренду.СрезПоследних КАК ОбъектыПодлежащиеСдачеВАренду
	|ГДЕ
	|	ОбъектыПодлежащиеСдачеВАренду.ОбъектАренды = &ОбъектАренды";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Формат(Выборка.ПодлежитСдаче, "БЛ='Не подлежит сдаче в аренду'; БИ='Подлежит сдаче в аренду'");
	КонецЦикла;
	
	Возврат Формат(Ложь, "БЛ='Не подлежит сдаче в аренду'; БИ='Подлежит сдаче в аренду'");
	
КонецФункции

//////////////////////////////////////////////////////////////////
//  Работа с планировками

// Процедура вызова защищенной обработки АР_PlotOnPlan
Функция ПечатьПланировок(Параметр) Экспорт
	
	ТекстОшибки = "";
	Обработка = АР_ОбщийМодульСЛК.СоздатьОбъект("ОтобразитьНаПлане");
	Если Обработка = Неопределено Тогда
		Сообщить(ТекстОшибки);
		Возврат Новый Массив;
	КонецЕсли;
	Обработка.СсылкаНаОбъект = Параметр;
	Возврат Обработка.Печать();
	
КонецФункции

Функция ПолучитьДанныеПланировок(Параметр) Экспорт
	
	ТекстОшибки = "";
	Обработка = АР_ОбщийМодульСЛК.СоздатьОбъект("ОтобразитьНаПлане");
	Если Обработка = Неопределено Тогда
		Сообщить(ТекстОшибки);
		Возврат Новый Массив;
	КонецЕсли;
	Обработка.СсылкаНаОбъект = Параметр;
	Возврат Обработка.ПолучитьДанныеПланировок();
	
КонецФункции

Функция ПолучитьДанныеФайлаПланировки(Планировка) Экспорт
	
	ПолноеИмяФайла = АР_ОбщиеПроцедуры.ПолучитьПутьКФайлуПланировки(Планировка);
	СтруктураДанных = Новый Структура;
	
	Файл = Новый Файл(ПолноеИмяФайла);
	Если Файл.Существует() Тогда
		ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
		СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
		СтруктураДанных.Вставить("СсылкаНаДвоичныеДанныеФайла", СсылкаНаДвоичныеДанныеФайла);
	Иначе
		СтруктураДанных.Вставить("СсылкаНаДвоичныеДанныеФайла", "");
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция ПолучитьПутьКФайлуПланировки(ХранилищеПланировки) Экспорт
	
	Если Не ЗначениеЗаполнено(ХранилищеПланировки) Тогда
		Возврат "";
	КонецЕсли;
		
	ПолноеИмяФайла = АР_ОбщиеПроцедуры.ЗначениеРеквизитаОбъекта(ХранилищеПланировки, "ИмяФайла");
	Если Не ЗначениеЗаполнено(ПолноеИмяФайла) Тогда
		Сообщить("Не заполнено имя файла в планировке """ + ХранилищеПланировки + """", СтатусСообщения.Важное);
		Возврат "";
	КонецЕсли;
	
	// Получить расширение файла.
	Расширение = Прав(ПолноеИмяФайла, 4);
	
	Если Лев(Расширение, 1) = "." Тогда
		// Получить имя временного файла. Установить расширение временного файла.
		Расширение = Прав(ПолноеИмяФайла, 3);
	КонецЕсли;
	
	Если ВРег(Расширение) <> "XLS" И  ВРег(Расширение) <> "XLSX" Тогда // Файл не является экселевским
		Сообщить("Файл планировки не является файлом Excel", СтатусСообщения.Важное);
		Возврат "";
	КонецЕсли;
	
	Возврат ПолноеИмяФайла;
	
КонецФункции

Процедура ОчиститьВременныеФайлыПросмотраПланировок() Экспорт
	
	МассивМасок = Новый Массив;
	МассивМасок.Добавить("Печать планировок *");
	МассивМасок.Добавить("Занятость площадей *");
	МассивМасок.Добавить("Расположение объекта *");
	
	Для Каждого Маска Из МассивМасок Цикл
		Попытка
			УдалитьФайлы(КаталогВременныхФайлов(), Маска);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьОписаниеФайлаПланировки(ФайлПланировки, ИскатьНадписиДляОбъектов = Ложь) Экспорт
	
	МассивЛистов = Новый Массив;
	МассивДанныхТаблицыОбъектов = Новый Массив;
	МассивДанныхТаблицыТекстОбъектов = Новый Массив;
	
	Описание = Новый Структура("ПланировкаИнициализирована, МассивЛистов, МассивДанныхТаблицыОбъектов, МассивДанныхТаблицыТекстОбъектов", Ложь, МассивЛистов, МассивДанныхТаблицыОбъектов, МассивДанныхТаблицыТекстОбъектов);
	
	Если НЕ ЗначениеЗаполнено(ФайлПланировки) Тогда
		Возврат Описание;
	КонецЕсли;
	
	Описание = АР_ОбщиеПроцедурыКлиентСервер.ПолучитьОписаниеФайлаПланировки(ФайлПланировки, ИскатьНадписиДляОбъектов);
	
	Возврат Описание;
	
КонецФункции

Функция ПолучитьГрафическийОбъект(Планировка, СохранятьКак) Экспорт
	
	ИмяВременногоФайла = АР_ОбщиеПроцедурыКлиентСервер.ОтобразитьНаПланировкеОбъект(Планировка);
	
	Если ЗначениеЗаполнено(ИмяВременногоФайла) Тогда
		Файл = Новый Файл(ИмяВременногоФайла);
		Если Файл.Существует() Тогда
			ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
			СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
			
			НоваяСтруктураДанных = Новый Структура;
			НоваяСтруктураДанных.Вставить("СсылкаНаДвоичныеДанныеФайла", СсылкаНаДвоичныеДанныеФайла);
			
			Возврат НоваяСтруктураДанных;
		Иначе
			Попытка
				ДвоичныеДанные = ПолучитьИзВременногоХранилища(ИмяВременногоФайла);
				НоваяСтруктураДанных = Новый Структура;
				НоваяСтруктураДанных.Вставить("СсылкаНаДвоичныеДанныеФайла", ИмяВременногоФайла);
				Возврат НоваяСтруктураДанных;
			Исключение
				Возврат Неопределено;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;

КонецФункции

Процедура ОчиститьВременныеФайлыШаблонов() Экспорт
	
	МассивМасок = Новый Массив;
	МассивМасок.Добавить("Шаблон *");
	МассивМасок.Добавить("Редактирование шаблона *");
	
	Для Каждого Маска Из МассивМасок Цикл
		Попытка
			УдалитьФайлы(КаталогВременныхФайлов(), Маска);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТекстМакросовExcel() Экспорт
	
	Макет = Отчеты.АР_ЗанятостьПлощадей.ПолучитьМакет("ВсеМакросыExcel");
	Возврат Макет.ПолучитьТекст();
	
КонецФункции

Функция ПолучитьТекстМакросаОписание() Экспорт
	
	Макет = Отчеты.АР_ЗанятостьПлощадей.ПолучитьМакет("ТекстМакросаОписание");
	Возврат Макет.ПолучитьТекст();
	
КонецФункции

//////////////////////////////////////////////////////////////////
//  Работа с графиком ставок

Функция ПолучитьСтавку(Ставка, Дата = '00010101') Экспорт
	
	Если ТипЗнч(Ставка) = Тип("Число") Тогда
		Возврат Ставка;
	ИначеЕсли ТипЗнч(Ставка) = Тип("СправочникСсылка.АР_ГрафикиИзмененияСтавокНаУслуги") Тогда
		Если Ставка.ГрафикСтавок.Количество() = 0 Тогда
			Возврат 0;
		Иначе
			Если ЗначениеЗаполнено(Дата) Тогда
				СтавкаЧисло = Ставка.ГрафикСтавок[0].Ставка;
				Для Каждого СтрокаТаб Из Ставка.ГрафикСтавок Цикл
					Если Дата < СтрокаТаб.Дата Тогда
						Прервать;
					КонецЕсли;
					СтавкаЧисло = СтрокаТаб.Ставка;
				КонецЦикла;
				Возврат СтавкаЧисло;
			Иначе
				Возврат Ставка.ГрафикСтавок[0].Ставка;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Возврат 0;
	КонецЕсли;  
	
КонецФункции

Функция ПолучитьСтавкуПрописью(Ставка, Дата = '00010101') Экспорт
	
	Если ТипЗнч(Ставка) = Тип("Число") Тогда
		Возврат Ставка;
	ИначеЕсли ТипЗнч(Ставка) = Тип("СправочникСсылка.АР_ГрафикиИзмененияСтавокНаУслуги") Тогда
		Если Ставка.ГрафикСтавок.Количество() = 0 Тогда
			Возврат "";
		Иначе
			Валюта = Ставка.Владелец.ВалютаВзаиморасчетов;
			ТекстЗначения = "";
			Для Каждого СтрокаТаб Из Ставка.ГрафикСтавок Цикл
				ТекстЗначения = ТекстЗначения + "с " + Формат(СтрокаТаб.Дата, "ДФ=dd.MM.yyyy") + " - " 
								+ Формат(СтрокаТаб.Ставка, "ЧГ=0") + " " + Валюта + Символы.ПС;
			КонецЦикла;
			Возврат ТекстЗначения;
		КонецЕсли;
	Иначе
		Возврат 0;
	КонецЕсли;  
	
КонецФункции

Функция СуществуютГрафикиПоДокументу(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ АР_ГрафикиИзмененияСтавокНаУслуги.Ссылка) КАК Количество
	|ИЗ
	|	Справочник.АР_ГрафикиИзмененияСтавокНаУслуги КАК АР_ГрафикиИзмененияСтавокНаУслуги
	|ГДЕ
	|	АР_ГрафикиИзмененияСтавокНаУслуги.Документ = &Документ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Следующий() И НЕ Выборка.Количество = 0;
	
КонецФункции

//////////////////////////////////////////////////////////////////
// Работа по агентской схеме

Функция ПолучитьСобственника(ОбъектАренды, Дата = '00010101') Экспорт
	
	СтруктураДанных = Новый Структура("Контрагент, АгентскаяСхема, ДоговорКонтрагента");
	СтруктураДанных.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	СтруктураДанных.АгентскаяСхема = Ложь;
	СтруктураДанных.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(ОбъектАренды) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", ОбъектАренды);
		Запрос.УстановитьПараметр("Период", Дата);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	1 КАК Порядок,
		|	АР_СобственникиОбъектовНедвижимостиСобственники.Собственник КАК Контрагент,
		|	АР_СобственникиОбъектовНедвижимостиСобственники.АгентскаяСхема КАК АгентскаяСхема,
		|	АР_СобственникиОбъектовНедвижимостиСобственники.АгентскийДоговор КАК ДоговорКонтрагента
		|ИЗ
		|	РегистрСведений.АР_СобственникиОбъектовАренды.СрезПоследних(&Период, ОбъектАренды = &Ссылка) КАК АР_СобственникиОбъектовАрендыСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АР_СобственникиОбъектовНедвижимости.Собственники КАК АР_СобственникиОбъектовНедвижимостиСобственники
		|		ПО АР_СобственникиОбъектовАрендыСрезПоследних.Собственник = АР_СобственникиОбъектовНедвижимостиСобственники.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2,
		|	АР_СобственникиОбъектовНедвижимостиСобственники.Собственник,
		|	АР_СобственникиОбъектовНедвижимостиСобственники.АгентскаяСхема,
		|	АР_СобственникиОбъектовНедвижимостиСобственники.АгентскийДоговор
		|ИЗ
		|	РегистрСведений.АР_СобственникиОбъектовАренды.СрезПоследних(&Период, ОбъектАренды = ЗНАЧЕНИЕ(Справочник.АР_ОбъектыАренды.ПустаяСсылка)) КАК АР_СобственникиОбъектовАрендыСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АР_СобственникиОбъектовНедвижимости.Собственники КАК АР_СобственникиОбъектовНедвижимостиСобственники
		|		ПО АР_СобственникиОбъектовАрендыСрезПоследних.Собственник = АР_СобственникиОбъектовНедвижимостиСобственники.Собственник
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда 
			Возврат СтруктураДанных;
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		ЗаполнитьЗначенияСвойств(СтруктураДанных, ВыборкаДетальныеЗаписи);			
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция ПолучитьСобственников(ОбъектАренды, Дата = '00010101') Экспорт
	
	ТЗСобственники = Новый ТаблицаЗначений;
	ТЗСобственники.Колонки.Добавить("Собственник");
	ТЗСобственники.Колонки.Добавить("Контрагент");
	ТЗСобственники.Колонки.Добавить("Доля");
	ТЗСобственники.Колонки.Добавить("ДоговорПринципала");
	ТЗСобственники.Колонки.Добавить("АгентскаяСхема");
	ТЗСобственники.Колонки.Добавить("НомерЗаписиВЕГРП");
	ТЗСобственники.Колонки.Добавить("ДатаЗаписиВЕГРП");
	ТЗСобственники.Колонки.Добавить("ПериодЗаписи");
	ТЗСобственники.Колонки.Добавить("ОбъектАрендыРег");
	
	СтрокаСобственник = ТЗСобственники.Добавить();
	СтрокаСобственник.Контрагент        = Справочники.Контрагенты.ПустаяСсылка();
	СтрокаСобственник.ДоговорПринципала = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	СтрокаСобственник.АгентскаяСхема    = Ложь;
	СтрокаСобственник.ПериодЗаписи      = Дата(1,1,1);
	СтрокаСобственник.ОбъектАрендыРег   = Справочники.АР_ОбъектыАренды.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(ОбъектАренды) Тогда
			
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЕСТЬNULL(АР_СобственникиОбъектовАренды.Собственник, АР_СобственникиОбъектовАрендыВсе.Собственник) КАК Собственник,
			|	АР_ОбъектыАренды.Ссылка КАК ОбъектАренды,
			|	ЕСТЬNULL(АР_СобственникиОбъектовАренды.Период, АР_СобственникиОбъектовАрендыВсе.Период) КАК ПериодЗаписи,
			|	ЕСТЬNULL(АР_СобственникиОбъектовАренды.ОбъектАренды, АР_СобственникиОбъектовАрендыВсе.ОбъектАренды) КАК ОбъектАрендыРег
			|ПОМЕСТИТЬ ВТДействующиеСобственники
			|ИЗ
			|	Справочник.АР_ОбъектыАренды КАК АР_ОбъектыАренды
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АР_СобственникиОбъектовАренды.СрезПоследних(&Период, ОбъектАренды = &ОбъектАренды) КАК АР_СобственникиОбъектовАренды
			|		ПО АР_ОбъектыАренды.Ссылка = АР_СобственникиОбъектовАренды.ОбъектАренды
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АР_СобственникиОбъектовАренды.СрезПоследних(&Период, ОбъектАренды = ЗНАЧЕНИЕ(Справочник.АР_ОбъектыАренды.ПустаяСсылка)) КАК АР_СобственникиОбъектовАрендыВсе
			|		ПО (ИСТИНА)
			|ГДЕ
			|	АР_ОбъектыАренды.Ссылка = &ОбъектАренды
			|
			|СГРУППИРОВАТЬ ПО
			|	ЕСТЬNULL(АР_СобственникиОбъектовАренды.Собственник, АР_СобственникиОбъектовАрендыВсе.Собственник),
			|	АР_ОбъектыАренды.Ссылка,
			|	ЕСТЬNULL(АР_СобственникиОбъектовАренды.Период, АР_СобственникиОбъектовАрендыВсе.Период),
			|	ЕСТЬNULL(АР_СобственникиОбъектовАренды.ОбъектАренды, АР_СобственникиОбъектовАрендыВсе.ОбъектАренды)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТДействующиеСобственники.ОбъектАренды КАК ОбъектАренды,
			|	ВТДействующиеСобственники.Собственник КАК Собственник,
			|	АР_СобственникиОбъектовНедвижимостиСобственники.Доля КАК Доля,
			|	АР_СобственникиОбъектовНедвижимостиСобственники.НомерЗаписиВЕГРП КАК НомерЗаписиВЕГРП,
			|	АР_СобственникиОбъектовНедвижимостиСобственники.ДатаЗаписиВЕГРП КАК ДатаЗаписиВЕГРП,
			|	АР_СобственникиОбъектовНедвижимостиСобственники.АгентскаяСхема КАК АгентскаяСхема,
			|	АР_СобственникиОбъектовНедвижимостиСобственники.АгентскийДоговор КАК ДоговорПринципала,
			|	АР_СобственникиОбъектовНедвижимостиСобственники.Собственник КАК Контрагент,
			|	ВТДействующиеСобственники.ПериодЗаписи КАК ПериодЗаписи,
			|	ВТДействующиеСобственники.ОбъектАрендыРег КАК ОбъектАрендыРег
			|ИЗ
			|	ВТДействующиеСобственники КАК ВТДействующиеСобственники
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АР_СобственникиОбъектовНедвижимости.Собственники КАК АР_СобственникиОбъектовНедвижимостиСобственники
			|		ПО ВТДействующиеСобственники.Собственник = АР_СобственникиОбъектовНедвижимостиСобственники.Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТДействующиеСобственники.ОбъектАренды,
			|	ВТДействующиеСобственники.Собственник,
			|	АР_СобственникиОбъектовНедвижимостиСобственники.Доля,
			|	АР_СобственникиОбъектовНедвижимостиСобственники.НомерЗаписиВЕГРП,
			|	АР_СобственникиОбъектовНедвижимостиСобственники.ДатаЗаписиВЕГРП,
			|	АР_СобственникиОбъектовНедвижимостиСобственники.АгентскаяСхема,
			|	АР_СобственникиОбъектовНедвижимостиСобственники.АгентскийДоговор,
			|	АР_СобственникиОбъектовНедвижимостиСобственники.Собственник,
			|	ВТДействующиеСобственники.ПериодЗаписи,
			|	ВТДействующиеСобственники.ОбъектАрендыРег";
		
		Запрос.УстановитьПараметр("ОбъектАренды", ОбъектАренды);
		Запрос.УстановитьПараметр("Период", Дата);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда 
			Возврат ТЗСобственники;
		КонецЕсли;
		
		ТЗСобственники = РезультатЗапроса.Выгрузить();
	КонецЕсли;
	
	Возврат ТЗСобственники;
	
КонецФункции

Функция ПолучитьДанныеСобственника(ОбъектАренды, Контрагент, Дата = '00010101') Экспорт
	
	СтруктураДанных = Новый Структура("Контрагент, АгентскаяСхема, ДоговорКонтрагента");
	СтруктураДанных.Контрагент         = Справочники.Контрагенты.ПустаяСсылка();
	СтруктураДанных.АгентскаяСхема     = Ложь;
	СтруктураДанных.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(ОбъектАренды) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЕСТЬNULL(АР_СобственникиОбъектовАренды.Собственник, АР_СобственникиОбъектовАрендыВсе.Собственник) КАК Собственник,
			|	АР_ОбъектыАренды.Ссылка КАК ОбъектАренды
			|ПОМЕСТИТЬ ВТДействующиеСобственники
			|ИЗ
			|	Справочник.АР_ОбъектыАренды КАК АР_ОбъектыАренды
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АР_СобственникиОбъектовАренды.СрезПоследних(&Период, ОбъектАренды = &ОбъектАренды) КАК АР_СобственникиОбъектовАренды
			|		ПО АР_ОбъектыАренды.Ссылка = АР_СобственникиОбъектовАренды.ОбъектАренды
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АР_СобственникиОбъектовАренды.СрезПоследних(&Период, ОбъектАренды = ЗНАЧЕНИЕ(Справочник.АР_ОбъектыАренды.ПустаяСсылка)) КАК АР_СобственникиОбъектовАрендыВсе
			|		ПО (ИСТИНА)
			|ГДЕ
			|	АР_ОбъектыАренды.Ссылка = &ОбъектАренды
			|
			|СГРУППИРОВАТЬ ПО
			|	ЕСТЬNULL(АР_СобственникиОбъектовАренды.Собственник, АР_СобственникиОбъектовАрендыВсе.Собственник),
			|	АР_ОбъектыАренды.Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТДействующиеСобственники.ОбъектАренды КАК ОбъектАренды,
			|	ВТДействующиеСобственники.Собственник КАК Собственник,
			|	АР_СобственникиОбъектовНедвижимостиСобственники.Доля КАК Доля,
			|	АР_СобственникиОбъектовНедвижимостиСобственники.НомерЗаписиВЕГРП КАК НомерЗаписиВЕГРП,
			|	АР_СобственникиОбъектовНедвижимостиСобственники.ДатаЗаписиВЕГРП КАК ДатаЗаписиВЕГРП,
			|	АР_СобственникиОбъектовНедвижимостиСобственники.АгентскаяСхема КАК АгентскаяСхема,
			|	АР_СобственникиОбъектовНедвижимостиСобственники.АгентскийДоговор КАК ДоговорПринципала,
			|	АР_СобственникиОбъектовНедвижимостиСобственники.Собственник КАК Контрагент
			|ИЗ
			|	ВТДействующиеСобственники КАК ВТДействующиеСобственники
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АР_СобственникиОбъектовНедвижимости.Собственники КАК АР_СобственникиОбъектовНедвижимостиСобственники
			|		ПО ВТДействующиеСобственники.Собственник = АР_СобственникиОбъектовНедвижимостиСобственники.Ссылка
			|ГДЕ
			|	АР_СобственникиОбъектовНедвижимостиСобственники.Собственник = &Собственник
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТДействующиеСобственники.ОбъектАренды,
			|	ВТДействующиеСобственники.Собственник,
			|	АР_СобственникиОбъектовНедвижимостиСобственники.Доля,
			|	АР_СобственникиОбъектовНедвижимостиСобственники.НомерЗаписиВЕГРП,
			|	АР_СобственникиОбъектовНедвижимостиСобственники.ДатаЗаписиВЕГРП,
			|	АР_СобственникиОбъектовНедвижимостиСобственники.АгентскаяСхема,
			|	АР_СобственникиОбъектовНедвижимостиСобственники.АгентскийДоговор,
			|	АР_СобственникиОбъектовНедвижимостиСобственники.Собственник";
		
		Запрос.УстановитьПараметр("ОбъектАренды", ОбъектАренды);
		Запрос.УстановитьПараметр("Собственник",  Контрагент);
		Запрос.УстановитьПараметр("Период", Дата);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда 
			Возврат СтруктураДанных;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();			
		Выборка.Следующий(); 
		ЗаполнитьЗначенияСвойств(СтруктураДанных, Выборка);

	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

//////////////////////////////////////////////////////////////////
// Работа c периодом аренды

// Функция возвращает начало стандартного периода по выбранной дате
// Параметры:
//		Дата - исходная дата в периоде
//		ДоговорКонтрагента - договор контрагента, по которому выбираются данные о периодичности.
Функция ОпределитьНачалоПериодаОплатыПоДоговору(Дата,ДоговорКонтрагента) Экспорт
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Если ДоговорКонтрагента.АР_ВестиВзаиморасчетыПоПериодам Тогда
			Периодичность = ДоговорКонтрагента.АР_Периодичность;
		Иначе
			Периодичность = Константы.АР_ПериодНачисленияАренднойПлаты.Получить();
			Если НЕ ЗначениеЗаполнено(Периодичность) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена константа ""Период начисления арендной платы""");				
			КонецЕсли;
		КонецЕсли;
		Если Периодичность = Перечисления.Периодичность.Год Тогда
			НачалоПериода = НачалоГода(Дата);
		ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
			НачалоПериода = НачалоКвартала(Дата);
		ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
			НачалоПериода = НачалоМесяца(Дата);
		ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
			НачалоПериода = НачалоДня(Дата);
		ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
			Если Месяц(Дата)<7 Тогда
				НачалоПериода = НачалоГода(Дата);
			Иначе
				НачалоПериода = ДобавитьМесяц(НачалоГода(Дата),6);
			КонецЕсли;
		ИначеЕсли Периодичность= Перечисления.Периодичность.Неделя Тогда
			НачалоПериода = НачалоНедели(Дата);
		КонецЕсли;
		
		Возврат НачалоПериода;
	Иначе
		Возврат НачалоДня(Дата);
	КонецЕсли;
		
КонецФункции

// Функция возвращает конец стандартного периода по выбранной дате
// Параметры:
//		Дата - исходная дата в периоде
//		ДоговорКонтрагента - договор контрагента, по которому выбираются данные о периодичности.
Функция ОпределитьКонецПериодаОплатыПоДоговору(Дата,ДоговорКонтрагента) Экспорт
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Если ДоговорКонтрагента.АР_ВестиВзаиморасчетыПоПериодам Тогда
			Периодичность = ДоговорКонтрагента.АР_Периодичность;
		Иначе
			Периодичность = Константы.АР_ПериодНачисленияАренднойПлаты.Получить();
			Если НЕ ЗначениеЗаполнено(Периодичность) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена константа ""Период начисления арендной платы""");				
			КонецЕсли;
		КонецЕсли;
		Если Периодичность = Перечисления.Периодичность.Год Тогда
			КонецПериода = КонецГода(Дата);
		ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
			КонецПериода = КонецКвартала(Дата);
		ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
			КонецПериода = КонецМесяца(Дата);
		ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
			КонецПериода = КонецДня(Дата);
		ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
			КонецПериода = ?(Месяц(Дата) > 6, КонецГода(Дата), КонецМесяца(ДобавитьМесяц(НачалоГода(Дата), 5)));
		ИначеЕсли Периодичность= Перечисления.Периодичность.Неделя Тогда
			КонецПериода = КонецНедели(Дата);
		КонецЕсли;
		
		Возврат КонецПериода;
	Иначе
		Возврат КонецДня(Дата);
	КонецЕсли;
		
КонецФункции

// Фукнция добавляет стандартный период к определенной дате. Возвращает новый период
// Параметры:
//		ПериодНач - исходная дата
// 		Период - одно из перечислений (Год, Полугодие, Квартал, Месяц, Неделя, День)
// 		Количество - количество периодов
Функция ДобавитьПериод(ПериодНач,Период,Количество) Экспорт
	
	ОдинДень = 60*60*24;
	
	Если Период = Перечисления.Периодичность.Год Тогда
		Возврат ДобавитьМесяц(ПериодНач,12*Количество);
	ИначеЕсли Период = Перечисления.Периодичность.Полугодие Тогда
		Возврат ДобавитьМесяц(ПериодНач,6*Количество);
	ИначеЕсли Период = Перечисления.Периодичность.Квартал Тогда
		Возврат ДобавитьМесяц(ПериодНач,3*Количество);
	ИначеЕсли Период = Перечисления.Периодичность.Месяц Тогда
		Возврат ДобавитьМесяц(ПериодНач,1*Количество);
	ИначеЕсли Период = Перечисления.Периодичность.Неделя Тогда
		Возврат ПериодНач + ОдинДень*7*Количество;
	ИначеЕсли Период = Перечисления.Периодичность.День Тогда
		Возврат ПериодНач + ОдинДень*Количество;
	КонецЕсли;
		
КонецФункции

// Функция возвращает представление периода по периодичности договора
Функция ПолучитьПредставлениеПериода(Период, Договор, ПараметрПериодичность = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Период) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Договор) Тогда
		Если Договор.АР_ВестиВзаиморасчетыПоПериодам Тогда
			Периодичность = Договор.АР_Периодичность;
		Иначе
			Периодичность = Константы.АР_ПериодНачисленияАренднойПлаты.Получить();
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ПараметрПериодичность) Тогда
		Периодичность = ПараметрПериодичность;
	Иначе
		Периодичность = Константы.АР_ПериодНачисленияАренднойПлаты.Получить();
	КонецЕсли;
	
	Если Периодичность = Перечисления.Периодичность.Год Тогда
		НачалоПериода = НачалоГода(Период);
		КонецПериода = КонецГода(Период);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		НачалоПериода = НачалоКвартала(Период);
		КонецПериода = КонецКвартала(Период);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		НачалоПериода = НачалоМесяца(Период);
		КонецПериода = КонецМесяца(Период);
	ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
		НачалоПериода = НачалоДня(Период);
		КонецПериода = КонецДня(Период);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		Если Месяц(Период)<7 Тогда
			НачалоПериода = НачалоГода(Период);
			КонецПериода = ДобавитьМесяц(НачалоГода(Период),6) - 1;
		Иначе
			НачалоПериода = ДобавитьМесяц(НачалоГода(Период),6);
			КонецПериода = КонецГода(Период);
		КонецЕсли;
	ИначеЕсли Периодичность= Перечисления.Периодичность.Неделя Тогда
		НачалоПериода = НачалоНедели(Период);
		КонецПериода = КонецНедели(Период);
	ИначеЕсли Периодичность= Перечисления.Периодичность.Декада Тогда
		День = День(Период);
		Если День <= 10 Тогда
			НомерДекады = 1;
		ИначеЕсли День >= 11 И День <= 20 Тогда
			НомерДекады = 2;
		ИначеЕсли День >= 21 Тогда
			НомерДекады = 3;
		КонецЕсли;
		
		НачалоПериода = Дата(Год(Период), Месяц(Период), (НомерДекады - 1) * 10 + 1);
		
		Если День(Период) <= 10 Тогда
			КонецПериода = КонецДня(Дата(Год(Период), Месяц(Период), 10));
		ИначеЕсли День(Период) > 10 И День(Период) <= 20 Тогда
			КонецПериода = КонецДня(Дата(Год(Период), Месяц(Период), 20));
		Иначе
			КонецПериода = КонецМесяца(Период);
		КонецЕсли;
	КонецЕсли;

	Возврат ПредставлениеПериода(НачалоПериода, КонецПериода);
	
КонецФункции

Функция ПолучитьПредставлениеПериодаУниверсальный(Период, ИсточникПериодичности) Экспорт
	
	Если Не ЗначениеЗаполнено(Период) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ТипЗнч(ИсточникПериодичности) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Договор = ИсточникПериодичности;
		Если ЗначениеЗаполнено(Договор) Тогда
			Если Договор.АР_ВестиВзаиморасчетыПоПериодам Тогда
				Периодичность = Договор.АР_Периодичность;
			Иначе
				Периодичность = Константы.АР_ПериодНачисленияАренднойПлаты.Получить();
			КонецЕсли;
		Иначе
			Периодичность = Константы.АР_ПериодНачисленияАренднойПлаты.Получить();
		КонецЕсли;
	ИначеЕсли ТипЗнч(ИсточникПериодичности) = Тип("ПеречислениеСсылка.Периодичность") Тогда
		Периодичность = ИсточникПериодичности;
	Иначе
		Возврат "";
	КонецЕсли;

	
	Если Периодичность = Перечисления.Периодичность.Год Тогда
		НачалоПериода = НачалоГода(Период);
		КонецПериода = КонецГода(Период);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		НачалоПериода = НачалоКвартала(Период);
		КонецПериода = КонецКвартала(Период);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		НачалоПериода = НачалоМесяца(Период);
		КонецПериода = КонецМесяца(Период);
	ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
		НачалоПериода = НачалоДня(Период);
		КонецПериода = КонецДня(Период);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		Если Месяц(Период)<7 Тогда
			НачалоПериода = НачалоГода(Период);
			КонецПериода = ДобавитьМесяц(НачалоГода(Период),6) - 1;
		Иначе
			НачалоПериода = ДобавитьМесяц(НачалоГода(Период),6);
			КонецПериода = КонецГода(Период);
		КонецЕсли;
	ИначеЕсли Периодичность= Перечисления.Периодичность.Неделя Тогда
		НачалоПериода = НачалоНедели(Период);
		КонецПериода = КонецНедели(Период);
	ИначеЕсли Периодичность= Перечисления.Периодичность.Декада Тогда
		День = День(Период);
		Если День <= 10 Тогда
			НомерДекады = 1;
		ИначеЕсли День >= 11 И День <= 20 Тогда
			НомерДекады = 2;
		ИначеЕсли День >= 21 Тогда
			НомерДекады = 3;
		КонецЕсли;
		
		НачалоПериода = Дата(Год(Период), Месяц(Период), (НомерДекады - 1) * 10 + 1);
		
		Если День(Период) <= 10 Тогда
			КонецПериода = КонецДня(Дата(Год(Период), Месяц(Период), 10));
		ИначеЕсли День(Период) > 10 И День(Период) <= 20 Тогда
			КонецПериода = КонецДня(Дата(Год(Период), Месяц(Период), 20));
		Иначе
			КонецПериода = КонецМесяца(Период);
		КонецЕсли;
	Иначе
		НачалоПериода = НачалоДня(Период);
		КонецПериода = КонецДня(Период);
	КонецЕсли;

	Возврат ПредставлениеПериода(НачалоПериода, КонецПериода);
	
КонецФункции

// Функция возвращает значение константы АР_СреднийМесяц
Функция ПолучитьСреднийМесяц() Экспорт
	
	Возврат Константы.АР_СреднийМесяц.Получить();
	
КонецФункции

// Функция возвращает значение константы АР_ИспользоватьСреднийМесяц
Функция ИспользоватьСреднийМесяц() Экспорт
	
	Возврат Константы.АР_ИспользоватьСреднийМесяц.Получить();
	
КонецФункции

Функция ПолучитьКоэффициентПересчетаДней(НачалоПериода, КонецПериода, ПериодНачисления) Экспорт
	
	КоличествоВремени = (НачалоДня(КонецПериода) - НачалоДня(НачалоПериода)) / 86400 + 1; //количество дней
	
	Если ПериодНачисления = Перечисления.Периодичность.Неделя Тогда
		Коэффициент = КоличествоВремени / 7;
	ИначеЕсли ПериодНачисления = Перечисления.Периодичность.День Тогда
		Коэффициент = КоличествоВремени;
	Иначе
		Если ПериодНачисления = Перечисления.Периодичность.Месяц Тогда
			КоличествоМесяцев = 1;
		ИначеЕсли ПериодНачисления = Перечисления.Периодичность.Квартал Тогда
			КоличествоМесяцев = 3;
		ИначеЕсли ПериодНачисления = Перечисления.Периодичность.Полугодие Тогда
			КоличествоМесяцев = 6;
		ИначеЕсли ПериодНачисления = Перечисления.Периодичность.Год Тогда
			КоличествоМесяцев = 12;
		Иначе
			КоличествоМесяцев = 1;
		КонецЕсли;
			
		Если НачалоДня(НачалоПериода) = НачалоМесяца(НачалоПериода) И 
			НачалоДня(КонецПериода) = НачалоДня(КонецМесяца(НачалоПериода)) Тогда
			Коэффициент = 1/КоличествоМесяцев;
		ИначеЕсли НачалоДня(НачалоПериода) = АР_ПроцедурыНачисления.НачалоПериода(НачалоПериода, Перечисления.Периодичность.Квартал) И 
			КонецДня(КонецПериода) = АР_ПроцедурыНачисления.КонецПериода(НачалоПериода, Перечисления.Периодичность.Квартал) Тогда
			Коэффициент = 3/КоличествоМесяцев;
		ИначеЕсли НачалоДня(НачалоПериода) = АР_ПроцедурыНачисления.НачалоПериода(НачалоПериода, Перечисления.Периодичность.Полугодие) И 
			КонецДня(КонецПериода) = АР_ПроцедурыНачисления.КонецПериода(НачалоПериода, Перечисления.Периодичность.Полугодие) Тогда
			Коэффициент = 6/КоличествоМесяцев;
		ИначеЕсли НачалоДня(НачалоПериода) = НачалоГода(НачалоПериода) И 
			КонецДня(КонецПериода) = КонецГода(КонецПериода) Тогда
			Коэффициент = (Год(КонецПериода) - Год(НачалоПериода) + 1) * 12 / КоличествоМесяцев;
		Иначе
			ИспользоватьСреднийМесяц = Константы.АР_ИспользоватьСреднийМесяц.Получить();
			Если ИспользоватьСреднийМесяц Тогда
				СреднийМесяц = Константы.АР_СреднийМесяц.Получить();
				Если Не ЗначениеЗаполнено(СреднийМесяц) Тогда
					Сообщить("Не задано значение константы ""Средний месяц""!",СтатусСообщения.Важное);
					Коэффициент = 0;	
				Иначе
					Коэффициент = КоличествоВремени /(СреднийМесяц * КоличествоМесяцев);
				КонецЕсли;
			Иначе
				Коэффициент = КоличествоВремени /(День(КонецМесяца(НачалоПериода)) * КоличествоМесяцев);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Коэффициент;
	
КонецФункции

Функция ПолучитьВидПериодаПоПериодичности(Периодичность) Экспорт
	
	Если Периодичность = Перечисления.Периодичность.Год Тогда
		Возврат Перечисления.ДоступныеПериодыОтчета.Год;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		Возврат Перечисления.ДоступныеПериодыОтчета.Полугодие;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		Возврат Перечисления.ДоступныеПериодыОтчета.Квартал;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		Возврат Перечисления.ДоступныеПериодыОтчета.Месяц;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		Возврат Перечисления.ДоступныеПериодыОтчета.Неделя;
	Иначе
		Возврат Перечисления.ДоступныеПериодыОтчета.День;
	КонецЕсли;

КонецФункции

Процедура ЗаполнитьПериодПоУмолчанию(ДокументОбъект) Экспорт
	
	Периодичность = Константы.АР_ПериодНачисленияАренднойПлаты.Получить();
	ДокументОбъект.ВидПериода = ПолучитьВидПериодаПоПериодичности(Периодичность);
	ДокументОбъект.НачалоПериода = АР_ПроцедурыНачисления.НачалоПериода(ТекущаяДата(), Периодичность);
	ДокументОбъект.ОкончаниеПериода = АР_ПроцедурыНачисления.КонецПериода(ТекущаяДата(), Периодичность);
		
КонецПроцедуры

Функция ПолучитьКоэффициентПересчетаПериодов(ПериодичностьИсточник, ПериодичностьПриемник) Экспорт
	
	Источник = ПривестиПериодичностьКЕдиномуТипу(ПериодичностьИсточник);
	Приемник = ПривестиПериодичностьКЕдиномуТипу(ПериодичностьПриемник);
	
	Если Источник = Приемник Тогда 
		Возврат 1;
	КонецЕсли;
	
	ИсточникБазис = ПолучитьБазисПериодичности(Источник);
	ПриемникБазис = ПолучитьБазисПериодичности(Приемник);
	
	СчитаемВДнях = (ИсточникБазис = Перечисления.Периодичность.День) ИЛИ (ПриемникБазис = Перечисления.Периодичность.День);
	
	Возврат ПривестиПериодичностьКБазису(Приемник, СчитаемВДнях) / ПривестиПериодичностьКБазису(Источник, СчитаемВДнях);
	
КонецФункции

Функция ПривестиПериодичностьКЕдиномуТипу(Периодичность) Экспорт
	
	Если ТипЗнч(Периодичность) = Тип("ПеречислениеСсылка.Периодичность") Тогда
		Возврат Периодичность;
	ИначеЕсли ТипЗнч(Периодичность) = Тип("ПеречислениеСсылка.ДоступныеПериодыОтчета") И НЕ Периодичность = Перечисления.ДоступныеПериодыОтчета.ПроизвольныйПериод Тогда
		Возврат Перечисления.Периодичность[Строка(Периодичность)];	
	Иначе
		Возврат Перечисления.Периодичность.День;
	КонецЕсли;
	
КонецФункции	

Функция ПолучитьБазисПериодичности(Периодичность)
	
	Если Периодичность = Перечисления.Периодичность.День 
		ИЛИ Периодичность = Перечисления.Периодичность.Неделя 
		ИЛИ Периодичность = Перечисления.Периодичность.Декада Тогда
		
		Возврат Перечисления.Периодичность.День;
		
	Иначе
		
		Возврат Перечисления.Периодичность.Месяц;
		
	КонецЕсли;
	
КонецФункции

Функция ПривестиПериодичностьКБазису(Периодичность, СчитаемВДнях)
	
	Если СчитаемВДнях Тогда
		
		Если Периодичность = Перечисления.Периодичность.День Тогда
			Возврат 1;
		ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
			Возврат 7;
		ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
			Возврат 10;
		ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
			Возврат 30;
		ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
			Возврат 91;
		ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
			Возврат 182;
		ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
			Возврат 365;
		КонецЕсли;	
		
	Иначе
		
		Если Периодичность = Перечисления.Периодичность.День Тогда
			Возврат 1 / 31;
		ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
			Возврат 1 / 4;
		ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
			Возврат 1 / 3;
		ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
			Возврат 1;
		ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
			Возврат 3;
		ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
			Возврат 6;
		ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
			Возврат 12;
		КонецЕсли;	
		
	КонецЕсли;
	
КонецФункции

// Функция прибавляет к дате определенное количество дней включая/исключая рабочие дни.
Функция ДобавитьКДатеДни(Дата, КоличествоДней, УчитыватьТолькоРабочие = Ложь) Экспорт 
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Возврат Дата;
	КонецЕсли;
	
	Если УчитыватьТолькоРабочие Тогда
		
		СписокРабочихДней = Новый СписокЗначений;
		СписокРабочихДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
		СписокРабочихДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
		
		ПроизводственныйКалендарь = Константы.АР_ОсновнойПроизводственныйКалендарьАренды.Получить();
		Если Не ЗначениеЗаполнено(ПроизводственныйКалендарь) Тогда
			ПроизводственныйКалендарь = Справочники.ПроизводственныеКалендари.НайтиПоНаименованию("Российская Федерация");			
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("РабочийДень", СписокРабочихДней);
		Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(Дата));
		Запрос.УстановитьПараметр("КонецПериода", Дата + (2*КоличествоДней + 10)*24*60*60);
		Запрос.УстановитьПараметр("УчитыватьТолькоРабочие", УчитыватьТолькоРабочие);
		Запрос.УстановитьПараметр("ПроизводственныйКалендарь", ПроизводственныйКалендарь);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеПроизводственногоКалендаря.Дата КАК Дата
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
		|	И (НЕ &УчитыватьТолькоРабочие
		|			ИЛИ ДанныеПроизводственногоКалендаря.ВидДня В (&РабочийДень))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
		
		ТаблицаДанных = Запрос.Выполнить().Выгрузить();
		Если ТаблицаДанных.Количество() < КоличествоДней + 1 Тогда
			Возврат Дата;				
		КонецЕсли;
		Если КоличествоДней = 0 Тогда
			Возврат ТаблицаДанных[0].Дата;
		Иначе
			Если Дата = ТаблицаДанных[0].Дата Тогда
				Возврат ТаблицаДанных[КоличествоДней].Дата;
			Иначе
				Возврат ТаблицаДанных[КоличествоДней-1].Дата;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ОдинДень = 24*60*60;
		Возврат Дата + КоличествоДней * ОдинДень;
	КонецЕсли;
		
КонецФункции

//////////////////////////////////////////////////////////////////
// Расчет депозита

Функция ПолучитьОстатокПоДепозиту(Договор, Период)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	АР_СтавкиСрезПоследних.Регистратор КАК Регистратор,
	|	АР_СтавкиСрезПоследних.Регистратор.УчитыватьЗалог КАК УчитыватьЗалог,
	|	АР_СтавкиСрезПоследних.Регистратор.СуммаЗалога КАК СуммаЗалога,
	|	АР_СтавкиСрезПоследних.Регистратор.ВалютаДепозита КАК ВалютаДепозита,
	|	АР_СтавкиСрезПоследних.Договор.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
	|ИЗ
	|	РегистрСведений.АР_Ставки.СрезПоследних(&Период, Договор = &Договор) КАК АР_СтавкиСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	АР_СтавкиСрезПоследних.Период УБЫВ";
	
	Запрос.УстановитьПараметр("Период", ?(ЗначениеЗаполнено(Период), КонецДня(Период), Период));
	Запрос.УстановитьПараметр("Договор", Договор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если Не Выборка.УчитыватьЗалог Тогда
			Возврат 0;
		КонецЕсли;
		
		ЗапросВзаиморасчеты = Новый Запрос;
		ЗапросВзаиморасчеты.Текст =
		"ВЫБРАТЬ
		|	-АР_ВзаиморасчетыПоАрендеОбороты.СуммаОстаток КАК Сумма,
		|	-АР_ВзаиморасчетыПоАрендеОбороты.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.АР_ВзаиморасчетыПоАренде.Остатки(
		|			,
		|			ДоговорКонтрагента = &Договор
		|				И Депозит) КАК АР_ВзаиморасчетыПоАрендеОбороты";
		ЗапросВзаиморасчеты.УстановитьПараметр("Период", КонецДня(Период));
		ЗапросВзаиморасчеты.УстановитьПараметр("Договор", Договор);
		
		ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
		
		ВыборкаВзаиморасчеты = ЗапросВзаиморасчеты.Выполнить().Выбрать();
		Если ВыборкаВзаиморасчеты.Следующий() Тогда
			Если Выборка.ВалютаДепозита = ВалютаРегл Тогда
				Возврат ВыборкаВзаиморасчеты.Сумма;
			ИначеЕсли Выборка.ВалютаДепозита = Выборка.ВалютаВзаиморасчетов Тогда
				Возврат ВыборкаВзаиморасчеты.СуммаВзаиморасчетов;
			Иначе
				КурсДепозит = АР_ПроцедурыНачисленияПереопределяемый.ПолучитьКурсВалюты(Выборка.ВалютаДепозита, Период, Договор);
				Возврат ВыборкаВзаиморасчеты.Сумма/КурсДепозит;
			КонецЕсли;
		Иначе
			Возврат 0;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

// Функция предназначена для расчета суммы залога по заданному способу. 
// Параметры:
//		ДокументОбъект - передается документ-объект, из которого выбираются данные для расчета суммы залога. 
//		СпособРасчетаЗалога должен принимать значение перечисления АР_СпособРасчетаЗалога.
Функция РассчитатьЗалог(ДокументСсылка, ВалютаДепозита, СпособРасчетаЗалога, ОбъектРассчета = "Залог") Экспорт
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АР_РасторжениеДоговораАренды") Тогда
		Возврат ПолучитьОстатокПоДепозиту(ДокументСсылка.ДоговорКонтрагента, ДокументСсылка.Дата);
	КонецЕсли;		
	
	Если Не ЗначениеЗаполнено(СпособРасчетаЗалога) Тогда
		Если ОбъектРассчета = "Залог" Тогда
			ТекстСообщения = НСтр("ru = 'Не определен способ расчета залога'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Не определен способ расчета депозита'");
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокументСсылка,, "Объект", );
		Возврат 0;
	КонецЕсли; 	
	
	Если СпособРасчетаЗалога = Перечисления.АР_СпособРасчетаЗалога.СуммаОплатыПоследнегоПериодаАренды Тогда    		
		
		ИмяТаблицыДокумента = ДокументСсылка.Метаданные().Имя;
		
		//рассчитываем сумму оплаты последнего периода аренды
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПостояннаяЧасть.Услуга,
		|	ПостояннаяЧасть.ОбъектАренды,
		|	ПостояннаяЧасть.ДатаОкончанияСрокаАренды КАК ПериодКонец,
		|	ПостояннаяЧасть.ДатаОкончанияСрокаАренды КАК ДатаОкончанияАренды,
		|	ПостояннаяЧасть.Ставка КАК СтавкаСпособаНачисления,
		|	ПостояннаяЧасть.СпособНачисления,
		|	ВЫБОР 
		|		КОГДА ПостояннаяЧасть.СпособНачисления.ВариантРасчета = ЗНАЧЕНИЕ(Перечисление.АР_ВариантыРасчета.ПоСтавкеЗаОбъектВЦелом) ТОГДА
		|			1
		|		ИНАЧЕ
		|			ПостояннаяЧасть.Количество
		|	КОНЕЦ КАК Количество,
		|	ПостояннаяЧасть.Услуга.ВидСтавкиНДС КАК ВидСтавкиНДС
		|ИЗ
		|	Документ."+ИмяТаблицыДокумента+".ПостояннаяЧастьАренднойПлаты КАК ПостояннаяЧасть
		|ГДЕ
		|	ПостояннаяЧасть.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		Выборка = Запрос.Выполнить().Выбрать();

		ДанныеУчета = Новый ТаблицаЗначений;
		ДанныеУчета.Колонки.Добавить("Услуга");
		ДанныеУчета.Колонки.Добавить("ОбъектАренды");
		ДанныеУчета.Колонки.Добавить("ПериодНачало");
		ДанныеУчета.Колонки.Добавить("ПериодКонец");
		ДанныеУчета.Колонки.Добавить("ДатаНачалаАренды");
		ДанныеУчета.Колонки.Добавить("ДатаОкончанияАренды");
		ДанныеУчета.Колонки.Добавить("СтавкаСпособаНачисления");
		ДанныеУчета.Колонки.Добавить("Количество");
		ДанныеУчета.Колонки.Добавить("СпособНачисления");
		ДанныеУчета.Колонки.Добавить("СтавкаНДС");
		ДанныеУчета.Колонки.Добавить("Сумма");
		ДанныеУчета.Колонки.Добавить("Цена");
		ДанныеУчета.Колонки.Добавить("СуммаНДС");
		ДанныеУчета.Колонки.Добавить("КоличествоДней");
		
		СтруктураКурсаДокумента = АР_ПроцедурыНачисления.ПолучитьКурсВалюты(ВалютаДепозита, ДокументСсылка.Дата, ДокументСсылка.ДоговорКонтрагента);
		Пока Выборка.Следующий() Цикл
		
			СтрокаТаб = ДанныеУчета.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаб, Выборка);
			СтавкаНДС = Перечисления.СтавкиНДС.СтавкаНДС(Выборка.ВидСтавкиНДС, ДокументСсылка.Дата);
			Если Не ЗначениеЗаполнено(СтавкаНДС) Тогда
				СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			КонецЕсли;
			СтрокаТаб.СтавкаНДС = СтавкаНДС;
			СтрокаТаб.ПериодНачало = ОпределитьНачалоПериодаОплатыПоДоговору(СтрокаТаб.ПериодКонец, ДокументСсылка.ДоговорКонтрагента);
			СтрокаТаб.ДатаНачалаАренды = СтрокаТаб.ПериодНачало;
			ДнейВАренде = (НачалоДня(СтрокаТаб.ПериодКонец) - НачалоДня(СтрокаТаб.ПериодНачало)) / 86400 + 1;
			Если НЕ ОпределитьКонецПериодаОплатыПоДоговору(СтрокаТаб.ПериодКонец, ДокументСсылка.ДоговорКонтрагента) = КонецДня(СтрокаТаб.ПериодКонец) Тогда
				ПериодКонец = НачалоДня(СтрокаТаб.ПериодНачало) - 1;
				ПериодНачало = ОпределитьНачалоПериодаОплатыПоДоговору(ПериодКонец, ДокументСсылка.ДоговорКонтрагента);
				Если (НачалоДня(ПериодКонец) - ПериодНачало) / 86400 + 1 > ДнейВАренде Тогда
					СтрокаТаб.ДатаНачалаАренды	   = ПериодНачало;
					СтрокаТаб.ПериодНачало 		   = ПериодНачало;
					СтрокаТаб.ДатаОкончанияАренды  = ПериодКонец;
					СтрокаТаб.ПериодКонец 	   	   = ПериодКонец;
				КонецЕсли;
			КонецЕсли;
			СтрокаТаб.СтавкаСпособаНачисления = ПолучитьСтавку(СтрокаТаб.СтавкаСпособаНачисления);
			
		КонецЦикла;	
		
		//необходимо разбить все периоды по периодам договора или периодам способа начисления
		НомерСтроки = 0;
		Пока НомерСтроки < ДанныеУчета.Количество() Цикл
			СтрокаТаб = ДанныеУчета[НомерСтроки];
			Если ДокументСсылка.ДоговорКонтрагента.АР_ВестиВзаиморасчетыПоПериодам Тогда
				Периодичность = ДокументСсылка.ДоговорКонтрагента.АР_Периодичность;
			Иначе
				Периодичность = СтрокаТаб.СпособНачисления.ПериодНачисления;
				Если Не ЗначениеЗаполнено(Периодичность) Тогда
					Периодичность = Константы.АР_ПериодНачисленияАренднойПлаты.Получить();
				КонецЕсли;
			КонецЕсли;
			
			// Если периодичность больше месяца, то разобъем по месяцам
			// кроме случа Периодичность = Год и период начисления - календарный год или несколько
			Если Периодичность = Перечисления.Периодичность.Год
				И СтрокаТаб.ПериодНачало= НачалоГода(СтрокаТаб.ПериодНачало)
				И КонецДня(СтрокаТаб.ПериодКонец) = КонецГода(СтрокаТаб.ПериодКонец) Тогда
			ИначеЕсли (Периодичность = Перечисления.Периодичность.Год ИЛИ Периодичность = Перечисления.Периодичность.Полугодие)
				И СтрокаТаб.ПериодНачало= АР_ПроцедурыНачисления.НачалоПериода(СтрокаТаб.ПериодНачало, Перечисления.Периодичность.Полугодие)
				И КонецДня(СтрокаТаб.ПериодКонец) = АР_ПроцедурыНачисления.КонецПериода(СтрокаТаб.ПериодКонец, Перечисления.Периодичность.Полугодие) Тогда
				Периодичность = Перечисления.Периодичность.Полугодие;
			ИначеЕсли (Периодичность = Перечисления.Периодичность.Год ИЛИ Периодичность = Перечисления.Периодичность.Полугодие ИЛИ Периодичность = Перечисления.Периодичность.Квартал)
				И СтрокаТаб.ПериодНачало= АР_ПроцедурыНачисления.НачалоПериода(СтрокаТаб.ПериодНачало, Перечисления.Периодичность.Квартал)
				И КонецДня(СтрокаТаб.ПериодКонец) = АР_ПроцедурыНачисления.КонецПериода(СтрокаТаб.ПериодКонец, Перечисления.Периодичность.Квартал) Тогда
				Периодичность = Перечисления.Периодичность.Квартал;
			ИначеЕсли Не (Периодичность = Перечисления.Периодичность.День ИЛИ Периодичность = Перечисления.Периодичность.Неделя) Тогда
				Периодичность = Перечисления.Периодичность.Месяц;
			КонецЕсли;
			
			Если АР_ПроцедурыНачисления.НачалоПериода(СтрокаТаб.ПериодНачало, Периодичность) < АР_ПроцедурыНачисления.НачалоПериода(СтрокаТаб.ПериодКонец, Периодичность) Тогда
				НоваяСтрокаТаб = ДанныеУчета.Вставить(НомерСтроки + 1);
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТаб, СтрокаТаб);
				СтрокаТаб.ПериодКонец = АР_ПроцедурыНачисления.КонецПериода(СтрокаТаб.ПериодНачало, Периодичность);
				НоваяСтрокаТаб.ПериодНачало = АР_ПроцедурыНачисления.КонецПериода(СтрокаТаб.ПериодНачало, Периодичность) + 1;
			КонецЕсли;
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
		АР_ПроцедурыНачисления.РассчитатьСуммуНачисления(ДанныеУчета);
		Для Каждого СтрокаТаб Из ДанныеУчета Цикл
			Если СтрокаТаб.СпособНачисления.Валюта <> ВалютаДепозита Тогда
				СтруктураКурсаСтроки = АР_ПроцедурыНачисления.ПолучитьКурсВалюты(СтрокаТаб.СпособНачисления.Валюта, ДокументСсылка.Дата, ДокументСсылка.ДоговорКонтрагента);
				СтрокаТаб.Сумма = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаб.Сумма,
							СтрокаТаб.СпособНачисления.Валюта, ВалютаДепозита,
							СтруктураКурсаСтроки.Курс, СтруктураКурсаДокумента.Курс,
							СтруктураКурсаСтроки.Кратность, СтруктураКурсаДокумента.Кратность);
			КонецЕсли;		
		КонецЦикла;
		СуммаЗалога = ДанныеУчета.Итог("Сумма");
		Возврат СуммаЗалога;
			
	ИначеЕсли СпособРасчетаЗалога<>Перечисления.АР_СпособРасчетаЗалога.ФиксированнойСуммой Тогда
		ТекстСообщения = НСтр("ru = 'Данный способ расчета в программе не поддерживается'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокументСсылка,, "Объект", );
		Возврат 0;
	КонецЕсли;
		
КонецФункции

//////////////////////////////////////////////////////////////////
// Формирование движений документов

// Процедура формирует движения документа по указанному регистру
Процедура СформироватьДвиженияПоРегистру(ТаблицаДанных, Движения, ИмяРегистра, Отказ) Экспорт
	
	Если ТаблицаДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТаб Из ТаблицаДанных Цикл
		
		НоваяСтрока = Движения[ИмяРегистра].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаб);
		
	КонецЦикла;
	
	Движения[ИмяРегистра].Записывать = Истина;
	
КонецПроцедуры

// Процедура формирует проводки по регистру "Хозрасчетный"
Процедура СформироватьДвиженияПроводки(Проводки, Движения, Отказ) Экспорт
	
	Если Проводки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТаб Из Проводки Цикл
		
		Проводка = Движения.Хозрасчетный.Добавить();
		ЗаполнитьЗначенияСвойств(Проводка, СтрокаТаб);
		Если ЗначениеЗаполнено(Проводка.СчетДт) Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаб.СубконтоКонтрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаб.СубконтоОсновноеСредство);
		ИначеЕсли ЗначениеЗаполнено(Проводка.СчетКт) Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТаб.СубконтоКонтрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТаб.СубконтоОсновноеСредство);
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

// Процедура формирует движения по зачету авансов по регистру "Взаиморасчеты по аренде"
Процедура СформироватьДвиженияЗачетАвансов(ТаблицаВзаиморасчетов, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если ТаблицаВзаиморасчетов = Неопределено
		ИЛИ ТаблицаРеквизиты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Возврат; //СВД
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	// В НУ оценка доходов и расходов осуществляется по курсу авансов начиная с 01.01.2010.
	НУПоКурсуАвансов = ('20100101' <= Реквизиты.Период);
		      
	Для каждого СтрокаВзаиморасчетов Из ТаблицаВзаиморасчетов Цикл
		Если СтрокаВзаиморасчетов.ДокументРасчетов <> Реквизиты.Регистратор Тогда
			
			Если НЕ СтрокаВзаиморасчетов.ДоговорКонтрагента.АР_АрендныйДоговор Тогда
				Продолжить;
			КонецЕсли;
			
			// Зачет аванса
			Движение                     = Движения.АР_ВзаиморасчетыПоАренде.ДобавитьРасход();
			Движение.Период              = Реквизиты.Период;
			Движение.Организация         = Реквизиты.Организация;
			Движение.Контрагент          = СтрокаВзаиморасчетов.Контрагент;
			Движение.ДоговорКонтрагента  = СтрокаВзаиморасчетов.ДоговорКонтрагента;
			Движение.ПериодАренды        = СтрокаВзаиморасчетов.ПериодАренды;
			Движение.ОбъектАренды        = СтрокаВзаиморасчетов.ОбъектАренды;
			Движение.УслугаАренды        = СтрокаВзаиморасчетов.УслугаАренды;
			Движение.СчетНаАренду        = СтрокаВзаиморасчетов.СчетНаАренду;
			Движение.ДокументРасчетов    = СтрокаВзаиморасчетов.ДокументРасчетов;
			Движение.Валюта              = СтрокаВзаиморасчетов.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			Движение.ЗачетАванса         = Истина;
			Движение.Депозит             = СтрокаВзаиморасчетов.Депозит;
			Движение.Пени                = СтрокаВзаиморасчетов.Пени;
			Если СтрокаВзаиморасчетов.РасчетыВВалюте
				И НЕ Реквизиты.ЭтоВозврат Тогда
				Движение.Сумма = - СтрокаВзаиморасчетов.СуммаРубПоКурсуАванса;
			Иначе
				Движение.Сумма = - СтрокаВзаиморасчетов.СуммаРуб;
			КонецЕсли;
			Движение.СуммаВзаиморасчетов = - СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
			Если (СтрокаВзаиморасчетов.РасчетыВУсловныхЕдиницах ИЛИ НУПоКурсуАвансов)
				И НЕ Реквизиты.ЭтоВозврат Тогда
				Движение.СуммаНУ = - СтрокаВзаиморасчетов.СуммаРубПоКурсуАванса;
			Иначе
				Движение.СуммаНУ = - СтрокаВзаиморасчетов.СуммаРуб;
			КонецЕсли;
			Если Реквизиты.ЭтоПени Тогда
				Движение.ДатаРасчетаПени = Реквизиты.Период;
			КонецЕсли;
			
			Движение                     = Движения.АР_ВзаиморасчетыПоАренде.ДобавитьРасход();
			Движение.Период              = Реквизиты.Период;
			Движение.Организация         = Реквизиты.Организация;
			Движение.Контрагент          = СтрокаВзаиморасчетов.Контрагент;
			Движение.ДоговорКонтрагента  = СтрокаВзаиморасчетов.ДоговорКонтрагента;
			Движение.ПериодАренды        = СтрокаВзаиморасчетов.ПериодАрендыДокумент;
			Движение.ОбъектАренды        = СтрокаВзаиморасчетов.ОбъектАрендыДокумент;
			Движение.УслугаАренды        = СтрокаВзаиморасчетов.УслугаАрендыДокумент;
			Движение.СчетНаАренду        = СтрокаВзаиморасчетов.СчетНаАрендуДокумент;
			Движение.ДокументРасчетов    = ?(ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.КорректировкаРеализации"), Реквизиты.ДокументРеализацииСсылка, Реквизиты.Регистратор);
			Движение.Валюта              = СтрокаВзаиморасчетов.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			Движение.Депозит             = Ложь;
			Движение.Пени                = Реквизиты.ЭтоПени;
			Движение.ЗачетАванса         = Истина;
			Если СтрокаВзаиморасчетов.РасчетыВВалюте
				И НЕ Реквизиты.ЭтоВозврат Тогда
				Движение.Сумма = СтрокаВзаиморасчетов.СуммаРубПоКурсуАванса;
			Иначе
				Движение.Сумма = СтрокаВзаиморасчетов.СуммаРуб;
			КонецЕсли;
			Движение.СуммаВзаиморасчетов = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
			Если (СтрокаВзаиморасчетов.РасчетыВУсловныхЕдиницах ИЛИ НУПоКурсуАвансов)
				И НЕ Реквизиты.ЭтоВозврат Тогда
				Движение.СуммаНУ = СтрокаВзаиморасчетов.СуммаРубПоКурсуАванса;
			Иначе
				Движение.СуммаНУ = СтрокаВзаиморасчетов.СуммаРуб;
			КонецЕсли;
			Движение.ДокументОплаты      = СтрокаВзаиморасчетов.ДокументРасчетов;
			Если Реквизиты.ЭтоПени Тогда
				Движение.ДатаРасчетаПени = Реквизиты.Период;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
		
	Движения.АР_ВзаиморасчетыПоАренде.Записывать = Истина;

КонецПроцедуры

// Процедура формирует движения по выделению авансов по регистру "Взаиморасчеты по аренде"
Процедура СформироватьДвиженияРеализацияВозврат(ТаблицаСторно, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если ТаблицаСторно = Неопределено
		ИЛИ ТаблицаРеквизиты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Возврат; //СВД
	
	Реквизиты = ТаблицаРеквизиты[0];
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	      
	Для каждого СтрокаВзаиморасчетов Из ТаблицаСторно Цикл
		
		Если НЕ Реквизиты.ДоговорКонтрагента.АР_АрендныйДоговор Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументРеализации = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументРеализации(Реквизиты.Регистратор, Истина);
		
		// Сторно начисления
		Движение						= Движения.АР_ВзаиморасчетыПоАренде.ДобавитьПриход();
		Движение.Период					= Реквизиты.Период;
		Движение.Организация			= Реквизиты.Организация;
		Движение.Контрагент				= СтрокаВзаиморасчетов.Контрагент;
		Движение.ДоговорКонтрагента		= Реквизиты.ДоговорКонтрагента;
		Движение.ПериодАренды			= СтрокаВзаиморасчетов.ПериодАренды;
		Движение.ОбъектАренды			= СтрокаВзаиморасчетов.ОбъектАренды;
		Движение.УслугаАренды			= СтрокаВзаиморасчетов.УслугаАренды;
		Движение.СчетНаАренду			= СтрокаВзаиморасчетов.СчетНаАренду;
		Движение.ДокументРасчетов		= Реквизиты.ДокументРеализации;
		Движение.Валюта					= Реквизиты.ВалютаВзаиморасчетов;
		Движение.Депозит				= Ложь;
		Движение.Пени					= Реквизиты.ЭтоПени;
		Движение.Сумма					= СтрокаВзаиморасчетов.СуммаРуб;
		Движение.СуммаВзаиморасчетов	= СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
		Если ОтражатьВНалоговомУчете Тогда
			Движение.СуммаНУ			= СтрокаВзаиморасчетов.СуммаРуб;
		КонецЕсли;
		
	КонецЦикла;
		
	Движения.АР_ВзаиморасчетыПоАренде.Записывать = Истина;

КонецПроцедуры

// Процедура формирует движения по зачету авансов по регистру "Взаиморасчеты по аренде"
Процедура СформироватьДвиженияВыделениеАвансов(ТаблицаВзаиморасчетов, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если ТаблицаВзаиморасчетов = Неопределено
		ИЛИ ТаблицаРеквизиты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	// В НУ оценка доходов и расходов осуществляется по курсу авансов начиная с 01.01.2010.
	НУПоКурсуАвансов = ('20100101' <= Реквизиты.Период);
		      
	Для каждого СтрокаВзаиморасчетов Из ТаблицаВзаиморасчетов Цикл
		Если СтрокаВзаиморасчетов.ДокументРасчетов = Реквизиты.Регистратор Тогда
			
			Если НЕ СтрокаВзаиморасчетов.ДоговорКонтрагента.АР_АрендныйДоговор Тогда
				Продолжить;
			КонецЕсли;
			
			// Зачет аванса
			Движение                     = Движения.АР_ВзаиморасчетыПоАренде.ДобавитьРасход();
			Движение.Период              = Реквизиты.Период;
			Движение.Организация         = Реквизиты.Организация;
			Движение.Контрагент          = СтрокаВзаиморасчетов.Контрагент;
			Движение.ДоговорКонтрагента  = СтрокаВзаиморасчетов.ДоговорКонтрагента;
			Движение.ПериодАренды        = СтрокаВзаиморасчетов.ПериодАренды;
			Движение.ОбъектАренды        = СтрокаВзаиморасчетов.ОбъектАренды;
			Движение.УслугаАренды        = СтрокаВзаиморасчетов.УслугаАренды;
			Движение.СчетНаАренду        = СтрокаВзаиморасчетов.СчетНаАренду;
			Движение.ДокументРасчетов    = СтрокаВзаиморасчетов.ДокументРасчетов;
			Движение.Валюта              = СтрокаВзаиморасчетов.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			Движение.ЗачетАванса         = Истина;
			Движение.Депозит             = Ложь;
			Движение.Пени                = Ложь; //СтрокаВзаиморасчетов.Пени;
			Если СтрокаВзаиморасчетов.РасчетыВВалюте
				И НЕ Реквизиты.ЭтоВозврат Тогда
				Движение.Сумма = СтрокаВзаиморасчетов.СуммаРубПоКурсуАванса;
			Иначе
				Движение.Сумма = СтрокаВзаиморасчетов.СуммаРуб;
			КонецЕсли;
			Движение.СуммаВзаиморасчетов = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
			Если (СтрокаВзаиморасчетов.РасчетыВУсловныхЕдиницах ИЛИ НУПоКурсуАвансов)
				И НЕ Реквизиты.ЭтоВозврат Тогда
				Движение.СуммаНУ = СтрокаВзаиморасчетов.СуммаРубПоКурсуАванса;
			Иначе
				Движение.СуммаНУ = СтрокаВзаиморасчетов.СуммаРуб;
			КонецЕсли;
			Если Реквизиты.ЭтоПени Тогда
				Движение.ДатаРасчетаПени = Реквизиты.Период;
			КонецЕсли;
			
			Движение                     = Движения.АР_ВзаиморасчетыПоАренде.ДобавитьРасход();
			Движение.Период              = Реквизиты.Период;
			Движение.Организация         = Реквизиты.Организация;
			Движение.Контрагент          = СтрокаВзаиморасчетов.Контрагент;
			Движение.ДоговорКонтрагента  = СтрокаВзаиморасчетов.ДоговорКонтрагента;
			Движение.ПериодАренды        = СтрокаВзаиморасчетов.ПериодАренды;
			Движение.ОбъектАренды        = СтрокаВзаиморасчетов.ОбъектАренды;
			Движение.УслугаАренды        = СтрокаВзаиморасчетов.УслугаАренды;
			Движение.СчетНаАренду        = СтрокаВзаиморасчетов.СчетНаАренду;
			Движение.ДокументРасчетов    = ?(ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.КорректировкаРеализации"), Реквизиты.ДокументРеализацииСсылка, Реквизиты.Регистратор);
			Движение.Валюта              = СтрокаВзаиморасчетов.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			Движение.Депозит             = Ложь;
			Движение.Пени                = Реквизиты.ЭтоПени;
			Движение.ЗачетАванса         = Истина;
			Если СтрокаВзаиморасчетов.РасчетыВВалюте
				И НЕ Реквизиты.ЭтоВозврат Тогда
				Движение.Сумма = - СтрокаВзаиморасчетов.СуммаРубПоКурсуАванса;
			Иначе
				Движение.Сумма = - СтрокаВзаиморасчетов.СуммаРуб;
			КонецЕсли;
			Движение.СуммаВзаиморасчетов = - СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
			Если (СтрокаВзаиморасчетов.РасчетыВУсловныхЕдиницах ИЛИ НУПоКурсуАвансов)
				И НЕ Реквизиты.ЭтоВозврат Тогда
				Движение.СуммаНУ = - СтрокаВзаиморасчетов.СуммаРубПоКурсуАванса;
			Иначе
				Движение.СуммаНУ = - СтрокаВзаиморасчетов.СуммаРуб;
			КонецЕсли;
			Движение.ДокументОплаты      = СтрокаВзаиморасчетов.ДокументРасчетов;
			Если Реквизиты.ЭтоПени Тогда
				Движение.ДатаРасчетаПени = Реквизиты.Период;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
		
	Движения.АР_ВзаиморасчетыПоАренде.Записывать = Истина;

КонецПроцедуры

// Процедура формирует движения по зачету авансов по регистру "Взаиморасчеты по аренде"
Процедура СформироватьДвиженияРеализация(ТаблицаДокумента, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если ТаблицаДокумента = Неопределено
		ИЛИ ТаблицаРеквизиты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Возврат; //СВД
	
	Реквизиты = ТаблицаРеквизиты[0];
	ОтражатьВНалоговомУчете  = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	      	
	Для Каждого СтрокаТаб Из ТаблицаДокумента Цикл
		
		Если НЕ Реквизиты.Регистратор.ДоговорКонтрагента.АР_АрендныйДоговор Тогда
			Продолжить;
		КонецЕсли;
		
		Движение                     = Движения.АР_ВзаиморасчетыПоАренде.ДобавитьПриход();
		Движение.Период              = Реквизиты.Период;
		Движение.Организация         = Реквизиты.Организация;
		Движение.Контрагент          = Реквизиты.Регистратор.Контрагент;
		Движение.ДоговорКонтрагента  = Реквизиты.Регистратор.ДоговорКонтрагента;
		Движение.ПериодАренды        = СтрокаТаб.ПериодАренды;
		Движение.ОбъектАренды        = СтрокаТаб.ОбъектАренды;
		Движение.УслугаАренды        = СтрокаТаб.УслугаАренды;
		Движение.СчетНаАренду        = СтрокаТаб.СчетНаАренду;
		Движение.ДокументРасчетов    = ?(ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.КорректировкаРеализации"), Реквизиты.ДокументРеализации, Реквизиты.Регистратор);
		Движение.Валюта              = СтрокаТаб.ВалютаВзаиморасчетов;
		Движение.Депозит             = Ложь;
		Движение.Пени                = Реквизиты.ЭтоПени;
		Движение.ЗачетАванса         = Ложь;
		Движение.Сумма               = СтрокаТаб.СуммаБУ;
		Движение.СуммаВзаиморасчетов = СтрокаТаб.СуммаВзаиморасчетов;
		Если ОтражатьВНалоговомУчете Тогда
			Движение.СуммаНУ = СтрокаТаб.СуммаНУ;
		КонецЕсли;
		Если Реквизиты.ЭтоПени Тогда
			Движение.ДатаРасчетаПени = Реквизиты.Период;
		КонецЕсли;
	КонецЦикла;
	
	Движения.АР_ВзаиморасчетыПоАренде.Записывать = Истина;

КонецПроцедуры

// Процедура формирует движения по зачету авансов по регистру "Взаиморасчеты по аренде"
Процедура СформироватьДвиженияПогашениеЗадолженности(ТаблицаВзаиморасчетов, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если Не Реквизиты.ЭтоАренда Тогда
		Возврат;
	КонецЕсли;
	
	Возврат; //СВД
	
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ЗнакСуммы = ?(Реквизиты.ЭтоВозврат, -1, 1);
	
	Для каждого СтрокаВзаиморасчетов Из ТаблицаВзаиморасчетов Цикл
		
		Если НЕ СтрокаВзаиморасчетов.ДоговорКонтрагента.АР_АрендныйДоговор Тогда
			Продолжить;
		КонецЕсли;
		
		Движение                     = Движения.АР_ВзаиморасчетыПоАренде.ДобавитьРасход();
		Движение.Период              = Реквизиты.Период;
		Движение.Организация         = Реквизиты.Организация;
		Движение.Контрагент          = СтрокаВзаиморасчетов.Контрагент;
		Движение.ДоговорКонтрагента  = СтрокаВзаиморасчетов.ДоговорКонтрагента;
		Движение.ПериодАренды        = СтрокаВзаиморасчетов.ПериодАренды;
		Движение.ОбъектАренды        = СтрокаВзаиморасчетов.ОбъектАренды;
		Движение.УслугаАренды        = СтрокаВзаиморасчетов.УслугаАренды;
		Движение.СчетНаАренду        = СтрокаВзаиморасчетов.СчетНаАренду;
		Движение.ДокументРасчетов    = СтрокаВзаиморасчетов.ДокументРасчетов;
		Движение.Валюта              = СтрокаВзаиморасчетов.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		Движение.ЗачетАванса         = Ложь;
		Движение.Депозит             = СтрокаВзаиморасчетов.Депозит;
		Движение.Пени                = СтрокаВзаиморасчетов.Пени;
		Движение.Сумма               = ЗнакСуммы * СтрокаВзаиморасчетов.СуммаБУ;
		Движение.СуммаВзаиморасчетов = ЗнакСуммы * СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
		Если ОтражатьВНалоговомУчете Тогда
			Движение.СуммаНУ = СтрокаВзаиморасчетов.СуммаНУ;
		КонецЕсли;
		Движение.ДокументОплаты      = Реквизиты.Регистратор;
		
	КонецЦикла;
		
	Движения.АР_ВзаиморасчетыПоАренде.Записывать = Истина;

КонецПроцедуры

Процедура СвернутьСформированныеПроводки(Проводки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Проводки", Проводки.Выгрузить());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Проводки.Период,
	|	Проводки.СчетДт,
	|	Проводки.СубконтоДт1,
	|	Проводки.ВидСубконтоДт1,
	|	Проводки.СубконтоДт2,
	|	Проводки.ВидСубконтоДт2,
	|	Проводки.СубконтоДт3,
	|	Проводки.ВидСубконтоДт3,
	|	Проводки.СчетКт,
	|	Проводки.СубконтоКт1,
	|	Проводки.ВидСубконтоКт1,
	|	Проводки.СубконтоКт2,
	|	Проводки.ВидСубконтоКт2,
	|	Проводки.СубконтоКт3,
	|	Проводки.ВидСубконтоКт3,
	|	Проводки.Организация,
	|	Проводки.ПодразделениеДт,
	|	Проводки.ПодразделениеКт,
	|	Проводки.ВалютаДт,
	|	Проводки.ВалютаКт,
	|	Проводки.Сумма КАК Сумма,
	|	Проводки.ВалютнаяСуммаДт КАК ВалютнаяСуммаДт,
	|	Проводки.ВалютнаяСуммаКт КАК ВалютнаяСуммаКт,
	|	Проводки.КоличествоДт КАК КоличествоДт,
	|	Проводки.КоличествоКт КАК КоличествоКт,
	|	Проводки.СуммаНУДт,
	|	Проводки.СуммаНУКт,
	|	Проводки.СуммаПРДт,
	|	Проводки.СуммаПРКт,
	|	Проводки.СуммаВРДт,
	|	Проводки.СуммаВРКт,
	|	Проводки.Содержание,
	|	Проводки.НеКорректироватьСтоимостьАвтоматически
	|ПОМЕСТИТЬ ВТПроводки
	|ИЗ
	|	&Проводки КАК Проводки";
	Запрос.Выполнить();
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВТПроводки.Период,
	|	ВТПроводки.СчетДт,
	|	ВТПроводки.СубконтоДт1,
	|	ВТПроводки.ВидСубконтоДт1,
	|	ВТПроводки.СубконтоДт2,
	|	ВТПроводки.ВидСубконтоДт2,
	|	ВТПроводки.СубконтоДт3,
	|	ВТПроводки.ВидСубконтоДт3,
	|	ВТПроводки.СчетКт,
	|	ВТПроводки.СубконтоКт1,
	|	ВТПроводки.ВидСубконтоКт1,
	|	ВТПроводки.СубконтоКт2,
	|	ВТПроводки.ВидСубконтоКт2,
	|	ВТПроводки.СубконтоКт3,
	|	ВТПроводки.ВидСубконтоКт3,
	|	ВТПроводки.Организация,
	|	ВТПроводки.ПодразделениеДт,
	|	ВТПроводки.ПодразделениеКт,
	|	ВТПроводки.ВалютаДт,
	|	ВТПроводки.ВалютаКт,
	|	СУММА(ВТПроводки.Сумма) КАК Сумма,
	|	СУММА(ВТПроводки.ВалютнаяСуммаДт) КАК ВалютнаяСуммаДт,
	|	СУММА(ВТПроводки.ВалютнаяСуммаКт) КАК ВалютнаяСуммаКт,
	|	СУММА(ВТПроводки.КоличествоДт) КАК КоличествоДт,
	|	СУММА(ВТПроводки.КоличествоКт) КАК КоличествоКт,
	|	СУММА(ВТПроводки.СуммаНУДт) КАК СуммаНУДт,
	|	СУММА(ВТПроводки.СуммаНУКт) КАК СуммаНУКт,
	|	СУММА(ВТПроводки.СуммаПРДт) КАК СуммаПРДт,
	|	СУММА(ВТПроводки.СуммаПРКт) КАК СуммаПРКт,
	|	СУММА(ВТПроводки.СуммаВРДт) КАК СуммаВРДт,
	|	СУММА(ВТПроводки.СуммаВРКт) КАК СуммаВРКт,
	|	ВТПроводки.Содержание,
	|	ВТПроводки.НеКорректироватьСтоимостьАвтоматически
	|ИЗ
	|	ВТПроводки КАК ВТПроводки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТПроводки.Период,
	|	ВТПроводки.СчетДт,
	|	ВТПроводки.СубконтоДт1,
	|	ВТПроводки.ВидСубконтоДт1,
	|	ВТПроводки.СубконтоДт2,
	|	ВТПроводки.ВидСубконтоДт2,
	|	ВТПроводки.СубконтоДт3,
	|	ВТПроводки.ВидСубконтоДт3,
	|	ВТПроводки.СчетКт,
	|	ВТПроводки.СубконтоКт1,
	|	ВТПроводки.ВидСубконтоКт1,
	|	ВТПроводки.СубконтоКт2,
	|	ВТПроводки.ВидСубконтоКт2,
	|	ВТПроводки.СубконтоКт3,
	|	ВТПроводки.ВидСубконтоКт3,
	|	ВТПроводки.Организация,
	|	ВТПроводки.ПодразделениеДт,
	|	ВТПроводки.ПодразделениеКт,
	|	ВТПроводки.ВалютаДт,
	|	ВТПроводки.ВалютаКт,
	|	ВТПроводки.Содержание,
	|	ВТПроводки.НеКорректироватьСтоимостьАвтоматически";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Проводки.Очистить();
	Пока Выборка.Следующий() Цикл
		Проводка = Проводки.Добавить();
		ЗаполнитьЗначенияСвойств(Проводка, Выборка);
		Если Выборка.СубконтоДт1 <> Неопределено Тогда
			Проводка.СубконтоДт.Вставить(Выборка.ВидСубконтоДт1, Выборка.СубконтоДт1);
		КонецЕсли;
		Если Выборка.СубконтоДт2 <> Неопределено Тогда
			Проводка.СубконтоДт.Вставить(Выборка.ВидСубконтоДт2, Выборка.СубконтоДт2);
		КонецЕсли;
		Если Выборка.СубконтоДт3 <> Неопределено Тогда
			Проводка.СубконтоДт.Вставить(Выборка.ВидСубконтоДт3, Выборка.СубконтоДт3);
		КонецЕсли;
		Если Выборка.СубконтоКт1 <> Неопределено Тогда
			Проводка.СубконтоКт.Вставить(Выборка.ВидСубконтоКт1, Выборка.СубконтоКт1);
		КонецЕсли;
		Если Выборка.СубконтоКт2 <> Неопределено Тогда
			Проводка.СубконтоКт.Вставить(Выборка.ВидСубконтоКт2, Выборка.СубконтоКт2);
		КонецЕсли;
		Если Выборка.СубконтоКт3 <> Неопределено Тогда
			Проводка.СубконтоКт.Вставить(Выборка.ВидСубконтоКт3, Выборка.СубконтоКт3);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

Процедура СвернутьСформированныеВзаиморасчетыПоАренде(Движения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Движения", Движения.Выгрузить());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Движения.Период,
	|	Движения.Регистратор,
	|	Движения.НомерСтроки,
	|	Движения.Активность,
	|	Движения.ВидДвижения,
	|	Движения.Организация,
	|	Движения.Контрагент,
	|	Движения.ДоговорКонтрагента,
	|	Движения.УслугаАренды,
	|	Движения.ОбъектАренды,
	|	Движения.СчетНаАренду,
	|	Движения.ПериодАренды,
	|	Движения.Депозит,
	|	Движения.ДокументРасчетов,
	|	Движения.Валюта,
	|	Движения.Пени,
	|	Движения.Сумма,
	|	Движения.СуммаВзаиморасчетов,
	|	Движения.СуммаНУ,
	|	Движения.ЗачетАванса,
	|	Движения.ДатаРасчетаПени,
	|	Движения.ДокументОплаты
	|ПОМЕСТИТЬ ВТ_Движения
	|ИЗ
	|	&Движения КАК Движения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Движения.Период,
	|	ВТ_Движения.Регистратор,
	|	ВТ_Движения.Активность,
	|	ВТ_Движения.ВидДвижения,
	|	ВТ_Движения.Организация,
	|	ВТ_Движения.Контрагент,
	|	ВТ_Движения.ДоговорКонтрагента,
	|	ВТ_Движения.УслугаАренды,
	|	ВТ_Движения.ОбъектАренды,
	|	ВТ_Движения.СчетНаАренду,
	|	ВТ_Движения.ПериодАренды,
	|	ВТ_Движения.Депозит,
	|	ВТ_Движения.ДокументРасчетов,
	|	ВТ_Движения.Валюта,
	|	ВТ_Движения.Пени,
	|	СУММА(ВТ_Движения.Сумма) КАК Сумма,
	|	СУММА(ВТ_Движения.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	СУММА(ВТ_Движения.СуммаНУ) КАК СуммаНУ,
	|	ВТ_Движения.ЗачетАванса,
	|	ВТ_Движения.ДатаРасчетаПени,
	|	ВТ_Движения.ДокументОплаты
	|ИЗ
	|	ВТ_Движения КАК ВТ_Движения
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Движения.ОбъектАренды,
	|	ВТ_Движения.Период,
	|	ВТ_Движения.Организация,
	|	ВТ_Движения.Контрагент,
	|	ВТ_Движения.ДоговорКонтрагента,
	|	ВТ_Движения.Регистратор,
	|	ВТ_Движения.СчетНаАренду,
	|	ВТ_Движения.ДатаРасчетаПени,
	|	ВТ_Движения.Активность,
	|	ВТ_Движения.ПериодАренды,
	|	ВТ_Движения.ВидДвижения,
	|	ВТ_Движения.ДокументОплаты,
	|	ВТ_Движения.УслугаАренды,
	|	ВТ_Движения.ЗачетАванса,
	|	ВТ_Движения.Пени,
	|	ВТ_Движения.Валюта,
	|	ВТ_Движения.Депозит,
	|	ВТ_Движения.ДокументРасчетов";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Движения.Очистить();
	Пока Выборка.Следующий() Цикл
		Движение = Движения.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Выборка);
	КонецЦикла;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////
// Прочие процедуры

Процедура СоздатьСчетНаАренду(Основание, ВидОперации, ПостояннаяЧастьОплаты, ДанныеФормы) Экспорт
	
	СчетНаАренду = ДанныеФормыВЗначение(ДанныеФормы, Тип("ДокументОбъект.АР_СчетНаАренду"));
	СчетНаАренду.Заполнить(Основание);
	СчетНаАренду.ВидОперации = ВидОперации;
	Если ВидОперации = Перечисления.АР_ВидыОперацийСчетНаАренду.ОплатаДепозита Тогда
		СчетНаАренду.ЗаполнитьСтрокиДепозит(Основание);	
	ИначеЕсли ВидОперации = Перечисления.АР_ВидыОперацийСчетНаАренду.ОплатаПени Тогда
		СпособУчетаНДС = Константы.АР_СпособУчетаНДСПриНачисленииПеней.Получить();
		СчетНаАренду.СуммаВключаетНДС = ?(СпособУчетаНДС = Перечисления.АР_СпособыУчетаНДСПриНачисленииПеней.НДССверху, Ложь, Истина);
		СчетНаАренду.ДокументБезНДС = ?(СпособУчетаНДС = Перечисления.АР_СпособыУчетаНДСПриНачисленииПеней.НеУчитыватьНДС, Истина, Ложь);
		СчетНаАренду.ЗаполнитьСтрокиПени();
	ИначеЕсли ВидОперации = Перечисления.АР_ВидыОперацийСчетНаАренду.ОплатаАренды Тогда
		СчетНаАренду.ЗаполнитьСтроки(ПостояннаяЧастьОплаты, Ложь);	
	КонецЕсли;
	ЗначениеВДанныеФормы(СчетНаАренду, ДанныеФормы);	
	
КонецПроцедуры

Функция ПолучитьВерсию(Версия) Экспорт
	
	НоваяВерсия = Версия;
	Ном = Найти(НоваяВерсия, "/");
	Если Ном > 0 Тогда
		НоваяВерсия = Лев(НоваяВерсия, Ном - 1);
	КонецЕсли;
	Возврат НоваяВерсия;
	
КонецФункции

Функция ПолучитьОбщуюПлощадьПоДоговору(Объект, ОбъектМетаданных)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", 		Объект);
	Запрос.УстановитьПараметр("ДатаСреза", 		Объект.Дата);
	Запрос.УстановитьПараметр("Договор", 		Объект.ДоговорКонтрагента);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(АР_СтавкиСрезПоследних.Площадь) КАК Площадь
	|ИЗ
	|	Документ." + ОбъектМетаданных.Имя + ".Состав КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АР_Ставки.СрезПоследних(
	|				&ДатаСреза,
	|				Договор = &Договор
	|					И Услуга.АР_УслугаАренды
	|					И (СрокДействия >= &ДатаСреза
	|						ИЛИ СрокДействия = ДАТАВРЕМЯ(1, 1, 1))) КАК АР_СтавкиСрезПоследних
	|		ПО ТабличнаяЧасть.ОбъектАренды = АР_СтавкиСрезПоследних.ОбъектАренды
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Площадь;	
	КонецЦикла;
	Возврат 0;
	
КонецФункции

Функция ПолучитьЦвет(знач ЦветСтрока) Экспорт
	
	Если Не ЗначениеЗаполнено(ЦветСтрока) Тогда
		Возврат 255 + 255*256;
	Иначе
		Ном = Найти(ЦветСтрока, ",");
		КрасныйСтрока = Лев(ЦветСтрока, Ном - 1);
		Строка = Сред(ЦветСтрока, Ном + 1);
		Красный = Число(КрасныйСтрока);
		Ном = Найти(Строка, ",");
		ЗеленыйСтрока = Лев(Строка, Ном - 1);
		Строка = Сред(Строка, Ном + 1);
		Зеленый = Число(ЗеленыйСтрока);
		Синий = Число(Строка);
		Возврат Синий * 256 * 256 + Зеленый * 256 + Красный;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьАдресОбъектаАренды(ОбъектАренды)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ОбъектАренды);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АР_ОбъектыАрендыКонтактнаяИнформация.ЗначенияПолей
	|ИЗ
	|	Справочник.АР_ОбъектыАренды.КонтактнаяИнформация КАК АР_ОбъектыАрендыКонтактнаяИнформация
	|ГДЕ
	|	АР_ОбъектыАрендыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресОбъектаАренды)
	|	И АР_ОбъектыАрендыКонтактнаяИнформация.Ссылка = &Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		КонтактнаяИнформация = Выборка.ЗначенияПолей;
		Возврат УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(КонтактнаяИнформация, Справочники.ВидыКонтактнойИнформации.АдресОбъектаАренды);
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

Функция ПолучитьДатуЗаключенияДоговора(ДоговорКонтрагента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	АР_СтатусыОбъектовАренды.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.АР_СтатусыОбъектовАренды КАК АР_СтатусыОбъектовАренды
	|ГДЕ
	|	АР_СтатусыОбъектовАренды.Регистратор ССЫЛКА Документ.АР_ЗаключениеДоговораАренды
	|	И АР_СтатусыОбъектовАренды.Договор = &Договор";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат ?(ЗначениеЗаполнено(Выборка.Регистратор), Выборка.Регистратор.ДатаЗаключенияДоговора, Дата(1, 1, 1));	
	КонецЦикла;
	
	Возврат Дата(1, 1, 1);
	
КонецФункции

Функция ПолучитьДатуОкончанияДоговора(ДоговорКонтрагента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АР_СтатусыОбъектовАренды.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.АР_СтатусыОбъектовАренды КАК АР_СтатусыОбъектовАренды
	|ГДЕ
	|	(АР_СтатусыОбъектовАренды.Регистратор ССЫЛКА Документ.АР_ЗаключениеДоговораАренды
	|			ИЛИ АР_СтатусыОбъектовАренды.Регистратор ССЫЛКА Документ.АР_ДополнительноеСоглашение)
	|	И АР_СтатусыОбъектовАренды.Договор = &Договор
	|
	|УПОРЯДОЧИТЬ ПО
	|	АР_СтатусыОбъектовАренды.Регистратор.Дата УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат ?(ЗначениеЗаполнено(Выборка.Регистратор), Выборка.Регистратор.ДатаОкончанияДоговора, Дата(1, 1, 1));	
	КонецЦикла;
	
	Возврат Дата(1, 1, 1);
	
КонецФункции

Функция ПолучитьАктуальныйДокументПоСтатусам(Договор, Период = '00010101') Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтатусыОбъектов.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.АР_СтатусыОбъектовАренды.СрезПоследних(&Период, Договор = &Договор И (Регистратор ССЫЛКА Документ.АР_ЗаключениеДоговораАренды
	|			ИЛИ Регистратор ССЫЛКА Документ.АР_ДополнительноеСоглашение)) КАК СтатусыОбъектов
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатусыОбъектов.Период УБЫВ";
	
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Период", ?(ЗначениеЗаполнено(Период), КонецДня(Период), Период));
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Регистратор;
	КонецЕсли;
	
	Возврат Документы.АР_ЗаключениеДоговораАренды.ПустаяСсылка();
	
КонецФункции

Функция ПолучитьАктуальныйДокументУсловий(Договор, Период = '00010101') Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Ставки.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.АР_Ставки.СрезПоследних(
	|			&Период,
	|			Договор = &Договор
	|				И (СрокДействия >= &ПериодНД
	|					ИЛИ СрокДействия = ДАТАВРЕМЯ(1, 1, 1))) КАК Ставки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ставки.Период УБЫВ";
	
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("ПериодНД", НачалоДня(Период));
	Запрос.УстановитьПараметр("Период", ?(ЗначениеЗаполнено(Период), КонецДня(Период), Период));
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Регистратор;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьКаталогВременныхФайлов() Экспорт
	
	Возврат КаталогВременныхФайлов();
	
КонецФункции

Процедура ДополнитьТекстЗапросаПолем(ТекстЗапроса, Назначение, Поле, Условие = "", ТипЗначения = "NULL")
		
	Если Поле = "КонтактнаяИнформация" Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	{ХАРАКТЕРИСТИКИ
		|	ТИП(" + Назначение + ")
		|	ВИДЫХАРАКТЕРИСТИК (ВЫБРАТЬ
		|			ВидыКонтактнойИнформации.Ссылка,
		|			ВидыКонтактнойИнформации.Наименование,
		|			ВидыКонтактнойИнформации.Тип
		|		ИЗ
		|			Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|		ГДЕ
		|			ВидыКонтактнойИнформации.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации." + СтрЗаменить(Назначение, ".", "") + "))
		|	ПОЛЕКЛЮЧА Ссылка
		|	ПОЛЕИМЕНИ Наименование
		|	ПОЛЕТИПАЗНАЧЕНИЯ Тип
		|	ЗНАЧЕНИЯХАРАКТЕРИСТИК (ВЫБРАТЬ
		|			КонтактнаяИнформация.Ссылка,
		|			КонтактнаяИнформация.Вид КАК ВидКИ,
		|			КонтактнаяИнформация.Представление
		|		ИЗ
		|			" + Назначение + ".КонтактнаяИнформация КАК КонтактнаяИнформация)
		|	ПОЛЕОБЪЕКТА Ссылка
		|	ПОЛЕВИДА ВидКИ
		|	ПОЛЕЗНАЧЕНИЯ Представление }";
	ИначеЕсли Поле = "ДополнительныеРеквизиты" Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	{ХАРАКТЕРИСТИКИ
		|	ТИП(" + Назначение + ")
		|	ВИДЫХАРАКТЕРИСТИК (ВЫБРАТЬ
		|			ДополнительныеРеквизиты.Свойство.Наименование КАК Наименование,
		|			ДополнительныеРеквизиты.Свойство.ТипЗначения КАК ТипЗначения,
		|			ДополнительныеРеквизиты.Свойство
		|		ИЗ
		|			Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
		|		ГДЕ
		|			ДополнительныеРеквизиты.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений." + СтрЗаменить(Назначение, ".", "_") + "))
		|	ПОЛЕКЛЮЧА Свойство
		|	ПОЛЕИМЕНИ Наименование
		|	ПОЛЕТИПАЗНАЧЕНИЯ ТипЗначения
		|	ЗНАЧЕНИЯХАРАКТЕРИСТИК (ВЫБРАТЬ
		|			ДополнительныеРеквизиты.Ссылка,
		|			ДополнительныеРеквизиты.Свойство,
		|			ДополнительныеРеквизиты.Значение
		|		ИЗ
		|			" + Назначение + ".ДополнительныеРеквизиты КАК ДополнительныеРеквизиты)
		|	ПОЛЕОБЪЕКТА Ссылка
		|	ПОЛЕВИДА Свойство
		|	ПОЛЕЗНАЧЕНИЯ Значение }";
	ИначеЕсли Поле = "ДополнительныеСведения" Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	{ХАРАКТЕРИСТИКИ
		|	ТИП(" + Назначение + ")
		|	ВИДЫХАРАКТЕРИСТИК (ВЫБРАТЬ
		|			ДополнительныеРеквизиты.Свойство.Наименование КАК Наименование,
		|			ДополнительныеРеквизиты.Свойство.ТипЗначения КАК ТипЗначения,
		|			ДополнительныеРеквизиты.Свойство
		|		ИЗ
		|			Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК ДополнительныеРеквизиты
		|		ГДЕ
		|			ДополнительныеРеквизиты.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений." + СтрЗаменить(Назначение, ".", "_") + "))
		|	ПОЛЕКЛЮЧА Свойство
		|	ПОЛЕИМЕНИ Наименование
		|	ПОЛЕТИПАЗНАЧЕНИЯ ТипЗначения
		|	ЗНАЧЕНИЯХАРАКТЕРИСТИК РегистрСведений.ДополнительныеСведения
		|	ПОЛЕОБЪЕКТА Объект
		|	ПОЛЕВИДА Свойство
		|	ПОЛЕЗНАЧЕНИЯ Значение }";
	ИначеЕсли Поле = "ОтветственныеЛицаОрганизаций" Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	{ХАРАКТЕРИСТИКИ
		|	ТИП(" + Назначение + ")
		|	ВИДЫХАРАКТЕРИСТИК (ВЫБРАТЬ
		|			ОтветственныеЛицаОрганизаций.Ссылка,
		|			ПРЕДСТАВЛЕНИЕ(ОтветственныеЛицаОрганизаций.Ссылка) КАК Наименование,
		|			ОтветственныеЛицаОрганизаций.Ссылка КАК Тип
		|		ИЗ
		|			Перечисление.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаОрганизаций)
		|	ПОЛЕКЛЮЧА Ссылка
		|	ПОЛЕИМЕНИ Наименование
		|	ПОЛЕТИПАЗНАЧЕНИЯ Тип
		|	ЗНАЧЕНИЯХАРАКТЕРИСТИК Справочник.ОтветственныеЛицаОрганизаций
		|	ПОЛЕОБЪЕКТА Владелец
		|	ПОЛЕВИДА ОтветственноеЛицо
		|	ПОЛЕЗНАЧЕНИЯ ФизическоеЛицо }";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|	{ХАРАКТЕРИСТИКИ
		|	ТИП(" + Назначение + ")
		|	ВИДЫХАРАКТЕРИСТИК (ВЫБРАТЬ
		|			NULL КАК Ссылка,
		|			""" + Поле +  """ КАК Наименование,
		|			" + ТипЗначения + " КАК ТипЗначения
		|	" + ?(ЗначениеЗаполнено(Условие), "ГДЕ " + Условие, "") + ")
		|	ПОЛЕКЛЮЧА Ссылка
		|	ПОЛЕИМЕНИ Наименование
		|	ПОЛЕТИПАЗНАЧЕНИЯ ТипЗначения
		|	ЗНАЧЕНИЯХАРАКТЕРИСТИК (ВЫБРАТЬ
		|			НЕОПРЕДЕЛЕНО КАК Объект,
		|			НЕОПРЕДЕЛЕНО КАК Свойство,
		|			НЕОПРЕДЕЛЕНО КАК Значение)
		|	ПОЛЕОБЪЕКТА Объект
		|	ПОЛЕВИДА Свойство
		|	ПОЛЕЗНАЧЕНИЯ Значение }";	
	КонецЕсли;
	
КонецПроцедуры          

Процедура ДополнитьТекстЗапросаДаннымиРегистра(ТекстЗапроса, Назначение, ИмяРегистра)
	
	Ресурсы = Метаданные.РегистрыСведений[ИмяРегистра].Ресурсы;
	Для Каждого Ресурс Из Ресурсы Цикл
		ДополнитьТекстЗапросаПолем(ТекстЗапроса, Назначение, Ресурс.Синоним);		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ДополнитьТекстЗапросаДаннымиХарактеристик(ТекстЗапроса, Назначение)
	
	ПустаяСсылка = ПредопределенноеЗначение(Назначение + ".ПустаяСсылка");
	Характеристики = ПустаяСсылка.Метаданные().Характеристики;
	Для Каждого Характеристика Из Характеристики Цикл
		
		ВидыХарактеристик = Характеристика.ВидыХарактеристик.ПолноеИмя();
		ВидыХарактеристик = СтрЗаменить(ВидыХарактеристик, "ТабличнаяЧасть.", "");
		
		ЗначенияХарактеристик = Характеристика.ЗначенияХарактеристик.ПолноеИмя();
		ЗначенияХарактеристик = СтрЗаменить(ЗначенияХарактеристик, "ТабличнаяЧасть.", "");		
		
		Если Характеристика.ПолеОтбораВидов.Имя = "ИмяПредопределенногоНабора" Тогда
			ЗначениеОтбораВидов = """" + Характеристика.ЗначениеОтбораВидов + """";
		Иначе
			ЗначениеОтбораВидов = "ЗНАЧЕНИЕ(" + Характеристика.ЗначениеОтбораВидов.Метаданные().ПолноеИмя() + "." + Характеристика.ЗначениеОтбораВидов.ИмяПредопределенныхДанных + ")";
		КонецЕсли;
		
		ТипЗначения = "NULL";
		Если ВидыХарактеристик = "Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты"
			ИЛИ ВидыХарактеристик = "Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты" Тогда
			ТипЗначения = "ВидыХарактеристик.Свойство.ТипЗначения";
		Иначе	
			Тип = Неопределено;
			Если СтрНачинаетсяС(ЗначенияХарактеристик, "РегистрСведений") Тогда
				Для каждого Ресурс Из Характеристика.ЗначенияХарактеристик.Ресурсы Цикл
					Если Ресурс.Имя = Характеристика.ПолеЗначения.Имя Тогда
						Тип = Ресурс.Тип.Типы()[0];
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если Тип <> Неопределено Тогда
				ПредставлениеТипа = ОбщегоНазначения.СтроковоеПредставлениеТипа(Тип);
				Если Найти(ПредставлениеТипа, "Ссылка") > 0 Тогда
					ТипЗначения = "ЗНАЧЕНИЕ(" + СтрЗаменить(ПредставлениеТипа, "Ссылка", "") + ".ПустаяСсылка)";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|	{ХАРАКТЕРИСТИКИ
		|	ТИП(" + Назначение + ")
		|	ВИДЫХАРАКТЕРИСТИК (ВЫБРАТЬ
		|			ВидыХарактеристик." + Характеристика.ПолеКлюча.Имя + ".Представление КАК Наименование,
		|			" + ТипЗначения + " КАК ТипЗначения,
		|			ВидыХарактеристик." + Характеристика.ПолеКлюча.Имя + " КАК Свойство
		|		ИЗ
		|			" + ВидыХарактеристик + " КАК ВидыХарактеристик
		|		ГДЕ
		|			ВидыХарактеристик." + Характеристика.ПолеОтбораВидов.Имя + " = " + ЗначениеОтбораВидов + ")
		|	ПОЛЕКЛЮЧА Свойство
		|	ПОЛЕИМЕНИ Наименование
		|	ПОЛЕТИПАЗНАЧЕНИЯ ТипЗначения
		|	ЗНАЧЕНИЯХАРАКТЕРИСТИК (ВЫБРАТЬ
		|			ЗначенияХарактеристик." + Характеристика.ПолеОбъекта.Имя + " КАК Объект,
		|			ЗначенияХарактеристик." + Характеристика.ПолеВида.Имя + " КАК Свойство,
		|			ЗначенияХарактеристик." + Характеристика.ПолеЗначения.Имя + " КАК Значение
		|		ИЗ
		|			" + ЗначенияХарактеристик + " КАК ЗначенияХарактеристик)
		|	ПОЛЕОБЪЕКТА Объект
		|	ПОЛЕВИДА Свойство
		|	ПОЛЕЗНАЧЕНИЯ Значение }";
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьТекстЗапросаДополнительнымиПолями(СхемаКомпоновкиДанных, ИмяНабора = "НаборДанных") Экспорт
	
	ТекстДополнительныхПолей = "";
	
	ДополнитьТекстЗапросаДаннымиХарактеристик(ТекстДополнительныхПолей, "Справочник.АР_ОбъектыАренды");
	ДополнитьТекстЗапросаПолем(ТекстДополнительныхПолей, "Справочник.АР_ОбъектыАренды", "Собственник",, "ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)");
	
	МассивНаборов = СтрРазделить(ИмяНабора, ".");
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных;
	Для Каждого Элемент Из МассивНаборов Цикл
		НаборДанных = НаборДанных[Элемент];
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
			НаборДанных = НаборДанных.Элементы;
		КонецЕсли;
	КонецЦикла;
	
	НаборДанных.Запрос = НаборДанных.Запрос + ТекстДополнительныхПолей;
	
КонецПроцедуры

Функция ПолучитьСчетУчетаПеней(Организация, Контрагент, ДоговорКонтрагента, Дата) Экспорт
	
	Если НЕ ДоговорКонтрагента.АР_АрендныйДоговор ИЛИ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		Возврат ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	КонецЕсли;
	
	ПараметрыНачисленияПени = АР_ПроцедурыНачисления.ПолучитьПараметрыНачисленияПени(ДоговорКонтрагента, Дата);
	ОбособленныйУчетПени = ?(ПараметрыНачисленияПени = Неопределено, Ложь, ПараметрыНачисленияПени.СпособПогашенияПени = ПредопределенноеЗначение("Перечисление.АР_СпособыПогашенияПени.ВестиОбособленныйУчетПени"));
	Если ПараметрыНачисленияПени = Неопределено ИЛИ ОбособленныйУчетПени Тогда
		Возврат ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	КонецЕсли;
	
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
		Организация, Контрагент, ДоговорКонтрагента);
	
	Возврат СчетаУчета.СчетРасчетовПоПретензиям;
	
КонецФункции

Функция ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента) Экспорт
	
	Возврат БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	
КонецФункции

Функция СуществуютСпискиСчетчиковПоДокументу(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ АР_СпискиСчетчиков.Ссылка) КАК Количество
	|ИЗ
	|	Справочник.АР_СпискиСчетчиков КАК АР_СпискиСчетчиков
	|ГДЕ
	|	АР_СпискиСчетчиков.Документ = &Документ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Следующий() И НЕ Выборка.Количество = 0;
	
КонецФункции

Процедура ОтправитьПочтовоеСообщение(ПараметрыПисьма) Экспорт
	ДоступныеУчетныеЗаписи = АР_ОбщиеПроцедуры.ДоступныеУчетныеЗаписи();
	Если ДоступныеУчетныеЗаписи.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не обнаружены доступные учетные записи электронной почты, обратитесь к администратору системы.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПисьма.Свойство("УчетнаяЗапись") И ЗначениеЗаполнено(ПараметрыПисьма.УчетнаяЗапись) Тогда
		УчетнаяЗапись = ПараметрыПисьма.УчетнаяЗапись;
	Иначе
		УчетнаяЗапись = ДоступныеУчетныеЗаписи[0].Ссылка;
	КонецЕсли;
	
	ПараметрыПисьма.Вставить("ТипТекста", "HTML");
	РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗапись, ПараметрыПисьма);	
КонецПроцедуры

Функция ДоступныеУчетныеЗаписи() Экспорт
	Возврат РаботаСПочтовымиСообщениями.ДоступныеУчетныеЗаписи(Истина);
КонецФункции

Функция РазбитьОбъектыПоКонтрагентам(МассивОбъектов) Экспорт
	
	ТаблицаОбъектов = Новый ТаблицаЗначений;
	ТаблицаОбъектов.Колонки.Добавить("Объект");
	ТаблицаОбъектов.Колонки.Добавить("Контрагент");
	Для Каждого Объект Из МассивОбъектов Цикл
		Стр = ТаблицаОбъектов.Добавить();
		Стр.Объект = Объект;
		Стр.Контрагент = Объект.Контрагент;
	КонецЦикла;
	ТаблицаКонтрагентов = ТаблицаОбъектов.Скопировать(, "Контрагент");
	ТаблицаКонтрагентов.Свернуть("Контрагент");
	ОбъектыПоКонтрагентам = Новый Соответствие;
	Для Каждого СтрокаКонтрагентов Из ТаблицаКонтрагентов Цикл
		Получатели = ОтправкаПочтовыхСообщенийПереопределяемый.АдресаЭлектроннойПочты(СтрокаКонтрагентов.Контрагент);
		НайденЭлектронныйАдрес = Ложь;
		Для Каждого Элемент Из Получатели Цикл
			НайденЭлектронныйАдрес = НайденЭлектронныйАдрес ИЛИ ЗначениеЗаполнено(Элемент.Адрес);	
		КонецЦикла;
		Если НайденЭлектронныйАдрес Тогда
			ОбъектыКонтрагента = ТаблицаОбъектов.Скопировать(Новый Структура("Контрагент", СтрокаКонтрагентов.Контрагент));
			МассивОбъектовКонтрагента = ОбъектыКонтрагента.ВыгрузитьКолонку("Объект");
			ОбъектыПоКонтрагентам.Вставить(СтрокаКонтрагентов.Контрагент, МассивОбъектовКонтрагента);
		Иначе
			ОбъектыПоКонтрагентам.Вставить(СтрокаКонтрагентов.Контрагент, Неопределено);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОбъектыПоКонтрагентам;
	
КонецФункции

Функция ПолучитьНастройкиГрупповыхОбработок() Экспорт
	Возврат ХранилищеОбщихНастроек.Загрузить("АР_НастройкиГрупповыхОбработок");
КонецФункции

Процедура СохранитьНастройкиГрупповыхОбработок(Настройки) Экспорт
	ХранилищеОбщихНастроек.Сохранить("АР_НастройкиГрупповыхОбработок",, Настройки);
КонецПроцедуры

Функция ПолучитьНастройкуСроковОплатыПоУмолчанию() Экспорт
	
	НастройкаХранилище = Константы.АР_НастройкаСроковОплаты.Получить();
	СтруктураНастроек = НастройкаХранилище.Получить();
	Если НЕ ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		СтруктураНастроек = Новый Структура;
	КонецЕсли;
	
	Возврат СтруктураНастроек;
	
КонецФункции

#Область ПечатьЧека

Процедура ДоработатьТекстЗапросаДляПечатиЧека(ДокументСсылка, ТекстЗапроса) Экспорт
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АР_НачислениеАренднойПлаты")
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АР_НачислениеПени") Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК РеализацияТоваровУслугАгентскиеУслуги",
			"#РеализацияТоваровУслугАгентскиеУслуги");	
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.РеализацияТоваровУслуг.АгентскиеУслуги", "Документ.АР_НачислениеАренднойПлаты.Состав");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#РеализацияТоваровУслугАгентскиеУслуги",
			"Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК РеализацияТоваровУслугАгентскиеУслуги");	
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РеализацияТоваровУслуг.ДоговорКонтрагента.ПлатежныйАгент", 
			"РеализацияТоваровУслуг.ДоговорКонтрагента.ПлатежныйАгент
			|	И НЕ РеализацияТоваровУслуг.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК РеализацияТоваровУслугАгентскиеУслуги", 
			"ЛЕВОЕ СОЕДИНЕНИЕ Документ.АР_НачислениеАренднойПлаты.Состав КАК РеализацияТоваровУслугАгентскиеУслуги");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НЕ РеализацияТоваровУслугУслуги.Ссылка ЕСТЬ NULL", 
			"НЕ РеализацияТоваровУслугУслуги.Ссылка ЕСТЬ NULL
			|И РеализацияТоваровУслугУслуги.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НЕ РеализацияТоваровУслугАгентскиеУслуги.Ссылка ЕСТЬ NULL", 
			"НЕ РеализацияТоваровУслугАгентскиеУслуги.Ссылка ЕСТЬ NULL
			|И НЕ РеализацияТоваровУслугАгентскиеУслуги.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РеализацияТоваровУслуг.СчетНаОплатуПокупателю", "РеализацияТоваровУслуг.ДокументОснование");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РеализацияТоваровУслуг.ВидОперации", "НЕОПРЕДЕЛЕНО");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.РеализацияТоваровУслуг.Услуги", "Документ.АР_НачислениеАренднойПлаты.Состав");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.РеализацияТоваровУслуг.АгентскиеУслуги", "#АгентскиеУслуги");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.РеализацияТоваровУслуг.Товары", "#Товары");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.РеализацияТоваровУслуг", "Документ.АР_НачислениеАренднойПлаты");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#АгентскиеУслуги", "Документ.РеализацияТоваровУслуг.АгентскиеУслуги");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#Товары", "Документ.РеализацияТоваровУслуг.Товары");
		
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АР_НачислениеПени") Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "АР_НачислениеАренднойПлаты", "АР_НачислениеПени");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РеализацияТоваровУслугУслуги.Количество", "1");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РеализацияТоваровУслугУслуги.Цена", "РеализацияТоваровУслугУслуги.Сумма");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РеализацияТоваровУслугАгентскиеУслуги.Количество", "1");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РеализацияТоваровУслугАгентскиеУслуги.Цена", "РеализацияТоваровУслугАгентскиеУслуги.Сумма");
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") 
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") 
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
		
		Если Не ДокументСсылка.АР_ОплатаАренды Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") 
			ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СОЕДИНЕНИЕ Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа", "СОЕДИНЕНИЕ ВТ_РасшифровкаПлатежаСвернутая_Элиас");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СОЕДИНЕНИЕ Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа", "СОЕДИНЕНИЕ ВТ_РасшифровкаПлатежаСвернутая_Элиас");
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.РеализацияТоваровУслуг.Товары", "#Товары");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.РеализацияТоваровУслуг.АгентскиеУслуги", "#АгентскиеУслуги");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.СчетНаОплатуПокупателю.Товары", "Документ.АР_СчетНаАренду.Состав");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.СчетНаОплатуПокупателю", "Документ.АР_СчетНаАренду");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.РеализацияТоваровУслуг.Услуги", "Документ.АР_НачислениеАренднойПлаты.Состав");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.РеализацияТоваровУслуг", "Документ.АР_НачислениеАренднойПлаты");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РеализацияТоваровУслуг.СчетНаОплатуПокупателю", "РеализацияТоваровУслуг.ДокументОснование");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПриходныйКассовыйОрдерРасшифровкаПлатежа.СчетНаОплату", "ПриходныйКассовыйОрдерРасшифровкаПлатежа.АР_СчетНаАренду");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СчетНаОплату", "ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.АР_СчетНаАренду");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДокументСчетНаОплатуПокупателю.СуммаСкидки", "0");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СчетНаОплатуПокупателюТовары.СуммаСкидки", "0");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#Товары", "Документ.РеализацияТоваровУслуг.Товары");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#АгентскиеУслуги", "Документ.РеализацияТоваровУслуг.АгентскиеУслуги");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УведомленияПоСобытиям

Процедура НапоминанияУведомленияПоСобытиямПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбновитьСрокиНапоминанияПочтовыхУведомлений(Источник.Ссылка);
	
	ЗаписьИзФормы = Источник.ДополнительныеСвойства.Свойство("ЗаписьИзФормы");
	Если Источник.ДополнительныеСвойства.ЭтоНовый Тогда
		Событие = Перечисления.АР_СобытияДляНапоминанийУведомлений.СозданиеОбъекта;
	ИначеЕсли Источник.ПометкаУдаления Тогда
		Событие = Перечисления.АР_СобытияДляНапоминанийУведомлений.ПометкаНаУдаление;
	Иначе
		Если Не ЗаписьИзФормы Тогда
			Возврат;
		КонецЕсли;
		Событие = Перечисления.АР_СобытияДляНапоминанийУведомлений.ИзменениеОбъекта;
	КонецЕсли;
	
	ТипОбъекта = Источник.Метаданные().ПолноеИмя();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АР_НапоминанияУведомленияПоСобытиям.Ссылка КАК Ссылка,
	|	АР_НапоминанияУведомленияПоСобытиям.НапоминаниеВ1С КАК НапоминаниеВ1С,
	|	АР_НапоминанияУведомленияПоСобытиям.ОтправкаНаEmail КАК ОтправкаНаEmail
	|ИЗ
	|	Справочник.АР_НапоминанияУведомленияПоСобытиям.ТипыОбъектов КАК ТабТипыОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АР_НапоминанияУведомленияПоСобытиям КАК АР_НапоминанияУведомленияПоСобытиям
	|		ПО ТабТипыОбъектов.Ссылка = АР_НапоминанияУведомленияПоСобытиям.Ссылка
	|ГДЕ
	|	АР_НапоминанияУведомленияПоСобытиям.Событие = &Событие
	|	И АР_НапоминанияУведомленияПоСобытиям.Статус
	|	И ТабТипыОбъектов.ТипОбъекта = &ТипОбъекта
	|	И НЕ АР_НапоминанияУведомленияПоСобытиям.ПометкаУдаления";
	Запрос.УстановитьПараметр("Событие", Событие);
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.НапоминаниеВ1С Тогда
			СоздатьНапоминание(Источник.Ссылка, Выборка.Ссылка);
		КонецЕсли;
		Если Выборка.ОтправкаНаEmail Тогда
			ЗарегистрироватьПочтовоеУведомление(Источник.Ссылка, Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТекстОповещения(ШаблонТекстаОповещения, Данные) Экспорт
	
	Результат = ШаблонТекстаОповещения;
	
	ИндексНач = 0;
	ИндексКон = 0;
	СчетчикСкобок = 0;
	Для К = 1 По СтрДлина(ШаблонТекстаОповещения) Цикл
		Символ = Сред(ШаблонТекстаОповещения, К, 1);
		Если Символ = "[" Тогда
			СчетчикСкобок = СчетчикСкобок + 1;
			Если СчетчикСкобок = 1 Тогда
				ИндексНач = К;
			КонецЕсли;
		ИначеЕсли Символ = "]" Тогда
			СчетчикСкобок = СчетчикСкобок - 1;			
			Если СчетчикСкобок = 0 Тогда
				ИндексКон = К;
				Параметр = Сред(ШаблонТекстаОповещения, ИндексНач + 1, ИндексКон - ИндексНач-1);
				Попытка
					ПутьКДанным = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Параметр, ".");
					ИмяОбъекта = ПутьКДанным[0];
					ИмяРеквизита = Сред(Параметр, СтрДлина(ПутьКДанным[0]) + 2);
					Если Не ЗначениеЗаполнено(ИмяРеквизита) Тогда
						Значение = Данные[ИмяОбъекта];
					Иначе
						Значение = АР_ОбщиеПроцедуры.ПолучитьЗначениеРеквизита(Данные[ИмяОбъекта], ИмяРеквизита);						
					КонецЕсли;
					Результат = СтрЗаменить(Результат, Сред(ШаблонТекстаОповещения, ИндексНач, ИндексКон - ИндексНач + 1), Строка(Значение));
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка в шаблоне: Не найдено поле " + Параметр);
					Возврат "";
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

Процедура СоздатьНапоминание(Источник, Настройка)
	
	Для каждого СтрокаТЧ Из Настройка.Получатели Цикл
		НоваяЗапись = РегистрыСведений.НапоминанияПользователя.СоздатьМенеджерЗаписи();
		НоваяЗапись.Пользователь = ПолучитьПолучателяУведомления(Источник, СтрокаТЧ.Пользователь);
		НоваяЗапись.Источник = Источник;
		НоваяЗапись.Описание = ПолучитьТекстОповещения(Настройка.ШаблонСообщения, Новый Структура("Объект", Источник));
		
		Если Настройка.СпособУстановкиВремени = Перечисления.АР_СпособыУстановкиВремениНапоминанияУведомления.ПриНаступленииСобытия Тогда
			НоваяЗапись.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя;
			НоваяЗапись.ВремяСобытия = ТекущаяДатаСеанса();
			НоваяЗапись.СрокНапоминания = НоваяЗапись.ВремяСобытия;
			НоваяЗапись.ИнтервалВремениНапоминания = 0;
		ИначеЕсли Настройка.СпособУстановкиВремени = Перечисления.АР_СпособыУстановкиВремениНапоминанияУведомления.ОтносительноВремениПредмета Тогда
			НоваяЗапись.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета;
			НоваяЗапись.ИмяРеквизитаИсточника = Настройка.ИмяРеквизитаОбъекта;
			ВремяСобытия = ПолучитьВремяСобытия(Источник, Настройка.ИмяРеквизитаОбъекта);
			НоваяЗапись.ИнтервалВремениНапоминания = ПолучитьИнтервалВремени(Настройка, ВремяСобытия);
			Если Не ЗначениеЗаполнено(ВремяСобытия) Тогда
				ВремяСобытия = ТекущаяДатаСеанса() + 24*60*60 + НоваяЗапись.ИнтервалВремениНапоминания;
			КонецЕсли;
			НоваяЗапись.ВремяСобытия = ВремяСобытия;
			НоваяЗапись.СрокНапоминания = НоваяЗапись.ВремяСобытия - НоваяЗапись.ИнтервалВремениНапоминания;
		КонецЕсли;
		НоваяЗапись.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьПочтовоеУведомление(Источник, Настройка)
	
	Для каждого СтрокаТЧ Из Настройка.Получатели Цикл
		НоваяЗапись = РегистрыСведений.АР_ПочтовыеУведомления.СоздатьМенеджерЗаписи();
		НоваяЗапись.Пользователь = ПолучитьПолучателяУведомления(Источник, СтрокаТЧ.Пользователь);
		НоваяЗапись.Источник = Источник;
		НоваяЗапись.Описание = ПолучитьТекстОповещения(Настройка.ШаблонСообщения, Новый Структура("Объект", Источник));
		НоваяЗапись.ИмяРеквизитаОбъекта = Настройка.ИмяРеквизитаОбъекта;
		
		НоваяЗапись.СпособУстановкиВремени = Настройка.СпособУстановкиВремени;
		Если Настройка.СпособУстановкиВремени = Перечисления.АР_СпособыУстановкиВремениНапоминанияУведомления.ПриНаступленииСобытия Тогда
			НоваяЗапись.ВремяСобытия = ТекущаяДатаСеанса();
			НоваяЗапись.СрокНапоминания = НоваяЗапись.ВремяСобытия;
			НоваяЗапись.ИнтервалВремениОповещения = 0;
		ИначеЕсли Настройка.СпособУстановкиВремени = Перечисления.АР_СпособыУстановкиВремениНапоминанияУведомления.ОтносительноВремениПредмета Тогда
			ВремяСобытия = ПолучитьВремяСобытия(Источник, НоваяЗапись.ИмяРеквизитаОбъекта);
			НоваяЗапись.ИнтервалВремениОповещения = ПолучитьИнтервалВремени(Настройка, ВремяСобытия);
			Если Не ЗначениеЗаполнено(ВремяСобытия) Тогда
				ВремяСобытия = ТекущаяДатаСеанса() + 24*60*60 + НоваяЗапись.ИнтервалВремениОповещения;
			КонецЕсли;
			НоваяЗапись.ВремяСобытия = ВремяСобытия;
			НоваяЗапись.СрокНапоминания = НоваяЗапись.ВремяСобытия - НоваяЗапись.ИнтервалВремениОповещения;
		КонецЕсли;
		НоваяЗапись.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьПочтовоеУведомление(Данные)
	
	Запись = РегистрыСведений.АР_ПочтовыеУведомления.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Запись, Данные);
	Запись.Прочитать();
	Если Запись.Выбран() Тогда
		Запись.Удалить();
	КонецЕсли;
	
КонецПроцедуры

// Отправляет неотправленные уведомления.
Процедура ОтправитьПочтовыеУведомления() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АР_ПочтовыеУведомления.Пользователь КАК Пользователь,
	|	АР_ПочтовыеУведомления.ВремяСобытия КАК ВремяСобытия,
	|	АР_ПочтовыеУведомления.Источник КАК Источник,
	|	АР_ПочтовыеУведомления.СрокНапоминания КАК СрокНапоминания,
	|	АР_ПочтовыеУведомления.Описание КАК Описание,
	|	АР_ПочтовыеУведомления.СпособУстановкиВремени КАК СпособУстановкиВремени,
	|	АР_ПочтовыеУведомления.ИнтервалВремениОповещения КАК ИнтервалВремениОповещения,
	|	АР_ПочтовыеУведомления.ИмяРеквизитаОбъекта КАК ИмяРеквизитаОбъекта
	|ИЗ
	|	РегистрСведений.АР_ПочтовыеУведомления КАК АР_ПочтовыеУведомления
	|ГДЕ
	|	АР_ПочтовыеУведомления.СрокНапоминания <= &СрокНапоминания";
	
	Запрос.УстановитьПараметр("СрокНапоминания", ТекущаяДатаСеанса());
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
			
		АдресПолучателя = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Выборка.Пользователь, Справочники.ВидыКонтактнойИнформации.EmailПользователя);
		Если Не ЗначениеЗаполнено(АдресПолучателя) Тогда
			УдалитьПочтовоеУведомление(Выборка);
			Продолжить;
		КонецЕсли;
		
		Параметры = Новый Структура;
		Параметры.Вставить("Кому", АдресПолучателя);
		Параметры.Вставить("Тема", "Сообщение 1С по объекту " + Выборка.Источник);
		Параметры.Вставить("Тело", Выборка.Описание);
		
		ОтправитьПочтовоеСообщение(Параметры);
		Если Параметры.Свойство("ИдентификаторСообщения") Тогда
			УдалитьПочтовоеУведомление(Выборка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура АР_ОтправкаПочтовыхУведомлений() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.АР_ОтправкаПочтовыхУведомлений);
	
	ОтправитьПочтовыеУведомления();	
	
КонецПроцедуры

Процедура ОбновитьСрокиНапоминанияПочтовыхУведомлений(Источник)
	
	НаборЗаписей = РегистрыСведений.АР_ПочтовыеУведомления.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Источник.Установить(Источник);
	НаборЗаписей.Прочитать();
	ТребуетсяЗапись = Ложь;
	Для каждого Запись Из НаборЗаписей Цикл
		Если Запись.СпособУстановкиВремени = Перечисления.АР_СпособыУстановкиВремениНапоминанияУведомления.ОтносительноВремениПредмета Тогда
			ВремяСобытия = ПолучитьВремяСобытия(Источник, Запись.ИмяРеквизитаОбъекта);
			Если Не ЗначениеЗаполнено(ВремяСобытия) Тогда
				Продолжить;
			КонецЕсли;
			Если ВремяСобытия <> Запись.ВремяСобытия Тогда
				Запись.ВремяСобытия = ВремяСобытия;
				Запись.СрокНапоминания = Запись.ВремяСобытия - Запись.ИнтервалВремениОповещения;
				ТребуетсяЗапись = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ТребуетсяЗапись Тогда
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПолучателяУведомления(Источник, Пользователь)
	
	Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
		Возврат Пользователь;
	ИначеЕсли Пользователь = "Ответственный по документу" Тогда
		Реквизиты = Источник.Метаданные().Реквизиты;
		Если Реквизиты.Найти("Ответственный") = Неопределено Тогда
			Возврат Пользователи.ТекущийПользователь();
		Иначе
			Ответственный = Источник.Ответственный;
			Если ЗначениеЗаполнено(Ответственный) Тогда
				Возврат Ответственный;
			Иначе
				Возврат Пользователи.ТекущийПользователь();
			КонецЕсли;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьВремяСобытия(Источник, ИмяРеквизита) Экспорт
	
	МетаданныеОбъекта = Источник.Метаданные();
	Если МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита) <> Неопределено
		ИЛИ ИмяРеквизита = "Дата" Тогда
		Возврат Источник[ИмяРеквизита];
	Иначе
		Возврат УправлениеСвойствами.ЗначениеСвойства(Источник, ИмяРеквизита);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьИнтервалВремени(Настройка, ВремяСобытия)
	
	ИнтервалВремени = 0;
	Если Настройка.ИнтервалВремениОповещения = "минута" Тогда
		ИнтервалВремени = 60*Настройка.КоличествоИнтерваловОповещения;
	ИначеЕсли Настройка.ИнтервалВремениОповещения = "час" Тогда
		ИнтервалВремени = 60*60*Настройка.КоличествоИнтерваловОповещения;
	ИначеЕсли Настройка.ИнтервалВремениОповещения = "день" Тогда
		ИнтервалВремени = 24*60*60*Настройка.КоличествоИнтерваловОповещения;
	ИначеЕсли Настройка.ИнтервалВремениОповещения = "неделя" Тогда
		ИнтервалВремени = 7*24*60*60*Настройка.КоличествоИнтерваловОповещения;
	ИначеЕсли Настройка.ИнтервалВремениОповещения = "месяц" Тогда
		СрокОповещения = ДобавитьМесяц(ВремяСобытия, -Настройка.КоличествоИнтерваловОповещения);
		ИнтервалВремени = ВремяСобытия - СрокОповещения;
	ИначеЕсли Настройка.ИнтервалВремениОповещения = "год" Тогда
		СрокОповещения = ДобавитьМесяц(ВремяСобытия, -12*Настройка.КоличествоИнтерваловОповещения);
		ИнтервалВремени = ВремяСобытия - СрокОповещения;
	КонецЕсли;
	Возврат ИнтервалВремени;
	
КонецФункции

#КонецОбласти

