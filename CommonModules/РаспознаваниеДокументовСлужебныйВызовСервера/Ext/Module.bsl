#Область СлужебныеПроцедурыИФункции

#Область ПроверкаАвторизации

Функция ПодключеноКСервисуРаспознавания(ПринудительноИТС = Ложь) Экспорт
	
	Если ПринудительноИТС Тогда
		УстановитьПривилегированныйРежим(Истина);
		НачатьТранзакцию();
		РаспознаваниеДокументов.УдалитьДанныеАвторизации();
		РаспознаваниеДокументов.ВыполнитьАвторизациюПоТикетуИТС();
		ЗафиксироватьТранзакцию();
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	ПытатьсяПодключитьсяПриПроверке = Истина;
	ВыбрасыватьИсключение = Истина;
	
	Возврат РаспознаваниеДокументов.ПодключеноКСервисуРаспознавания(ПытатьсяПодключитьсяПриПроверке, ВыбрасыватьИсключение);
	
КонецФункции

Функция ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Экспорт
	
	Возврат ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	
КонецФункции

#КонецОбласти

#Область ОбменСКонтрагентамиСлужебныйВызовСервера

// Функция проверяет доступность каталога, указанного в настройках соглашения об обмене (через каталог),
// на доступность как с клиента (т.к. выбор каталога происходит с клиента), так и с сервера (т.к. работа с файлами
// выполняется на сервере).
//
// Параметры:
//  ПутьККаталогу - строка - полный путь к каталогу, доступность которого надо проверить (с клиента и с сервера).
//
Функция ПроверитьДоступностьКаталогаДляПрямогоОбмена(ПутьККаталогу) Экспорт
	
	КаталогиДоступны = Ложь;
	Если ЗначениеЗаполнено(ПутьККаталогу) Тогда
		ПутьККаталогу = СокрЛП(ПутьККаталогу);
		УдалитьКаталогПослеТеста = Ложь;
		Каталог = Новый Файл(ПутьККаталогу);
		Если НЕ Каталог.Существует() Тогда
			УдалитьКаталогПослеТеста = Истина;
			СоздатьКаталог(ПутьККаталогу);
		КонецЕсли;
		Разделитель = ?(Прав(ПутьККаталогу, 1) = "\", "", "\");
		ТестовыйФайл = Новый ТекстовыйДокумент;
		ПолноеИмяТестовогоФайла = ПутьККаталогу + Разделитель + "EDI_" + Строка(Новый УникальныйИдентификатор) + ".tst";
		ТестовыйФайл.Записать(ПолноеИмяТестовогоФайла);
		КаталогиДоступны = ПрочитатьТестовыйФайлНаСервере(ПолноеИмяТестовогоФайла);
		Если НЕ КаталогиДоступны Тогда
			ТекстСообщения = НСтр("ru = 'Указанный каталог %1 не может использоваться для обмена, так как он не доступен с сервера.
				|Необходимо указать сетевой каталог для обмена.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", """" + ПутьККаталогу + """");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если УдалитьКаталогПослеТеста Тогда
			РаспознаваниеДокументов.УдалитьВременныеФайлы(Каталог.ПолноеИмя);
		Иначе
			РаспознаваниеДокументов.УдалитьВременныеФайлы(ПолноеИмяТестовогоФайла);
		КонецЕсли;
	КонецЕсли;
	
	Возврат КаталогиДоступны;
	
КонецФункции

// Функция используется для проверки доступности каталога, указанного в настройках соглашения об обмене (через каталог):
// на клиенте в каталог записывается файл, на сервере выполняется попытка прочитать его по тому же пути. Связано это с тем,
// что данный каталог должен быть доступен как с клиента, так и с сервера.
//
// Параметры:
//  ПолноеИмяТестовогоФайла - строка - полный путь к тестовому файлу записанному из клиентского сеанса.
//
// Возвращаемое значение:
//  Булево - Истина - файл по указанному пути существует, иначе - Ложь.
//
Функция ПрочитатьТестовыйФайлНаСервере(ПолноеИмяТестовогоФайла)
	
	ТестовыйФайл = Новый Файл(ПолноеИмяТестовогоФайла);
	
	Возврат ТестовыйФайл.Существует();
	
КонецФункции

#КонецОбласти

#Область Прочее

Процедура ОтправкаВложенийИзПочты(УчетнаяЗапись) Экспорт
	
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.РазделениеВключено() И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		КлючЗадания = "ОтправкаВложенийИзПочты" + XMLСтрока(РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
	Иначе
		КлючЗадания = "ОтправкаВложенийИзПочты";
	КонецЕсли;
	
	ДанныеУчетнойЗаписи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УчетнаяЗапись, "Ссылка,ПротоколВходящейПочты");
	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить(ДанныеУчетнойЗаписи);
	
	Задания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Ключ, Состояние", КлючЗадания, СостояниеФоновогоЗадания.Активно)); 
	Если Задания.Количество() <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ФоновоеЗадание = ФоновыеЗадания.Выполнить("РаспознаваниеДокументов.ОтправитьВложенияИзПочтыНаРаспознавание", ПараметрыЗадания,
			КлючЗадания, НСтр("ru = 'Отправка вложений из почты на распознавание'"));
	Исключение
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Невозможно выполнить фоновое задание с ключом: %1
			           |Описание ошибки:
			           |%2'"),
			КлючЗадания,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			РаспознаваниеДокументов.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

Процедура ОтправкаФайловИзКаталога(ПараметрыПоиска) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		КлючЗадания = "ОтправкаФайловИзКаталога" + XMLСтрока(РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
	Иначе
		КлючЗадания = "ОтправкаФайловИзКаталога";
	КонецЕсли;
	
	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить(ПараметрыПоиска);
	
	Задания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Ключ, Состояние", КлючЗадания, СостояниеФоновогоЗадания.Активно)); 
	Если Задания.Количество() <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ФоновоеЗадание = ФоновыеЗадания.Выполнить("РаспознаваниеДокументов.ОтправитьФайлыИзКаталогаНаРаспознавание", ПараметрыЗадания,
			КлючЗадания, НСтр("ru = 'Отправка файлов из каталога на распознавание'"));
	Исключение
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Невозможно выполнить фоновое задание с ключом: %1
			           |Описание ошибки:
			           |%2'"),
			КлючЗадания,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			РаспознаваниеДокументов.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьТипЗначенияСтрокой(ПереданноеЗначение) Экспорт
	
	Возврат РаспознаваниеДокументов.ПолучитьТипЗначенияСтрокой(ПереданноеЗначение);
	
КонецФункции

Функция ПараметрыСозданияНовогоЭлемента(ИмяЭлемента, ТипДокумента, Направление) Экспорт
	
	СвязанныеКолонки = Новый Массив;
	РаспознаваниеДокументовПереопределяемый.ПриЗаполненииПараметровСозданияНовогоЭлемента(
		СвязанныеКолонки,
		ИмяЭлемента,
		ТипДокумента,
		Направление);
	
	Возврат СвязанныеКолонки;
	
КонецФункции

Функция ТипРаспознанногоДокумента(Ссылка) Экспорт 
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ТипДокумента");
	
КонецФункции

Функция ПорогНоменклатурыДляГрупповогоСоздания() Экспорт
	
	ТекущиеНастройки = РегистрыСведений.ОбщиеНастройкиРаспознаваниеДокументов.ТекущиеНастройки();
	Возврат ТекущиеНастройки.ПорогНоменклатурыДляГрупповогоСоздания;
	
КонецФункции

Функция ФайлыРаспознанногоДокумента(РаспознанныйДокумент, ИдентификаторФормы) Экспорт
	
	УправлениеДоступом.ПроверитьЧтениеРазрешено(РаспознанныйДокумент);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИсходныеДанныеЗаданийРаспознаваниеДокументов.ИмяФайла КАК ИмяФайла,
		|	ИсходныеДанныеЗаданийРаспознаваниеДокументов.ИсходныйФайл КАК ИсходныйФайл,
		|	ИсходныеДанныеЗаданийРаспознаваниеДокументов.ДатаЗагрузки КАК ДатаЗагрузки,
		|	РезультатыОбработкиЗаданийРаспознаваниеДокументов.ИменаФайлов КАК ИменаФайлов
		|ИЗ
		|	РегистрСведений.РезультатыОбработкиЗаданийРаспознаваниеДокументов КАК РезультатыОбработкиЗаданийРаспознаваниеДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсходныеДанныеЗаданийРаспознаваниеДокументов КАК ИсходныеДанныеЗаданийРаспознаваниеДокументов
		|		ПО РезультатыОбработкиЗаданийРаспознаваниеДокументов.ИдентификаторФайла = ИсходныеДанныеЗаданийРаспознаваниеДокументов.ИдентификаторФайла
		|ГДЕ
		|	РезультатыОбработкиЗаданийРаспознаваниеДокументов.ИдентификаторРезультата = &ИдентификаторРезультата";
	
	Запрос.УстановитьПараметр("ИдентификаторРезультата", РаспознанныйДокумент.ИдентификаторРезультата);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат = Новый Массив;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ИмяФайла = ВыборкаДетальныеЗаписи.ИмяФайла;
		ДвоичныеДанные = ВыборкаДетальныеЗаписи.ИсходныйФайл.Получить();
		АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
		
		ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ИмяФайла, АдресХранилища);
		
		Результат.Добавить(ОписаниеФайла);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция КоличествоФайловРаспознанногоДокумента(РаспознанныйДокумент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(ИсходныеДанныеЗаданийРаспознаваниеДокументов.ИдентификаторФайла) КАК КоличествоФайлов
		|ИЗ
		|	РегистрСведений.РезультатыОбработкиЗаданийРаспознаваниеДокументов КАК РезультатыОбработкиЗаданийРаспознаваниеДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсходныеДанныеЗаданийРаспознаваниеДокументов КАК ИсходныеДанныеЗаданийРаспознаваниеДокументов
		|		ПО РезультатыОбработкиЗаданийРаспознаваниеДокументов.ИдентификаторФайла = ИсходныеДанныеЗаданийРаспознаваниеДокументов.ИдентификаторФайла
		|			И (РезультатыОбработкиЗаданийРаспознаваниеДокументов.ИдентификаторРезультата = &ИдентификаторРезультата)";
	
	Запрос.УстановитьПараметр("ИдентификаторРезультата", РаспознанныйДокумент.ИдентификаторРезультата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.КоличествоФайлов;
	
КонецФункции

#КонецОбласти

#Область УправлениеДоступом

Функция ДоступенНеоплаченныйРаспознанныйДокумент(РаспознанныйДокумент) Экспорт
	
	Если Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РаспознанныйДокумент, "Статус, ТребуетсяОплата, Ответственный", Истина);
		Если ЗначениеЗаполнено(ДанныеДокумента) И (ДанныеДокумента.ТребуетсяОплата
			ИЛИ ДанныеДокумента.Статус = Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Ошибка)
			И Пользователи.ТекущийПользователь() <> ДанныеДокумента.Ответственный Тогда
			
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Другие случаи должно проверить RLS
	Возврат Истина;
	
КонецФункции

#КонецОбласти


#КонецОбласти