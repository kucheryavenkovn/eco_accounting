////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Механизм расчета статусов оформления документов ИСМП.
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Для добавления нового документа-основания к документу ИСМП надо
//   - добавить ссылочный тип документа в определяемый тип с именем Основание<ИмяДокументаИСМП>
//   - добавить ссылочный тип документа в определяемый тип с именем ОснованиеСтатусыОформленияДокументовИСМП
//   - добавить объектный тип документа в определяемый тип с именем ОснованиеСтатусыОформленияДокументовИСМПОбъект
//
//   - дополнить процедуры общего модуля РасчетСтатусовОформленияИСМППереопределяемый
//     - ПриОпределенииИменРеквизитовДокументаДляРасчетаСтатусаОформленияДокументаИСМП()
//     - ПриОпределенииТекстаЗапросаДляРасчетаСтатусаОформленияДокументаИСМП()
//
// Для подключения документа ИСМП к этому механизму нужно:
//   - добавить его ссылочный тип в определяемый тип ДокументыИСМППоддерживающиеСтатусыОформления
//   - добавить его объектный тип в определяемый тип ДокументыИСМППоддерживающиеСтатусыОформленияОбъект
//   - добавить его объектный тип в определяемый тип ОснованиеСтатусыОформленияДокументовИСМПОбъект
//
//   - добавить в документ реквизит с именем ДокументОснование
//   - создать определяемый тип с именем Основание<ИмяДокументаИСМП>
//     - заполнить этот тип ссылочными типами документов-оснований
//   - создать определяемый тип с именем Основание<ИмяДокументаИСМП>Объект
//     - заполнить этот тип объектными типами документов-оснований
//
//   - добавить типы из определяемого типа Основание<ИмяДокументаИСМП> в ОснованиеСтатусыОформленияДокументовИСМП
//   - добавить типы из определяемого типа Основание<ИмяДокументаИСМП>Объект в ОснованиеСтатусыОформленияДокументовИСМПОбъект
//
//   - дополнить процедуры общего модуля РасчетСтатусовОформленияИСМППереопределяемый
//     - ПриОпределенииИменРеквизитовДокументаДляРасчетаСтатусаОформленияДокументаИСМП()
//     - ПриОпределенииТекстаЗапросаДляРасчетаСтатусаОформленияДокументаИСМП()
//
#Область ПрограммныйИнтерфейс

#Область ОбработчикиПодписокНаСобытияИСМП

// Обработчик подписки на событие "Перед записью" документов ИС МП, поддерживающих статусы оформления.
// 
// Параметры:
//   Источник        - ОпределяемыйТип.ДокументыИСМППоддерживающиеСтатусыОформленияОбъект - записываемый объект
//   Отказ           - Булево - параметр, определяющий будет ли записываться объект
//   РежимЗаписи     - РежимЗаписиДокумента     - не используется
//   РежимПроведения - РежимПроведенияДокумента - не используется
//
Процедура РассчитатьСтатусОформленияИСМППередЗаписьюДокументаОбработчик(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
		Возврат;
	КонецЕсли;

	Если Источник.ДополнительныеСвойства.Свойство("НеВыполнятьРасчетСтатуса") Тогда
		Возврат; // расчет статуса надо выполнить через вызов РассчитатьСтатусыОформленияДокументов()
	КонецЕсли;

	Если ЗначениеЗаполнено(Источник.Ссылка) Тогда

		УстановитьПривилегированныйРежим(Истина);

		Источник.ДополнительныеСвойства.Вставить("ПредыдущийДокументОснование", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ДокументОснование"));

	КонецЕсли;

КонецПроцедуры

// Обработчик подписки на событие "При записи" документов ИСМП, поддерживающих статусы оформления, и их документов-оснований.
//
// Параметры:
//   Источник - ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовИСМПОбъект - записываемый объект.
//   Отказ    - Булево - параметр, определяющий будет ли записываться объект.
//
Процедура РассчитатьСтатусОформленияИСМППриЗаписиДокументаОбработчик(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("НеВыполнятьРасчетСтатуса") Тогда
		Возврат; // расчет статуса надо выполнить через вызов РассчитатьСтатусыОформленияДокументов()
	КонецЕсли;
	
	// Записывается документ ЭДО: расчет статуса надо выполнить для связанных с ним документов-оснований
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЭлектронныйДокументИсходящий") Тогда
		ТребуетсяПересчет = Новый Массив;
		ЭлектронноеВзаимодействиеИСМППереопределяемый.ТребуетсяПересчетСтатусовОформления(Источник, ТребуетсяПересчет);
		Для Каждого ДокументыПоТипам Из ТребуетсяПересчет Цикл
			РассчитатьСтатусыОформленияДокументов(ДокументыПоТипам);
		КонецЦикла;
		
	КонецЕсли;
	
	Если Метаданные.ОпределяемыеТипы.ДокументыИСМППоддерживающиеСтатусыОформленияОбъект.Тип.СодержитТип(ТипЗнч(Источник)) Тогда
	
	// Записывается документ ИСМП.
	Если Источник.ДополнительныеСвойства.Свойство("ПредыдущийДокументОснование")
		И ЗначениеЗаполнено(Источник.ДополнительныеСвойства.ПредыдущийДокументОснование)
		И Источник.ДополнительныеСвойства.ПредыдущийДокументОснование <> Источник.ДокументОснование Тогда
		// Обновим статус оформления ИСМП для документа-основания, который был раньше указан в записываемом документе ИСМП.
		РассчитатьСтатусОформления(Источник.ДополнительныеСвойства.ПредыдущийДокументОснование);
	
	КонецЕсли;
	
	КонецЕсли;
	
	РассчитатьСтатусОформления(Источник);

КонецПроцедуры
#КонецОбласти

#Область СтатусыИСМП

// Рассчитывает статус оформления документа и записывает его в регистр сведений СтатусыОформленияДокументовИСМП.
//
// Параметры:
//   Источник - ОпределяемыйТип.ДокументыИСМППоддерживающиеСтатусыОформления,
//              ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовИСМП,
//              ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовИСМПОбъект - источник события расчета статуса.
//
Процедура РассчитатьСтатусОформления(Источник) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
		Возврат;
	КонецЕсли;

	// Определим тип реквизита Источник.
	ИсточникЭтоСсылка = Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Источник));
	
	ИсточникЭтоДокументИСМП = Метаданные.ОпределяемыеТипы.ДокументыИСМППоддерживающиеСтатусыОформленияОбъект.Тип.СодержитТип(ТипЗнч(Источник))
		ИЛИ Метаданные.ОпределяемыеТипы.ДокументыИСМППоддерживающиеСтатусыОформления.Тип.СодержитТип(ТипЗнч(Источник));

	РеквизитыИзИсточникаОбъекта = Ложь;

	// Определим документ-основание.
	Если ИсточникЭтоСсылка Тогда

		Если ИсточникЭтоДокументИСМП Тогда
			УстановитьПривилегированныйРежим(Истина);
			ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник, "ДокументОснование");
			УстановитьПривилегированныйРежим(Ложь);
		Иначе
			ДокументОснование = Источник;
		КонецЕсли;

	Иначе //источник-объект
		Если ИсточникЭтоДокументИСМП Тогда
			ДокументОснование = Источник.ДокументОснование;
		Иначе

			ДокументОснование = Источник.Ссылка;
			РеквизитыИзИсточникаОбъекта = Истина; // значения реквизитов в параметре Источник, а не в данных ИБ
		КонецЕсли;

	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументОснование) Тогда

		МассивДокументов = Новый Массив;
		МассивДокументов.Добавить(ДокументОснование);

		РассчитатьСтатусыОформленияДокументовОбщая(МассивДокументов, ?(РеквизитыИзИсточникаОбъекта, Источник, Неопределено));

	КонецЕсли;
	
	//Документ ИСМП может являться основанием для оформления другого документа ИСМП
	Если ИсточникЭтоДокументИСМП Тогда
		
		ДокументОснование = Неопределено;
		Если Метаданные.ОпределяемыеТипы.ОснованиеСтатусыОформленияДокументовИСМП.Тип.СодержитТип(ТипЗнч(Источник)) Тогда
			ДокументОснование = Источник;
		ИначеЕсли Метаданные.ОпределяемыеТипы.ОснованиеСтатусыОформленияДокументовИСМПОбъект.Тип.СодержитТип(ТипЗнч(Источник)) Тогда
			ДокументОснование = Источник.Ссылка;
			РеквизитыИзИсточникаОбъекта = Истина; // значения реквизитов в параметре Источник, а не в данных ИБ
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			
			МассивДокументов = Новый Массив;
			МассивДокументов.Добавить(ДокументОснование);
			РассчитатьСтатусыОформленияДокументовОбщая(МассивДокументов, ?(РеквизитыИзИсточникаОбъекта, Источник, Неопределено));
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Рассчитывает статусы оформления документов и записывает их в регистр сведений СтатусыОформленияДокументовИСМП.
//   ВАЖНО: все элементы массива Источники должны иметь одинаковый тип.
//
// Параметры:
//   Источники - Массив из ОпределяемыйТип.ДокументыИСМППоддерживающиеСтатусыОформления,
//                         ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовИСМП - источники события.
//
Процедура РассчитатьСтатусыОформленияДокументов(Источники) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	РассчитатьСтатусыОформленияДокументовОбщая(Источники);

КонецПроцедуры

// Устанавливает служебный признак в доп. свойствах объекта, который отключает автоматический пересчет статуса оформления.
// Следует использовать при программном формировании нескольких однотипных документов.
// После записи документов надо выполнить расчет их статусов оформления через РассчитатьСтатусыОформленияДокументов().
//
// Параметры:
//	Источник - ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовИСМПОбъект - записываемый объект.
//
Процедура НеВыполнятьРасчетСтатусаПриЗаписиОбъекта(Источник) Экспорт

	Источник.ДополнительныеСвойства.Вставить("НеВыполнятьРасчетСтатуса", Истина);

КонецПроцедуры

//Возвращает имя временной таблицы, в которую необходимо поместить данные документа-основания для документа ИСМП.
// Необходимо использовать в
// РасчетСтатусовОформленияИСМППереопределяемый.ПриОпределенииТекстаЗапросаДляРасчетаСтатусаОформления().
//
//Возвращаемое значение:
//   Строка - имя временной таблицы
//
Функция ИмяВременнойТаблицыДляВыборкиДанныхДокумента() Экспорт

	Возврат "ТоварыДокументаОснования";

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СтатусыИСМП

// Возвращает структуру с именами ключевых реквизитов документа-основания для документа ИСМП.
//   Значения этих реквизитов будут записаны в регистр сведений СтатусыОформленияДокументовИСМП.
//
// Параметры:
//   МетаданныеДокументаОснования - ОбъектМетаданных - метаданные документа-основания из ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовИСМП
//   МетаданныеДокументаИСМП      - ОбъектМетаданных - метаданные документа из ОпределяемыйТип.ДокументыИСМППоддерживающиеСтатусыОформления
//
// Возвращаемое значение:
//   Структура - реквизиты регистра "Статусы оформления документов ИСМП", значения ключей которых соответствуют способу
//     определения соответствующего реквизита ИСМП по правилам
//       Строка (непустая) - имя реквизита документа-основания из которого следует взять значение
//       ПроизвольноеЗначение, в т.ч. Строка (пустая) - в случае, если в МетаданныеДокументаОснования нет подходящего реквизита,
//         то в качестве значения нужно указать значение по-умолчанию (например, пустую ссылку соответствующего типа)
//     Доступные имена реквизитов:
//       * Дата, Номер - стандартные реквизиты документа-основания, переопределять их как правило не требуется.
//       * Ответственный - пользователь, оформивший документ-основание; значение по умолчанию "Ответственный".
//       * Контрагент - организация, от имени которой оформлен документ-основание; значение по умолчанию "Организация".
//
Функция СтруктураРеквизитовДляРасчетаСтатусаОформленияДокументов(МетаданныеДокументаОснования, МетаданныеДокументаИСМП)

	Реквизиты = Новый Структура;

	// Стандартные реквизиты
	Реквизиты.Вставить("Проведен", "Проведен");
	Реквизиты.Вставить("Дата", "Дата");
	Реквизиты.Вставить("Номер", "Номер");
	// Переопределяемые реквизиты
	Реквизиты.Вставить("Ответственный", "Ответственный");
	Реквизиты.Вставить("Контрагент", "Организация");

	РасчетСтатусовОформленияИСМППереопределяемый.ПриОпределенииИменРеквизитовДляРасчетаСтатусаОформления(МетаданныеДокументаОснования, МетаданныеДокументаИСМП, Реквизиты);

	Возврат Реквизиты;

КонецФункции

// Формирует временную таблицу, содержащую подконтрольную продукцию ИСМП из документов-оснований.
//   (см. РасчетСтатусовОформленияИСМППереопределяемый.ПриОпределенииТекстаЗапросаДляРасчетаСтатусаОформленияДокументаИСМП)
//
// Параметры:
//   МассивДокументов        - ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовИСМП - документы-основания для документа ИСМП.
//   МетаданныеДокументаИСМП - ОбъектМетаданных - метаданные документа из ОпределяемыйТип.ДокументыИСМППоддерживающиеСтатусыОформления.
//   МенеджерВТ              - МенеджерВременныхТаблиц - менеджер временных таблиц, в который будет помещена сформированная временная таблица.
//
// Возвращаемое значение:
//   Соответствие - 
//     Ключ     - ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовИСМП - элемент параметра МассивДокументов
//     Значение - Число                                                     - количество строк товаров в данном объекте.
//
Функция СформироватьТаблицуТоварыДокументовОснования(МассивДокументов,
		МетаданныеДокументаИСМП, МенеджерВТ = Неопределено)

		// Получим текст запроса выборки товаров из документа основания - создание ВТ ТоварыДокументаОснования
	ДополнительныеПараметрыЗапроса = Новый Структура;
	ДокументОснование = МассивДокументов[0];
	МетаданныеДокументаОснования = ДокументОснование.Метаданные();

	ТекстЗапросаВыборкиДанныхДокументаОснования = "ВЫБРАТЬ ПЕРВЫЕ 0
		|	НЕОПРЕДЕЛЕНО КАК Ссылка,
		|	ЛОЖЬ         КАК ЭтоДвижениеПриход,
		|	НЕОПРЕДЕЛЕНО КАК Номенклатура,
		|	НЕОПРЕДЕЛЕНО КАК Характеристика,
		|	НЕОПРЕДЕЛЕНО КАК Серия,
		|	0            КАК Количество
		|ПОМЕСТИТЬ %1";
	
	Если МетаданныеДокументаОснования = Метаданные.Документы.ПеремаркировкаТоваровИСМП Тогда
		
		ТекстЗапросаВыборкиДанныхДокументаОснования = 
		"ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка         КАК Ссылка,
		|	ИСТИНА                       КАК ЭтоДвижениеПриход,
		|	ТаблицаТовары.Номенклатура   КАК Номенклатура,
		|	ТаблицаТовары.Характеристика КАК Характеристика,
		|	НЕОПРЕДЕЛЕНО                 КАК Серия,
		|	СУММА(1)                     КАК Количество
		|ПОМЕСТИТЬ %1
		|ИЗ
		|	Документ.ПеремаркировкаТоваровИСМП.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка В (&МассивДокументов)
		|	И ТаблицаТовары.НовыйКодМаркировки = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.Пустаяссылка)
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Ссылка,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика
		|";
	
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.МаркировкаТоваровИСМП Тогда
		
		ТекстЗапросаВыборкиДанныхДокументаОснования = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка            КАК Ссылка,
		|	ВложенныйЗапрос.Номенклатура      КАК Номенклатура,
		|	ВложенныйЗапрос.Характеристика    КАК Характеристика,
		|	ВложенныйЗапрос.Серия             КАК Серия,
		|	ИСТИНА                            КАК ЭтоДвижениеПриход,
		|	СУММА(ВложенныйЗапрос.Количество) КАК Количество
		|ПОМЕСТИТЬ %1
		|ИЗ
		|(
		|ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка         КАК Ссылка,
		|	ТаблицаТовары.Номенклатура   КАК Номенклатура,
		|	ТаблицаТовары.Характеристика КАК Характеристика,
		|	ТаблицаТовары.Серия          КАК Серия,
		|	ТаблицаТовары.Количество     КАК Количество
		|ИЗ
		|	Документ.МаркировкаТоваровИСМП.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка В (&МассивДокументов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ШтрихкодыУпаковок.Ссылка КАК Ссылка,
		|	Штрихкоды.Номенклатура   КАК Номенклатура,
		|	Штрихкоды.Характеристика КАК Характеристика,
		|	Штрихкоды.Серия          КАК Серия,
		|	-ВЫБОР КОГДА Штрихкоды.Количество = 0 ТОГДА 1 ИНАЧЕ Штрихкоды.Количество КОНЕЦ КАК Количество
		|ИЗ
		|	Документ.МаркировкаТоваровИСМП.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК Штрихкоды
		|	ПО Штрихкоды.Ссылка = ШтрихкодыУпаковок.ШтрихкодУпаковки
		|ГДЕ
		|	ШтрихкодыУпаковок.Ссылка В (&МассивДокументов)
		|) КАК ВложенныйЗапрос
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Ссылка,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.Характеристика,
		|	ВложенныйЗапрос.Серия
		|ИМЕЮЩИЕ
		|	СУММА(ВложенныйЗапрос.Количество) > 0
		|
		|";
	
	КонецЕсли;
	
	РасчетСтатусовОформленияИСМППереопределяемый.ПриОпределенииТекстаЗапросаДляРасчетаСтатусаОформления(МетаданныеДокументаОснования, МетаданныеДокументаИСМП, ТекстЗапросаВыборкиДанныхДокументаОснования, ДополнительныеПараметрыЗапроса);

	Если ТекстЗапросаВыборкиДанныхДокументаОснования = Неопределено Тогда

		УточнениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Документ-основание ""%1"" для документа ИСМП ""%2""
			|не поддерживается в процедуре ""РасчетСтатусовОформленияИСМППереопределяемый.ПриОпределенииТекстаЗапросаДляРасчетаСтатусаОформления"".'"), МетаданныеДокументаОснования.Имя, МетаданныеДокументаИСМП.Имя);

		ВызватьИсключение ИнтеграцияИСКлиентСервер.ТекстОшибки(ИнтеграцияИСМПКлиентСервер.ПредставлениеПодсистемы(), УточнениеОшибки); // ошибка переопределения ПриОпределенииТекстаЗапросаДляРасчетаСтатусаОформленияДокументаИСМП
	КонецЕсли;

	ТекстЗапроса = ТекстЗапросаВыборкиДанныхДокументаОснования + "
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка КАК Ссылка,
		|	СУММА(1)             КАК КоличествоСтрок
		|ИЗ
		|	%1 КАК ТаблицаТовары
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Ссылка";

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);

	Для Каждого КлючИЗначение Из ДополнительныеПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;

	Если МенеджерВТ <> Неопределено Тогда
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Иначе
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;

	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ИмяВременнойТаблицыДляВыборкиДанныхДокумента());

	Результат = МассивВСоответствие(МассивДокументов, 0);
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);

	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.Ссылка, Выборка.КоличествоСтрок);
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Определяет текущий статус оформления документов ИСМП.
//
//Параметры:
//   МассивДокументов        - Массив Из ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовИСМП - документы-основание для документа ИСМП
//   МетаданныеДокументаИСМП - ОбъектМетаданных - метаданные документа из ОпределяемыйТип.ДокументыИСМППоддерживающиеСтатусыОформления
//   МенеджерВТ              - МенеджерВременныхТаблиц - (см. СформироватьТаблицуТоварыДокументовОснования)
//
// Возвращаемое значение:
//   Соответствие - 
//     Ключ     - элемент параметра МассивДокументов
//     Значение - Структура с полями:
//       СтатусОформления         - статус оформления объекта,
//       ДополнительнаяИнформация - информация для отладки.
//
Функция ОпределитьСтатусыОформленияДокументов(МассивДокументов,
		МетаданныеДокументаИСМП, МенеджерВТ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Если МенеджерВТ = Неопределено Тогда
	
	// Сформируем таблицу товаров ИСМП из документа основания
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

		СформироватьТаблицуТоварыДокументовОснования(МассивДокументов, МетаданныеДокументаИСМП, Запрос.МенеджерВременныхТаблиц);

	Иначе

	// Таблица товаров сформирована ранее
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;

	КонецЕсли;
	
	// Соберем текст запроса выборки данных для определения статуса оформления документа ИСМП.
	Если МетаданныеДокументаИСМП = Метаданные.Документы.ЗаказНаЭмиссиюКодовМаркировкиСУЗ Тогда
		
		ШаблонЗапросаВТОформленныеДокументы =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПулКодовМаркировки.ДокументОснование КАК ДокументОснование
		|ПОМЕСТИТЬ ОформленныеОснования%1
		|ИЗ
		|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировки
		|ГДЕ
		|	ПулКодовМаркировки.ДокументОснование В (&МассивДокументов)
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументОснование
		|;
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ДокументОснование КАК ДокументОснование,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ОформленныеДокументы%1
		|ИЗ
		|	Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ КАК ЗаказНаЭмиссиюКодовМаркировкиСУЗ
		|ГДЕ
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ДокументОснование В (&МассивДокументов)
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка";
		
	Иначе
	
	ШаблонЗапросаВТОформленныеДокументы = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокументы.Ссылка КАК Ссылка,
		|	ТаблицаДокументы.ДокументОснование КАК ДокументОснование
		|ПОМЕСТИТЬ ОформленныеДокументы%1
		|ИЗ
		|	Документ.%1 КАК ТаблицаДокументы
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовИСМП КАК Статусы
		|		ПО Статусы.Документ = ТаблицаДокументы.Ссылка
		|ГДЕ
		|	ТаблицаДокументы.ДокументОснование В (&МассивДокументов)
		|	И ТаблицаДокументы.Проведен
		|	И НЕ Статусы.Статус В (&КонечныеСтатусы%1)
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка";
	
	КонецЕсли;
	
	ШаблонЗапросаОформленныеТоварыПоПулу = "
	|//////////////////////Коды маркировки по чужим заказам////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОформленныеТовары.ДокументОснование КАК ДокументОснование,
	|	ИСТИНА                              КАК ЭтоДвижениеПриход,
	|	ОформленныеТовары.Номенклатура      КАК Номенклатура,
	|	ОформленныеТовары.Характеристика    КАК Характеристика,
	|	Неопределено                        КАК Серия,
	|	0                                   КАК План,
	|	1                                   КАК Факт
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ОформленныеТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОформленныеОснования%1 КАК ОформленныеДокументы
	|	ПО ОформленныеТовары.ДокументОснование = ОформленныеДокументы.ДокументОснование
	|ГДЕ
	|	ОформленныеТовары.ЗаказНаЭмиссию.ДокументОснование <> ОформленныеДокументы.ДокументОснование
	|
	|//////////////////////Коды маркировки по своим заказам////////////////////////////////////////////////
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОформленныеДокументы.ДокументОснование,
	|	ИСТИНА,
	|	ОформленныеТовары.Номенклатура,
	|	ОформленныеТовары.Характеристика,
	|	Неопределено,
	|	0,
	|	Количество
	|ИЗ
	|	Документ.%1.Товары КАК ОформленныеТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОформленныеДокументы%1 КАК ОформленныеДокументы
	|		ПО ОформленныеДокументы.Ссылка = ОформленныеТовары.Ссылка
	|
	|//////////////////////Свои коды маркировки отданные по чужим заказам считать не нужно/////////////////
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОформленныеДокументы.ДокументОснование,
	|	ИСТИНА,
	|	ОформленныеТовары.Номенклатура,
	|	ОформленныеТовары.Характеристика,
	|	Неопределено,
	|	0,
	|	-1
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ОформленныеТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОформленныеДокументы%1 КАК ОформленныеДокументы
	|		ПО ОформленныеТовары.ЗаказНаЭмиссию = ОформленныеДокументы.Ссылка
	|ГДЕ
	|	ОформленныеТовары.ДокументОснование <> ОформленныеДокументы.ДокументОснование
	|";
	
	ШаблонЗапросаОформленныеТовары = "
		|	ВЫБРАТЬ
		|		ОформленныеДокументы.ДокументОснование КАК ДокументОснование,
		|		%3 КАК ЭтоДвижениеПриход,
		|		ОформленныеТовары.Номенклатура   КАК Номенклатура,
		|		ОформленныеТовары.Характеристика КАК Характеристика,
		|		ОформленныеТовары.Серия          КАК Серия,
		|		0                                КАК План,
		|		ВЫБОР КОГДА ОформленныеТовары.%4 < 0 ТОГДА -1 ИНАЧЕ 1 КОНЕЦ * ОформленныеТовары.%4 КАК Факт
		|	ИЗ
		|		Документ.%1.%2 КАК ОформленныеТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОформленныеДокументы%1 КАК ОформленныеДокументы
		|			ПО ОформленныеТовары.Ссылка = ОформленныеДокументы.Ссылка";

	ШаблонЗапросаОформленныеТоварыБезСерийБезКоличества = "
		|	ВЫБРАТЬ
		|		ОформленныеДокументы.ДокументОснование КАК ДокументОснование,
		|		%3 КАК ЭтоДвижениеПриход,
		|		ОформленныеТовары.Номенклатура   КАК Номенклатура,
		|		ОформленныеТовары.Характеристика КАК Характеристика,
		|		Неопределено                     КАК Серия,
		|		0                                КАК План,
		|		1                                КАК Факт
		|	ИЗ
		|		Документ.%1.%2 КАК ОформленныеТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОформленныеДокументы%1 КАК ОформленныеДокументы
		|			ПО ОформленныеТовары.Ссылка = ОформленныеДокументы.Ссылка";

	ШаблонРазделительЗапросов = "
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|";

	ТекстЗапросаВТОформленныеДокументы = "";
	ТекстЗапросаОформленныеТовары = "";

	ИмяДокументаИСМП = МетаданныеДокументаИСМП.Имя;

	ЭтоДвижениеПриход = "ИСТИНА";

	ТекстЗапросаВТОформленныеДокументы = ТекстЗапросаВТОформленныеДокументы
		+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗапросаВТОформленныеДокументы, ИмяДокументаИСМП)
		+ ШаблонРазделительЗапросов;

	Если МетаданныеДокументаИСМП = Метаданные.Документы.ЗаказНаЭмиссиюКодовМаркировкиСУЗ Тогда
	
		ТекстЗапросаОформленныеТовары = ТекстЗапросаОформленныеТовары
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗапросаОформленныеТоварыПоПулу,
				ИмяДокументаИСМП);
		
	ИначеЕсли МетаданныеДокументаИСМП = Метаданные.Документы.ПеремаркировкаТоваровИСМП Тогда 
		
		ТекстЗапросаОформленныеТовары = ТекстЗапросаОформленныеТовары
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗапросаОформленныеТоварыБезСерийБезКоличества,
				ИмяДокументаИСМП,
				"Товары",
				ЭтоДвижениеПриход);
		
	Иначе
		
		ТекстЗапросаОформленныеТовары = ТекстЗапросаОформленныеТовары
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗапросаОформленныеТовары,
				ИмяДокументаИСМП,
				"Товары",
				ЭтоДвижениеПриход,
				"Количество");
		
	КонецЕсли;

	Запрос.УстановитьПараметр("КонечныеСтатусы"
		+ ИмяДокументаИСМП, Документы[ИмяДокументаИСМП].КонечныеСтатусы());

	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ТекстЗапросаВТОформленныеДокументы);
	ЧастиЗапроса.Добавить("
		|ВЫБРАТЬ
		|	ТоварыКОформлению.ДокументОснование КАК ДокументОснование,
		|	ТоварыКОформлению.ЭтоДвижениеПриход КАК ЭтоДвижениеПриход,
		|	ТоварыКОформлению.Номенклатура      КАК Номенклатура,
		|	ТоварыКОформлению.Характеристика    КАК Характеристика,
		|	ТоварыКОформлению.Серия             КАК Серия,
		|	СУММА(ТоварыКОформлению.План)       КАК План,
		|	СУММА(ТоварыКОформлению.Факт)       КАК Факт
		|ПОМЕСТИТЬ Результат
		|ИЗ
		|	(ВЫБРАТЬ
		|		Товары.Ссылка            КАК ДокументОснование,
		|		Товары.ЭтоДвижениеПриход КАК ЭтоДвижениеПриход,
		|		Товары.Номенклатура      КАК Номенклатура,
		|		Товары.Характеристика    КАК Характеристика,
		|		Товары.Серия             КАК Серия,
		|		Товары.Количество        КАК План,
		|		0                        КАК Факт
		|	ИЗ
		|		" + ИмяВременнойТаблицыДляВыборкиДанныхДокумента() + " КАК Товары
		|	ОБЪЕДИНИТЬ ВСЕ
		|");
	ЧастиЗапроса.Добавить(ТекстЗапросаОформленныеТовары);
	ЧастиЗапроса.Добавить("
		|	) КАК ТоварыКОформлению
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКОформлению.ДокументОснование,
		|	ТоварыКОформлению.ЭтоДвижениеПриход,
		|	ТоварыКОформлению.Номенклатура,
		|	ТоварыКОформлению.Характеристика,
		|	ТоварыКОформлению.Серия
		|");
	ЧастиЗапроса.Добавить(ШаблонРазделительЗапросов);
	ЧастиЗапроса.Добавить("
		|ВЫБРАТЬ
		|	Т.ДокументОснование КАК ДокументОснование,
		|	МАКСИМУМ(ВЫБОР КОГДА Т.Факт > 0 И Т.План > 0       ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК ЕстьОформленныеТовары,
		|	МАКСИМУМ(ВЫБОР КОГДА Т.Факт >= 0 И Т.План > Т.Факт ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК ЕстьНеОформленныеТовары,
		|	МАКСИМУМ(ВЫБОР КОГДА Т.План <= Т.Факт              ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК ЕстьПолностьюОформленныеТовары,
		|	МАКСИМУМ(ВЫБОР КОГДА Т.План < Т.Факт               ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК ЕстьОшибкиОформления
		|ПОМЕСТИТЬ РезультатПоДокументам
		|ИЗ
		|	Результат КАК Т
		|СГРУППИРОВАТЬ ПО
		|	Т.ДокументОснование");
	ЧастиЗапроса.Добавить(ШаблонРазделительЗапросов);
	ЧастиЗапроса.Добавить("
		|ВЫБРАТЬ
		|	Т.ДокументОснование КАК ДокументОснование,
		|	ВЫБОР
		|		КОГДА Т.ЕстьОшибкиОформления
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовГосИС.ЕстьОшибкиОформления)
		|		КОГДА Т.ЕстьПолностьюОформленныеТовары И НЕ Т.ЕстьНеОформленныеТовары
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовГосИС.Оформлено)
		|		КОГДА Т.ЕстьПолностьюОформленныеТовары И Т.ЕстьНеОформленныеТовары
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовГосИС.ОформленоЧастично)
		|		КОГДА Т.ЕстьОформленныеТовары
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовГосИС.ОформленоЧастично)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовГосИС.НеОформлено)
		|	КОНЕЦ КАК СтатусОформления
		|ИЗ
		|	РезультатПоДокументам КАК Т");

	Запрос.Текст = СтрСоединить(ЧастиЗапроса);

	// Получим данные и определим статус оформления документа ИСМП.
	СтатусОформления = Новый Структура("СтатусОформления, ДополнительнаяИнформация", Перечисления.СтатусыОформленияДокументовГосИС.НеОформлено, Неопределено);

	Результат = МассивВСоответствие(МассивДокументов, СтатусОформления);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);

	Запрос.Текст = "ВЫБРАТЬ * ИЗ Результат КАК Т ГДЕ Т.ДокументОснование = &ДокументОснование";

	Пока Выборка.Следующий() Цикл

		Запрос.УстановитьПараметр("ДокументОснование", Выборка.ДокументОснование);

		// Сохраним данные, использовавшиеся для расчета статуса.
		УстановитьПривилегированныйРежим(Истина);
		ТаблицаДляРасчетаСтатуса = Запрос.Выполнить().Выгрузить();
		УстановитьПривилегированныйРежим(Ложь);

		ТаблицаДляРасчетаСтатуса.Колонки.ЭтоДвижениеПриход.Заголовок = НСтр("ru='Приходное движение'");
		ТаблицаДляРасчетаСтатуса.Колонки.План.Заголовок = НСтр("ru='По документу-основанию'");
		ТаблицаДляРасчетаСтатуса.Колонки.Факт.Заголовок = НСтр("ru='По документу ИСМП'");

		ДополнительнаяИнформация = Новый ХранилищеЗначения(ТаблицаДляРасчетаСтатуса, Новый СжатиеДанных(9));
		
		СтатусОформления = Новый Структура("СтатусОформления, ДополнительнаяИнформация", Выборка.СтатусОформления, ДополнительнаяИнформация);
		
		// Особенности: заказ кодов маркировки возможен по перемаркировке и вводу в оборот по отсутствующим кодам, 
		//  но он не может быть в статусе ЕстьОшибкиОформления по этим документам
		// (после получения кодов они будут использованы в документе ИСМП изменив ожидаемое количество)
		Если Выборка.СтатусОформления = Перечисления.СтатусыОформленияДокументовГосИС.ЕстьОшибкиОформления Тогда
			
			ТипОснования = ТипЗнч(Выборка.ДокументОснование);
			Если ТипОснования = Тип("ДокументСсылка.МаркировкаТоваровИСМП")
				Или ТипОснования = Тип("ДокументСсылка.ПеремаркировкаТоваровИСМП") Тогда
				
				СтатусОформления.СтатусОформления = Перечисления.СтатусыОформленияДокументовГосИС.Оформлено;
				
			КонецЕсли;
		КонецЕсли;
		
		Результат.Вставить(Выборка.ДокументОснование, СтатусОформления);

	КонецЦикла;

	Возврат Результат;

КонецФункции

// Записывает статусы оформления документов ИСМП в регистр сведений СтатусыОформленияДокументовИСМП.
//
// Параметры:
//   МассивДокументов        - Массив Из ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовИСМП - документы-основания для документа ИСМП
//   МетаданныеДокументаИСМП - ОбъектМетаданных - метаданные документа из ОпределяемыйТип.ДокументыИСМППоддерживающиеСтатусыОформления
//   ТаблицаРеквизитов       - ТаблицаЗначений - значения реквизитов элементов МассивДокументов
// 
Процедура ЗаписатьСтатусОформленияДокументов(МассивДокументов, МетаданныеДокументаИСМП, ТаблицаРеквизитов)

	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	ПустаяСсылка = Документы[МетаданныеДокументаИСМП.Имя].ПустаяСсылка();

	// Проверим наличие записей регистра статусов.
	ЕстьЗаписиРегистра = РегистрыСведений.СтатусыОформленияДокументовИСМП.ДокументыОснованияСЗаписямиРегистра(МассивДокументов, ПустаяСсылка);

	КоличествоСтрокДокументовОснования = СформироватьТаблицуТоварыДокументовОснования(
		МассивДокументов,
		МетаданныеДокументаИСМП,
		МенеджерВТ);
	
	СтатусыОформленияДокументов = ОпределитьСтатусыОформленияДокументов(
		МассивДокументов,
		МетаданныеДокументаИСМП,
		МенеджерВТ);
	
	Для Каждого ДокументОснование Из МассивДокументов Цикл
	
		ЗначенияРеквизитов = ТаблицаРеквизитов.Найти(ДокументОснование, "ДокументОснование");
		ЕстьЗаписьРегистра = (ЕстьЗаписиРегистра.Неоформленные.Найти(ДокументОснование) <> Неопределено);
		ЗаписьВАрхиве      = (ЕстьЗаписиРегистра.Архивные.Найти(ДокументОснование) <> Неопределено);
		ТребуетсяОформление = ЗначениеЗаполнено(КоличествоСтрокДокументовОснования[ДокументОснование]);

		Если ЕстьЗаписьРегистра И НЕ ТребуетсяОформление Тогда

			РегистрыСведений.СтатусыОформленияДокументовИСМП.УдалитьЗаписьРегистра(ДокументОснование, ПустаяСсылка);

		ИначеЕсли ЕстьЗаписьРегистра ИЛИ ТребуетсяОформление Тогда

			СтатусДокумента = СтатусыОформленияДокументов[ДокументОснование];
			ДанныеЗаписиСтатуса = РегистрыСведений.СтатусыОформленияДокументовИСМП.ЗначенияПолейЗаписиРегистраПоУмолчанию(ДокументОснование, ПустаяСсылка);

			ЗаполнитьЗначенияСвойств(ДанныеЗаписиСтатуса, ЗначенияРеквизитов);
			ЗаполнитьЗначенияСвойств(ДанныеЗаписиСтатуса, СтатусДокумента);
			ДанныеЗаписиСтатуса.Архивный = ЗаписьВАрхиве;

			РегистрыСведений.СтатусыОформленияДокументовИСМП.ВыполнитьЗаписьВРегистр(ДанныеЗаписиСтатуса);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Служебная. Готовит данные к расчету статусов оформления.
//
// Параметры:
//   Источники      - Массив из ОпределяемыйТип.ДокументыИСМППоддерживающиеСтатусыОформления,
//                              ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовИСМП.
//   ИсточникОбъект - ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовИСМПОбъект, Неопределено.
//
Процедура РассчитатьСтатусыОформленияДокументовОбщая(Источники,
		ИсточникОбъект = Неопределено)

	Если НЕ ЗначениеЗаполнено(Источники) Тогда
		Возврат;
	КонецЕсли;

	Источник = Источники[0];
	МетаданныеИсточника = Источник.Метаданные();
	МетаРеквизитОснование = ИнтеграцияИС.РеквизитДокументОснованиеДокументаИС(МетаданныеИсточника);
	
	ИсточникДокументИСМП = Метаданные.ОпределяемыеТипы.ДокументыИСМППоддерживающиеСтатусыОформления.Тип.СодержитТип(ТипЗнч(Источник));
	ИсточникДокументОснование = Метаданные.ОпределяемыеТипы.ОснованиеСтатусыОформленияДокументовИСМП.Тип.СодержитТип(ТипЗнч(Источник));
	
	// Определим документы-основания.
	Если ИсточникДокументИСМП Тогда

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Источники", Источники);
		Запрос.УстановитьПараметр("ПустаяСсылка", МетаРеквизитОснование.Тип.ПривестиЗначение(Неопределено));

		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТИПЗНАЧЕНИЯ(Т.ДокументОснование) КАК ТипОснования,
			|	Т.ДокументОснование КАК ДокументОснование
			|ИЗ
			|	Документ.%1 КАК Т
			|ГДЕ
			|	Т.Ссылка В (&Источники)
			|	И Т.ДокументОснование <> &ПустаяСсылка
			|ИТОГИ ПО
			|	ТипОснования";

		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, МетаданныеИсточника.Имя);

		УстановитьПривилегированныйРежим(Истина);
		ВыборкаТипов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		УстановитьПривилегированныйРежим(Ложь);

		Пока ВыборкаТипов.Следующий() Цикл

			МассивДокументов = Новый Массив;
			ВыборкаДокументов = ВыборкаТипов.Выбрать();

			Пока ВыборкаДокументов.Следующий() Цикл
				МассивДокументов.Добавить(ВыборкаДокументов.ДокументОснование);
			КонецЦикла;

			РассчитатьСтатусыОформленияДокументовОснований(МассивДокументов);

		КонецЦикла;

	КонецЕсли;
	
	Если ИсточникДокументОснование Тогда
		
		РассчитатьСтатусыОформленияДокументовОснований(Источники, ИсточникОбъект);
		
	КонецЕсли;

КонецПроцедуры

//Служебная. Рассчитывает и записывает статусы оформления.
//
//Параметры:
//   МассивДокументов - Массив из ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовИСМП.
//   ИсточникОбъект   - ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовИСМПОбъект.
//
Процедура РассчитатьСтатусыОформленияДокументовОснований(МассивДокументов,
		ИсточникОбъект = Неопределено)

	Если НЕ ЗначениеЗаполнено(МассивДокументов) Тогда
		Возврат;
	КонецЕсли;

	ДокументОснование = МассивДокументов[0];
	ТипДокументОснование = ТипЗнч(ДокументОснование);
	МетаданныеДокументаОснования = ДокументОснование.Метаданные();

	Если НЕ Метаданные.ОпределяемыеТипы.ОснованиеСтатусыОформленияДокументовИСМП.Тип.СодержитТип(ТипДокументОснование) Тогда

		УточнениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ссылочный тип ""%1"" не входит в состав определяемого типа ""ОснованиеСтатусыОформленияДокументовИСМП"".'"), СокрЛП(ТипДокументОснование));

		ВызватьИсключение ИнтеграцияИСКлиентСервер.ТекстОшибки(ИнтеграцияИСМПКлиентСервер.ПредставлениеПодсистемы(), УточнениеОшибки); // ошибка состава определяемого типа ОснованиеСтатусыОформленияДокументовИСМП
	КонецЕсли;

	// Определим документы ИСМП, которые могут оформляться на основании ДокументОснование.
	ДокументыИСМП = ИнтеграцияИСМПВызовСервера.ИменаДокументовДляДокументаОснования(ДокументОснование);

	Если НЕ ЗначениеЗаполнено(ДокументыИСМП) Тогда

		УточнениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ссылочный тип ""%1"" не входит в состав ни одного из определяемых типов вида ""Основание<ИмяДокументаИСМП>"".'"), СокрЛП(ТипДокументОснование));

		ВызватьИсключение ИнтеграцияИСКлиентСервер.ТекстОшибки(ИнтеграцияИСМПКлиентСервер.ПредставлениеПодсистемы(), УточнениеОшибки); // ошибка составов определяемых типов Основание<ИмяДокументаИСМП>
	КонецЕсли;
	
	// Заполним статус оформления для каждого документа ИСМП.
	Для Каждого ТекущийДокумент Из ДокументыИСМП Цикл

		МетаданныеДокумента = Метаданные.Документы[ТекущийДокумент];

		СтруктураРеквизитов = СтруктураРеквизитовДляРасчетаСтатусаОформленияДокументов(МетаданныеДокументаОснования, МетаданныеДокумента);

		СтруктураРеквизитов.Вставить("ДокументОснование", "Ссылка");

		ПредопределенныеЗначения = Новый Структура;
		СоставныеРеквизиты = Новый Структура;
		ТаблицаРеквизитов = Новый ТаблицаЗначений;
		МетаРеквизиты = Метаданные.РегистрыСведений.СтатусыОформленияДокументовИСМП.Реквизиты;

		Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл

			МетаРеквизит = МетаРеквизиты.Найти(КлючИЗначение.Ключ);

			Если МетаРеквизит = Неопределено Тогда
				Если КлючИЗначение.Ключ = "ДокументОснование" Тогда
					ТаблицаРеквизитов.Колонки.Добавить(КлючИЗначение.Ключ, Метаданные.ОпределяемыеТипы.ОснованиеСтатусыОформленияДокументовИСМП.Тип);
				Иначе
					ТаблицаРеквизитов.Колонки.Добавить(КлючИЗначение.Ключ); // вспомогательный реквизит
				КонецЕсли;
			Иначе
				ТаблицаРеквизитов.Колонки.Добавить(КлючИЗначение.Ключ, МетаРеквизит.Тип); // реквизит регистра статусов
			КонецЕсли;

			Если ТипЗнч(КлючИЗначение.Значение) <> Тип("Строка")
					ИЛИ ПустаяСтрока(КлючИЗначение.Значение) Тогда
					// Значение уже определено в ПриОпределенииИменРеквизитовДокументаДляРасчетаСтатусаОформленияДокументаИСМП.
				ПредопределенныеЗначения.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			ИначеЕсли СтрНайти(КлючИЗначение.Значение, ",") > 0 Тогда
				СоставныеРеквизиты.Вставить(КлючИЗначение.Ключ, СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючИЗначение.Значение, ",", , Истина));
			КонецЕсли;

		КонецЦикла;

		Если ИсточникОбъект <> Неопределено Тогда

		// Процедура вызвана из обработчика события записи документа-основания.
			// Прочитаем реквизиты из самого объекта документа-основания.
			СтрокаРеквизитов = ТаблицаРеквизитов.Добавить();

			Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл

				Если НЕ ПредопределенныеЗначения.Свойство(КлючИЗначение.Ключ) Тогда

					Если СоставныеРеквизиты.Свойство(КлючИЗначение.Ключ) Тогда

						Для Каждого ТекущийРеквизит Из СоставныеРеквизиты[КлючИЗначение.Ключ] Цикл

							ЗначениеРеквизита = ЗначениеРеквизитаОбъекта(ИсточникОбъект, ТекущийРеквизит);

							Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
								СтрокаРеквизитов[КлючИЗначение.Ключ] = ЗначениеРеквизита;
							КонецЕсли;

						КонецЦикла;

					Иначе

						СтрокаРеквизитов[КлючИЗначение.Ключ] = ЗначениеРеквизитаОбъекта(ИсточникОбъект, КлючИЗначение.Значение);

					КонецЕсли;

				КонецЕсли;

			КонецЦикла;

		Иначе

		// Прочитаем реквизиты документов-оснований из ИБ.
			ИменаРеквизитов = "";
			ИменаРеквизитовТЧ = "";
			СтруктураРеквизитовОснования = Новый Структура; // поменянные местами Ключ и Значение из СтруктураРеквизитов
			СтруктураРеквизитовТЧОснования = Новый Соответствие; // поменянные местами Ключ и Значение из СтруктураРеквизитов
			Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл

				Если НЕ ПредопределенныеЗначения.Свойство(КлючИЗначение.Ключ) Тогда

					Если СтрНайти(КлючИЗначение.Значение, ".") = 0 Тогда
						ИменаРеквизитов = ИменаРеквизитов + ?(ИменаРеквизитов = "", "", ", ")
							+ КлючИЗначение.Значение;
					Иначе
						ИменаРеквизитовТЧ = ИменаРеквизитовТЧ
							+ ?(ИменаРеквизитовТЧ = "", "", ", ") + КлючИЗначение.Значение;
					КонецЕсли;

					Если СоставныеРеквизиты.Свойство(КлючИЗначение.Ключ) Тогда
						Для Каждого ТекущийРеквизит Из СоставныеРеквизиты[КлючИЗначение.Ключ] Цикл
							Если СтрНайти(ТекущийРеквизит, ".") = 0 Тогда
								Если СтруктураРеквизитовОснования.Свойство(ТекущийРеквизит) Тогда
									СтруктураРеквизитовОснования.Вставить(ТекущийРеквизит, СтруктураРеквизитовОснования[ТекущийРеквизит]
										+ "," + КлючИЗначение.Ключ);
								Иначе
									СтруктураРеквизитовОснования.Вставить(ТекущийРеквизит, КлючИЗначение.Ключ);
								КонецЕсли;
							Иначе
								Если СтруктураРеквизитовТЧОснования.Получить(ТекущийРеквизит) <> Неопределено Тогда
									СтруктураРеквизитовТЧОснования.Вставить(ТекущийРеквизит, СтруктураРеквизитовТЧОснования.Получить(ТекущийРеквизит)
										+ "," + КлючИЗначение.Ключ);
								Иначе
									СтруктураРеквизитовТЧОснования.Вставить(ТекущийРеквизит, КлючИЗначение.Ключ);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					Иначе
						Если СтрНайти(КлючИЗначение.Значение, ".") = 0 Тогда
							Если СтруктураРеквизитовОснования.Свойство(КлючИЗначение.Значение) Тогда
								СтруктураРеквизитовОснования.Вставить(КлючИЗначение.Значение, СтруктураРеквизитовОснования[КлючИЗначение.Значение]
									+ "," + КлючИЗначение.Ключ);
							Иначе
								СтруктураРеквизитовОснования.Вставить(КлючИЗначение.Значение, КлючИЗначение.Ключ);
							КонецЕсли;
						Иначе
							Если СтруктураРеквизитовТЧОснования.Получить(КлючИЗначение.Значение) <> Неопределено Тогда
								СтруктураРеквизитовТЧОснования.Вставить(КлючИЗначение.Значение, СтруктураРеквизитовТЧОснования.Получить(КлючИЗначение.Значение)
									+ "," + КлючИЗначение.Ключ);
							Иначе
								СтруктураРеквизитовТЧОснования.Вставить(КлючИЗначение.Значение, КлючИЗначение.Ключ);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;

				КонецЕсли;

			КонецЦикла;

			УстановитьПривилегированныйРежим(Истина);

			ЗначенияРеквизитовОбъектов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивДокументов, ИменаРеквизитов);

			Для Каждого РеквизитыДокумента Из ЗначенияРеквизитовОбъектов Цикл

				СтрокаРеквизитов = ТаблицаРеквизитов.Добавить();

				Для Каждого ЗначенияРеквизитовДокумента Из РеквизитыДокумента.Значение Цикл

					ИменаРеквизитов = СтруктураРеквизитовОснования[ЗначенияРеквизитовДокумента.Ключ];

					Для Каждого ИмяРеквизита Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаРеквизитов, ",", , Истина) Цикл

						Если НЕ ЗначениеЗаполнено(СтрокаРеквизитов[ИмяРеквизита]) Тогда
							СтрокаРеквизитов[ИмяРеквизита] = ЗначенияРеквизитовДокумента.Значение;
						КонецЕсли;

					КонецЦикла;

				КонецЦикла;

			КонецЦикла;

			Если СтруктураРеквизитовТЧОснования.Количество() > 0 Тогда

				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);

				ШаблонЗапроса = "ВЫБРАТЬ
					|	Т.Ссылка КАК Ссылка,
					|	""%4"" КАК ИменаРеквизита,
					|	Т.%3 КАК ЗначениеРеквизита
					|ИЗ
					|	Документ.%1.%2 КАК Т
					|ГДЕ
					|	Т.Ссылка В(&МассивДокументов)
					|	И Т.НомерСтроки = 1";

				Для Каждого КлючИЗначение Из СтруктураРеквизитовТЧОснования Цикл

					МассивИмен = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючИЗначение.Ключ, ".", , Истина);

					Запрос.Текст = Запрос.Текст + ?(Запрос.Текст = "", "", Символы.ПС
						+ "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС)
						+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗапроса, МетаданныеДокументаОснования.Имя, МассивИмен[0], МассивИмен[1], КлючИЗначение.Значение);

				КонецЦикла;

				Выборка = Запрос.Выполнить().Выбрать();

				Пока Выборка.Следующий() Цикл

					СтрокаРеквизитов = ТаблицаРеквизитов.Найти(Выборка.Ссылка, "ДокументОснование");
					ИменаРеквизитов = Выборка.ИменаРеквизита;

					Для Каждого ИмяРеквизита Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаРеквизитов, ",", , Истина) Цикл

						Если НЕ ЗначениеЗаполнено(СтрокаРеквизитов[ИмяРеквизита]) Тогда
							СтрокаРеквизитов[ИмяРеквизита] = Выборка.ЗначениеРеквизита;
						КонецЕсли;

					КонецЦикла;

				КонецЦикла;

			КонецЕсли;

			УстановитьПривилегированныйРежим(Ложь);

		КонецЕсли;

		// Заполним значения реквизитов, заданные явно.
		Для Каждого КлючИЗначение Из ПредопределенныеЗначения Цикл
			ТаблицаРеквизитов.ЗаполнитьЗначения(КлючИЗначение.Значение, КлючИЗначение.Ключ);
		КонецЦикла;

		// Запишем статус оформления документа ИСМП.
		ЗаписатьСтатусОформленияДокументов(МассивДокументов, МетаданныеДокумента, ТаблицаРеквизитов);

	КонецЦикла;

КонецПроцедуры
#КонецОбласти

#Область Прочие

// Преобразует массив в соответствие с ключами, соответствующими элементам массива.
//
Функция МассивВСоответствие(МассивИсточник,
		Знач ЗначениеПоУмолчанию = Неопределено)

	Результат = Новый Соответствие;

	Для Каждого ЭлементМассива Из МассивИсточник Цикл
		Результат.Вставить(ЭлементМассива, ЗначениеПоУмолчанию);
	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ЗначениеРеквизитаОбъекта(ИсточникОбъект, ИмяРеквизита)

	ЗначениеРеквизита = Неопределено;

	Если СтрНайти(ИмяРеквизита, ".") = 0 Тогда

		ЗначениеРеквизита = ИсточникОбъект[ИмяРеквизита];

	Иначе

		МассивИмен = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяРеквизита, ".", , Истина);
		ТЧОбъекта = ИсточникОбъект[МассивИмен[0]];

		Если ТЧОбъекта.Количество() > 0 Тогда
			ЗначениеРеквизита = ТЧОбъекта[0][МассивИмен[1]];
		КонецЕсли;

	КонецЕсли;

	Возврат ЗначениеРеквизита;

КонецФункции
#КонецОбласти

#КонецОбласти
