#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает пространство имен пакета XDTO для обмена ЭЛН с ФСС.
//
// Возвращаемое значение:
//   Строка - Пространство имен пакета XDTO для обмена ЭЛН с ФСС.
//
Функция ПространствоИмен() Экспорт
	Возврат "http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl";
КонецФункции

// Возвращает версию формата обмена ЭЛН с ФСС.
//
// Возвращаемое значение:
//   Строка - Версия формата обмена ЭЛН с ФСС.
//
Функция Версия() Экспорт
	Возврат "1.1";
КонецФункции

// Преобразует строку XML (полученную из текста элемента или значения атрибута XML) в значение указанного типа.
//
// Параметры:
//   * СтрокаXML - Строка, Неопределено - Строка, полученная из XML.
//   * Тип - Тип - Тип ожидаемого значения.
//
// Возвращаемое значение:
//   Произвольный - В соответствии с указанным типом.
//       Если параметр "СтрокаXML" не заполнен, то значение параметра СтрокаXML возвращается без приведения к типу.
//       Например, если передать Неопределено, то на выходе тоже будет Неопределено.
//
Функция ЗначениеИзСтрокиXMLПоТипу(ЗначениеXML, ТипВозвращаемогоЗначения) Экспорт
	ТипЗначенияXML = ТипЗнч(ЗначениеXML);
	Если ТипЗначенияXML = ТипВозвращаемогоЗначения Тогда
		Возврат ЗначениеXML;
	ИначеЕсли ТипЗначенияXML = Тип("Строка") И Не ПустаяСтрока(ЗначениеXML) Тогда
		Возврат XMLЗначение(ТипВозвращаемогоЗначения, ЗначениеXML);
	ИначеЕсли ЗначениеXML = Неопределено Или ТипЗначенияXML = Тип("ОбъектXDTO") Тогда
		Возврат Неопределено;
	Иначе
		Возврат ЗначениеXML;
	КонецЕсли;
КонецФункции

// Проверяет что причина нетрудоспособности - карантин и что есть сведения об электронном листке нетрудоспособности.
//
// Возвращаемое значение:
//    Булево - Истина если причина нетрудоспособности - карантин и есть сведения об ЭЛН.
//
Функция ЭтоКарантинныйЭЛН(ПричинаНетрудоспособности, НомерЛисткаНетрудоспособности) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Возврат ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.Карантин
		И РегистрыСведений.СведенияОбЭЛН.ЭтоЭЛН(НомерЛисткаНетрудоспособности);
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПодготовкаНешифрованногоЗапроса

// Формирует параметры получения электронного листка нетрудоспособности.
//
// Параметры:
//   БольничныйЛист - ДокументОбъект.БольничныйЛист, ДанныеФормыСтруктура - Больничный.
//
// Возвращаемое значение:
//   Структура - Результат выгрузки в XML.
//       * Организация - СправочникСсылка.Организации - Организация, для которой получается ЭЛН.
//       * РегистрационныйНомерФСС - Строка - Рег. номер организации, для которой получается ЭЛН.
//       * ТекстXML - Строка - Сведения, необходимые для получения ЭЛН в формате XML.
//
Функция ВыгрузитьЗапросДляПолученияЭЛН(БольничныйЛист) Экспорт
	Отказ = Ложь;
	ДанныеБольничного = ДанныеБольничногоДляПолученияЭЛН(БольничныйЛист, Отказ);
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПакетXDTO = ФабрикаXDTO.Пакеты.Получить(ПространствоИмен());
	getPrivateLNData = ФабрикаXDTO.Создать(ПакетXDTO.КорневыеСвойства.Получить("getPrivateLNData").Тип);
	
	getPrivateLNData.lnCode = ДанныеБольничного.НомерЛисткаНетрудоспособности;
	getPrivateLNData.regNum = ДанныеБольничного.РегистрационныйНомерДляОбменаФСС;
	getPrivateLNData.snils  = ДанныеБольничного.СНИЛС;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, getPrivateLNData, "getPrivateLNData");
	
	Результат = Новый Структура("Организация, РегистрационныйНомерФСС, ТекстXML");
	Результат.Организация             = БольничныйЛист.Организация;
	Результат.РегистрационныйНомерФСС = ДанныеБольничного.РегистрационныйНомерДляОбменаФСС;
	Результат.ТекстXML                = ЗаписьXML.Закрыть();
	
	Возврат Результат;
КонецФункции

// Формирует параметры отправки реестра электронных листков нетрудоспособности.
//
// Параметры:
//   Документ - ДокументОбъект.РеестрДанныхЭЛНЗаполняемыхРаботодателем, ДанныеФормыСтруктура - Реестр.
//   ПомещатьВФайл - Булево - Истина, если результат надо поместить в файл и вернуть адрес во временном хранилище.
//   ИдентификаторФормы - УникальныйИдентификатор - Идентификатор формы. Обязательный, если ПомещатьВФайл = Истина.
//
// Возвращаемое значение:
//   Структура - Результат выгрузки в XML.
//       * Организация - СправочникСсылка.Организации - Организация, для которой отправляется реестр ЭЛН.
//       * РегистрационныйНомерФСС - Строка - Рег. номер организации, для которой отправляется реестр ЭЛН.
//       * ТекстXML - Строка - Данные реестра в формате XML (электронное представление),
//                             либо пустая строка если ПомещатьВФайл = Истина.
//       * Адрес - Строка - Адрес временного хранилища, по которому размещены двоичные данные файла реестра в формате XML,
//                          либо пустая строка если ПомещатьВФайл = Ложь.
//
Функция ВыгрузитьЗапросДляОтправкиРеестраЭЛН(Документ, ПомещатьВФайл, ИдентификаторФормы, СлужебныйФормат, ИсключатьПринятые) Экспорт
	РегистрационныйНомерДляОбменаФСС = УчетПособийСоциальногоСтрахованияКлиентСервер.РегистрационныйНомерДляОбменаФСС(Документ);
	
	ПакетXDTO = ФабрикаXDTO.Пакеты.Получить(ПространствоИмен());
	
	prParseReestrFile = ФабрикаXDTO.Создать(ПакетXDTO.КорневыеСвойства.Получить("prParseReestrFile").Тип);
	
	request = ФабрикаXDTO.Создать(prParseReestrFile.Свойства().Получить("request").Тип);
	request.regNum = РегистрационныйНомерДляОбменаФСС;
	
	pXmlFile = ФабрикаXDTO.Создать(request.Свойства().Получить("pXmlFile").Тип);
	ROWSET   = ФабрикаXDTO.Создать(pXmlFile.Свойства().Получить("ROWSET").Тип);
	
	ROWSET.version          = Версия();
	ROWSET.software         = Лев("1С:" + Метаданные.Синоним, 80);
	ROWSET.version_software = Лев(Метаданные.Версия, 15);
	
	ROWSET.author = Строка(Документ.РеестрСоставил);
	ROWSET.phone  = Строка(Документ.ТелефонСоставителя);
	ROWSET.email  = Строка(Документ.АдресЭлектроннойПочтыСоставителя);
	
	ФИО = Новый Структура("Руководитель, ГлавныйБухгалтер", Документ.Руководитель, Документ.ГлавныйБухгалтер);
	ЗаполнитьПолныеФИО(ФИО);
	
	ТипROW = ROWSET.Свойства().Получить("ROW").Тип;
	
	Для Каждого ДанныеЛН Из Документ.ДанныеЭЛН Цикл
		
		Если ИсключатьПринятые И ДанныеЛН.Состояние = Перечисления.СостоянияЭЛНВРеестрахЭЛН.ПринятФСС Тогда
			Продолжить;
		КонецЕсли;
		
		ROW = ROWSET.ROW.Добавить(ФабрикаXDTO.Создать(ТипROW));
		
		ROW.LN_CODE   = ДанныеЛН.НомерЛисткаНетрудоспособности;
		ROW.SNILS     = УчетПособийСоциальногоСтрахованияКлиентСервер.СНИЛСВФорматеФСС(ДанныеЛН.СНИЛС);
		ROW.EMPLOYER  = Строка(Документ.Организация);
		ROW.EMPL_FLAG = ?(ДанныеЛН.ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы, 1, 0);
		
		УстановитьЗначениеЕслиЗаполнено(ROW.INN_PERSON,         ДанныеЛН.ИНН);
		УстановитьЗначениеЕслиЗаполнено(ROW.EMPL_REG_NO,        Документ.РегистрационныйНомерФСС);
		УстановитьЗначениеЕслиЗаполнено(ROW.EMPL_PARENT_NO,     Документ.КодПодчиненностиФСС);
		УстановитьЗначениеЕслиЗаполнено(ROW.EMPL_REG_NO2,       Документ.ДополнительныйКодФСС);
		УстановитьЗначениеЕслиЗаполнено(ROW.APPROVE1,           ФИО.Руководитель);
		УстановитьЗначениеЕслиЗаполнено(ROW.APPROVE2,           ФИО.ГлавныйБухгалтер);
		УстановитьЗначениеЕслиЗаполнено(ROW.BASE_AVG_SAL,       ДанныеЛН.БазаДляРасчетаСреднегоЗаработка);
		УстановитьЗначениеЕслиЗаполнено(ROW.BASE_AVG_DAILY_SAL, ДанныеЛН.СреднийДневнойЗаработок);
		УстановитьЗначениеЕслиЗаполнено(ROW.CALC_CONDITION1,    ДанныеЛН.УсловияИсчисленияКод1);
		УстановитьЗначениеЕслиЗаполнено(ROW.CALC_CONDITION2,    ДанныеЛН.УсловияИсчисленияКод2);
		УстановитьЗначениеЕслиЗаполнено(ROW.CALC_CONDITION3,    ДанныеЛН.УсловияИсчисленияКод3);
		УстановитьЗначениеЕслиЗаполнено(ROW.FORM1_DT,           ДанныеЛН.ДатаАктаН1);
		УстановитьЗначениеЕслиЗаполнено(ROW.RETURN_DATE_EMPL,   ДанныеЛН.ДатаНачалаРаботы);
		УстановитьЗначениеЕслиЗаполнено(ROW.DT1_LN,             ДанныеЛН.ДатаНачалаОплаты);
		УстановитьЗначениеЕслиЗаполнено(ROW.DT2_LN,             ДанныеЛН.ДатаОкончанияОплаты);
		
		РазностьСтажей = УчетПособийСоциальногоСтрахования.ПодсчитатьРазностьСтажейВГодахИМесяцах(
			ДанныеЛН.СтажРасширенныйЛет,
			ДанныеЛН.СтажРасширенныйМесяцев,
			ДанныеЛН.СтажЛет,
			ДанныеЛН.СтажМесяцев);
		Если РазностьСтажей.РазностьЛет <> 0 Или РазностьСтажей.РазностьМесяцев <> 0 Тогда
			ROW.INSUR_YY = ДанныеЛН.СтажРасширенныйЛет;
			ROW.INSUR_MM = ДанныеЛН.СтажРасширенныйМесяцев;
			ROW.NOT_INSUR_YY = РазностьСтажей.РазностьЛет;
			ROW.NOT_INSUR_MM = РазностьСтажей.РазностьМесяцев;
		Иначе
			ROW.INSUR_YY = ДанныеЛН.СтажЛет;
			ROW.INSUR_MM = ДанныеЛН.СтажМесяцев;
		КонецЕсли;
		
		ROW.EMPL_PAYMENT = ДанныеЛН.СуммаОплатыЗаСчетРаботодателя;
		ROW.FSS_PAYMENT  = ДанныеЛН.СуммаОплатыЗаСчетФСС;
		ROW.PAYMENT      = ДанныеЛН.СуммаОплатыЗаСчетРаботодателя + ДанныеЛН.СуммаОплатыЗаСчетФСС;
		
		Если ДанныеЛН.Исправление Тогда
			УстановитьЗначениеЕслиЗаполнено(ROW.CORRECTION_REASON, ДанныеЛН.КодПричиныИсправления);
			УстановитьЗначениеЕслиЗаполнено(ROW.CORRECTION_NOTE,   СокрЛП(ДанныеЛН.ОписаниеПричиныИсправления));
		КонецЕсли;
		
		УстановитьЗначениеЕслиЗаполнено(ROW.LN_HASH, РегистрыСведений.СведенияОбЭЛН.ПрочитатьХеш(ДанныеЛН.НомерЛисткаНетрудоспособности));
		
	КонецЦикла;
	
	prParseReestrFile.request = request;
	request.pXmlFile = pXmlFile;
	pXmlFile.ROWSET = ROWSET;
	
	Если СлужебныйФормат Тогда
		ТекстXML = ОбъектXDTOВСтрокуXML(ROWSET, "ROWSET");
	Иначе
		ПакетXDTO = ФабрикаXDTO.Пакеты.Получить("http://schemas.xmlsoap.org/soap/envelope/");
		Envelope = ФабрикаXDTO.Создать(ПакетXDTO.КорневыеСвойства.Получить("Envelope").Тип);
		Envelope.Body = ФабрикаXDTO.Создать(Envelope.Свойства().Получить("Body").Тип);
		Envelope.Body.Добавить(ФормаXML.Элемент, ПространствоИмен(), "prParseReestrFile", prParseReestrFile);
		ТекстXML = ОбъектXDTOВСтрокуXML(Envelope, "Envelope", Истина);
	КонецЕсли;
	
	Результат = Новый Структура("Организация, РегистрационныйНомерФСС, ТекстXML, Адрес");
	Результат.Организация             = Документ.Организация;
	Результат.РегистрационныйНомерФСС = РегистрационныйНомерДляОбменаФСС;
	Результат.ТекстXML                = ТекстXML;
	
	Если ПомещатьВФайл Тогда
		ДвоичныеДанные = ЗарплатаКадры.СтрокаВДвоичныеДанные(ТекстXML, "UTF-8", Истина);
		Результат.Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ОбъектXDTOВСтрокуXML(ОбъектXDTO, ИмяКорневогоУзла, ЗаписатьОбъявлениеXML = Ложь) Экспорт
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	Если ЗаписатьОбъявлениеXML Тогда
		ЗаписьXML.ЗаписатьОбъявлениеXML();
	КонецЕсли;
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO, ИмяКорневогоУзла);
	Возврат ЗаписьXML.Закрыть();
КонецФункции

Функция ДанныеБольничногоДляПолученияЭЛН(БольничныйЛист, Отказ)
	Результат = Новый Структура("НомерЛисткаНетрудоспособности, РегистрационныйНомерДляОбменаФСС, СНИЛС");
	
	// Номер больничного листа.
	Результат.НомерЛисткаНетрудоспособности = БольничныйЛист.НомерЛисткаНетрудоспособности;
	
	// Регистрационный номер ФСС организации (страхователя).
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БольничныйЛист.Организация, "РегистрационныйНомерФСС, ДополнительныйКодФСС");
	Результат.РегистрационныйНомерДляОбменаФСС = УчетПособийСоциальногоСтрахованияКлиентСервер.РегистрационныйНомерДляОбменаФСС(РеквизитыОрганизации);
	
	// СНИЛС сотрудника на которого оформлен листок нетрудоспособности.
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, БольничныйЛист.Сотрудник, "СтраховойНомерПФР");
	Если КадровыеДанные.Количество() > 0 Тогда
		Результат.СНИЛС = УчетПособийСоциальногоСтрахованияКлиентСервер.СНИЛСВФорматеФСС(
			КадровыеДанные[0].СтраховойНомерПФР);
	КонецЕсли;
	
	// Проверка результатов.
	Если Не ЗначениеЗаполнено(Результат.НомерЛисткаНетрудоспособности) Тогда
		Текст = НСтр("ru = 'Не заполнен номер листка нетрудоспособности'");
		ОбщегоНазначения.СообщитьПользователю(Текст, , "НомерЛисткаНетрудоспособности", "Объект", Отказ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Результат.РегистрационныйНомерДляОбменаФСС) Тогда
		Текст = НСтр("ru = 'У организации не заполнен регистрационный номер ФСС'");
		ОбщегоНазначения.СообщитьПользователю(Текст, , "Организация", "Объект", Отказ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Результат.СНИЛС) Тогда
		Текст = НСтр("ru = 'У сотрудника не указан СНИЛС'");
		ОбщегоНазначения.СообщитьПользователю(Текст, , "Сотрудник", "Объект", Отказ);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Получает полные ФИО физических лиц.
//
// Параметры:
//   СтруктураФИО - Структура - По указанным ключам структуры будут размещены полные ФИО.
//       * Ключ - Строка - Имя ключа, по которому будет размещено полное ФИО.
//       * Значение - СправочникСсылка.ФизическиеЛица - Ссылка физ. лица, для которого требуется получить ФИО.
//           После выполнения процедуры превращается в тип "Строка".
//
Процедура ЗаполнитьПолныеФИО(СтруктураФИО)
	МассивФизическихЛиц = Новый Массив;
	Для Каждого КлючИЗначение Из СтруктураФИО Цикл
		МассивФизическихЛиц.Добавить(КлючИЗначение.Значение);
	КонецЦикла;
	
	ТаблицаКадровыхДанных = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, МассивФизическихЛиц, "ФИОПолные");
	
	Для Каждого КлючИЗначение Из СтруктураФИО Цикл
		КадровыеДанныеФизическогоЛица = ТаблицаКадровыхДанных.Найти(КлючИЗначение.Значение, "ФизическоеЛицо");
		Если КадровыеДанныеФизическогоЛица <> Неопределено Тогда
			ФИО = КадровыеДанныеФизическогоЛица.ФИОПолные;
		ИначеЕсли ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			ФИО = Строка(КлючИЗначение.Значение);
		Иначе
			ФИО = "";
		КонецЕсли;
		СтруктураФИО.Вставить(КлючИЗначение.Ключ, ФИО);
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьЗначениеЕслиЗаполнено(ИзменяемоеЗначение, Значение)
	Если ЗначениеЗаполнено(Значение) Тогда
		ИзменяемоеЗначение = Значение;
	КонецЕсли;
КонецПроцедуры

Функция КодыПричинИсправления(Список = Неопределено) Экспорт
	Если ТипЗнч(Список) <> Тип("СписокЗначений") Тогда
		Список = Новый СписокЗначений;
	КонецЕсли;
	
	Список.Добавить("01", НСтр("ru = 'Работником представлены дополнительные сведения для расчета'"));
	Список.Добавить("02", НСтр("ru = 'Работником представлено свидетельство ИНН'"));
	Список.Добавить("03", НСтр("ru = 'Изменены регистрационные данные работодателя/сведения о должностных лицах работодателя'"));
	Список.Добавить("04", НСтр("ru = 'Уточнены условия труда работника/условия исчисления пособия (включая Акт ф. Н-1)'"));
	Список.Добавить("05", НСтр("ru = 'Выявлены ошибки в расчете пособия/подсчете страхового стажа'"));
	Список.Добавить("06", НСтр("ru = 'Ошибка оператора'"));
	
	Для Каждого Элемент Из Список Цикл
		Элемент.Представление = Элемент.Значение + ". " + Элемент.Представление;
	КонецЦикла;
	
	Возврат Список;
КонецФункции

#КонецОбласти

#Область ЧтениеРасшифрованногоОтвета

Функция ЗагрузитьОтветСервисаФСС(Документ, Операция, АдресРасшифрованногоОтвета, ЗагрузкаИзФайла = Ложь) Экспорт
	Результат = Новый Структура("Отказ, ТекстСообщенияФСС");
	Результат.Отказ = Ложь;
	Результат.ТекстСообщенияФСС = "";
	
	РасшифрованныйОтвет = ПолучитьИзВременногоХранилища(АдресРасшифрованногоОтвета);
	УдалитьИзВременногоХранилища(АдресРасшифрованногоОтвета);
	
	СтруктураDOM = СериализацияБЗК.СтруктураDOM(РасшифрованныйОтвет);
	
	УзелMESS = СериализацияБЗК.НайтиУзелDOM(СтруктураDOM, "//*[local-name() = 'MESS']");
	Если УзелMESS <> Неопределено Тогда
		ТекстовоеСодержимое = СокрЛП(Строка(УзелMESS.ТекстовоеСодержимое));
		Если ТекстовоеСодержимое <> "" Тогда
			Результат.ТекстСообщенияФСС = НСтр("ru = 'При обмене с ФСС возникли ошибки. Ответ ФСС:'") + Символы.ПС + ТекстовоеСодержимое;
		КонецЕсли;
	КонецЕсли;
	
	Если Операция = "getPrivateLNData" Тогда
		
		УзелROW = СериализацияБЗК.НайтиУзелDOM(СтруктураDOM, "//*[local-name() = 'ROW']");
		Если УзелROW = Неопределено Тогда
			ВызватьИсключение ?(ПустаяСтрока(Результат.ТекстСообщенияФСС), НСтр("ru = 'Узел ""ROW"" не найден'"), Результат.ТекстСообщенияФСС);
		КонецЕсли;
		
		СтрокаXML = СериализацияБЗК.ОбъектDOMВСтрокуXML(УзелROW);
		LN_ROW = СериализацияБЗК.ОбъектXDTOИзСтрокиXML(СтрокаXML);
		
		УзелOut = СериализацияБЗК.НайтиУзелDOM(СтруктураDOM, "//*[local-name() = 'FileOperationsLnUserGetPrivateLNDataOut']");
		УзелSTATUS = СериализацияБЗК.НайтиУзелDOM(СтруктураDOM, "*[local-name() = 'STATUS']", УзелOut);
		
		КодОтвета = ?(УзелSTATUS = Неопределено, "", СокрЛП(УзелSTATUS.ТекстовоеСодержимое));
		Если КодОтвета <> "1" И ЗначениеЗаполнено(Результат.ТекстСообщенияФСС) Тогда
			ЗарплатаКадрыОтображениеОшибок.СообщитьОбОшибке(Результат.Отказ, Результат.ТекстСообщенияФСС, "");
			Возврат Результат;
		КонецЕсли;
		
		ДанныеИзСервиса = ОтветСервисаПолученияЭЛН(LN_ROW, Результат.Отказ);
		Если Результат.Отказ Тогда
			Возврат Результат;
		КонецЕсли;
		
		Если ТипЗнч(Документ) = Тип("Структура") Тогда
			// Метод вызван только для актуализации хеша ЭЛН.
			РегистрыСведений.СведенияОбЭЛН.ЗаписатьПервичныеСведения(
				ДанныеИзСервиса.LN_CODE,
				ДанныеИзСервиса.LN_HASH,
				ДанныеИзСервиса.СостояниеЭЛНВФСС,
				Неопределено,
				Неопределено);
		Иначе
			// Метод вызван для заполнения больничного.
			ЗагрузитьРезультатПолученияЭЛН(Документ, ДанныеИзСервиса, ЗагрузкаИзФайла, Результат.Отказ);
		КонецЕсли;
		
	ИначеЕсли Операция = "prParseReestrFile" Тогда
		
		УзелROWSET = СериализацияБЗК.НайтиУзелDOM(СтруктураDOM, "//*[local-name() = 'ROWSET']");
		Если УзелROWSET = Неопределено Тогда
			УзелROW = СериализацияБЗК.НайтиУзелDOM(СтруктураDOM, "//*[local-name() = 'ROW']");
			Если УзелROW = Неопределено Тогда
				ВызватьИсключение СокрП(НСтр("ru = 'Узел ""ROWSET"" не найден'") + Символы.ПС + Результат.ТекстСообщенияФСС);
			КонецЕсли;
			УзелROWSET = УзелROW.РодительскийУзел;
		КонецЕсли;
		
		СтрокаXML = СериализацияБЗК.ОбъектDOMВСтрокуXML(УзелROWSET);
		ROWSET = СериализацияБЗК.ОбъектXDTOИзСтрокиXML(СтрокаXML);
		ЭлементыROW = СериализацияБЗК.СписокXDTO(ROWSET, "ROW");
		
		ЗагрузитьРезультатОтправкиРеестраЭЛН(Документ, ЭлементыROW, Результат);
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ЗагрузкаЭЛН

Функция ОтветСервисаПолученияЭЛН(LN_ROW, Отказ)
	ИменаПолейИзСервиса = 
	"APPROVE1,
	|APPROVE2,
	|BASE_AVG_DAILY_SAL,
	|BASE_AVG_SAL,
	|BIRTHDAY,
	|BOZ_FLAG,
	|CALC_CONDITION1,
	|CALC_CONDITION2,
	|CALC_CONDITION3,
	|CALC_CONDITION4,
	|DATE1,
	|DATE2,
	|DT1_LN,
	|DT2_LN,
	|DUPLICATE_FLAG,
	|EMPL_FLAG,
	|EMPL_PARENT_NO,
	|EMPL_PAYMENT,
	|EMPL_REG_NO,
	|EMPL_REG_NO2,
	|EMPLOYER,
	|FORM1_DT,
	|FSS_PAYMENT,
	|GENDER,
	|HOSPITAL_BREACH,
	|HOSPITAL_DT1,
	|HOSPITAL_DT2,
	|INN_PERSON,
	|INSUR_MM,
	|INSUR_YY,
	|LN_CODE,
	|LN_DATE,
	|LN_HASH,
	|LN_RESULT,
	|LN_STATE,
	|LPU_ADDRESS,
	|LPU_EMPL_FLAG,
	|LPU_EMPLOYER,
	|LPU_NAME,
	|LPU_OGRN,
	|MSE_DT1,
	|MSE_DT2,
	|MSE_DT3,
	|MSE_INVALID_GROUP,
	|NAME,
	|NOT_INSUR_MM,
	|NOT_INSUR_YY,
	|PARENT_CODE,
	|PATRONIMIC,
	|PAYMENT,
	|PREGN12W_FLAG,
	|PREV_LN_CODE,
	|PRIMARY_FLAG,
	|REASON1,
	|REASON2,
	|REASON3,
	|RETURN_DATE_EMPL,
	|SERV1_AGE,
	|SERV1_FIO,
	|SERV1_MM,
	|SERV1_RELATION_CODE,
	|SERV2_AGE,
	|SERV2_FIO,
	|SERV2_MM,
	|SERV2_RELATION_CODE,
	|SNILS,
	|SURNAME,
	|VOUCHER_NO,
	|VOUCHER_OGRN";
	
	ДанныеИзСервиса = Новый Структура(ИменаПолейИзСервиса);
	
	ЗаполнитьЗначенияСвойств(ДанныеИзСервиса, LN_ROW);
	
	ДанныеИзСервиса.Вставить("ТаблицаПолныхПериодов", СериализацияБЗК.СписокXDTO(LN_ROW, "TREAT_PERIODS.TREAT_FULL_PERIOD"));
	ДанныеИзСервиса.Вставить("СНИЛС", "");
	
	Если ТипЗнч(ДанныеИзСервиса.SNILS) = Тип("Строка") И ЗначениеЗаполнено(ДанныеИзСервиса.SNILS) Тогда
		ДанныеИзСервиса.СНИЛС = УчетПособийСоциальногоСтрахованияКлиентСервер.СНИЛСВФорматеИБ(ДанныеИзСервиса.SNILS);
	КонецЕсли;
	
	ДанныеИзСервиса.Вставить("ЯвляетсяПродолжениемБолезни", Не ЗначениеИзСтрокиXMLПоТипу(ДанныеИзСервиса.PRIMARY_FLAG, Тип("Булево")));
	ДанныеИзСервиса.Вставить("НомерПервичногоЛисткаНетрудоспособности", Строка(ДанныеИзСервиса.PREV_LN_CODE));
	
	// Базовые проверки спецификации.
	БазовыеПоля = СтрРазделить("SNILS, LN_CODE, LN_HASH", ", ", Ложь);
	Для Каждого ИмяПоля Из БазовыеПоля Цикл
		Если Не ЗначениеЗаполнено(ДанныеИзСервиса[ИмяПоля]) Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Файл не соответствует спецификации: Не заполнено поле ""%1"".'"), ИмяПоля);
			ЗарплатаКадрыОтображениеОшибок.СообщитьОбОшибке(Отказ, ТекстОшибки, ИмяПоля);
		КонецЕсли;
	КонецЦикла;
	
	СостояниеЭЛНВФСС = Перечисления.СостоянияЭЛНВФСС.НайтиПоКодуФСС(ДанныеИзСервиса.LN_STATE);
	ДанныеИзСервиса.Вставить("СостояниеЭЛНВФСС", СостояниеЭЛНВФСС);
	
	Возврат ДанныеИзСервиса;
КонецФункции

Функция РазрешенаЗагрузкаЭЛН(СостояниеВФСС, Reason1)
	Если Не ЗначениеЗаполнено(СостояниеВФСС)
		Или СостояниеВФСС = Перечисления.СостоянияЭЛНВФСС.Аннулирован Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Карантин разрешено загружать в любых состояниях для авансовых выплат за счет ФСС.
	Если Reason1 = "03" Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Обычные больничные разрешено загружать только когда они закрыты и готовы к расчету.
	Если СостояниеВФСС = Перечисления.СостоянияЭЛНВФСС.Закрыт
		Или СостояниеВФСС = Перечисления.СостоянияЭЛНВФСС.НаправленНаМСЭ
		Или СостояниеВФСС = Перечисления.СостоянияЭЛНВФСС.ДополненДаннымиМСЭ Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Не готовые к расчету или рассчитанные в другой программе.
	Возврат Ложь;
КонецФункции

Процедура ЗагрузитьРезультатПолученияЭЛН(Документ, ДанныеИзСервиса, ЗагрузкаИзФайла, Отказ)
	ПроверитьВозможностьЗагрузкиЭЛН(Документ, ДанныеИзСервиса, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// Перед записью хеша необходимо определить организацию и физлицо.
	ЗаполнитьПоПервичномуБольничномуЛисту(Документ, ДанныеИзСервиса);
	ЗаполнитьСотрудникаПоСНИЛС(Документ, ДанныеИзСервиса, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьДанныеЭЛН(Документ, ДанныеИзСервиса);
	РегистрыСведений.СведенияОбЭЛН.ЗаписатьПервичныеСведения(
		ДанныеИзСервиса.LN_CODE,
		ДанныеИзСервиса.LN_HASH,
		ДанныеИзСервиса.СостояниеЭЛНВФСС,
		Документ.Организация,
		Документ.ФизическоеЛицо);
	ПроверитьФИОСотрудника(Документ, ДанныеИзСервиса);
КонецПроцедуры

Процедура ПроверитьВозможностьЗагрузкиЭЛН(Документ, ДанныеИзСервиса, Отказ) Экспорт
	// Проверка состояния.
	Если Не ЗначениеЗаполнено(ДанныеИзСервиса.СостояниеЭЛНВФСС) Тогда
		ТекстОшибки = НСтр("ru = 'Файл не соответствует спецификации: В поле ""%1"" недокументированное значение: ""%2"".'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, "LN_STATE", ДанныеИзСервиса.LN_STATE);
		ЗарплатаКадрыОтображениеОшибок.СообщитьОбОшибке(Отказ, ТекстОшибки, "LN_STATE");
	ИначеЕсли Не РазрешенаЗагрузкаЭЛН(ДанныеИзСервиса.СостояниеЭЛНВФСС, ДанныеИзСервиса.REASON1) Тогда
		ТекстОшибки = НСтр("ru = 'Листок нетрудоспособности не может быть загружен, его состояние: ""%1"".'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ДанныеИзСервиса.СостояниеЭЛНВФСС);
		ЗарплатаКадрыОтображениеОшибок.СообщитьОбОшибке(Отказ, ТекстОшибки, "LN_STATE");
	КонецЕсли;
	
	// Проверка соответствия номера ЛН в больничном с номером ЭЛН.
	Если ЗначениеЗаполнено(Документ.НомерЛисткаНетрудоспособности) Тогда
		Если СтрСравнить(Документ.НомерЛисткаНетрудоспособности, ДанныеИзСервиса.LN_CODE) <> 0 Тогда
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Номер листка нетрудоспособности в больничном (%1) не совпадает с номером ЭЛН (%2).'"),
				Документ.НомерЛисткаНетрудоспособности,
				ДанныеИзСервиса.LN_CODE);
			ЗарплатаКадрыОтображениеОшибок.СообщитьОбОшибке(Отказ, ТекстОшибки, "НомерЛисткаНетрудоспособности");
		КонецЕсли;
	КонецЕсли;
	
	// Если в документе заполнен сотрудник, то необходимо только проверить соответствие СНИЛСов.
	Если ЗначениеЗаполнено(Документ.Сотрудник) Тогда
		Документ.ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.Сотрудник, "ФизическоеЛицо");
		СНИЛСВДокументе = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.ФизическоеЛицо, "СтраховойНомерПФР");
		Если ЗначениеЗаполнено(СНИЛСВДокументе) Тогда
			Если СтрСравнить(ДанныеИзСервиса.СНИЛС, СНИЛСВДокументе) <> 0 Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'СНИЛС сотрудника ""%1"" в больничном (%2) не соответствует СНИЛСу в ЭЛН (%3).'"),
					Строка(Документ.Сотрудник),
					СНИЛСВДокументе,
					ДанныеИзСервиса.СНИЛС);
				ЗарплатаКадрыОтображениеОшибок.СообщитьОбОшибке(Отказ, ТекстОшибки, "Сотрудник");
			КонецЕсли;
		Иначе
			ФизическоеЛицо = ФизическоеЛицо(ДанныеИзСервиса.СНИЛС);
			Если ЗначениеЗаполнено(ФизическоеЛицо) И Документ.ФизическоеЛицо <> ФизическоеЛицо Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'В документе выбран сотрудник ""%1"" с пустым СНИЛС, а по СНИЛСу в ЭЛН (%2) найден сотрудник ""%3"".'"),
					Документ.ФизическоеЛицо,
					ДанныеИзСервиса.СНИЛС,
					ФизическоеЛицо);
				ЗарплатаКадрыОтображениеОшибок.СообщитьОбОшибке(Отказ, ТекстОшибки, "Сотрудник");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Проверка загруженности ЭЛН в другой документ (по другой организации).
	Отбор = Новый Структура;
	Отбор.Вставить("НомерЛисткаНетрудоспособности", ДанныеИзСервиса.LN_CODE);
	Отбор.Вставить("Проведен", Истина);
	Запрос = Документы.БольничныйЛист.ЗапросПоБольничным(Отбор, "ПериодРегистрации УБЫВ", 0);
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	Если ТаблицаЗначений.Количество() > 0 И ТаблицаЗначений.Найти(Документ.Ссылка, "Ссылка") = Неопределено Тогда
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'В программе найден другой больничный с номером %1: %2.'"),
			ДанныеИзСервиса.LN_CODE,
			ТаблицаЗначений[0].Представление);
		ЗарплатаКадрыОтображениеОшибок.СообщитьОбОшибке(Отказ, ТекстОшибки, "LN_CODE");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоПервичномуБольничномуЛисту(Документ, ДанныеИзСервиса) Экспорт
	
	Документ.НомерПервичногоЛисткаНетрудоспособности = ДанныеИзСервиса.НомерПервичногоЛисткаНетрудоспособности;
	Документ.ЯвляетсяПродолжениемБолезни             = ДанныеИзСервиса.ЯвляетсяПродолжениемБолезни;
	
	Если ЗначениеЗаполнено(Документ.НомерПервичногоЛисткаНетрудоспособности)
		И Документ.ЯвляетсяПродолжениемБолезни Тогда
		Документ.ЗаполнитьПоПервичномуБольничномуЛисту(Документ.НомерПервичногоЛисткаНетрудоспособности);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСотрудникаПоСНИЛС(Документ, ДанныеИзСервиса, Отказ)
	// В документе не заполнен сотрудник и это первичный больничный лист.
	Если ЗначениеЗаполнено(Документ.Сотрудник) Тогда
		Возврат;
	КонецЕсли;
	
	// В качестве даты начала события (нетрудоспособности) можно взять дату ЭЛН.
	Если ЗначениеЗаполнено(ДанныеИзСервиса.LN_DATE) Тогда
		ДатаНачалаСобытия = ЗначениеИзСтрокиXMLПоТипу(ДанныеИзСервиса.LN_DATE, Тип("Дата"));
	Иначе
		ДатаНачалаСобытия = Документ.Дата;
	КонецЕсли;
	
	РезультатПоиска = НайтиСотрудникаПоСНИЛС(
		Документ.Организация,
		ДатаНачалаСобытия,
		ДанныеИзСервиса.СНИЛС,
		Строка(ДанныеИзСервиса.SURNAME),
		Строка(ДанныеИзСервиса.NAME),
		Строка(ДанныеИзСервиса.PATRONIMIC));
	
	Если РезультатПоиска.Успех Тогда
		ЗаполнитьЗначенияСвойств(Документ, РезультатПоиска, "Сотрудник, ФизическоеЛицо, Организация");
	Иначе
		ОбщегоНазначения.СообщитьПользователю(РезультатПоиска.ТекстОшибки, , , , Отказ);
	КонецЕсли;
КонецПроцедуры

Функция НайтиСотрудникаПоСНИЛС(Организация, ДатаНачалаСобытия, СНИЛС, Фамилия = "", Имя = "", Отчество = "") Экспорт
	Результат = Новый Структура("Успех, ТекстОшибки, ФизическоеЛицо, Сотрудник, Организация");
	Результат.Успех = Ложь;
	Результат.ТекстОшибки = "";
	
	// 0. Проверки.
	Если Не ЗначениеЗаполнено(СНИЛС)
		И Не ЗначениеЗаполнено(Фамилия) И Не ЗначениеЗаполнено(Имя) И Не ЗначениеЗаполнено(Отчество) Тогда
		Результат.ТекстОшибки = НСтр("ru = 'Не заполнен СНИЛС'");
		Возврат Результат;
	КонецЕсли;
	
	// 1. Поиск физического лица по СНИЛСу.
	Результат.ФизическоеЛицо = ФизическоеЛицо(СНИЛС, Результат.ТекстОшибки, Фамилия, Имя, Отчество);
	Если Не ЗначениеЗаполнено(Результат.ФизическоеЛицо) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// 2. Поиск сотрудников организаций по физическому лицу.
	ПриПоискеСотрудникаОрганизации(Результат, Организация, ДатаНачалаСобытия);
	
	Возврат Результат;
КонецФункции

// АПК:142-выкл 4 необязательных параметра реализовано без ущерба читаемости кода.

Функция ФизическоеЛицо(СНИЛС, ТекстОшибки = "", Фамилия = "", Имя = "", Отчество = "") Экспорт
	Если Не ЗначениеЗаполнено(СНИЛС) Тогда
		ТекстОшибки = НСтр("ru = 'В файле не заполнен СНИЛС сотрудника.'");
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = УчетПособийСоциальногоСтрахования.ЗапросДляПоискаФизическихЛиц(Фамилия, Имя, Отчество, СНИЛС);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.СНИЛС = СНИЛС Тогда
			Возврат Выборка.Ссылка;
		ИначеЕсли Не ЗначениеЗаполнено(Выборка.СНИЛС) Тогда
			ЗарплатаКадрыОтображениеОшибок.СообщитьПользователю(СтрШаблон(
				НСтр("ru = 'У сотрудника ""%1"" не заполнен СНИЛС (в файле СНИЛС ""%2"").'"),
				Строка(Выборка.Ссылка),
				СНИЛС));
			Возврат Выборка.Ссылка;
		Иначе
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'По ФИО ""%1"" найден сотрудник ""%2"" с СНИЛС ""%3"", но в сведениях ЭЛН СНИЛС ""%4"".'"),
				ТРег(Фамилия) + " " + ТРег(Имя) + " " + ТРег(Отчество),
				Строка(Выборка.Ссылка),
				Выборка.СНИЛС,
				СНИЛС);
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не найден сотрудник со СНИЛС ""%1"" (%2). Проверьте что у сотрудника корректно заполнен СНИЛС.'"),
		СНИЛС,
		ТРег(Фамилия) + " " + ТРег(Имя) + " " + ТРег(Отчество));
	Возврат Неопределено;
КонецФункции

// АПК:142-вкл

Процедура ПриПоискеСотрудникаОрганизации(Результат, ПредполагаемаяОрганизация, ДатаНачалаСобытия)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// 255-ФЗ, Глава 2, Статья 5, абзац 2.
	// Работодатель обязан оплатить больничный лист бывшему работнику, если соблюдены 2 условия:
	// - Период временной нетрудоспособности наступил в течение 30 дней после увольнения;
	// - Бывший работник предоставил больничный лист работодателю в течение полугода после увольнения.
	НачалоПериода = ДобавитьМесяц(ДатаНачалаСобытия, -6);
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Результат.ФизическоеЛицо);
	ПараметрыПолученияСотрудников.НачалоПериода       = НачалоПериода;
	ПараметрыПолученияСотрудников.ОкончаниеПериода    = ДатаНачалаСобытия;
	ПараметрыПолученияСотрудников.КадровыеДанные      = "Организация, ДатаУвольнения, ВидЗанятости";
	УстановитьПривилегированныйРежим(Истина);
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыПолученияСотрудников);
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СотрудникиОрганизации.ДатаУвольнения = &ПустаяДата
	|				ТОГДА &МаксимальнаяДата
	|			ИНАЧЕ СотрудникиОрганизации.ДатаУвольнения
	|		КОНЕЦ) КАК ДатаУвольнения,
	|	СотрудникиОрганизации.Организация КАК Организация
	|ПОМЕСТИТЬ ВТДатыУвольненияИзОрганизаций
	|ИЗ
	|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|ГДЕ
	|	(СотрудникиОрганизации.ДатаУвольнения = &ПустаяДата
	|			ИЛИ СотрудникиОрганизации.ДатаУвольнения >= &НачалоПериода)
	|	И (СотрудникиОрганизации.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
	|			ИЛИ СотрудникиОрганизации.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство))
	|
	|СГРУППИРОВАТЬ ПО
	|	СотрудникиОрганизации.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыУвольненияИзОрганизаций.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ДатыУвольненияИзОрганизаций.Организация В (&ДоступныеФилиалы)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьПравоПросмотраОрганизации,
	|	ВЫБОР
	|		КОГДА ДатыУвольненияИзОрганизаций.ДатаУвольнения >= &ДатаНачалаСобытия
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Работает,
	|	ДатыУвольненияИзОрганизаций.ДатаУвольнения КАК ДатаУвольнения,
	|	СотрудникиОрганизации.Сотрудник КАК Сотрудник
	|ИЗ
	|	ВТДатыУвольненияИзОрганизаций КАК ДатыУвольненияИзОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|		ПО ДатыУвольненияИзОрганизаций.Организация = СотрудникиОрганизации.Организация
	|			И (ВЫБОР
	|				КОГДА СотрудникиОрганизации.ДатаУвольнения = &ПустаяДата
	|					ТОГДА &МаксимальнаяДата
	|				ИНАЧЕ СотрудникиОрганизации.ДатаУвольнения
	|			КОНЕЦ = ДатыУвольненияИзОрганизаций.ДатаУвольнения)";
	
	Запрос.УстановитьПараметр("НачалоПериода",     НачалоПериода);
	Запрос.УстановитьПараметр("ДатаНачалаСобытия", ДатаНачалаСобытия);
	Запрос.УстановитьПараметр("ПустаяДата",        '00010101');
	Запрос.УстановитьПараметр("МаксимальнаяДата",  '39991231235959');
	
	ДоступныеФилиалы = ЗарплатаКадры.ДоступныеОрганизации().Филиалы;
	Если ДоступныеФилиалы = Неопределено Тогда
		// Полные права.
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДатыУвольненияИзОрганизаций.Организация В (&ДоступныеФилиалы)", "ИСТИНА");
	Иначе
		// Не полные права.
		Запрос.УстановитьПараметр("ДоступныеФилиалы", ДоступныеФилиалы);
	КонецЕсли;
	
	ВсеОрганизации = Запрос.Выполнить().Выгрузить();
	Если ВсеОрганизации.Найти(Истина, "Работает") <> Неопределено
		И ВсеОрганизации.Найти(Ложь, "Работает") <> Неопределено Тогда
		ПодходящиеОрганизации = ВсеОрганизации.Скопировать(Новый Структура("Работает", Истина));
	Иначе
		ПодходящиеОрганизации = ВсеОрганизации;
	КонецЕсли;
	
	КоличествоПодходящих = ПодходящиеОрганизации.Количество();
	Если КоличествоПодходящих = 0 Тогда
		Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сотрудник ""%1"" на %2 не принят на работу.'"),
			Результат.ФизическоеЛицо,
			Формат(ДатаНачалаСобытия, "ДЛФ=D"));
		Возврат;
	КонецЕсли;
	
	Если КоличествоПодходящих = 1 Тогда
		НайденнаяСтрока = ПодходящиеОрганизации[0];
	Иначе
		Если ЗначениеЗаполнено(ПредполагаемаяОрганизация) Тогда
			НайденнаяСтрока = ПодходящиеОрганизации.Найти(ПредполагаемаяОрганизация, "Организация");
		Иначе
			НайденнаяСтрока = Неопределено;
		КонецЕсли;
		Если НайденнаяСтрока = Неопределено Тогда
			ПредставлениеОрганизаций = ПодходящиеОрганизации.ВыгрузитьКолонку("Организация");
			Если ДоступныеФилиалы <> Неопределено Тогда
				// Не полные права.
				ВГраница = ПредставлениеОрганизаций.ВГраница();
				Для Индекс = 0 По ВГраница Цикл
					Если ДоступныеФилиалы.Найти(ПредставлениеОрганизаций[Индекс]) = Неопределено Тогда
						ПредставлениеОрганизаций[Индекс] = НСтр("ru = '<Недостаточно прав>'");
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Требуется выбрать организацию, т.к. сотрудник ""%1"" на %2 работает в нескольких организациях: %3.'"),
				Результат.ФизическоеЛицо,
				Формат(ДатаНачалаСобытия, "ДЛФ=D"),
				СтрСоединить(ПредставлениеОрганизаций, ", "));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Не НайденнаяСтрока.ЕстьПравоПросмотраОрганизации Тогда
		Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Недостаточно прав для загрузки ЭЛН сотрудника ""%1"" организации ""%2"".'"),
			Результат.ФизическоеЛицо,
			НайденнаяСтрока.Организация);
		Возврат;
	КонецЕсли;
	
	Результат.Успех       = Истина;
	Результат.Организация = НайденнаяСтрока.Организация;
	Результат.Сотрудник   = НайденнаяСтрока.Сотрудник;
КонецПроцедуры

Процедура ЗаполнитьДанныеЭЛН(Документ, ДанныеИзСервиса)
	
	Документ.НомерЛисткаНетрудоспособности = ДанныеИзСервиса.LN_CODE;
	
	СоответствиеПолей = Документы.БольничныйЛист.СоответствиеПолейЭЛН();
	Для Каждого СвойствоДокумента Из СоответствиеПолей Цикл
		Документ[СвойствоДокумента.Ключ] = ЗначениеИзСтрокиXMLПоТипу(ДанныеИзСервиса[СвойствоДокумента.Значение], ТипЗнч(Документ[СвойствоДокумента.Ключ]));
	КонецЦикла;
	
	Если ДанныеИзСервиса.LN_RESULT <> Неопределено Тогда
		Значения = Новый Структура("MSE_RESULT, OTHER_STATE_DT, RETURN_DATE_LPU, NEXT_LN_CODE");
		ЗаполнитьЗначенияСвойств(Значения, ДанныеИзСервиса.LN_RESULT);
		ЗаполнитьЗначениеИзСтрокиXML(Документ.НовыйСтатусНетрудоспособного,     Значения.MSE_RESULT,      Тип("Строка"));
		ЗаполнитьЗначениеИзСтрокиXML(Документ.ДатаНовыйСтатусНетрудоспособного, Значения.OTHER_STATE_DT,  Тип("Дата"));
		ЗаполнитьЗначениеИзСтрокиXML(Документ.ПриступитьКРаботеС,               Значения.RETURN_DATE_LPU, Тип("Дата"));
		ЗаполнитьЗначениеИзСтрокиXML(Документ.НомерЛисткаПродолжения,           Значения.NEXT_LN_CODE,    Тип("Строка"));
	КонецЕсли;
	
	Если ДанныеИзСервиса.HOSPITAL_BREACH <> Неопределено Тогда
		Значения = Новый Структура("HOSPITAL_BREACH_CODE, HOSPITAL_BREACH_DT");
		ЗаполнитьЗначенияСвойств(Значения, ДанныеИзСервиса.HOSPITAL_BREACH);
		ЗаполнитьЗначениеИзСтрокиXML(Документ.КодНарушенияРежима,  Значения.HOSPITAL_BREACH_CODE, Тип("Строка"));
		ЗаполнитьЗначениеИзСтрокиXML(Документ.ДатаНарушенияРежима, Значения.HOSPITAL_BREACH_DT,   Тип("Дата"));
	КонецЕсли;
	
	Номер = 0;
	Для Каждого СтрокаТаблицыПолныхПериодов Из ДанныеИзСервиса.ТаблицаПолныхПериодов Цикл
		
		ЗначенияПолныхПериодов = Новый Структура("TREAT_CHAIRMAN, TREAT_CHAIRMAN_ROLE");
		ЗаполнитьЗначенияСвойств(ЗначенияПолныхПериодов, СтрокаТаблицыПолныхПериодов);
		
		ТаблицаПериодов = СериализацияБЗК.СписокXDTO(СтрокаТаблицыПолныхПериодов, "TREAT_PERIOD");
		Для Каждого СтрокаТаблицыПериодов Из ТаблицаПериодов Цикл
			Номер = Номер + 1;
			
			ЗначенияПериодов = Новый Структура("TREAT_DT1, TREAT_DT2, TREAT_DOCTOR_ROLE, TREAT_DOCTOR");
			ЗаполнитьЗначенияСвойств(ЗначенияПериодов, СтрокаТаблицыПериодов);
			
			Документ["ОсвобождениеДатаНачала" + Номер]     = ЗначениеИзСтрокиXMLПоТипу(ЗначенияПериодов.TREAT_DT1, Тип("Дата"));
			Документ["ОсвобождениеДатаОкончания" + Номер]  = ЗначениеИзСтрокиXMLПоТипу(ЗначенияПериодов.TREAT_DT2, Тип("Дата"));
			Документ["ОсвобождениеФИОВрача" + Номер]       = ЗначенияПериодов.TREAT_DOCTOR;
			Документ["ОсвобождениеДолжностьВрача" + Номер] = ЗначенияПериодов.TREAT_DOCTOR_ROLE;
			
			Документ["ОсвобождениеФИОВрачаПредседателяВК" + Номер]       = ЗначенияПолныхПериодов.TREAT_CHAIRMAN;
			Документ["ОсвобождениеДолжностьВрачаПредседателяВК" + Номер] = ЗначенияПолныхПериодов.TREAT_CHAIRMAN_ROLE;
			
			Если Номер = 3 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Номер = 3 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Документы.БольничныйЛист.ПослеЗагрузкиЭЛН(Документ, ДанныеИзСервиса);
	
КонецПроцедуры

Процедура ЗаполнитьЗначениеИзСтрокиXML(Приемник, ЗначениеВФорматеXML, ТипЗначения)
	Значение = ЗначениеИзСтрокиXMLПоТипу(ЗначениеВФорматеXML, ТипЗначения);
	Если ЗначениеЗаполнено(Значение) Тогда
		Приемник = Значение;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьФИОСотрудника(Документ, ДанныеИзСервиса)
	
	// Проверка кадровых данных сотрудника.
	КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Документ.Сотрудник, "Фамилия, Имя, Отчество, ДатаРождения", ДанныеИзСервиса.LN_DATE);
	Найденные = КадровыеДанныеСотрудников.НайтиСтроки(Новый Структура("Сотрудник", Документ.Сотрудник));
	Если Найденные.Количество() > 0 Тогда
		КадровыеДанныеСотрудника = Найденные[0];
		
		Если ВРег(СокрЛП(ДанныеИзСервиса.SURNAME))       <> ВРег(СокрЛП(КадровыеДанныеСотрудника.Фамилия))
			Или ВРег(СокрЛП(ДанныеИзСервиса.NAME))       <> ВРег(СокрЛП(КадровыеДанныеСотрудника.Имя))
			Или ВРег(СокрЛП(ДанныеИзСервиса.PATRONIMIC)) <> ВРег(СокрЛП(КадровыеДанныеСотрудника.Отчество)) Тогда
			ТекстОшибки = НСтр("ru = 'ФИО указанные в листке нетрудоспособности (%1 %2 %3) не совпадают с ФИО сотрудника.'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, ДанныеИзСервиса.SURNAME, ДанныеИзСервиса.NAME, ДанныеИзСервиса.PATRONIMIC);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
		
		ДанныеЛНДатаРождения = ЗначениеИзСтрокиXMLПоТипу(ДанныеИзСервиса.BIRTHDAY, Тип("Дата"));
		Если ДанныеЛНДатаРождения <> КадровыеДанныеСотрудника.ДатаРождения Тогда
			ТекстОшибки = НСтр("ru = 'Дата рождения указанная в листке нетрудоспособности (%1) не совпадает с датой рождения сотрудника.'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, Формат(ДанныеЛНДатаРождения, "ДЛФ=D"));
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаРеестровЭЛН

Процедура ЗагрузитьРезультатОтправкиРеестраЭЛН(Документ, ЭлементыROW, Результат)
	ТребуетсяВывестиТекстСообщенияФСС = ЗначениеЗаполнено(Результат.ТекстСообщенияФСС);
	Для Каждого ROW Из ЭлементыROW Цикл
		ТребуетсяАктуализацияХеша = Ложь;
		ТекстыОшибок = Новый Массив;
		Если Строка(ROW.STATUS) <> "1" Тогда
			ЭлементыERROR = СериализацияБЗК.СписокXDTO(ROW, "ERRORS.ERROR");
			Для Каждого ERROR Из ЭлементыERROR Цикл
				ТекстыОшибок.Добавить(СтрШаблон("[%1] %2", СокрЛП(ERROR.ERR_CODE), СокрЛП(ERROR.ERR_MESS)));
				Если ERROR.ERR_CODE = "ERR_013" Тогда
					// Отказ не включается, т.к. будет предпринята попытка зачитать актуальные хеши и повторная попытка отправки.
					ТребуетсяАктуализацияХеша = Истина;
					ТекстыОшибок.Добавить(НСтр("ru = 'Будет предпринята попытка актуализации Хэша ЭЛН'")); // АПК:1036 для пользователей - "хэш"
				КонецЕсли;
				Если ТребуетсяВывестиТекстСообщенияФСС Тогда
					ЗарплатаКадрыОтображениеОшибок.СообщитьОбОшибке(Результат.Отказ, Результат.ТекстСообщенияФСС, "");
					ТребуетсяВывестиТекстСообщенияФСС = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Хеш = Неопределено;
		Если ROW.Свойства().Получить("LN_HASH") <> Неопределено Тогда
			Хеш = ЗначениеИзСтрокиXMLПоТипу(ROW.LN_HASH, Тип("Строка"));
		КонецЕсли;
		
		СтрокаДанныхЭЛН = Документ.ДанныеЭЛН.Найти(ROW.LN_CODE, "НомерЛисткаНетрудоспособности");
		Если СтрокаДанныхЭЛН = Неопределено Тогда
			ЗарплатаКадрыОтображениеОшибок.СообщитьОбОшибке(Результат.Отказ, СтрСоединить(ТекстыОшибок, Символы.ПС), "");
			ЗарплатаКадрыОтображениеОшибок.СообщитьОбОшибке(
				Результат.Отказ,
				СтрШаблон(НСтр("ru = 'ЭЛН № %1 не найден в документе.'"), ROW.LN_CODE),
				"НомерЛисткаНетрудоспособности",
				"ДанныеЭЛН",
				0,
				"Объект");
		Иначе
			СтрокаДанныхЭЛН.ТребуетсяАктуализацияХеша = ТребуетсяАктуализацияХеша;
			СтрокаДанныхЭЛН.КомментарийКСостоянию = СтрСоединить(ТекстыОшибок, Символы.ПС);
			Если Строка(ROW.STATUS) = "1" Тогда
				СтрокаДанныхЭЛН.Состояние = Перечисления.СостоянияЭЛНВРеестрахЭЛН.ПринятФСС;
			Иначе
				СтрокаДанныхЭЛН.Состояние = Перечисления.СостоянияЭЛНВРеестрахЭЛН.НеПринятФСС;
			КонецЕсли;
		КонецЕсли;
		
		РегистрыСведений.СведенияОбЭЛН.ПриЗагрузкеОтветаФССПоРеестру(ROW.LN_CODE, Документ, СтрокаДанныхЭЛН, Хеш);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
