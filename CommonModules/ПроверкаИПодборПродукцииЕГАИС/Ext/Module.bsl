
#Область СлужебныйПрограммныйИнтерфейс

#Область РасчетХешСумм

// Пересчитывает хеш-суммы всех упаковок формы и проверяется необходимость перемаркировки.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма проверки и подбора маркируемой продукции.
//
Процедура ПересчитатьХешСуммыВсехУпаковок(Форма) Экспорт

	Если НЕ Форма.ПроверятьНеобходимостьПеремаркировки Тогда
		Возврат;
	КонецЕсли;

	Если Форма.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияАлкогольнойПродукции.Бутылки Тогда
		Форма.КоличествоУпаковокКоторыеНеобходимоПеремаркировать = 0;
		ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ОтобразитьИнформациюОНеобходимостиПеремаркировки(Форма);
		Возврат;
	КонецЕсли;
	
	ТаблицаХешСумм = ПроверкаИПодборПродукцииИС.ПустаяТаблицаХешСумм();
	
	Для Каждого СтрокаДерева Из Форма.ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда
			ПроверкаИПодборПродукцииИС.РассчитатьХешСуммыУпаковки(СтрокаДерева, ТаблицаХешСумм, Истина);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПеремаркировки = ПроверкаИПодборПродукцииИС.ТаблицаПеремаркировки(ТаблицаХешСумм);
	
	ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ПроверитьНеобходимостьПеремаркировки(Форма, ТаблицаПеремаркировки, Ложь);
	
КонецПроцедуры

#КонецОбласти

Функция ДанныеРезультатовПроверки(Форма) Экспорт
	
	ДанныеРезультатовСканированияАлкогольнойПродукции = Новый Структура;
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("ДеревоМаркированнойПродукции",             ДанныеФормыВЗначение(Форма.ДеревоМаркированнойПродукции, Тип("ДеревоЗначений")));
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("ТаблицаНеМаркируемойПродукции",            ДанныеФормыВЗначение(Форма.ТаблицаНеМаркируемойПродукции, Тип("ТаблицаЗначений")));
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("ПулНеизвестныхАкцизныхМарок",              ДанныеФормыВЗначение(Форма.ПулНеизвестныхАкцизныхМарок, Тип("ТаблицаЗначений")));
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("АлкогольнаяПродукцияКОпределениюСправок2", ДанныеФормыВЗначение(Форма.АлкогольнаяПродукцияКОпределениюСправок2, Тип("ДеревоЗначений")));
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("УпаковкиДокумента",                        Форма.УпаковкиДокумента);
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("ДетализацияСтруктурыХранения",             Форма.ДетализацияСтруктурыХранения);
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("РежимПроверки",                            Форма.РежимПроверки);
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("ДобавленныеУпаковки",                      Форма.ДобавленныеУпаковки);
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("ДоступныеДляПроверкиУпаковки",             Форма.ДоступныеДляПроверкиУпаковки);
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("СледующийСтикерОтложено",                  Форма.СледующийСтикерОтложено);
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("СохраненВыборПоМаркируемойПродукции",      Форма.СохраненВыборПоМаркируемойПродукции);
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("ДанныеВыбораПоМаркируемойПродукции",       Форма.ДанныеВыбораПоМаркируемойПродукции);
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("ШтрихкодТекущейПроверяемойУпаковки",       ШтрихкодТекущейПроверяемойУпаковки(Форма));
	
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("ДанныеРанееСгенерированныхШтрихкодов",
		?(ЭтоАдресВременногоХранилища(Форма.АдресПредыдущихШтрихкодов),
			ПолучитьИзВременногоХранилища(Форма.АдресПредыдущихШтрихкодов),
			Неопределено)
	);
	
	Возврат ДанныеРезультатовСканированияАлкогольнойПродукции;
	
КонецФункции

Функция ШтрихкодТекущейПроверяемойУпаковки(Форма)

	Если Форма.ИдентификаторТекущейПроверяемойУпаковки = - 1 Тогда
		Возврат "";
	Иначе
		СтрокаСПроверяемойУпаковкой = Форма.ДеревоМаркированнойПродукции.НайтиПоИдентификатору(Форма.ИдентификаторТекущейПроверяемойУпаковки);
		
		Если СтрокаСПроверяемойУпаковкой = Неопределено Тогда
			Возврат "";
		Иначе
			Возврат СтрокаСПроверяемойУпаковкой.Штрихкод;
		КонецЕсли;
		
	КонецЕсли;

КонецФункции

Функция РезультатыПроверкиУспешноСохранены(Форма, ПостфиксСохранения, ТекстОшибки) Экспорт
	
	ПроверяемыйДокумент = Форма.ПроверяемыйДокумент;
	
	Попытка
		
		ДокументОснованиеОбъект = ПроверяемыйДокумент.ПолучитьОбъект();
		ДокументОснованиеОбъект.Заблокировать();
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;
		
	КонецПопытки;
	
	ДанныеРезультатовПроверки = ДанныеРезультатовПроверки(Форма);
	
	ДокументОснованиеОбъект["ДанныеПроверкиИПодбора" + ПостфиксСохранения] = Новый ХранилищеЗначения(ДанныеРезультатовПроверки);
	
	Если ПроверяемыйДокумент.Метаданные().Реквизиты.Найти("СтатусПроверкиИПодбора"+ПостфиксСохранения) <> Неопределено Тогда
		ДокументОснованиеОбъект["СтатусПроверкиИПодбора" + ПостфиксСохранения] = Перечисления.СтатусыПроверкиИПодбораИС.Выполняется;
	КонецЕсли;
	
	РежимЗаписи = ?(ДокументОснованиеОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
	
	ДокументОснованиеОбъект.Записать(РежимЗаписи);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти
