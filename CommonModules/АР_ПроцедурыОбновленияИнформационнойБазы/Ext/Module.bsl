////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы библиотеки АрендаИУправлениеНедвижимостью (АР) 
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                  Обработчики обновления таких библиотек должны быть вызваны ранее
//                                  обработчиков обновления данной библиотеки.
//                                  При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                  порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                  в процедуре ПриДобавленииПодсистем общего модуля ПодсистемыКонфигурацииПереопределяемый.
//
// Для стандартных процедур в основных модулях библиотек рекомендуется использовать
// не копию комментария, а ссылку на комментарий в модуле этом модуле.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = "Аренда"; // имя подсистемы должно отличаться от имени конфигурации
	Описание.Версия = 	АР_ОбщиеПроцедуры.ПолучитьВерсиюАренды(Метаданные.Версия);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для постоения плана обновления.
//
//
// Параметры:
//  Обработчики - это таблица значений, возвращаемая функцией
//                НоваяТаблицаОбработчиковОбновления модуля ОбновлениеИнформационнойБазы.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия    = "1.0.0.0";
//  Обработчик.Процедура = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
// 
//  Все свойства обработчика см. в комментарии к функции
//  НоваяТаблицаОбработчиковОбновления в модуле ОбновлениеИнформационнойБазы.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ОбновитьДанныеПоРасположениюТиповогоФайлаПланировок";
	Обработчик.ОбщиеДанные = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ПроверитьИменаМетаданныхВОграниченияхДоступа";
	Обработчик.ОбщиеДанные = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "0.0.0.1";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ПервыйЗапуск";
	Обработчик.Опциональный = Ложь;
	Обработчик.ОбщиеДанные  = Истина;
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.2.12.4";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ОбновитьШаблоныВордПриПереходеС20";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.2.12.4";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ОбновитьСпособЗаполненияВАктахСнятияПоказанийПриПереходеС20";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.2.12.4";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ЗаполнитьКлючиСвязейТабличныхЧастейДокументаКорректировкаДолга";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.2.12.4";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ЗаполнитьКлючиСвязейТабличныхЧастейДокументаВНО";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.2.12.4";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ОбновитьПрисоединеныеФайлыПриПереходеС20";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.2.12.4";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ОбновитьФайлыПланировок";
	Обработчик.Опциональный = Ложь; 
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.3.2.18";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ПоместитьСвойстваОбъектовАрендыВНабор";
	Обработчик.Опциональный = Ложь; 
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.3.2.20";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ПровестиСуществующиеСчетаНаАренду";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.3.3.1";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ЗаполнитьПризнакСдачиВАренду";      
	Обработчик.Опциональный = Ложь; 
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.3.3.1";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ВключитьОтображениеЗданийЭтажей";
	Обработчик.Опциональный = Ложь; 
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.3.3.1";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ЗаполнитьКатегориюОбъекта";
	Обработчик.Опциональный = Ложь; 
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.3.3.1";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ЗаполнитьКатегорииЗемель";
	Обработчик.Опциональный = Ложь; 
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.3.3.1";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.КонтактнаяИнформацияОбновлениеИБНачальноеЗаполнение";
	Обработчик.Опциональный = Ложь; 
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.3.3.8";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ЗаполнитьРесурсНУ";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.3.3.27";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ОчиститьПустыеНастройкиВерсионирования";
	
	// обработчики восстановления идентификаторов
	Обработчик = Обработчики.Добавить();   
	Обработчик.Версия = "3.3.3.38";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ЗаполнитьКонстанты";
	Обработчик.НачальноеЗаполнение = Ложь; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.3.3.38";
	Обработчик.Процедура = "Справочники.ЗарплатныеПроекты.ЗаполнитьБанкПоКлассификатору";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.3.3.38";
	Обработчик.Процедура = "Справочники.УдалитьСертификатыЭП.ПеренестиНастройкиСертификатов";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.3.3.38";
	Обработчик.Процедура = "РегламентированнаяОтчетность.ПереносДанныхЭДОПриОбновлении10158";
	
	Обработчик = Обработчики.Добавить();   
	Обработчик.Версия = "3.3.3.38";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ОбновитьТиповыеОперации";
	Обработчик.НачальноеЗаполнение = Ложь; 
	
	Обработчик = Обработчики.Добавить();   
	Обработчик.Версия = "3.3.3.40";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ОбновитьСпособыЗаполненияЦенЗавершение";
	Обработчик.НачальноеЗаполнение = Ложь; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.3.3.41";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗаполнитьПересозданныеОбщиеДанные";
	Обработчик.ОбщиеДанные = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.3.3.41";
	Обработчик.Процедура = "ЗарплатаКадрыВнутренний.ЗаменитьРазделенныеДанныеОбщими";
	
	Обработчик = Обработчики.Добавить();   
	Обработчик.Версия = "3.3.3.41";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ОбновитьДопСведенияИРеквизитыОбъектовАренды";
	Обработчик.НачальноеЗаполнение = Ложь; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.3.3.47";
	Обработчик.Процедура           = "Документы.КорректировкаРеализации.УстановитьРеквизитИсходныйДокумент";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();   
	Обработчик.Версия = "3.3.3.57";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.КонтактнаяИнформацияОбновлениеИБНачальноеЗаполнение";
	Обработчик.НачальноеЗаполнение = Ложь; 
	
	Обработчик = Обработчики.Добавить();   
	Обработчик.Версия = "3.3.3.69";
	Обработчик.Процедура = "УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформациюДляСписков";
	Обработчик.НачальноеЗаполнение = Ложь; 
	
	Обработчик = Обработчики.Добавить();   
	Обработчик.Версия = "3.3.3.71";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.УстановитьУслугуАренды";
	Обработчик.НачальноеЗаполнение = Ложь; 
	
	Обработчик = Обработчики.Добавить();   
	Обработчик.Версия = "3.3.3.71";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ДобавитьНовостьПоИспользованиюНесколькихУслугАренды";
	Обработчик.НачальноеЗаполнение = Ложь; 
	
	Обработчик = Обработчики.Добавить();   
	Обработчик.Версия = "3.3.3.72";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ЗаписатьСрокОплатыДокументов";
	Обработчик.НачальноеЗаполнение = Ложь; 
	
	Обработчик = Обработчики.Добавить();   
	Обработчик.Версия = "3.3.3.78";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.УстановитьСпособУчетаНДСПриНачисленииПени";
	Обработчик.НачальноеЗаполнение = Ложь; 
	
	Обработчик = Обработчики.Добавить();   
	Обработчик.Версия = "3.3.3.78";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ДобавитьНовостьПоУчетуПеней";
	Обработчик.НачальноеЗаполнение = Ложь; 
	
	Обработчик = Обработчики.Добавить();   
	Обработчик.Версия = "3.3.3.96";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.УстановитьИспользованиеСписковСчетчиков";
	Обработчик.НачальноеЗаполнение = Ложь; 
	
	Обработчик = Обработчики.Добавить();   
	Обработчик.Версия = "3.3.3.96";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ДобавитьНовостьПоИспользованиюСписковСчетчиков";
	Обработчик.НачальноеЗаполнение = Ложь; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.3.3.100";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ДобавитьНовостьПоДепозиту";
	Обработчик.НачальноеЗаполнение = Ложь; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.3.3.100";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ДобавитьНовостьПоОтправкеДокументовИзГрупповыхОбработок";
	Обработчик.НачальноеЗаполнение = Ложь; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.3.3.102";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ДобавитьРольАрендыВПрофилиГруппДоступа";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.3.3.111";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ДобавитьНовостьПоМультисобственникам";
	Обработчик.НачальноеЗаполнение = Ложь; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.3.3.111";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ЗаполнитьСобственниковОбъектовНедвижимости";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.3.3.113";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ДобавитьНовостьПоЗаполнениюПоЗданиюВАктахСнятия";
	Обработчик.НачальноеЗаполнение = Ложь; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.3.3.114";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ДобавитьНовостьПоПечатнойФормеРасчетПеней";
	Обработчик.НачальноеЗаполнение = Ложь; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.3.3.125";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ЗаполнитьДанныеПервичныхДокументов";
	Обработчик.НачальноеЗаполнение = Ложь; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.3.3.129";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ДобавитьНовостьПоНДС";
	Обработчик.НачальноеЗаполнение = Ложь; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.3.3.129";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ДобавитьНовостьПереходНаСтавкуНДС20";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.3.3.139";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ОбновитьСпособыНачислений";
	Обработчик.НачальноеЗаполнение = Истина; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.3.3.139";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ОбновитьУслугиТелефоннойСвязи";
	Обработчик.НачальноеЗаполнение = Ложь; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.3.3.139";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ДобавитьНовостьРасчетНачисленийПоФормулам";
	Обработчик.НачальноеЗаполнение = Ложь; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.3.3.141";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ДобавитьНовостьНапоминанияУведомления";
	Обработчик.НачальноеЗаполнение = Ложь; 
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.3.3.145";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ОбновитьПараметрыНачисленияПени";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.3.3.145";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ДобавитьНовостьРаздельныеСрокиОплаты";
	Обработчик.НачальноеЗаполнение = Ложь; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.3.3.146";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ДобавитьНовостьОптимизацияНовойСхемыНДС";
	Обработчик.НачальноеЗаполнение = Ложь; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.3.3.148";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.УстановитьИспользованиеНаборов";
	Обработчик.НачальноеЗаполнение = Ложь;  
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.3.3.156";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.УстановитьСтатусыДокумента";
	Обработчик.НачальноеЗаполнение = Ложь;  
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.3.3.162";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ОбновитьВариантыОтчетов";
	Обработчик.НачальноеЗаполнение = Ложь;  
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.3.3.165";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ОбновитьВариантыОтчетов";
	Обработчик.НачальноеЗаполнение = Истина;  
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.3.3.168";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ДобавитьНовостьОтчетСравнениеУсловийДоговоров";
	Обработчик.НачальноеЗаполнение = Ложь;  
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.3.3.168";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ОбновитьСчетаУчетаНоменклатурыПриПереходеС20";
	Обработчик.Опциональный = Ложь; 
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.3.3.170";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ОбработатьНезаполненныеСтатусыСчетов";
	Обработчик.Опциональный = Ложь; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.3.3.173";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ОбновитьНастройкиОтчетов";
	Обработчик.Опциональный = Ложь; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.3.3.176";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ДобавитьНовостьОтчетПоВзаиморасчетам";
	Обработчик.НачальноеЗаполнение = Ложь;  
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.3.3.178";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ДобавитьНовостьНовыеВозможностиДополнительныхСоглашений";
	Обработчик.Опциональный = Ложь; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.3.3.185";
	Обработчик.Процедура = "АР_ПроцедурыОбновленияИнформационнойБазы.ДобавитьНовостьПереименованОтчетПоВзаиморасчетам";
	Обработчик.Опциональный = Ложь; 
		
КонецПроцедуры

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия) Экспорт
	
	// СЕРВЕРНЫЕ СОБЫТИЯ.
	
	// Заполняет описания поставляемых профилей групп доступа и
	// переопределяет параметры обновления профилей и групп доступа.
	//
	//  Для автоматической подготовки содержимого процедуры следует
	// воспользоваться инструментами разработчика для подсистемы
	// Управление доступом.
	//
	// Параметры:
	//  ОписанияПрофилей    - Массив в который нужно добавить описания.
	//                        Пустая структура должна быть получена при помощи функции
	//                        УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа().
	//
	//  ПараметрыОбновления - Структура со свойствами:
	//
	//                        ОбновлятьИзмененныеПрофили - Булево (начальное значение Истина).
	//
	//                        ЗапретитьИзменениеПрофилей - Булево (начальное значение Истина),
	//                        если установить Ложь, тогда поставляемые профили будут открываться
	//                        в режиме ТолькоПросмотр.
	//
	//                        ОбновлятьГруппыДоступа - Булево (начальное значение Истина).
	//
	//                        ОбновлятьГруппыДоступаСУстаревшимиНастройками - Булево (начальное
	//                        значение Ложь), если установить Истина, то настройки значений,
	//                        сделанные администратором по виду доступа, который удален из
	//                        профиля, будут удалены из группы доступа.
	//
	// Синтаксис:
	// Процедура ПриЗаполненииПоставляемыхПрофилейГруппДоступа(ОписанияПрофилей, ПараметрыОбновления) Экспорт
	//
	// (То же, что УправлениеДоступомПереопределяемый.ЗаполнитьПоставляемыеПрофилиГруппДоступа).
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.УправлениеДоступом\ПриЗаполненииПоставляемыхПрофилейГруппДоступа");
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения монопольного обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия подсистемы до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия подсистемы после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления
//                                             подсистемы, сгруппированных по номеру версии.
//                            Процедура обхода выполненных обработчиков:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
//   ВыводитьОписаниеОбновлений - Булево (возвращаемое значение)- если установить Истина,
//                                тогда выводить форму с описанием обновлений.
//   МонопольныйРежим           - Булево - признак выполнения обновления в монопольном режиме.
//                                Истина - обновление выполнялось в монопольном режиме.
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
	// Не используется в БСП.
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы

// Процедура осуществляет первоначальное заполнение подсистемы Аренда
Процедура ПервыйЗапуск() Экспорт
	
	Если ЗначениеЗаполнено(Константы.АР_ОсновнаяУслугаПоАренде.Получить()) Тогда
		Возврат;
	КонецЕсли;
	
	//Создадим элемент "Аренда" в справочнике "Номенклатура" и запишем его в константу "УслугаАренда"
	УслугаАренда = Справочники.Номенклатура.НайтиПоНаименованию("Аренда недвижимости");
	Если УслугаАренда.Пустая() Тогда
		
		УслугаАрендаОбъект = Справочники.Номенклатура.СоздатьЭлемент();
		УслугаАрендаОбъект.Наименование = "Аренда недвижимости";
		УслугаАрендаОбъект.НаименованиеПолное = "Аренда недвижимости";
		УслугаАрендаОбъект.Услуга = Истина;
		УслугаАрендаОбъект.АР_ПостояннаяЧастьОплаты = Истина;
		УслугаАрендаОбъект.АР_УслугаАренды = Истина;
		УслугаАрендаОбъект.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("шт");
		УслугаАрендаОбъект.Записать();
		УслугаАренда = УслугаАрендаОбъект.Ссылка;
		
	КонецЕсли;
	
	СтраховойДепозит = Справочники.Номенклатура.НайтиПоНаименованию("Депозит (обеспечительный платеж)");
	Если СтраховойДепозит.Пустая() Тогда
		
		СтраховойДепозитОбъект = Справочники.Номенклатура.СоздатьЭлемент();
		СтраховойДепозитОбъект.Наименование = "Депозит (обеспечительный платеж)";
		СтраховойДепозитОбъект.НаименованиеПолное = "Депозит (обеспечительный платеж)";
		СтраховойДепозитОбъект.Услуга = Истина;
		СтраховойДепозитОбъект.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("шт");
		СтраховойДепозитОбъект.Записать();
		СтраховойДепозит = СтраховойДепозитОбъект.Ссылка;
		
	КонецЕсли;
	
	ЕдиницаКвадратныеМетры = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("м2");
	Если ЕдиницаКвадратныеМетры.Пустая() Тогда
		ЕдиницаОбъект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
		ЕдиницаОбъект.Наименование = "м2";
		ЕдиницаОбъект.НаименованиеПолное = "Квадратный метр";
		ЕдиницаОбъект.Код = "055";
		ЕдиницаОбъект.Записать();
		ЕдиницаКвадратныеМетры = ЕдиницаОбъект.Ссылка;		
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Если НЕ ЗначениеЗаполнено(ВалютаРегламентированногоУчета) Тогда
		ВалютаРегламентированногоУчета = Справочники.Валюты.НайтиПоКоду("643");
	КонецЕсли;
	
	СпособНачисления = Справочники.АР_СпособыНачисленияАренднойПлаты.СоздатьЭлемент();
	СпособНачисления.Валюта = ВалютаРегламентированногоУчета;
	СпособНачисления.Наименование = "В руб. за м2/месяц";
	СпособНачисления.ЕдиницаИзмерения = ЕдиницаКвадратныеМетры;
	СпособНачисления.ПериодНачисления = Перечисления.Периодичность.Месяц;
	СпособНачисления.ВариантРасчета = Перечисления.АР_ВариантыРасчета.ПоСтавкеЗаЕдиницуПлощади;
	СпособНачисления.Записать();
	
	Константы.АР_ОсновнойСпособНачисленияАрендойПлаты.Установить(СпособНачисления.Ссылка);
	
	СпособНачисления = Справочники.АР_СпособыНачисленияАренднойПлаты.СоздатьЭлемент();
	СпособНачисления.Валюта = ВалютаРегламентированногоУчета;
	СпособНачисления.Наименование = "Процент с торгового оборота";
	СпособНачисления.ПериодНачисления = Перечисления.Периодичность.Месяц;
	СпособНачисления.Формула = "?([Показатель] * [Ставка] / 100 > [АренднаяПлата], [Показатель] * [Ставка] / 100 - [АренднаяПлата], 0)";
	СпособНачисления.ВариантРасчета = Перечисления.АР_ВариантыРасчета.РасчетПоПроизвольнойФормуле;
	СпособНачисления.Записать();
	
	Константы.АР_ОсновнаяУслугаПоАренде.Установить(УслугаАренда);
	Константы.АР_ОсновнаяУслугаДляНачисленияДепозита.Установить(СтраховойДепозит);
	Константы.АР_ВестиУчетТарифицируемыхУслугПоСчетчикам.Установить(Истина);
	Константы.АР_ИспользоватьНесколькоСчетчиковДляУслуги.Установить(Истина);
	Константы.АР_ПериодНачисленияАренднойПлаты.Установить(Перечисления.Периодичность.Месяц);
	Константы.АР_ИспользоватьГрафикИзмененияСтавокВДоговорахАренды.Установить(Истина);
	Константы.АР_ПриРасчетеПениСрокОплатыРабочийДень.Установить(Истина);
	
	// Создадим и заполним производственный календарь РФ
	//ГрафикиРаботы.СоздатьКалендарьПятидневкаРоссийскойФедерации();
	КалендарныеГрафики.ОбновитьПроизводственныеКалендари();
	КалендарныеГрафики.ОбновитьДанныеПроизводственныхКалендарей();
	Константы.АР_ОсновнойПроизводственныйКалендарьАренды.Установить(Справочники.ПроизводственныеКалендари.НайтиПоКоду("РФ"));
	
	КонтактнаяИнформацияОбновлениеИБНачальноеЗаполнение();
	
	ЗаполнитьКатегорииЗемель();
	
	Константы.ИспользоватьЗаметки.Установить(Истина);
	Константы.ИспользоватьНапоминанияПользователя.Установить(Истина);
	
	УстановитьИспользованиеНаборов();
	ЗаполнитьСобственниковОбъектовНедвижимости();
	
	Константы.АР_ИспользоватьСхемуОпределенияСтавокНДСПоАрендеНаОсновеДоговора.Установить(Истина);
	
КонецПроцедуры

Процедура ОбновитьДанныеПоРасположениюТиповогоФайлаПланировок(ПР=неопределено) Экспорт
	
	
	ПредыдущаяВерсия = СтрЗаменить(СтрЗаменить(ОбновлениеИнформационнойБазы.ВерсияИБ("АрендаИУправлениеНедвижимостью"), ".", "_"), "/", "_");
	СтароеРасположение = "C:\Program Files\1cv82\tmplts\Elias\Arenda\" + ПредыдущаяВерсия + "\Plans.XLS"; 
	ТекущаяВерсия = СтрЗаменить(СтрЗаменить(Метаданные.Версия, ".", "_"), "/", "_");
	НовоеРасположение = "C:\Program Files\1cv82\tmplts\Elias\Arenda\" + ТекущаяВерсия + "\Plans.XLS"; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Расположение", СтароеРасположение);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АР_ФайлыПланировокПомещенийИПлощадей.Ссылка
	|ИЗ
	|	Справочник.АР_ФайлыПланировокПомещенийИПлощадей КАК АР_ФайлыПланировокПомещенийИПлощадей
	|ГДЕ
	|	НЕ АР_ФайлыПланировокПомещенийИПлощадей.ЭтоГруппа
	|	И АР_ФайлыПланировокПомещенийИПлощадей.ИмяФайла ПОДОБНО &Расположение";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ИмяФайла = НовоеРасположение;
		СправочникОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры //--ЭЛИАС 20120620

Процедура ПроверитьИменаМетаданныхВОграниченияхДоступа() Экспорт
	
	ТипыМетаданных = Новый Соответствие;
	ТипыМетаданных.Вставить("Справочник.", "Справочники.");
	ТипыМетаданных.Вставить("Документ.", "Документы.");
	ТипыМетаданных.Вставить("РегистрСведений.", "РегистрыСведений.");
	ТипыМетаданных.Вставить("РегистрНакопления.", "РегистрыНакопления.");
	ТипыМетаданных.Вставить("Константа.", "Константы.");
	ТипыМетаданных.Вставить("Отчет.", "Отчеты.");
	ТипыМетаданных.Вставить("Обработка.", "Обработки.");
	
	ОписаниеОшибки = "";
	
	ТабличныйДокумент = ПолучитьОбщийМакет("АР_ИменаМетаданныхВОграниченияхДоступа");
	К = 1;
	Пока Истина Цикл
		Текст = ТабличныйДокумент.Область("R" + Формат(К, "ЧГ=0") + "C1").Текст;
		Если НЕ ЗначениеЗаполнено(Текст) Тогда
			Прервать;
		КонецЕсли;
		ИмяМетаданного = Текст;
		Для Каждого Тип Из ТипыМетаданных Цикл
			ИмяМетаданного = СтрЗаменить(ИмяМетаданного, Тип.Ключ, Тип.Значение);
		КонецЦикла;
		СтруктураИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяМетаданного, ".");
		Если Метаданные[СтруктураИмени[0]].Найти(СтруктураИмени[1]) = Неопределено Тогда
			ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + Текст;	
		КонецЕсли;
		К = К + 1;
	КонецЦикла;
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ТекстСообщения = "Ошибка использования метаданных в ограничениях доступа" + ОписаниеОшибки;
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

// Процедура обновляет справочник "Шаблоны документов" при переходе с 2.0
Процедура ОбновитьШаблоныВордПриПереходеС20() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АР_ШаблоныДокументов.Ссылка
	|ИЗ
	|	Справочник.АР_ШаблоныДокументов КАК АР_ШаблоныДокументов
	|ГДЕ
	|	АР_ШаблоныДокументов.ТипДокумента = Значение(Перечисление.АР_ТипыДокументовПечатныхФорм.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ШаблонОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ШаблонОбъект.ОбновитьДанныеПриПереходеС20();
		ШаблонОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Процедура перезаполняет для каждого документа "КорректировкаДолга" табличные части
// - ДебиторскаяЗадолженность
// - КредиторскаяЗадолженность
// Тут информация из поля "УдалитьКлюч" переносится в "Ключ", преобразуясь в строку
//
// Если документ ранее был проведен и не помечен на удаление, то будет выполнена попытка проведения такого документа
// В противном случае документ будет просто записан
//
Процедура ЗаполнитьКлючиСвязейТабличныхЧастейДокументаКорректировкаДолга() Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
		|// Общий список строк, где есть несконвертированный ключ
		|ВЫБРАТЬ
		|	Док.Ссылка                  КАК Ссылка,
		|	Док.Ссылка.Проведен         КАК Проведен,
		|	Док.Ссылка.ПометкаУдаления  КАК ПометкаУдаления,
		|	Док.НомерСтроки             КАК НомерСтроки
		|ПОМЕСТИТЬ
		|	ВТ_ИтогиПоДокументу
		|ИЗ
		|(
		|ВЫБРАТЬ
		|	Док.Ссылка                  КАК Ссылка,
		|	Док.Ссылка.Проведен         КАК Проведен,
		|	Док.Ссылка.ПометкаУдаления  КАК ПометкаУдаления,
		|	Док.НомерСтроки             КАК НомерСтроки
		|ИЗ
		|	Документ.КорректировкаДолга.ДебиторскаяЗадолженность КАК Док
		|ГДЕ
		|	Док.УдалитьАР_Ключ <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Док.Ссылка                  КАК Ссылка,
		|	Док.Ссылка.Проведен         КАК Проведен,
		|	Док.Ссылка.ПометкаУдаления  КАК ПометкаУдаления,
		|	Док.НомерСтроки             КАК НомерСтроки
		|ИЗ
		|	Документ.КорректировкаДолга.КредиторскаяЗадолженность КАК Док
		|ГДЕ
		|	Док.УдалитьАР_Ключ <> 0
		|) КАК Док
		|;
		|
		|// Определить, какие документы надо конвертировать
		|ВЫБРАТЬ
		|	Док.Ссылка                  КАК Ссылка,
		|	Док.Ссылка.Проведен         КАК Проведен,
		|	Док.Ссылка.ПометкаУдаления  КАК ПометкаУдаления,
		|	КОЛИЧЕСТВО(Док.НомерСтроки) КАК КоличествоСтрокДляКонвертации
		|ИЗ
		|	ВТ_ИтогиПоДокументу КАК Док
		|СГРУППИРОВАТЬ ПО
		|	Док.Ссылка,
		|	Док.Ссылка.Проведен,
		|	Док.Ссылка.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Док.Ссылка.Дата,
		|	Док.Ссылка
		|";
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			Если Выборка.КоличествоСтрокДляКонвертации > 0 Тогда
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ДокументОбъект.ВыполнитьКонвертациюКлючейСвязиТабличныхЧастейПриПереходеС2БП();
				Если (Выборка.ПометкаУдаления) ИЛИ (НЕ Выборка.Проведен) Тогда
					Попытка
						ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
					Исключение
					КонецПопытки;
				Иначе
					Попытка
						ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
					Исключение
						ТекстСообщения = НСтр("ru='Операция не выполнена'");
						Попытка
							ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
							ТекстСообщения = ТекстСообщения + Символы.ПС + "Документ " + ДокументОбъект + " обработан, но проведение отменено.";
						Исключение
							ТекстСообщения = ТекстСообщения + Символы.ПС + "Документ " + ДокументОбъект + " не удалось обработать.";
						КонецПопытки;
						ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Процедура перезаполняет для каждого документа "ВводНачальныхОстатков" табличные части
// - МПЗОтгруженные
// - ДанныеПоСФ
// Тут информация из поля "УдалитьКлюч" переносится в "Ключ", преобразуясь в строку
//
// Другие табличные части (
// - НоменклатураНаСкладе (брать из УдалитьМПЗПриобретенные)
// - СпецодеждаИСпецоснасткаВЭксплуатации (брать из УдалитьМПЗПриобретенные)
// - МатериалыПереданныеВПереработку (брать из УдалитьМПЗПриобретенные)
// - ТоварыВРозничнойТорговлеАТТ (брать из УдалитьМПЗПриобретенные)
// - ТоварыВРозничнойТорговлеНТТ (брать из УдалитьМПЗПриобретенные)
// ) уже должны быть сконвертированы в процедуре ЗаполнитьТабличныеЧастиНоменклатурыДокументаВНО
//
// Не трогать: ////?
// - Обороты
// - МПЗРеализованныеИП
//
// Если документ ранее был проведен и не помечен на удаление, то будет выполнена попытка проведения такого документа
// В противном случае документ будет просто записан
//
Процедура ЗаполнитьКлючиСвязейТабличныхЧастейДокументаВНО() Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
		|// Общий список строк, где есть несконвертированный ключ
		|ВЫБРАТЬ
		|	Док.Ссылка                  КАК Ссылка,
		|	Док.Ссылка.Проведен         КАК Проведен,
		|	Док.Ссылка.ПометкаУдаления  КАК ПометкаУдаления,
		|	Док.НомерСтроки             КАК НомерСтроки
		|ПОМЕСТИТЬ
		|	ВТ_ИтогиПоДокументу
		|ИЗ
		|(
		|ВЫБРАТЬ
		|	Док.Ссылка                  КАК Ссылка,
		|	Док.Ссылка.Проведен         КАК Проведен,
		|	Док.Ссылка.ПометкаУдаления  КАК ПометкаУдаления,
		|	Док.НомерСтроки             КАК НомерСтроки
		|ИЗ
		|	Документ.ВводНачальныхОстатков.РасчетыСКонтрагентами КАК Док
		|ГДЕ
		|	Док.УдалитьАР_Ключ <> 0) КАК Док
		|;
		|
		|// Определить, какие документы надо конвертировать
		|ВЫБРАТЬ
		|	Док.Ссылка                  КАК Ссылка,
		|	Док.Ссылка.Проведен         КАК Проведен,
		|	Док.Ссылка.ПометкаУдаления  КАК ПометкаУдаления,
		|	КОЛИЧЕСТВО(Док.НомерСтроки) КАК КоличествоСтрокДляКонвертации
		|ИЗ
		|	ВТ_ИтогиПоДокументу КАК Док
		|СГРУППИРОВАТЬ ПО
		|	Док.Ссылка,
		|	Док.Ссылка.Проведен,
		|	Док.Ссылка.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Док.Ссылка.Дата,
		|	Док.Ссылка
		|";
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Попытка
			Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока Выборка.Следующий() Цикл
				Если Выборка.КоличествоСтрокДляКонвертации > 0 Тогда
					ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
					АР_ОбщиеПроцедуры.ВводНачальныхОстатковВыполнитьКонвертациюКлючейСвязиРасчетовСКонтрагентамиПриПереходеС2БП(ДокументОбъект);
					Если (Выборка.ПометкаУдаления) ИЛИ (НЕ Выборка.Проведен) Тогда
						ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
					Иначе
						ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'");
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

// Процедура переносит данные справочника "УдалитьАР_ХранилищеДополнительнойИнформации"
// в соответсвующи справочники при переходе с 2.0
Процедура ОбновитьПрисоединеныеФайлыПриПереходеС20() Экспорт
	
	СписокСправочников = Новый СписокЗначений;
	СписокСправочников.Добавить("АР_ОбъектыАрендыПрисоединенныеФайлы");
	СписокСправочников.Добавить("АР_АктПриемаВозвратаАрендуемогоПомещенияПрисоединенныеФайлы");
	СписокСправочников.Добавить("АР_АктПриемаПередачиПомещенияВАрендуПрисоединенныеФайлы");
	СписокСправочников.Добавить("АР_АктСнятияПоказанийСчетчикаПрисоединенныеФайлы");
	СписокСправочников.Добавить("АР_ДополнительноеСоглашениеПрисоединенныеФайлы");
	СписокСправочников.Добавить("АР_ЗаключениеДоговораАрендыПрисоединенныеФайлы");
	СписокСправочников.Добавить("АР_РасторжениеДоговораАрендыПрисоединенныеФайлы");
	СписокСправочников.Добавить("КонтрагентыПрисоединенныеФайлы");
	
	СписокОбновляемыхСправочников = Новый СписокЗначений;
	
	Для каждого Элемент Из СписокСправочников Цикл
		Если Не Справочники[Элемент.Значение].Выбрать().Следующий() Тогда
			СписокОбновляемыхСправочников.Добавить(Элемент.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УдалитьАР_ХранилищеДополнительнойИнформации.Ссылка,
	|	УдалитьАР_ХранилищеДополнительнойИнформации.ИмяФайла,
	|	УдалитьАР_ХранилищеДополнительнойИнформации.Объект,
	|	УдалитьАР_ХранилищеДополнительнойИнформации.Хранилище,
	|	УдалитьАР_ХранилищеДополнительнойИнформации.ВидДанных,
	|	УдалитьАР_ХранилищеДополнительнойИнформации.Наименование
	|ИЗ
	|	Справочник.УдалитьАР_ХранилищеДополнительнойИнформации КАК УдалитьАР_ХранилищеДополнительнойИнформации";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИмяОбъекта = Выборка.Объект.Метаданные().Имя;
		Если СписокОбновляемыхСправочников.НайтиПоЗначению(ИмяОбъекта + "ПрисоединенныеФайлы") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.ВидДанных = Перечисления.УдалитьАР_ВидыДополнительнойИнформацииОбъектов.Изображение Тогда
			ИмяБезРасширения = Выборка.Наименование;
			Расширение = "";
		Иначе 
			Расширение = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(Выборка.ИмяФайла);
			Если ЗначениеЗаполнено(Расширение) Тогда
				ИмяБезРасширения = Лев(Выборка.ИмяФайла, СтрДлина(Выборка.ИмяФайла) - СтрДлина(Расширение) - 1);
			Иначе
				ИмяБезРасширения = Выборка.ИмяФайла;
			КонецЕсли;
		КонецЕсли;
		
		ДвоичныеДанные = Выборка.Хранилище.Получить();
		Если ТипЗнч(ДвоичныеДанные) = Тип("Картинка") Тогда
			Расширение = Строка(ДвоичныеДанные.Формат());
			ДвоичныеДанные = ДвоичныеДанные.ПолучитьДвоичныеДанные();
		КонецЕсли;
		
		АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("Автор",                       Неопределено);
		ПараметрыФайла.Вставить("ВладелецФайлов",              Выборка.Объект);
		ПараметрыФайла.Вставить("ИмяБезРасширения",            ИмяБезРасширения);
		ПараметрыФайла.Вставить("РасширениеБезТочки",          Расширение);
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
		
		ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла,
			АдресВременногоХранилищаФайла,
			"");
			
	КонецЦикла;
		
КонецПроцедуры

Процедура ОбновитьФайлыПланировок() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(АР_ПланировкиПомещенийИПлощадей.УдалитьФайлШаблона КАК СТРОКА(1000)) КАК ИмяФайла,
	|	АР_ПланировкиПомещенийИПлощадей.Ссылка
	|ИЗ
	|	Справочник.АР_ПланировкиПомещенийИПлощадей КАК АР_ПланировкиПомещенийИПлощадей
	|ГДЕ
	|	АР_ПланировкиПомещенийИПлощадей.ФайлПланировки = ЗНАЧЕНИЕ(Справочник.АР_ФайлыПланировокПомещенийИПлощадей.ПустаяСсылка)
	|ИТОГИ ПО
	|	ИмяФайла";
	
	ВыборкаФайлы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаФайлы.Следующий() Цикл
		
		Файл = Новый Файл(ВыборкаФайлы.ИмяФайла);
		Если Не Файл.Существует() Тогда
			Продолжить;
		КонецЕсли;
		
		ФайлПланировки = Справочники.АР_ФайлыПланировокПомещенийИПлощадей.СоздатьЭлемент();
		ФайлПланировки.ИмяФайла = ВыборкаФайлы.ИмяФайла;
		ФайлПланировки.Наименование = Файл.ИмяБезРасширения;
		ФайлПланировки.Записать();
		
		Выборка = ВыборкаФайлы.Выбрать();
		Пока Выборка.Следующий() Цикл
			ПланировкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ПланировкаОбъект.ФайлПланировки = ФайлПланировки.Ссылка;
			ПланировкаОбъект.Записать();
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры 

Процедура ПоместитьСвойстваОбъектовАрендыВНабор() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДополнительныеСведения.Свойство
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Объект ССЫЛКА Справочник.АР_ОбъектыАренды";
	Рез = Запрос.Выполнить().Выгрузить();
	
	Набор = Справочники.НаборыДополнительныхРеквизитовИСведений.НайтиПоНаименованию("Объект аренды");
	Если ЗначениеЗаполнено(Набор) Тогда
		НаборОбъект = Набор.ПолучитьОбъект();
		Для каждого Стр Из Рез Цикл
	        СтрокаТЧ = НаборОбъект.ДополнительныеСведения.Найти(Стр.Свойство, "Свойство");
			Если СтрокаТЧ = Неопределено Тогда
				ДопСведение = НаборОбъект.ДополнительныеСведения.Добавить();
				ДопСведение.Свойство = Стр.Свойство;
				СвойствоОбъект = Стр.Свойство.ПолучитьОбъект();
				СвойствоОбъект.НаборСвойств = Набор;
				СвойствоОбъект.Записать();
			КонецЕсли;
		КонецЦикла;
		НаборОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПровестиСуществующиеСчетаНаАренду() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АР_СчетНаАренду.Ссылка
	|ИЗ
	|	Документ.АР_СчетНаАренду КАК АР_СчетНаАренду
	|ГДЕ
	|	НЕ АР_СчетНаАренду.ПометкаУдаления
	|	И НЕ АР_СчетНаАренду.Проведен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СчетОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Попытка
			СчетОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
		КонецПопытки;	
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакСдачиВАренду() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбъектыАренды.Ссылка КАК ОбъектАренды,
	|	ВЫБОР
	|		КОГДА ОбъектыПодлежащиеСдачеВАрендуСрезПоследних.Период ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА ПодчиненныеОбъектыАренды.Ссылка ЕСТЬ NULL 
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Обрабатывать
	|ИЗ
	|	Справочник.АР_ОбъектыАренды КАК ОбъектыАренды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АР_ОбъектыПодлежащиеСдачеВАренду.СрезПоследних КАК ОбъектыПодлежащиеСдачеВАрендуСрезПоследних
	|		ПО (ОбъектыПодлежащиеСдачеВАрендуСрезПоследних.ОбъектАренды = ОбъектыАренды.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АР_ОбъектыАренды КАК ПодчиненныеОбъектыАренды
	|		ПО ОбъектыАренды.Ссылка = ПодчиненныеОбъектыАренды.Родитель";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Обрабатывать Тогда
			Запись = РегистрыСведений.АР_ОбъектыПодлежащиеСдачеВАренду.СоздатьМенеджерЗаписи();
			Запись.Период = Дата(2005, 01, 01);
			Запись.ОбъектАренды = Выборка.ОбъектАренды;
			Запись.ПодлежитСдачеВАренду = Истина;
			Запись.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВключитьОтображениеЗданийЭтажей() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АР_ЗданияИЭтажи.Ссылка
	|ИЗ
	|	Справочник.АР_ЗданияИЭтажи КАК АР_ЗданияИЭтажи";
	
	Если Запрос.Выполнить().Пустой() Тогда
		Константы.АР_ИспользоватьСправочникЗданияИЭтажи.Установить(Ложь);
		Константы.АР_ПоказыватьНастройкуИспользованияСправочникаЗданияИЭтажи.Установить(Ложь);
	Иначе
		Константы.АР_ИспользоватьСправочникЗданияИЭтажи.Установить(Истина);
		Константы.АР_ПоказыватьНастройкуИспользованияСправочникаЗданияИЭтажи.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКатегориюОбъекта() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АР_ТипыОбъектовАренды.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.АР_КатегорииОбъектовНедвижимости.Помещение) КАК КатегорияОбъекта,
	|	АР_ТипыОбъектовАренды.Наименование
	|ИЗ
	|	Справочник.АР_ТипыОбъектовАренды КАК АР_ТипыОбъектовАренды
	|ГДЕ
	|	НЕ АР_ТипыОбъектовАренды.ЭтоГруппа
	|	И АР_ТипыОбъектовАренды.КатегорияОбъекта = ЗНАЧЕНИЕ(Перечисление.АР_КатегорииОбъектовНедвижимости.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.КатегорияОбъекта = Выборка.КатегорияОбъекта;
		Объект.Записать();
		ТекстСообщения = НСтр("ru = 'Для типа объектов недвижимости """ + Выборка.Наименование + """ установлена категория ""Помещение"". В случае необходимости скорректируйте категорию вручную.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКатегорииЗемель() Экспорт
	
	СписокЭлементов = Новый СписокЗначений;
	СписокЭлементов.Добавить("100", "Земли сельскохозяйственного назначения");
	СписокЭлементов.Добавить("200", "Земли населенных пунктов");
	СписокЭлементов.Добавить("300", "Земли промышленности, энергетики, транспорта, связи, радиовещания, телевидения, информатики, космической деят-ти, обороны, безоп-ти и иного спецназн.");
	СписокЭлементов.Добавить("400", "Земли особо охраняемых территорий и объектов");
	СписокЭлементов.Добавить("500", "Земли лесного фонда");
	СписокЭлементов.Добавить("600", "Земли водного фонда");
	СписокЭлементов.Добавить("700", "Земли запаса");
	
	Для Каждого Элемент Из СписокЭлементов Цикл
		Если ЗначениеЗаполнено(Справочники.АР_КатегорииЗемель.НайтиПоКоду(Элемент.Значение)) Тогда
			Продолжить;
		КонецЕсли;
		Спр = Справочники.АР_КатегорииЗемель.СоздатьЭлемент();
		Спр.Код = Элемент.Значение;
		Спр.Наименование = Элемент.Представление;
		Спр.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРесурсНУ() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АР_ВзаиморасчетыПоАренде.Регистратор
	|ИЗ
	|	РегистрНакопления.АР_ВзаиморасчетыПоАренде КАК АР_ВзаиморасчетыПоАренде";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыНакопления.АР_ВзаиморасчетыПоАренде.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
		Для Каждого Запись Из НаборЗаписей Цикл
			Запись.СуммаНУ = Запись.Сумма
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
			
КонецПроцедуры

Процедура ОбновитьСпособЗаполненияВАктахСнятияПоказанийПриПереходеС20() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АР_АктСнятияПоказанийСчетчика.Ссылка
	|ИЗ
	|	Документ.АР_АктСнятияПоказанийСчетчика КАК АР_АктСнятияПоказанийСчетчика
	|ГДЕ
	|	АР_АктСнятияПоказанийСчетчика.УдалитьСпособЗаполнения
	|	И АР_АктСнятияПоказанийСчетчика.СпособЗаполнения = 0";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.СпособЗаполнения = 1;
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьРольАрендыВПрофилиГруппДоступа() Экспорт
	
	Выборка = Справочники.ПрофилиГруппДоступа.Выбрать();
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Выборка.ПолучитьОбъект();
		// добавление роли происходит при записи справочника
		СправочникОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьПустыеНастройкиВерсионирования() Экспорт
	
	Набор = РегистрыСведений.НастройкиВерсионированияОбъектов.СоздатьНаборЗаписей();
	Набор.Отбор.ТипОбъекта.Установить(Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка());
	Набор.Прочитать();
	Набор.Очистить();
	Набор.Записать();
	
КонецПроцедуры

// Процедура обновляет элементы справочника Виды контактной информации
Процедура КонтактнаяИнформацияОбновлениеИБНачальноеЗаполнение() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.ИмяПредопределенныхДанных = ""СправочникАР_ОбъектыАренды""";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ГруппаКИ = Выборка.Ссылка.ПолучитьОбъект();
		ГруппаКИ.Используется = Истина;
		ГруппаКИ.Записать();
	КонецЕсли;
	
	// Объекты аренды
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.АдресОбъектаАренды;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Истина;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 1;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

Процедура ОбновитьТиповыеОперации() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТиповыеОперации.Ссылка) КАК КоличествоОпераций
	|ПОМЕСТИТЬ ТиповыеОперации
	|ИЗ
	|	Справочник.ТиповыеОперации КАК ТиповыеОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьТиповыеОперации.Ссылка
	|ИЗ
	|	Справочник.УдалитьТиповыеОперации КАК УдалитьТиповыеОперации,
	|	ТиповыеОперации КАК ТиповыеОперации
	|ГДЕ
	|	НЕ УдалитьТиповыеОперации.ПометкаУдаления
	|	И ТиповыеОперации.КоличествоОпераций = 0
	|	И НЕ УдалитьТиповыеОперации.ЭтоГруппа";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СправочникОбъект = Справочники.ТиповыеОперации.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(СправочникОбъект, Выборка.Ссылка,, "Ссылка, Родитель, ЭтоГруппа, Владелец");
		
		Для Каждого СтрокаТЧ Из Выборка.Ссылка.Хозрасчетный Цикл
			Стр = СправочникОбъект.Хозрасчетный.Добавить();
			ЗаполнитьЗначенияСвойств(Стр, СтрокаТЧ);
		КонецЦикла;
		
		Для Каждого СтрокаТЧ Из Выборка.Ссылка.ДвиженияРегистров Цикл
			Стр = СправочникОбъект.ДвиженияРегистров.Добавить();
			ЗаполнитьЗначенияСвойств(Стр, СтрокаТЧ);
		КонецЦикла;
		
		СправочникОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКонстанты() Экспорт
	
	ВестиУчетПоОрганизациям = Константы.ВестиУчетПоОрганизациям.Получить();
	НеВестиУчетПоОрганизациям = Константы.НеВестиУчетПоОрганизациям.Получить();
		
	ОсновнойВидОрганизации         = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	ОсновнаяСистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая;
	
	Константы.ОсновнаяСистемаНалогообложения.Установить(ОсновнаяСистемаНалогообложения);
	
КонецПроцедуры

Процедура ОбновитьДопСведенияИРеквизитыОбъектовАренды() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Наименование", "Объект недвижимости");
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НаборыДополнительныхРеквизитовИСведений.Ссылка
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
	|ГДЕ
	|	НаборыДополнительныхРеквизитовИСведений.Наименование = &Наименование
	|	И НЕ НаборыДополнительныхРеквизитовИСведений.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаборыДополнительныхРеквизитовИСведений.Ссылка
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
	|ГДЕ
	|	НаборыДополнительныхРеквизитовИСведений.Наименование = &Наименование
	|	И НаборыДополнительныхРеквизитовИСведений.ПометкаУдаления";
	РезультатПакета = Запрос.ВыполнитьПакет();
	
	НовыйНабор = Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка();
	ВыборкаНаборов = РезультатПакета[0].Выбрать();
	Пока ВыборкаНаборов.Следующий() Цикл
		НовыйНабор = ВыборкаНаборов.Ссылка;
		Прервать;
	КонецЦикла;
	
	
	Если ЗначениеЗаполнено(НовыйНабор) Тогда
		
		НовыйНаборОбъект = НовыйНабор.ПолучитьОбъект();
		МассивПВХ = Новый Массив;
		
		ВыборкаНаборов = РезультатПакета[1].Выбрать();
		Пока ВыборкаНаборов.Следующий() Цикл
			
			СтарыйНаборОбъект = ВыборкаНаборов.Ссылка.ПолучитьОбъект();
			
			Для Каждого СтрокаТЧ Из СтарыйНаборОбъект.ДополнительныеРеквизиты Цикл
				Стр = НовыйНаборОбъект.ДополнительныеРеквизиты.Добавить();	
				ЗаполнитьЗначенияСвойств(Стр, СтрокаТЧ);
				Если МассивПВХ.Найти(Стр.Свойство) = Неопределено Тогда
					МассивПВХ.Добавить(Стр.Свойство);
				КонецЕсли;
			КонецЦикла;
			Для Каждого СтрокаТЧ Из СтарыйНаборОбъект.ДополнительныеСведения Цикл
				Стр = НовыйНаборОбъект.ДополнительныеСведения.Добавить();	
				ЗаполнитьЗначенияСвойств(Стр, СтрокаТЧ);
				Если МассивПВХ.Найти(Стр.Свойство) = Неопределено Тогда
					МассивПВХ.Добавить(Стр.Свойство);
				КонецЕсли;
			КонецЦикла;
			
			СтарыйНаборОбъект.ДополнительныеРеквизиты.Очистить();
			СтарыйНаборОбъект.ДополнительныеСведения.Очистить();
			
			СтарыйНаборОбъект.Записать();
			НовыйНаборОбъект.Записать();
			
		КонецЦикла;
		
		Для Каждого Элемент Из МассивПВХ Цикл
			ПВХОбъект = Элемент.ПолучитьОбъект();
			ПВХОбъект.ПометкаУдаления = Ложь;
			ПВХОбъект.НаборСвойств = НовыйНабор;
			ПВХОбъект.Записать();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСпособыЗаполненияЦенЗавершение() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыДокументов.СпособЗаполненияЦены
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатурыДокументов КАК ЦеныНоменклатурыДокументов
	|
	|СГРУППИРОВАТЬ ПО
	|	ЦеныНоменклатурыДокументов.СпособЗаполненияЦены";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.СпособЗаполненияЦены) Тогда
			
			НовоеЗначение = Перечисления.СпособыЗаполненияЦен.ПустаяСсылка();
			
			Для Каждого ОписаниеПеречисления Из Метаданные.Перечисления.СпособыЗаполненияЦен.ЗначенияПеречисления Цикл
				Если Перечисления.СпособыЗаполненияЦен[ОписаниеПеречисления.Имя] = Выборка.СпособЗаполненияЦены 
					И СтрНайти(ОписаниеПеречисления.Имя, "АР_Удалить") > 0 Тогда
					НовоеЗначение = Перечисления.СпособыЗаполненияЦен[СтрЗаменить(ОписаниеПеречисления.Имя, "АР_Удалить", "")];
					Прервать;	
				КонецЕсли;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(НовоеЗначение) Тогда
				
				НовыйНабор = РегистрыСведений.ЦеныНоменклатурыДокументов.СоздатьНаборЗаписей();
				НовыйНабор.Отбор.СпособЗаполненияЦены.Установить(НовоеЗначение);
				НовыйНабор.Прочитать();
				Набор = РегистрыСведений.ЦеныНоменклатурыДокументов.СоздатьНаборЗаписей();
				Набор.Отбор.СпособЗаполненияЦены.Установить(Выборка.СпособЗаполненияЦены);
				Набор.Прочитать();
				
				Для Каждого Запись Из Набор Цикл
					НоваяЗапись = НовыйНабор.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗапись, Запись);
					НоваяЗапись.СпособЗаполненияЦены = НовоеЗначение;
				КонецЦикла;
				
				Набор.Очистить();
				Набор.Записать();
				НовыйНабор.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьИспользованиеНаборов() Экспорт
	
	СписокНаборовДляОбновления = Новый Массив;
	СписокНаборовДляОбновления.Добавить("Справочник_АР_ОбъектыАренды");
	СписокНаборовДляОбновления.Добавить("Справочник_АР_КатегорииЦенАренды");
	СписокНаборовДляОбновления.Добавить("Справочник_АР_Счетчики");
	СписокНаборовДляОбновления.Добавить("Справочник_АР_ЭлементыОбъектовАренды");
	СписокНаборовДляОбновления.Добавить("Документ_АР_АктПриемаВозвратаАрендуемогоПомещения");
	СписокНаборовДляОбновления.Добавить("Документ_АР_АктПриемаПередачиПомещенияВАренду");
	СписокНаборовДляОбновления.Добавить("Документ_АР_АктСнятияПоказанийСчетчика");
	СписокНаборовДляОбновления.Добавить("Документ_АР_ВыполнениеРаботПоОбслуживанию");
	СписокНаборовДляОбновления.Добавить("Документ_АР_ДополнительноеСоглашение");
	СписокНаборовДляОбновления.Добавить("Документ_АР_ЗаключениеДоговораАренды");
	СписокНаборовДляОбновления.Добавить("Документ_АР_ЗаявкаНаОбслуживание");
	СписокНаборовДляОбновления.Добавить("Документ_АР_ИзменениеСтатусовОбъектов");
	СписокНаборовДляОбновления.Добавить("Документ_АР_НачислениеАренднойПлаты");
	СписокНаборовДляОбновления.Добавить("Документ_АР_НачислениеПени");
	СписокНаборовДляОбновления.Добавить("Документ_АР_РасторжениеДоговораАренды");
	СписокНаборовДляОбновления.Добавить("Документ_АР_СчетНаАренду");
	СписокНаборовДляОбновления.Добавить("Документ_АР_УстановкаЦенНаАренду");
	
	Для Каждого ИмяНабора Из СписокНаборовДляОбновления Цикл
		НаборДополнительныхРеквизитовИСведенийСсылка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.НаборыДополнительныхРеквизитовИСведений." + ИмяНабора);
		Если НаборДополнительныхРеквизитовИСведенийСсылка <> Неопределено Тогда
		
			НаборДополнительныхРеквизитовИСведенийОбъект = НаборДополнительныхРеквизитовИСведенийСсылка.ПолучитьОбъект();
			НаборДополнительныхРеквизитовИСведенийОбъект.Используется = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НаборДополнительныхРеквизитовИСведенийОбъект);
		
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьСрокОплатыДокументов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДокументов.Организация КАК Организация,
	|	ТаблицаДокументов.Ссылка КАК Документ
	|ИЗ
	|	Документ.АР_СчетНаАренду КАК ТаблицаДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СрокиОплатыДокументов КАК СрокиОплатыДокументов
	|		ПО ТаблицаДокументов.Ссылка = СрокиОплатыДокументов.Документ
	|			И ТаблицаДокументов.Организация = СрокиОплатыДокументов.Организация
	|ГДЕ
	|	СрокиОплатыДокументов.СрокОплаты ЕСТЬ NULL";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.СрокиОплатыДокументов.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Документ.Значение = Выборка.Документ;
		НаборЗаписей.Отбор.Документ.Использование = Истина;
		
		Запись = НаборЗаписей.Добавить();
		Запись.Организация = Выборка.Организация;
		Запись.Документ    = Выборка.Документ;
		Запись.СрокОплаты  = 0;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьУслугуАренды() Экспорт
	
	УслугаАренды = Константы.АР_ОсновнаяУслугаПоАренде.Получить();
	Если ЗначениеЗаполнено(УслугаАренды) И НЕ УслугаАренды.АР_УслугаАренды Тогда
		УслугаАрендыОбъект = УслугаАренды.ПолучитьОбъект();
		УслугаАрендыОбъект.АР_УслугаАренды = Истина;
		УслугаАрендыОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСпособУчетаНДСПриНачисленииПени() Экспорт
	
	СпособУчетаНДСПриНачисленииПени = Константы.АР_СпособУчетаНДСПриНачисленииПеней.Получить();
	Если НЕ ЗначениеЗаполнено(СпособУчетаНДСПриНачисленииПени) Тогда
		Константы.АР_СпособУчетаНДСПриНачисленииПеней.Установить(Перечисления.АР_СпособыУчетаНДСПриНачисленииПеней.НДСВСумме);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьНовостьПоИспользованиюНесколькихУслугАренды() Экспорт
	
	НаименованиеНовости = "Использование нескольких услуг аренды недвижимости";
	ТекстНовости = "Добавлена возможность использования нескольких услуг аренды недвижимости (ранее услугой аренды недвижимости считалась услуга, указанная в настройках параметров по недвижимости). 
		|Признак того, что услуга является услугой по аренде недвижимости, устанавливается в карточке услуги в группе полей ""Параметры услуги"". Признак влияет на изменение статуса объекта недвижимости при проведении документа ""Заключение договора аренды"", а также влияет на алгоритм формирования некоторых отчетов. 
		|Услуга аренды в настройках параметров по недвижимости используется как услуга аренды по умолчанию, для автоматической подстановки в документы.";
	
	Новость = Справочники.Новости.НайтиПоНаименованию(НаименованиеНовости);
	Если НЕ ЗначениеЗаполнено(Новость) Тогда
		НовостьОбъект = Справочники.Новости.СоздатьЭлемент();
		НовостьОбъект.УИННовости = Новый УникальныйИдентификатор;
	Иначе
		НовостьОбъект = Новость.ПолучитьОбъект();
	КонецЕсли;
	НовостьОбъект.ЛентаНовостей = Справочники.ЛентыНовостей.НайтиПоНаименованию("Что нового в версии");
	НовостьОбъект.Наименование = НаименованиеНовости;
	НовостьОбъект.ДатаПубликации = Дата(2016, 11, 28);
	НовостьОбъект.ТекстНовости = ТекстНовости;
	
	НовостьОбъект.ПривязкаКМетаданным.Очистить();
	
	СтрокаТЧ = НовостьОбъект.ПривязкаКМетаданным.Добавить();
	СтрокаТЧ.Метаданные = "БП.Документ.АР_ЗаключениеДоговораАренды";
	СтрокаТЧ.Форма = "ФормаСписка";
	СтрокаТЧ.Событие = "ПриОткрытии";
	СтрокаТЧ.ПоказыватьВФормеОбъекта = Истина;
	СтрокаТЧ.Важность = 1;
	СтрокаТЧ.ДатаСбросаВажности = Дата(2018, 1, 1);
	
	СтрокаТЧ = НовостьОбъект.ПривязкаКМетаданным.Добавить();
	СтрокаТЧ.Метаданные = "БП.РазделУчета.АР_АрендаНедвижимости";
	
	НовостьОбъект.Записать();
	
	// Для оповещения при запуске программы
	Запись = РегистрыСведений.ПериодическиеСвойстваНовостей.СоздатьМенеджерЗаписи();
	Запись.Новость = НовостьОбъект.Ссылка;
	Запись.ВажностьОбщая = 1;
	Запись.Актуальность = Истина;
	Запись.Записать();
	
КонецПроцедуры

Процедура ДобавитьНовостьПоУчетуПеней() Экспорт
	
	НаименованиеНовости = "Учет пеней по аренде";
	ТекстНовости = "Оптимизирован механизм учета пеней по аренде в части обложения НДС и отнесения пеней к выручке. В документах оплаты оптимизирован способ определения счета учета пеней.  
		|Добавлена возможность выбора варианта учета НДС при начислении пеней по аренде  с помощью групповых обработок: 
	    |	- Не учитывать НДС 
	    |	- НДС в сумме 
	    |	- НДС сверху 
		|В состав параметров управления недвижимостью добавлен соответствующий параметр, который используется для заполнения формы групповой обработки по умолчанию. Этот же параметр учитывается при создании вручную нового документа ""Начисление пеней на аренду"" и ""Счет на аренду"" с видом операции ""Оплата пени"".    
		|Изменен способ автоматического заполнения счета расчетов по пеням в документе ""Начисление пеней по аренде"": при заполнении используется счет расчетов по претензиям, указанный в настройках счетов расчетов с контрагентами.  
		|Если в документе ""Начисление пеней по аренде"" в качестве счета расчетов по пеням указан счет 76.02, 76.22 или 76.32, то начисление пеней не будет увеличивать базу по выручке от реализации услуг.  
		|В документы оплаты добавлено явное указание счета расчетов по пеням. Для этого предназначен реквизит ""Счет пеней"", который используется в случае, когда для договора указан способ погашения пени ""Сначала пени, потом основной долг"" или ""Сначала основной долг, потом пени"". В этом случае программа автоматически распределяет поступивший платеж между обычной задолженностью и задолженностью по пеням. Счет пеней используется при формировании проводки по сумме, отнесенной  на оплату пеней. Если счет пеней не указан, то используется обычный счет расчетов.";
	
	Новость = Справочники.Новости.НайтиПоНаименованию(НаименованиеНовости);
	Если НЕ ЗначениеЗаполнено(Новость) Тогда
		НовостьОбъект = Справочники.Новости.СоздатьЭлемент();
		НовостьОбъект.УИННовости = Новый УникальныйИдентификатор;
	Иначе
		НовостьОбъект = Новость.ПолучитьОбъект();
	КонецЕсли;
	НовостьОбъект.ЛентаНовостей = Справочники.ЛентыНовостей.НайтиПоНаименованию("Что нового в версии");
	НовостьОбъект.Наименование = НаименованиеНовости;
	НовостьОбъект.ДатаПубликации = Дата(2017, 03, 06);
	НовостьОбъект.ТекстНовости = ТекстНовости;
	
	НовостьОбъект.ПривязкаКМетаданным.Очистить();
	
	СтрокаТЧ = НовостьОбъект.ПривязкаКМетаданным.Добавить();
	СтрокаТЧ.Метаданные = "БП.Документ.АР_НачислениеПени";
	СтрокаТЧ.Форма = "ФормаСписка";
	СтрокаТЧ.Событие = "ПриОткрытии";
	СтрокаТЧ.ПоказыватьВФормеОбъекта = Истина;
	СтрокаТЧ.Важность = 1;
	СтрокаТЧ.ДатаСбросаВажности = Дата(2018, 1, 1);
	
	СтрокаТЧ = НовостьОбъект.ПривязкаКМетаданным.Добавить();
	СтрокаТЧ.Метаданные = "БП.РазделУчета.АР_АрендаНедвижимости";
	
	НовостьОбъект.Записать();
	
	// Для оповещения при запуске программы
	Запись = РегистрыСведений.ПериодическиеСвойстваНовостей.СоздатьМенеджерЗаписи();
	Запись.Новость = НовостьОбъект.Ссылка;
	Запись.ВажностьОбщая = 1;
	Запись.Актуальность = Истина;
	Запись.Записать();
	
КонецПроцедуры

Процедура УстановитьИспользованиеСписковСчетчиков() Экспорт
	
	Если Константы.АР_ВестиУчетТарифицируемыхУслугПоСчетчикам.Получить() Тогда
		Константы.АР_ИспользоватьНесколькоСчетчиковДляУслуги.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьНовостьПоИспользованиюСписковСчетчиков() Экспорт
	
	НаименованиеНовости = "Использование нескольких счетчиков для услуги переменной части";
	ТекстНовости = "При заключении договора аренды добавлена возможность для одной услуги переменной части указывать список счетчиков объемов потребления. 
		|Включение/отключение данной возможности регулируется флагом ""Использовать несколько счетчиков для услуги"" в настройках параметров управления недвижимостью.";
	
	Новость = Справочники.Новости.НайтиПоНаименованию(НаименованиеНовости);
	Если НЕ ЗначениеЗаполнено(Новость) Тогда
		НовостьОбъект = Справочники.Новости.СоздатьЭлемент();
		НовостьОбъект.УИННовости = Новый УникальныйИдентификатор;
	Иначе
		НовостьОбъект = Новость.ПолучитьОбъект();
	КонецЕсли;
	НовостьОбъект.ЛентаНовостей = Справочники.ЛентыНовостей.НайтиПоНаименованию("Что нового в версии");
	НовостьОбъект.Наименование = НаименованиеНовости;
	НовостьОбъект.ДатаПубликации = Дата(2017, 10, 09);
	НовостьОбъект.ТекстНовости = ТекстНовости;
	
	НовостьОбъект.ПривязкаКМетаданным.Очистить();
	
	СтрокаТЧ = НовостьОбъект.ПривязкаКМетаданным.Добавить();
	СтрокаТЧ.Метаданные = "БП.Документ.АР_ЗаключениеДоговораАренды";
	СтрокаТЧ.Форма = "ФормаСписка";
	СтрокаТЧ.Событие = "ПриОткрытии";
	СтрокаТЧ.ПоказыватьВФормеОбъекта = Истина;
	СтрокаТЧ.Важность = 1;
	СтрокаТЧ.ДатаСбросаВажности = Дата(2018, 6, 1);
	
	СтрокаТЧ = НовостьОбъект.ПривязкаКМетаданным.Добавить();
	СтрокаТЧ.Метаданные = "БП.РазделУчета.АР_АрендаНедвижимости";
	
	НовостьОбъект.Записать();
	
	// Для оповещения при запуске программы
	Запись = РегистрыСведений.ПериодическиеСвойстваНовостей.СоздатьМенеджерЗаписи();
	Запись.Новость = НовостьОбъект.Ссылка;
	Запись.ВажностьОбщая = 1;
	Запись.Актуальность = Истина;
	Запись.Записать();
	
КонецПроцедуры

Процедура ДобавитьНовостьПоДепозиту() Экспорт
	
	НаименованиеНовости = "Страховой депозит (обеспечительный платеж)";
	ТекстНовости = "Добавлена возможность определения услуги для подстановки в счет на оплату страхового депозита при автоматическом заполнении. Для этого в форму настройки параметров управления недвижимостью добавлена константа ""Основная услуга для депозита"".";
	
	Новость = Справочники.Новости.НайтиПоНаименованию(НаименованиеНовости);
	Если НЕ ЗначениеЗаполнено(Новость) Тогда
		НовостьОбъект = Справочники.Новости.СоздатьЭлемент();
		НовостьОбъект.УИННовости = Новый УникальныйИдентификатор;
	Иначе
		НовостьОбъект = Новость.ПолучитьОбъект();
	КонецЕсли;
	НовостьОбъект.ЛентаНовостей = Справочники.ЛентыНовостей.НайтиПоНаименованию("Что нового в версии");
	НовостьОбъект.Наименование = НаименованиеНовости;
	НовостьОбъект.ДатаПубликации = Дата(2017, 12, 01);
	НовостьОбъект.ТекстНовости = ТекстНовости;
	
	НовостьОбъект.ПривязкаКМетаданным.Очистить();
	
	СтрокаТЧ = НовостьОбъект.ПривязкаКМетаданным.Добавить();
	СтрокаТЧ.Метаданные = "БП.Документ.АР_ЗаключениеДоговораАренды";
	СтрокаТЧ.Форма = "ФормаСписка";
	СтрокаТЧ.Событие = "ПриОткрытии";
	СтрокаТЧ.ПоказыватьВФормеОбъекта = Истина;
	СтрокаТЧ.Важность = 1;
	СтрокаТЧ.ДатаСбросаВажности = Дата(2018, 6, 1);
	
	СтрокаТЧ = НовостьОбъект.ПривязкаКМетаданным.Добавить();
	СтрокаТЧ.Метаданные = "БП.РазделУчета.АР_АрендаНедвижимости";
	
	НовостьОбъект.Записать();
	
	// Для оповещения при запуске программы
	Запись = РегистрыСведений.ПериодическиеСвойстваНовостей.СоздатьМенеджерЗаписи();
	Запись.Новость = НовостьОбъект.Ссылка;
	Запись.ВажностьОбщая = 1;
	Запись.Актуальность = Истина;
	Запись.Записать();
	
КонецПроцедуры

Процедура ДобавитьНовостьПоОтправкеДокументовИзГрупповыхОбработок() Экспорт
	
	НаименованиеНовости = "Групповая отправка документов по аренде по электронной почте";
	ТекстНовости = "В групповые обработки по формированию счетов на аренду, актов и счетов-фактур добавлена возможность отправки сформированных документов на адреса электронной почты контрагентов.";
	
	Новость = Справочники.Новости.НайтиПоНаименованию(НаименованиеНовости);
	Если НЕ ЗначениеЗаполнено(Новость) Тогда
		НовостьОбъект = Справочники.Новости.СоздатьЭлемент();
		НовостьОбъект.УИННовости = Новый УникальныйИдентификатор;
	Иначе
		НовостьОбъект = Новость.ПолучитьОбъект();
	КонецЕсли;
	НовостьОбъект.ЛентаНовостей = Справочники.ЛентыНовостей.НайтиПоНаименованию("Что нового в версии");
	НовостьОбъект.Наименование = НаименованиеНовости;
	НовостьОбъект.ДатаПубликации = Дата(2017, 12, 21);
	НовостьОбъект.ТекстНовости = ТекстНовости;
	
	НовостьОбъект.ПривязкаКМетаданным.Очистить();
	
	СтрокаТЧ = НовостьОбъект.ПривязкаКМетаданным.Добавить();
	СтрокаТЧ.Метаданные = "БП.Документ.АР_СчетНаАренду";
	СтрокаТЧ.Форма = "ФормаСписка";
	СтрокаТЧ.Событие = "ПриОткрытии";
	СтрокаТЧ.ПоказыватьВФормеОбъекта = Истина;
	СтрокаТЧ.Важность = 1;
	СтрокаТЧ.ДатаСбросаВажности = Дата(2018, 6, 1);
	
	СтрокаТЧ = НовостьОбъект.ПривязкаКМетаданным.Добавить();
	СтрокаТЧ.Метаданные = "БП.РазделУчета.АР_АрендаНедвижимости";
	
	НовостьОбъект.Записать();
	
	// Для оповещения при запуске программы
	Запись = РегистрыСведений.ПериодическиеСвойстваНовостей.СоздатьМенеджерЗаписи();
	Запись.Новость = НовостьОбъект.Ссылка;
	Запись.ВажностьОбщая = 1;
	Запись.Актуальность = Истина;
	Запись.Записать();
	
КонецПроцедуры

Процедура ДобавитьНовостьПоМультисобственникам() Экспорт
	
	НаименованиеНовости = "Учет нескольких собственников одного объекта недвижимости";
	ТекстНовости = "Добавлена возможность для одного объекта недвижимости указывать несколько собственников. Для каждого собственника регистрируется доля в праве собственности, признак использования агентской схемы расчетов и договор принципала. Изменение информации о собственниках выполняется в карточке объекта недвижимости. 
		|Внесены соответствующие изменения в алгоритм заполнения документа ""Начисление арендной платы"" для услуг, учитываемых по агентской схеме: если собственников несколько, то распределение суммы между ними выполняется пропорционально долям в праве собственности.";
	
	Новость = Справочники.Новости.НайтиПоНаименованию(НаименованиеНовости);
	Если НЕ ЗначениеЗаполнено(Новость) Тогда
		НовостьОбъект = Справочники.Новости.СоздатьЭлемент();
		НовостьОбъект.УИННовости = Новый УникальныйИдентификатор;
	Иначе
		НовостьОбъект = Новость.ПолучитьОбъект();
	КонецЕсли;
	НовостьОбъект.ЛентаНовостей = Справочники.ЛентыНовостей.НайтиПоНаименованию("Что нового в версии");
	НовостьОбъект.Наименование = НаименованиеНовости;
	НовостьОбъект.ДатаПубликации = Дата(2018, 04, 23);
	НовостьОбъект.ТекстНовости = ТекстНовости;
	
	НовостьОбъект.ПривязкаКМетаданным.Очистить();
	
	СтрокаТЧ = НовостьОбъект.ПривязкаКМетаданным.Добавить();
	СтрокаТЧ.Метаданные = "БП.Справочник.АР_ОбъектыАренды";
	СтрокаТЧ.Форма = "ФормаСписка";
	СтрокаТЧ.Событие = "ПриОткрытии";
	СтрокаТЧ.ПоказыватьВФормеОбъекта = Истина;
	СтрокаТЧ.Важность = 1;
	СтрокаТЧ.ДатаСбросаВажности = Дата(2018, 9, 1);
	
	СтрокаТЧ = НовостьОбъект.ПривязкаКМетаданным.Добавить();
	СтрокаТЧ.Метаданные = "БП.РазделУчета.АР_АрендаНедвижимости";
	
	НовостьОбъект.Записать();
	
	// Для оповещения при запуске программы
	Запись = РегистрыСведений.ПериодическиеСвойстваНовостей.СоздатьМенеджерЗаписи();
	Запись.Новость = НовостьОбъект.Ссылка;
	Запись.ВажностьОбщая = 1;
	Запись.Актуальность = Истина;
	Запись.Записать();
	
КонецПроцедуры

Процедура ДобавитьНовостьПоЗаполнениюПоЗданиюВАктахСнятия() Экспорт
	
	НаименованиеНовости = "Распределение затрат по коммунальным услугам с учетом общей площади здания";
	ТекстНовости = "В документе ""Акт снятия показаний счетчика"" добавлена возможность распределения затрат по коммунальным услугам пропорционально площадям с учетом общей площади здания, включая как арендуемые, так и неарендуемые площади. 
		|Для этих целей в документ добавлена команда заполнения табличной части ""Заполнить по зданию"". Заполнение происходит на основе действующих договоров аренды. В конце добавляется строка с разностью общей площади здания и площадей в аренде. 
		|Дальнейшее распределение показаний по всем площадям выполняется уже имеющимися средствами – выбором соответствующего способа расчета. 
		|Подробнее см. справку к документу.";
	
	Новость = Справочники.Новости.НайтиПоНаименованию(НаименованиеНовости);
	Если НЕ ЗначениеЗаполнено(Новость) Тогда
		НовостьОбъект = Справочники.Новости.СоздатьЭлемент();
		НовостьОбъект.УИННовости = Новый УникальныйИдентификатор;
	Иначе
		НовостьОбъект = Новость.ПолучитьОбъект();
	КонецЕсли;
	НовостьОбъект.ЛентаНовостей = Справочники.ЛентыНовостей.НайтиПоНаименованию("Что нового в версии");
	НовостьОбъект.Наименование = НаименованиеНовости;
	НовостьОбъект.ДатаПубликации = Дата(2018, 05, 21);
	НовостьОбъект.ТекстНовости = ТекстНовости;
	
	НовостьОбъект.ПривязкаКМетаданным.Очистить();
	
	СтрокаТЧ = НовостьОбъект.ПривязкаКМетаданным.Добавить();
	СтрокаТЧ.Метаданные = "БП.Документ.АР_АктСнятияПоказанийСчетчика";
	СтрокаТЧ.Форма = "ФормаСписка";
	СтрокаТЧ.Событие = "ПриОткрытии";
	СтрокаТЧ.ПоказыватьВФормеОбъекта = Истина;
	СтрокаТЧ.Важность = 1;
	СтрокаТЧ.ДатаСбросаВажности = Дата(2018, 10, 1);
	
	СтрокаТЧ = НовостьОбъект.ПривязкаКМетаданным.Добавить();
	СтрокаТЧ.Метаданные = "БП.РазделУчета.АР_АрендаНедвижимости";
	
	НовостьОбъект.Записать();
	
	// Для оповещения при запуске программы
	Запись = РегистрыСведений.ПериодическиеСвойстваНовостей.СоздатьМенеджерЗаписи();
	Запись.Новость = НовостьОбъект.Ссылка;
	Запись.ВажностьОбщая = 1;
	Запись.Актуальность = Истина;
	Запись.Записать();
	
КонецПроцедуры

Процедура ДобавитьНовостьПоПечатнойФормеРасчетПеней() Экспорт
	
	НаименованиеНовости = "Новая печатная форма ""Расчет пеней"" в документах начисления пеней по аренде";
	ТекстНовости = "В документы ""Начисление пеней по аренде"" и ""Счет на аренду"" с видом операции ""Оплата пени"" добавлена печатная форма ""Расчет пеней"" с расшифровкой расчета суммы пеней. 
		|Для детализации расшифровки до документа расчетов в табличную часть указанных документов добавлено соответствующее поле.";
	
	Новость = Справочники.Новости.НайтиПоНаименованию(НаименованиеНовости);
	Если НЕ ЗначениеЗаполнено(Новость) Тогда
		НовостьОбъект = Справочники.Новости.СоздатьЭлемент();
		НовостьОбъект.УИННовости = Новый УникальныйИдентификатор;
	Иначе
		НовостьОбъект = Новость.ПолучитьОбъект();
	КонецЕсли;
	НовостьОбъект.ЛентаНовостей = Справочники.ЛентыНовостей.НайтиПоНаименованию("Что нового в версии");
	НовостьОбъект.Наименование = НаименованиеНовости;
	НовостьОбъект.ДатаПубликации = Дата(2018, 05, 28);
	НовостьОбъект.ТекстНовости = ТекстНовости;
	
	НовостьОбъект.ПривязкаКМетаданным.Очистить();
	
	СтрокаТЧ = НовостьОбъект.ПривязкаКМетаданным.Добавить();
	СтрокаТЧ.Метаданные = "БП.Документ.АР_НачислениеПени";
	СтрокаТЧ.Форма = "ФормаСписка";
	СтрокаТЧ.Событие = "ПриОткрытии";
	СтрокаТЧ.ПоказыватьВФормеОбъекта = Истина;
	СтрокаТЧ.Важность = 1;
	СтрокаТЧ.ДатаСбросаВажности = Дата(2018, 10, 1);
	
	СтрокаТЧ = НовостьОбъект.ПривязкаКМетаданным.Добавить();
	СтрокаТЧ.Метаданные = "БП.РазделУчета.АР_АрендаНедвижимости";
	
	НовостьОбъект.Записать();
	
	// Для оповещения при запуске программы
	Запись = РегистрыСведений.ПериодическиеСвойстваНовостей.СоздатьМенеджерЗаписи();
	Запись.Новость = НовостьОбъект.Ссылка;
	Запись.ВажностьОбщая = 1;
	Запись.Актуальность = Истина;
	Запись.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьСобственниковОбъектовНедвижимости() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АР_СобственникиОбъектовАрендыСрезПоследних.Период КАК Период,
		|	АР_СобственникиОбъектовАрендыСрезПоследних.ОбъектАренды КАК ОбъектАренды,
		|	АР_СобственникиОбъектовАрендыСрезПоследних.УдалитьКонтрагент КАК Контрагент,
		|	АР_СобственникиОбъектовАрендыСрезПоследних.УдалитьДоговорКонтрагента КАК ДоговорКонтрагента,
		|	АР_СобственникиОбъектовАрендыСрезПоследних.УдалитьАгентскаяСхема КАК АгентскаяСхема,
		|	АР_СобственникиОбъектовАрендыСрезПоследних.Собственник КАК Собственник
		|ИЗ
		|	РегистрСведений.АР_СобственникиОбъектовАренды.СрезПоследних КАК АР_СобственникиОбъектовАрендыСрезПоследних
		|ГДЕ
		|	АР_СобственникиОбъектовАрендыСрезПоследних.Собственник = ЗНАЧЕНИЕ(Справочник.АР_СобственникиОбъектовНедвижимости.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СправочникОбъект = Справочники.АР_СобственникиОбъектовНедвижимости.СоздатьЭлемент();
		СправочникОбъект.Наименование = "Собственники объекта недвижимости " + ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ОбъектАренды), ВыборкаДетальныеЗаписи.ОбъектАренды, "") + " на " + ВыборкаДетальныеЗаписи.Период;
		
		СтрокаСобственник = СправочникОбъект.Собственники.Добавить();
		СтрокаСобственник.Собственник       = ВыборкаДетальныеЗаписи.Контрагент;
		СтрокаСобственник.АгентскийДоговор  = ВыборкаДетальныеЗаписи.ДоговорКонтрагента;
		СтрокаСобственник.АгентскаяСхема    = ВыборкаДетальныеЗаписи.АгентскаяСхема;
		СтрокаСобственник.Доля              = 100;
		
		СправочникОбъект.Записать();
		
		МенеджерЗаписи = РегистрыСведений.АР_СобственникиОбъектовАренды.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период                    = ВыборкаДетальныеЗаписи.Период;
		МенеджерЗаписи.ОбъектАренды              = ВыборкаДетальныеЗаписи.ОбъектАренды;
		МенеджерЗаписи.УдалитьКонтрагент         = ВыборкаДетальныеЗаписи.Контрагент;
		МенеджерЗаписи.УдалитьДоговорКонтрагента = ВыборкаДетальныеЗаписи.ДоговорКонтрагента;
		МенеджерЗаписи.УдалитьАгентскаяСхема     = ВыборкаДетальныеЗаписи.АгентскаяСхема;
		МенеджерЗаписи.Собственник  = СправочникОбъект.Ссылка;
		МенеджерЗаписи.Записать();
	КонецЦикла;
		
КонецПроцедуры

Процедура РегистрацияДанныхПервичныхДокументов(Источник, Отказ) Экспорт
	Перем НомерДокумента, ДатаДокумента;
	
	Если Источник.ОбменДанными.Загрузка = Истина
		И Источник.ДополнительныеСвойства.Свойство("РегистрироватьДанныеПервичныхДокументов")
		И Источник.ДополнительныеСвойства.РегистрироватьДанныеПервичныхДокументов = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	// При групповом перепроведении реквизиты документов не меняются,
	// поэтому обновление связанных данных выполнять не требуется.
	Если ПроведениеСервер.ГрупповоеПерепроведение(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка = Источник.Ссылка;
	ТипДокумента = ТипЗнч(Ссылка);
	
	ИменаРеквизитов = "Организация, Номер, Дата";
	
	МетаданныеДокумента = Источник.Метаданные();

	Если НЕ МетаданныеДокумента.Реквизиты.Найти("НомерВходящегоДокумента") = Неопределено Тогда
		ИменаРеквизитов = ИменаРеквизитов + ", НомерВходящегоДокумента";
		Если НЕ МетаданныеДокумента.Реквизиты.Найти("ДатаВходящегоДокумента") = Неопределено Тогда
			ИменаРеквизитов = ИменаРеквизитов + ", ДатаВходящегоДокумента";
		КонецЕсли;
	КонецЕсли;
	
	Если ТипДокумента = Тип("ДокументСсылка.ОприходованиеТоваров") Тогда
		ИменаРеквизитов = ИменаРеквизитов + ", ИнвентаризацияТоваровНаСкладе";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		ИменаРеквизитов = ИменаРеквизитов + ", ВидОперации";
	КонецЕсли;
	
	Реквизиты = Новый Структура(ИменаРеквизитов);
	ЗаполнитьЗначенияСвойств(Реквизиты, Источник);
	
	Если НЕ ЗначениеЗаполнено(Реквизиты.Организация) Тогда
		Возврат;
	КонецЕсли;
		
	НомерДокумента = "";
	ДатаДокумента  = '00010101';
	
	Если ТипДокумента = Тип("ДокументСсылка.ОприходованиеТоваров")
		И ЗначениеЗаполнено(Реквизиты.ИнвентаризацияТоваровНаСкладе) Тогда
		
		РеквизитыИнвентаризации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Реквизиты.ИнвентаризацияТоваровНаСкладе, "Номер, Дата");
		
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыИнвентаризации.Номер, Истина, Ложь);
		ДатаДокумента  = РеквизитыИнвентаризации.Дата;
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		
		Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
			НомерДокумента = СокрЛП(Реквизиты.НомерВходящегоДокумента);
		Иначе
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер, Истина, Ложь);
		КонецЕсли;
		
		ДатаДокумента  = Реквизиты.Дата;
		
	ИначеЕсли Реквизиты.Свойство("НомерВходящегоДокумента") Тогда
		
		НомерДокумента = СокрЛП(Реквизиты.НомерВходящегоДокумента);
		
		Если Реквизиты.Свойство("ДатаВходящегоДокумента") Тогда
			ДатаДокумента = Реквизиты.ДатаВходящегоДокумента;
		Иначе
			ДатаДокумента = Реквизиты.Дата;
		КонецЕсли;
		
	Иначе
		
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер, Истина, Ложь);
		ДатаДокумента  = Реквизиты.Дата;
		
	КонецЕсли;
	
	НаборЗаписейРегистра = РегистрыСведений.ДанныеПервичныхДокументов.СоздатьНаборЗаписей();
	НаборЗаписейРегистра.Отбор.Документ.Установить(Ссылка);
	
	МенеджерЗаписиРегистра = НаборЗаписейРегистра.Добавить();
	МенеджерЗаписиРегистра.Организация       = Реквизиты.Организация;
	МенеджерЗаписиРегистра.Документ          = Ссылка;
	МенеджерЗаписиРегистра.Номер             = НомерДокумента;
	МенеджерЗаписиРегистра.Дата              = ДатаДокумента;
	МенеджерЗаписиРегистра.НомерРегистратора = Реквизиты.Номер;
	МенеджерЗаписиРегистра.ДатаРегистратора  = Реквизиты.Дата;
	
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписейРегистра.Записать(Истина);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПервичныхДокументов() Экспорт
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить("АР_НачислениеАренднойПлаты");
	МассивДокументов.Добавить("АР_НачислениеПени");
	МассивДокументов.Добавить("АР_СчетНаАренду");
	
	Для каждого Документ Из МассивДокументов Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка
		|ИЗ
		|	Документ." + Документ + " КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
		|		ПО (ДанныеПервичныхДокументов.Документ = ДанныеДокумента.Ссылка)
		|ГДЕ
		|	ЕСТЬNULL(ДанныеПервичныхДокументов.Документ, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Источник = Выборка.Ссылка.ПолучитьОбъект();
			Отказ = Ложь;
			РегистрацияДанныхПервичныхДокументов(Источник, Отказ);	
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьНовостьПоНДС() Экспорт
	
	НаименованиеНовости = "Новая схема определения ставок НДС по услугам аренды";
	ТекстНовости = "<P>Добавлена новая схема определения ставок НДС по услугам аренды – ставки НДС можно указывать в явном виде в документах «Заключение договора аренды» и «Дополнительное соглашение».</P> 
		|<P>Переход на новую схему осуществляется с помощью обработки «Переход на схему определения ставок НДС по услугам аренды на основе договора». Порядок перехода описан в справке по обработке.</P>
		|<P>Рекомендуется выполнить переход на новую схему. Действующая схема учета НДС будет поддерживаться ограниченное время.</P>
		|<P>Для документов «Заключение договора аренды» и «Дополнительное соглашение» в состав доступных полей для печати по шаблонам MS Word  добавлены новые поля: «Общая сумма постоянной части без НДС»,  «Общая сумма постоянной части с НДС» и «Общая сумма НДС».</P>
		|";
	
	Новость = Справочники.Новости.НайтиПоНаименованию(НаименованиеНовости);
	Если НЕ ЗначениеЗаполнено(Новость) Тогда
		НовостьОбъект = Справочники.Новости.СоздатьЭлемент();
		НовостьОбъект.УИННовости = Новый УникальныйИдентификатор;
	Иначе
		НовостьОбъект = Новость.ПолучитьОбъект();
	КонецЕсли;
	НовостьОбъект.ЛентаНовостей = Справочники.ЛентыНовостей.НайтиПоНаименованию("Что нового в версии");
	НовостьОбъект.Наименование = НаименованиеНовости;
	НовостьОбъект.ДатаПубликации = Дата(2018, 12, 06);
	НовостьОбъект.ТекстНовости = ТекстНовости;
	
	НовостьОбъект.ПривязкаКМетаданным.Очистить();
	
	СтрокаТЧ = НовостьОбъект.ПривязкаКМетаданным.Добавить();
	СтрокаТЧ.Метаданные = "БП.Документ.АР_ЗаключениеДоговораАренды";
	СтрокаТЧ.Форма = "ФормаСписка";
	СтрокаТЧ.Событие = "ПриОткрытии";
	СтрокаТЧ.ПоказыватьВФормеОбъекта = Истина;
	СтрокаТЧ.Важность = 1;
	СтрокаТЧ.ДатаСбросаВажности = Дата(2019, 6, 1);
	
	СтрокаТЧ = НовостьОбъект.ПривязкаКМетаданным.Добавить();
	СтрокаТЧ.Метаданные = "БП.РазделУчета.АР_АрендаНедвижимости";
	
	НовостьОбъект.Записать();
	
	// Для оповещения при запуске программы
	Запись = РегистрыСведений.ПериодическиеСвойстваНовостей.СоздатьМенеджерЗаписи();
	Запись.Новость = НовостьОбъект.Ссылка;
	Запись.ВажностьОбщая = 1;
	Запись.Актуальность = Истина;
	Запись.Записать();
	
КонецПроцедуры

Процедура ДобавитьНовостьПереходНаСтавкуНДС20() Экспорт
	
	НаименованиеНовости = "Переход на ставку НДС 20%";
	ТекстНовости = "<P>В целях упрощения перехода на учет услуг по договорам аренды по ставке НДС 20% в обработку ""Групповая пролонгация договоров"" добавлена возможность изменения ставки НДС по услугам с 18% на 20%, для этого в форму обработки добавлен соответствующий флаг.</P> 
		|<P>Рекомендуется использовать данную обработу для перехода с 1 января 2019 г. на учет по ставке НДС 20% - сформировать дополнительные соглашения по действующим договорам аренды с датой 01.01.2019 и новой ставкой НДС.</P>
		|<P>Для того чтобы в дополнительном соглашении можно было указать ставку НДС необходимо выполнить переход на схему определения ставок НДС по услугам аренды на основе договора.</P>
		|";
	
	Новость = Справочники.Новости.НайтиПоНаименованию(НаименованиеНовости);
	Если НЕ ЗначениеЗаполнено(Новость) Тогда
		НовостьОбъект = Справочники.Новости.СоздатьЭлемент();
		НовостьОбъект.УИННовости = Новый УникальныйИдентификатор;
	Иначе
		НовостьОбъект = Новость.ПолучитьОбъект();
	КонецЕсли;
	НовостьОбъект.ЛентаНовостей = Справочники.ЛентыНовостей.НайтиПоНаименованию("Что нового в версии");
	НовостьОбъект.Наименование = НаименованиеНовости;
	НовостьОбъект.ДатаПубликации = Дата(2018, 12, 06);
	НовостьОбъект.ТекстНовости = ТекстНовости;
	
	НовостьОбъект.ПривязкаКМетаданным.Очистить();
	
	СтрокаТЧ = НовостьОбъект.ПривязкаКМетаданным.Добавить();
	СтрокаТЧ.Метаданные = "БП.Документ.АР_СчетНаАренду";
	СтрокаТЧ.Форма = "ФормаСписка";
	СтрокаТЧ.Событие = "ПриОткрытии";
	СтрокаТЧ.ПоказыватьВФормеОбъекта = Истина;
	СтрокаТЧ.Важность = 1;
	СтрокаТЧ.ДатаСбросаВажности = Дата(2019, 6, 1);
	
	СтрокаТЧ = НовостьОбъект.ПривязкаКМетаданным.Добавить();
	СтрокаТЧ.Метаданные = "БП.РазделУчета.АР_АрендаНедвижимости";
	
	НовостьОбъект.Записать();
	
	// Для оповещения при запуске программы
	Запись = РегистрыСведений.ПериодическиеСвойстваНовостей.СоздатьМенеджерЗаписи();
	Запись.Новость = НовостьОбъект.Ссылка;
	Запись.ВажностьОбщая = 1;
	Запись.Актуальность = Истина;
	Запись.Записать();
	
КонецПроцедуры

Процедура ДобавитьНовостьНапоминанияУведомления() Экспорт
	
	НаименованиеНовости = "Автоматическое формирование напоминаний и уведомлений";
	ТекстНовости = "<P>Добавлен механизм автоматического формирования напоминаний и уведомлений по различными событиям. Например, можно настроить правило, по которому для каждого создаваемого договора аренды ответственному сотруднику в установленный срок будет отправляться напоминание о приближающейся дате окончания договора. Или настроить автоматическую отправку уведомления о новом дополнительном соглашении или расторжении договора аренды.</P> 
		|<P>Предусмотрено два способа оповещения: с помощью напоминаний, которые появляются в окне 1С, и с помощью отправки писем на электронную почту.</P>
		|<P>Для настройки автоматического формирования напоминаний и уведомлений предназначен справочник <B>Напоминания и уведомления по событиям</B>, который вызывается из формы настроек параметров управления недвижимостью в разделе <B>Администрирование</B>. Подробнее см. справку по справочнику.</P>
		|";
	
	Новость = Справочники.Новости.НайтиПоНаименованию(НаименованиеНовости);
	Если НЕ ЗначениеЗаполнено(Новость) Тогда
		НовостьОбъект = Справочники.Новости.СоздатьЭлемент();
		НовостьОбъект.УИННовости = Новый УникальныйИдентификатор;
	Иначе
		НовостьОбъект = Новость.ПолучитьОбъект();
	КонецЕсли;
	НовостьОбъект.ЛентаНовостей = Справочники.ЛентыНовостей.НайтиПоНаименованию("Что нового в версии");
	НовостьОбъект.Наименование = НаименованиеНовости;
	НовостьОбъект.ДатаПубликации = Дата(2019, 3, 11);
	НовостьОбъект.ТекстНовости = ТекстНовости;
	
	НовостьОбъект.ПривязкаКМетаданным.Очистить();
	
	СтрокаТЧ = НовостьОбъект.ПривязкаКМетаданным.Добавить();
	СтрокаТЧ.Метаданные = "БП.Документ.АР_ЗаключениеДоговораАренды";
	СтрокаТЧ.Форма = "ФормаСписка";
	СтрокаТЧ.Событие = "ПриОткрытии";
	СтрокаТЧ.ПоказыватьВФормеОбъекта = Истина;
	СтрокаТЧ.Важность = 1;
	СтрокаТЧ.ДатаСбросаВажности = Дата(2019, 6, 1);
	
	СтрокаТЧ = НовостьОбъект.ПривязкаКМетаданным.Добавить();
	СтрокаТЧ.Метаданные = "БП.РазделУчета.АР_АрендаНедвижимости";
	
	НовостьОбъект.Записать();
	
	// Для оповещения при запуске программы
	Запись = РегистрыСведений.ПериодическиеСвойстваНовостей.СоздатьМенеджерЗаписи();
	Запись.Новость = НовостьОбъект.Ссылка;
	Запись.ВажностьОбщая = 1;
	Запись.Актуальность = Истина;
	Запись.Записать();
	
КонецПроцедуры

Процедура ОбновитьСпособыНачислений() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АР_СпособыНачисленияАренднойПлаты.Ссылка КАК Ссылка,
	|	АР_СпособыНачисленияАренднойПлаты.УдалитьЗаОбъектВЦелом КАК ЗаОбъектВЦелом
	|ИЗ
	|	Справочник.АР_СпособыНачисленияАренднойПлаты КАК АР_СпособыНачисленияАренднойПлаты
	|ГДЕ
	|	АР_СпособыНачисленияАренднойПлаты.ВариантРасчета = ЗНАЧЕНИЕ(Перечисление.АР_ВариантыРасчета.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СпособНачисления = Выборка.Ссылка.ПолучитьОбъект();
		СпособНачисления.ВариантРасчета = ?(Выборка.ЗаОбъектВЦелом, Перечисления.АР_ВариантыРасчета.ПоСтавкеЗаОбъектВЦелом, Перечисления.АР_ВариантыРасчета.ПоСтавкеЗаЕдиницуПлощади);
		СпособНачисления.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьУслугиТелефоннойСвязи() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АР_АктСнятияПоказанийСчетчика.Услуга КАК Услуга
	|ИЗ
	|	Документ.АР_АктСнятияПоказанийСчетчика КАК АР_АктСнятияПоказанийСчетчика
	|ГДЕ
	|	АР_АктСнятияПоказанийСчетчика.УдалитьВидОперации = ЗНАЧЕНИЕ(Перечисление.АР_УдалитьВидыОперацийАктСнятияПоказанийСчетчика.ТрафикТелефонныхНомеров)
	|	И АР_АктСнятияПоказанийСчетчика.СпособЗаполнения = 0
	|	И НЕ АР_АктСнятияПоказанийСчетчика.Услуга.АР_ТелефонИнтернет
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АР_АктСнятияПоказанийСчетчикаПоказания.Услуга
	|ИЗ
	|	Документ.АР_АктСнятияПоказанийСчетчика.Показания КАК АР_АктСнятияПоказанийСчетчикаПоказания
	|ГДЕ
	|	АР_АктСнятияПоказанийСчетчикаПоказания.Ссылка.УдалитьВидОперации = ЗНАЧЕНИЕ(Перечисление.АР_УдалитьВидыОперацийАктСнятияПоказанийСчетчика.ТрафикТелефонныхНомеров)
	|	И АР_АктСнятияПоказанийСчетчикаПоказания.Ссылка.СпособЗаполнения = 1
	|	И НЕ АР_АктСнятияПоказанийСчетчикаПоказания.Ссылка.Услуга.АР_ТелефонИнтернет";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Номенклатура = Выборка.Услуга.ПолучитьОбъект();
		Номенклатура.АР_ТелефонИнтернет = Истина;
		Номенклатура.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьНовостьРасчетНачисленийПоФормулам() Экспорт
	
	НаименованиеНовости = "Расчет начислений по произвольным формулам и изменения в документе ""Акт снятия показаний счетчика""";
	ТекстНовости = "<P>Добавлена возможность расчета начислений по услугам переменной части с использованием произвольных формул. Для этих целей в справочник <STRONG>Способы начисления арендной платы</STRONG> добавлен вариант расчета <STRONG>Расчет по произвольной формуле</STRONG>. Подробное описание см. в справке по справочнику.</P> 
		|<P>Документ <STRONG>Акт снятия показаний счетчика</STRONG> переименован в <STRONG>Регистрация объемов потребления услуг переменной части</STRONG>. Удален выбор вида операции. Для услуг, по которым в документе необходимо указывать номер телефона, в карточке услуги должен быть установлен флаг <STRONG>Услуги телефонной связи</STRONG>.</P>
		|<P>Для услуг, начисление по которым выполняется по произвольным формулам, в поле <STRONG>Сумма</STRONG> выводится соответствующая  пиктограмма. Для расчета сумм по таким услугам предназначена команда <STRONG>Рассчитать суммы по формулам</STRONG> в подменю <STRONG>Заполнить</STRONG>. Для расчета суммы в текущей строке в контекстном меню предусмотрена команда <STRONG>Рассчитать по формуле</STRONG>.</P>
		|<P>См. также справку по документу <STRONG>Регистрация объемов потребления услуг переменной части</STRONG>.</P>
		|";
	
	Новость = Справочники.Новости.НайтиПоНаименованию(НаименованиеНовости);
	Если НЕ ЗначениеЗаполнено(Новость) Тогда
		НовостьОбъект = Справочники.Новости.СоздатьЭлемент();
		НовостьОбъект.УИННовости = Новый УникальныйИдентификатор;
	Иначе
		НовостьОбъект = Новость.ПолучитьОбъект();
	КонецЕсли;
	НовостьОбъект.ЛентаНовостей = Справочники.ЛентыНовостей.НайтиПоНаименованию("Что нового в версии");
	НовостьОбъект.Наименование = НаименованиеНовости;
	НовостьОбъект.ДатаПубликации = Дата(2019, 03, 01);
	НовостьОбъект.ТекстНовости = ТекстНовости;
	
	НовостьОбъект.ПривязкаКМетаданным.Очистить();
	
	СтрокаТЧ = НовостьОбъект.ПривязкаКМетаданным.Добавить();
	СтрокаТЧ.Метаданные = "БП.Документ.АР_ЗаключениеДоговораАренды";
	СтрокаТЧ.Форма = "ФормаСписка";
	СтрокаТЧ.Событие = "ПриОткрытии";
	СтрокаТЧ.ПоказыватьВФормеОбъекта = Истина;
	СтрокаТЧ.Важность = 1;
	СтрокаТЧ.ДатаСбросаВажности = Дата(2019, 6, 1);
	
	СтрокаТЧ = НовостьОбъект.ПривязкаКМетаданным.Добавить();
	СтрокаТЧ.Метаданные = "БП.РазделУчета.АР_АрендаНедвижимости";
	
	НовостьОбъект.Записать();
	
	// Для оповещения при запуске программы
	Запись = РегистрыСведений.ПериодическиеСвойстваНовостей.СоздатьМенеджерЗаписи();
	Запись.Новость = НовостьОбъект.Ссылка;
	Запись.ВажностьОбщая = 1;
	Запись.Актуальность = Истина;
	Запись.Записать();
	
КонецПроцедуры

Процедура ОбновитьПараметрыНачисленияПени() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АР_ПараметрыНачисленияПени.Регистратор КАК Регистратор,
	|	ИСТИНА КАК ИзменятьРегистр
	|ИЗ
	|	РегистрСведений.АР_СрокиОплатыИПараметрыНачисленияПеней КАК АР_ПараметрыНачисленияПени
	|ГДЕ
	|	АР_ПараметрыНачисленияПени.СпособОпределенияСрокаОплаты = &ПустойСпособ
	|	И АР_ПараметрыНачисленияПени.УдалитьСпособРасчетаПросрочки <> &ПустойСпособ
	|	И (АР_ПараметрыНачисленияПени.Регистратор ССЫЛКА Документ.АР_ЗаключениеДоговораАренды
	|			ИЛИ АР_ПараметрыНачисленияПени.Регистратор ССЫЛКА Документ.АР_ДополнительноеСоглашение)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.АР_ЗаключениеДоговораАренды КАК ДанныеДокумента
	|ГДЕ
	|	НЕ ДанныеДокумента.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.АР_ДополнительноеСоглашение КАК ДанныеДокумента
	|ГДЕ
	|	НЕ ДанныеДокумента.Проведен";
	
	Запрос.УстановитьПараметр("ПустойСпособ", Перечисления.АР_СпособыРасчетаПросрочки.ПустаяСсылка());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		оДокумент = Выборка.Регистратор.ПолучитьОбъект();
		
		оДокумент.ДетализацияСроковОплаты = Перечисления.АР_ДетализацииСроковОплаты.ОбщиеУсловия;
		оДокумент.СрокиОплаты.Очистить();
		НоваяСтрока = оДокумент.СрокиОплаты.Добавить();
		НоваяСтрока.НазначениеСрока = Перечисления.АР_ВариантыНазначенияСрокаОплаты.Общий;
		НоваяСтрока.СпособОпределенияСрокаОплаты = оДокумент.УдалитьСпособРасчетаПросрочки;
		Если оДокумент.УдалитьСпособРасчетаПросрочки = Перечисления.АР_СпособыРасчетаПросрочки.ПоДатеСчета
			ИЛИ оДокумент.УдалитьСпособРасчетаПросрочки = Перечисления.АР_СпособыРасчетаПросрочки.ПоДатеНачисления Тогда
			НоваяСтрока.КоличествоДнейОтДатыСчетаАкта = оДокумент.УдалитьОтсрочкаПоОплате;
			НоваяСтрока.УчитыватьТолькоРабочиеДниОтДатыСчетаАкта = оДокумент.УдалитьУчитыватьТолькоРабочиеДниОтсрочки;
		Иначе
			НоваяСтрока.КоличествоДнейОтсрочки = оДокумент.УдалитьОтсрочкаПоОплате;
			НоваяСтрока.УчитыватьТолькоРабочиеДниОтсрочки = оДокумент.УдалитьУчитыватьТолькоРабочиеДниОтсрочки;
		КонецЕсли;
		
		НоваяСтрока.СрокОплаты = оДокумент.УдалитьСрокОплаты;
		НоваяСтрока.ПериодСрокаОплаты = оДокумент.УдалитьМесяцСрокаОплаты;
		НоваяСтрока.СпособНачисленияПени = оДокумент.УдалитьСпособНачисленияПени;
		НоваяСтрока.СтавкаПени = оДокумент.УдалитьСтавкаПени;
		НоваяСтрока.СпособПогашенияПени = оДокумент.УдалитьСпособПогашенияПени;
		НоваяСтрока.УчитыватьТолькоРабочиеДниПриРасчетеПени = оДокумент.УдалитьУчитыватьТолькоРабочиеДниПросрочки;
		
		оДокумент.ОбменДанными.Загрузка = Истина;
		оДокумент.Записать(РежимЗаписиДокумента.Запись);
		
		Если Выборка.ИзменятьРегистр Тогда
			НаборЗаписей = РегистрыСведений.АР_СрокиОплатыИПараметрыНачисленияПеней.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.Очистить();
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Период = оДокумент.Дата;
			НоваяЗапись.Активность = Истина;
			НоваяЗапись.Регистратор = Выборка.Регистратор;
			ЗаполнитьЗначенияСвойств(НоваяЗапись, оДокумент);
			ЗаполнитьЗначенияСвойств(НоваяЗапись, НоваяСтрока);
			
			НаборЗаписей.Записать(Истина);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьНовостьРаздельныеСрокиОплаты() Экспорт
	
	НаименованиеНовости = "Раздельное назначение сроков оплаты по услугам";
	ТекстНовости = "<P>В договорах аренды добавлена возможность раздельного назначения сроков оплаты для услуг постоянной и переменной части, а также назначения сроков оплаты для конкретных услуг.</P> 
		|<P>Закладка <B>Пени</B> в документах <B>Заключение договора аренды</B> и <B>Дополнительное соглашение</B> переименована в <B>Сроки оплаты</B>. Оптимизирован состав настроек для указания сроков оплаты и параметров расчета пеней.</P>
		|<P>Раздельное назначение сроков оплаты для постоянной и переменной части и для конкретных услуг возможно только при условии ведения взаиморасчетов по договору в разрезе услуг (в карточке договора контрагента должен быть установлен флаг <B>Вести взаиморасчеты по услугам</B>).</P>
		|<P>В состав параметров управления недвижимостью добавлены настройки сроков оплаты по умолчанию, которые используются при создании новых документов <B>Заключение договора аренды</B>.</P>
		|<P>В документе <B>Счет на аренду</B> настроено автоматическое заполнение срока оплаты (поле <B>Оплата до</B>) в соответствии с условиями договора аренды.</P>
		|<P>В отчеты <B>Реестр объектов недвижимости</B> и <B>Реестр договоров аренды</B> добавлены группа полей <B>Сроки оплаты</B> для вывода данных по срокам оплаты услуг и параметрам начисления пеней.</P>
		|";
	
	Новость = Справочники.Новости.НайтиПоНаименованию(НаименованиеНовости);
	Если НЕ ЗначениеЗаполнено(Новость) Тогда
		НовостьОбъект = Справочники.Новости.СоздатьЭлемент();
		НовостьОбъект.УИННовости = Новый УникальныйИдентификатор;
	Иначе
		НовостьОбъект = Новость.ПолучитьОбъект();
	КонецЕсли;
	НовостьОбъект.ЛентаНовостей = Справочники.ЛентыНовостей.НайтиПоНаименованию("Что нового в версии");
	НовостьОбъект.Наименование = НаименованиеНовости;
	НовостьОбъект.ДатаПубликации = Дата(2019, 04, 23);
	НовостьОбъект.ТекстНовости = ТекстНовости;
	
	НовостьОбъект.ПривязкаКМетаданным.Очистить();
	
	СтрокаТЧ = НовостьОбъект.ПривязкаКМетаданным.Добавить();
	СтрокаТЧ.Метаданные = "БП.Документ.АР_ЗаключениеДоговораАренды";
	СтрокаТЧ.Форма = "ФормаСписка";
	СтрокаТЧ.Событие = "ПриОткрытии";
	СтрокаТЧ.ПоказыватьВФормеОбъекта = Истина;
	СтрокаТЧ.Важность = 1;
	СтрокаТЧ.ДатаСбросаВажности = Дата(2019, 8, 1);
	
	СтрокаТЧ = НовостьОбъект.ПривязкаКМетаданным.Добавить();
	СтрокаТЧ.Метаданные = "БП.РазделУчета.АР_АрендаНедвижимости";
	
	НовостьОбъект.Записать();
	
	// Для оповещения при запуске программы
	Запись = РегистрыСведений.ПериодическиеСвойстваНовостей.СоздатьМенеджерЗаписи();
	Запись.Новость = НовостьОбъект.Ссылка;
	Запись.ВажностьОбщая = 1;
	Запись.Актуальность = Истина;
	Запись.Записать();
	
КонецПроцедуры

Процедура ДобавитьНовостьОптимизацияНовойСхемыНДС() Экспорт
	
	НаименованиеНовости = "Оптимизация новой схемы определения ставок НДС (на основе договора)";
	ТекстНовости = "<P>Оптимизирован процесс перехода на новую схему определения ставок НДС с помощью обработки <STRONG>Переход на схему определения ставок НДС по услугам аренды на основе договора</STRONG>: изменение документов выполняется без перепроведения и не зависит от даты запрета редактирования данных.</P>
		|<P>В групповые обработки выставления счетов и начисления арендой платы добавлен выбор варианта учета НДС:
		|<UL style='margin-top=0'><LI>В соответствии с договором
		|<LI>НДС в сумме
		|<LI>НДС сверху
		|</UL></P>
		|<P>Это позволяет при формировании документов для услуг переменной части использовать вариант учета НДС, отличный от указанного в договоре. Например, когда в договоре указан вариант <STRONG>НДС в сумме</STRONG>, но при формировании документов по услугам переменной части требуется использовать вариант <STRONG>НДС сверху</STRONG></P>
		|";
	
	Новость = Справочники.Новости.НайтиПоНаименованию(НаименованиеНовости);
	Если НЕ ЗначениеЗаполнено(Новость) Тогда
		НовостьОбъект = Справочники.Новости.СоздатьЭлемент();
		НовостьОбъект.УИННовости = Новый УникальныйИдентификатор;
	Иначе
		НовостьОбъект = Новость.ПолучитьОбъект();
	КонецЕсли;
	НовостьОбъект.ЛентаНовостей = Справочники.ЛентыНовостей.НайтиПоНаименованию("Что нового в версии");
	НовостьОбъект.Наименование = НаименованиеНовости;
	НовостьОбъект.ДатаПубликации = Дата(2019, 05, 20);
	НовостьОбъект.ТекстНовости = ТекстНовости;
	
	НовостьОбъект.ПривязкаКМетаданным.Очистить();
	
	СтрокаТЧ = НовостьОбъект.ПривязкаКМетаданным.Добавить();
	СтрокаТЧ.Метаданные = "БП.Документ.АР_ЗаключениеДоговораАренды";
	СтрокаТЧ.Форма = "ФормаСписка";
	СтрокаТЧ.Событие = "ПриОткрытии";
	СтрокаТЧ.ПоказыватьВФормеОбъекта = Истина;
	СтрокаТЧ.Важность = 1;
	СтрокаТЧ.ДатаСбросаВажности = Дата(2019, 10, 1);
	
	СтрокаТЧ = НовостьОбъект.ПривязкаКМетаданным.Добавить();
	СтрокаТЧ.Метаданные = "БП.РазделУчета.АР_АрендаНедвижимости";
	
	НовостьОбъект.Записать();
	
	// Для оповещения при запуске программы
	Запись = РегистрыСведений.ПериодическиеСвойстваНовостей.СоздатьМенеджерЗаписи();
	Запись.Новость = НовостьОбъект.Ссылка;
	Запись.ВажностьОбщая = 1;
	Запись.Актуальность = Истина;
	Запись.Записать();
	
КонецПроцедуры

Процедура УстановитьСтатусыДокумента() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АР_НачислениеАренднойПлаты.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.АР_НачислениеАренднойПлаты КАК АР_НачислениеАренднойПлаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
	|		ПО (СтатусыДокументов.Документ = АР_НачислениеАренднойПлаты.Ссылка)
	|ГДЕ
	|	(СтатусыДокументов.Документ ЕСТЬ NULL
	|			ИЛИ СтатусыДокументов.СтатусСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.СтатусыСчетаФактуры.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АР_НачислениеПени.Ссылка
	|ИЗ
	|	Документ.АР_НачислениеПени КАК АР_НачислениеПени
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
	|		ПО (СтатусыДокументов.Документ = АР_НачислениеПени.Ссылка)
	|ГДЕ
	|	(СтатусыДокументов.Документ ЕСТЬ NULL
	|			ИЛИ СтатусыДокументов.СтатусСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.СтатусыСчетаФактуры.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
	|		ПО (СтатусыДокументов.Документ = СчетФактураВыданный.ДокументОснование)
	|ГДЕ
	|	(СчетФактураВыданный.ДокументОснование ССЫЛКА Документ.АР_НачислениеАренднойПлаты
	|			ИЛИ СчетФактураВыданный.ДокументОснование ССЫЛКА Документ.АР_НачислениеПени)
	|	И (СтатусыДокументов.Документ ЕСТЬ NULL
	|			ИЛИ СтатусыДокументов.СтатусСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.СтатусыСчетаФактуры.ПустаяСсылка))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
				ДокументОбъект.Записать();
			Иначе
				ДокументОбъект.УстановитьСтатусДокумента();
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьВариантыОтчетов() Экспорт
	
	Попытка
		ИменаОтчетов = "АР_АнализЗадержекПлатежейПоАренде,
			|АР_АнализЭффективностиИспользованияПлощадей,
			|АР_ВедомостьПоЗаявкамНаЭксплуатацию,
			|АР_ДиаграммаСостоянийОбъектовАренды,
			|АР_ИсторияОбъектовАренды,
			|АР_ИсторияЭксплуатацииОбъектовАрендыПодрядчиками,
			|АР_ОтчетПоНачислениямИВыплатамАренднойПлаты,
			|АР_ПланируемыеПоступленияДенежныхСредств,
			|АР_ПланФактныйАнализПоступленияДС,
			|АР_ПланФактныйАнализРасходовНаЭксплуатацию,
			|АР_ПродажиПоАренде,
			|АР_РасходыНаОплатуКомУслуг,
			|АР_РеестрЗаявокНаОбслуживание,
			|АР_СведенияОРасходахНаЭксплуатацию,
			|АР_СравнениеУсловийДоговоровФактическихНачислений";
		ВариантыОтчетов.ПеренестиПользовательскиеИзСтандартногоХранилища(СтрЗаменить(ИменаОтчетов, Символы.ПС, ""));
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ДобавитьНовостьОтчетСравнениеУсловийДоговоров() Экспорт
	
	НаименованиеНовости = "Новый отчет ""Сравнение условий договоров и фактических начислений""";
	ТекстНовости = "<P>Добавлен новый отчет <STRONG>Сравнение условий договоров и фактических начислений</STRONG>. 
		|Отчет позволяет для услуг, относящихся к постоянной части арендной платы, проверить соответствие условий договоров аренды и фактических начислений за выбранный период.
		|";
	
	Новость = Справочники.Новости.НайтиПоНаименованию(НаименованиеНовости);
	Если НЕ ЗначениеЗаполнено(Новость) Тогда
		НовостьОбъект = Справочники.Новости.СоздатьЭлемент();
		НовостьОбъект.УИННовости = Новый УникальныйИдентификатор;
	Иначе
		НовостьОбъект = Новость.ПолучитьОбъект();
	КонецЕсли;
	НовостьОбъект.ЛентаНовостей = Справочники.ЛентыНовостей.НайтиПоНаименованию("Что нового в версии");
	НовостьОбъект.Наименование = НаименованиеНовости;
	НовостьОбъект.ДатаПубликации = Дата(2020, 02, 10);
	НовостьОбъект.ТекстНовости = ТекстНовости;
	
	НовостьОбъект.ПривязкаКМетаданным.Очистить();
	
	СтрокаТЧ = НовостьОбъект.ПривязкаКМетаданным.Добавить();
	СтрокаТЧ.Метаданные = "БП.РазделУчета.АР_АрендаНедвижимости";
	
	НовостьОбъект.Записать();
	
	// Для оповещения при запуске программы
	Запись = РегистрыСведений.ПериодическиеСвойстваНовостей.СоздатьМенеджерЗаписи();
	Запись.Новость = НовостьОбъект.Ссылка;
	Запись.ВажностьОбщая = 1;
	Запись.Актуальность = Истина;
	Запись.Записать();
	
КонецПроцедуры

Процедура ОбновитьСчетаУчетаНоменклатурыПриПереходеС20() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетаУчетаНоменклатуры.УдалитьАР_ТипОбъектаАренды КАК УдалитьАР_ТипОбъектаАренды
	|ИЗ
	|	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
	|ГДЕ
	|	НЕ СчетаУчетаНоменклатуры.УдалитьАР_ТипОбъектаАренды = ЗНАЧЕНИЕ(Справочник.АР_ТипыОбъектовАренды.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетаУчетаНоменклатуры.УдалитьАР_ТипОбъектаАренды";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.СчетаУчетаНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.УдалитьАР_ТипОбъектаАренды.Установить(Выборка.УдалитьАР_ТипОбъектаАренды);
		НаборЗаписей.Прочитать();
		Для Каждого Запись Из НаборЗаписей Цикл
			Запись.АР_ТипОбъектаАренды = Запись.УдалитьАР_ТипОбъектаАренды;
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьНезаполненныеСтатусыСчетов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтатусОплаты", Перечисления.СтатусОплатыСчета.СтатусНовогоДокумента());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыДокументов.Организация КАК Организация,
	|	СтатусыДокументов.Документ КАК Документ
	|ИЗ
	|	РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
	|ГДЕ
	|	СтатусыДокументов.Документ ССЫЛКА Документ.АР_СчетНаАренду
	|	И СтатусыДокументов.Статус = &СтатусОплаты
	|	И СтатусыДокументов.ДополнительныйСтатус = НЕОПРЕДЕЛЕНО";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.СтатусыДокументов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
		НаборЗаписей.Отбор.Документ.Установить(Выборка.Документ);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	КонецЦикла;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыДокументов.Организация КАК Организация,
	|	СтатусыДокументов.Документ КАК Документ
	|ИЗ
	|	РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
	|ГДЕ
	|	СтатусыДокументов.Документ ССЫЛКА Документ.АР_СчетНаАренду
	|	И СтатусыДокументов.ДополнительныйСтатус = НЕОПРЕДЕЛЕНО";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.СтатусыДокументов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
		НаборЗаписей.Отбор.Документ.Установить(Выборка.Документ);
		НаборЗаписей.Прочитать();
		Для Каждого Запись Из НаборЗаписей Цикл
			Запись.ДополнительныйСтатус = Перечисления.СтатусыОтгрузки.СтатусНовогоДокумента();
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьНастройкиОтчетов() Экспорт
	
	МассивНастроек = Новый Массив;
	МассивНастроек.Добавить("Отчет.АР_ПродажиПоАренде.Форма/КлючТекущихНастроекДанных");
	МассивНастроек.Добавить("Отчет.АР_ПродажиПоАренде.Форма/ТекущиеДанные");
	МассивНастроек.Добавить("Отчет.АР_ПродажиПоАренде/КлючТекущегоВарианта");
	МассивНастроек.Добавить("Отчет.АР_ПродажиПоАренде/ПродажиПоАренде/КлючТекущихПользовательскихНастроек");
	МассивНастроек.Добавить("Отчет.АР_ПродажиПоАренде/ПродажиПоАренде/ТекущиеПользовательскиеНастройки");
	
	Для Каждого Настройка Из МассивНастроек Цикл
		Попытка
			ХранилищеСистемныхНастроек.Удалить(Настройка, "", Неопределено);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьНовостьНовыеВозможностиДополнительныхСоглашений() Экспорт
	
	НаименованиеНовости = "Новые возможности ""Дополнительных соглашений""";
	ТекстНовости = "<P>Для документа <B>Дополнительное соглашение</B> добавлена возможность ограничения срока действия – до указанной даты. По окончании этого срока автоматически начнут действовать условия договора, которые действовали на дату, предшествующую дате  дополнительного соглашения. Ограничение по сроку действия распространяется на ставки по услугам, сроки оплаты и параметры пеней, условия расчета спецкурса.</P>"
		+ "<P>При расчете пеней по договору аренды настроен учет истории изменения ставки пеней – при начислении пеней за очередной день просрочки используется ставка, которая действовала в этот день.</P>"
		+ "<P>В обработку <B>Групповая пролонгация договоров</B> добавлена возможность изменения ставок на услуги. Для продления срока действия услуг добавлена возможность создавать не только <B>Дополнительные соглашения</B>, но и новые <B>Заключения договоров аренды</B>.</P>";
	
	Новость = Справочники.Новости.НайтиПоНаименованию(НаименованиеНовости);
	Если НЕ ЗначениеЗаполнено(Новость) Тогда
		НовостьОбъект = Справочники.Новости.СоздатьЭлемент();
		НовостьОбъект.УИННовости = Новый УникальныйИдентификатор;
	Иначе
		НовостьОбъект = Новость.ПолучитьОбъект();
	КонецЕсли;
	НовостьОбъект.ЛентаНовостей = Справочники.ЛентыНовостей.НайтиПоНаименованию("Что нового в версии");
	НовостьОбъект.Наименование = НаименованиеНовости;
	НовостьОбъект.ДатаПубликации = Дата(2020, 06, 04);
	НовостьОбъект.ТекстНовости = ТекстНовости;
	
	НовостьОбъект.ПривязкаКМетаданным.Очистить();
	
	СтрокаТЧ = НовостьОбъект.ПривязкаКМетаданным.Добавить();
	СтрокаТЧ.Метаданные = "БП.Документ.АР_ДополнительноеСоглашение";
	СтрокаТЧ.Форма = "ФормаСписка";
	СтрокаТЧ.Событие = "ПриОткрытии";
	СтрокаТЧ.ПоказыватьВФормеОбъекта = Истина;
	СтрокаТЧ.Важность = 1;
	СтрокаТЧ.ДатаСбросаВажности = Дата(2021, 1, 1);
	
	СтрокаТЧ = НовостьОбъект.ПривязкаКМетаданным.Добавить();
	СтрокаТЧ.Метаданные = "БП.РазделУчета.АР_АрендаНедвижимости";
	
	НовостьОбъект.Записать();
	
	// Для оповещения при запуске программы
	Запись = РегистрыСведений.ПериодическиеСвойстваНовостей.СоздатьМенеджерЗаписи();
	Запись.Новость = НовостьОбъект.Ссылка;
	Запись.ВажностьОбщая = 1;
	Запись.Актуальность = Истина;
	Запись.Записать();
	
КонецПроцедуры

Процедура ДобавитьНовостьОтчетПоВзаиморасчетам() Экспорт
	
	НаименованиеНовости = "Новый отчет ""Взаиморасчеты по услугам аренды""";
	ТекстНовости = "<p>Добавлен новый отчет <b>Взаиморасчеты по услугам аренды</b>.</p>
	|<p>В отчете выделены отдельные группы показателей для каждого вида задолженности: </p>
	|<ul>
	|<li>Основная сумма (для расчетов по услугам аренды);
	|</li>
	|<li>Пени (для расчетов по пеням);
	|</li>
	|<li>Депозит (для расчетов по депозиту).
	|</li>
	|</ul>
	|<p>Для анализа расчетов по депозиту предусмотрен вывод различных показателей:</p>
	|<ul>
	|<li>остаток оплаченного депозита на начало и конец периода отчета;
	|</li>
	|<li>сумма оплаты депозита за период;
	|</li>
	|<li>сумма депозита, зачтенного в счет оплаты услуг;
	|</li>
	|<li>размер депозита по условиям договора на конец периода отчета;
	|</li>
	|<li>сумма депозита к оплате с учетом условий договора и остатка депозита;
	|</li>
	|<li>итоговые показатели расчетов по договору с учетом данных по депозиту.
	|</li>
	|</ul>
	|<p>Подробнее см. справку по отчету.</p>
	|";
	
	Новость = Справочники.Новости.НайтиПоНаименованию(НаименованиеНовости);
	Если НЕ ЗначениеЗаполнено(Новость) Тогда
		НовостьОбъект = Справочники.Новости.СоздатьЭлемент();
		НовостьОбъект.УИННовости = Новый УникальныйИдентификатор;
	Иначе
		НовостьОбъект = Новость.ПолучитьОбъект();
	КонецЕсли;
	НовостьОбъект.ЛентаНовостей = Справочники.ЛентыНовостей.НайтиПоНаименованию("Что нового в версии");
	НовостьОбъект.Наименование = НаименованиеНовости;
	НовостьОбъект.ДатаПубликации = Дата(2020, 05, 10);
	НовостьОбъект.ТекстНовости = ТекстНовости;
	
	НовостьОбъект.ПривязкаКМетаданным.Очистить();
	
	СтрокаТЧ = НовостьОбъект.ПривязкаКМетаданным.Добавить();
	СтрокаТЧ.Метаданные = "БП.РазделУчета.АР_АрендаНедвижимости";
	
	НовостьОбъект.Записать();
	
	// Для оповещения при запуске программы
	Запись = РегистрыСведений.ПериодическиеСвойстваНовостей.СоздатьМенеджерЗаписи();
	Запись.Новость = НовостьОбъект.Ссылка;
	Запись.ВажностьОбщая = 1;
	Запись.Актуальность = Истина;
	Запись.Записать();
	
КонецПроцедуры

Процедура ДобавитьНовостьПереименованОтчетПоВзаиморасчетам() Экспорт
	
	НаименованиеНовости = "Отчет ""Структура расчетов по аренде""";
	ТекстНовости = "<p>Отчет <b>Взаиморасчеты по услугам аренды</b> переименован в <b>Структура расчетов по аренде</b>.</p>
	|";
	
	Новость = Справочники.Новости.НайтиПоНаименованию(НаименованиеНовости);
	Если НЕ ЗначениеЗаполнено(Новость) Тогда
		НовостьОбъект = Справочники.Новости.СоздатьЭлемент();
		НовостьОбъект.УИННовости = Новый УникальныйИдентификатор;
	Иначе
		НовостьОбъект = Новость.ПолучитьОбъект();
	КонецЕсли;
	НовостьОбъект.ЛентаНовостей = Справочники.ЛентыНовостей.НайтиПоНаименованию("Что нового в версии");
	НовостьОбъект.Наименование = НаименованиеНовости;
	НовостьОбъект.ДатаПубликации = Дата(2020, 08, 06);
	НовостьОбъект.ТекстНовости = ТекстНовости;
	
	НовостьОбъект.ПривязкаКМетаданным.Очистить();
	
	СтрокаТЧ = НовостьОбъект.ПривязкаКМетаданным.Добавить();
	СтрокаТЧ.Метаданные = "БП.Документ.АР_НачислениеАренднойПлаты";
	СтрокаТЧ.Форма = "ФормаСписка";
	СтрокаТЧ.Событие = "ПриОткрытии";
	СтрокаТЧ.ПоказыватьВФормеОбъекта = Истина;
	СтрокаТЧ.Важность = 1;
	СтрокаТЧ.ДатаСбросаВажности = Дата(2021, 1, 1);
	
	СтрокаТЧ = НовостьОбъект.ПривязкаКМетаданным.Добавить();
	СтрокаТЧ.Метаданные = "БП.РазделУчета.АР_АрендаНедвижимости";
	
	НовостьОбъект.Записать();
	
	// Для оповещения при запуске программы
	Запись = РегистрыСведений.ПериодическиеСвойстваНовостей.СоздатьМенеджерЗаписи();
	Запись.Новость = НовостьОбъект.Ссылка;
	Запись.ВажностьОбщая = 1;
	Запись.Актуальность = Истина;
	Запись.Записать();
	
КонецПроцедуры

