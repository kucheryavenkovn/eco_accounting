#Область ПрограммныйИнтерфейс

// Выполняет инициализацию и заполнение параметров сканирования по переданному контексту.
// Параметры сканирования необходимы для анализа и обработки штрихкодов маркируемой продукции.
// 
// Параметры:
//  Контекст - Неопределено, Структура, ВыборкаИзРезультатаЗапроса, ФормаКлиентскогоПриложения - Источник данных для формирования параметров сканирования.
//  ФормаВыбора - Неопределено - Форма выбора.
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции, по которому будут инициализированы параметры сканирования.
//
// Возвращаемое значение:
//  Структура - Описание:
// * ИдентификаторФормы - УникальныйИдентификатор - Уникальный идентификатор формы.
// * КонтрольРасхожденийСДокументомОснованием - Булево - Истина, если необходимо выполнять контроль и сообщать 
//            об ошибках в случае несоответствия документу-основанию.
// * КэшированныеЗначения - Структура - Содержит поля кэшируемых значений.
// * ТолькоМаркируемаяПродукция - Булево - Истина, если документ поддерживает работу только с маркируемой продукцией.
// * ДопустимыеВидыПродукции - Массив Из ПеречислениеСсылка.ВидыПродукцииИС - Виды продукции, 
//                                                                                                 которые поддерживает контекст.
// * ВозможнаЗагрузкаТСД - Булево - Истина, если контекст поддерживает работу с ТСД.
// * ДокументОснование - Неопределено, ДокументСсылка - Документ основание.
// * СоздаватьШтрихкодУпаковки - Булево - Истина, если необходимо создавать элемент справочника штрихкоды упаковок.
// * КэшМаркируемойПродукции - Структура - адрес во временном хранилище, где хранятся обработанные данные по штрихкодам.
// * АдресДанныхДокументаОснования - Строка - адрес во временном хранилище, где хранятся данные документа основания.
// * ДанныеВыбораПоМаркируемойПродукции - Структура - последние данные выбора, которые требовалось запомнить для последующего сканирования.
// * ИспользуютсяДанныеВыбораПоМаркируемойПродукции - Булево - Истина, если данные выбора по маркируемой продукции используются.
// * ДополнительныеПараметры - Структура - Параметры необходимые для переопределения обработки прикладных объектов.
// * ОперацияКонтроляАкцизныхМарок - Строка - Доступные типы: "Продажа", "Возврат". "Продажа" - для документов, которые
//           отражают расход по складу, "Возврат" - для документов, отражающих приход.
Функция ПараметрыСканирования(Контекст = Неопределено, ФормаВыбора = Неопределено, ВидПродукции = Неопределено) Экспорт
	
	ПараметрыСканирования = ШтрихкодированиеИСКлиентСервер.БазовыеПараметрыСканирования();
	ШтрихкодированиеИСКлиентСервер.ЗаполнитьБазовыеПараметрыСканирования(ПараметрыСканирования, Контекст);
	ЗаполнитьПараметрыСканированияДляАлкогольнойПродукции(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора);
	ЗаполнитьПараметрыСканированияДляТабачнойПродукции(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора);
	ЗаполнитьПараметрыСканированияДляПродукцииИСМП(ПараметрыСканирования, Контекст, ФормаВыбора, ВидПродукции);
	ШтрихкодированиеИСКлиентСерверПереопределяемый.ПриЗаполненииПараметровСканирования(ПараметрыСканирования, Контекст, ВидПродукции);
	
	Возврат ПараметрыСканирования;
	
КонецФункции

// Выполняет обработку штрихкода и возвращает результат этой обработки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо выполнить обработку штрихкода.
//  ВходящиеДанные - Структура - Исходные данные, включающие только значение штрихкода и количество,
//                                либо уже полноценные заполненные данные штрихкода, которые нуждаются в обработке.
//  КэшированныеЗначения - Структура - Содержит поля кэшируемых значений.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  (См. ИнициализироватьРезультатОбработкиШтрихкода).
Функция ОбработатьВводШтрихкода(Форма, ВходящиеДанные, КэшированныеЗначения, ПараметрыСканирования = Неопределено) Экспорт
	
	ДанныеШтрихкода = ОбщегоНазначения.СкопироватьРекурсивно(ВходящиеДанные);
	
	Если ПараметрыСканирования = Неопределено Тогда
		ПараметрыСканирования = ПараметрыСканирования(Форма);
	КонецЕсли;
	
	ШтрихкодированиеИСКлиентСервер.ДекодироватьШтрихкодДанныхBase64(ДанныеШтрихкода);
	
	Если ДанныеПоШтрихкодуУжеПолучены(ДанныеШтрихкода)
		И ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
		
		Возврат РезультатОбработкиШтрихкодаМаркируемойПродукцииПослеУточнения(Форма, ДанныеШтрихкода, ПараметрыСканирования);
		
	КонецЕсли;
	
	ДанныеШтрихкодаСписок = Новый Массив;
	ДанныеШтрихкодаСписок.Добавить(ДанныеШтрихкода);
	
	ДанныеПоШтрихкодам    = ИнициализацияДанныхПоШтрихкодам();
	ДанныеКодовМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
	
	ПодготовитьДанныеКодовМаркировкиДляОбработки(ДанныеКодовМаркировки, ДанныеШтрихкодаСписок, ПараметрыСканирования);
	
	// Заполнение массива видов продукции штрихкодов. При выполнении проверок
	// можно будет использовать ПрисутствуетТабачнаяПродукция(ВидыПродукции)
	ВидыПродукцииНоменклатуры = ДанныеКодовМаркировки.ВыгрузитьКолонку("ВидПродукции");
	ДанныеПоШтрихкодам.ВидыПродукции = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВидыПродукцииНоменклатуры);
	
	ПоместитьДанныеДокументаВКэшМаркируемойПродукции(Форма, ПараметрыСканирования);
	
	РезультатыПроверок = ВыполнитьПроверкиПередПолучениемДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования);
	Если РезультатыПроверок.Количество() > 0 Тогда
		Возврат РезультатыПроверок[ДанныеКодовМаркировки[0].Штрихкод];
	КонецЕсли;
	
	ЗаполнитьДанныеПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования, Форма);
	
	ЕстьОшибки = ВыполнитьПроверкуНаОшибкиДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования);
	ПроверитьНеобходимостьУточненияДанныхУПользователя(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	РезультатыОбработок = ОбработатьДанныеПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки, Форма);
	
	Возврат РезультатыОбработок[ДанныеКодовМаркировки[0].Штрихкод];
	
КонецФункции

// Заполняет таблицу "ДанныеКодовМаркировки" данными разбора кода и сведениями по номенклатуре на основании штрихкода EAN,
// входящего в состав кода маркировки.
//
// Параметры:
//  ДанныеКодовМаркировки - См. ИнициализацияТаблицыДанныхКодовМаркировки
//  ДанныеШтрихкодов - См. ИнициализацияДанныхПоШтрихкодам
//  ПараметрыСканирования - См. ПараметрыСканирования
Процедура ПодготовитьДанныеКодовМаркировкиДляОбработки(ДанныеКодовМаркировки, ДанныеШтрихкодов, ПараметрыСканирования, КешДанныхРазбора = Неопределено) Экспорт
	
	ЗаполнитьДанныеКодовМаркировкиВходящимиДанными(ДанныеКодовМаркировки, ДанныеШтрихкодов, ПараметрыСканирования);
	НормализоватьИРазобратьНаСоставляющиеКодыМаркировки(ДанныеКодовМаркировки, ПараметрыСканирования, КешДанныхРазбора);
	ОпределитьШтрихкодыВводаОстатков(ДанныеКодовМаркировки, ПараметрыСканирования);
	ЗаполнитьСведенияПоШтрихкодамEAN(ДанныеКодовМаркировки, ПараметрыСканирования);
	ЗаполнитьВидыПродукцииДанныхКодовМаркировки(ДанныеКодовМаркировки, ПараметрыСканирования);
	
КонецПроцедуры

Процедура ЗаполнитьВидыПродукцииДанныхКодовМаркировки(ДанныеКодовМаркировки, ПараметрыСканирования)
	
	МассивСтрокКЗаполнению = Новый Массив;
	
	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаНоменклатуры.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаНоменклатуры.Колонки.Добавить("ВидПродукции",   Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	
	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.ВидПродукции)
			И ЗначениеЗаполнено(СтрокаДанных.Номенклатура) Тогда
			НоваяСтрока = ТаблицаНоменклатуры.Добавить();
			НоваяСтрока.Номенклатура   = СтрокаДанных.Номенклатура;
			НоваяСтрока.Характеристика = СтрокаДанных.Характеристика;
			МассивСтрокКЗаполнению.Добавить(СтрокаДанных);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.Номенклатура)
			И СтрокаДанных.ЭтоКодВводаОстатков
			И СтрокаДанных.ВидыПродукцииКодаМаркировки.Количество() = 1 Тогда
			СтрокаДанных.ВидПродукции = СтрокаДанных.ВидыПродукцииКодаМаркировки[0];
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДанных.Номенклатура   КАК Номенклатура,
	|	ТаблицаДанных.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|;
	|
	|/////////////////////////////////////////////
	|"
	+
	ОпределитьТекстЗапросаСвойстваМаркируемойПродукции()
	+
	"
	|;
	|/////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ДанныеПоВидуПродукции.Номенклатура         КАК Номенклатура,
	|	ДанныеПоВидуПродукции.Характеристика       КАК Характеристика,
	|	ДанныеПоВидуПродукции.МаркируемаяПродукция КАК МаркируемаяПродукция,
	|	ДанныеПоВидуПродукции.ВидПродукции         КАК ВидПродукции
	|ИЗ
	|	СвойстваМаркируемойПродукции КАК ДанныеПоВидуПродукции
	|";
	
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаНоменклатуры);
	ТаблицаНоменклатуры = Запрос.Выполнить().Выгрузить();
	ТаблицаНоменклатуры.Индексы.Добавить("Номенклатура, Характеристика");
	
	Для Каждого СтрокаДанных Из МассивСтрокКЗаполнению Цикл
		
		ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика", СтрокаДанных.Номенклатура, СтрокаДанных.Характеристика);
		НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки <> Неопределено Тогда
			СтрокаДанных.ВидПродукции         = НайденныеСтроки[0].ВидПродукции;
			СтрокаДанных.МаркируемаяПродукция = НайденныеСтроки[0].МаркируемаяПродукция;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует коллекции: «ДеревоУпаковок» и «МаркированныеТовары». 
// Данные собираются на основании информации справочника «ШтрихкодыУпаковок». 
// Так же возможно получение информации из сервиса Государственных Информационных Систем,
// если данное взаимодействие и получение информации предусмотрено.
// 
// Параметры:
//  Упаковки - Массив из СправочникСсылка.ШтрихкодыУпаковокТоваров - Массив упаковок, по которому формируются вложенные штрихкоды.
//  ПараметрыСканирования     - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ПолныйКодМаркировкиИзПула - Булево - Включать полный код из пула.
// Возвращаемое значение:
//  Структура - Описание:
//   * ШтрихкодыПродукцииДляСопоставления - Массив - Массив штрихкодов, которые необходимо сопоставить с номенклатурой.
//   * ВидыПродукции - Массив из ПеречислениеСсылка.ВидыПродукцииИС - Массив видов продукции.
//   * МаркированныеТовары - ТаблицаЗначений - Таблица, содержащая товары, подлежащие маркировке:
//   * ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
Функция ВложенныеШтрихкодыУпаковок(Упаковки, ПараметрыСканирования = Неопределено, ПолныйКодМаркировкиИзПула = Ложь) Экспорт
	
	Если Упаковки.Количество() = 0 Тогда
		
		ВложенныеШтрихкоды = ИнициализацияВложенныхШтрихкодов();
		Возврат ВложенныеШтрихкоды;
		
	КонецЕсли;
	
	ДанныеПоШтрихкодам = ИнициализацияДанныхПоШтрихкодам();
	ВложенныеШтрихкоды = ВложенныеШтрихкодыПоМассивуУпаковокБезСпецифики(Упаковки, ПараметрыСканирования, ПолныйКодМаркировкиИзПула);
	ДанныеПоШтрихкодам.ВложенныеШтрихкоды = ВложенныеШтрихкоды;
	
	ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(
		ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ВложенныеШтрихкоды.ДеревоУпаковок,, ПараметрыСканирования);
	
	Если ДопустимаАлкогольнаяПродукция(ПараметрыСканирования)
		И ПрисутствуетАлкогольнаяПродукция(ВложенныеШтрихкоды.ВидыПродукции) Тогда
		
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		МодульШтрихкодированиеЕГАИС.ДополнитьДанныеПоШтрихкодамСпецификой(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
	Если ДопустимаТабачнаяПродукция(ПараметрыСканирования)
		И ПрисутствуетТабачнаяПродукция(ВложенныеШтрихкоды.ВидыПродукции) Тогда
		
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеМОТП.ПривестиВложенныеШтрихкодыКТребуемомуВидуДетализации(ВложенныеШтрихкоды, ПараметрыСканирования);
		МодульШтрихкодированиеМОТП.ДополнитьДанныеПоШтрихкодамСпецификой(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
	Если ДопустимаПродукцияИСМП(ПараметрыСканирования)
		И ПрисутствуетПродукцияИСМП(ВложенныеШтрихкоды.ВидыПродукции) Тогда
		
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.ДополнитьДанныеПоШтрихкодамСпецификой(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
	Возврат ВложенныеШтрихкоды;
	
КонецФункции

// Получает из справочника «Штрихкоды упаковок» данные по массиву значений штрихкодов.
//
// Параметры:
// 	ЗначенияШтрихкодов - Массив из Строка, ТаблицаЗначений - Массив штрихкодов.
//  ТипыУпаковок - Массив - список из ПеречислениеСсылка.ТипыУпаковок - Коллекция типов упаковок, по которым будет 
//       установлено условие для формирования запроса.
//  ПроверкаНаGS1 - Булево - Добавляет в поиск значение штрихкода без скобок, только для упаковок GS1.
// Возвращаемое значение:
//  ТаблицаЗначений - Описание:
//   * Штрихкод - Строка - Штрихкод.
//   * Ссылка - СправочникСсылка.ШтрихкодыУпаковокТоваров - Ссылка на элемент справочника.
//   * ЗначениеШтрихкода - Строка - Значение штрихкода из элемента справочника.
//   * ДатаУпаковки - Дата - Дата формирования упаковки.
//   * ТипШтрихкода - ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода.
//   * ТипУпаковки - ПеречислениеСсылка.ТипыУпаковок - Тип упаковки.
//   * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика.
//   * Серия - ОпределяемыйТип.СерияНоменклатуры - Серия.
//   * ХешСумма - Строка - Хэш сумма упаковки.
Функция ШтрихкодыУпаковок(ЗначенияШтрихкодов, ТипыУпаковок = Неопределено, ПроверкаНаGS1 = Ложь) Экспорт
	
	ШтрихкодыУпаковок = Новый ТаблицаЗначений;
	// Исходные данные
	ШтрихкодыУпаковок.Колонки.Добавить("Штрихкод",          Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(200)));
	// Данные из справочника ШтрихкодыУпаковокТоваров
	ШтрихкодыУпаковок.Колонки.Добавить("Ссылка",            Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ШтрихкодыУпаковок.Колонки.Добавить("ЗначениеШтрихкода", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(200)));
	ШтрихкодыУпаковок.Колонки.Добавить("ТипШтрихкода",      Новый ОписаниеТипов("ПеречислениеСсылка.ТипыШтрихкодов"));
	ШтрихкодыУпаковок.Колонки.Добавить("ТипУпаковки",       Новый ОписаниеТипов("ПеречислениеСсылка.ТипыУпаковок"));
	ШтрихкодыУпаковок.Колонки.Добавить("Номенклатура",      Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ШтрихкодыУпаковок.Колонки.Добавить("Характеристика",    Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ШтрихкодыУпаковок.Колонки.Добавить("Серия",             Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ШтрихкодыУпаковок.Колонки.Добавить("ХешСумма",          Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50)));
	ШтрихкодыУпаковок.Колонки.Добавить("ДатаУпаковки",      Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ШтрихкодыУпаковок.Колонки.Добавить("ШтрихкодСовпадает", Новый ОписаниеТипов("Булево"));
	
	Если ЗначенияШтрихкодов.Количество() = 0 Тогда
		Возврат ШтрихкодыУпаковок;
	КонецЕсли;
	
	ТаблицаШтрихкодов = Новый ТаблицаЗначений;
	ТаблицаШтрихкодов.Колонки.Добавить("Штрихкод",              Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(200)));
	ТаблицаШтрихкодов.Колонки.Добавить("ХэшШтрихкода",          Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50)));
	ТаблицаШтрихкодов.Колонки.Добавить("ХэшИсходногоШтрихкода", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50)));
	ТаблицаШтрихкодов.Колонки.Добавить("ЭтоДобавленный",        Новый ОписаниеТипов("Булево"));
	ТаблицаШтрихкодов.Колонки.Добавить("ИсходныйШтрихкод",      Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(200)));
	
	Для Каждого Штрихкод Из ЗначенияШтрихкодов Цикл
		
		НоваяСтрока = ТаблицаШтрихкодов.Добавить();
		НоваяСтрока.Штрихкод              = Штрихкод;
		НоваяСтрока.ХэшШтрихкода          = ИнтеграцияИС.ХешированиеДанныхSHA256(Штрихкод);
		НоваяСтрока.ИсходныйШтрихкод      = НоваяСтрока.Штрихкод;
		НоваяСтрока.ХэшИсходногоШтрихкода = НоваяСтрока.ХэшШтрихкода;
		
		Если ПроверкаНаGS1 И СтрНачинаетсяС(Штрихкод, "(") Тогда
			ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкода(Штрихкод);
			Если ПараметрыШтрихкода.Результат = Неопределено
				Или ПараметрыШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.SSCC Тогда
				Продолжить;
			КонецЕсли;
			ЗначениеШтрихкодаБезСкобок = ШтрихкодыУпаковокКлиентСервер.ШтрихкодGS1(ПараметрыШтрихкода.Результат, Ложь, "");
			Если Не ЗначениеЗаполнено(ЗначениеШтрихкодаБезСкобок)
				Или ЗначениеШтрихкодаБезСкобок = Штрихкод Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока2 = ТаблицаШтрихкодов.Добавить();
			НоваяСтрока2.Штрихкод     = ЗначениеШтрихкодаБезСкобок;
			НоваяСтрока2.ХэшШтрихкода = ИнтеграцияИС.ХешированиеДанныхSHA256(ЗначениеШтрихкодаБезСкобок);
			НоваяСтрока2.ЭтоДобавленный        = Истина;
			НоваяСтрока2.ИсходныйШтрихкод      = НоваяСтрока.ИсходныйШтрихкод;
			НоваяСтрока2.ХэшИсходногоШтрихкода = НоваяСтрока.ХэшИсходногоШтрихкода;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаШтрихкодов", ТаблицаШтрихкодов);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаШтрихкодов.Штрихкод              КАК Штрихкод,
	|	ТаблицаШтрихкодов.ХэшШтрихкода          КАК ХэшШтрихкода,
	|	ТаблицаШтрихкодов.ЭтоДобавленный        КАК ЭтоДобавленный,
	|	ТаблицаШтрихкодов.ИсходныйШтрихкод      КАК ИсходныйШтрихкод,
	|	ТаблицаШтрихкодов.ХэшИсходногоШтрихкода КАК ХэшИсходногоШтрихкода
	|ПОМЕСТИТЬ ТаблицаШтрихкодов
	|ИЗ
	|	&ТаблицаШтрихкодов КАК ТаблицаШтрихкодов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаШтрихкодов.Штрихкод                 КАК Штрихкод,
	|	ТаблицаШтрихкодов.ХэшШтрихкода             КАК ХэшШтрихкода,
	|	ТаблицаШтрихкодов.ЭтоДобавленный           КАК ЭтоДобавленный,
	|	ТаблицаШтрихкодов.ИсходныйШтрихкод         КАК ИсходныйШтрихкод,
	|	ТаблицаШтрихкодов.ХэшИсходногоШтрихкода    КАК ХэшИсходногоШтрихкода,
	|	ШтрихкодыУпаковокТоваров.Ссылка            КАК Ссылка,
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
	|	ШтрихкодыУпаковокТоваров.ДатаУпаковки      КАК ДатаУпаковки,
	|	ШтрихкодыУпаковокТоваров.ТипШтрихкода      КАК ТипШтрихкода,
	|	ШтрихкодыУпаковокТоваров.ТипУпаковки       КАК ТипУпаковки,
	|	ШтрихкодыУпаковокТоваров.Номенклатура      КАК Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика    КАК Характеристика,
	|	ШтрихкодыУпаковокТоваров.Серия             КАК Серия,
	|	ШтрихкодыУпаковокТоваров.ХешСумма          КАК ХешСумма
	|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
	|ИЗ
	|	ТаблицаШтрихкодов КАК ТаблицаШтрихкодов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО ТаблицаШтрихкодов.ХэшШтрихкода = ШтрихкодыУпаковокТоваров.ХешСуммаЗначенияШтрихкода
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.Ссылка ЕСТЬ НЕ NULL
	|	И 1 = 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаШтрихкодов.Штрихкод,
	|	ТаблицаШтрихкодов.ХэшШтрихкода,
	|	ТаблицаШтрихкодов.ЭтоДобавленный,
	|	ТаблицаШтрихкодов.ИсходныйШтрихкод,
	|	ТаблицаШтрихкодов.ХэшИсходногоШтрихкода,
	|	ШтрихкодыУпаковокТоваров.Ссылка,
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода,
	|	ШтрихкодыУпаковокТоваров.ДатаУпаковки,
	|	ШтрихкодыУпаковокТоваров.ТипШтрихкода,
	|	ШтрихкодыУпаковокТоваров.ТипУпаковки,
	|	ШтрихкодыУпаковокТоваров.Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика,
	|	ШтрихкодыУпаковокТоваров.Серия,
	|	ШтрихкодыУпаковокТоваров.ХешСумма
	|ИЗ
	|	ТаблицаШтрихкодов КАК ТаблицаШтрихкодов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО ТаблицаШтрихкодов.ХэшШтрихкода = ШтрихкодыУпаковокТоваров.ХешСуммаЗначенияШтрихкодаGS1
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.Ссылка ЕСТЬ НЕ NULL
	|	И 1 = 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаШтрихкодов.Штрихкод,
	|	ТаблицаШтрихкодов.ХэшШтрихкода,
	|	ТаблицаШтрихкодов.ЭтоДобавленный,
	|	ТаблицаШтрихкодов.ИсходныйШтрихкод,
	|	ТаблицаШтрихкодов.ХэшИсходногоШтрихкода,
	|	ШтрихкодыУпаковокТоваров.Ссылка,
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода,
	|	ШтрихкодыУпаковокТоваров.ДатаУпаковки,
	|	ШтрихкодыУпаковокТоваров.ТипШтрихкода,
	|	ШтрихкодыУпаковокТоваров.ТипУпаковки,
	|	ШтрихкодыУпаковокТоваров.Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика,
	|	ШтрихкодыУпаковокТоваров.Серия,
	|	ШтрихкодыУпаковокТоваров.ХешСумма
	|ИЗ
	|	ТаблицаШтрихкодов КАК ТаблицаШтрихкодов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО ТаблицаШтрихкодов.Штрихкод = ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода
	|		И ШтрихкодыУпаковокТоваров.ХешСуммаЗначенияШтрихкода = """"
	|		И ШтрихкодыУпаковокТоваров.ХешСуммаЗначенияШтрихкодаGS1 = """"
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.Ссылка ЕСТЬ НЕ NULL
	|	И 1 = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеШтрихкодовУпаковок.Штрихкод КАК Штрихкод,
	|	ДанныеШтрихкодовУпаковок.ХэшШтрихкода КАК ХэшШтрихкода,
	|	МАКСИМУМ(ДанныеШтрихкодовУпаковок.ДатаУпаковки) КАК ДатаУпаковки
	|ПОМЕСТИТЬ МаксимальныеДаты
	|ИЗ
	|	ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеШтрихкодовУпаковок.Штрихкод,
	|	ДанныеШтрихкодовУпаковок.ХэшШтрихкода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеШтрихкодовУпаковок.Штрихкод              КАК Штрихкод,
	|	ДанныеШтрихкодовУпаковок.ЭтоДобавленный        КАК ЭтоДобавленный,
	|	ДанныеШтрихкодовУпаковок.ИсходныйШтрихкод      КАК ИсходныйШтрихкод,
	|	ДанныеШтрихкодовУпаковок.ХэшИсходногоШтрихкода КАК ХэшИсходногоШтрихкода,
	|	ДанныеШтрихкодовУпаковок.Ссылка                КАК Ссылка,
	|	ДанныеШтрихкодовУпаковок.ЗначениеШтрихкода     КАК ЗначениеШтрихкода,
	|	ДанныеШтрихкодовУпаковок.ХешСумма              КАК ХешСумма,
	|	ДанныеШтрихкодовУпаковок.ДатаУпаковки          КАК ДатаУпаковки,
	|	ДанныеШтрихкодовУпаковок.ТипШтрихкода          КАК ТипШтрихкода,
	|	ДанныеШтрихкодовУпаковок.ТипУпаковки           КАК ТипУпаковки,
	|	ДанныеШтрихкодовУпаковок.Номенклатура          КАК Номенклатура,
	|	ДанныеШтрихкодовУпаковок.Характеристика        КАК Характеристика,
	|	ДанныеШтрихкодовУпаковок.Серия                 КАК Серия,
	|	ДанныеШтрихкодовУпаковок.Штрихкод = ДанныеШтрихкодовУпаковок.ЗначениеШтрихкода КАК ШтрихкодСовпадает
	|ПОМЕСТИТЬ ДанныеДляАнализа
	|ИЗ
	|	ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксимальныеДаты КАК МаксимальныеДаты
	|		ПО ДанныеШтрихкодовУпаковок.Штрихкод = МаксимальныеДаты.Штрихкод
	|			И ДанныеШтрихкодовУпаковок.ДатаУпаковки = МаксимальныеДаты.ДатаУпаковки
	|			И ДанныеШтрихкодовУпаковок.ХэшШтрихкода = МаксимальныеДаты.ХэшШтрихкода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляАнализа.Штрихкод              КАК Штрихкод,
	|	ДанныеДляАнализа.ЭтоДобавленный        КАК ЭтоДобавленный,
	|	ДанныеДляАнализа.ИсходныйШтрихкод      КАК ИсходныйШтрихкод,
	|	ДанныеДляАнализа.ХэшИсходногоШтрихкода КАК ХэшИсходногоШтрихкода,
	|	ДанныеДляАнализа.Ссылка                КАК Ссылка,
	|	ДанныеДляАнализа.ЗначениеШтрихкода     КАК ЗначениеШтрихкода,
	|	ДанныеДляАнализа.ХешСумма              КАК ХешСумма,
	|	ДанныеДляАнализа.ДатаУпаковки          КАК ДатаУпаковки,
	|	ДанныеДляАнализа.ТипШтрихкода          КАК ТипШтрихкода,
	|	ДанныеДляАнализа.ТипУпаковки           КАК ТипУпаковки,
	|	ДанныеДляАнализа.Номенклатура          КАК Номенклатура,
	|	ДанныеДляАнализа.Характеристика        КАК Характеристика,
	|	ДанныеДляАнализа.Серия                 КАК Серия,
	|	ДанныеДляАнализа.ШтрихкодСовпадает     КАК ШтрихкодСовпадает
	|ИЗ
	|	ДанныеДляАнализа КАК ДанныеДляАнализа
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтоДобавленный,
	|	ШтрихкодСовпадает УБЫВ
	|ИТОГИ ПО
	|	ХэшИсходногоШтрихкода";
	
	Если ЗначениеЗаполнено(ТипыУпаковок) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "1 = 1", "ШтрихкодыУпаковокТоваров.ТипУпаковки В(&ТипыУпаковок)");
		Запрос.УстановитьПараметр("ТипыУпаковок", ТипыУпаковок);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ШтрихкодыУпаковок;
	КонецЕсли;
	
	ВыборкаИсходныйШтрихкод = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИсходныйШтрихкод.Следующий() Цикл
		ВыборкаДетальныхЗаписей = ВыборкаИсходныйШтрихкод.Выбрать();
		ВыборкаДетальныхЗаписей.Следующий();
		
		ДанныеУпаковки = ШтрихкодыУпаковок.Добавить();
		ЗаполнитьЗначенияСвойств(ДанныеУпаковки, ВыборкаДетальныхЗаписей);
		ДанныеУпаковки.Штрихкод          = ВыборкаДетальныхЗаписей.ИсходныйШтрихкод;
		ДанныеУпаковки.ШтрихкодСовпадает = (ДанныеУпаковки.Штрихкод = ДанныеУпаковки.ЗначениеШтрихкода);
	КонецЦикла;
	
	ШтрихкодыУпаковок.Индексы.Добавить("Штрихкод, ХешСумма");
	
	Возврат ШтрихкодыУпаковок;
	
КонецФункции
// Производит анализ дерева упаковок на продукцию.
//
// Параметры:
//  ДеревоМаркируемойПродукции - ДеревоЗначений - Иерархия хранения маркируемой продукции с упаковками.
//  ЗначенияШтрихкодов - Массив - Массив, который будет дополнен штрихкодами, которые в наличии.
// * Штрихкод - Строка - Значение штрихкода.
// Возвращаемое значение:
//  Массив - Штрихкоды, которые имеют статус "В Наличии" и содержатся в дереве упаковок.
Функция ЗначенияШтрихкодовИзДереваМаркируемойПродукции(ДеревоМаркируемойПродукции, ЗначенияШтрихкодов = Неопределено) Экспорт
	
	Если ЗначенияШтрихкодов = Неопределено Тогда
		Результат = Новый Массив;
	Иначе
		Результат = ЗначенияШтрихкодов;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ДеревоМаркируемойПродукции.Строки Цикл
		
		ЗначенияШтрихкодовИзДереваМаркируемойПродукции(СтрокаДерева, Результат);
		
		Если Не ПустаяСтрока(СтрокаДерева.Штрихкод) Тогда
			Результат.Добавить(СтрокаДерева.Штрихкод);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Формирует коллекции: «ДеревоУпаковок» и «МаркированныеТовары» по ссылке на документ.
// Данные собираются на основании информации справочника «ШтрихкодыУпаковок». 
// Так же возможно получение информации из сервиса Государственных Информационных Систем,
// если данное взаимодействие и получение информации предусмотрено.
// 
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ.
//  ВидПродукции - Неопределено, ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции, по которому необходимо осуществить
//  отбор формирования вложенных штрихкодов.
//  Детализация - Неопределено, ПеречислениеСсылка.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП - Детализация,
//  с которой необходимо сформировать вложенные штрихкоды.
// Возвращаемое значение:
//  Структура - Описание:
//   * ШтрихкодыПродукцииДляСопоставления - Массив - Массив штрихкодов, которые необходимо сопоставить с номенклатурой.
//   * ВидыПродукции - Массив из ПеречислениеСсылка.ВидыПродукцииИС - Массив видов продукции.
//   * МаркированныеТовары - ТаблицаЗначений - Таблица, содержащая товары, подлежащие маркировке:
//   * ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
Функция ВложенныеШтрихкодыУпаковокПоДокументу(ДокументСсылка, ВидПродукции = Неопределено, Детализация = Неопределено) Экспорт
	
	ДанныеШапки = ПолучитьСтруктуруРеквизитовДокумента(ДокументСсылка);
	ПараметрыСканирования = ПараметрыСканирования(ДанныеШапки,,ВидПродукции);
	
	ВложенныеШтрихкоды = Неопределено;
	
	Если ДопустимаАлкогольнаяПродукция(ПараметрыСканирования) Тогда
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		ВложенныеШтрихкоды = МодульШтрихкодированиеЕГАИС.ВложенныеШтрихкодыУпаковокПоДокументу(ДокументСсылка);
	ИначеЕсли ДопустимаТабачнаяПродукция(ПараметрыСканирования) Тогда
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		ВложенныеШтрихкоды = МодульШтрихкодированиеМОТП.ВложенныеШтрихкодыУпаковокПоДокументу(
			ДокументСсылка, Детализация, ПараметрыСканирования);
	ИначеЕсли ДопустимаПродукцияИСМП(ПараметрыСканирования) Тогда
		МодульШтрихкодированиеИСМП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		ВложенныеШтрихкоды = МодульШтрихкодированиеИСМП.ВложенныеШтрихкодыУпаковокПоДокументу(
			ДокументСсылка, Детализация, ПараметрыСканирования);
	КонецЕсли;
	
	Возврат ВложенныеШтрихкоды;
	
КонецФункции

// Обновляет информацию, находяющуюся во временном хранилище, адрес которого, как правило,
//   хранится в реквизите формы «КэшМаркируемойПродукции».
// Выполняемые действия:
//   * Формирование данных кеша маркируемой продукции (если оно не производилось ранее).
//   * Удаление из кеша неактуальных данных (после удаления штрихкодов упаковок).
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо обновить кэш маркируемой продукции.
//  ПараметрыСканирования - Структура, Неопределено - см. ПараметрыСканирования.
Процедура ОбновитьКэшМаркируемойПродукции(Форма, ПараметрыСканирования = Неопределено) Экспорт
	
	Если ПараметрыСканирования = Неопределено Тогда
		ПараметрыСканирования = ПараметрыСканирования(Форма);
	КонецЕсли;
	
	Если Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции) Тогда
		Возврат;
	КонецЕсли;
	
	КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
	ОбработанныеКодыМаркировки = КэшМаркируемойПродукции.ОбработанныеКодыМаркировки;
	
	Если ОбработанныеКодыМаркировки.Количество() = 0 Тогда
		ПоместитьДанныеДокументаВКэшМаркируемойПродукции(Форма, ПараметрыСканирования);
		Возврат;
	КонецЕсли;
	
	УпаковкиОбъекта = УпаковкиОбъекта(Форма, ПараметрыСканирования);
	ЗначенияВложенныхШтрихкодовМарок = ЗначенияВложенныхШтрихкодовУпаковок(УпаковкиОбъекта);
	
	НовыйОбработанныеКодыМаркировки = Новый Соответствие;
	Для Каждого Штрихкод Из ЗначенияВложенныхШтрихкодовМарок Цикл
		НовыйОбработанныеКодыМаркировки.Вставить(Штрихкод, ОбработанныеКодыМаркировки.Получить(Штрихкод));
	КонецЦикла;
	
	КэшМаркируемойПродукции.ОбработанныеКодыМаркировки = НовыйОбработанныеКодыМаркировки;
	ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, ПараметрыСканирования.КэшМаркируемойПродукции);
	
КонецПроцедуры

// Формирует кэш маркируемой продукции по данными формы.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо сформировать кэш маркируемой продукции.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура СформироватьКэшМаркируемойПродукции(Форма, ПараметрыСканирования = Неопределено) Экспорт
	
	ПараметрыСканированияИнициализированыЛокально = Ложь;
	
	Если ПараметрыСканирования = Неопределено Тогда
		ПараметрыСканирования = ПараметрыСканирования(Форма);
		ПараметрыСканированияИнициализированыЛокально = Истина;
	КонецЕсли;
	
	ШтрихкодыУпаковок = ШтрихкодыУпаковокПоДаннымТоваровИМаркируемойПродукции(Форма, ПараметрыСканирования);
	
	КэшМаркируемойПродукции = ИнициализацияКэшаМаркируемойПродукции();
	ОбработанныеКодыМаркировки = КэшМаркируемойПродукции.ОбработанныеКодыМаркировки;
	КоллекцияВсехШтрихкодовДерева(ШтрихкодыУпаковок.ДеревоУпаковок.Строки, ОбработанныеКодыМаркировки, ПараметрыСканирования);
	
	Если ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции) Тогда
		
		ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, ПараметрыСканирования.КэшМаркируемойПродукции);
		
	Иначе
		
		КэшМаркируемойПродукции = ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, Форма.УникальныйИдентификатор);
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "КэшМаркируемойПродукции") Тогда
			Форма.КэшМаркируемойПродукции = КэшМаркируемойПродукции;
		КонецЕсли;
		
		Если Не ПараметрыСканированияИнициализированыЛокально Тогда
			ПараметрыСканирования.КэшМаркируемойПродукции = КэшМаркируемойПродукции;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает штрихкод GS1 в формате со скобками к передаче в компоненту печати штрихкодов.
//
// Параметры:
//  ЗначениеШтрихкода - Строка - Штрихкод
//  ТипКода - Число - Тип кода (см. документацию по компоненте печати штрихкодов)
// Возвращаемое значение:
//  Строка - Штрихкод для передачи в компоненту печати
Функция КодGS1ДляКомпонентыПечати(ЗначениеШтрихкода, ТипКода) Экспорт
	
	ЗначениеШтрихкодаДляКомпоненты = СокрЛП(ЗначениеШтрихкода);
	
	Если (ТипКода = 2 Или ТипКода = 17 Или ТипКода = 24) Тогда
		ЧтениеШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкода(ЗначениеШтрихкодаДляКомпоненты);
		Если Не ЧтениеШтрихкода.Результат = Неопределено Тогда
			Если ЧтениеШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_128
				Или ЧтениеШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked Тогда
				ЗначениеШтрихкодаДляКомпоненты = ШтрихкодыУпаковокКлиентСервер.ШтрихкодGS1(
					ЧтениеШтрихкода.Результат, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеШтрихкодаДляКомпоненты;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Данные, заполняемые в процессе обработки штрихкодов
Функция ИнициализацияДанныхПоШтрихкодам() Экспорт
	
	ДанныеПоШтрихкодам = Новый Структура;
	
	ДанныеПоШтрихкодам.Вставить("ВидыПродукции",             Новый Массив);
	ДанныеПоШтрихкодам.Вставить("ДанныеКодовМаркировки",     ИнициализацияТаблицыДанныхКодовМаркировки());
	ДанныеПоШтрихкодам.Вставить("ВложенныеШтрихкоды",        Неопределено);
	ДанныеПоШтрихкодам.Вставить("ДеревоПоДаннымСервиса",     Неопределено);
	ДанныеПоШтрихкодам.Вставить("СведенияОбОрганизациях",    Неопределено);
	ДанныеПоШтрихкодам.Вставить("ПредставленияСтатусовИСМП", Неопределено);
	
	// Ошибки
	ДанныеПоШтрихкодам.Вставить("ЕстьОшибкиВДеревеУпаковок",        Ложь);
	ДанныеПоШтрихкодам.Вставить("ЕстьОшибки",                       Ложь);
	ДанныеПоШтрихкодам.Вставить("ТребуетсяОбновлениеКлючаСессии",   Ложь);
	ДанныеПоШтрихкодам.Вставить("ОшибкаДопустимостиВидовПродукции", Ложь);
	ДанныеПоШтрихкодам.Вставить("ЕстьКодыМаркировкиВводаОстатков",  Ложь);
	ДанныеПоШтрихкодам.Вставить("ТекстОшибки",                      "");
	ДанныеПоШтрихкодам.Вставить("ТребуетсяСопоставление",           Ложь);
	
	// Уточнения
	ДанныеПоШтрихкодам.Вставить("УточнитьУПользователя", Новый Массив);
	
	Возврат ДанныеПоШтрихкодам;
	
КонецФункции

// Иинициализация таблицы данных кода маркировки. В данную таблицу собирается вся информация по введенному штрихкоду.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Описание:
// * ШтрихкодBase64 - Строка - Штрихкод, закодированный по алгоритму BASE64.
// * Штрихкод - Строка - Значение штрихкода.
// * GTIN - Строка - Штрихкод в формате GTIN.
// * EAN - Строка - Штрихкод в формате EAN.
// * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура.
// * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика.
// * Серия - ОпределяемыйТип.СерияНоменклатуры - Серия.
// * ПредставлениеНоменклатуры - Строка - Строковое представление номенклатуры.
// * ВидыПродукцииКодаМаркировки - Массив из ПеречислениеСсылка.ВидыПродукцииИС - список видов продукции кода маркировки.
// * ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции номенклатуры.
// * МаркируемаяПродукция - Булево - Истина, если продукция имеет марку.
// * Идентифицирован - Булево - Истина, если по коду маркировки удалось найти или создать элемент справочника "Штрихкоды упаковок товаров".
// * ТребуетсяСопоставление - Булево - Истина, если по штрихкоду EAN не найдена номенклатура и требуется сопоставить штрихкод номенклатуре.
// * СписокНоменклатуры - Массив из Структура - 
// * Входящий - Булево - Истина, если данный штрихкод был передан для обработки.
// * НайденВоВложенныхУпаковках - Булево - Истина, если переданный входящий штрихкод найден во вложенных упаковках.
// * ЭтоШтрихкодНоменклатуры - Булево - Истина, если введенный штрихкод является штрихкодом номенклатуры.
// * ВидУпаковки - ПеречислениеСсылка.ВидыУпаковокИС - вид упаковки штрихкода.
// * СоставКодаМаркировки - (См. ШтрихкодированиеИССлужебный.РазобратьКодМаркировки).
// * ЭтоКодВводаОстатков - Булево - Истина, если штрихкод является штрихкодом ввода остатков.
// * ОбработатьБезМаркировки - Булево - Истина, если номенклатуру с кодом маркировки требуется обработать без учета марки.
// * АдресДереваУпаковок - Строка - Указатель на временное хранилища дерева упаковок.
// * Количество - Число - количество штрихкодов.
// * ТипУпаковки - ПеречислениеСсылка.ТипыУпаковок - Тип упаковки.
// * ТипШтрихкода - ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода.
// * ТекстОшибки - Строка - текст ошибки обработки штрихкода.
// * ДополнительныеПараметры - Произвольный - дополнительные параметры.
// * ШтрихкодУпаковки - СправочникСсылка.ШтрихкодыУпаковокТоваров - Ссылка на элемент справочника "Штрихкоды упаковок товаров".
Функция ИнициализацияТаблицыДанныхКодовМаркировки() Экспорт
	
	ДанныеКодовМаркировки = Новый ТаблицаЗначений;
	
	ДанныеКодовМаркировки.Колонки.Добавить("ШтрихкодBase64",              Новый ОписаниеТипов("Строка"));
	ДанныеКодовМаркировки.Колонки.Добавить("Штрихкод",                    Новый ОписаниеТипов("Строка"));
	ДанныеКодовМаркировки.Колонки.Добавить("GTIN",                        Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ДанныеКодовМаркировки.Колонки.Добавить("EAN",                         Новый ОписаниеТипов("Строка"));
	ДанныеКодовМаркировки.Колонки.Добавить("Номенклатура",                Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ДанныеКодовМаркировки.Колонки.Добавить("Характеристика",              Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ДанныеКодовМаркировки.Колонки.Добавить("Серия",                       Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ДанныеКодовМаркировки.Колонки.Добавить("ПредставлениеНоменклатуры",   Новый ОписаниеТипов("Строка"));
	ДанныеКодовМаркировки.Колонки.Добавить("ВидыПродукцииКодаМаркировки", Новый ОписаниеТипов("Массив"));
	ДанныеКодовМаркировки.Колонки.Добавить("ВидПродукции",                Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	ДанныеКодовМаркировки.Колонки.Добавить("МаркируемаяПродукция",        Новый ОписаниеТипов("Булево"));
	ДанныеКодовМаркировки.Колонки.Добавить("Идентифицирован",             Новый ОписаниеТипов("Булево"));
	ДанныеКодовМаркировки.Колонки.Добавить("ТребуетсяСопоставление",      Новый ОписаниеТипов("Булево"));
	ДанныеКодовМаркировки.Колонки.Добавить("СписокНоменклатуры",          Новый ОписаниеТипов("Массив"));
	ДанныеКодовМаркировки.Колонки.Добавить("Входящий",                    Новый ОписаниеТипов("Булево"));
	ДанныеКодовМаркировки.Колонки.Добавить("НайденВоВложенныхУпаковках",  Новый ОписаниеТипов("Булево"));
	ДанныеКодовМаркировки.Колонки.Добавить("ЭтоШтрихкодНоменклатуры",     Новый ОписаниеТипов("Булево"));
	ДанныеКодовМаркировки.Колонки.Добавить("ВидУпаковки",                 Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС"));
	ДанныеКодовМаркировки.Колонки.Добавить("СоставКодаМаркировки",        Неопределено);
	ДанныеКодовМаркировки.Колонки.Добавить("ЭтоКодВводаОстатков",         Новый ОписаниеТипов("Булево"));
	ДанныеКодовМаркировки.Колонки.Добавить("СтрокаДерева",                Неопределено);
	ДанныеКодовМаркировки.Колонки.Добавить("ПримечаниеКРазборуШтрихкода", Неопределено);
	ДанныеКодовМаркировки.Колонки.Добавить("РодительскаяУпаковка",        Новый ОписаниеТипов("Строка"));
	
	ДанныеКодовМаркировки.Колонки.Добавить("НоменклатураСопоставленаПоУПД", Новый ОписаниеТипов("Булево"));
	
	//Для отказа от обработанных и необработанных ШК
	ДанныеКодовМаркировки.Колонки.Добавить("ОбработатьБезМаркировки",     Новый ОписаниеТипов("Булево"));
	ДанныеКодовМаркировки.Колонки.Добавить("АдресДереваУпаковок",         Новый ОписаниеТипов("Строка"));
	ДанныеКодовМаркировки.Колонки.Добавить("Количество",                  Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
	ДанныеКодовМаркировки.Колонки.Добавить("ТипУпаковки",                 Новый ОписаниеТипов("ПеречислениеСсылка.ТипыУпаковок"));
	ДанныеКодовМаркировки.Колонки.Добавить("ТипШтрихкода",                Новый ОписаниеТипов("ПеречислениеСсылка.ТипыШтрихкодов"));
	ДанныеКодовМаркировки.Колонки.Добавить("ТекстОшибки",                 Новый ОписаниеТипов("Строка"));
	ДанныеКодовМаркировки.Колонки.Добавить("ДополнительныеПараметры",     Неопределено);
	ДанныеКодовМаркировки.Колонки.Добавить("ШтрихкодУпаковки",            Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	
	ДанныеКодовМаркировки.Индексы.Добавить("Штрихкод");
	ДанныеКодовМаркировки.Индексы.Добавить("EAN");
	
	Возврат ДанныеКодовМаркировки;
	
КонецФункции

// Инициализирует структуру, являющуюся аналогом строки таблицы См. ИнициализацияТаблицыДанныхКодовМаркировки
// Может инициалироваться значением штрихкода, после разбора которого заполняются соответствующие свойства структуры.
// 
// Параметры:
// 	КодМаркировки - Строка - Значение штрихкода.
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции.
// Возвращаемое значение:
// 	Структура - Описание:
// * GTIN - Строка - GTIN
// * ВидУпаковки - ПеречислениеСсылка.ВидыУпаковокИС - Вид упаковки.
// * ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции.
// * Штрихкод - Строка - Значение штрихкода.
Функция НоваяСтруктураОбработкиШтрихкода(КодМаркировки = Неопределено, ВидПродукции = Неопределено) Экспорт
	
	СтруктураЗначения = Новый Структура();
	СтруктураЗначения.Вставить("Штрихкод");
	СтруктураЗначения.Вставить("ТипШтрихкода");
	СтруктураЗначения.Вставить("ВидПродукции");
	СтруктураЗначения.Вставить("ВидУпаковки");
	СтруктураЗначения.Вставить("GTIN");
	
	СтруктураЗначения.Вставить("НаименованиеВладельца");
	СтруктураЗначения.Вставить("НаименованиеПродукции");
	СтруктураЗначения.Вставить("СоставКодаМаркировки");
	
	Если ЗначениеЗаполнено(ВидПродукции) Тогда
		СтруктураЗначения.ВидПродукции = ВидПродукции;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодМаркировки) Тогда
		ПримечаниеКРезультатуРазбора = Неопределено;
		ДанныеРазбора = ШтрихкодированиеИССлужебный.РазобратьКодМаркировки(
			КодМаркировки, ВидПродукции, ПримечаниеКРезультатуРазбора);
		Если ДанныеРазбора = Неопределено Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru ='Не удалось разобрать код маркировки: %1
				          |%2'"),
				СтрЗаменить(КодМаркировки, Символ(29), "<GS>"),
				ПримечаниеКРезультатуРазбора.ТекстОшибки);
		КонецЕсли;
		
		СтруктураЗначения.Штрихкод             = ДанныеРазбора.НормализованныйКодМаркировки;
		СтруктураЗначения.ТипШтрихкода         = ДанныеРазбора.ТипШтрихкода;
		СтруктураЗначения.ВидУпаковки          = ДанныеРазбора.ВидУпаковки;
		СтруктураЗначения.СоставКодаМаркировки = ДанныеРазбора.СоставКодаМаркировки;
		
		Если ДанныеРазбора.СоставКодаМаркировки.Свойство("GTIN") Тогда
			СтруктураЗначения.GTIN             = ДанныеРазбора.СоставКодаМаркировки.GTIN;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураЗначения;
	
КонецФункции

// Выполняет поиск акцизных марок в дереве упаковок.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок.
//  ЗначенияШтрихкодов - Массив - Массив найденных штрихкодов.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Найденные штрихкоды.
Функция ЗначенияШтрихкодовДереваУпаковок(ДеревоУпаковок, ЗначенияШтрихкодов = Неопределено) Экспорт 
	
	Если ЗначенияШтрихкодов = Неопределено Тогда
		Результат = Новый Массив;
	Иначе
		Результат = ЗначенияШтрихкодов;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		ЗначенияШтрихкодовДереваУпаковок(СтрокаДерева, Результат);
		
		Если Не ПустаяСтрока(СтрокаДерева.Штрихкод) Тогда
			Результат.Добавить(СтрокаДерева.Штрихкод);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Формирует структура параметров, необходимую для выполнения действия и заполняет ее
// (См. ВыполнитьДействие).
//
// Параметры:
//  РезультатВыбора - Произвольный - Результат уточнения информации у пользователя
//  РезультатОбработкиШтрихкода - Структура - См. ИнициализироватьРезультатОбработкиШтрихкода
//  КэшированныеЗначения - Структура - Содержит поля кэшируемых значений
// Возвращаемое значение:
//  Структура - Описание - Заполняет структуру параметров значениями
Функция ИнициализироватьПараметрыОбработкиВыбора(РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения) Экспорт

	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("РезультатВыбора",             РезультатВыбора);
	ПараметрыВыбора.Вставить("РезультатОбработкиШтрихкода", РезультатОбработкиШтрихкода);
	ПараметрыВыбора.Вставить("КэшированныеЗначения",        КэшированныеЗначения);
	
	Возврат ПараметрыВыбора;

КонецФункции

// Выполняет действие после уточнения информации у пользователя
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо обработать штрихкоды.
//  Действие - Строка - Идентификатор необходимого действия.
//  Параметры - Структура - См. ИнициализироватьПараметрыОбработкиВыбора
// Возвращаемое значение:
//  Структура, Неопределено - Результат выполнения действия.
Функция ВыполнитьДействие(Форма, Действие, Параметры) Экспорт
	
	Если Действие = "ОбработатьУточнениеДанных" Тогда
		
		РезультатВыбора             = Параметры.РезультатВыбора;
		РезультатОбработкиШтрихкода = Параметры.РезультатОбработкиШтрихкода;
		КэшированныеЗначения        = Параметры.КэшированныеЗначения;
		РезультатВыбора = ОбработатьУточнениеДанных(Форма, РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
		
		Возврат РезультатВыбора;
		
	КонецЕсли;
	
	РезультатВыполнения = Неопределено;
	ВидыПродукции = Параметры.РезультатОбработкиШтрихкода.ВидыПродукции;
	Если ПрисутствуетАлкогольнаяПродукция(ВидыПродукции) Тогда
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		РезультатВыполнения = МодульШтрихкодированиеЕГАИС.ВыполнитьДействие(Форма, Действие, Параметры);
	КонецЕсли;
	
	Если ПрисутствуетТабачнаяПродукция(ВидыПродукции) Тогда
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		РезультатВыполнения = МодульШтрихкодированиеМОТП.ВыполнитьДействие(Форма, Действие, Параметры);
	КонецЕсли;
	
	Если ПрисутствуетПродукцияИСМП(ВидыПродукции) Тогда
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		РезультатВыполнения = МодульШтрихкодированиеИСМПСлужебный.ВыполнитьДействие(Форма, Действие, Параметры);
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Структура, описывающая результат обработки штрихкода.
// 
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ДанныеШтрихкода - Неопределено, Структура - Результат анализа штрихкода, все данные, которые удалось по нему собрать.
// Возвращаемое значение:
//  Структура - Описание:
//   * ВидыПродукции - Массив - Массив видов продукции ИС.
//   * ИзмененныеСтроки - Массив - Строки документа, которые были изменены в процессе обработки штрихкодов.
//   * ДобавленныеСтроки - Массив - Строки документа, которые были добавлены в процессе обработки штрихкодов.
//   * ОшибкаШтрихкодУжеДобавлен - Булево - Признак, указывающий, что обрабатываемый штрихкод был добавлен в документ ранее.
//   * ОшибкаВидаПродукции - Булево - Признак, указывающий, что штрихкод относится к виду продукции, который не поддерживается.
//   * ДополнительныеПараметры - Неопределено -
//   * ЕстьОшибкиВДеревеУпаковок - Булево - Признак, указывающий, что где-то в дереве упаковок присутствует ошибка.
//   * АдресДереваУпаковок - Строка - Адрес временного хранилища, где хранится дерево упаковок.
//   * ТекстОшибки - Строка - Текст ошибки, на которую стоит обратить внимание.
//   * ТипУпаковки - ПеречислениеСсылка.ТипыУпаковок - Тип упаковки.
//   * ТипШтрихкода - ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода.
//   * Штрихкод - Строка - Значение штрихкода.
//   * ЕстьОшибки - Булево - Признак, указывающий, что есть ошибки в данных штрихкода.
//   * ШтрихкодыПродукцииДляСопоставления - Неопределено, Массив - Массив неизвестных штрихкодов EAN, которые необходимо сопоставить перед обработкой.
//   * ТребуетсяСопоставлениеНоменклатуры - Булево - Признак, указывающий на то, что перед обработкой необходимо сопоставить номенклатуру штрихкодам EAN.
//   * ИсходныеДанные - Произвольный - Данные, которые поступили на вход для обработки.
//   * ТребуетсяОбработкаШтрихкода - Булево - Признак, указывающий, что данные штрихкода не удалось обработать по стандартному алгоритму.
//   * ТребуетсяВыборНоменклатуры - Булево - Признак, указывающий на необходимость выбора номенклатуры.
//   * ПараметрыВыбораНоменклатуры - Структура - Параметры, участвующие в отборе при выборе номенклатуры в диалоговом окне.
//   * ДанныеШтрихкода - Структура -
Функция ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования = Неопределено, ДанныеШтрихкода = Неопределено) Экспорт
	
	ВидыПродукции = Неопределено;
	
	Если ПараметрыСканирования <> Неопределено Тогда
		ВидыПродукции = ПараметрыСканирования.ДопустимыеВидыПродукции;
	КонецЕсли;
	
	Если ДанныеШтрихкода <> Неопределено И ЗначениеЗаполнено(ДанныеШтрихкода.ВидПродукции) Тогда
		ВидыПродукции = Новый Массив;
		ВидыПродукции.Добавить(ДанныеШтрихкода.ВидПродукции);
	КонецЕсли;
	
	РезультатОбработкиШтрихкода = Новый Структура;
	
	// Для выбора значений на клиенте.
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяСопоставлениеНоменклатуры", Ложь);
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяВыборНоменклатуры",         Ложь);
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяВыборСерии",                Ложь);
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяОбработкаШтрихкода",        Ложь);
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяУточнениеДанных",           Ложь);
	РезультатОбработкиШтрихкода.Вставить("ОткрытьФормуВводаКодаМаркировки",    Ложь);
	РезультатОбработкиШтрихкода.Вставить("ДанныеШтрихкода",                    ДанныеШтрихкода);
	РезультатОбработкиШтрихкода.Вставить("ПараметрыВыбораНоменклатуры",        Новый Структура);
	РезультатОбработкиШтрихкода.Вставить("ИсходныеДанные",                     Неопределено);
	РезультатОбработкиШтрихкода.Вставить("ШтрихкодыПродукцииДляСопоставления", Новый Массив);
	РезультатОбработкиШтрихкода.Вставить("ПараметрыУточненияДанных",           Неопределено);
	РезультатОбработкиШтрихкода.Вставить("ИспользоватьОбработкуНаКлиенте",     Ложь);
	РезультатОбработкиШтрихкода.Вставить("ОбработкаШтрихкодаБезМарки",         Ложь);
	
	// Для вывода сообщения об ошибке.
	РезультатОбработкиШтрихкода.Вставить("Штрихкод",     "");
	РезультатОбработкиШтрихкода.Вставить("ТипШтрихкода", Неопределено);
	РезультатОбработкиШтрихкода.Вставить("ТипУпаковки",  Неопределено);
	РезультатОбработкиШтрихкода.Вставить("ТекстОшибки",  "");
	
	РезультатОбработкиШтрихкода.Вставить("ЕстьОшибки",                       Ложь);
	РезультатОбработкиШтрихкода.Вставить("ЕстьОшибкиВДеревеУпаковок",        Ложь);
	РезультатОбработкиШтрихкода.Вставить("ОбщаяОшибка",                      Ложь);
	РезультатОбработкиШтрихкода.Вставить("ОшибкаШтрихкодУжеДобавлен",        Ложь);
	РезультатОбработкиШтрихкода.Вставить("ОшибкаДопустимостиВидовПродукции", Ложь);
	
	РезультатОбработкиШтрихкода.Вставить("АдресДереваУпаковок",     "");
	РезультатОбработкиШтрихкода.Вставить("ДополнительныеПараметры", Неопределено);
	
	// Для обработки строк табличной части.
	РезультатОбработкиШтрихкода.Вставить("ДобавленныеСтроки", Новый Массив);
	РезультатОбработкиШтрихкода.Вставить("ИзмененныеСтроки",  Новый Массив);
	
	РезультатОбработкиШтрихкода.Вставить("ВидыПродукции",     Новый Массив);
	
	Если ВидыПродукции = Неопределено Тогда
		Возврат РезультатОбработкиШтрихкода;
	КонецЕсли;
	
	Если ДанныеШтрихкода <> Неопределено Тогда
		РезультатОбработкиШтрихкода.ТипУпаковки = ДанныеШтрихкода.ТипУпаковки;
	КонецЕсли;
	
	РезультатОбработкиШтрихкода.ВидыПродукции = ВидыПродукции;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС")
		И ПрисутствуетАлкогольнаяПродукция(ВидыПродукции)Тогда
		
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		МодульШтрихкодированиеЕГАИС.ДополнитьСвойстваРезультатаОбработкиШтрихкода(РезультатОбработкиШтрихкода, ДанныеШтрихкода);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		
		Если ПрисутствуетТабачнаяПродукция(ВидыПродукции) Тогда
			МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
			МодульШтрихкодированиеМОТП.ДополнитьСвойстваРезультатаОбработкиШтрихкода(РезультатОбработкиШтрихкода, ДанныеШтрихкода);
		КонецЕсли;
		
		Если ПрисутствуетПродукцияИСМП(ВидыПродукции) Тогда
			МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
			МодульШтрихкодированиеИСМПСлужебный.ДополнитьСвойстваРезультатаОбработкиШтрихкода(РезультатОбработкиШтрихкода, ДанныеШтрихкода);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

// Инициализирует структуру, которая будет содержать в себе всю собранную и проанализированную информацию 
// по значению штрихкода.
// 
// Параметры:
//  ПараметрыСканирования - (См. ПараметрыСканирования).
// Возвращаемое значение:
//  Структура - Информация по штрихкоду:
//   * МаркируемаяПродукция - Булево - Истина, если номенклатура данных штрихкода является маркируемой.
//   * ВидыПродукции - Массив - Коллекция элементов перечисления видов продукции ИС, которые были идентифицированы по
// данным штрихкода.
//   * ДополнительныеПараметры - Произвольный - дополнительные параметры.
//   * ШтрихкодУпаковки - СправочникСсылка.ШтрихкодыУпаковокТоваров - ссылка на элемент справочника.
//   * Штрихкод - Строка - Значение штрихкода.
//   * Упаковка - СправочникСсылка.ШтрихкодыУпаковокТоваров - ссылка на элемент справочника верхнего уровня.
//   * ТипШтрихкода - ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода маркированного товара.
//   * ТипУпаковки - ПеречислениеСсылка.ТипыУпаковок - Тип упаковки маркированного товара.
//   * ТекстОшибки - Строка - описание ошибки.
//   * МаркированныеТовары - Массив - коллекция товаров, подлежащих маркировке.
//   * Количество - Число - количество единиц маркируемой продукции.
//   * ВложенныеШтрихкоды - (См. ИнициализацияВложенныхШтрихкодов).
//   * ПредставлениеНоменклатуры - Строка - Строковое представление номенклатуры.
//   * Серия - ОпределяемыйТип.СерияНоменклатуры - Серия номенклатуры.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика.
//   * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура.
Функция ИнициализироватьДанныеШтрихкода(ПараметрыСканирования = Неопределено) Экспорт
	
	ТаблицаМаркированныеТовары = ИнициализацияТаблицыДанныхКодовМаркировки();
	
	Если ДопустимаАлкогольнаяПродукция(ПараметрыСканирования) Тогда
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		МодульШтрихкодированиеЕГАИС.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(ТаблицаМаркированныеТовары);
	КонецЕсли;
	
	Если ДопустимаТабачнаяПродукция(ПараметрыСканирования) Тогда
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеМОТП.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(ТаблицаМаркированныеТовары);
	КонецЕсли;

	Если ДопустимаПродукцияИСМП(ПараметрыСканирования) Тогда
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(ТаблицаМаркированныеТовары);
	КонецЕсли;
	
	ЗначенияПоУмолчанию = ТаблицаМаркированныеТовары.Добавить();
	
	ДанныеШтрихкода = Новый Структура;
	Для Каждого Колонка Из ТаблицаМаркированныеТовары.Колонки Цикл
		ДанныеШтрихкода.Вставить(Колонка.Имя, ЗначенияПоУмолчанию[Колонка.Имя]);
	КонецЦикла;
	
	Возврат ДанныеШтрихкода;
	
КонецФункции

// Формирует структуру обязательных колонок для таблицы - Маркированные товары, путем добавления к структуре общих
// колонок. (См. ОбщиеКолонкиКоллекцийВложенныхШтрихкодов).
//
// Параметры:
// Возвращаемое значение:
//  Структура - Описание:
//   * СтрокаДерева - СтрокаДереваЗначений - строка дерева упаковок.
Функция КолонкиТаблицыМаркированныеТовары() Экспорт
	
	КоллекцияОбязательныхКолонок = ОбщиеКолонкиКоллекцийВложенныхШтрихкодов();
	КоллекцияОбязательныхКолонок.Вставить("СтрокаДерева");
	
	Возврат КоллекцияОбязательныхКолонок;
	
КонецФункции

// Формирует структуру обязательных колонок для дерева значений - Дерево упаковок, путем добавления к структуре общих
// колонок. (См. ОбщиеКолонкиКоллекцийВложенныхШтрихкодов).
//
// Параметры:
// Возвращаемое значение:
//  Структура - Описание:
//   * ТекстОшибки - Строка - текст ошибки в строке дерева.
//   * ЕстьОшибки - Булево - Истина, если есть ошибки в строке дерева.
//   * ХешСумма - Неопределено - Хэш сумма упаковки.
//   * ТипУпаковки - Неопределено - Тип упаковки.
Функция КолонкиДереваУпаковок() Экспорт
	
	КоллекцияОбязательныхКолонок = ОбщиеКолонкиКоллекцийВложенныхШтрихкодов();
	
	КоллекцияОбязательныхКолонок.Вставить("ТипУпаковки",  Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("ХешСумма",     Новый ОписаниеТипов("Строка"));
	КоллекцияОбязательныхКолонок.Вставить("ЕстьОшибки",   Новый ОписаниеТипов("Булево"));
	КоллекцияОбязательныхКолонок.Вставить("ТекстОшибки",  ОбщегоНазначения.ОписаниеТипаСтрока(300));
	КоллекцияОбязательныхКолонок.Вставить("GTIN",         Новый ОписаниеТипов("Строка"));
	
	Возврат КоллекцияОбязательныхКолонок;
	
КонецФункции

// Инициализирует таблицу значений - Маркированные товары.
//
// Параметры:
// Возвращаемое значение:
//  ТаблицаЗначений - Состав колонок таблицы определен в процедуре КолонкиТаблицыМаркированныеТовары.
Функция ИнициализироватьТаблицуМаркированныеТовары() Экспорт
	
	КолонкиТаблицы = КолонкиТаблицыМаркированныеТовары();
	
	МаркированныеТовары = Новый ТаблицаЗначений;
	
	Для Каждого КлючЗначение Из КолонкиТаблицы Цикл
		
		МаркированныеТовары.Колонки.Добавить(КлючЗначение.Ключ, КлючЗначение.Значение);
		
	КонецЦикла;
	
	Возврат МаркированныеТовары;
	
КонецФункции

// Инициализирует дерево значений - Дерево упаковок.
//
// Параметры:
// Возвращаемое значение:
//  ДеревоЗначений - состав колонок определяется в КолонкиДереваУпаковок.
Функция ИнициализироватьДеревоУпаковок() Экспорт
	
	КолонкиДереваУпаковок = КолонкиДереваУпаковок();
	ДеревоУпаковок = Новый ДеревоЗначений;
	
	Для Каждого КлючЗначение Из КолонкиДереваУпаковок Цикл
		
		ДеревоУпаковок.Колонки.Добавить(КлючЗначение.Ключ, КлючЗначение.Значение)
		
	КонецЦикла;
	
	Возврат ДеревоУпаковок;
	
КонецФункции

// Выполняет обработку данных штрихкода для единицы маркируемой продукции. Обработка происходит в модуле соответствующей
// виду продукции подсистеме.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма документа, обработки.
//  ДанныеШтрихкода - См. ИнициализироватьДанныеШтрихкода
//  ПараметрыСканирования - См. ПараметрыСканирования
// Возвращаемое значение:
//   См. ИнициализироватьРезультатОбработкиШтрихкода
Функция РезультатОбработкиШтрихкодаМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	РезультатДобавления = Неопределено;
	
	Если ШтрихкодированиеИСКлиентСервер.ТребуетсяСброситьСохраненныйВыбор(ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции, ДанныеШтрихкода) Тогда
		ШтрихкодированиеИСКлиентСервер.ОбработатьСохраненныйВыборДанныхПоМаркируемойПродукции(Форма, Неопределено, Ложь);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС")
		И ДанныеШтрихкода.ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
		
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		РезультатДобавления = МодульШтрихкодированиеЕГАИС.РезультатОбработкиШтрихкодаМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования);
		
	ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП")
		И ДанныеШтрихкода.ВидПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
		
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		РезультатДобавления = МодульШтрихкодированиеМОТП.РезультатОбработкиКодаМаркировки(ДанныеШтрихкода, ПараметрыСканирования, Неопределено, Форма);
		
	ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП")
		И ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеШтрихкода.ВидПродукции) Тогда
		
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		РезультатДобавления = МодульШтрихкодированиеИСМПСлужебный.РезультатОбработкиКодаМаркировки(ДанныеШтрихкода, ПараметрыСканирования, Неопределено, Форма);
		
	Иначе // Штрихкод не относящийся к библиотеке
		
		РезультатДобавления = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
		РезультатДобавления.ДанныеШтрихкода = ДанныеШтрихкода;
		РезультатДобавления.ИсходныеДанные = Новый Структура("Штрихкод, Количество", ДанныеШтрихкода.Штрихкод, ДанныеШтрихкода.Количество);
		ЗаполнитьЗначенияСвойств(РезультатДобавления, ДанныеШтрихкода);
		РезультатДобавления.ОбработкаШтрихкодаБезМарки = ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура);
		РезультатДобавления.ТребуетсяОбработкаШтрихкода = Истина;
		
	КонецЕсли;
	
	Возврат РезультатДобавления;
	
КонецФункции

// Сценарий: данные по штрихкоду были получены ранее (групповая обработка), а пользователь выполнил 
//   уточнение данных с сохранением выбора. Требуется применить сохраненный выбор автоматически.
//
Функция РезультатОбработкиШтрихкодаМаркируемойПродукцииПослеУточнения(Форма, ДанныеШтрихкода, ПараметрыСканирования)
	
	ДанныеШтрихкодаВКоллекции = Новый Массив;
	ШтрихкодированиеИСКлиентСервер.ОбновитьНеобходимостьУточненияДанных(ДанныеШтрихкода);
	ДанныеШтрихкодаВКоллекции.Добавить(ДанныеШтрихкода);
	ДанныеПоШтрихкодам = Новый Структура("ДанныеКодовМаркировки", ДанныеШтрихкодаВКоллекции);
	
	СтрокиДляСохраненияКодовМаркировки = Новый Соответствие;
	
	ОтметитьНовыеШтрихкодыУпаковок(ДанныеПоШтрихкодам, СтрокиДляСохраненияКодовМаркировки);
	ЗаполнитьДаныеПоШтрихкодамНаОснованииСохраненногоВыбора(ДанныеПоШтрихкодам, ПараметрыСканирования, СтрокиДляСохраненияКодовМаркировки);
	ОбновитьШтрихкодыУпаковок(СтрокиДляСохраненияКодовМаркировки, ПараметрыСканирования);
	
	Возврат РезультатОбработкиШтрихкодаМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования);
	
КонецФункции

// Формирует таблицу значений данных по штрихкодам EAN.
//
// Параметры:
//  ШтрихкодыEAN - Массив - Штрихкоды EAN.
// Возвращаемое значение:
//  ТаблицаЗначений - Описание:
//   * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика.
//   * ЗначениеШтрихкодаEAN - Строка - Штрихкод.
//   * ПредставлениеНоменклатуры - Строка - Представление номенклатуры.
//   * ВидПродукции -ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
//   * МаркируемаяПродукция - Булево - Истина, если продукция является маркируемая.
Функция ДанныеПоШтрихкодамEAN(ШтрихкодыEAN) Экспорт
	
	ДанныеПоШтрихкодамEAN = Новый ТаблицаЗначений;
	
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("Номенклатура",              Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("Характеристика",            Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("Серия",                     Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ШтрихкодEAN",               Новый ОписаниеТипов("Строка"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ПредставлениеНоменклатуры", Новый ОписаниеТипов("Строка"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ВидПродукции",              Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("МаркируемаяПродукция",      Новый ОписаниеТипов("Булево"));
	
	ПолучатьИнформациюПоШтрихкодам = Ложь;
	Для Каждого ШтрихкодEAN Из ШтрихкодыEAN Цикл
		
		НоваяСтрока = ДанныеПоШтрихкодамEAN.Добавить();
		НоваяСтрока.ШтрихкодEAN = ШтрихкодEAN;
		ПолучатьИнформациюПоШтрихкодам = Истина;
		
	КонецЦикла;
	
	Если ПолучатьИнформациюПоШтрихкодам Тогда
		
		ШтрихкодированиеИСПереопределяемый.ПриЗаполненииИнформацииПоШтрихкодамEAN(ДанныеПоШтрихкодамEAN);
		
		ИндексСтроки = ДанныеПоШтрихкодамEAN.Количество()-1;
		Пока ИндексСтроки >= 0 Цикл
		
			ДанныеСтроки = ДанныеПоШтрихкодамEAN[ИндексСтроки];
			Если Не ЗначениеЗаполнено(ДанныеСтроки.Номенклатура) Тогда
				ДанныеПоШтрихкодамEAN.Удалить(ДанныеСтроки);
			КонецЕсли;
			
			ИндексСтроки = ИндексСтроки - 1;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеПоШтрихкодамEAN;
	
КонецФункции

// Выполняет полную проверку на ошибки данных штрихкодов с учетом индивидуальных проверок по видам продукции ИС.
//
// Параметры:
//  ДанныеПоШтрихкодам - См. ИнициализацияДанныхПоШтрихкодам
//  ПараметрыСканирования - См. ПараметрыСканирования
// Возвращаемое значение:
//  Булево - Истина, если есть ошибки в данных.
Функция ВыполнитьПроверкуНаОшибкиДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	Если ДанныеПоШтрихкодам.ТребуетсяСопоставление Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ДанныеПоШтрихкодам.ЕстьОшибки Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	
	ПроверитьНаУжеДобавленныеДанныеВДокумент(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
	ПроверитьНаДублиКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
	ПроверитьНаДопустимостьОбработкиВидовПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
	ПроверитьНаСоответствиеНоменклатурыВидуПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
	ПроверитьНаСоответствиеДокументуОснованию(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
	ШтрихкодированиеИСПереопределяемый.ПриПроверкеДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
	
	Если Не ЕстьОшибки Тогда
		
		ВидыПродукции = ДанныеПоШтрихкодам.ВидыПродукции;
		
		Если ПрисутствуетАлкогольнаяПродукция(ВидыПродукции) Тогда
			МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
			МодульШтрихкодированиеЕГАИС.ВыполнитьПроверкуНаОшибки(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
		КонецЕсли;
		
		Если ПрисутствуетТабачнаяПродукция(ВидыПродукции) Тогда
			МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
			МодульШтрихкодированиеМОТП.ВыполнитьПроверкуНаОшибки(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
		КонецЕсли;
		
		Если ПрисутствуетПродукцияИСМП(ВидыПродукции) Тогда
			МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
			МодульШтрихкодированиеИСМПСлужебный.ВыполнитьПроверкуНаОшибки(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьОшибки И ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		
		ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = Истина;
		
		ЗаполнитьИнформациюПоОшибкеВДеревеУпаковок(ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок, ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
		
	КонецЕсли;
	
	Возврат ЕстьОшибки;
	
КонецФункции

Процедура ЗаполнитьИнформациюПоОшибкеВДеревеУпаковок(СтрокаДереваУпаковок, ДанныеКодовМаркировки)
	
	Для Каждого СтрокаДерева Из СтрокаДереваУпаковок.Строки Цикл
		
		НайденнаяСтрока = ДанныеКодовМаркировки.Найти(СтрокаДерева.Штрихкод, "Штрихкод");
		Если НайденнаяСтрока <> Неопределено Тогда
			Если Не ПустаяСтрока(НайденнаяСтрока.ТекстОшибки) Тогда
				СтрокаДерева.ТекстОшибки = НайденнаяСтрока.ТекстОшибки;
				СтрокаДерева.ЕстьОшибки  = Истина;
			ИначеЕсли ПустаяСтрока(НайденнаяСтрока.ТекстОшибки) И Не ПустаяСтрока(СтрокаДерева.ТекстОшибки) Тогда
				НайденнаяСтрока.ТекстОшибки = СтрокаДерева.ТекстОшибки;
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьИнформациюПоОшибкеВДеревеУпаковок(СтрокаДерева, ДанныеКодовМаркировки);
		
	КонецЦикла;
	
КонецПроцедуры

// Получение информации по коллекции штрихкодов
// 
// Параметры:
//  Штрихкоды - Массив - коллекция штрихкодов
//  ПараметрыСканирования - См. ПараметрыСканирования
//  КэшированныеЗначения - Структура - Содержит закэшированные значения
// Возвращаемое значение:
//  См. ИнициализацияДанныхПоШтрихкодам
Функция ДанныеПоШтрихкодам(Штрихкоды, ПараметрыСканирования, КэшированныеЗначения = Неопределено) Экспорт
	
	ДанныеПоШтрихкодам = ИнициализацияДанныхПоШтрихкодам();
	ДанныеКодовМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
	
	ПодготовитьДанныеКодовМаркировкиДляОбработки(ДанныеКодовМаркировки, Штрихкоды, ПараметрыСканирования);
	
	// Заполнение массива видов продукции штрихкодов. При выполнении проверок
	// можно будет использовать ПрисутствуетТабачнаяПродукция(ВидыПродукции)
	ВидыПродукцииНоменклатуры = ДанныеКодовМаркировки.ВыгрузитьКолонку("ВидПродукции");
	ДанныеПоШтрихкодам.ВидыПродукции = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВидыПродукцииНоменклатуры);
	
	ЗаполнитьДанныеПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Возврат ДанныеПоШтрихкодам;
	
КонецФункции

Процедура ЗаполнитьДанныеПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования, Форма = Неопределено) Экспорт
	
	Если ДанныеПоШтрихкодам.ТребуетсяСопоставление Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеИзвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, Неопределено, ПараметрыСканирования);
	ЗаполнитьДанныеИзвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Если Не ВидыПродукцииПоддерживаются(ДанныеПоШтрихкодам.ВидыПродукции, ПараметрыСканирования) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнитьДанныеШтрихкодовСпецификойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Если ДанныеПоШтрихкодам.ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеНеизвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования);
	ЗаполнитьДанныеНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования);
	ЗаполнитьПредставленияДанных(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Если ДанныеПоШтрихкодам.ЕстьОшибки Или ДанныеПоШтрихкодам.ТребуетсяСопоставление Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ВидыПродукцииПоддерживаются(ДанныеПоШтрихкодам.ВидыПродукции, ПараметрыСканирования) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиДляСохраненияКодовМаркировки = Новый Соответствие;
	
	ОтметитьНовыеШтрихкодыУпаковок(ДанныеПоШтрихкодам, СтрокиДляСохраненияКодовМаркировки);
	ЗаполнитьПоДаннымУточнения(ДанныеПоШтрихкодам, ПараметрыСканирования, СтрокиДляСохраненияКодовМаркировки);
	ЗаполнитьДаныеПоШтрихкодамНаОснованииСохраненногоВыбора(ДанныеПоШтрихкодам, ПараметрыСканирования, СтрокиДляСохраненияКодовМаркировки);
	
	ОбновитьШтрихкодыУпаковок(СтрокиДляСохраненияКодовМаркировки, ПараметрыСканирования);
	ЗаполнитьПоДокументуИОснованию(ДанныеПоШтрихкодам, ПараметрыСканирования, Форма);
	
	ПоместитьДеревоУпаковокВоВременноеХранилище(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
КонецПроцедуры

//Проверяет необходимость уточнения данных по штрихкодам у пользователя.
//   Здесь будут собраны все проверки из других источников.
//
// Параметры:
//  ДанныеПоШтрихкодам - см. ИнициализацияДанныхПоШтрихкодам.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ПроверитьНеобходимостьУточненияДанныхУПользователя(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ДанныеДокументаОснования = Неопределено;
	Если ИнтеграцияИС.СерииИспользуются() Тогда
		СформироватьДанныеДокументаОснования(ПараметрыСканирования);
		Если ЭтоАдресВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования) Тогда
			ДанныеДокументаОснования = ПолучитьИзВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если Не СтрокаДанных.Входящий Тогда
			Продолжить;
		ИначеЕсли Не ИнтеграцияИСКлиентСервер.ЭтоУпаковкаПоВиду(СтрокаДанных.ВидУпаковки) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДанных.СтрокаДерева <> Неопределено
			И ПроверитьНеобходимостьУточнения(СтрокаДанных.СтрокаДерева, ПараметрыСканирования, ДанныеДокументаОснования) Тогда
			ДанныеПоШтрихкодам.УточнитьУПользователя.Добавить(СтрокаДанных.Штрихкод);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//Проверяет необходимость уточнения кода маркировки в составе упаковки, общее
//   * Проверка заполднения номенклатуры.
//   * Проверка заполнения серии (если она указана в документе-основании).
//   * Запуск специфичных проверок по подсистемам.
//
// Параметры:
//   СтрокаДерева - СтрокаДереваЗначений - проверяемый разобранный штрихкод в составе упаковки.
//   ПараметрыСканирования - см. ШтрихкодированиеИСКлиент.ПараметрыСканирования
//   ДанныеДокументаОснования - Неопределено, ТаблицаЗначений - данные документа-основания для проверки указания серий.
//
// Возвращаемое значение:
//   Булево - по проверяемой упаковке требуется уточнение данных.
//
Функция ПроверитьНеобходимостьУточнения(СтрокаДерева, ПараметрыСканирования, ДанныеДокументаОснования)
	
	ТребуетсяУточнение = Ложь;
	Для Каждого ВложенныйЭлемент Из СтрокаДерева.Строки Цикл
		ТребуетсяУточнение = ТребуетсяУточнение Или ПроверитьНеобходимостьУточнения(ВложенныйЭлемент, ПараметрыСканирования, ДанныеДокументаОснования);
	КонецЦикла;
	
	Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
			ТребуетсяУточнение = Истина;
		ИначеЕсли Не ЗначениеЗаполнено(СтрокаДерева.Серия) И ДанныеДокументаОснования<>Неопределено Тогда
			СтрокиДокументаОснования = ДанныеДокументаОснования.НайтиСтроки(
				Новый Структура("Номенклатура,Характеристика", СтрокаДерева.Номенклатура, СтрокаДерева.Характеристика));
			Если СтрокиДокументаОснования.Количество() > 1 Тогда
				ТребуетсяУточнение = Истина;
			ИначеЕсли СтрокиДокументаОснования.Количество() = 1
				И ЗначениеЗаполнено(СтрокиДокументаОснования[0].Серия)
				И ЗначениеЗаполнено(СтрокаДерева.ШтрихкодУпаковки) Тогда
			
				Серия = СтрокиДокументаОснования[0].Серия;
				СтрокаДерева.Серия = Серия;
				
				НовыеРеквизиты = Новый Структура;
				НовыеРеквизиты.Вставить("Серия", Серия);
			
				Справочники.ШтрихкодыУпаковокТоваров.ИзменитьШтрихкодУпаковки(
					СтрокаДерева.ШтрихкодУпаковки, НовыеРеквизиты);
				
			КонецЕсли;
		КонецЕсли;
		
		Если Не ТребуетсяУточнение Тогда
			Если ИнтеграцияИСКлиентСервер.ВидыПродукцииИСМП().Найти(СтрокаДерева.ВидПродукции)<>Неопределено Тогда
				ТребуетсяУточнение = МодульСпецификиИСМП().ПроверитьНеобходимостьУточнения(СтрокаДерева, ПараметрыСканирования);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТребуетсяУточнение;
	
КонецФункции

#Область МодулиСпецифики

Функция МодульСпецификиИСМП()
	Возврат ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
КонецФункции

#КонецОбласти

// Проверяет значения массива ВидыПродукции на вхождение допустимых видов продукции параметров сканирования.
//
// Параметры:
//  ВидыПродукции - Массив - Коллекция видов продукции ИС.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Булево - Истина, если каждый элемент массива ВидыПродукции присутствует в допустимых видах продукции.
Функция ВидыПродукцииПоддерживаются(ВидыПродукции, ПараметрыСканирования) Экспорт
	
	ВидыПродукцииПоддерживаются = Истина;
	
	Для Каждого ВидПродукции Из ВидыПродукции Цикл
		
		Если Не ЗначениеЗаполнено(ВидПродукции) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(ВидПродукции) = Неопределено Тогда
			ВидыПродукцииПоддерживаются = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВидыПродукцииПоддерживаются;
	
КонецФункции

// Дополняет данные штрихкодов специфичными данными, характерными для каждого вида продукции ИС
//
// Параметры:
//  ДанныеПоШтрихкодам - См. ИнициализацияДанныхПоШтрихкодам
//  ПараметрыСканирования - См. ПараметрыСканирования
Процедура ДополнитьДанныеШтрихкодовСпецификойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	Если ДанныеПоШтрихкодам = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВидыПродукции = ДанныеПоШтрихкодам.ВидыПродукции;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС")
		И ПрисутствуетАлкогольнаяПродукция(ВидыПродукции) Тогда
		
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		МодульШтрихкодированиеЕГАИС.ДополнитьДанныеПоШтрихкодамСпецификой(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		
		Если ПрисутствуетТабачнаяПродукция(ВидыПродукции) Тогда
			МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
			МодульШтрихкодированиеМОТП.ДополнитьДанныеПоШтрихкодамСпецификой(ДанныеПоШтрихкодам, ПараметрыСканирования);
		КонецЕсли;
		
		Если ПрисутствуетПродукцияИСМП(ВидыПродукции) Тогда
			МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
			МодульШтрихкодированиеИСМПСлужебный.ДополнитьДанныеПоШтрихкодамСпецификой(ДанныеПоШтрихкодам, ПараметрыСканирования);
		КонецЕсли;
		
	КонецЕсли;
	
	// Дозаполнение МРЦ, ГоденДо и т.п. в данных кодов маркировки по составу кода маркировки
	НаличиеКолонокСоставаКодаМаркировкиВДанных = Новый Соответствие;
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		Если СтрокаДанных.СоставКодаМаркировки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из СтрокаДанных.СоставКодаМаркировки Цикл
			
			ИмяСвойства = КлючИЗначение.Ключ;
			
			ЕстьСвойство = НаличиеКолонокСоставаКодаМаркировкиВДанных.Получить(ИмяСвойства);
			Если ЕстьСвойство = Неопределено Тогда
				ЕстьСвойство = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДанных, ИмяСвойства);
				НаличиеКолонокСоставаКодаМаркировкиВДанных.Вставить(ИмяСвойства, ЕстьСвойство);
			КонецЕсли;
			
			Если ЕстьСвойство
				И Не ЗначениеЗаполнено(СтрокаДанных[ИмяСвойства]) Тогда
				СтрокаДанных[ИмяСвойства] = КлючИЗначение.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет представления статусов, владельцев и прочую дополнительную информацию
//
// Параметры:
//  ДанныеПоШтрихкодам - См. ИнициализацияДанныхПоШтрихкодам
//  ПараметрыСканирования - См. ПараметрыСканирования
Процедура ЗаполнитьПредставленияДанных(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	Если ДанныеПоШтрихкодам = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВидыПродукции = ДанныеПоШтрихкодам.ВидыПродукции;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС")
		И ПрисутствуетАлкогольнаяПродукция(ВидыПродукции) Тогда
		
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		МодульШтрихкодированиеЕГАИС.ЗаполнитьПредставленияДанных(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		
		Если ПрисутствуетТабачнаяПродукция(ВидыПродукции) Тогда
			МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
			МодульШтрихкодированиеМОТП.ЗаполнитьПредставленияДанных(ДанныеПоШтрихкодам, ПараметрыСканирования);
		КонецЕсли;
		
		Если ПрисутствуетПродукцияИСМП(ВидыПродукции) Тогда
			МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
			МодульШтрихкодированиеИСМПСлужебный.ЗаполнитьПредставленияДанных(ДанныеПоШтрихкодам, ПараметрыСканирования);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Кэширует данные обработанных штрихкодов путем помещения их в хранилище значений.
//
// Параметры:
//  ПараметрыСканирования - См. ПараметрыСканирования
//  ДанныеШтрихкода - См. ИнициализироватьДанныеШтрихкода
//  РезультатДобавления - См. ИнициализироватьРезультатОбработкиШтрихкода
//  ДеревоУпаковок - См. ИнициализироватьДеревоУпаковок
Процедура ЗакэшироватьОбработанныеШтрихкоды(ПараметрыСканирования, ДанныеШтрихкода, РезультатДобавления, ДеревоУпаковок = Неопределено) Экспорт
	
	Если РезультатДобавления = Неопределено
		Или Не ПараметрыСканирования.КонтрольУникальностиКодовМаркировки
		Или Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции) 
		Или ДанныеШтрихкода = Неопределено
		Или ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ДанныеШтрихкода.ТипУпаковки)
		И (РезультатДобавления.ЕстьОшибкиВДеревеУпаковок ИЛИ ДеревоУпаковок <> Неопределено) Тогда
		
		Если РезультатДобавления.ЕстьОшибкиВДеревеУпаковок Тогда
			Возврат;
		КонецЕсли;
		
		КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
		ОбработанныеКодыМаркировки = КэшМаркируемойПродукции.ОбработанныеКодыМаркировки;
		
		ПоместитьДанныеСтрокДереваВСоответствие(ДеревоУпаковок.Строки, ОбработанныеКодыМаркировки);
		ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, ПараметрыСканирования.КэшМаркируемойПродукции);
		
	Иначе
		
		Если ЗначениеЗаполнено(РезультатДобавления.ТекстОшибки) Или ДанныеШтрихкода.Штрихкод = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
		ОбработанныеКодыМаркировки = КэшМаркируемойПродукции.ОбработанныеКодыМаркировки;
		
		ОбработанныеКодыМаркировки.Вставить(ДанныеШтрихкода.Штрихкод, ДанныеШтрихкода);
		ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, ПараметрыСканирования.КэшМаркируемойПродукции);
		
	КонецЕсли;
	
КонецПроцедуры

// Получает данные документа основания из временного хранилища. В случае отсутствия данных в хранилище - формирует их.
//
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  ТаблицаЗначений, Неопределено - Описание:
//   * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика.
//   * Серия - ОпределяемыйТип.СерияНоменклатуры - Серия номенклатуры.
//   * Количество - Число - количество единиц.
Функция ДанныеДокументаОснования(ПараметрыСканирования) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыСканирования.ДокументОснование) Тогда
		Если Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования) Тогда
			
			СформироватьДанныеДокументаОснования(ПараметрыСканирования);
			
		КонецЕсли;
		
		Возврат ПолучитьИзВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Формирует данные документа основания и помещает их во временное хранилище.
//
// Параметры:
//  ПараметрыСканирования - См. ПараметрыСканирования
Процедура СформироватьДанныеДокументаОснования(ПараметрыСканирования) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыСканирования.ДокументОснование)
		И Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования) Тогда
		
		ТаблицаДанныхДокументаОснования = ИнициализицияТаблицыДанныхДокумента(ПараметрыСканирования);

		ДанныеСформированы = Ложь;
		Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ВетИС") Тогда

			МодульИнтеграцияВЕТИС = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияВЕТИС");
			МодульИнтеграцияВЕТИС.СформироватьДанныеДокументаОснования(
				ТаблицаДанныхДокументаОснования, ПараметрыСканирования.ДокументОснование, ДанныеСформированы);

		КонецЕсли;
		
		Если Не ДанныеСформированы Тогда
			ШтрихкодированиеИСПереопределяемый.СформироватьДанныеДокументаОснования(
				ПараметрыСканирования, ТаблицаДанныхДокументаОснования);
		КонецЕсли;
		
		ТаблицаДанныхДокументаОснования.Индексы.Добавить("Номенклатура");
		ТаблицаДанныхДокументаОснования.Индексы.Добавить("Номенклатура, Характеристика");
		ТаблицаДанныхДокументаОснования.Индексы.Добавить("Номенклатура, Характеристика, Серия");
		
		ПараметрыСканирования.АдресДанныхДокументаОснования = ПоместитьВоВременноеХранилище(
			ТаблицаДанныхДокументаОснования,
			ПараметрыСканирования.ИдентификаторФормы);
		
	КонецЕсли;
	
КонецПроцедуры

// Получает данные документа из формы в которой происходит сканирование. 
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма данные таблицы "Товары" требуется получить.
//   ПараметрыСканирования - Структура, Неопределено - См. ШтрихкодированиеИСКлиент.ПараметрыСканирования.
//
// Возвращаемое значение:
//   Неопределено, ТаблицаЗначений, ДанныеФормыКоллекция - см. ИнициализицияТаблицыДанныхДокумента.
//
Функция ПолучитьДанныеДокументаИзФормы(Форма, ПараметрыСканирования, ПоместитьВоВременноеХранилище = Ложь)
	
	СтандартнаяОбработка = Истина;
	ДанныеДокумента = Неопределено;
	ШтрихкодированиеИСПереопределяемый.ПриФормированииДанныхТабличнойЧастиТовары(
		Форма, ДанныеДокумента, ?(ПоместитьВоВременноеХранилище, ПараметрыСканирования, Неопределено), СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если СтрНачинаетсяС(Форма.ИмяФормы, "Обработка") Тогда //формы проверки и подбора
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПодобраннаяМаркируемаяПродукция") Тогда
				Возврат Форма.ПодобраннаяМаркируемаяПродукция;
			КонецЕсли;
		Иначе
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект")
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Товары")
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект.Товары, "Номенклатура")
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект.Товары, "Характеристика")
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект.Товары, "Серия") Тогда
					Возврат Форма.Объект.Товары;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат ДанныеДокумента;
	
КонецФункции

// Выполняет поиск в массиве ВидыПродукции алкогольной продукции.
//
// Параметры:
//  ВидыПродукции - Массив - Коллекция видов продукции ИС.
// Возвращаемое значение:
//  Булево - Истина, если найдена алкогольная продукция.
Функция ПрисутствуетАлкогольнаяПродукция(ВидыПродукции) Экспорт

	Возврат ВидыПродукции.Найти(Перечисления.ВидыПродукцииИС.Алкогольная) <> Неопределено;

КонецФункции

// Выполняет поиск в массиве ВидыПродукции табачной продукции.
//
// Параметры:
//  ВидыПродукции - Массив - Коллекция видов продукции ИС.
// Возвращаемое значение:
//  Булево - Истина, если найдена табачная продукция.
Функция ПрисутствуетТабачнаяПродукция(ВидыПродукции) Экспорт

	Возврат ВидыПродукции.Найти(Перечисления.ВидыПродукцииИС.Табак) <> Неопределено;
	
КонецФункции

//Выполняет поиск в массиве ВидыПродукции продукции ИС МП.
//
//Параметры:
//   ВидыПродукции - Массив - Коллекция видов продукции ИС.
//
//Возвращаемое значение:
//   Булево - Истина, если в массиве есть продукция ИС МП.
//
Функция ПрисутствуетПродукцияИСМП(ВидыПродукции) Экспорт
	
	Для Каждого ВидПродукции Из ВидыПродукции Цикл
		Если ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ВидПродукции) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Помещает настройки выбора маркируемой продукции в хранилище настроек данных формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, для которой необходимо сохранить настройки.
//  Ссылка - ДокументСсылка - Ссылка на объект.
Процедура СохранитьНастройкиВыбораМаркируемойПродукции(Форма, Ссылка) Экспорт
	
	СохраняемыеНастройки = Новый Структура;
	СохраняемыеНастройки.Вставить("СохраненВыборПоМаркируемойПродукции", Форма.СохраненВыборПоМаркируемойПродукции);
	СохраняемыеНастройки.Вставить("ДанныеВыбораПоМаркируемойПродукции",  Форма.ДанныеВыбораПоМаркируемойПродукции);
	
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(Ссылка, "ДанныеВыбораМаркируемойПродукции", СохраняемыеНастройки);
	
КонецПроцедуры

// Восстанавливает сохраненные настройки выбора маркируемой продукции и помещает их в данные формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, для которой необходимо сохранить настройки.
//  Ссылка - ДокументСсылка - Ссылка на объект.
Процедура ВосстановитьНастройкиВыбораМаркируемойПродукции(Форма, Ссылка) Экспорт
	
	НастройкиВыбораМаркируемойПродукции = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(Ссылка, "ДанныеВыбораМаркируемойПродукции");
	Если ЗначениеЗаполнено(Ссылка) И НастройкиВыбораМаркируемойПродукции <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Форма, НастройкиВыбораМаркируемойПродукции);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверки по штрихкодам до формирования данных по ним.
//
// Параметры:
//  ДанныеКодовМаркировки - См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам
//  ПараметрыСканирования - См. ШтрихкодированиеИС.ПараметрыСканирования
// Возвращаемое значение:
//  Соответствие - Ключ - Штрихкод, значение результат его проверки.
Функция ВыполнитьПроверкиПередПолучениемДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	ДанныеКодовМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
	
	РезультатПроверок = Новый Соответствие;
	
	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл
		
		РезультатПроверки = ПроверкаОшибкиПриРазбореКодаМаркировки(СтрокаДанных, ПараметрыСканирования);
		Если ЗначениеЗаполнено(РезультатПроверки) Тогда
			РезультатПроверок.Вставить(СтрокаДанных.Штрихкод, РезультатПроверки);
			Продолжить;
		КонецЕсли;
		
		РезультатПроверки = КонтрольНаДопустимыеВидыПродукции(СтрокаДанных, ПараметрыСканирования);
		Если ЗначениеЗаполнено(РезультатПроверки) Тогда
			РезультатПроверок.Вставить(СтрокаДанных.Штрихкод, РезультатПроверки);
			Продолжить;
		КонецЕсли;
		
		РезультатПроверки = ТребуетсяОткрытьФормуВводаКодаМаркировки(СтрокаДанных, ПараметрыСканирования);
		Если ЗначениеЗаполнено(РезультатПроверки) Тогда
			РезультатПроверок.Вставить(СтрокаДанных.Штрихкод, РезультатПроверки);
			Продолжить;
		КонецЕсли;
		
		РезультатПроверки = ПроверкаШтрихкодаНаУжеДобавленный(СтрокаДанных.Штрихкод, ПараметрыСканирования);
		Если ЗначениеЗаполнено(РезультатПроверки) Тогда
			РезультатПроверок.Вставить(СтрокаДанных.Штрихкод, РезультатПроверки);
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	Если РезультатПроверок.Количество() > 0 Тогда
		Возврат РезультатПроверок;
	КонецЕсли;
	
	ДоступнаПроверкаВМодулеМОТП = Ложь;
	ДоступнаПроверкаВМодулеИСМП = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") 
		И ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
		
		Если ДопустимаТабачнаяПродукция(ПараметрыСканирования)
			И ПрисутствуетТабачнаяПродукция(ДанныеПоШтрихкодам.ВидыПродукции) Тогда
			МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
			ДоступнаПроверкаВМодулеМОТП = Истина;
		КонецЕсли;
		
		Если ДопустимаПродукцияИСМП(ПараметрыСканирования)
			И ПрисутствуетПродукцияИСМП(ДанныеПоШтрихкодам.ВидыПродукции) Тогда
			МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
			ДоступнаПроверкаВМодулеИСМП = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДоступнаПроверкаВМодулеМОТП Тогда
		
		РезультатПроверокМОТП = МодульШтрихкодированиеМОТП.ВыполнитьПроверкиПередПолучениемДанныхПоШтрихкодам(
			ДанныеКодовМаркировки, ПараметрыСканирования);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(РезультатПроверок, РезультатПроверокМОТП);
		
	КонецЕсли;
	
	Если ДоступнаПроверкаВМодулеИСМП Тогда
		
		РезультатПроверокИСМП = МодульШтрихкодированиеИСМПСлужебный.ВыполнитьПроверкиПередПолучениемДанныхПоШтрихкодам(
			ДанныеКодовМаркировки, ПараметрыСканирования);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(РезультатПроверок, РезультатПроверокИСМП);
		
	КонецЕсли;
	
	Возврат РезультатПроверок;
	
КонецФункции

// Выполняет инициализацию структуры Вложенные штрихкоды.
//
// Параметры:
// Возвращаемое значение:
//  Структура - Описание:
//   * ШтрихкодыПродукцииДляСопоставления - Массив - коллекция штрихкодов, которым требуется сопоставить номенклатуру
//   * ВидыПродукции - Массив Из ПеречислениеСсылка.ВидыПродукцииИС - Коллекция видов продукции ИС, которые присутствуют в дереве упаковок
//   * МаркированныеТовары - См. ИнициализироватьТаблицуМаркированныеТовары
//   * ДеревоУпаковок - См. ИнициализироватьДеревоУпаковок
Функция ИнициализацияВложенныхШтрихкодов() Экспорт
	
	ВложенныеШтрихкоды = Новый Структура;
	
	ВложенныеШтрихкоды.Вставить("ДеревоУпаковок",                     ИнициализироватьДеревоУпаковок());
	ВложенныеШтрихкоды.Вставить("МаркированныеТовары",                ИнициализироватьТаблицуМаркированныеТовары());
	ВложенныеШтрихкоды.Вставить("ВидыПродукции",                      Новый Массив);
	ВложенныеШтрихкоды.Вставить("ШтрихкодыПродукцииДляСопоставления", Новый Массив);
	
	Возврат ВложенныеШтрихкоды;
	
КонецФункции

// Вычисляет штрихкод EAN из GTIN.
// 
// Параметры:
//  GTIN - Строка - GTIN.
// Возвращаемое значение:
//  Строка - Вычисленное значение EAN.
Функция ШтрихкодEANИзGTIN(Знач GTIN) Экспорт
	
	// Пытаемся получить штрихкод EAN8 или EAN13 из GTIN.
	Пока Лев(GTIN, 1) = "0" И СтрДлина(GTIN) > 8 Цикл
		GTIN = Сред(GTIN, 2);
	КонецЦикла;
	
	Возврат GTIN;
	
КонецФункции

// Формирует структуру Вложенные штрихкоды для упаковок на основании существующих данных в ИБ.
//
// Параметры:
//  МассивУпаковок - Массив - Коллекция элементов справочника Штрихкоды упаковок.
//  ПараметрыСканирования - См. ПараметрыСканирования
// Возвращаемое значение:
//  См. ИнициализацияВложенныхШтрихкодов
Функция ВложенныеШтрихкодыИзвестныхУпаковок(МассивУпаковок, ПараметрыСканирования = Неопределено) Экспорт
	
	Если МассивУпаковок.Количество() = 0 Тогда
		ВложенныеШтрихкоды = ИнициализацияВложенныхШтрихкодов();
		Возврат ВложенныеШтрихкоды;
	КонецЕсли;
	
	ВложенныеШтрихкоды = ВложенныеШтрихкодыПоМассивуУпаковокБезСпецифики(МассивУпаковок, ПараметрыСканирования);
	
	Возврат ВложенныеШтрихкоды;
	
КонецФункции

// Передает управление обработки данных штрихкодов в модуль менеджера объекта или модуль общей формы.
// Выполняет кэширование данных штрихкодов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  ДанныеШтрихкода - Структура - сведения по штрихкоду.
//  ПараметрыСканирования - (См. ПараметрыСканирования).
//  ВложенныеШтрихкоды - (См. ИнициализацияВложенныхШтрихкодов).
// Возвращаемое значение:
//   (См. ИнициализироватьРезультатОбработкиШтрихкода).
Функция ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды = Неопределено) Экспорт
	
	Если СтрНачинаетсяС(Форма.ИмяФормы, "ОбщаяФорма") Тогда
		РезультатОбработки = Неопределено;
		ШтрихкодированиеИСПереопределяемый.ОбработатьДанныеШтрихкодаДляОбщейФормы(
			Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды, РезультатОбработки);
	Иначе
		МодульДляОбработки = ИнтеграцияИС.МенеджерОбъектаПоСсылке(Форма.Объект.Ссылка);
		РезультатОбработки = МодульДляОбработки.ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
	КонецЕсли;
	
	ДеревоУпаковок = Неопределено;
	Если ВложенныеШтрихкоды <> Неопределено Тогда
		ДеревоУпаковок = ВложенныеШтрихкоды.ДеревоУпаковок;
	КонецЕсли;
	
	ЗакэшироватьОбработанныеШтрихкоды(ПараметрыСканирования, ДанныеШтрихкода, РезультатОбработки, ДеревоУпаковок);
	Форма.Модифицированность = Истина;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Передает управление обработки данных штрихкодов в модуль менеджера объекта или модуль общей формы.
// Выполняет кэширование данных штрихкодов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  ДанныеШтрихкода - Структура - сведения по штрихкоду.
//  ПараметрыСканирования - (См. ПараметрыСканирования).
//  ВложенныеШтрихкоды - (См. ИнициализацияВложенныхШтрихкодов).
// Возвращаемое значение:
//   (См. ИнициализироватьРезультатОбработкиШтрихкода).
Функция ОбработатьДанныеШтрихкодаНемаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования)
	
	Результат = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	Результат.ОбработкаШтрихкодаБезМарки = Истина;
	Результат.ДанныеШтрихкода = ДанныеШтрихкода;
	Возврат Результат;
	
КонецФункции

// Возвращает модуль, в котором требуется выполнить обработку штрихкодов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма объекта.
// Возвращаемое значение:
//  ОбщийМодуль, ФормаКлиентскогоПриложения - Модуль, в котором требуется выполнить обработку штрихкодов.
Функция МодульДляОбработки(Форма) Экспорт

	Если СтрНачинаетсяС(Форма.ИмяФормы, "ОбщаяФорма") Тогда
		МодульДляОбработки = Форма;
	Иначе
		МодульДляОбработки = ИнтеграцияИС.МенеджерОбъектаПоСсылке(Форма.Объект.Ссылка);
	КонецЕсли;
	
	Возврат МодульДляОбработки;
	
КонецФункции

// Выполняет инициализацию кэша для формы объекта, необходимого для обработки маркируемой продукции.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма объекта.
Процедура ИнициализироватьКэшМаркируемойПродукции(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "КэшМаркируемойПродукции")
		И Не ЭтоАдресВременногоХранилища(Форма.КэшМаркируемойПродукции) Тогда
		
		КэшМаркируемойПродукции = ИнициализацияКэшаМаркируемойПродукции();
		Форма.КэшМаркируемойПродукции = ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, Форма.УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

// Создает элемент справочника штрихкоды упаковок на основании данных штрихкода.
//
// Параметры:
//  ДанныеШтрихкода - См. ИнициализироватьДанныеШтрихкода.
//  ПараметрыСканирования - См. ПараметрыСканирования
// Возвращаемое значение:
//  СправочникСсылка.ШтрихкодыУпаковокТоваров - ссылка на созданный элемент справочника.
Функция СоздатьМаркированныйТоварПоДаннымШтрихкода(ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	Если Не ПараметрыСканирования.СоздаватьШтрихкодУпаковки Тогда
		Возврат Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки) Тогда
		Возврат ДанныеШтрихкода.ШтрихкодУпаковки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура)
		И Не ПараметрыСканирования.РазрешенаОбработкаКодовСПустойНоменклатурой Тогда
		
		Возврат Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка();
		
	КонецЕсли;
	
	ДанныеНовойУпаковки = Справочники.ШтрихкодыУпаковокТоваров.СтруктураСозданияШтрихкодаУпаковки();
	ЗаполнитьЗначенияСвойств(ДанныеНовойУпаковки, ДанныеШтрихкода);
	
	Если Не ЗначениеЗаполнено(ДанныеНовойУпаковки.ТипУпаковки) Тогда
		ДанныеНовойУпаковки.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДанныеНовойУпаковки.Количество) Тогда
		ДанныеНовойУпаковки.Количество  = 1;
	КонецЕсли;
	
	СсылкаНаЭлемент = Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодУпаковки(ДанныеНовойУпаковки);
	
	Возврат СсылкаНаЭлемент;
	
КонецФункции

// Возвращает массив штрихкодов EAN, которые хранятся в регистре сведений штрихкоды.
//
// Параметры:
//  ШтрихкодыEAN - Массив - Коллекция штрихкодов EAN.
// Возвращаемое значение:
//  Массив - Коллекция штрихкодов EAN по данным ИБ.
Функция СуществующиеВРегистреШтрихкодыEAN(ШтрихкодыEAN) Экспорт

	ДанныеПоШтрихкодамEAN = ДанныеПоШтрихкодамEAN(ШтрихкодыEAN);

	Возврат ДанныеПоШтрихкодамEAN.ВыгрузитьКолонку("ШтрихкодEAN");

КонецФункции

// Дополняет коллекции Дерево упаковок и таблицу значений маркируемая продукция в данных по штрихкодам значениями
// вложенных штрихкодов.
//
// Параметры:
//  ДанныеПоШтрихкодам - См. ИнициализацияДанныхПоШтрихкодам
//  ВложенныеШтрихкоды - См. ИнициализацияВложенныхШтрихкодов
Процедура ДобавитьВДанныеШтрихкодовВложенныеШтрихкоды(ДанныеПоШтрихкодам, ВложенныеШтрихкоды) Экспорт
	
	Если ВложенныеШтрихкоды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено Тогда
		
		ДанныеПоШтрихкодам.ВложенныеШтрихкоды = ВложенныеШтрихкоды;
		
		Возврат;
	КонецЕсли;
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено Тогда
		ДанныеПоШтрихкодам.ВложенныеШтрихкоды = ВложенныеШтрихкоды;
		Возврат;
	КонецЕсли;
	
	ДеревоИзвестныхУпаковок       = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
	ДеревоУпаковокПоДаннымСервиса = ВложенныеШтрихкоды.ДеревоУпаковок;
	СоответствиеСтарыхИНовыхСтрокДерева = Новый Соответствие;
	СкопироватьСтрокиДерева(ДеревоИзвестныхУпаковок, ДеревоУпаковокПоДаннымСервиса, СоответствиеСтарыхИНовыхСтрокДерева);
	
	МаркированныеТоварыИзвестныхУпаковок = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары;
	МаркированныеТоварыПоДаннымСервиса   = ВложенныеШтрихкоды.МаркированныеТовары;
	Для Каждого СтрокаПоДаннымСервиса Из МаркированныеТоварыПоДаннымСервиса Цикл
		
		НоваяСтрока = МаркированныеТоварыИзвестныхУпаковок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПоДаннымСервиса);
		НоваяСтрока.СтрокаДерева = СоответствиеСтарыхИНовыхСтрокДерева.Получить(СтрокаПоДаннымСервиса.СтрокаДерева);
		НоваяСтрока.УпаковкаВерхнегоУровня = СоответствиеСтарыхИНовыхСтрокДерева.Получить(СтрокаПоДаннымСервиса.УпаковкаВерхнегоУровня);
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет текст запроса получения информации по номенклатуре такой как: "МаркируемаяПродукция" и "ВидПродукции" и
// помещает во временную таблицу "СвойстваМаркируемойПродукции".
// 
// Параметры:
// Возвращаемое значение:
// 	Строка - Фрагмент запроса, выборкой которого являются поля: Номенклатура, МаркируемаяПродукция, ВидПродукции.
Функция ОпределитьТекстЗапросаСвойстваМаркируемойПродукции() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеШтрихкодовУпаковок.Номенклатура               КАК Номенклатура,
	|	ДанныеШтрихкодовУпаковок.Характеристика             КАК Характеристика,
	|	МАКСИМУМ(ЛОЖЬ)                                      КАК МаркируемаяПродукция,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка) КАК ВидПродукции
	|ПОМЕСТИТЬ СвойстваМаркируемойПродукции
	|ИЗ
	|	ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
	|СГРУППИРОВАТЬ ПО
	|	ДанныеШтрихкодовУпаковок.Номенклатура,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура";
	
	ШтрихкодированиеИСПереопределяемый.ПриОпределенииТекстаЗапросаСвойствМаркируемойПродукции(ТекстЗапроса);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Выполняет сравнение двух деревьев значений: Дерево по данным информационной базы, сформированнное на базе справочника
//   "Штрихкоды упаковок товаров" и дерева, полученного из сервиса Государственной ИС.
// 
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - См. ИнициализироватьДеревоУпаковок.
//  ДеревоУпаковокПоДаннымСервиса - ДеревоЗначений - Дерево, полученное из сервиса Гос. ИС.
//  ЕстьРасхождения - Булево - Истина, если выявлено расхождение при сравнении.
//  ГрупповыеУпаковкиБезПотребительских - Булево - Групповые упаковки без потребительских упаковок
Процедура ВыявитьРасхожденияВСоставахДеревьев(ДеревоУпаковок, ДеревоУпаковокПоДаннымСервиса, ЕстьРасхождения, ГрупповыеУпаковкиБезПотребительских = Ложь) Экспорт
	
	КэшПроверенныхСтрок        = Новый Соответствие;
	ИсходныеЗначенияШтрихкодов = Новый Соответствие;
	
	ПараметрыНормализацииКМ = ШтрихкодированиеИССлужебный.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииКМ.ИмяСвойстваКодМаркировки = "Штрихкод";
	
	ШтрихкодированиеИССлужебный.НормализоватьДеревоЗначенийРекурсивно(
		ДеревоУпаковок, ПараметрыНормализацииКМ, ИсходныеЗначенияШтрихкодов);
	
	ВыявитьРасхожденияВСтрокахДеревьев(
		ДеревоУпаковок, ДеревоУпаковокПоДаннымСервиса, КэшПроверенныхСтрок, ЕстьРасхождения,
		ТекстОшибкиОтсутствуетПоДаннымСервисаИСМП(), Истина);
	ВыявитьРасхожденияВСтрокахДеревьев(
		ДеревоУпаковокПоДаннымСервиса, ДеревоУпаковок, КэшПроверенныхСтрок, ЕстьРасхождения,
		ТекстОшибкиОтсутствуетПоДаннымИнформационнойБазы(), Ложь, ГрупповыеУпаковкиБезПотребительских);
	
	Для Каждого КлючИЗначение Из ИсходныеЗначенияШтрихкодов Цикл
		
		СтрокаДерева          = КлючИЗначение.Ключ;
		СтрокаДерева.Штрихкод = КлючИЗначение.Значение;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет контроль заполнения серии с учетом сохраненного ранее выбора пользователя.
// 
// Параметры:
//  ПравилаПроверкиНаОшибки - Структура - набор правил:
//   * КонтрольСерий - Массив - строки дерева упаковок или данных штрихкода, где требуется указание серии.
//  ПараметрыСканирования - Структура - См. ПараметрыСканирования.
Процедура ПроконтролироватьЗаполнениеСерийСУчетомСохраненногоВыбора(ПравилаПроверкиНаОшибки, ПараметрыСканирования) Экспорт
	
	ДанныеСохраненногоВыбора = ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции;
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСерий")
		И ПравилаПроверкиНаОшибки.КонтрольСерий.Количество() > 0 Тогда
		
		Для Каждого СтрокаДанных Из ПравилаПроверкиНаОшибки.КонтрольСерий Цикл
			
			СтрокаДанных.ТребуетсяВыборСерии = Истина;
			
			Если ДанныеСохраненногоВыбора <> Неопределено
				И СтрокаДанных.Номенклатура = ДанныеСохраненногоВыбора.Номенклатура
				И СтрокаДанных.Характеристика = ДанныеСохраненногоВыбора.Характеристика
				И СтрокаДанных.Серия = ДанныеСохраненногоВыбора.Серия Тогда
				СтрокаДанных.ТребуетсяВыборСерии = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует вложенные штрихкоды без учета специфики маркируемой продукции.
//
// Параметры:
//  МассивУпаковок - Массив Из СправочникСсылка.ШтрихкодыУпаковокТоваров - Список штрихкодов упаковок.
//  ПараметрыСканирования     - См. ПараметрыСканирования.
//  ПолныйКодМаркировкиИзПула - Булево - Включать полный код маркировки из пула.
// Возвращаемое значение:
//  См. ИнициализацияВложенныхШтрихкодов
Функция ВложенныеШтрихкодыПоМассивуУпаковокБезСпецифики(МассивУпаковок, ПараметрыСканирования, ПолныйКодМаркировкиИзПула = Ложь)
	
	СоответствиеСтрокДереваУпаковок = Новый Соответствие;
	ВложенныеШтрихкоды              = ИнициализацияВложенныхШтрихкодов();
	
	Запрос       = Новый Запрос();
	Запрос.Текст = ТекстЗапросаСоставаУпаковокВИерархии();
	
	КоллекцияУпаковок = ОбщегоНазначения.СкопироватьРекурсивно(МассивУпаковок, Ложь);
	
	ПродолжатьПоиск    = Истина;
	УровнейВложенности = 3;
	
	Пока ПродолжатьПоиск Цикл
		
		Запрос.УстановитьПараметр("МассивУпаковок",           КоллекцияУпаковок);
		Запрос.УстановитьПараметр("НоменклатураПустаяСсылка", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
		Результат = Запрос.Выполнить();
		Выборка   = Результат.Выбрать();
		КоллекцияУпаковок.Очистить();
		
		Пока Выборка.Следующий() Цикл
			
			РодительскиеДанные = ВложенныеШтрихкоды.ДеревоУпаковок;
			Для ТекущийУровень = 0 По УровнейВложенности Цикл
				
				ТекущаяУпаковка = Выборка["УпаковкаУровень"+ТекущийУровень];
				
				Если Не ЗначениеЗаполнено(ТекущаяУпаковка) Тогда
					Прервать;
				КонецЕсли;
				
				Если СоответствиеСтрокДереваУпаковок[ТекущаяУпаковка] = Неопределено Тогда
					
					РодительскиеДанные = РодительскиеДанные.Строки.Добавить();
					ЗаполнитьСтрокуДереваУпаковокПоВыборке(РодительскиеДанные, Выборка, ТекущийУровень, ПараметрыСканирования);
					ЗаполнитьСтрокуДереваУпаковокПоПараметрамУказанияСерий(РодительскиеДанные, ПараметрыСканирования);
					ЗаполнитьСтрокуДереваПоДаннымРазбораШтрихкода(РодительскиеДанные);
					
					СоответствиеСтрокДереваУпаковок.Вставить(ТекущаяУпаковка, РодительскиеДанные);
					
					Если ЗначениеЗаполнено(РодительскиеДанные.ВидПродукции) Тогда
						ВложенныеШтрихкоды.ВидыПродукции.Добавить(РодительскиеДанные.ВидПродукции);
					КонецЕсли;
					
				Иначе
					
					РодительскиеДанные = СоответствиеСтрокДереваУпаковок[ТекущаяУпаковка];
					
				КонецЕсли;
				
				Если ТекущийУровень = УровнейВложенности Тогда 
					КоллекцияУпаковок.Добавить(ТекущаяУпаковка);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ПродолжатьПоиск = КоллекцияУпаковок.Количество() > 0;
		
	КонецЦикла;
	
	Если ПараметрыСканирования <> Неопределено
		И ПараметрыСканирования.Свойство("ОтборПоВидуПродукции")
		И ПараметрыСканирования.ОтборПоВидуПродукции Тогда
		ОтобратьСтрокиДереваПоВидуПродукции(
			ВложенныеШтрихкоды.ДеревоУпаковок,
			СоответствиеСтрокДереваУпаковок,
			ПараметрыСканирования.ДопустимыеВидыПродукции[0]);
	КонецЕсли;
	
	КэшУпаковокВерхнегоУровня = Новый Соответствие;
	Для Каждого КлючЗначение Из СоответствиеСтрокДереваУпаковок Цикл
		
		СтрокаДерева = КлючЗначение.Значение;
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
			НоваяСтрока = ВложенныеШтрихкоды.МаркированныеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
			НоваяСтрока.СтрокаДерева           = СтрокаДерева;
			НоваяСтрока.УпаковкаВерхнегоУровня = СтрокаДереваВерхнегоУровня(СтрокаДерева, КэшУпаковокВерхнегоУровня);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПолныйКодМаркировкиИзПула Тогда
		ЗаменитьШтрихкодПолнымКодомМаркировкиИзПула(ВложенныеШтрихкоды.МаркированныеТовары);
	КонецЕсли;
	
	ВложенныеШтрихкоды.ВидыПродукции = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВложенныеШтрихкоды.ВидыПродукции);
	
	Возврат ВложенныеШтрихкоды;
	
КонецФункции

Процедура ЗаменитьШтрихкодПолнымКодомМаркировкиИзПула(ТаблицаШтрихкоды, ИмяКолонки = "Штрихкод")
	
	СоответствиеШтрихкодовСтрокам = Новый Соответствие();
	КодыМаркировки                = Новый ТаблицаЗначений;
	КодыМаркировки.Колонки.Добавить(
		"КодМаркировки",
		Метаданные.РегистрыСведений.ПулКодовМаркировкиСУЗ.Измерения.КодМаркировки.Тип);
	КодыМаркировки.Колонки.Добавить(
		"ХешСуммаКодаМаркировки",
		Метаданные.РегистрыСведений.ПулКодовМаркировкиСУЗ.Измерения.ХешСуммаКодаМаркировки.Тип);
	
	Для Каждого СтрокаТовар Из ТаблицаШтрихкоды Цикл
		Если СтрокаТовар.ВидПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
			Если Не (СтрокаТовар.СоставКодаМаркировки <> Неопределено
				И Не СтрокаТовар.СоставКодаМаркировки.ВключаетМРЦ) Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
		
		СоответствиеШтрихкодовСтрокам.Вставить(СтрокаТовар[ИмяКолонки], СтрокаТовар);
		
		НоваяСтрока                        = КодыМаркировки.Добавить();
		НоваяСтрока.КодМаркировки          = СтрокаТовар[ИмяКолонки];
		НоваяСтрока.ХешСуммаКодаМаркировки = ИнтеграцияИС.ХешированиеДанныхSHA256(НоваяСтрока.КодМаркировки);
		
	КонецЦикла;
	
	Если ТаблицаШтрихкоды.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.КодМаркировки          КАК КодМаркировки,
	|	Т.ХешСуммаКодаМаркировки КАК ХешСуммаКодаМаркировки
	|ПОМЕСТИТЬ КодыМаркировки
	|ИЗ
	|	&КодыМаркировки КАК Т
	|ИНДЕКСИРОВАТЬ ПО
	|	КодМаркировки,
	|	ХешСуммаКодаМаркировки
	|;
	|
	|///////////////////////////////////////
	|ВЫБРАТЬ
	|	ПулКодовМаркировкиСУЗ.КодМаркировки       КАК КодМаркировки,
	|	ПулКодовМаркировкиСУЗ.ПолныйКодМаркировки КАК ПолныйКодМаркировки
	|ИЗ
	|	КодыМаркировки КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
	|	ПО ПулКодовМаркировкиСУЗ.КодМаркировки          = Т.КодМаркировки
	|	 И ПулКодовМаркировкиСУЗ.ХешСуммаКодаМаркировки = Т.ХешСуммаКодаМаркировки
	|");
	Запрос.Параметры.Вставить("КодыМаркировки", КодыМаркировки);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаДанных             = СоответствиеШтрихкодовСтрокам.Получить(Выборка.КодМаркировки);
		СтрокаДанных[ИмяКолонки] = ШтрихкодированиеИСКлиентСервер.Base64ВШтрихкод(Выборка.КодМаркировки);
		
	КонецЦикла;
	
КонецПроцедуры

// Для заполненной серии в известной упаковке может возникнуть необходимость не учитывать ее для документа
//
Процедура ЗаполнитьСтрокуДереваУпаковокПоПараметрамУказанияСерий(СтрокаДерева, ПараметрыСканирования)
	
	Если ПараметрыСканирования = Неопределено Тогда
		Возврат;
	ИначеЕсли ПараметрыСканирования.ПараметрыУказанияСерий = Неопределено Тогда
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(СтрокаДерева.Серия) Тогда
		Возврат;
	ИначеЕсли Не ИнтеграцияИС.ТребуетсяВыборСерии(СтрокаДерева, ПараметрыСканирования) Тогда
		СтрокаДерева.Серия = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры");
	КонецЕсли;
	
КонецПроцедуры

// Определяет допустимость обработки обувной продукции по параметрам сканирования.
//
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Булево - Истина, если допустима.
Функция ДопустимаПродукцияИСМП(ПараметрыСканирования) Экспорт
	
	Если ПараметрыСканирования = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ВидПродукции Из ПараметрыСканирования.ДопустимыеВидыПродукции Цикл
		Если ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ВидПродукции) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Выполняется инициализация структуры кэширования данных маркируемой продукции.
// 
// Возвращаемое значение:
//  Структура - Описание:
// * ОтложенныеКодыМаркировки - Массив из Структура -   Коды маркировки, по которым требуется выполнить постобработку.
// * ОбработанныеКодыМаркировки - Соответствие - Ключ - код маркировки, значение - информация по коду маркировки.
Функция ИнициализацияКэшаМаркируемойПродукции() Экспорт
	
	КэшМаркируемойПродукции = Новый Структура;
	КэшМаркируемойПродукции.Вставить("ОбработанныеКодыМаркировки",             Новый Соответствие);
	КэшМаркируемойПродукции.Вставить("ОтложенныеКодыМаркировки",               Новый Массив);
	КэшМаркируемойПродукции.Вставить("ДанныеДляУточненияСведенийПользователя", Новый Структура("Операция, Данные"));
	
	Возврат КэшМаркируемойПродукции;
	
КонецФункции

Процедура ОбработатьУточнениеДанныхДляФормыПроверкиИПодбора(РезультатВыбора, РезультатОбработки, ПараметрыСканирования, КэшированныеЗначения) Экспорт
	
	Если ТипЗнч(РезультатВыбора) = Тип("Строка") Тогда
		// Уточнены данные по упаковке
	Иначе
		
		ДанныеВыбора = РезультатВыбора.ДанныеВыбора;
		
		РезультатОбработки.ТребуетсяВыборСерии = Ложь;
		
		Если РезультатВыбора.ЗапомнитьВыбор Тогда
			ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции = РезультатВыбора.ДанныеВыбора;
		КонецЕсли;
	
		Если ТипЗнч(РезультатОбработки.ДанныеШтрихкода) = Тип("Структура") Тогда
			ДанныеШтрихкода = РезультатОбработки.ДанныеШтрихкода;
		Иначе
			ДанныеШтрихкода = ИнициализироватьДанныеШтрихкода(ПараметрыСканирования);
		КонецЕсли;
		
		Если ДанныеШтрихкода.Свойство("ТребуетсяВыборСерии") Тогда
			ДанныеШтрихкода.ТребуетсяВыборСерии = Ложь;
		КонецЕсли;
		
		ПерезаписатьШтрихкодУпаковки = Ложь;
		ИменаСвойств                 = Новый Массив;
		
		Для Каждого КлючЗначение Из ДанныеВыбора Цикл
			
			ИмяСвойства = КлючЗначение.Ключ;
			Если Не ДанныеШтрихкода.Свойство(ИмяСвойства) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(КлючЗначение.Значение)
				Или ДанныеШтрихкода[ИмяСвойства] = КлючЗначение.Значение Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИмяСвойства = "Номенклатура"
				Или ИмяСвойства = "Характеристика"
				Или ИмяСвойства = "Серия" Тогда
				ПерезаписатьШтрихкодУпаковки = ПараметрыСканирования.СоздаватьШтрихкодУпаковки;
				ИменаСвойств.Добавить(ИмяСвойства);
			КонецЕсли;
			
			ДанныеШтрихкода[ИмяСвойства] = КлючЗначение.Значение;
			
		КонецЦикла;
		
		Если ДанныеВыбора.Свойство("Коэффициент") И ЗначениеЗаполнено(ДанныеВыбора.Коэффициент) Тогда
			РегистрыСведений.ГрупповыеУпаковкиИСМП.СохранитьКоэффициентУпаковки(ДанныеВыбора.Номенклатура, ДанныеВыбора.Коэффициент);
			ДанныеШтрихкода.КоличествоБлоков = 1;
			ДанныеШтрихкода.КоличествоПачек = ДанныеВыбора.Коэффициент;
			ДанныеШтрихкода.Количество = ДанныеВыбора.Коэффициент;
		КонецЕсли;
		
		ДанныеШтрихкода.ДополнительныеПараметры = РезультатВыбора;
		
		Если Не ЗначениеЗаполнено(ДанныеШтрихкода.ВидПродукции) Тогда
			ДанныеШтрихкода.ВидПродукции = ИнтеграцияИСМП.ВидПродукцииПоНоменклатуре(ДанныеШтрихкода.Номенклатура);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеШтрихкода.Штрихкод) И ЗначениеЗаполнено(РезультатОбработки.Штрихкод) Тогда
			ДанныеШтрихкода.Штрихкод = РезультатОбработки.Штрихкод;
		КонецЕсли;
		
		Если ИменаСвойств.Количество() > 0 Тогда
			ДополнитьДеревоУпаковокИШтрихкодыУпаковокУточненнымиДанными(ДанныеШтрихкода, ИменаСвойств, ПерезаписатьШтрихкодУпаковки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки)
			И ПерезаписатьШтрихкодУпаковки Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			
			НачатьТранзакцию();
			
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Справочник.ШтрихкодыУпаковокТоваров");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", ДанныеШтрихкода.ШтрихкодУпаковки);
				Блокировка.Заблокировать();
				
				ОбновитьЭлементШтрихкодовУпаковок(ДанныеШтрихкода);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ИмяСобытияЖурналРегистрации = НСтр("ru = 'ИС МП: Обработка выбора серии'", ОбщегоНазначения.КодОсновногоЯзыка());
				ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
				
				ВызватьИсключение ПодробноеПредставлениеОшибки;
				
			КонецПопытки;
			
			УстановитьПривилегированныйРежим(Ложь);
			
		ИначеЕсли Не ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки) Тогда
			
			ДанныеШтрихкода.ШтрихкодУпаковки = СоздатьМаркированныйТоварПоДаннымШтрихкода(ДанныеШтрихкода, ПараметрыСканирования);
			
		КонецЕсли;
		
		РезультатОбработки.ДанныеШтрихкода = ДанныеШтрихкода;
		
	КонецЕсли;
	
	РезультатОбработки.ТребуетсяУточнениеДанных = Ложь;
	
КонецПроцедуры

Функция ОбработкаДанныхПоШтрихкодамУспешноЗавершена(РезультатОбработки) Экспорт
	
	Если РезультатОбработки.ЕстьОшибки
		Или РезультатОбработки.ТребуетсяУточнениеДанных
		Или РезультатОбработки.ТребуетсяСопоставлениеНоменклатуры
		Или РезультатОбработки.ОткрытьФормуВводаКодаМаркировки Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает список элементов штрихкодов упаковок, находящихся на форме объекта.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма объекта.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Массив из СправочникСсылка.ШтрихкодыУпаковокТоваров - Список элементов штрихкодов формы объекта.
Функция УпаковкиОбъекта(Форма, ПараметрыСканирования)
	
	УпаковкиОбъекта = Новый Массив;
	
	Если ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = Неопределено Тогда
		Возврат УпаковкиОбъекта;
	КонецЕсли;
	
	ТабличнаяЧастьШтрихкодыУпаковок = Форма.Объект[ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок];
	
	ИменаКолонокШтрихкодовУпаковок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки, ",", Истина);
	
	Для Каждого ИмяКолонки Из ИменаКолонокШтрихкодовУпаковок Цикл
		
		УпаковкиТабЧасти = ТабличнаяЧастьШтрихкодыУпаковок.Выгрузить(,ИмяКолонки);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УпаковкиОбъекта, УпаковкиТабЧасти, Истина);
		
	КонецЦикла;
	
	Возврат УпаковкиОбъекта;
	
КонецФункции

// Проверят Дерево значений 1 на соотствие Дерева значений 2. Фиксирует расхождения.
// 
// Параметры:
//  ДеревоЗначений1 - ДеревоЗначений - 
//  ДеревоЗначений2 - ДеревоЗначений - Описание
//  КэшПроверенныхСтрок - Соответствие - Описание
//  ЕстьРасхождения - Булево - Описание
//  ТекстОшибки - Строка - Описание
//  ПерваяИтерация - Булево - Описание
//  ГрупповыеУпаковкиБезПотребительских - Булево - Описание
Процедура ВыявитьРасхожденияВСтрокахДеревьев(ДеревоЗначений1, ДеревоЗначений2, КэшПроверенныхСтрок, ЕстьРасхождения,
	ТекстОшибки, ПерваяИтерация, ГрупповыеУпаковкиБезПотребительских = Ложь)
	
	Для Каждого СтрокаДерева1 Из ДеревоЗначений1.Строки Цикл
		
		СоответствующаяСтрокаДерева2 = КэшПроверенныхСтрок.Получить(СтрокаДерева1);
		Если СоответствующаяСтрокаДерева2 <> Неопределено Тогда
			ВыявитьРасхожденияВСтрокахДеревьев(
				СтрокаДерева1, СоответствующаяСтрокаДерева2, КэшПроверенныхСтрок, ЕстьРасхождения,
				ТекстОшибки, ПерваяИтерация, ГрупповыеУпаковкиБезПотребительских);
			Продолжить;
		КонецЕсли;
		
		Если ПерваяИтерация Тогда
			
			НайденнаяСтрокаДерева2 = ДеревоЗначений2.Строки.Найти(СтрокаДерева1.Штрихкод, "Штрихкод");
			Если НайденнаяСтрокаДерева2 = Неопределено Тогда
				СтрокаДерева1.ТекстОшибки = ТекстОшибки;
				СтрокаДерева1.ЕстьОшибки  = Истина;
				ЕстьРасхождения = Истина;
			Иначе
				КэшПроверенныхСтрок.Вставить(НайденнаяСтрокаДерева2, СтрокаДерева1);
				ВыявитьРасхожденияВСтрокахДеревьев(
					СтрокаДерева1, НайденнаяСтрокаДерева2, КэшПроверенныхСтрок, ЕстьРасхождения,
					ТекстОшибки, ПерваяИтерация, ГрупповыеУпаковкиБезПотребительских);
			КонецЕсли;
			
		Иначе
		
			Если СтрокаДерева1.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
				И СтрокаДерева1.Родитель <> Неопределено
				И СтрокаДерева1.Родитель.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
				И ГрупповыеУпаковкиБезПотребительских Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрокаДерева2 = ДеревоЗначений2.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева2, СтрокаДерева1);
			НоваяСтрокаДерева2.СоставКодаМаркировки = СтрокаДерева1.СоставКодаМаркировки;
			НоваяСтрокаДерева2.ТипШтрихкода         = СтрокаДерева1.ТипШтрихкода;
			НоваяСтрокаДерева2.ТекстОшибки          = ТекстОшибки;
			НоваяСтрокаДерева2.ЕстьОшибки           = Истина;
			ЕстьРасхождения = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Включает поддержку алкогольной продукции и заполняет параметры сканирования с учетом ее специфики.
// 
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  Контекст - Неопределено, ФормаКлиентскогоПриложения, ДокументСсылка - Описание
//  ФормаВыбора - ФормаКлиентскогоПриложения - форма выбора.
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции, по которому будут инициализированы параметры сканирования.
Процедура ЗаполнитьПараметрыСканированияДляАлкогольнойПродукции(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС")
		И (ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная")
		Или ВидПродукции = Неопределено) Тогда
		
		МодульШтрихкодированиеЕГАИСКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИСКлиентСервер");
		МодульШтрихкодированиеЕГАИСКлиентСервер.ЗаполнитьПараметрыСканирования(
			ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

// Включает поддержку табачной продукции и заполняет параметры сканирования с учетом ее специфики.
// 
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  Контекст - Неопределено, ФормаКлиентскогоПриложения, ДокументСсылка - Описание
//  ФормаВыбора - ФормаКлиентскогоПриложения - форма выбора.
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции, по которому будут инициализированы параметры сканирования.
Процедура ЗаполнитьПараметрыСканированияДляТабачнойПродукции(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП")
		И (ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак")
		Или ВидПродукции = Неопределено) Тогда
		
		МодульШтрихкодированиеМОТПКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТПКлиентСервер");
		МодульШтрихкодированиеМОТПКлиентСервер.ЗаполнитьПараметрыСканирования(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

// Включает поддержку обувной продукции и заполняет параметры сканирования с учетом ее специфики.
//
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  Контекст - Неопределено, ФормаКлиентскогоПриложения, ДокументСсылка - Описание
//  ФормаВыбора - ФормаКлиентскогоПриложения - форма выбора.
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции, по которому будут инициализированы параметры сканирования.
Процедура ЗаполнитьПараметрыСканированияДляПродукцииИСМП(ПараметрыСканирования, Контекст, ФормаВыбора, ВидПродукции)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		
		Если ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ВидПродукции)
			Или Не ЗначениеЗаполнено(ВидПродукции) Тогда
			
			МодульШтрихкодированиеМОТПКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПКлиентСервер");
			МодульШтрихкодированиеМОТПКлиентСервер.ЗаполнитьПараметрыСканирования(Контекст, ФормаВыбора, ВидПродукции, ПараметрыСканирования);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует соответствие, ключ которого - строка дерева, значение - структура, свойства и значения которой равны
// строке дерева.
//
// Параметры:
//  СтрокиДерева - КоллекцияСтрокДереваЗначений - Строки дерева.
//  Соответствие - Соответствие - Ключ - строка дерева, значение - структура значений строки дерева.
Процедура ПоместитьДанныеСтрокДереваВСоответствие(СтрокиДерева, Соответствие)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		ДанныеШтрихкода = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаДерева);
		Соответствие.Вставить(СтрокаДерева.Штрихкод, ДанныеШтрихкода);
		ПоместитьДанныеСтрокДереваВСоответствие(СтрокаДерева.Строки, Соответствие);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет информацию по EAN кодов маркировки по данным ИБ. Информация помещается в таблицу ДанныеПоШтрихкодам.ДанныеКодовМаркировки.
// 
// Параметры:
//  ДанныеКодовМаркировки - См. ИнициализацияТаблицыДанныхКодовМаркировки
//  ПараметрыСканирования - См. ПараметрыСканирования
Процедура ЗаполнитьСведенияПоШтрихкодамEAN(ДанныеКодовМаркировки, ПараметрыСканирования) Экспорт
	
	ШтрихкодыEAN                             = Новый Массив;
	КодыМаркировкиДляПолученияСведенийИзПула = Новый Массив;
	
	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл
		
		Если ПрисутствуетПродукцияИСМП(СтрокаДанных.ВидыПродукцииКодаМаркировки) Тогда
			КодыМаркировкиДляПолученияСведенийИзПула.Добавить(СтрокаДанных.Штрихкод);
		КонецЕсли;
		
		Если СтрокаДанных.ЭтоКодВводаОстатков Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
			Или ПрисутствуетАлкогольнаяПродукция(СтрокаДанных.ВидыПродукцииКодаМаркировки) // Код маркировки алкогольной продукции
			Или ЗначениеЗаполнено(СтрокаДанных.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДанных.ТребуетсяСопоставление = Истина;
		ШтрихкодДляПоиска = ?(ПустаяСтрока(СтрокаДанных.EAN), СтрокаДанных.Штрихкод, СтрокаДанных.EAN);
		ШтрихкодыEAN.Добавить(ШтрихкодДляПоиска);
		
	КонецЦикла;
	
	Если ДопустимаПродукцияИСМП(ПараметрыСканирования)
		И КодыМаркировкиДляПолученияСведенийИзПула.Количество() > 0 Тогда
		Если ТипЗнч(ДанныеКодовМаркировки) = Тип("Массив")
			И ДанныеКодовМаркировки.Количество() Тогда
			ИсточникТаблицаКодовМаркировки = ДанныеКодовМаркировки[0].Владелец();
		Иначе
			ИсточникТаблицаКодовМаркировки = ДанныеКодовМаркировки;
		КонецЕсли;
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(ИсточникТаблицаКодовМаркировки);
	КонецЕсли;
	
	ДанныеПулаПоКодамМаркировки = РегистрыСведений.ПулКодовМаркировкиСУЗ.ДанныеКодовМаркировки(КодыМаркировкиДляПолученияСведенийИзПула);
	ШтрихкодыEAN                = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ШтрихкодыEAN);
	
	ИнформацияПоШтрихкодамEAN = ДанныеПоШтрихкодамEAN(ШтрихкодыEAN);
	
	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл
		
		ЕстьОшибки = СтрокаДанных.ПримечаниеКРазборуШтрихкода <> Неопределено
			И ЗначениеЗаполнено(СтрокаДанных.ПримечаниеКРазборуШтрихкода.ТекстОшибки);
		
		ДанныеПулаПоКоду = Неопределено;
		Если ДанныеПулаПоКодамМаркировки <> Неопределено Тогда
			ДанныеПулаПоКоду = ДанныеПулаПоКодамМаркировки.Найти(СтрокаДанных.Штрихкод, "КодМаркировки");
		КонецЕсли;
		
		// Оптимизация. Заполнение способа ввода в оборот из Пула кодов маркировки
		Если ДанныеПулаПоКоду <> Неопределено
			И ЗначениеЗаполнено(ДанныеПулаПоКоду.СпособВводаВОборот)
			И Не ЗначениеЗаполнено(СтрокаДанных.СпособВводаВОборот) Тогда
			
			Если ДанныеПулаПоКоду.МаркировкаОстатков Тогда
				СпособВводаВОборот = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков;
			Иначе
				СпособВводаВОборот = ДанныеПулаПоКоду.СпособВводаВОборот;
			КонецЕсли;
			
			СтрокаДанных.ЭтоКодВводаОстатков      = ДанныеПулаПоКоду.МаркировкаОстатков;
			СтрокаДанных.ЕстьВПулеКодовМаркировки = Истина;
			СтрокаДанных.СпособВводаВОборот       = СпособВводаВОборот;
			
		КонецЕсли;
		
		Если ДанныеПулаПоКоду <> Неопределено
			И СтрокаДанных.ЭтоКодВводаОстатков Тогда
			
			Если ЗначениеЗаполнено(ДанныеПулаПоКоду.Номенклатура) Тогда
				СтрокаДанных.Номенклатура   = ДанныеПулаПоКоду.Номенклатура;
				СтрокаДанных.Характеристика = ДанныеПулаПоКоду.Характеристика;
			КонецЕсли;
			
			Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
				СтрокаДанных.СтрокаДерева.Номенклатура   = СтрокаДанных.Номенклатура;
				СтрокаДанных.СтрокаДерева.Характеристика = СтрокаДанных.Характеристика;
			КонецЕсли;
			
			СтрокаДанных.ТребуетсяСопоставление = Ложь;
			Продолжить;
			
		ИначеЕсли Не ЕстьОшибки И ШтрихкодированиеИСКлиентСервер.ЭтоШтрихкодВводаОстатков(СтрокаДанных.Штрихкод, Истина) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаИнформации Из ИнформацияПоШтрихкодамEAN.НайтиСтроки(Новый Структура("ШтрихкодEAN", СтрокаДанных.EAN)) Цикл
			
			ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокаИнформации);
			Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДанных.СтрокаДерева, СтрокаИнформации);
			КонецЕсли;
			
			СтрокаДанных.ТребуетсяСопоставление = Ложь;
			
			Если СтрокаДанных.Штрихкод = СтрокаДанных.EAN Или СтрокаДанных.Штрихкод = СтрокаДанных.GTIN Тогда
				
				ТипШтрихкодаСтрока = МенеджерОборудованияКлиентСервер.ОпределитьТипШтрихкода(СтрокаДанных.Штрихкод);
				
				СтрокаДанных.Идентифицирован         = Истина;
				СтрокаДанных.ЭтоШтрихкодНоменклатуры = Истина;
				СтрокаДанных.ТипШтрихкода = ШтрихкодированиеИСКлиентСервер.ТипШтрихкодаПоСтроке(ТипШтрихкодаСтрока);
				СтрокаДанных.ВидУпаковки  = Перечисления.ВидыУпаковокИС.Потребительская;
				
			КонецЕсли;
			
			ДанныеУточнения = Новый Структура(
				"Номенклатура, Характеристика", СтрокаДанных.Номенклатура, СтрокаДанных.Характеристика);
			СтрокаДанных.СписокНоменклатуры.Добавить(ДанныеУточнения);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОпределитьШтрихкодыВводаОстатков(ДанныеКодовМаркировки, ПараметрыСканирования)
	
	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл
		
		Если СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьОшибки = СтрокаДанных.ПримечаниеКРазборуШтрихкода <> Неопределено
			И ЗначениеЗаполнено(СтрокаДанных.ПримечаниеКРазборуШтрихкода.ТекстОшибки);
		ЭтоКодВводаОстатков = Не ЕстьОшибки И ШтрихкодированиеИСКлиентСервер.ЭтоШтрихкодВводаОстатков(СтрокаДанных.Штрихкод, Истина);
		
		Если (СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
			Или СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая) Тогда
			
			СтрокаДанных.ЭтоКодВводаОстатков = ЭтоКодВводаОстатков;
			СтрокаДанных.МаркируемаяПродукция = Истина;
			СтрокаДанных.ТребуетсяСопоставление = Не ЭтоКодВводаОстатков;
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет первоначальное заполнение таблицы "ДанныеКодовМаркировки" на основании "ДанныеШтрихкодов".
// 
// Параметры:
//  ДанныеКодовМаркировки - См. ИнициализацияТаблицыДанныхКодовМаркировки
//  ДанныеШтрихкодов - См. ИнициализацияДанныхПоШтрихкодам
//  ПараметрыСканирования - См. ПараметрыСканирования
Процедура ЗаполнитьДанныеКодовМаркировкиВходящимиДанными(ДанныеКодовМаркировки, ДанныеШтрихкодов, ПараметрыСканирования)
	
	ЗаполненоОтложеннымиКодами = Ложь;
	
	Если ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции) Тогда
		
		КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
		
		Если КэшМаркируемойПродукции = Неопределено Тогда  // Для фоновых заданий.
			КэшМаркируемойПродукции = ИнициализацияКэшаМаркируемойПродукции();
		КонецЕсли;
		
		Если КэшМаркируемойПродукции.ОтложенныеКодыМаркировки.Количество() > 0 Тогда
			
			Для Каждого ОтложенныйКод Из КэшМаркируемойПродукции.ОтложенныеКодыМаркировки Цикл
				НоваяСтрока = ДанныеКодовМаркировки.Добавить();
				НоваяСтрока.Штрихкод   = ОтложенныйКод.Штрихкод;
				НоваяСтрока.Количество = 1;
				НоваяСтрока.Входящий   = Истина;
				НоваяСтрока.ШтрихкодBase64 = ОтложенныйКод.ШтрихкодBase64;
			КонецЦикла;
			
			КэшМаркируемойПродукции.ОтложенныеКодыМаркировки = Новый Массив;
			ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, ПараметрыСканирования.КэшМаркируемойПродукции);
			ЗаполненоОтложеннымиКодами = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗаполненоОтложеннымиКодами Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ДанныеШтрихкода Из ДанныеШтрихкодов Цикл
		НоваяСтрока = ДанныеКодовМаркировки.Добавить();
		НоваяСтрока.Штрихкод   = СокрЛП(ДанныеШтрихкода.Штрихкод);
		НоваяСтрока.Количество = ДанныеШтрихкода.Количество;
		НоваяСтрока.Входящий   = Истина;
		НоваяСтрока.ШтрихкодBase64 = ШтрихкодированиеИСКлиентСервер.ШтрихкодВBase64(ДанныеШтрихкода.Штрихкод);
	КонецЦикла;
	
КонецПроцедуры

// Выполняет разбор штрихкодов (кодов маркировки) в таблице "ДанныеКодовМаркировки"
// 
// Параметры:
//  ДанныеКодовМаркировки - См. ИнициализацияТаблицыДанныхКодовМаркировки
//  ПараметрыСканирования - См. ПараметрыСканирования
Процедура НормализоватьИРазобратьНаСоставляющиеКодыМаркировки(ДанныеКодовМаркировки, ПараметрыСканирования, КешДанныхРазбора = Неопределено)
	
	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл
		
		ВидыПродукции = ПараметрыСканирования.ДопустимыеВидыПродукции;
		
		ДанныеРазбораИПримечание = Неопределено;
		Если КешДанныхРазбора <> Неопределено Тогда
			ДанныеРазбораИПримечание = КешДанныхРазбора[СтрокаДанных.Штрихкод];
			Если ДанныеРазбораИПримечание <> Неопределено Тогда
				ДанныеРазбора                            = ДанныеРазбораИПримечание.ДанныеРазбора;
				СтрокаДанных.ПримечаниеКРазборуШтрихкода = ДанныеРазбораИПримечание.ПримечаниеКРазборуШтрихкода;
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеРазбораИПримечание = Неопределено Тогда
			ДанныеРазбора = ШтрихкодированиеИССлужебный.РазобратьКодМаркировки(СтрокаДанных.Штрихкод, ВидыПродукции, СтрокаДанных.ПримечаниеКРазборуШтрихкода);
		КонецЕсли;
		
		Если ДанныеРазбора = Неопределено Тогда
			ЗаполнитьСтрокуДанныхКодовМаркировкиСНеопределеннымСоставомКода(СтрокаДанных);
		Иначе
			ЗаполнитьСтрокуДанныхКодовМаркировкиПоДаннымРазбора(СтрокаДанных, ДанныеРазбора);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуДанныхКодовМаркировкиСНеопределеннымСоставомКода(СтрокаДанных)
	
	ЭтоGTIN = МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(СтрокаДанных.Штрихкод);
	Если ЭтоGTIN И СтрДлина(СтрокаДанных.Штрихкод) = 14 Тогда
		СтрокаДанных.EAN  = ШтрихкодированиеИСКлиентСервер.ШтрихкодEANИзGTIN(СтрокаДанных.Штрихкод);
		СтрокаДанных.GTIN = СтрокаДанных.Штрихкод;
	ИначеЕсли ЭтоGTIN Тогда
		СтрокаДанных.EAN  = СтрокаДанных.Штрихкод;
		СтрокаДанных.GTIN = ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(СтрокаДанных.Штрихкод);
	Иначе
		СтрокаДанных.EAN = СтрокаДанных.Штрихкод;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет разбор штрихкода строки таблицы "ДанныеКодовМаркировки" и заполняет строку данными разбора.
// 
// Параметры:
//  ДанныеКодовМаркировки - См. ИнициализацияТаблицыДанныхКодовМаркировки
//  ВидыПродукции - Массив Из ПеречислениеСсылка.ВидыПродукцииИС - отбор по видам продукции.
Процедура ЗаполнитьСтрокуДанныхКодовМаркировкиПоДаннымРазбора(СтрокаДанных, ДанныеРазбора)
	
	// Заполнение GTIN и EAN
	ЗаполнитьЗначенияСвойств(СтрокаДанных, ДанныеРазбора.СоставКодаМаркировки);
	
	СтрокаДанных.СоставКодаМаркировки = ДанныеРазбора.СоставКодаМаркировки;
	СтрокаДанных.ВидУпаковки          = ДанныеРазбора.ВидУпаковки;
	СтрокаДанных.Штрихкод             = ДанныеРазбора.НормализованныйКодМаркировки;
	СтрокаДанных.ТипШтрихкода         = ДанныеРазбора.ТипШтрихкода;
	
	Если ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
		И ДанныеРазбора.ВидыПродукции.Количество() = 1 Тогда
		СтрокаДанных.ВидПродукции = ДанныеРазбора.ВидыПродукции.Получить(0);
	ИначеЕсли ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
		СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
	ИначеЕсли ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
		Или ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.АкцизнаяМаркаСНомеромИСерией Тогда
		СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
		Если ДанныеРазбора.ВидыПродукции.Количество() = 1 Тогда
			СтрокаДанных.ВидПродукции = ДанныеРазбора.ВидыПродукции.Получить(0);
		КонецЕсли;
	КонецЕсли;
	
	СтрокаДанных.ВидыПродукцииКодаМаркировки = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеРазбора.ВидыПродукции, Ложь);
	
КонецПроцедуры

// Возвращает состав колонок, который является общим для дерева упаковок и таблицы значений маркированные товары.
//
// Параметры:
// Возвращаемое значение:
//  Структура - Описание:
//   * ТипШтрихкода - Неопределено, ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода кода маркировки.
//   * УпаковкаВерхнегоУровня - Неопределено -
//   * ВидПродукции - Неопределено, ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции кода маркировки.
//   * Серия - Неопределено, ОпределяемыйТип.СерияНоменклатуры - Серия номенклатуры.
//   * Характеристика - Неопределено, ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика.
//   * Номенклатура - Неопределено, ОпределяемыйТип.Номенклатура - Номенклатура.
//   * Штрихкод - Неопределено, Строка - Штрихкод.
//   * ШтрихкодУпаковки - Неопределено, СправочникСсылка.ШтрихкодыУпаковокТоваров - ссылка на элемент справочника.
//   * ИдентификаторСтроки - Неопределено, Строка - Идентификатор.
Функция ОбщиеКолонкиКоллекцийВложенныхШтрихкодов()
	
	КоллекцияОбязательныхКолонок = Новый Структура;
	
	КоллекцияОбязательныхКолонок.Вставить("ИдентификаторСтроки",       Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("ШтрихкодУпаковки",          Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("Штрихкод",                  Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("Номенклатура",              Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("Характеристика",            Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("Серия",                     Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("Количество",                Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("ВидПродукции",              Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("УпаковкаВерхнегоУровня",    Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("ТипШтрихкода",              Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("ВидУпаковки",               Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("СоставКодаМаркировки",      Неопределено);
	
	Возврат КоллекцияОбязательныхКолонок;
	
КонецФункции

#Область ПроверкаНаОшибки

// Выполняет контроль на соответствие маркируемой продукции по документу основания.
//
// Параметры:
//  ДанныеПоШтрихкодам - См. ИнициализацияДанныхПоШтрихкодам
//  ПараметрыСканирования - См. ПараметрыСканирования
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ПроверитьНаСоответствиеДокументуОснованию(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки)
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	Если Не (ПараметрыСканирования.КонтрольРасхожденийСДокументомОснованием
		И ЗначениеЗаполнено(ПараметрыСканирования.ДокументОснование)) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДокументаОснования = ДанныеДокументаОснования(ПараметрыСканирования);
	ТекстОшибки = ТекстОшибкиНеСоответствуетДокументуОснованию();
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено Тогда
		
		Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл 
			
			Если Не ЗначениеЗаполнено(СтрокаДанных.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Номенклатура",   СтрокаДанных.Номенклатура);
			ПараметрыПоиска.Вставить("Характеристика", СтрокаДанных.Характеристика);
			
			НайденныеСтроки = ДанныеДокументаОснования.НайтиСтроки(ПараметрыПоиска);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
			// Допустимо не указывать серию в одном из документов
			ИначеЕсли НЕ (ЗначениеЗаполнено(НайденныеСтроки[0].Серия) И ЗначениеЗаполнено(СтрокаДанных.Серия)) Тогда
				Продолжить;
			Иначе
				ПараметрыПоиска.Вставить("Серия", СтрокаДанных.Серия);
				НайденныеСтроки = ДанныеДокументаОснования.НайтиСтроки(ПараметрыПоиска);
			КонецЕсли;
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				СтрокаДанных.ТекстОшибки = ТекстОшибки;
				ЕстьОшибки = Истина;
			КонецЕсли;
			
		КонецЦикла;
			
	Иначе
		
		МаркированныеТовары = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары;
		Для Каждого СтрокаМаркированныеТовары Из МаркированныеТовары Цикл
			
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Номенклатура",   СтрокаМаркированныеТовары.Номенклатура);
			ПараметрыПоиска.Вставить("Характеристика", СтрокаМаркированныеТовары.Характеристика);
			
			НайденныеСтроки = ДанныеДокументаОснования.НайтиСтроки(ПараметрыПоиска);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
			// Допустимо не указывать серию в одном из документов
			ИначеЕсли НЕ (ЗначениеЗаполнено(НайденныеСтроки[0].Серия)
				И ЗначениеЗаполнено(СтрокаМаркированныеТовары.Серия)) Тогда
				Продолжить;
			Иначе
				ПараметрыПоиска.Вставить("Серия", СтрокаМаркированныеТовары.Серия);
				НайденныеСтроки = ДанныеДокументаОснования.НайтиСтроки(ПараметрыПоиска);
			КонецЕсли;
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				ЕстьОшибки = Истина;
				ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = Истина;
				СтрокаМаркированныеТовары.СтрокаДерева.ЕстьОшибки  = Истина;
				СтрокаМаркированныеТовары.СтрокаДерева.ТекстОшибки = ТекстОшибки;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку на соответствие вида продукции номенклатуры виду продукции, вычисленному по значению кода маркировки.
//
// Параметры:
//  ДанныеПоШтрихкодам - См. ИнициализацияДанныхПоШтрихкодам
//  ПараметрыСканирования - См. ПараметрыСканирования
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ПроверитьНаСоответствиеНоменклатурыВидуПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки)
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если ЗначениеЗаполнено(СтрокаДанных.Номенклатура) И Не ЗначениеЗаполнено(СтрокаДанных.ВидПродукции)
			И ПараметрыСканирования.ТолькоМаркируемаяПродукция Тогда
			
			СтрокаДанных.ТекстОшибки = ТекстОшибкиНеЗаданВидПродукцииНоменклатуры(СтрокаДанных.Номенклатура);
			ЕстьОшибки = Истина;
			
		ИначеЕсли Не СтрокаДанных.ЭтоШтрихкодНоменклатуры И ЗначениеЗаполнено(СтрокаДанных.ВидПродукции)
			И СтрокаДанных.ВидыПродукцииКодаМаркировки.Найти(СтрокаДанных.ВидПродукции) = Неопределено Тогда
			
			СтрокаДанных.ТекстОшибки = ТекстОшибкиШтрихкодСоответствуетВидамПродукции(СтрокаДанных.ВидыПродукцииКодаМаркировки);;
			ЕстьОшибки = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		
		Для Каждого СтрокаТовары Из ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары Цикл
			
			Если ЗначениеЗаполнено(СтрокаДанных.Номенклатура) И Не ЗначениеЗаполнено(СтрокаТовары.ВидПродукции) Тогда
				ЕстьОшибки = Истина;
				ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = Истина;
				СтрокаТовары.СтрокаДерева.ЕстьОшибки         = Истина;
				СтрокаТовары.СтрокаДерева.ТекстОшибки        = ТекстОшибкиНеЗаданВидПродукции();
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку на повторное сканирование кода маркировки.
//
// Параметры:
//  ДанныеПоШтрихкодам - См. ИнициализацияДанныхПоШтрихкодам
//  ПараметрыСканирования - См. ПараметрыСканирования
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ПроверитьНаУжеДобавленныеДанныеВДокумент(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки)
	
	Если Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции) Тогда
		Возврат;
	КонецЕсли; 
	
	КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
	ОбработанныеКодыМаркировки = КэшМаркируемойПродукции.ОбработанныеКодыМаркировки;
	
	//Проверка для упаковок
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		ДеревоУпаковок = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
		ПроверитьСтрокиДереваНаУжеДобавленные(ДеревоУпаковок.Строки, ОбработанныеКодыМаркировки, ЕстьОшибки);
		ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = ЕстьОшибки;
	Иначе
		ПроверитьОбработанныеШтрихкодыНаУжеДобавленные(ДанныеПоШтрихкодам, ОбработанныеКодыМаркировки, ЕстьОшибки);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку видов продукции данных по штрихкодам на вхождение в массив допустимых видов продукции, который
// задан в параметрах сканирования.
//
// Параметры:
//  ДанныеПоШтрихкодам - См. ИнициализацияДанныхПоШтрихкодам
//  ПараметрыСканирования - См. ПараметрыСканирования
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ПроверитьНаДопустимостьОбработкиВидовПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки)
	
	Отказ                = Ложь;
	ИдентификаторыОшибок = ШтрихкодированиеИССлужебный.ИдентификаторыОшибокРазобраКодаМаркировки();
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		ВидыПродукции = Новый Массив;
		
		Если ЗначениеЗаполнено(СтрокаДанных.ВидПродукции) Тогда
			
			Если ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(СтрокаДанных.ВидПродукции) = Неопределено
				И ВидыПродукции.Найти(СтрокаДанных.ВидПродукции) = Неопределено Тогда
				ВидыПродукции.Добавить(СтрокаДанных.ВидПродукции);
			КонецЕсли;
			
		ИначеЕсли СтрокаДанных.ПримечаниеКРазборуШтрихкода <> Неопределено
			И СтрокаДанных.ПримечаниеКРазборуШтрихкода.ИдентификаторОшибки = ИдентификаторыОшибок.КодМаркировкиСоответствуетДругимВидамПродукции Тогда
			
			РезультатРазбора = СтрокаДанных.ПримечаниеКРазборуШтрихкода.РезультатРазбора;
			Для Каждого Элемент Из РезультатРазбора Цикл
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыПродукции, Элемент.ВидыПродукции, Истина);
			КонецЦикла;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
		Если ВидыПродукции.Количество() > 0 Тогда
			Отказ                    = Истина;
			СтрокаДанных.ТекстОшибки = ТекстОшибкиШтрихкодСоответствуетВидамПродукции(ВидыПродукции);
		КонецЕсли;
		
	КонецЦикла;
	
	ЕстьОшибки                                          = ?(Отказ, Истина, ЕстьОшибки);
	ДанныеПоШтрихкодам.ОшибкаДопустимостиВидовПродукции = ?(Отказ, Истина, ДанныеПоШтрихкодам.ОшибкаДопустимостиВидовПродукции);
	
КонецПроцедуры

// Проверяет коллекцию обработанные штрихкоды на повторный ввод.
//
// Параметры:
//  ОбработанныеШтрихкоды - Соответствие - штрихкоды, которые удалось обработать.
//  МаркируемаяПродукцияДокумента - Соответствие - закэшированные данные.
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ПроверитьОбработанныеШтрихкодыНаУжеДобавленные(ДанныеПоШтрихкодам, МаркируемаяПродукцияДокумента, ЕстьОшибки)
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл 
		
		Если Не СтрокаДанных.Входящий Тогда
			Продолжить;
		КонецЕсли;
		
		Если МаркируемаяПродукцияДокумента[СтрокаДанных.Штрихкод] <> Неопределено Тогда
			СтрокаДанных.ТекстОшибки = ТекстОшибкиУжеДобавленаВДокумент();
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет штрихкоды строк дерева упаковок на попытку повторного ввода.
//
// Параметры:
//  СтрокиДерева - КоллекцияСтрокДереваЗначений - Строки дерева.
//  МаркируемаяПродукцияДокумента - Соответствие - закэшированные данные.
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ПроверитьСтрокиДереваНаУжеДобавленные(СтрокиДерева, МаркируемаяПродукцияДокумента, ЕстьОшибки)
	
	Если МаркируемаяПродукцияДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если МаркируемаяПродукцияДокумента[СтрокаДерева.Штрихкод] <> Неопределено Тогда
			
			СтрокаДерева.ЕстьОшибки = Истина;
			СтрокаДерева.ТекстОшибки = ТекстОшибкиУжеДобавленаВДокумент();
			ЕстьОшибки = Истина;
			
		КонецЕсли;
		
		ПроверитьСтрокиДереваНаУжеДобавленные(СтрокаДерева.Строки, МаркируемаяПродукцияДокумента, ЕстьОшибки);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТребуетсяОткрытьФормуВводаКодаМаркировки(СтрокаДанных, ПараметрыСканирования)
	
	Результат = Неопределено;
	Если СтрокаДанных.ЭтоШтрихкодНоменклатуры
		И СтрокаДанных.МаркируемаяПродукция
		И ЗначениеЗаполнено(СтрокаДанных.ВидПродукции) 
		И ПараметрыСканирования.РазрешеноЗапрашиватьКодМаркировки Тогда
		
		ДанныеШтрихкода = СтрокаТаблицыДанныеКодовМаркировкиВСтруктуру(СтрокаДанных);
		Результат = РезультатОбработкиТребуетсяОткрытьФормуВводаКодаМаркировки(ДанныеШтрихкода, ПараметрыСканирования, Неопределено);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверкаОшибкиПриРазбореКодаМаркировки(СтрокаДанных, ПараметрыСканирования)
	
	Если ПустаяСтрока(СтрокаДанных.ТекстОшибки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода();
	Если НайтиНедопустимыеСимволыXML(СтрокаДанных.Штрихкод) = 0 Тогда
		РезультатОбработки.Штрихкод = СтрокаДанных.Штрихкод;
	КонецЕсли;
	РезультатОбработки.ЕстьОшибки  = Истина;
	РезультатОбработки.ОбщаяОшибка = Истина;
	РезультатОбработки.ТекстОшибки = СтрокаДанных.ТекстОшибки;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Выполняет проверку на допустимость обработки вида продукции ИС. Допустимые виды продукции задаются в параметрах
// сканирования.
//
// Параметры:
//  СтрокаДанных - СтрокаТаблицыЗначений - (См. ШтрихкодированиеИС.ИнициализироватьТаблицуМаркированныеТовары).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//   (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция КонтрольНаДопустимыеВидыПродукции(СтрокаДанных, ПараметрыСканирования)
	
	РезультатОбработки = Неопределено;
	
	ВидПродукцииИС = СтрокаДанных.ВидПродукции;
	
	Если Не ЗначениеЗаполнено(ВидПродукцииИС) Тогда
		
		ИдентификаторыОшибок = ШтрихкодированиеИССлужебный.ИдентификаторыОшибокРазобраКодаМаркировки();
		Если СтрокаДанных.ПримечаниеКРазборуШтрихкода <> Неопределено
			И СтрокаДанных.ПримечаниеКРазборуШтрихкода.ИдентификаторОшибки = ИдентификаторыОшибок.КодМаркировкиСоответствуетДругимВидамПродукции Тогда
			
			ВидыПродукцииИС = Новый Массив;
			
			РезультатРазбора = СтрокаДанных.ПримечаниеКРазборуШтрихкода.РезультатРазбора;
			Для Каждого Элемент Из РезультатРазбора Цикл
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыПродукцииИС, Элемент.ВидыПродукции, Истина);
			КонецЦикла;
			
			РезультатОбработки = РезультатОбработкиОшибкаКонтроляДопустимыхВидовПродукции(СтрокаДанных, ПараметрыСканирования, ВидыПродукцииИС);
			
		//Сканирование немаркируемой продукции в форме проверки и подбора
		ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.Номенклатура)
			И ПараметрыСканирования.ДопустимыеВидыПродукции.Количество() = 1
			И ПараметрыСканирования.ДопустимыеВидыПродукции[0] <> ВидПродукцииИС Тогда
			
			РезультатОбработки = РезультатОбработкиОшибкаКонтроляДопустимыхВидовПродукции(СтрокаДанных, ПараметрыСканирования, НСтр("ru = 'Немаркируемая продукция'"));
			
		КонецЕсли;
		
		Возврат РезультатОбработки;
		
	КонецЕсли;
	
	ДопустимВидПродукции = ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(ВидПродукцииИС) <> Неопределено;
	
	Если Не ДопустимВидПродукции Тогда
		
		РезультатОбработки = РезультатОбработкиОшибкаКонтроляДопустимыхВидовПродукции(СтрокаДанных, ПараметрыСканирования, ВидПродукцииИС);
		
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Выполняет проверку кода маркировки на уже обработанный, путем поиска в кэше обработанных кодов маркировки.
// 
// Параметры:
//  Штрихкод - Строка- Код маркировки.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//   (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ПроверкаШтрихкодаНаУжеДобавленный(Штрихкод, ПараметрыСканирования)
	
	Если Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
	ОбработанныеКодыМаркировки = КэшМаркируемойПродукции.ОбработанныеКодыМаркировки;

	ДанныеШтрихкода = ОбработанныеКодыМаркировки.Получить(Штрихкод);
	Если ДанныеШтрихкода = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеШтрихкода.ТекстОшибки             = ТекстОшибкиУжеДобавленаВДокумент();
	РезультатОбработки                      = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования);
	РезультатОбработки.ДанныеШтрихкода      = ДанныеШтрихкода;
	РезультатОбработки.ЕстьОшибки           = Истина;
	РезультатОбработки.ОбщаяОшибка          = Истина;
	ЗаполнитьЗначенияСвойств(РезультатОбработки, ДанныеШтрихкода);
	
	Возврат РезультатОбработки;
	
КонецФункции

#Область ТекстыОшибок

// Возвращает текст ошибки, что вид продукции не поддерживается.
//
// Параметры:
//  СтрокаДанных - СтрокаТаблицыЗначений - (См. ШтрихкодированиеИС.ИнициализироватьТаблицуМаркированныеТовары).
//  ПоддерживаемыеВидыПродукции - Массив - Список допустимых видов продукции.
//  ВидПродукцииШтрихкода - ПеречислениеСсылка.ВидыПродукцииИС, Массив - вид продукции штрихкода.
// Возвращаемое значение:
//  Строка - Текст ошибки.
Функция ТекстОшибкиНеПоддерживаетсяВидПродукции(СтрокаДанных, ПоддерживаемыеВидыПродукции, ВидПродукцииШтрихкода)
	
	ПредставлениеВидаПродукции = НСтр("ru = '<нет данных>'");
	Если ЗначениеЗаполнено(ВидПродукцииШтрихкода) Тогда
		Если ТипЗнч(ВидПродукцииШтрихкода) = Тип("Массив") Тогда
			ПредставлениеВидаПродукции = СтрСоединить(ВидПродукцииШтрихкода, ", ");
		Иначе
			ПредставлениеВидаПродукции = Строка(ВидПродукцииШтрихкода);
		КонецЕсли;
	КонецЕсли;
	
	Позиция = НайтиНедопустимыеСимволыXML(СтрокаДанных.Штрихкод);
	Если Позиция > 0 Тогда
		СтрокаДанных.Штрихкод = Лев(СтрокаДанных.Штрихкод, Позиция - 1);
	КонецЕсли;
	ПредставлениеШтрихкода = ШтрихкодированиеИСКлиентСервер.ПредставлениеШтрихкода(СтрокаДанных.Штрихкод);
	
	Если ПоддерживаемыеВидыПродукции.Количество() = 0 Тогда
		ПоддерживаемыеВидыПродукцииСтрокой = НСтр("ru = 'Не определены'");
	Иначе
		ПоддерживаемыеВидыПродукцииСтрокой = СтрСоединить(ПоддерживаемыеВидыПродукции, " ,");
	КонецЕсли;
	
	Фрагмент1 = НСтр("ru = 'Считанный код'");
	Фрагмент2 = Новый ФорматированнаяСтрока(
		ПредставлениеШтрихкода, Новый Шрифт(,,,,Истина),
		ЦветаСтиля.ЦветГиперссылкиГосИС,,
		"СкопироватьШтриховойКодВБуферОбмена");
	Фрагмент3 = СтрШаблон(НСтр("ru='опознан как %1.'"), НРег(ПредставлениеВидаПродукции));
	Фрагмент4 = СтрШаблон(НСтр("ru='Ожидаемые виды продукции: %1.'"), ПоддерживаемыеВидыПродукцииСтрокой);
	
	ТекстОшибки = Новый ФорматированнаяСтрока(Фрагмент1, " ", Фрагмент2, " ", Фрагмент3, Символы.ПС, Фрагмент4);
	
	Возврат ТекстОшибки;
	
КонецФункции

Функция ТекстОшибкиНеЗаданВидПродукцииНоменклатуры(Номенклатура)
	
	ШаблонОшибки =  НСтр("ru = 'Не задан вид продукции номенклатуры %1'");
	Возврат СтрШаблон(ШаблонОшибки, Номенклатура);
	
КонецФункции

Функция ТекстОшибкиНеЗаданВидПродукции()
	
	Возврат НСтр("ru = 'Вид продукции не определен'");
	
КонецФункции

Функция ТекстОшибкиШтрихкодСоответствуетВидамПродукции(ВидыПродукцииКодаМаркировки)
	
	ПредставлениеВидовПродукцииКода = СтрСоединить(ВидыПродукцииКодаМаркировки, ",");
	ШаблонОшибки = НСтр("ru = 'Значение штрихкода соответствует видам продукции: %1'");
	Возврат СтрШаблон(ШаблонОшибки, ПредставлениеВидовПродукцииКода);
	
КонецФункции

Функция ТекстОшибкиНеСоответствуетДокументуОснованию()
	
	Возврат НСтр("ru = 'Не соответствует документу-основанию'");
	
КонецФункции

Функция ТекстОшибкиОтсутствуетПоДаннымСервисаИСМП()
	
	Возврат НСтр("ru='Отсутствует по данным сервиса ИС МП.'");
	
КонецФункции

Функция ТекстОшибкиОтсутствуетПоДаннымИнформационнойБазы()
	
	Возврат НСтр("ru='Отсутствует по данным ИБ.'");
	
КонецФункции

// Возвращает шаблон ошибки уже добавлена в документ.
//
// Параметры:
// Возвращаемое значение:
//  Строка - Шаблон ошибки.
Функция ТекстОшибкиУжеДобавленаВДокумент()
	
	Возврат НСтр("ru='Уже добавлена в документ'");
	
КонецФункции

Функция ТекстОшибкиОбрабатываетсяПовторно()
	
	Возврат НСтр("ru='Обрабатывается повторно'");
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ФормированиеИОбработкаРезультата

#Область РезультатНеТребуетУточненияДанных

// Формирует результат обработки штрихкодов для кодов маркировки, данные которых не удалось сформировать в связи с их
// отсутствием.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
// Возвращаемое значение:
//   (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция РезультатОбработкиДанныеПоКодуМаркировкиНеНайдены(Форма, ДанныеШтрихкода, ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ИсходныеДанные = Новый Структура(
		"Штрихкод, Количество",
		ДанныеШтрихкода.Штрихкод, ДанныеШтрихкода.Количество);
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	РезультатОбработки.ИсходныеДанные = ИсходныеДанные;
	
	Если ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры Тогда
		
		Если ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура) Тогда
			
			Если ПараметрыСканирования.РазрешенаОбработкаБезУказанияМарки
				Или Не ЗначениеЗаполнено(ДанныеШтрихкода.ВидПродукции) Тогда
				
				ДанныеШтрихкода.ОбработатьБезМаркировки = Истина;
				ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры = Истина;
				
				РезультатОбработки = РезультатОбработкиШтрихкодаМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования);
				
			Иначе
				
				РезультатОбработки = РезультатОбработкиТребуетсяОткрытьФормуВводаКодаМаркировки(ДанныеШтрихкода, ПараметрыСканирования, Форма);
				
			КонецЕсли;
			
		Иначе
			
			ДанныеДляСопоставленияНоменклатуры = Новый Структура;
			ДанныеДляСопоставленияНоменклатуры.Вставить("ИсходныеДанные",          ИсходныеДанные);
			ДанныеДляСопоставленияНоменклатуры.Вставить("ШтрихкодыКСопоставлению", Новый Массив);
			ДанныеДляСопоставленияНоменклатуры.Вставить("ПараметрыСканирования",   ПараметрыСканирования);
			ДанныеДляСопоставленияНоменклатуры.ШтрихкодыКСопоставлению.Добавить(ИсходныеДанные);
			
			КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
			КэшМаркируемойПродукции.ДанныеДляУточненияСведенийПользователя.Операция = "СопоставлениеНоменклатуры";
			КэшМаркируемойПродукции.ДанныеДляУточненияСведенийПользователя.Данные   = ДанныеДляСопоставленияНоменклатуры;
			
			РезультатОбработки.ТребуетсяСопоставлениеНоменклатуры = Истина;
			РезультатОбработки.ШтрихкодыПродукцииДляСопоставления.Добавить(ИсходныеДанные);
			
		КонецЕсли;
		
	Иначе
		
		Если ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
			И Не ПараметрыСканирования.РазрешенаОбработкаНеНайденныхЛогистическихУпаковок Тогда
			
			РезультатОбработки.ТекстОшибки = НСтр("ru = 'Упаковка не найдена'");
			РезультатОбработки.ЕстьОшибки  = Истина;
			
		ИначеЕсли Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура) Тогда
			
			РезультатОбработки.ТребуетсяОбработкаШтрихкода = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Формирует результат обработки штрихкодов для кодов маркировки, в данных которых выявлены ошибки.
//
// Параметры:
//  ДанныеШтрихкодов - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ДанныеШтрихкода -  (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ФормаУникальныйИдентификатор - ФормаКлиентскогоПриложения, УникальныйИдентификатор - идентификатор, по которому 
//    помещается дерево упаковок во временное хранилище.
// Возвращаемое значение:
//   (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция РезультатОбработкиШтрихкодаПриОшибках(ДанныеШтрихкодов, ДанныеШтрихкода, ПараметрыСканирования, ФормаУникальныйИдентификатор) Экспорт
	
	Если ДанныеШтрихкодов.ЕстьОшибки Тогда
		
		РезультатДобавления = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования);
		РезультатДобавления.ТекстОшибки = ДанныеШтрихкодов.ТекстОшибки;
		РезультатДобавления.ЕстьОшибки  = ДанныеШтрихкодов.ЕстьОшибки;
		РезультатДобавления.ОбщаяОшибка = Истина;
		
		Возврат РезультатДобавления;
		
	КонецЕсли;
	
	// Условие для дерева.
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковкаПоВиду(ДанныеШтрихкода.ВидУпаковки)
		И ДанныеШтрихкодов.ВложенныеШтрихкоды <> Неопределено Тогда
		
		РезультатДобавления = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
		РезультатДобавления.Штрихкод     = ДанныеШтрихкода.Штрихкод;
		РезультатДобавления.ТипШтрихкода = ДанныеШтрихкода.ТипШтрихкода;
		Если ТипЗнч(ФормаУникальныйИдентификатор) = Тип("УникальныйИдентификатор") Тогда
			РезультатДобавления.АдресДереваУпаковок = ПоместитьВоВременноеХранилище(ДанныеШтрихкодов.ВложенныеШтрихкоды.ДеревоУпаковок, ФормаУникальныйИдентификатор);
		Иначе
			РезультатДобавления.АдресДереваУпаковок = ПоместитьВоВременноеХранилище(ДанныеШтрихкодов.ВложенныеШтрихкоды.ДеревоУпаковок, ФормаУникальныйИдентификатор.УникальныйИдентификатор);
		КонецЕсли;
		РезультатДобавления.ЕстьОшибкиВДеревеУпаковок = ДанныеШтрихкодов.ЕстьОшибкиВДеревеУпаковок;
		
	Иначе
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС")
			И ПрисутствуетАлкогольнаяПродукция(ДанныеШтрихкода.ВидыПродукцииКодаМаркировки) Тогда
			
			МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
			РезультатДобавления = МодульШтрихкодированиеЕГАИС.РезультатОбработкиШтрихкодаМаркируемойПродукцииПриОшибках(ДанныеШтрихкода);
			
		ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП")
			И ПрисутствуетТабачнаяПродукция(ДанныеШтрихкода.ВидыПродукцииКодаМаркировки) Тогда
			
			МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
			РезультатДобавления = МодульШтрихкодированиеМОТП.РезультатОбработкиКодаМаркировкиПриОшибках(ДанныеШтрихкода, ПараметрыСканирования);
			
		ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП")
			И ПрисутствуетПродукцияИСМП(ДанныеШтрихкода.ВидыПродукцииКодаМаркировки) Тогда
			
			МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
			РезультатДобавления = МодульШтрихкодированиеИСМПСлужебный.РезультатОбработкиКодаМаркировкиПриОшибках(ДанныеШтрихкода, ПараметрыСканирования);
			
		Иначе
			
			РезультатДобавления = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования);
			РезультатДобавления.ТекстОшибки = ДанныеШтрихкода.ТекстОшибки;
			РезультатДобавления.ЕстьОшибки  = Истина;
			РезультатДобавления.ОбщаяОшибка = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатДобавления;
	
КонецФункции

#КонецОбласти

#Область РезультатТребуетУточненияДанных

Функция РезультатОбработкиТребуетсяОткрытьФормуВводаКодаМаркировки(ДанныеШтрихкода, ПараметрыСканирования, Форма = Неопределено)
	
	ИсходныеДанные = Новый Структура("Штрихкод, Количество", ДанныеШтрихкода.Штрихкод, ДанныеШтрихкода.Количество);
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	РезультатОбработки.ОткрытьФормуВводаКодаМаркировки = Истина;
	РезультатОбработки.ВидыПродукции.Добавить(ДанныеШтрихкода.ВидПродукции);
	
	ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиентСервер.ПараметрыОткрытияФормыВводаКодаМаркировки();
	ПараметрыОткрытияФормы.ВидПродукции           = ДанныеШтрихкода.ВидПродукции;
	ПараметрыОткрытияФормы.МаркируемаяПродукция   = Истина;
	ПараметрыОткрытияФормы.ПараметрыСканирования  = ПараметрыСканирования;
	ПараметрыОткрытияФормы.Номенклатура           = ДанныеШтрихкода.Номенклатура;
	ПараметрыОткрытияФормы.Характеристика         = ДанныеШтрихкода.Характеристика;
	ПараметрыОткрытияФормы.ДанныеШтрихкода        = ИсходныеДанные;
	
	Если Форма <> Неопределено И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		ПараметрыОткрытияФормы.Документ = Форма.Объект.Ссылка;
	КонецЕсли;
	
	ДанныеКэша = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
	ДанныеКэша.ДанныеДляУточненияСведенийПользователя.Операция = "ОткрытьФормуВводаКодаМаркировки";
	ДанныеКэша.ДанныеДляУточненияСведенийПользователя.Данные   = ПараметрыОткрытияФормы;
	
	РезультатОбработки.ДанныеШтрихкода = ДанныеШтрихкода;
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция РезультатОбработкиТребуетсяСопоставлениеНоменклатуры(ДанныеШтрихкода, СписокШтрихкодов, ПараметрыСканирования)
	
	ШтрихкодыКСопоставлению = Новый Массив;
	Для Каждого Штрихкод Из СписокШтрихкодов Цикл
		ШтрихкодыКСопоставлению.Добавить(
			Новый Структура("Штрихкод, Количество", Штрихкод, 1));
	КонецЦикла;
	
	Если ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции) Тогда
		
		ДанныеДляСопоставленияНоменклатуры = Новый Структура;
		ДанныеДляСопоставленияНоменклатуры.Вставить("ИсходныеДанные",          Новый Структура("Штрихкод, Количество", ДанныеШтрихкода.Штрихкод, ДанныеШтрихкода.Количество));
		ДанныеДляСопоставленияНоменклатуры.Вставить("ШтрихкодыКСопоставлению", ШтрихкодыКСопоставлению);
		ДанныеДляСопоставленияНоменклатуры.Вставить("ПараметрыСканирования",   ПараметрыСканирования);
		
		КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
		КэшМаркируемойПродукции.ОтложенныеКодыМаркировки.Добавить(
			Новый Структура(
				"Штрихкод, ШтрихкодBase64",
				ДанныеШтрихкода.Штрихкод,
				ДанныеШтрихкода.ШтрихкодBase64));
		КэшМаркируемойПродукции.ДанныеДляУточненияСведенийПользователя.Операция = "СопоставлениеНоменклатуры";
		КэшМаркируемойПродукции.ДанныеДляУточненияСведенийПользователя.Данные = ДанныеДляСопоставленияНоменклатуры;
		
	КонецЕсли;
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода();
	РезультатОбработки.ТребуетсяСопоставлениеНоменклатуры = Истина;
	РезультатОбработки.ДанныеШтрихкода                    = ДанныеШтрихкода;
	РезультатОбработки.ШтрихкодыПродукцииДляСопоставления = ШтрихкодыКСопоставлению;
	РезультатОбработки.Штрихкод                           = ДанныеШтрихкода.Штрихкод;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Формирует результат обработки для уточнения номенклатуры у пользователя, в случае когда 1 штрихкод сопоставлен
//   2 номенклатурным позициям в ИБ.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//   (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция РезультатТребуетсяУточнениеНоменклатуры(ДанныеШтрихкода, ПараметрыСканирования)
	
	РезультатОбработкиШтрихкода = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	РезультатОбработкиШтрихкода.ТребуетсяУточнениеДанных = Истина;
	РезультатОбработкиШтрихкода.ДанныеШтрихкода = ДанныеШтрихкода;
	
	ПараметрыВыбора = ШтрихкодированиеИСКлиентСервер.ПараметрыОткрытияФормыУточненияДанных();
	
	Номенклатура   = Новый Массив;
	Характеристика = Новый Массив;
	Для Каждого Структура Из ДанныеШтрихкода.СписокНоменклатуры Цикл
		Если ЗначениеЗаполнено(Структура.Номенклатура) Тогда
			Номенклатура.Добавить(Структура.Номенклатура);
		КонецЕсли;
		Если ЗначениеЗаполнено(Структура.Характеристика) Тогда
			Характеристика.Добавить(Структура.Характеристика);
		КонецЕсли;
	КонецЦикла;
	
	Если Номенклатура.Количество() = 1 Тогда
		Номенклатура = Номенклатура[0];
	КонецЕсли;
	
	Если Характеристика.Количество() = 1 Тогда
		Характеристика = Характеристика[0];
	КонецЕсли;
	
	ПараметрыВыбора.Номенклатура           = Номенклатура;
	ПараметрыВыбора.Характеристика         = Характеристика;
	ПараметрыВыбора.КодМаркировки          = ДанныеШтрихкода.Штрихкод;
	ПараметрыВыбора.ШтрихкодEAN            = ДанныеШтрихкода.EAN;
	ПараметрыВыбора.ПараметрыУказанияСерий = ОбщегоНазначения.СкопироватьРекурсивно(
		ПараметрыСканирования.ПараметрыУказанияСерий, Ложь);
	ПараметрыВыбора.Склад                  = ПараметрыСканирования.Склад;
	ПараметрыВыбора.ПараметрыСканирования  = ПараметрыСканирования;
	РезультатОбработкиШтрихкода.ПараметрыУточненияДанных = ПараметрыВыбора;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

// Формирует результат обработки штрихкодов для случая, когда требуется обработать неизвестный код маркировки ввода остатков.
//
// Параметры:
//  ИсходныеДанные - (См. ИнициализацияДанныхПоШтрихкодам).
// Возвращаемое значение:
//   (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция РезультатОбработкиТребуетсяОбработатьКодМаркировкиВводаОстатков(ИсходныеДанные) Экспорт
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода();
	РезультатОбработки.Штрихкод        = ИсходныеДанные.Штрихкод;
	РезультатОбработки.ДанныеШтрихкода = СтрокаТаблицыДанныеКодовМаркировкиВСтруктуру(ИсходныеДанные);
	РезультатОбработки.ТребуетсяУточнениеДанных = Истина;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Формирует результат обработки штрихкодов для случая, когда требуется обработать неизвестный код групповой упаковки.
//
// Параметры:
//  ИсходныеДанные - (См. ИнициализацияДанныхПоШтрихкодам).
// Возвращаемое значение:
//   (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция РезультатТребуетсяУточнениеКоличества(ИсходныеДанные) Экспорт
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода();
	РезультатОбработки.Штрихкод        = ИсходныеДанные.Штрихкод;
	РезультатОбработки.ДанныеШтрихкода = СтрокаТаблицыДанныеКодовМаркировкиВСтруктуру(ИсходныеДанные);
	РезультатОбработки.ТребуетсяУточнениеДанных = Истина;
	
	Возврат РезультатОбработки;
	
КонецФункции
// Формирует результат обработки для уточнения номенклатуры у пользователя, в случае сканирования упаковки.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//   (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция РезультатТребуетсяУточнениеУпаковки(ДанныеШтрихкода, ПараметрыСканирования)
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	РезультатОбработки.ТребуетсяУточнениеДанных = Истина;
	РезультатОбработки.ДанныеШтрихкода = ДанныеШтрихкода;
	
	Возврат РезультатОбработки;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ЗапросыИТекстыЗапросов

// Возвращает текст запроса получения состава упаковок в иерархии.
Функция ТекстЗапросаСоставаУпаковокВИерархии()
	
	ТекстЗапросаИсходныеДанные = "ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваров.Ссылка                            КАК ШтрихкодУпаковки,
	|	ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка) КАК ШтрихкодРодительскойУпаковки,
	|	""""                                                       КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТВложенныеШтрихкодыИсходныеДанные
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|ГДЕ 
	|	ШтрихкодыУпаковокТоваров.Ссылка В (&МассивУпаковок)
	|;
	|";
	
	ТекстЗапросаСоставаУпаковок = ТекстЗапросаИсходныеДанные + ТекстЗапросаВложенныхШтрихкодов(Неопределено);
	
	Возврат ТекстЗапросаСоставаУпаковок;
	
КонецФункции

// Возвращает текст запроса для формирования структуры "Вложенные штрихкоды" на основании исходных данных.
// 
// Параметры:
//  ИмяВременнойТаблицы - Строка - Имя временной таблицы, где сформированы исходные данные.
// Возвращаемое значение:
//  Строка - Текст запроса.
Функция ТекстЗапросаВложенныхШтрихкодов(ПараметрыФормированияТекстаЗапроса)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ИсходныеДанные.ИдентификаторСтроки                  КАК ИдентификаторСтроки,
	|	ИсходныеДанные.ШтрихкодУпаковки                     КАК УпаковкаУровень0,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод КАК УпаковкаУровень1,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.ИдентификаторСтроки ЕСТЬ NULL ТОГДА
	|		ИсходныеДанные.ИдентификаторСтроки
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.ИдентификаторСтроки
	|	КОНЕЦ КАК ИдентификаторСтрокиУровень1
	|ПОМЕСТИТЬ ВложенныеШтрихкодыУпаковокУровень1
	|ИЗ
	|	ВТВложенныеШтрихкодыИсходныеДанные КАК ИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО ИсходныеДанные.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВложенныеШтрихкодыИсходныеДанные КАК ТаблицаИдентификаторов
	|		ПО ТаблицаИдентификаторов.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|ГДЕ
	|	ИсходныеДанные.ШтрихкодРодительскойУпаковки = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НЕОПРЕДЕЛЕНО                                КАК ИдентификаторСтроки,
	|	ИсходныеДанные.ШтрихкодРодительскойУпаковки КАК Упаковка,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод КАК УпаковкаУровень1,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.ИдентификаторСтроки ЕСТЬ NULL ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.ИдентификаторСтроки
	|	КОНЕЦ КАК ИдентификаторСтрокиУровень1
	|ИЗ
	|	ВТВложенныеШтрихкодыИсходныеДанные КАК ИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО ИсходныеДанные.ШтрихкодРодительскойУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВложенныеШтрихкодыИсходныеДанные КАК ТаблицаИдентификаторов
	|		ПО ТаблицаИдентификаторов.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|ГДЕ
	|	ИсходныеДанные.ШтрихкодРодительскойУпаковки <> ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныеШтрихкодыУпаковокУровень1.ИдентификаторСтроки          КАК ИдентификаторСтроки,
	|	ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень0             КАК УпаковкаУровень0,
	|	ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень1             КАК УпаковкаУровень1,
	|	ВложенныеШтрихкодыУпаковокУровень1.ИдентификаторСтрокиУровень1  КАК ИдентификаторСтрокиУровень1,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод             КАК УпаковкаУровень2,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.ИдентификаторСтроки ЕСТЬ NULL ТОГДА
	|		ВложенныеШтрихкодыУпаковокУровень1.ИдентификаторСтрокиУровень1
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.ИдентификаторСтроки
	|	КОНЕЦ КАК ИдентификаторСтрокиУровень2
	|ПОМЕСТИТЬ ВложенныеШтрихкодыУпаковокУровень2
	|ИЗ
	|	ВложенныеШтрихкодыУпаковокУровень1 КАК ВложенныеШтрихкодыУпаковокУровень1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень1 = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВложенныеШтрихкодыИсходныеДанные КАК ТаблицаИдентификаторов
	|		ПО ТаблицаИдентификаторов.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|ИНДЕКСИРОВАТЬ ПО
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныеШтрихкодыУпаковокУровень2.ИдентификаторСтроки          КАК ИдентификаторСтроки,
	|	ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень0             КАК УпаковкаУровень0,
	|	ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень1             КАК УпаковкаУровень1,
	|	ВложенныеШтрихкодыУпаковокУровень2.ИдентификаторСтрокиУровень1  КАК ИдентификаторСтрокиУровень1,
	|	ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень2             КАК УпаковкаУровень2,
	|	ВложенныеШтрихкодыУпаковокУровень2.ИдентификаторСтрокиУровень2  КАК ИдентификаторСтрокиУровень2,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод             КАК УпаковкаУровень3,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.ИдентификаторСтроки ЕСТЬ NULL ТОГДА
	|		ВложенныеШтрихкодыУпаковокУровень2.ИдентификаторСтрокиУровень2
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.ИдентификаторСтроки
	|	КОНЕЦ КАК ИдентификаторСтрокиУровень3
	|ПОМЕСТИТЬ ВложенныеШтрихкодыУпаковокУровень3
	|ИЗ
	|	ВложенныеШтрихкодыУпаковокУровень2 КАК ВложенныеШтрихкодыУпаковокУровень2
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень2 = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВложенныеШтрихкодыИсходныеДанные КАК ТаблицаИдентификаторов
	|		ПО ТаблицаИдентификаторов.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|ИНДЕКСИРОВАТЬ ПО
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеДанные.ИдентификаторСтроки          КАК ИдентификаторСтроки,
	|	ИсходныеДанные.УпаковкаУровень0             КАК УпаковкаУровень0,
	|	ИсходныеДанные.УпаковкаУровень1             КАК УпаковкаУровень1,
	|	ИсходныеДанные.ИдентификаторСтрокиУровень1  КАК ИдентификаторСтрокиУровень1,
	|	ИсходныеДанные.УпаковкаУровень2             КАК УпаковкаУровень2,
	|	ИсходныеДанные.ИдентификаторСтрокиУровень2  КАК ИдентификаторСтрокиУровень2,
	|	ИсходныеДанные.УпаковкаУровень3             КАК УпаковкаУровень3,
	|	ИсходныеДанные.ИдентификаторСтрокиУровень3  КАК ИдентификаторСтрокиУровень3
	|ПОМЕСТИТЬ ДанныеУпаковок
	|ИЗ
	|	ВложенныеШтрихкодыУпаковокУровень3 КАК ИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВложенныеШтрихкодыУпаковокУровень3 КАК ВложенныеШтрихкодыУпаковокУровень1
	|		ПО ИсходныеДанные.УпаковкаУровень0 = ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВложенныеШтрихкодыУпаковокУровень3 КАК ВложенныеШтрихкодыУпаковокУровень2
	|		ПО ИсходныеДанные.УпаковкаУровень0 = ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень2
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВложенныеШтрихкодыУпаковокУровень3 КАК ВложенныеШтрихкодыУпаковокУровень3
	|		ПО ИсходныеДанные.УпаковкаУровень0 = ВложенныеШтрихкодыУпаковокУровень3.УпаковкаУровень3
	|ГДЕ
	|	ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень0 ЕСТЬ NULL
	|	И ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень0 ЕСТЬ NULL
	|	И ВложенныеШтрихкодыУпаковокУровень3.УпаковкаУровень0 ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеУпаковок.УпаковкаУровень0.Номенклатура   КАК Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень0.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковокДляГриппировки
	|ИЗ
	|	ДанныеУпаковок КАК ДанныеУпаковок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеУпаковок.УпаковкаУровень1.Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень1.Характеристика
	|ИЗ
	|	ДанныеУпаковок КАК ДанныеУпаковок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеУпаковок.УпаковкаУровень2.Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень2.Характеристика
	|ИЗ
	|	ДанныеУпаковок КАК ДанныеУпаковок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеУпаковок.УпаковкаУровень3.Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень3.Характеристика
	|ИЗ
	|	ДанныеУпаковок КАК ДанныеУпаковок
	|;
	|
	|ВЫБРАТЬ
	|	ДанныеДляГриппировки.Номенклатура,
	|	ДанныеДляГриппировки.Характеристика
	|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
	|ИЗ
	|	ДанныеШтрихкодовУпаковокДляГриппировки КАК ДанныеДляГриппировки
	|ГДЕ ДанныеДляГриппировки.Номенклатура <> &НоменклатураПустаяСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляГриппировки.Номенклатура,
	|	ДанныеДляГриппировки.Характеристика
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|%ТекстЗапросаСвойстваМаркируемойПродукции%
	|;
	|
	|//#РезультатЗапроса#////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеУпаковок.УпаковкаУровень0                   КАК УпаковкаУровень0,
	|	ДанныеУпаковок.ИдентификаторСтроки                КАК УпаковкаУровень0ИдентификаторСтроки,
	|	ДанныеУпаковок.УпаковкаУровень0.ТипШтрихкода      КАК УпаковкаУровень0ТипШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень0.ТипУпаковки       КАК УпаковкаУровень0ТипУпаковки,
	|	ДанныеУпаковок.УпаковкаУровень0.ЗначениеШтрихкода КАК УпаковкаУровень0Штрихкод,
	|	ДанныеУпаковок.УпаковкаУровень0.Номенклатура      КАК УпаковкаУровень0Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень0.Характеристика    КАК УпаковкаУровень0Характеристика,
	|	ДанныеУпаковок.УпаковкаУровень0.Серия             КАК УпаковкаУровень0Серия,
	|	ДанныеУпаковок.УпаковкаУровень0.ХешСумма          КАК УпаковкаУровень0ХешСумма,
	|	ДанныеУпаковок.УпаковкаУровень0.Количество        КАК УпаковкаУровень0Количество,
	|	ЕСТЬNULL(СвойстваПродукцииУровень0.ВидПродукции, Неопределено) КАК УпаковкаУровень0ВидПродукции,
	|	
	|	ДанныеУпаковок.УпаковкаУровень1                   КАК УпаковкаУровень1,
	|	ДанныеУпаковок.ИдентификаторСтрокиУровень1        КАК УпаковкаУровень1ИдентификаторСтроки,
	|	ДанныеУпаковок.УпаковкаУровень1.ТипШтрихкода      КАК УпаковкаУровень1ТипШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень1.ТипУпаковки       КАК УпаковкаУровень1ТипУпаковки,
	|	ДанныеУпаковок.УпаковкаУровень1.ЗначениеШтрихкода КАК УпаковкаУровень1Штрихкод,
	|	ДанныеУпаковок.УпаковкаУровень1.Номенклатура      КАК УпаковкаУровень1Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень1.Характеристика    КАК УпаковкаУровень1Характеристика,
	|	ДанныеУпаковок.УпаковкаУровень1.Серия             КАК УпаковкаУровень1Серия,
	|	ДанныеУпаковок.УпаковкаУровень1.ХешСумма          КАК УпаковкаУровень1ХешСумма,
	|	ДанныеУпаковок.УпаковкаУровень1.Количество        КАК УпаковкаУровень1Количество,
	|	ЕСТЬNULL(СвойстваПродукцииУровень1.ВидПродукции, Неопределено) КАК УпаковкаУровень1ВидПродукции,
	|	
	|	ДанныеУпаковок.УпаковкаУровень2                   КАК УпаковкаУровень2,
	|	ДанныеУпаковок.ИдентификаторСтрокиУровень2        КАК УпаковкаУровень2ИдентификаторСтроки,
	|	ДанныеУпаковок.УпаковкаУровень2.ТипШтрихкода      КАК УпаковкаУровень2ТипШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень2.ТипУпаковки       КАК УпаковкаУровень2ТипУпаковки,
	|	ДанныеУпаковок.УпаковкаУровень2.ЗначениеШтрихкода КАК УпаковкаУровень2Штрихкод,
	|	ДанныеУпаковок.УпаковкаУровень2.Номенклатура      КАК УпаковкаУровень2Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень2.Характеристика    КАК УпаковкаУровень2Характеристика,
	|	ДанныеУпаковок.УпаковкаУровень2.Серия             КАК УпаковкаУровень2Серия,
	|	ДанныеУпаковок.УпаковкаУровень2.ХешСумма          КАК УпаковкаУровень2ХешСумма,
	|	ДанныеУпаковок.УпаковкаУровень2.Количество        КАК УпаковкаУровень2Количество,
	|	ЕСТЬNULL(СвойстваПродукцииУровень2.ВидПродукции, Неопределено) КАК УпаковкаУровень2ВидПродукции,
	|	
	|	ДанныеУпаковок.УпаковкаУровень3                   КАК УпаковкаУровень3,
	|	ДанныеУпаковок.ИдентификаторСтрокиУровень3        КАК УпаковкаУровень3ИдентификаторСтроки,
	|	ДанныеУпаковок.УпаковкаУровень3.ТипШтрихкода      КАК УпаковкаУровень3ТипШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень3.ТипУпаковки       КАК УпаковкаУровень3ТипУпаковки,
	|	ДанныеУпаковок.УпаковкаУровень3.ЗначениеШтрихкода КАК УпаковкаУровень3Штрихкод,
	|	ДанныеУпаковок.УпаковкаУровень3.Номенклатура      КАК УпаковкаУровень3Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень3.Характеристика    КАК УпаковкаУровень3Характеристика,
	|	ДанныеУпаковок.УпаковкаУровень3.Серия             КАК УпаковкаУровень3Серия,
	|	ДанныеУпаковок.УпаковкаУровень3.ХешСумма          КАК УпаковкаУровень3ХешСумма,
	|	ДанныеУпаковок.УпаковкаУровень3.Количество        КАК УпаковкаУровень3Количество,
	|	ЕСТЬNULL(СвойстваПродукцииУровень3.ВидПродукции, Неопределено) КАК УпаковкаУровень3ВидПродукции
	|ИЗ
	|	ДанныеУпаковок КАК ДанныеУпаковок
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваПродукцииУровень0
	|		ПО ДанныеУпаковок.УпаковкаУровень0.Номенклатура = СвойстваПродукцииУровень0.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваПродукцииУровень1
	|		ПО ДанныеУпаковок.УпаковкаУровень1.Номенклатура = СвойстваПродукцииУровень1.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваПродукцииУровень2
	|		ПО ДанныеУпаковок.УпаковкаУровень2.Номенклатура = СвойстваПродукцииУровень2.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваПродукцииУровень3
	|		ПО ДанныеУпаковок.УпаковкаУровень3.Номенклатура = СвойстваПродукцииУровень3.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВложенныеШтрихкодыУпаковокУровень1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВложенныеШтрихкодыУпаковокУровень2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВложенныеШтрихкодыУпаковокУровень3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеШтрихкодовУпаковок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СвойстваМаркируемойПродукции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеУпаковок
	|";
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"%ТекстЗапросаСвойстваМаркируемойПродукции%",
		ОпределитьТекстЗапросаСвойстваМаркируемойПродукции());
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ПолучениеДанныхПоОтсканированномуШК

// Собирает данные по маркируемой продукции, которые хранятся в ИБ. Обновляет данные штрихкодов упаковок.
//
// Параметры:
//  ДанныеПоШтрихкодам    - См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам
//  ДобавленныеСтроки     - Массив Из СтрокаТаблицыЗначений: См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам
//                        - Неопределено
//  ПараметрыСканирования - См. ШтрихкодированиеИСКлиент.ПараметрыСканирования
Процедура ЗаполнитьДанныеИзвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ДобавленныеСтроки, ПараметрыСканирования) Экспорт
	
	ШтрихкодыМаркируемойПродукции = Новый Массив;
	Если ДобавленныеСтроки <> Неопределено Тогда
		Для Каждого СтрокаДанных Из ДобавленныеСтроки Цикл
			Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
				ШтрихкодыМаркируемойПродукции.Добавить(СтрокаДанных.Штрихкод);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
			Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
				ШтрихкодыМаркируемойПродукции.Добавить(СтрокаДанных.Штрихкод);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ШтрихкодыМаркируемойПродукции.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТипыУпаковок = Новый Массив;
	ТипыУпаковок.Добавить(Перечисления.ТипыУпаковок.МаркированныйТовар);
	
	ТаблицаШтрихкодовУпаковок = ДанныеШтрихкодовУпаковок(ШтрихкодыМаркируемойПродукции, ТипыУпаковок);
	
	Если ТаблицаШтрихкодовУпаковок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ТаблицаШтрихкодовУпаковок Цикл
		
		НайденнаяСтрока = ДанныеПоШтрихкодам.ДанныеКодовМаркировки.Найти(СтрокаДанных.Штрихкод, "Штрихкод");
		НайденнаяСтрока.ШтрихкодУпаковки = СтрокаДанных.ШтрихкодУпаковки;
		НайденнаяСтрока.Идентифицирован        = Истина;
		НайденнаяСтрока.ТребуетсяСопоставление = Ложь;
		
		Если ЗначениеЗаполнено(СтрокаДанных.Номенклатура) Тогда
			НайденнаяСтрока.ВидПродукции           = СтрокаДанных.ВидПродукции;
			НайденнаяСтрока.Номенклатура           = СтрокаДанных.Номенклатура;
			НайденнаяСтрока.Характеристика         = СтрокаДанных.Характеристика;
			НайденнаяСтрока.Серия                  = СтрокаДанных.Серия;
			НайденнаяСтрока.МаркируемаяПродукция   = СтрокаДанных.МаркируемаяПродукция;
			ДанныеПоШтрихкодам.ВидыПродукции.Добавить(СтрокаДанных.ВидПродукции);
		ИначеЕсли ЗначениеЗаполнено(НайденнаяСтрока.Номенклатура) Тогда
			ОбновитьЭлементШтрихкодовУпаковок(НайденнаяСтрока);
		ИначеЕсли Не ШтрихкодированиеИСКлиентСервер.ЭтоШтрихкодВводаОстатков(НайденнаяСтрока.Штрихкод, Истина)
		        И Не НайденнаяСтрока.ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
			НайденнаяСтрока.ТребуетсяСопоставление = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует данные по маркируемой продукции, информации о которой нет в ИБ.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьДанныеНеизвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС")
		И ПрисутствуетАлкогольнаяПродукция(ПараметрыСканирования.ДопустимыеВидыПродукции) Тогда
		
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		МодульШтрихкодированиеЕГАИС.ЗаполнитьДанныеНеизвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		
		Если ПрисутствуетТабачнаяПродукция(ПараметрыСканирования.ДопустимыеВидыПродукции) Тогда
			
			МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
			МодульШтрихкодированиеМОТП.ЗаполнитьДанныеНеизвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования);
			
		КонецЕсли;
		
		Если ПрисутствуетПродукцияИСМП(ПараметрыСканирования.ДопустимыеВидыПродукции) Тогда
			
			МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
			МодульШтрихкодированиеИСМПСлужебный.ЗаполнитьДанныеНеизвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ДанныеПоШтрихкодам.ТекстОшибки) Тогда
		ДанныеПоШтрихкодам.ЕстьОшибки = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Формирует данные штрихкодов упаковок.
//
// Параметры:
//  СписокЗначенийШтрихкодов - Массив Из Строка - Массив значений штрихкодов
//  ТипыУпаковок - Массив - список из ПеречислениеСсылка.ТипыУпаковок - Коллекция типов упаковок, по которым будет 
//       установлено условие для формирования запроса.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Данные штрихкодов упаковок.
//   * Штрихкод - Строка - Значение штрихкода.
//   * ШтрихкодУпаковки - СправочникСсылка.ШтрихкодыУпаковокТоваров.
//   * ДатаУпаковки - Дата - Дата формирования упаковки.
//   * ТипУпаковки - ПеречислениеСсылка.ТипыУпаковок - Тип упаковки.
//   * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика.
//   * Серия - ОпределяемыйТип.СерияНоменклатуры - Серия.
//   * МаркируемаяПродукция - Булево - Истина, если продкция подлежит маркированию.
//   * ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции номенклатуры.
Функция ДанныеШтрихкодовУпаковок(СписокЗначенийШтрихкодов, ТипыУпаковок = Неопределено)
	
	ДанныеШтрихкодовУпаковок = Новый ТаблицаЗначений;
	// Исходные данные
	ДанныеШтрихкодовУпаковок.Колонки.Добавить("Штрихкод",             Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(200)));
	// Данные из справочника ШтрихкодыУпаковокТоваров
	ДанныеШтрихкодовУпаковок.Колонки.Добавить("ШтрихкодУпаковки",     Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ДанныеШтрихкодовУпаковок.Колонки.Добавить("ТипУпаковки",          Новый ОписаниеТипов("ПеречислениеСсылка.ТипыУпаковок"));
	ДанныеШтрихкодовУпаковок.Колонки.Добавить("Номенклатура",         Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ДанныеШтрихкодовУпаковок.Колонки.Добавить("Характеристика",       Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ДанныеШтрихкодовУпаковок.Колонки.Добавить("Серия",                Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ДанныеШтрихкодовУпаковок.Колонки.Добавить("ДатаУпаковки",         Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	// Данные из переопределения
	ДанныеШтрихкодовУпаковок.Колонки.Добавить("ВидПродукции",         Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	ДанныеШтрихкодовУпаковок.Колонки.Добавить("МаркируемаяПродукция", Новый ОписаниеТипов("Булево"));
	
	Если СписокЗначенийШтрихкодов.Количество() = 0 Тогда
		Возврат ДанныеШтрихкодовУпаковок;
	КонецЕсли;
	
	ШтрихкодыУпаковок = ШтрихкодыУпаковок(СписокЗначенийШтрихкодов, ТипыУпаковок);
	
	Если ШтрихкодыУпаковок.Количество() = 0 Тогда
		Возврат ДанныеШтрихкодовУпаковок;
	КонецЕсли;
	
	ТекстЗапросаДанныеШтрихкодовУпаковок =
		"ВЫБРАТЬ
		|	ШтрихкодыУпаковок.Штрихкод       КАК Штрихкод,
		|	ШтрихкодыУпаковок.Ссылка         КАК ШтрихкодУпаковки,
		|	ШтрихкодыУпаковок.ДатаУпаковки   КАК ДатаУпаковки,
		|	ШтрихкодыУпаковок.ТипУпаковки    КАК ТипУпаковки,
		|	ШтрихкодыУпаковок.Номенклатура   КАК Номенклатура,
		|	ШтрихкодыУпаковок.Характеристика КАК Характеристика,
		|	ШтрихкодыУпаковок.Серия          КАК Серия
		|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
		|ИЗ
		|	&ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура";
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(ТекстЗапросаДанныеШтрихкодовУпаковок);
	
	СписокЗапросов.Добавить(ОпределитьТекстЗапросаСвойстваМаркируемойПродукции());

	СписокЗапросов.Добавить(
		"ВЫБРАТЬ
		|	ДанныеШтрихкодовУпаковок.Штрихкод                 КАК Штрихкод,
		|	ДанныеШтрихкодовУпаковок.ШтрихкодУпаковки         КАК ШтрихкодУпаковки,
		|	ДанныеШтрихкодовУпаковок.ДатаУпаковки             КАК ДатаУпаковки,
		|	ДанныеШтрихкодовУпаковок.ТипУпаковки              КАК ТипУпаковки,
		|	ДанныеШтрихкодовУпаковок.Номенклатура             КАК Номенклатура,
		|	ДанныеШтрихкодовУпаковок.Характеристика           КАК Характеристика,
		|	ДанныеШтрихкодовУпаковок.Серия                    КАК Серия,
		|	СвойстваМаркируемойПродукции.МаркируемаяПродукция КАК МаркируемаяПродукция,
		|	СвойстваМаркируемойПродукции.ВидПродукции         КАК ВидПродукции
		|ИЗ
		|	ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
		|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваМаркируемойПродукции
		|		ПО ДанныеШтрихкодовУпаковок.Номенклатура = СвойстваМаркируемойПродукции.Номенклатура",
		"ШтрихкодыУпаковок");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ШтрихкодыУпаковок", ШтрихкодыУпаковок);
	
	Результат = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов, Истина);
	
	ДанныеШтрихкодовУпаковок = Результат["ШтрихкодыУпаковок"];
	
	Возврат ДанныеШтрихкодовУпаковок;
	
КонецФункции

// Заполняет строку дерева упаковок по выборке запроса с учетом уровня.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - строка дерева упаковок.
//  Выборка - ВыборкаИзРезультатаЗапроса - Выборка результата запроса.
//  Уровень - Число - Уровень строки дерева.
Процедура ЗаполнитьСтрокуДереваУпаковокПоВыборке(СтрокаДерева, Выборка, Уровень, ПараметрыСканирования = Неопределено)
	
	СтрокаДерева.ШтрихкодУпаковки     = Выборка["УпаковкаУровень" + Уровень];
	СтрокаДерева.ИдентификаторСтроки  = Выборка[СтрШаблон("УпаковкаУровень%1ИдентификаторСтроки", Уровень)];
	СтрокаДерева.ТипУпаковки          = Выборка[СтрШаблон("УпаковкаУровень%1ТипУпаковки", Уровень)];
	СтрокаДерева.ТипШтрихкода         = Выборка[СтрШаблон("УпаковкаУровень%1ТипШтрихкода", Уровень)];
	СтрокаДерева.Штрихкод             = Выборка[СтрШаблон("УпаковкаУровень%1Штрихкод", Уровень)];
	СтрокаДерева.Номенклатура         = Выборка[СтрШаблон("УпаковкаУровень%1Номенклатура", Уровень)];
	СтрокаДерева.Характеристика       = Выборка[СтрШаблон("УпаковкаУровень%1Характеристика", Уровень)];
	СтрокаДерева.ХешСумма             = Выборка[СтрШаблон("УпаковкаУровень%1ХешСумма", Уровень)];
	СтрокаДерева.Серия                = Выборка[СтрШаблон("УпаковкаУровень%1Серия", Уровень)];
	СтрокаДерева.ВидПродукции         = Выборка[СтрШаблон("УпаковкаУровень%1ВидПродукции", Уровень)];
	СтрокаДерева.Количество           = Выборка[СтрШаблон("УпаковкаУровень%1Количество", Уровень)];
	
	Если ПараметрыСканирования <> Неопределено
		И Не ЗначениеЗаполнено(СтрокаДерева.Номенклатура)
		И СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		И ПараметрыСканирования.РазрешенаОбработкаКодовСПустойНоменклатурой
		И ПараметрыСканирования.ДопустимыеВидыПродукции.Количество() = 1 Тогда
		
		ВидПродукции = ПараметрыСканирования.ДопустимыеВидыПродукции[0];
		
		ДанныеРазбора = ЗаполнитьСтрокуДереваПоДаннымРазбораШтрихкода(СтрокаДерева);
		Если ДанныеРазбора <> Неопределено
			И ДанныеРазбора.ВидыПродукции.Найти(ВидПродукции) <> Неопределено Тогда
			СтрокаДерева.ВидПродукции = ВидПродукции;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьСтрокуДереваПоДаннымРазбораШтрихкода(СтрокаДерева)
	
	Если СтрокаДерева.СоставКодаМаркировки <> Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеРазбора = ШтрихкодированиеИССлужебный.РазобратьКодМаркировки(СтрокаДерева.Штрихкод, СтрокаДерева.ВидПродукции);
	Если ДанныеРазбора <> Неопределено Тогда
		СтрокаДерева.ВидУпаковки          = ДанныеРазбора.ВидУпаковки;
		СтрокаДерева.ТипШтрихкода         = ДанныеРазбора.ТипШтрихкода;
		СтрокаДерева.СоставКодаМаркировки = ДанныеРазбора.СоставКодаМаркировки;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеРазбора.СоставКодаМаркировки, "GTIN") Тогда
			СтрокаДерева.GTIN = ДанныеРазбора.СоставКодаМаркировки.GTIN; 
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеРазбора;
	
КонецФункции

// Выполняет поиск по значениям штрихкодов в справочнике штрихкоды упаковок. Если элемент справочника найден - добавляет
// штрихкод в ДанныеПоШтрихкодам.ШтрихкодыИзвестныхУпаковок и удаляет из ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок.
//
// Параметры:
//  ШтрихкодыУпаковок - Массив из Строка - Массив штрихкодов.
// Возвращаемое значение:
//  ТаблицаЗначений - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
Функция НайтиУпаковкиПоШтрихкодам(ШтрихкодыУпаковок)
	
	ТипыУпаковокДляКоробок = ИнтеграцияИСКлиентСервер.ТипыУпаковокДляКоробок();
	
	Возврат ШтрихкодыУпаковок(ШтрихкодыУпаковок, ТипыУпаковокДляКоробок, Истина);
	
КонецФункции

// Дополняет структуру "Данные по штрихкодам" информацией по известным упаковкам.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьДанныеИзвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ШтрихкодИСтрокаДанныхКодаМаркировки = Новый Соответствие;
	ШтрихкодыУпаковокДляОпределения     = Новый Массив;
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковкаПоВиду(СтрокаДанных.ВидУпаковки)
			И Не СтрокаДанных.Идентифицирован Тогда
			ШтрихкодыУпаковокДляОпределения.Добавить(СтрокаДанных.Штрихкод);
			ШтрихкодИСтрокаДанныхКодаМаркировки[СтрокаДанных.Штрихкод] = СтрокаДанных;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ШтрихкодыУпаковокДляОпределения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеУпаковки = НайтиУпаковкиПоШтрихкодам(ШтрихкодыУпаковокДляОпределения);
	
	Если НайденныеУпаковки.Количество() > 0 Тогда
		
		ДанныеПоШтрихкодам.ВложенныеШтрихкоды = ВложенныеШтрихкодыИзвестныхУпаковок(
			НайденныеУпаковки.ВыгрузитьКолонку("Ссылка"), ПараметрыСканирования);
		
		// Изменяем исходное значение штрихкода, на значение сохраненное в БД
		СтрокиДляИзмененияШтрихкода = НайденныеУпаковки.НайтиСтроки(Новый Структура("ШтрихкодСовпадает", Ложь));
		Для Каждого СтрокаДляИзмененияШтрихкода Из СтрокиДляИзмененияШтрихкода Цикл
			СтрокаДанныхКодаМаркировки = ШтрихкодИСтрокаДанныхКодаМаркировки[СтрокаДляИзмененияШтрихкода.Штрихкод];
			СтрокаДанныхКодаМаркировки.Штрихкод = СтрокаДляИзмененияШтрихкода.ЗначениеШтрихкода;
		КонецЦикла;
		
		ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(
			ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок,, ПараметрыСканирования);
		
		ВидыПродукцииДерева = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ВидыПродукции;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеПоШтрихкодам.ВидыПродукции, ВидыПродукцииДерева, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(ДанныеКодовМаркировки, ДеревоУпаковок, ДобавленныеСтроки = Неопределено, ПараметрыСканирования = Неопределено) Экспорт
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(ДанныеКодовМаркировки, СтрокаДерева, ДобавленныеСтроки, ПараметрыСканирования);
		
		НайденныеСтроки = ДанныеКодовМаркировки.НайтиСтроки(Новый Структура("Штрихкод", СтрокаДерева.Штрихкод));
		Если НайденныеСтроки.Количество() Тогда
			
			КолонкиДерева = СтрокаДерева.Владелец().Колонки;
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				Для Каждого КолонкаДерева Из КолонкиДерева Цикл
					
					Если ДанныеКодовМаркировки.Колонки.Найти(КолонкаДерева.Имя) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаДерева[КолонкаДерева.Имя]) Тогда
						НайденнаяСтрока[КолонкаДерева.Имя] = СтрокаДерева[КолонкаДерева.Имя];
					КонецЕсли;
					
				КонецЦикла;
				
				НайденнаяСтрока.СтрокаДерева               = СтрокаДерева;
				НайденнаяСтрока.Идентифицирован            = Истина;
				НайденнаяСтрока.НайденВоВложенныхУпаковках = Истина;
				
				Если Не ЗначениеЗаполнено(НайденнаяСтрока.Номенклатура)
					И Не НайденнаяСтрока.ЭтоКодВводаОстатков
					И (   НайденнаяСтрока.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
					  Или НайденнаяСтрока.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая) Тогда
					НайденнаяСтрока.ТребуетсяСопоставление = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			ЭтоСтрокаВерхнегоУровня = (СтрокаДерева.Родитель = Неопределено);
			
			НоваяСтрока = ДанныеКодовМаркировки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
			
			Если ЗначениеЗаполнено(СтрокаДерева.ВидПродукции) Тогда
				НоваяСтрока.ВидыПродукцииКодаМаркировки.Добавить(СтрокаДерева.ВидПродукции);
			ИначеЕсли СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
				
				ВидыПродукции = ВидПродукцииУпаковкиПоСоставу(СтрокаДерева);
				Если ВидыПродукции.Количество() = 1 И ЗначениеЗаполнено(ВидыПродукции[0]) Тогда
					НоваяСтрока.ВидПродукции = ВидыПродукции[0];
				КонецЕсли;
				
			КонецЕсли;
			
			НоваяСтрока.Входящий            = ЭтоСтрокаВерхнегоУровня;
			НоваяСтрока.Идентифицирован     = Истина;
			НоваяСтрока.ЭтоКодВводаОстатков = ШтрихкодированиеИСКлиентСервер.ЭтоШтрихкодВводаОстатков(НоваяСтрока.Штрихкод);
			НоваяСтрока.СтрокаДерева        = СтрокаДерева;
			
			Если Не ЗначениеЗаполнено(НоваяСтрока.Номенклатура)
				И Не НоваяСтрока.ЭтоКодВводаОстатков
				И (   НоваяСтрока.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
				  Или НоваяСтрока.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая) Тогда
				НоваяСтрока.ТребуетсяСопоставление = Истина;
			КонецЕсли;
			
			Если ТипЗнч(ДобавленныеСтроки) = Тип("Массив") Тогда
				ДобавленныеСтроки.Добавить(НоваяСтрока);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Дополняет структуру "Данные по штрихкодам" информацией по неизвестным упаковкам.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьДанныеНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ЕстьНеизвестныеШтрихкодыУпаковок = Ложь;
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковкаПоВиду(СтрокаДанных.ВидУпаковки)
			И Не СтрокаДанных.Идентифицирован Тогда
			ЕстьНеизвестныеШтрихкодыУпаковок = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьНеизвестныеШтрихкодыУпаковок Тогда
		Возврат;
	КонецЕсли;
	
	Если ДопустимаТабачнаяПродукция(ПараметрыСканирования) Тогда
		
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеМОТП.ЗаполнитьДанныеНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
	Если ДопустимаПродукцияИСМП(ПараметрыСканирования) Тогда
		
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.ЗаполнитьДанныеНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(
			ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок,, ПараметрыСканирования);
	КонецЕсли;
	
КонецПроцедуры

// Копирует стоки дерева источника в строки дерева приемника.
//
// Параметры:
//  СтрокаДереваПриемник - КоллекцияСтрокДереваЗначений - Строки дерева приемника.
//  СтрокаДереваИсточник - КоллекцияСтрокДереваЗначений - Строки дерева источника.
//  СоответствиеСтарыхИНовыхСтрокДерева - Соответствие - Ключ - строка источника, значение - новая строка приемника.
Процедура СкопироватьСтрокиДерева(СтрокаДереваПриемник, СтрокаДереваИсточник, СоответствиеСтарыхИНовыхСтрокДерева)
	
	Для Каждого СтрокаИсточника Из СтрокаДереваИсточник.Строки Цикл
		
		НоваяСтрока = СтрокаДереваПриемник.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
		СоответствиеСтарыхИНовыхСтрокДерева.Вставить(СтрокаИсточника, НоваяСтрока);
		СкопироватьСтрокиДерева(НоваяСтрока, СтрокаИсточника, СоответствиеСтарыхИНовыхСтрокДерева);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыФункции

// Обрабатывает входящее дерево упаковок - строки, не соответствующие условию отбора по виду продукции - удаляются
//  из дерева и соотвествия штрихкодов и строк дерева.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений, СтрокаДереваЗначений - строки для проверки на соотвествие виду продукции.
//  СоответствиеСтрокДереваУпаковок - Соответствие - соотвествие штриходов упаковок и строк дерева.
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции для отбора строк дерева.
//  ПараметрыПроверки - Неопределено, Структура  - служебный параметр, при первом вызове передавть неопределено.
Процедура ОтобратьСтрокиДереваПоВидуПродукции(ДеревоУпаковок, СоответствиеСтрокДереваУпаковок,
		ВидПродукции, ПараметрыПроверки = Неопределено)
	
	ПерваяИтерация = Ложь;
	МассивУдаляемыхСтрок = Новый Массив;
	
	Если ПараметрыПроверки = Неопределено Тогда
		ПерваяИтерация = Истина;
		ПараметрыПроверки = Новый Структура;
		ПараметрыПроверки.Вставить("УдалитьТекущуюУпаковку", Ложь);
	КонецЕсли;
	
	Для Каждого СтрокаДерева из ДеревоУпаковок.Строки Цикл
		Если ПерваяИтерация Тогда
			ПараметрыПроверки.УдалитьТекущуюУпаковку = Ложь;
		КонецЕсли;
		
		Если СтрокаДерева.Строки.Количество()>0 Тогда
			ОтобратьСтрокиДереваПоВидуПродукции(СтрокаДерева, СоответствиеСтрокДереваУпаковок,
			                                     ВидПродукции, ПараметрыПроверки);
		КонецЕсли;
		
		Если ПараметрыПроверки.УдалитьТекущуюУпаковку Тогда
			Если ПерваяИтерация Тогда
				ОчиститьСоответствиеСтрокДерева(СтрокаДерева, СоответствиеСтрокДереваУпаковок);
				МассивУдаляемыхСтрок.Добавить(СтрокаДерева);
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			Если (ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Или Не ИнтеграцияИСмпКлиентСервер.ВидПродукцииПодлежитМаркировкеОстатков(ВидПродукции))
				И СтрокаДерева.ВидПродукции <> ВидПродукции Тогда
				ПараметрыПроверки.УдалитьТекущуюУпаковку = Истина;
				Если ПерваяИтерация Тогда
					ОчиститьСоответствиеСтрокДерева(СтрокаДерева, СоответствиеСтрокДереваУпаковок);
					МассивУдаляемыхСтрок.Добавить(СтрокаДерева);
				Иначе
					Возврат;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Не ПараметрыПроверки.УдалитьТекущуюУпаковку Тогда
			СтрокаДерева.ВидПродукции = ВидПродукции; // заполнить вид для мультитоварной упаковки
		КонецЕсли;
	
	КонецЦикла;
	
	Если ПерваяИтерация Тогда
		
		Для Каждого СтрокаДерева из МассивУдаляемыхСтрок Цикл
			ДеревоУпаковок.Строки.Удалить(СтрокаДерева);
		КонецЦикла;
		
	КонецЕсли;
	
	
КонецПроцедуры

// Удаляет строки дерева из соответствия "Штрихкод, СтрокаДерева"
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений, СтрокаДереваЗначений - строки, которые будут удалены из соотвествия
//  СоответствиеСтрокДереваУпаковок - Соответствие - соотвествие штриходов упаковок и строк дерева
Процедура ОчиститьСоответствиеСтрокДерева(ДеревоУпаковок, СоответствиеСтрокДереваУпаковок)
	
	СоответствиеСтрокДереваУпаковок.Удалить(ДеревоУпаковок.ШтрихкодУпаковки);
	Для Каждого СтрокаДерева из ДеревоУпаковок.Строки Цикл
		ОчиститьСоответствиеСтрокДерева(СтрокаДерева, СоответствиеСтрокДереваУпаковок);
	КонецЦикла;
	
КонецПроцедуры


// Определяет вид продукции упаковки по вложенной продукции.
//
// Параметры:
//  СтрокаДереваУпаковки - СтрокаДереваЗначений - строка дерева упаковок
//
// Возвращаемое значение:
//  Массив - массив вложенных видов продукции.
Функция ВидПродукцииУпаковкиПоСоставу(СтрокаДереваУпаковки)
	
	ВидыПродукции = Новый Массив;
	Для Каждого СтрокаДерева из СтрокаДереваУпаковки.Строки Цикл
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ВидыПродукцииВложенные =  ВидПродукцииУпаковкиПоСоставу(СтрокаДерева);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыПродукции, ВидыПродукцииВложенные);
		КонецЕсли;
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			ВидыПродукции.Добавить(СтрокаДерева.ВидПродукции);
		КонецЕсли;
	КонецЦикла;
	Возврат ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВидыПродукции);
	
КонецФункции

// Возвращает строку верхнего уровня для строки дерева.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - строка дерева упаковок.
//  КэшУпаковокВерхнегоУровня - Соответствие - ключ - Строка дерева, значение - элемент справочника Штрихкоды упаковок.
// Возвращаемое значение:
//  СтрокаДереваЗначений - строка верхнего уровня дерева.
Функция СтрокаДереваВерхнегоУровня(СтрокаДерева, КэшУпаковокВерхнегоУровня)
	
	УпаковкаВерхнегоУровня = КэшУпаковокВерхнегоУровня.Получить(СтрокаДерева);
	Если УпаковкаВерхнегоУровня <> Неопределено Тогда
		Возврат УпаковкаВерхнегоУровня;
	КонецЕсли;
	
	Если СтрокаДерева.Родитель <> Неопределено Тогда
		
		УпаковкаВерхнегоУровня = СтрокаДереваВерхнегоУровня(СтрокаДерева.Родитель, КэшУпаковокВерхнегоУровня);
		
		КэшУпаковокВерхнегоУровня.Вставить(СтрокаДерева, УпаковкаВерхнегоУровня);
		
		Возврат УпаковкаВерхнегоУровня;
		
	Иначе
		
		Возврат СтрокаДерева;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПолучениеТекущихДанныхДокумента

// Формирует данные кодов маркировок на основании данных формы и помещает их во временное хранилище.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ПоместитьДанныеДокументаВКэшМаркируемойПродукции(Форма, ПараметрыСканирования) Экспорт
	
	Если Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции)
		Или ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
	ОбработанныеКодыМаркировки = КэшМаркируемойПродукции.ОбработанныеКодыМаркировки;
	
	Если ОбработанныеКодыМаркировки.Количество() = 0 Тогда
		
		ШтрихкодыУпаковок = ШтрихкодыУпаковокПоДаннымТоваровИМаркируемойПродукции(Форма, ПараметрыСканирования);
		КоллекцияВсехШтрихкодовДерева(ШтрихкодыУпаковок.ДеревоУпаковок.Строки, ОбработанныеКодыМаркировки, ПараметрыСканирования);
		
		ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, ПараметрыСканирования.КэшМаркируемойПродукции);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет коллекцию "МаркируемаяПродукцияДокумента" данными строк дерева.
//
// Параметры:
//  ДеревоУпаковок - Дерево значений - иерархия маркируемой продукции.
//  КэшМаркируемойПродукции - Соответствие - Ключ - Значение штрихкода, Значение - Данные штрихкода.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура КоллекцияВсехШтрихкодовДерева(СтрокиДереваУпаковок, КэшМаркируемойПродукции, ПараметрыСканирования)
	
	ДанныеКодовМаркировки = ИнициализацияТаблицыДанныхКодовМаркировки();
	
	Для Каждого СтрокаДерева Из СтрокиДереваУпаковок Цикл
		
		НоваяСтрока = ДанныеКодовМаркировки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		ДанныеШтрихкода = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(НоваяСтрока);
		
		КэшМаркируемойПродукции.Вставить(СтрокаДерева.Штрихкод, ДанныеШтрихкода);
		
		КоллекцияВсехШтрихкодовДерева(СтрокаДерева.Строки, КэшМаркируемойПродукции, ПараметрыСканирования);
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует вложенные штрихкоды по данным табличной части Товары и табличной части элементами штрихкодов упаковок.
//
// Параметры:
//  ДанныеТовары - ТабличнаяЧасть - табличная часть с товарами.
//  ДанныеМаркируемаяПродукция - ТабличнаяЧасть - табличная часть с элементами штрихкодов упаковок.
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов).
Функция ШтрихкодыУпаковокПоДаннымТоваровИМаркируемойПродукции(Форма, ПараметрыСканирования);
	
	ИсточникДанных = Форма;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		ИсточникДанных = Форма.Объект;
	КонецЕсли;
	ТабличнаяЧастьШтрихкоды = ИсточникДанных[ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок];
	
	ТаблицаШтрихкодов = Новый ТаблицаЗначений;
	ТаблицаШтрихкодов.Колонки.Добавить("ШтрихкодУпаковки",             Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаШтрихкодов.Колонки.Добавить("ШтрихкодРодительскойУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаШтрихкодов.Колонки.Добавить("ИдентификаторСтроки",          Метаданные.ОпределяемыеТипы.УникальныйИдентификаторИС.Тип);
	
	ИспользоватьИдентификаторСтроки = Ложь;
	Для Каждого СтрокаТЧ Из ТабличнаяЧастьШтрихкоды Цикл
		МассивИменКолонокШтрихкодовУпаковки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки, ",", Истина);
		
		Для Каждого ИмяКолонки Из МассивИменКолонокШтрихкодовУпаковки Цикл
			ИмяКолонки = СокрЛП(ИмяКолонки);
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТЧ, "ШтрихкодУпаковки") Тогда
				ИмяКолонкиШтрихкодРодительскойУпаковки = "ШтрихкодУпаковки";
			Иначе
				ИмяКолонкиШтрихкодРодительскойУпаковки = ИмяКолонки;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаШтрихкодов.Добавить();
			НоваяСтрока.ШтрихкодУпаковки             = СтрокаТЧ[ИмяКолонки];
			НоваяСтрока.ШтрихкодРодительскойУпаковки = СтрокаТЧ[ИмяКолонкиШтрихкодРодительскойУпаковки];
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТЧ, "ИдентификаторСтроки") Тогда
				ИспользоватьИдентификаторСтроки = Истина;
				ИдентификаторСтроки             = СтрокаТЧ.ИдентификаторСтроки;
				НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ИсходныеДанные.ИдентификаторСтроки          КАК ИдентификаторСтроки,
		|	ИсходныеДанные.ШтрихкодУпаковки             КАК ШтрихкодУпаковки,
		|	ИсходныеДанные.ШтрихкодРодительскойУпаковки КАК ШтрихкодРодительскойУпаковки
		|ПОМЕСТИТЬ ВТВложенныеШтрихкодыИсходныеДанные
		|ИЗ
		|	&ИсходныеДанные КАК ИсходныеДанные");
	
	ПараметрыФормированияТекстаЗапроса = ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
	ПараметрыФормированияТекстаЗапроса.ДокументСсылка                  = Неопределено;
	ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки = ИспользоватьИдентификаторСтроки;
	ТекстЗапроса = ТекстЗапросаВложенныхШтрихкодов(ПараметрыФормированияТекстаЗапроса.ИмяВременнойТаблицы);
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ВложенныеШтрихкоды");
	
	МенеджерВременнойТаблицы = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременнойТаблицы;
	Запрос.УстановитьПараметр("ИсходныеДанные",           ТаблицаШтрихкодов);
	Запрос.УстановитьПараметр("НоменклатураПустаяСсылка", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
	РезультатыЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
	
	ШтрихкодыУпаковок = ВложенныеШтрихкодыУпаковокПоДаннымМенеджераВТ(
		РезультатыЗапроса.ВложенныеШтрихкоды.Выбрать(), МенеджерВременнойТаблицы, ПараметрыСканирования);
	
	Возврат ШтрихкодыУпаковок;
	
КонецФункции

// Формирует вложенные штрихкоды по данным временной таблицы.
//
// Параметры:
//  ВыборкаПерваяИтерация - ВыборкаИзРезультатаЗапроса - РезультатЗапроса.
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц.
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов).
Функция ВложенныеШтрихкодыУпаковокПоДаннымМенеджераВТ(ВыборкаПерваяИтерация, МенеджерВременныхТаблиц, ПараметрыСканирования) 
	
	ВложенныеШтрихкоды  = ИнициализацияВложенныхШтрихкодов();
	
	СоответствиеСтрокДереваУпаковок = Новый Соответствие;
	
	ТаблицаШтрихкодов = Новый ТаблицаЗначений;
	ТаблицаШтрихкодов.Колонки.Добавить("ШтрихкодУпаковки",             Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаШтрихкодов.Колонки.Добавить("ШтрихкодРодительскойУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаШтрихкодов.Колонки.Добавить("ИдентификаторСтроки",          Метаданные.ОпределяемыеТипы.УникальныйИдентификаторИС.Тип);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("УпаковкиВерхнегоУровня", Новый Соответствие);
	
	ПродолжатьПоиск    = Истина;
	НомерИтерации      = 1;
	УровнейВложенности = 3;
	
	Пока ПродолжатьПоиск Цикл
		
		Если НомерИтерации = 1 Тогда
			
			Выборка = ВыборкаПерваяИтерация;
			
		Иначе
			
			ИмяВременнойТаблицы = "ВТВложенныеШтрихкодыИсходныеДанные";
			
			ТекстыЗапроса = Новый СписокЗначений;
			ТекстыЗапроса.Добавить(
				СтрШаблон(
					"ВЫБРАТЬ
					|	ИсходныеДанные.ИдентификаторСтроки          КАК ИдентификаторСтроки,
					|	ИсходныеДанные.ШтрихкодУпаковки             КАК ШтрихкодУпаковки,
					|	ИсходныеДанные.ШтрихкодРодительскойУпаковки КАК ШтрихкодРодительскойУпаковки
					|ПОМЕСТИТЬ %1
					|ИЗ
					|	&ИсходныеДанные КАК ИсходныеДанные", ИмяВременнойТаблицы));
			
			ПараметрыФормированияТекстаЗапроса = ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
			ПараметрыФормированияТекстаЗапроса.ДокументСсылка                  = Неопределено;
			ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки = Ложь;
			ПараметрыФормированияТекстаЗапроса.ИмяВременнойТаблицы             = ИмяВременнойТаблицы;
			ТекстЗапроса = ТекстЗапросаВложенныхШтрихкодов(ПараметрыФормированияТекстаЗапроса.ИмяВременнойТаблицы);
			ТекстыЗапроса.Добавить(ТекстЗапроса,"ВложенныеШтрихкоды");
			
			Если НомерИтерации > 1 Тогда
				ТекстыЗапроса.Добавить(СтрШаблон("УНИЧТОЖИТЬ %1", ИмяВременнойТаблицы));
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.УстановитьПараметр("ИсходныеДанные", ТаблицаШтрихкодов);
			Запрос.УстановитьПараметр("НоменклатураПустаяСсылка", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
			РезультатыЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
			Выборка = РезультатыЗапроса.ВложенныеШтрихкоды.Выбрать();
			
		КонецЕсли;
		
		ТаблицаШтрихкодов.Очистить();
		
		Пока Выборка.Следующий() Цикл
			
			РодительскиеДанные = ВложенныеШтрихкоды.ДеревоУпаковок;
			Для ТекущийУровень = 0 По УровнейВложенности Цикл
				
				Если ЗначениеЗаполнено(Выборка["УпаковкаУровень"+ТекущийУровень]) Тогда
					
					Если СоответствиеСтрокДереваУпаковок[Выборка["УпаковкаУровень"+ТекущийУровень]] = Неопределено Тогда
						РодительскиеДанные = РодительскиеДанные.Строки.Добавить();
						ЗаполнитьСтрокуДереваУпаковокПоВыборке(РодительскиеДанные, Выборка, ТекущийУровень, ПараметрыСканирования);
						СоответствиеСтрокДереваУпаковок.Вставить(Выборка["УпаковкаУровень"+ТекущийУровень], РодительскиеДанные);
					Иначе
						РодительскиеДанные = СоответствиеСтрокДереваУпаковок[Выборка["УпаковкаУровень"+ТекущийУровень]];
					КонецЕсли;
					
				Иначе
					Прервать;
				КонецЕсли;
				
				Если ТекущийУровень = УровнейВложенности Тогда 
					
					НоваяСтрока = ТаблицаШтрихкодов.Добавить();
					НоваяСтрока.ШтрихкодУпаковки     = Выборка.УпаковкаУровень3;
					НоваяСтрока.ИдентификаторСтроки  = Выборка.УпаковкаУровень3ИдентификаторСтроки;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		НомерИтерации   = НомерИтерации + 1;
		ПродолжатьПоиск = ТаблицаШтрихкодов.Количество() > 0;
		
	КонецЦикла;
	
	КэшУпаковокВерхнегоУровня = Новый Соответствие;
	Для Каждого КлючЗначение Из СоответствиеСтрокДереваУпаковок Цикл
		
		Если КлючЗначение.Ключ.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
			НоваяСтрока = ВложенныеШтрихкоды.МаркированныеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, КлючЗначение.Значение);
			НоваяСтрока.СтрокаДерева = КлючЗначение.Значение;
			НоваяСтрока.УпаковкаВерхнегоУровня = СтрокаДереваВерхнегоУровня(КлючЗначение.Значение, КэшУпаковокВерхнегоУровня);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВложенныеШтрихкоды;
	
КонецФункции

#КонецОбласти

// Определяет по контексту возможность работы с алкоголем.
//
// Параметры:
//  Контекст - ФормаКлиентскогоПриложения, ДокументСсылка, СправочникСсылка, ПеречислениеСсылка.ВидыПродукцииИС -
//  контекст, по которому будет определяться возможность работы с алкогольной продукцией.
// Возвращаемое значение:
//  Булево - Истина, если для контекста разрешена работа с алкогольной продукцией.
Функция ДопустимаАлкогольнаяПродукция(Контекст)
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС") Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ТипЗнч(Контекст) = Тип("ПеречислениеСсылка.ВидыПродукцииИС") Тогда
		Возврат Контекст = Перечисления.ВидыПродукцииИС.Алкогольная;
	КонецЕсли;
	
	Возврат ШтрихкодированиеИСКлиентСервер.ДопустимВидПродукции(Контекст, Перечисления.ВидыПродукцииИС.Алкогольная);
	
КонецФункции

//Определяет по контексту возможность работы с табаком.
//
//Параметры:
//   Контекст - Структура, ПеречислениеСсылка.ВидыПродукцииИС -
//     контекст (параметры сканирования или вид продукции), по которому будет определяться возможность работы с табачной продукцией.
//Возвращаемое значение:
//   Булево - Истина, если для контекста разрешена работа с табачной продукцией.
//
Функция ДопустимаТабачнаяПродукция(Контекст)
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ТипЗнч(Контекст) = Тип("ПеречислениеСсылка.ВидыПродукцииИС") Тогда
		Возврат Контекст = Перечисления.ВидыПродукцииИС.Табак;
	КонецЕсли;
	
	Возврат ШтрихкодированиеИСКлиентСервер.ДопустимВидПродукции(Контекст, Перечисления.ВидыПродукцииИС.Табак);
	
КонецФункции

// Возвращает структуру параметров, заполненных по умолчанию, которые необходимы для формирования текста запроса
// вложенных штрихкодов.
//
// Параметры:
// Возвращаемое значение:
//  Структура - Описание:
//   * ИмяВременнойТаблицы - Строка - Имя временной таблица, где будут лежать исходные данные, необходимые для формирования
//                                    дерева упаковок и таблицы маркированных товаров(вложенные штрихкоды).
//   * ИспользоватьИдентификаторСтроки - Булево - если табличная часть товары и табличная часть с штрихкодами упаковок
//                                                связана через идентификатор строки.
//   * ДокументСсылка - Неопределено - Ссылка на документ.
Функция ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов()
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ДокументСсылка",                  Неопределено);
	ВозвращаемоеЗначение.Вставить("ИспользоватьИдентификаторСтроки", Ложь);
	ВозвращаемоеЗначение.Вставить("ИмяВременнойТаблицы",             "ВТВложенныеШтрихкодыИсходныеДанные");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает все вложенные значения штрихкодов по массиву элементов справочника штрихкоды упаковок.
//
// Параметры:
//  АкцизныеМарки - Массив - коллекция элементов справочники Штрихкоды упаковок.
// Возвращаемое значение:
//  Массив - Значения штрихкодов.
Функция ЗначенияВложенныхШтрихкодовУпаковок(КоллекцияУпаковок)
	
	ВложенныеЗначенияШтрихкодов = Новый Массив;
	
	СоответствиеСтрокДереваУпаковок = Новый Соответствие;
	ДеревоУпаковок = ИнициализироватьДеревоУпаковок();
	
	Запрос       = Новый Запрос();
	Запрос.Текст = ТекстЗапросаСоставаУпаковокВИерархии();
	
	ПродолжатьПоиск    = Истина;
	УровнейВложенности = 3;
	
	Пока ПродолжатьПоиск Цикл
		
		Запрос.УстановитьПараметр("МассивУпаковок", КоллекцияУпаковок);
		Запрос.УстановитьПараметр("НоменклатураПустаяСсылка", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
		Результат = Запрос.Выполнить();
		Выборка   = Результат.Выбрать();
		КоллекцияУпаковок.Очистить();
		
		Пока Выборка.Следующий() Цикл
			
			РодительскиеДанные = ДеревоУпаковок;
			Для ТекущийУровень = 0 По УровнейВложенности Цикл
				
				Если ЗначениеЗаполнено(Выборка["УпаковкаУровень"+ТекущийУровень]) Тогда
					
					Если СоответствиеСтрокДереваУпаковок[Выборка["УпаковкаУровень"+ТекущийУровень]] = Неопределено Тогда
						
						ВложенныеЗначенияШтрихкодов.Добавить(Выборка["УпаковкаУровень" + ТекущийУровень + "Штрихкод"]);
						СоответствиеСтрокДереваУпаковок.Вставить(Выборка["УпаковкаУровень"+ТекущийУровень], РодительскиеДанные);
						
					Иначе
						РодительскиеДанные = СоответствиеСтрокДереваУпаковок[Выборка["УпаковкаУровень"+ТекущийУровень]];
					КонецЕсли;
					
				Иначе
					Прервать;
				КонецЕсли;
				
				Если ТекущийУровень = УровнейВложенности Тогда 
					КоллекцияУпаковок.Добавить(Выборка["УпаковкаУровень"+ТекущийУровень]);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ПродолжатьПоиск = КоллекцияУпаковок.Количество() > 0;
		
	КонецЦикла;
	
	Возврат ВложенныеЗначенияШтрихкодов;
	
КонецФункции

// Выполняет проверку Данных штрихкода на то, что уже данные обработаны.
//
// Параметры:
//  ДанныеШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
// Возвращаемое значение:
//  Булево - Истина, если данные штрихкода не требует повторной обработки.
Функция ДанныеПоШтрихкодуУжеПолучены(ДанныеШтрихкода)
	
	Возврат ДанныеШтрихкода.Свойство("Номенклатура") И ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура);
	
КонецФункции

// Выполняет обработку данных по штрихкодам.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если есть ошибки в данных по штрихкодам.
//  ФормаУникальныйИдентификатор - ФормаКлиентскогоПриложения, УникальныйИдентификатор - источник вызова 
//    (если форма, то будет проводиться дополнительная обработка полученных данных соответственно источнику).
// Возвращаемое значение:
//   См. ИнициализироватьРезультатОбработкиШтрихкода
Функция ОбработатьДанныеПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки, ФормаУникальныйИдентификатор) Экспорт 
	
	ВложенныеШтрихкоды                      = ДанныеПоШтрихкодам.ВложенныеШтрихкоды;
	РезультатыОбработок                     = Новый Соответствие;
	ШтрихкодыКСопоставлению                 = Новый Массив;
	ТребуетсяСопоставлениеНоменклатуры      = Ложь;
	ТребуетсяВыборНоменклатурыВводаОстатков = Ложь;
	
	СтрокиТаблицыВводаОстатков = Новый Массив;
	Для Каждого СтрокаТаблицы Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если СтрокаТаблицы.Входящий И СтрокаТаблицы.ЭтоКодВводаОстатков И Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			ТребуетсяВыборНоменклатурыВводаОстатков = Истина;
			СтрокиТаблицыВводаОстатков.Добавить(СтрокаТаблицы);
		ИначеЕсли СтрокаТаблицы.ТребуетсяСопоставление
			И ПараметрыСканирования.СопоставлятьНоменклатуру Тогда
			ШтрихкодыКСопоставлению.Добавить(СтрокаТаблицы.EAN);
			ТребуетсяСопоставлениеНоменклатуры = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ШтрихкодыКСопоставлению = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ШтрихкодыКСопоставлению);
	
	Если Не ТребуетсяСопоставлениеНоменклатуры 
		И ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции) Тогда
		
		КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
		КэшМаркируемойПродукции.ОтложенныеКодыМаркировки.Очистить();
		КэшМаркируемойПродукции.ДанныеДляУточненияСведенийПользователя.Операция = "";
		КэшМаркируемойПродукции.ДанныеДляУточненияСведенийПользователя.Данные = Новый Массив;
		ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, ПараметрыСканирования.КэшМаркируемойПродукции)
		
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если Не СтрокаТаблицы.Входящий Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеШтрихкода    = СтрокаТаблицыДанныеКодовМаркировкиВСтруктуру(СтрокаТаблицы);
		РезультатОбработки = Неопределено;
		
		// Обработка ошибок и уточнений во всех формах
		Если ЕстьОшибки Тогда
			
			РезультатОбработки = РезультатОбработкиШтрихкодаПриОшибках(
				ДанныеПоШтрихкодам, ДанныеШтрихкода, ПараметрыСканирования, ФормаУникальныйИдентификатор);
			
		// Обработка ошибок и уточнений во всех формах
		ИначеЕсли ТребуетсяВыборНоменклатурыВводаОстатков
			И ДанныеШтрихкодаТребуетсяОбработатьКакМаркировкуОстатков(СтрокаТаблицы, ПараметрыСканирования) Тогда
			
			РезультатОбработки = РезультатОбработкиТребуетсяОбработатьКодМаркировкиВводаОстатков(СтрокаТаблицы);
			
		// Обработка ошибок и уточнений во всех формах
		ИначеЕсли ТребуетсяСопоставлениеНоменклатуры Тогда
			
			РезультатОбработки = РезультатОбработкиТребуетсяСопоставлениеНоменклатуры(ДанныеШтрихкода, ШтрихкодыКСопоставлению, ПараметрыСканирования);
			
		// Обработка ошибок и уточнений во всех формах
		ИначеЕсли ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии Тогда
			
			РезультатОбработки = РезультатОбработкиТребуетсяОбновлениеКлючаСессии(ДанныеПоШтрихкодам.ВидыПродукции, ПараметрыСканирования);
			
		// Обработка ошибок и уточнений во всех формах
		ИначеЕсли Не ДанныеШтрихкода.Идентифицирован Тогда
			
			РезультатОбработки = РезультатОбработкиДанныеПоКодуМаркировкиНеНайдены(
				ФормаУникальныйИдентификатор, ДанныеШтрихкода, ДанныеПоШтрихкодам, ПараметрыСканирования);
			
		// Обработка ошибок и уточнений во всех формах
		ИначеЕсли ДанныеПоШтрихкодам.УточнитьУПользователя.Найти(ДанныеШтрихкода.Штрихкод) <> Неопределено
			И ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			
			РезультатОбработки = РезультатТребуетсяУточнениеУпаковки(ДанныеШтрихкода, ПараметрыСканирования);
			
		// Обработка ошибок и уточнений во всех формах
		ИначеЕсли ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
			И ДанныеШтрихкода.КоличествоБлоков = 0 Тогда
			
			РезультатОбработки = РезультатТребуетсяУточнениеКоличества(ДанныеШтрихкода);
			
		// Обработка ошибок и уточнений во всех формах
		ИначеЕсли ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
			И ДанныеШтрихкода.СписокНоменклатуры.Количество() > 1
			И ДанныеШтрихкода.ВидПродукции <> Перечисления.ВидыПродукцииИС.Алкогольная Тогда
			
			РезультатОбработки = РезультатТребуетсяУточнениеНоменклатуры(ДанныеШтрихкода, ПараметрыСканирования);
			
		// При сканировании в форме проверки и подбора
		ИначеЕсли ТипЗнч(ФормаУникальныйИдентификатор) = Тип("УникальныйИдентификатор") Тогда 
			
			Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС")
				И ДанныеШтрихкода.ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
				
				МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
				РезультатОбработки = МодульШтрихкодированиеЕГАИС.РезультатОбработкиШтрихкодаАкцизнойМарки(
					ДанныеШтрихкода, ПараметрыСканирования, ФормаУникальныйИдентификатор);
				
			ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП")
				И ДанныеШтрихкода.ВидПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
				
				МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
				РезультатОбработки = МодульШтрихкодированиеМОТП.РезультатОбработкиКодаМаркировки(
					ДанныеШтрихкода, ПараметрыСканирования, ФормаУникальныйИдентификатор);
				
			ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП")
				И ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеШтрихкода.ВидПродукции) Тогда
				
				МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
				РезультатОбработки = МодульШтрихкодированиеИСМПСлужебный.РезультатОбработкиКодаМаркировки(
					ДанныеШтрихкода, ПараметрыСканирования, ФормаУникальныйИдентификатор);
			Иначе
				
				РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
				РезультатОбработки.ДанныеШтрихкода = ДанныеШтрихкода;
				
			КонецЕсли;
			
		// При сканировании в форме документов
		ИначеЕсли ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
			Или ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
			
			РезультатОбработки = РезультатОбработкиШтрихкодаМаркируемойПродукции(ФормаУникальныйИдентификатор, ДанныеШтрихкода, ПараметрыСканирования);
			
		// При сканировании в форме документов
		ИначеЕсли ИнтеграцияИСКлиентСервер.ЭтоУпаковкаПоВиду(ДанныеШтрихкода.ВидУпаковки) Тогда
			
			РезультатОбработки = ОбработатьДанныеШтрихкода(ФормаУникальныйИдентификатор, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
			
		// При сканировании в форме РМК
		ИначеЕсли Не ДанныеШтрихкода.МаркируемаяПродукция Тогда
			
			РезультатОбработки = ОбработатьДанныеШтрихкодаНемаркируемойПродукции(ФормаУникальныйИдентификатор, ДанныеШтрихкода, ПараметрыСканирования);
			
		КонецЕсли;
		
		РезультатыОбработок.Вставить(ДанныеШтрихкода.Штрихкод, РезультатОбработки);
		
	КонецЦикла;
	
	Возврат РезультатыОбработок;
	
КонецФункции


Функция РезультатОбработкиТребуетсяОбновлениеКлючаСессии(ВидыПродукции, ПараметрыСканирования)
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования);
	Если ПрисутствуетПродукцияИСМП(ВидыПродукции) Тогда
		
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.ЗаполнитьРезультатОбработкиТребуетсяАвторизация(РезультатОбработки, ПараметрыСканирования);
		
	КонецЕсли;
	
	Если ПрисутствуетТабачнаяПродукция(ВидыПродукции) Тогда
		
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеМОТП.ЗаполнитьРезультатОбработкиТребуетсяАвторизация(РезультатОбработки, ПараметрыСканирования);
		
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция РезультатОбработкиОшибкаКонтроляДопустимыхВидовПродукции(СтрокаДанных, ПараметрыСканирования, ВидыПродукцииИС)
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода();
	РезультатОбработки.ЕстьОшибки  = Истина;
	РезультатОбработки.ОбщаяОшибка = Истина;
	РезультатОбработки.ТекстОшибки = ТекстОшибкиНеПоддерживаетсяВидПродукции(
		СтрокаДанных,
		ПараметрыСканирования.ДопустимыеВидыПродукции,
		ВидыПродукцииИС);
	РезультатОбработки.Штрихкод    = СтрокаДанных.Штрихкод;
	
	РезультатОбработки.ОшибкаДопустимостиВидовПродукции = Истина;
	Если ТипЗнч(ВидыПродукцииИС) = Тип("Массив") Тогда
		РезультатОбработки.ВидыПродукции = ВидыПродукцииИС;
	Иначе
		РезультатОбработки.ВидыПродукции.Добавить(ВидыПродукцииИС);
	КонецЕсли;
	
	ДанныеШтрихкода = СтрокаТаблицыДанныеКодовМаркировкиВСтруктуру(СтрокаДанных);
	
	Идентификатор = ПараметрыСканирования.ИдентификаторФормы;
	Если Идентификатор = Неопределено Тогда
		Идентификатор = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	РезультатОбработки.ДанныеШтрихкода = ДанныеШтрихкода;
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция ДанныеШтрихкодаТребуетсяОбработатьКакМаркировкуОстатков(ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	Если ДанныеШтрихкода = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли ИнтеграцияИСКлиентСервер.ЭтоУпаковкаПоВиду(ДанныеШтрихкода.ВидУпаковки) Тогда
		Возврат Ложь;
	ИначеЕсли Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура)
		И ПараметрыСканирования.РазрешенаОбработкаКодовСПустойНоменклатурой
		И ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции <> Неопределено
		И Не ЗначениеЗаполнено(ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции.Номенклатура)
		И Не ПустаяСтрока(ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции.ПредставлениеНоменклатуры)
		И ДанныеШтрихкода.GTIN = ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции.GTIN Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура);
	
КонецФункции

// Заполняет выбранные номенклатуру, характеристику, серию в случае потокового сканирования (GTIN-уточнение-автовыбор КМ)
//   или при сканировании остаточного КМ.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьПоДаннымУточнения(ДанныеПоШтрихкодам, ПараметрыСканирования, ЭлементыДляИзменения)
	
	Если ПараметрыСканирования.ДополнительныеПараметры.Свойство("ДанныеУточнения") Тогда
		ДанныеУточнения = ПараметрыСканирования.ДополнительныеПараметры.ДанныеУточнения;
		
		Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
			
			Если СтрокаДанных.ТребуетсяСопоставление 
				И ЗначениеЗаполнено(СтрокаДанных.ПримечаниеКРазборуШтрихкода.ИдентификаторОшибки) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаДанных.ТипУпаковки) Тогда
				Продолжить;
			КонецЕсли;
			
			ИзмененныеСвойства = ЗаполнитьСохраненнымВыборомДанныеШтрихкода(СтрокаДанных, ДанныеУточнения);
			
			ОтметитьКОбновлению(ЭлементыДляИзменения, СтрокаДанных, ИзмененныеСвойства);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтметитьНовыеШтрихкодыУпаковок(ДанныеПоШтрихкодам, ЭлементыДляИзменения)
	
	Для Каждого КодМаркировки Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		Если Не ЗначениеЗаполнено(КодМаркировки.ШтрихкодУпаковки)
			И (ИнтеграцияИСКлиентСервер.ЭтоУпаковка(КодМаркировки.ТипУпаковки)
				ИЛИ (КодМаркировки.МаркируемаяПродукция И Не КодМаркировки.ЭтоШтрихкодНоменклатуры)) Тогда
			Изменения = Новый Массив;
			Изменения.Добавить("Номенклатура");
			Изменения.Добавить("Характеристика");
			Изменения.Добавить("Серия");
			Изменения.Добавить("Количество");
			Изменения.Добавить("Штрихкод");
			Изменения.Добавить("ТипШтрихкода");
			Изменения.Добавить("ТипУпаковки");
			ОтметитьКОбновлению(ЭлементыДляИзменения, КодМаркировки, Изменения);
		КонецЕсли;
	КонецЦикла
	
КонецПроцедуры

Процедура ОтметитьКОбновлению(ЭлементыДляИзменения, СтрокаДанных, ИзмененныеСвойства)
	Изменения = ЭлементыДляИзменения.Получить(СтрокаДанных);
	Если Изменения = Неопределено Тогда
		Изменения = Новый Массив;
	КонецЕсли;
	Для Каждого ИмяРеквизита Из ИзмененныеСвойства Цикл
		Изменения.Добавить(ИмяРеквизита);
	КонецЦикла;
	ЭлементыДляИзменения.Вставить(СтрокаДанных, Изменения);
КонецПроцедуры

Процедура ОбновитьШтрихкодыУпаковок(ЭлементыДляИзменения, ПараметрыСканирования)
	
	Для Каждого КлючИЗначение Из ЭлементыДляИзменения Цикл
		ОбновитьСоздатьШтрихкодУпаковкиДанныхШтрихкода(
			КлючИЗначение.Ключ, КлючИЗначение.Значение, ПараметрыСканирования);
	КонецЦикла;
	
КонецПроцедуры

// Приводит данные по штрихкодам в соответствие данным ранее указанными пользователем.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьДаныеПоШтрихкодамНаОснованииСохраненногоВыбора(ДанныеПоШтрихкодам, ПараметрыСканирования, ЭлементыДляИзменения)
	
	Если ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСохраненногоВыбора = ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции;
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если ШтрихкодированиеИСКлиентСервер.ТребуетсяСброситьСохраненныйВыбор(ДанныеСохраненногоВыбора, СтрокаДанных) Тогда
			Возврат;
		КонецЕсли;
	
		ИзмененныеСвойства = ЗаполнитьСохраненнымВыборомДанныеШтрихкода(СтрокаДанных, ДанныеСохраненногоВыбора);
		Если СтрокаДанных.МаркируемаяПродукция Тогда
			ОтметитьКОбновлению(ЭлементыДляИзменения, СтрокаДанных, ИзмененныеСвойства);
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ОбновитьСоздатьШтрихкодУпаковкиДанныхШтрихкода(ДанныеШтрихкода, ИзмененныеСвойства, ПараметрыСканирования) Экспорт
	
	Если ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки) Тогда
		ОбновитьЭлементШтрихкодовУпаковок(ДанныеШтрихкода, ИзмененныеСвойства);
	Иначе
		ДанныеШтрихкода.ШтрихкодУпаковки = СоздатьМаркированныйТоварПоДаннымШтрихкода(ДанныеШтрихкода, ПараметрыСканирования);
	КонецЕсли;
	
КонецПроцедуры

// Актуализирует данные элемента справочника штрихкоды упаковок.
// 
// Параметры:
//  ЭлементСсылка - СправочникСсылка.ШтрихкодыУпаковокТоваров - Элемент справочника.
//  СохраненныйВыбор - Структура - Данные, которые были сохранены пользователем для дальнейшего заполнения.
Процедура ОбновитьЭлементШтрихкодовУпаковок(ДанныеШтрихкода, ИзмененныеСвойства = Неопределено)
	
	ТребуетсяЗаписьОбъекта = Ложь;
	Если ИзмененныеСвойства = Неопределено Тогда
		ИзменяемыеРеквизиты = Новый Структура("Номенклатура,Характеристика,Серия");
		ЗаполнитьЗначенияСвойств(ИзменяемыеРеквизиты, ДанныеШтрихкода);
		ТребуетсяЗаписьОбъекта = Истина;
	Иначе
		Если Не ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки)
			Или ИзмененныеСвойства.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Реквизиты = Метаданные.Справочники.ШтрихкодыУпаковокТоваров.Реквизиты;
		ИзменяемыеРеквизиты = Новый Структура;
	
		Для Каждого Свойство Из ИзмененныеСвойства Цикл
			Если Реквизиты.Найти(Свойство) <> Неопределено Тогда
				ТребуетсяЗаписьОбъекта = Истина;
				ИзменяемыеРеквизиты.Вставить(Свойство, ДанныеШтрихкода[Свойство]);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ТребуетсяЗаписьОбъекта Тогда
		Возврат;
	КонецЕсли;
	
	Справочники.ШтрихкодыУпаковокТоваров.ЗаполнитьШтрихкодУпаковки(ДанныеШтрихкода.ШтрихкодУпаковки, ИзменяемыеРеквизиты);
	
КонецПроцедуры

Функция ЗаполнитьСохраненнымВыборомДанныеШтрихкода(ДанныеШтрихкода, СохраненныйВыбор)
	
	ИзмененныеСвойства = Новый Массив;
	
	Для Каждого КлючЗначение Из СохраненныйВыбор Цикл
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШтрихкода, КлючЗначение.Ключ)
			И ЗначениеЗаполнено(КлючЗначение.Значение)
			И Не ЗначениеЗаполнено(ДанныеШтрихкода[КлючЗначение.Ключ]) Тогда
			
			ДанныеШтрихкода[КлючЗначение.Ключ] = КлючЗначение.Значение;
			ИзмененныеСвойства.Добавить(КлючЗначение.Ключ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИзмененныеСвойства;
	
КонецФункции

// Помещает дерево упаковок во временное хранилище. Адрес дерева упаковок помещает в каждые данные обработанных штрихкодов.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ПоместитьДеревоУпаковокВоВременноеХранилище(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = ПараметрыСканирования.ИдентификаторФормы;
	Если Идентификатор = Неопределено Тогда
		Идентификатор = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	АдресДереваУпаковок = ПоместитьВоВременноеХранилище(ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок, Идентификатор);
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДанных.АдресДереваУпаковок = АдресДереваУпаковок;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет данные штрихкода по документу основанию.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  Форма - ФормаКлиентскогоПриложения, Неопределено - форма-источник вызова
Процедура ЗаполнитьПоДокументуИОснованию(ДанныеПоШтрихкодам, ПараметрыСканирования, Форма)
	
	СформироватьДанныеДокументаОснования(ПараметрыСканирования);
	ДанныеДокументаОснования = Неопределено;
	Если ЭтоАдресВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования) Тогда
		ДанныеДокументаОснования = ПолучитьИзВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования);
	КонецЕсли;
	
	ДанныеДокумента = Неопределено;
	Если ЭтоАдресВременногоХранилища(ПараметрыСканирования.ДанныеТаблицыТовары) Тогда
		ДанныеДокумента = ПолучитьИзВременногоХранилища(ПараметрыСканирования.ДанныеТаблицыТовары);
	ИначеЕсли Форма <> Неопределено Тогда
		ДанныеДокумента = ПолучитьДанныеДокументаИзФормы(Форма, ПараметрыСканирования);
	КонецЕсли;
	
	ОбновленныеКодыМаркировки = Новый Массив;
	ОбновленаСпецификаИСМП = Ложь;
	
	ОбновлятьСерии = ИнтеграцияИС.СерииИспользуются();
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		СтрокаОбновлена = Ложь;
		
		Если ИнтеграцияИСКлиентСервер.ВидыПродукцииИСМП().Найти(СтрокаДанных.ВидПродукции)<>Неопределено Тогда
			Если МодульСпецификиИСМП().ЗаполнитьПоДокументуИОснованию(СтрокаДанных, ПараметрыСканирования, ДанныеДокумента) Тогда
				СтрокаОбновлена = Истина;
				ОбновленаСпецификаИСМП = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ОбновлятьСерии И Не СтрокаОбновлена Тогда
			Если ЗаполнитьСериюПоДаннымДокументаИОснования(СтрокаДанных, ДанныеДокументаОснования, ДанныеДокумента) Тогда
				СтрокаОбновлена = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаОбновлена
			И ЗначениеЗаполнено(СтрокаДанных.ШтрихкодУпаковки)
			И ЗначениеЗаполнено(СтрокаДанных.Серия) Тогда
			
			НовыеРеквизиты = Новый Структура("Серия", СтрокаДанных.Серия);
			Справочники.ШтрихкодыУпаковокТоваров.ИзменитьШтрихкодУпаковки(
				СтрокаДанных.ШтрихкодУпаковки, НовыеРеквизиты);
		КонецЕсли;
		
		Если СтрокаОбновлена Тогда
			ОбновленныеКодыМаркировки.Добавить(СтрокаДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	//Обновление данных дерева
	Если ОбновленаСпецификаИСМП Тогда
		МодульСпецификиИСМП().ОбновитьДеревоУпаковок(ДанныеПоШтрихкодам, ОбновленныеКодыМаркировки);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьСериюПоДаннымДокументаИОснования(СтрокаСКодомМаркировки, ДанныеДокументаОснования, ДанныеДокумента)
	
	Если Не ЗначениеЗаполнено(СтрокаСКодомМаркировки.Номенклатура) Тогда
		Возврат Ложь;
	ИначеЕсли ЗначениеЗаполнено(СтрокаСКодомМаркировки.Серия) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("Номенклатура, Характеристика",
		СтрокаСКодомМаркировки.Номенклатура, СтрокаСКодомМаркировки.Характеристика);
	
	НайденныеСтроки = Новый Массив;
	Если ДанныеДокументаОснования <> Неопределено Тогда
		НайденныеСтроки = ДанныеДокументаОснования.НайтиСтроки(ПараметрыПоиска);
	КонецЕсли;
	Если НайденныеСтроки.Количество() <> 1 И ДанныеДокумента <> Неопределено Тогда
		НайденныеСтроки = ДанныеДокумента.НайтиСтроки(ПараметрыПоиска);
	КонецЕсли;
	//Заполнение единственным вариантом из документа-основания или из документа
	Если НайденныеСтроки.Количество() = 1 Тогда
		СтрокаСКодомМаркировки.Серия = НайденныеСтроки[0].Серия;
		Возврат Истина;
	КонецЕсли;
	
	//Заполнение серией для которой проверка не завершена
	Если ДанныеДокумента <> Неопределено И НайденныеСтроки.Количество() Тогда
		ПроверятьИзКолонкиСтатусПроверки = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НайденныеСтроки[0], "СтатусПроверкиГосИС");
		ПроверятьИзКолонкиКоличествоПодобрано = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НайденныеСтроки[0], "КоличествоПодобрано");
		Если Не(ПроверятьИзКолонкиСтатусПроверки Или ПроверятьИзКолонкиКоличествоПодобрано) Тогда
			Возврат Ложь;
		КонецЕсли;
		НайденоСерий = 0;
		Серия = Неопределено;
		Для Каждого ВариантВыбора Из НайденныеСтроки Цикл
			Если ПроверятьИзКолонкиСтатусПроверки И ВариантВыбора.СтатусПроверкиГосИС <> 1 Тогда
				Продолжить;
			ИначеЕсли ПроверятьИзКолонкиКоличествоПодобрано И ВариантВыбора.Количество <= ВариантВыбора.КоличествоПодобрано Тогда
				Продолжить;
			КонецЕсли;
			Если НайденоСерий = 0 Тогда
				НайденоСерий = 1;
				Серия = ВариантВыбора.Серия;
			Иначе
				НайденоСерий = НайденоСерий + ?(Серия = ВариантВыбора.Серия, 0, 1);
			КонецЕсли;
		КонецЦикла;
		Если НайденоСерий = 1 Тогда
			СтрокаСКодомМаркировки.Серия = Серия;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Проверят на дубли коды маркировки в данных по штрихкодам.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если найдена ошибка.
Процедура ПроверитьНаДублиКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки)
	
	Если ЕстьОшибки Или ПараметрыСканирования.ПроверятьДублиКодовМаркировки = "НеПроверять" Тогда
		Возврат;
	КонецЕсли;
	
	КэшДобавляемыхКодовМаркировки = Новый Соответствие;
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		ДеревоУпаковок = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
		ЗаполнитьКэшКодовМаркировкиПоСтрокамДереваСКонтролемВхождения(КэшДобавляемыхКодовМаркировки, ДеревоУпаковок.Строки, ПараметрыСканирования, ЕстьОшибки);
		ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = ЕстьОшибки;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если Не СтрокаДанных.Входящий Или СтрокаДанных.НайденВоВложенныхУпаковках Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДанных.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская Тогда
			Продолжить;
		КонецЕсли;
		
		Если КэшДобавляемыхКодовМаркировки.Получить(СтрокаДанных.Штрихкод) = Неопределено Тогда
			КэшДобавляемыхКодовМаркировки.Вставить(СтрокаДанных.Штрихкод, Истина);
		Иначе
			СтрокаДанных.ТекстОшибки = ТекстОшибкиОбрабатываетсяПовторно();
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

// Выполняет проверку по строкам дерева на дубли, которые лежат в кэше. В случе нахождения - добавляет описание ошибки,
//    в противном случае - добавляет в кэш проверенных кодов маркировки.
// 
// Параметры:
//  КэшДобавляемыхКодовМаркировки - Соответствие - Кэш проверяемых кодов.
//  СтрокиДерева - КоллекцияСтрокДереваЗначений - Строки дерева для обхода.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ЗаполнитьКэшКодовМаркировкиПоСтрокамДереваСКонтролемВхождения(КэшДобавляемыхКодовМаркировки, СтрокиДерева, ПараметрыСканирования, ЕстьОшибки)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если ПараметрыСканирования.ПроверятьДублиКодовМаркировки = "Иерархия" Тогда
			ЗаполнитьКэшКодовМаркировкиПоСтрокамДереваСКонтролемВхождения(КэшДобавляемыхКодовМаркировки, СтрокаДерева.Строки, ПараметрыСканирования, ЕстьОшибки);
		КонецЕсли;
		
		Если КэшДобавляемыхКодовМаркировки.Получить(СтрокаДерева.Штрихкод) = Неопределено Тогда
			КэшДобавляемыхКодовМаркировки.Вставить(СтрокаДерева.Штрихкод, Истина);
		Иначе
			СтрокаДерева.ТекстОшибки = ТекстОшибкиОбрабатываетсяПовторно();
			СтрокаДерева.ЕстьОшибки  = Истина;
			ЕстьОшибки = Истина;
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

// Выполняет обработку данных, которые уточнил пользователь в диалоговом окне.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо обработать штрихкод.
//  РезультатВыбора - Структура, ОпределяемыйТип.СерияНоменклатуры - результат выбора серии пользователем.
//  РезультатОбработки - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
//  КэшированныеЗначения - Структура - кэшированные значения формы.
// Возвращаемое значение:
//   (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ОбработатьУточнениеДанных(Форма, РезультатВыбора, РезультатОбработки, КэшированныеЗначения) Экспорт
	
	ДанныеШтрихкода = РезультатОбработки.ДанныеШтрихкода;
	Если ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		Возврат ОбработатьУточнениеДанныхДляУпаковки(Форма, РезультатВыбора, РезультатОбработки, КэшированныеЗначения);
	Иначе
		Возврат ОбработатьУточнениеДанныхДляМаркированногоТовара(Форма, РезультатВыбора, РезультатОбработки, КэшированныеЗначения);
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьМассивСтрокДереваПоGTIN(ДеревоУпаковок, GTIN, МассивСтрок)
		
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		ЗаполнитьМассивСтрокДереваПоGTIN(СтрокаДерева, GTIN, МассивСтрок);
		
		Если СтрокаДерева.GTIN = GTIN Тогда
			МассивСтрок.Добавить(СтрокаДерева);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбработатьУточнениеДанныхДляУпаковки(Форма, РезультатВыбора, РезультатОбработки, КэшированныеЗначения)
	
	ДанныеШтрихкода = РезультатОбработки.ДанныеШтрихкода;
	ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(Форма);
	ДанныеКэша = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
	ДанныеДляУточненияСведений = ДанныеКэша.ДанныеДляУточненияСведенийПользователя.Данные;
	
	ДеревоУпаковок = ПолучитьИзВременногоХранилища(ДанныеШтрихкода.АдресДереваУпаковок);
	
	МассивСтрокДерева = Новый Массив;
	Если ТипЗнч(РезультатВыбора) = Тип("Строка") Тогда
		
		//Выбор произведен в форме уточнения данных упаковки. Возможно необходимо перезаписать штрихкоды упаковок.
		СтрокаДерева = ДеревоУпаковок.Строки.Найти(РезультатВыбора, "Штрихкод", Истина);
		Если Не ЗначениеЗаполнено(СтрокаДерева.ШтрихкодУпаковки) Тогда
			СтрокаДерева.ШтрихкодУпаковки = СоздатьМаркированныйТоварПоДаннымШтрихкода(СтрокаДерева, ПараметрыСканирования);
		КонецЕсли;
		Если ДанныеДляУточненияСведений.Найти(СтрокаДерева.Штрихкод) <> Неопределено Тогда
			ДанныеДляУточненияСведений.Удалить(ДанныеДляУточненияСведений.Найти(СтрокаДерева.Штрихкод));
		КонецЕсли;
		
	ИначеЕсли РезультатВыбора.ЗапомнитьВыбор Тогда
		ЗаполнитьМассивСтрокДереваПоGTIN(ДеревоУпаковок, РезультатВыбора.ДанныеВыбора.GTIN, МассивСтрокДерева);
	Иначе
		НайденнаяСтрокаДерева = ДеревоУпаковок.Строки.Найти(РезультатВыбора.ДанныеВыбора.КодМаркировки, "Штрихкод", Истина);
		МассивСтрокДерева.Добавить(НайденнаяСтрокаДерева);
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из МассивСтрокДерева Цикл
		
		ПерезаписатьШтрихкодУпаковки = Ложь;
		Для Каждого КлючЗначение Из РезультатВыбора.ДанныеВыбора Цикл
			
			ИмяСвойства = КлючЗначение.Ключ;
			Если СтрокаДерева.Владелец().Колонки.Найти(ИмяСвойства) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаДерева[ИмяСвойства] = КлючЗначение.Значение Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИмяСвойства = "Номенклатура"
				Или ИмяСвойства = "Характеристика"
				Или ИмяСвойства = "Серия" Тогда
				ПерезаписатьШтрихкодУпаковки = Истина;
			КонецЕсли;
			
			СтрокаДерева[ИмяСвойства] = КлючЗначение.Значение;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(СтрокаДерева.ШтрихкодУпаковки)
			И ПерезаписатьШтрихкодУпаковки Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			
			НачатьТранзакцию();
			
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Справочник.ШтрихкодыУпаковокТоваров");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаДерева.ШтрихкодУпаковки);
				Блокировка.Заблокировать();
				
				ОбновитьЭлементШтрихкодовУпаковок(СтрокаДерева);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ИмяСобытияЖурналРегистрации = НСтр("ru = 'ИС МП: Обработка выбора серии'", ОбщегоНазначения.КодОсновногоЯзыка());
				ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
				
				ВызватьИсключение ПодробноеПредставлениеОшибки;
				
			КонецПопытки;
			
			УстановитьПривилегированныйРежим(Ложь);
			
		ИначеЕсли Не ЗначениеЗаполнено(СтрокаДерева.ШтрихкодУпаковки)
			И ПараметрыСканирования.СоздаватьШтрихкодУпаковки Тогда
			
			СтрокаДерева.ШтрихкодУпаковки = СоздатьМаркированныйТоварПоДаннымШтрихкода(СтрокаДерева, ПараметрыСканирования);
			
		КонецЕсли;
		
		Если ДанныеДляУточненияСведений.Получить(СтрокаДерева.Штрихкод) <> Неопределено Тогда
			ДанныеДляУточненияСведений.Удалить(СтрокаДерева.Штрихкод);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеДляУточненияСведений.Количество() = 0 Тогда
		ВложенныеШтрихкоды = ИнициализацияВложенныхШтрихкодов();
		ВложенныеШтрихкоды.ДеревоУпаковок = ДеревоУпаковок;
		ЗаполнитьТаблицуМаркированныеТоварыПоСтрокамДереваУпаковок(ДеревоУпаковок.Строки, ВложенныеШтрихкоды.МаркированныеТовары);
		РезультатОбработки = ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
	Иначе
		РезультатОбработки.ДобавленныеСтроки = Новый Массив;
		РезультатОбработки.ИзмененныеСтроки  = Новый Массив;
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция ОбработатьУточнениеДанныхДляМаркированногоТовара(Форма, РезультатВыбора, РезультатОбработки, КэшированныеЗначения)
	
	ДанныеШтрихкода = РезультатОбработки.ДанныеШтрихкода;
	ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(Форма);
	
	РезультатОбработки.ТребуетсяВыборСерии = Ложь;
	
	ДанныеШтрихкода.ДополнительныеПараметры = РезультатВыбора;
	
	ДанныеВыбора = РезультатВыбора.ДанныеВыбора;
	
	ПерезаписатьШтрихкодУпаковки = Ложь;
	Для Каждого КлючЗначение Из ДанныеВыбора Цикл
		
		ИмяСвойства = КлючЗначение.Ключ;
		Если Не ДанныеШтрихкода.Свойство(ИмяСвойства) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеШтрихкода[ИмяСвойства] = КлючЗначение.Значение Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИмяСвойства = "Номенклатура"
			Или ИмяСвойства = "Характеристика"
			Или ИмяСвойства = "Серия" Тогда
			ПерезаписатьШтрихкодУпаковки = Истина;
		КонецЕсли;
		
		ДанныеШтрихкода[ИмяСвойства] = КлючЗначение.Значение;
		
	КонецЦикла;
	
	Если ДанныеВыбора.Свойство("Коэффициент") И ЗначениеЗаполнено(ДанныеВыбора.Коэффициент) Тогда
		РегистрыСведений.ГрупповыеУпаковкиИСМП.СохранитьКоэффициентУпаковки(ДанныеВыбора.Номенклатура, ДанныеВыбора.Коэффициент);
		ДанныеШтрихкода.КоличествоБлоков = 1;
		ДанныеШтрихкода.КоличествоПачек = ДанныеВыбора.Коэффициент;
		ДанныеШтрихкода.Количество = ДанныеВыбора.Коэффициент;
	КонецЕсли;
	
	Если ПараметрыСканирования.ИспользуютсяДанныеВыбораПоМаркируемойПродукции Тогда
		ШтрихкодированиеИСМПКлиентСервер.ОбработатьСохраненныйВыборДанныхПоМаркируемойПродукции(Форма, ДанныеШтрихкода);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеШтрихкода.ВидПродукции) Тогда
		ВидПродукции = ИнтеграцияИСМП.ВидПродукцииПоНоменклатуре(ДанныеШтрихкода.Номенклатура);
		ДанныеШтрихкода.ВидПродукции = ВидПродукции;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеШтрихкода.Штрихкод) И ЗначениеЗаполнено(РезультатОбработки.Штрихкод) Тогда
		ДанныеШтрихкода.Штрихкод = РезультатОбработки.Штрихкод;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки)
		И ПерезаписатьШтрихкодУпаковки Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ШтрихкодыУпаковокТоваров");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ДанныеШтрихкода.ШтрихкодУпаковки);
			Блокировка.Заблокировать();
			
			ОбновитьЭлементШтрихкодовУпаковок(ДанныеШтрихкода);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ИмяСобытияЖурналРегистрации = НСтр("ru = 'ИС МП: Обработка выбора серии'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
			
			ВызватьИсключение ПодробноеПредставлениеОшибки;
			
		КонецПопытки;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	ИначеЕсли Не ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки) Тогда
		
		ДанныеШтрихкода.ШтрихкодУпаковки = СоздатьМаркированныйТоварПоДаннымШтрихкода(ДанныеШтрихкода, ПараметрыСканирования);
		
	КонецЕсли;
	
	РезультатОбработки.ДанныеШтрихкода = ДанныеШтрихкода;
	
	ВложенныеШтрихкоды = Неопределено;
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ДанныеШтрихкода.ТипУпаковки)
			И ЭтоАдресВременногоХранилища(РезультатОбработки.АдресДереваУпаковок) Тогда
		ВложенныеШтрихкоды = ИнициализацияВложенныхШтрихкодов();
		ВложенныеШтрихкоды.ДеревоУпаковок = ПолучитьИзВременногоХранилища(РезультатОбработки.АдресДереваУпаковок);
	КонецЕсли;
	
	РезультатОбработки = ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
	
	Возврат РезультатОбработки;

КонецФункции

// Инициализирует таблицу значений для заполнения данных документов.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Описание:
// * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура.
// * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика.
// * Серия - ОпределяемыйТип.СерияНоменклатуры - Серия.
// * Количество - Число - Количество товара.
Функция ИнициализицияТаблицыДанныхДокумента(ПараметрыСканирования)
	
	ТаблицаДанныхДокумента = Новый ТаблицаЗначений;
	ТаблицаДанныхДокумента.Колонки.Добавить("Номенклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаДанныхДокумента.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаДанныхДокумента.Колонки.Добавить("Серия",          Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ТаблицаДанныхДокумента.Колонки.Добавить("Количество",     ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	
	Если ПрисутствуетПродукцияИСМП(ПараметрыСканирования.ДопустимыеВидыПродукции) Тогда
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.ДобавитьКолонкиТаблицыДанныхДокумента(ТаблицаДанныхДокумента);
	КонецЕсли;
	
	Возврат ТаблицаДанныхДокумента;
	
КонецФункции

// Получает данные реквизитов шапки документа.
//  Имена реквизитов собираются по метаданным документа.
// 
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ.
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения реквизитов переданного документа, включая ссылку на документ.
Функция ПолучитьСтруктуруРеквизитовДокумента(ДокументСсылка) Экспорт
		
	КоллекцияРеквизитов = ДокументСсылка.Метаданные().Реквизиты;
	МассивИменРеквизитов = новый Массив;
	МассивИменРеквизитов.Добавить("Ссылка");
	МассивИменРеквизитов.Добавить("Дата");
	Для Каждого Реквизит Из КоллекцияРеквизитов Цикл
		МассивИменРеквизитов.Добавить(Реквизит.Имя);
	КонецЦикла;
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, МассивИменРеквизитов);
	
КонецФункции

Функция СтрокаТаблицыДанныеКодовМаркировкиВСтруктуру(СтрокаТаблицы) Экспорт
	
	Если ТипЗнч(СтрокаТаблицы) = Тип("СтрокаТаблицыЗначений") Тогда
		ДанныеСтруктура = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицы);
		ДанныеСтруктура.Удалить("СтрокаДерева");
	Иначе
		ДанныеСтруктура = СтрокаТаблицы;
	КонецЕсли;
	
	Возврат ДанныеСтруктура;
	
КонецФункции

// Заполняет таблицу "Маркированные товары" на основании данных дерева упаковок. При заполнении исключаются упаковки.
//
// Параметры:
//  СтрокиДерева - КоллекцияСтрокДереваЗначений - Строки дерева упаковок.
//  МаркированныеТовары - ТаблицаЗначений - Таблица с маркируемой продукцией.
//  УпаковкаВерхнегоУровня - СтрокаДереваЗначений - Строка дерева верхнего уровня.
Процедура ЗаполнитьТаблицуМаркированныеТоварыПоСтрокамДереваУпаковок(СтрокиДерева, МаркированныеТовары, УпаковкаВерхнегоУровня = Неопределено) Экспорт
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено Тогда
			УпаковкаВерхнегоУровня = СтрокаДерева;
		КонецЕсли;
		
		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
			Или СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			НоваяСтрока = МаркированныеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
			НоваяСтрока.СтрокаДерева           = СтрокаДерева;
			НоваяСтрока.УпаковкаВерхнегоУровня = УпаковкаВерхнегоУровня;
		КонецЕсли;
		
		ЗаполнитьТаблицуМаркированныеТоварыПоСтрокамДереваУпаковок(СтрокаДерева.Строки, МаркированныеТовары);
		
	КонецЦикла;
	
КонецПроцедуры

// Инициализирует структуру результата обработки штрихкодов.
//
// Возвращаемое значение:
//  Структура - Описание:
//  * ШтрихкодыПродукцииДляСопоставления - Массив Из Строка - Штрихкоды, которым небходимо сопоставить номенклатуру.
//  * РезультатыОбработки - Соответствие:
//    ** Ключ     - Строка - значение штрихкода
//    ** Значение - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ИнициализацияРезультатаОбработкиШтрихкодов() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("РезультатыОбработки",                Новый Соответствие);
	Результат.Вставить("ШтрихкодыПродукцииДляСопоставления", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьДеревоУпаковокИШтрихкодыУпаковокУточненнымиДанными(ДанныеШтрихкода, ИменаСвойств, ПерезаписатьШтрихкодУпаковки)
	
	Если ДанныеШтрихкода.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Групповая
		Или Не ЭтоАдресВременногоХранилища(ДанныеШтрихкода.АдресДереваУпаковок) Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоУпаковок = ПолучитьИзВременногоХранилища(ДанныеШтрихкода.АдресДереваУпаковок);
	
	ДанныеПоУпаковкам = Новый ТаблицаЗначений;
	ДанныеПоУпаковкам.Колонки.Добавить("ШтрихкодУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	Для Каждого ИмяСвойства Из ИменаСвойств Цикл
		ДанныеПоУпаковкам.Колонки.Добавить(ИмяСвойства, ДеревоУпаковок.Колонки[ИмяСвойства].ТипЗначения);
	КонецЦикла;
	
	Для Каждого СтрокаГрупповойУпаковки Из ДеревоУпаковок.Строки Цикл
		
		Для Каждого ИмяСвойства Из ИменаСвойств Цикл
			СтрокаГрупповойУпаковки[ИмяСвойства] = ДанныеШтрихкода[ИмяСвойства];
		КонецЦикла;
		
		Если ЗначениеЗаполнено(СтрокаГрупповойУпаковки.ШтрихкодУпаковки) Тогда
			ЗаполнитьЗначенияСвойств(ДанныеПоУпаковкам.Добавить(), СтрокаГрупповойУпаковки);
		КонецЕсли;
		
		Для Каждого СтрокаПотребительскойУпаковки Из СтрокаГрупповойУпаковки.Строки Цикл
			
			Для Каждого ИмяСвойства Из ИменаСвойств Цикл
				СтрокаПотребительскойУпаковки[ИмяСвойства] = ДанныеШтрихкода[ИмяСвойства];
			КонецЦикла;
			
			Если ЗначениеЗаполнено(СтрокаПотребительскойУпаковки.ШтрихкодУпаковки) Тогда
				ЗаполнитьЗначенияСвойств(ДанныеПоУпаковкам.Добавить(), СтрокаПотребительскойУпаковки);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ДеревоУпаковок, ДанныеШтрихкода.АдресДереваУпаковок);
	
	Если Не ПерезаписатьШтрихкодУпаковки Или ДанныеПоУпаковкам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ШтрихкодыУпаковокТоваров");
		ЭлементБлокировки.ИсточникДанных = ДанныеПоУпаковкам;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "ШтрихкодУпаковки");
		Блокировка.Заблокировать();
		
		Для Каждого ДанныеПоУпаковке Из ДанныеПоУпаковкам Цикл
			ОбновитьЭлементШтрихкодовУпаковок(ДанныеПоУпаковке, ИменаСвойств);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ИмяСобытияЖурналРегистрации = НСтр("ru = 'ИС МП: Обработка выбора серии'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
		
		ВызватьИсключение ПодробноеПредставлениеОшибки;
		
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ПерезаписатьШтрихкодУпаковки = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыВызовСервера

//Выполняет обработку штрихкодов и возвращает результат этой обработки.
//
//Параметры:
//  СписокШтрихкодов - Массив из Строка - значения штрихкодов
//  ПараметрыСканирования - См. ПараметрыСканирования.
//  КэшированныеЗначения - Структура - Содержит поля кэшируемых значений.
//  ФормаУникальныйИдентификатор - УникальныйИдентификатор - Идентификатор, по которому будут помещены данные по обработанным
//                                                           штрихкодам в хранилище.
//                               - ФормаКлиентскогоПриложения - Форма, из которой осуществлен вызов
//  КешДанныхРазбора - Соответствие Из КлючИЗначение:
//   * Ключ - Строка - Штрихкод
//   * Значение - Структура - Данные разбора и примечание:
//      * ДанныеРазбора - Структура - Данные разбора штрикхода
//      * ПримечаниеКРезультатуРазбора - Структура - Примечание к результату разбора
//Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//   * Ключ - Строка - Штрихкод
//   * Значение - См. ИнициализироватьРезультатОбработкиШтрихкода
Функция ОбработатьШтрихкоды(ДанныеШтрихкодаСписок, ПараметрыСканирования, КэшированныеЗначения, ФормаУникальныйИдентификатор, КешДанныхРазбора = Неопределено) Экспорт
	
	ДанныеПоШтрихкодам    = ИнициализацияДанныхПоШтрихкодам();
	ДанныеКодовМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
	
	ПодготовитьДанныеКодовМаркировкиДляОбработки(ДанныеКодовМаркировки, ДанныеШтрихкодаСписок, ПараметрыСканирования, КешДанныхРазбора);
	
	Если ТипЗнч(ФормаУникальныйИдентификатор) <> Тип("УникальныйИдентификатор") Тогда
		УникальныйИдентификатор = ФормаУникальныйИдентификатор.УникальныйИдентификатор;
		Форма                   = ФормаУникальныйИдентификатор;
	Иначе
		УникальныйИдентификатор = ФормаУникальныйИдентификатор;
		Форма                   = Неопределено;
	КонецЕсли;
	
	// Заполнение массива видов продукции штрихкодов. При выполнении проверок
	// можно будет использовать ПрисутствуетТабачнаяПродукция(ВидыПродукции)
	ВидыПродукцииНоменклатуры = ДанныеКодовМаркировки.ВыгрузитьКолонку("ВидПродукции");
	ДанныеПоШтрихкодам.ВидыПродукции = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВидыПродукцииНоменклатуры);
	
	РезультатПроверок = ВыполнитьПроверкиПередПолучениемДанныхПоШтрихкодам(
		ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Если РезультатПроверок.Количество() > 0 Тогда
		Возврат РезультатПроверок;
	КонецЕсли;
	
	ЗаполнитьДанныеПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования, Форма);
	
	РезультатыОбработки = ОбработатьДанныеШтрихкодов(
		ДанныеПоШтрихкодам, УникальныйИдентификатор, ПараметрыСканирования);
	
	Возврат РезультатыОбработки;
	
КонецФункции

// Выполняет обработку данных по штрихкодам.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ИнициализацияДанныхПоШтрихкодам).
//  УникальныйИдентификатор - УникальныйИдентификатор - Идентификатор, по которому будут помещены данные по обработанным
//                                                      штрихкодам в хранилище.
//  ПараметрыСканирования - См. ПараметрыСканирования
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//   * Ключ - Строка - Штрихкод
//   * Значение - См. ИнициализироватьРезультатОбработкиШтрихкода
Функция ОбработатьДанныеШтрихкодов(ДанныеПоШтрихкодам, УникальныйИдентификатор, ПараметрыСканирования)
	
	ЕстьОшибки = ВыполнитьПроверкуНаОшибкиДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования);
	ПроверитьНеобходимостьУточненияДанныхУПользователя(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	РезультатыОбработки = ОбработатьДанныеПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки, УникальныйИдентификатор);
	
	ДеревоУпаковок = ?(
		ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено,
		Неопределено,
		ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок);
	
	ОшибкиПриОбработке = Ложь;
	ДанныеДляКэширования = Новый Массив;
	Для Каждого КлючИЗначение Из РезультатыОбработки Цикл
		Если ЗначениеЗаполнено(КлючИЗначение.Значение.ТекстОшибки) 
			Или КлючИЗначение.Значение.ЕстьОшибки
			Или КлючИЗначение.Значение.ОбщаяОшибка
			Или КлючИЗначение.Значение.ЕстьОшибкиВДеревеУпаковок Тогда
			ОшибкиПриОбработке = Истина;
			Прервать;
		Иначе
			
			Если КлючИЗначение.Значение.ТребуетсяСопоставлениеНоменклатуры Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеДляКэширования.Добавить(Новый Структура("ДанныеШтрихкода, РезультатОбработки, ДеревоУпаковок", 
				КлючИЗначение.Значение.ДанныеШтрихкода, 
				КлючИЗначение.Значение,
				ДеревоУпаковок));
		КонецЕсли;
	КонецЦикла;
	
	Если Не ОшибкиПриОбработке Тогда
		
		Для Каждого ДанныеКэша Из ДанныеДляКэширования Цикл
			
			ЗакэшироватьОбработанныеШтрихкоды(
				ПараметрыСканирования, ДанныеКэша.ДанныеШтрихкода, ДанныеКэша.РезультатОбработки, ДанныеКэша.ДеревоУпаковок);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат РезультатыОбработки;
	
КонецФункции

#КонецОбласти