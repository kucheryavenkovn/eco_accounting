////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
//

&НаСервере
Функция  ПолучитьДанныеПланировок()
	
	СхемаКомпоновкиДанных = Отчеты.АР_ЗанятостьПлощадей.ПолучитьМакет("Макет");;
	НастройкиКомпоновки = КомпоновщикНастроек.Настройки;
	ЕстьОтборПоСобственнику = Ложь;
	СтрокаОбъектНедвижимостиРодитель = "";
	Для Каждого ЭлементОтбора Из НастройкиКомпоновки.Отбор.Элементы Цикл
		Если Найти(Строка(ЭлементОтбора.ЛевоеЗначение), ".Собственник") > 0 И ЭлементОтбора.Использование Тогда
			НаименованиеПоля = Строка(ЭлементОтбора.ЛевоеЗначение);
			ИсключаемыйТекстПоля = Лев(НаименованиеПоля, Найти(НаименованиеПоля, ".Собственник"));
			НаименованиеПоля = СтрЗаменить(НаименованиеПоля, ИсключаемыйТекстПоля, "");
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(НаименованиеПоля);
			ЕстьОтборПоСобственнику = Истина;
			ИмяРеквизитаСобственник = СтрЗаменить(ИсключаемыйТекстПоля + "Собственник", "ОбъектАренды.", "");
			Если Найти(ИсключаемыйТекстПоля, "Родитель") > 0 Тогда
				СтрокаОбъектНедвижимостиРодитель = СтрЗаменить(Лев(ИсключаемыйТекстПоля, СтрДлина(ИсключаемыйТекстПоля) - 1), "ОбъектАренды", "");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Попытка 
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		
		ТаблицаЗначений =  Новый ТаблицаЗначений;
		
		ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	Исключение
		Возврат Новый Массив
	КонецПопытки;
	
	Если ЕстьОтборПоСобственнику Тогда
		Для Каждого ЭлементОтбора Из НастройкиКомпоновки.Отбор.Элементы Цикл
			Если Найти(Строка(ЭлементОтбора.ЛевоеЗначение), "Собственник") > 0 И ЭлементОтбора.Использование Тогда
				НаименованиеПоля = Строка(ЭлементОтбора.ЛевоеЗначение);
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИсключаемыйТекстПоля + НаименованиеПоля);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СписокОрганизаций = Новый СписокЗначений;
	СписокКонтрагентов = Новый СписокЗначений;
	СписокДоговоров = Новый СписокЗначений;
	СписокОбъектовАренды = Новый СписокЗначений;
	СписокСтатусов = Новый СписокЗначений;
	СписокСобственников = Новый СписокЗначений;
	
	Если НЕ ТаблицаЗначений.Колонки.Найти("ОрганизацияСсылка") = Неопределено Тогда
		СписокОрганизаций.ЗагрузитьЗначения(ТаблицаЗначений.ВыгрузитьКолонку("ОрганизацияСсылка"));
	КонецЕсли;
	СписокКонтрагентов.ЗагрузитьЗначения(ТаблицаЗначений.ВыгрузитьКолонку("КонтрагентСсылка"));
	СписокДоговоров.ЗагрузитьЗначения(ТаблицаЗначений.ВыгрузитьКолонку("ДоговорСсылка"));
	СписокОбъектовАренды.ЗагрузитьЗначения(ТаблицаЗначений.ВыгрузитьКолонку("ОбъектАрендыСсылка"));
	СписокСтатусов.ЗагрузитьЗначения(ТаблицаЗначений.ВыгрузитьКолонку("СтатусСсылка"));
	СписокСобственников.ЗагрузитьЗначения(ТаблицаЗначений.ВыгрузитьКолонку("СобственникСсылка"));
	
	ЕстьОтборПоДоговорам = Ложь;
	Для Каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если Лев(Строка(ЭлементОтбора.ЛевоеЗначение), 10) = "Контрагент"
			ИЛИ Лев(Строка(ЭлементОтбора.ЛевоеЗначение), 7) = "Договор" Тогда
			Если ЭлементОтбора.Использование Тогда
				ЕстьОтборПоДоговорам = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ЕстьОтборПоОрганизациям = Ложь;
	Для Каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если Лев(Строка(ЭлементОтбора.ЛевоеЗначение), 11) = "Организация" Тогда
			Если ЭлементОтбора.Использование Тогда
				ЕстьОтборПоОрганизациям = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ЕстьОтборПоСтатусам = Ложь;
	Для Каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если Лев(Строка(ЭлементОтбора.ЛевоеЗначение), 6) = "Статус" Тогда
			Если ЭлементОтбора.Использование Тогда
				ЕстьОтборПоСтатусам = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ЕстьОтборПоОбъекту = Ложь;
	Для Каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если Лев(Строка(ЭлементОтбора.ЛевоеЗначение), 6) = "Объект" Тогда
			Если ЭлементОтбора.Использование Тогда
				ЕстьОтборПоОбъекту = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если Не ЕстьОтборПоОбъекту Тогда 
		СписокОбъектовАренды.Добавить(Справочники.АР_ОбъектыАренды.ПустаяСсылка());
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", ?(ЗначениеЗаполнено(Период), КонецДня(Период), КонецДня(ТекущаяДата())));
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	Запрос.УстановитьПараметр("СписокОбъектов", СписокОбъектовАренды);
	Запрос.УстановитьПараметр("СписокДоговоров", СписокДоговоров);
	Запрос.УстановитьПараметр("СписокКонтрагентов", СписокКонтрагентов);
	Запрос.УстановитьПараметр("СписокСтатусов", СписокСтатусов);
	Запрос.УстановитьПараметр("СписокСобственников", СписокСобственников);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбъектыАренды.Ссылка КАК ОбъектАренды,
	|	ВЫБОР
	|		КОГДА ОбъектыАренды.ТипОбъекта = ЗНАЧЕНИЕ(Справочник.АР_ТипыОбъектовАренды.ПустаяСсылка)
	|			ТОГДА ""Не заполнено""
	|		ИНАЧЕ ОбъектыАренды.ТипОбъекта
	|	КОНЕЦ КАК ТипОбъекта,
	|	ОбъектыАренды.ЗначениеХарактеристики КАК Площадь,
	|	ОбъектыАренды.Наименование,
	|	ОбъектыАренды.ЕдиницаИзмерения,
	|	ОбъектыАренды.РасположениеНаПлане.ФайлПланировки КАК ФайлПланировки,
	|	ОбъектыАренды.РасположениеНаПлане.Лист КАК Лист,
	|	ОбъектыАренды.РасположениеНаПлане.ОбластьТекста КАК ОбластьТекста,
	|	ОбъектыАренды.РасположениеНаПлане.ГрОбъект КАК ГрОбъект
	|ПОМЕСТИТЬ ВТОбъектыАренды
	|ИЗ
	|	Справочник.АР_ОбъектыАренды КАК ОбъектыАренды
	|ГДЕ
	|	ОбъектыАренды.Ссылка В(&СписокОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбъектыАрендыЭтажа.ОбъектАренды КАК ОбъектАренды,
	|	МИНИМУМ(ЕСТЬNULL(АР_СтатусыОбъектовАренды.Период, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))) КАК ДатаНачала,
	|	МАКСИМУМ(ЕСТЬNULL(АР_СтатусыОбъектовАренды.ДатаОкончанияАренды, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))) КАК ДатаОкончания,
	|	ЕСТЬNULL(АР_СтатусыОбъектовАренды.Статус, ЗНАЧЕНИЕ(Перечисление.АР_СтатусыОбъектовАренды.Свободен)) КАК Статус,
	|	АР_СтатусыОбъектовАренды.Договор.Владелец КАК Контрагент,
	|	АР_СтатусыОбъектовАренды.Договор КАК Договор,
	|	АР_СтатусыОбъектовАренды.ЗаключениеДоговора,
	|	ЕСТЬNULL(АР_СтавкиСрезПоследних.Ставка, 0) КАК Ставка,
	|	АР_СтавкиСрезПоследних.СпособНачисления КАК СпособНачисления,
	|	АР_СтатусыОбъектовАренды.Регистратор КАК Регистратор,
	|	ЕСТЬNULL(АР_СтавкиСрезПоследних.Площадь, 0) КАК ПлощадьПоДоговору
	|ПОМЕСТИТЬ ВТСтатусыВременно
	|ИЗ
	|	ВТОбъектыАренды КАК ОбъектыАрендыЭтажа
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АР_СтатусыОбъектовАренды.СрезПоследних(&Период, Услуга.АР_УслугаАренды ИЛИ Услуга = Значение(Справочник.Номенклатура.ПустаяСсылка)) КАК АР_СтатусыОбъектовАренды
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АР_Ставки.СрезПоследних(&Период, Услуга.АР_УслугаАренды И (СрокДействия >= &Период
	|					ИЛИ СрокДействия = ДАТАВРЕМЯ(1, 1, 1))) КАК АР_СтавкиСрезПоследних
	|			ПО АР_СтатусыОбъектовАренды.Договор = АР_СтавкиСрезПоследних.Договор
	|				И АР_СтатусыОбъектовАренды.ОбъектАренды = АР_СтавкиСрезПоследних.ОбъектАренды
	|		ПО ОбъектыАрендыЭтажа.ОбъектАренды = АР_СтатусыОбъектовАренды.ОбъектАренды
	|			И (&Период = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ИЛИ АР_СтатусыОбъектовАренды.ДатаНачалаАренды <= &Период)
	|			И (АР_СтатусыОбъектовАренды.ДатаОкончанияАренды = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ИЛИ КОНЕЦПЕРИОДА(АР_СтатусыОбъектовАренды.ДатаОкончанияАренды, ДЕНЬ) >= &Период
	|					И &Период <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))"  
	+ ?(ЕстьОтборПоДоговорам,
	"ГДЕ
	|	АР_СтатусыОбъектовАренды.Договор В(&СписокДоговоров)
	|	И АР_СтатусыОбъектовАренды.Договор.Владелец В(&СписокКонтрагентов) ", " ")
	+ ?(ЕстьОтборПоСтатусам,
	?(ЕстьОтборПоДоговорам, " И ЕСТЬNULL(АР_СтатусыОбъектовАренды.Статус, ЗНАЧЕНИЕ(Перечисление.АР_СтатусыОбъектовАренды.Свободен)) В(&СписокСтатусов) ",
	"ГДЕ
	|	ЕСТЬNULL(АР_СтатусыОбъектовАренды.Статус, ЗНАЧЕНИЕ(Перечисление.АР_СтатусыОбъектовАренды.Свободен)) В(&СписокСтатусов) "), " ") +
	?(ЕстьОтборПоОрганизациям, ?(ЕстьОтборПоДоговорам ИЛИ ЕстьОтборПоСтатусам, " И ", " ГДЕ ") + 
	"АР_СтатусыОбъектовАренды.Договор.Организация В(&СписокОрганизаций)", "") + 
	"
	|СГРУППИРОВАТЬ ПО
	|	ОбъектыАрендыЭтажа.ОбъектАренды,
	|	АР_СтатусыОбъектовАренды.Договор.Владелец,
	|	АР_СтатусыОбъектовАренды.Договор,
	|	ЕСТЬNULL(АР_СтатусыОбъектовАренды.Статус, ЗНАЧЕНИЕ(Перечисление.АР_СтатусыОбъектовАренды.Свободен)),
	|	АР_СтатусыОбъектовАренды.ЗаключениеДоговора,
	|	АР_СтатусыОбъектовАренды.Регистратор,
	|	АР_СтавкиСрезПоследних.Ставка,
	|	АР_СтавкиСрезПоследних.СпособНачисления,
	|	АР_СтавкиСрезПоследних.Площадь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТСтатусыВременно.ОбъектАренды КАК ОбъектАренды,
	|	ВТСтатусыВременно.ДатаНачала,
	|	ВТСтатусыВременно.ДатаОкончания,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(ОбъектыПодлежащиеСдачеВАренду.ПодлежитСдачеВАренду, ЛОЖЬ)
	|			ТОГДА ВТСтатусыВременно.Статус
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТСтатусыВременно.Регистратор ССЫЛКА Документ.АР_ИзменениеСтатусовОбъектов
	|					ТОГДА ВТСтатусыВременно.Статус
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.АР_СтатусыОбъектовАренды.ПустаяСсылка)
	|			КОНЕЦ
	|	КОНЕЦ КАК Статус,
	|	ВТСтатусыВременно.Контрагент,
	|	ВТОбъектыАренды.Площадь КАК Площадь,
	|	ВТОбъектыАренды.Наименование КАК Наименование,
	|	ВТОбъектыАренды.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТОбъектыАренды.ТипОбъекта,
	|	ВТСтатусыВременно.ЗаключениеДоговора,
	|	ЕСТЬNULL(ЦветаРаскраскиПоСтатусам.Цвет, ""255,255,0"") КАК ЦветСтатуса,
	|	ВЫБОР
	|		КОГДА ЦветаРаскраскиПоСтатусам.Цвет ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЦветУказан,
	|	ВТОбъектыАренды.ФайлПланировки КАК ФайлПланировки,
	|	ВТОбъектыАренды.Лист КАК Лист,
	|	ВТОбъектыАренды.ОбластьТекста КАК ОбластьТекста,
	|	ВТОбъектыАренды.ГрОбъект КАК ГрОбъект,
	|	ВТСтатусыВременно.Договор,
	|	ВТСтатусыВременно.Ставка,
	|	ВТСтатусыВременно.СпособНачисления,
	|	ВТСтатусыВременно.СпособНачисления.Валюта КАК Валюта,
	|	ВТСтатусыВременно.ПлощадьПоДоговору,
	|	Собственники.Собственник.Представление КАК Собственник
	|ИЗ
	|	ВТСтатусыВременно КАК ВТСтатусыВременно
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыАренды КАК ВТОбъектыАренды
	|		ПО ВТСтатусыВременно.ОбъектАренды = ВТОбъектыАренды.ОбъектАренды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АР_ЦветаРаскраскиПомещений КАК ЦветаРаскраскиПоСтатусам
	|		ПО ВТСтатусыВременно.Статус = ЦветаРаскраскиПоСтатусам.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АР_СобственникиОбъектовАренды.СрезПоследних(&Период) КАК Собственники
	|		ПО ВТСтатусыВременно.ОбъектАренды" + СтрокаОбъектНедвижимостиРодитель + " = Собственники.ОбъектАренды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АР_ОбъектыПодлежащиеСдачеВАренду.СрезПоследних(&Период, ) КАК ОбъектыПодлежащиеСдачеВАренду
	|		ПО (ОбъектыПодлежащиеСдачеВАренду.ОбъектАренды = ВТСтатусыВременно.ОбъектАренды)
	|ИТОГИ
	|	МАКСИМУМ(Площадь),
	|	МАКСИМУМ(Наименование),
	|	МАКСИМУМ(ЕдиницаИзмерения),
	|	МАКСИМУМ(ЦветСтатуса),
	|	МАКСИМУМ(ОбластьТекста),
	|	МАКСИМУМ(ГрОбъект)
	|ПО
	|	ФайлПланировки,
	|	Лист,
	|	ОбъектАренды";
	 
	Результат = Запрос.Выполнить();
	
	МассивФайловПланировок = Новый Массив;
	
	Если Результат.Пустой() Тогда
		Сообщить("Нет данных для отображения!");
	Иначе
		ТаблицаСтатусов = Результат.Выгрузить();
		ТаблицаСтатусов.Свернуть("Статус, ЦветСтатуса, ЦветУказан");
		
		ВыборкаПоФайлам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоФайлам.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(ВыборкаПоФайлам.ФайлПланировки) Тогда
				
				ВыборкаПоЛистам = ВыборкаПоФайлам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоЛистам.Следующий() Цикл
					ВыборкаОбъекты = ВыборкаПоЛистам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаОбъекты.Следующий() Цикл
						Сообщить("Для объекта недвижимости """ + СокрЛП(ВыборкаОбъекты.ОбъектАренды) + """ не указана планировка!", СтатусСообщения.Важное);   							
					КонецЦикла;
				КонецЦикла;  			
				
				Продолжить;
				
			КонецЕсли;
			
			ВыборкаПоЛистам = ВыборкаПоФайлам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ПервыйЛист = "";
			ТекстОшибки = "";
			
			МассивЛистов = Новый Массив;
				
			Пока ВыборкаПоЛистам.Следующий() Цикл
				Если Не ЗначениеЗаполнено(ПервыйЛист) Тогда
					ПервыйЛист = СокрЛП(ВыборкаПоЛистам.Лист);
				КонецЕсли;
				ВыборкаОбъекты = ВыборкаПоЛистам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				МассивОбъектов = Новый Массив;
				
				Пока ВыборкаОбъекты.Следующий() Цикл
					Если Не ЗначениеЗаполнено(ВыборкаОбъекты.ГрОбъект) Тогда
						Продолжить;
					КонецЕсли;
					Если ЕстьОтборПоСобственнику Тогда
						ДанныеСобственника = АР_ОбщиеПроцедуры.ПолучитьДанныеОСобственнике(ВыборкаОбъекты.ОбъектАренды, Период);
						МассивСобственников = ДанныеСобственника.МассивСобственников;
						СобственникЕсть = Ложь;
						Для Каждого Собственник из МассивСобственников Цикл 
							Если НЕ СписокСобственников.НайтиПоЗначению(Собственник) = Неопределено Тогда
								СобственникЕсть = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						Если Не СобственникЕсть Тогда 
							Продолжить;
						КонецЕсли;
					КонецЕсли;	
					Выборка = ВыборкаОбъекты.Выбрать();
					Пока Выборка.Следующий() Цикл
						ОписаниеСтруктура = СформироватьОписание(Выборка);
						СтруктураОбъектов = Новый Структура("ГрОбъект, ОбластьТекста, ОбъектАренды, Статус, ЦветСтатуса, Описание, ТекстОписания, НавигационнаяСсылка, ЗаголовокСистемы", 
							ВыборкаОбъекты.ГрОбъект, ВыборкаОбъекты.ОбластьТекста, ВыборкаОбъекты.ОбъектАренды.Наименование, Выборка.Статус, ВыборкаОбъекты.ЦветСтатуса, ОписаниеСтруктура.Текст, ОписаниеСтруктура.Описание, ОписаниеСтруктура.НавигационнаяСсылка, ОписаниеСтруктура.ЗаголовокСистемы);
						МассивОбъектов.Добавить(СтруктураОбъектов);
					КонецЦикла;
				КонецЦикла;
				Если МассивОбъектов.Количество() > 0 Тогда
					СтруктураЛиста = Новый Структура("Лист, МассивОбъектов", ВыборкаПоЛистам.Лист, МассивОбъектов);
					МассивЛистов.Добавить(СтруктураЛиста);
				КонецЕсли;
			КонецЦикла;
			
			МассивСтатусов = Новый Массив;
			Для Каждого СтрокаТаб Из ТаблицаСтатусов Цикл
				Если СтрокаТаб.Статус = NULL Тогда
					Продолжить;
				КонецЕсли;
				Если Не СтрокаТаб.ЦветУказан Тогда
					Сообщить("Для статуса """ + СтрокаТаб.Статус + """ не назначен цвет. Будет использован цвет по умолчанию.");
				КонецЕсли;
				МассивСтатусов.Добавить(Новый Структура("Статус, Цвет", Строка(СтрокаТаб.Статус), ПолучитьЦвет(СтрокаТаб.ЦветСтатуса)));
			КонецЦикла;
			
			Если МассивЛистов.Количество() > 0 Тогда
				СтруктураФайлов = Новый Структура("ФайлПланировки, МассивЛистов, ПервыйЛист, МассивСтатусов, ВыводитьИнформациюВоВсплывающихОкнах", ВыборкаПоФайлам.ФайлПланировки, МассивЛистов, ПервыйЛист, МассивСтатусов, НЕ ЭтоВебКлиент И ВыводитьИнформациюВоВсплывающихОкнах);
				МассивФайловПланировок.Добавить(СтруктураФайлов);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;	
	
	Возврат МассивФайловПланировок;
	
КонецФункции

&НаСервере
Функция ПечатьЗанятыхПлощадейНаСервере(ДанныеПланировок)
	
	Возврат АР_ОбщиеПроцедурыКлиентСервер.ПечатьЗанятыхПлощадей(ДанныеПланировок);
	
КонецФункции

&НаСервере
Функция НайтиЛист(ИмяЛиста, Excel)
	
	Для Каждого Стр Из Excel.Sheets Цикл
		Если СокрЛП(Стр.Name) = ИмяЛиста Тогда
			Возврат Стр;	
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СформироватьОписание(ВыборкаОбъекты)
	
	СтруктураПолей = Новый Структура;
	КолонкиВыборки = ВыборкаОбъекты.Владелец().Колонки;
	Для Каждого Колонка Из КолонкиВыборки Цикл
		СтруктураПолей.Вставить(Колонка.Имя);	
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(СтруктураПолей, ВыборкаОбъекты);
	
	Текст = "";
	Для Каждого Стр Из Отчет.СоставИнформации Цикл
		ЗначениеРеквизита = ПолучитьЗначениеРеквизита(СтруктураПолей, Стр.ИмяПоля);
		Если Стр.Использование И ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			Текст = Текст + ?(ЗначениеЗаполнено(Текст), Символы.ПС, "") + ?(ЗначениеЗаполнено(Стр.Подпись), СокрЛП(Стр.Подпись) + ": ", "") + ЗначениеРеквизита;	
		КонецЕсли;
	КонецЦикла;
	
	Структура = Новый Структура("Текст, Описание, НавигационнаяСсылка, ЗаголовокСистемы");
	Структура.Описание = Текст;
	Если НЕ ВыводитьИнформациюВоВсплывающихОкнах Тогда
		Структура.Текст = Текст;
	ИначеЕсли ЗначениеЗаполнено(КраткоеПредставлениеОбъектаПоле) Тогда
		Структура.Текст = "" + ПолучитьЗначениеРеквизита(СтруктураПолей, КраткоеПредставлениеОбъектаПоле);
	Иначе	
		Структура.Текст = "";
	КонецЕсли;
	Структура.НавигационнаяСсылка = ПутьКИсполняемомуФайлу + " /URL """ + НавигационнаяСсылкаИнформационнойБазы + "/#" + ПолучитьНавигационнуюСсылку(ВыборкаОбъекты.ОбъектАренды) + """";
	Структура.ЗаголовокСистемы = "" + ОбменДаннымиПовтИсп.ИмяЭтойИнформационнойБазы() + "";
	
	Возврат Структура;
	
КонецФункции

&НаСервере
Функция ПолучитьЗначениеРеквизита(СтруктураПолей, Знач ИмяПоля) 
	
	ИмяПоля = СтрЗаменить(ИмяПоля, "ОбъектНедвижимости", "ОбъектАренды");
	//ИмяПоля = СтрЗаменить(ИмяПоля, "ОбъектАренды.Собственник", "Собственник");
	
	ЕдИзм = Неопределено;
	Валюта = Неопределено;
	Если ВРег(ИмяПоля) = "СТАВКА" И ЗначениеЗаполнено(СтруктураПолей[ИмяПоля]) И СтруктураПолей.Свойство("Валюта", Валюта) Тогда
		СтруктураПолей.Вставить(ИмяПоля, "" + АР_ОбщиеПроцедуры.ПолучитьСтавку(СтруктураПолей[ИмяПоля], Период) + " " + Валюта);	
	КонецЕсли;
		
	ПозицияТочки = Найти(ИмяПоля, ".");
	Если ПозицияТочки <> 0 Тогда
		ИмяОбъекта = Лев(ИмяПоля, ПозицияТочки-1);
		ИмяПоля = "Ссылка" + Сред(ИмяПоля, ПозицияТочки);
		времИмяПоля = ИмяПоля;
		Если ЗначениеЗаполнено(СтруктураПолей[ИмяОбъекта])
			И НЕ ТипЗнч(СтруктураПолей[ИмяОбъекта]) = Тип("Строка") Тогда
			ЗначениеРеквизита = АР_ОбщиеПроцедуры.ПолучитьЗначениеРеквизита(СтруктураПолей[ИмяОбъекта], времИмяПоля,, Период);
		Иначе
			ЗначениеРеквизита = "";
		КонецЕсли;
	Иначе
		ЗначениеРеквизита = СтруктураПолей[ИмяПоля];
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеРеквизита) = Тип("Дата") Тогда
		ЗначениеРеквизита = Формат(ЗначениеРеквизита, "ДФ=dd.MM.yyyy");	
	КонецЕсли;
	Если (Найти(ВРег(ИмяПоля), "ПЛОЩАДЬ") <> 0 ИЛИ Найти(ВРег(ИмяПоля), "ЗНАЧЕНИЕХАРАКТЕРИСТИКИ") <> 0) И ЗначениеЗаполнено(ЗначениеРеквизита) И СтруктураПолей.Свойство("ЕдиницаИзмерения", ЕдИзм) Тогда
		ЗначениеРеквизита =  "" + ЗначениеРеквизита + " " + ЕдИзм;	
	КонецЕсли;
	Возврат ЗначениеРеквизита;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьЦвет(знач ЦветСтрока)
	
	Если Не ЗначениеЗаполнено(ЦветСтрока) Тогда
		Возврат 255 + 255*256;
	Иначе
		Ном = Найти(ЦветСтрока, ",");
		КрасныйСтрока = Лев(ЦветСтрока, Ном - 1);
		Строка = Сред(ЦветСтрока, Ном + 1);
		Красный = Число(КрасныйСтрока);
		Ном = Найти(Строка, ",");
		ЗеленыйСтрока = Лев(Строка, Ном - 1);
		Строка = Сред(Строка, Ном + 1);
		Зеленый = Число(ЗеленыйСтрока);
		Синий = Число(Строка);
		Возврат Синий * 256 * 256 + Зеленый * 256 + Красный;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроек()
	
	СхемаКомпоновкиДанных = Отчеты.АР_ЗанятостьПлощадей.ПолучитьМакет("Макет");
	АР_ОбщиеПроцедуры.ДополнитьТекстЗапросаДополнительнымиПолями(СхемаКомпоновкиДанных, "НаборДанных2.НаборДанных1");
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, ЭтаФорма.УникальныйИдентификатор))
	);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализироватьКомпоновщикНастроек();
	ЗагрузитьНастройки(Неопределено);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНД ФОРМЫ
//

&НаКлиенте
Функция ПолучитьПутьКИсполняемомуФайлу()
	
	ПутьКФайлу = """c:\Program Files (x86)\1cv8\common\1cestart.exe""";
	Файл = Новый Файл(ПутьКФайлу);
	Если НЕ Файл.Существует() Тогда
		МассивВозможныхПутей = Новый Массив;
		МассивВозможныхПутей.Добавить("c:\Program Files (x86)\1cv8");
		МассивВозможныхПутей.Добавить("c:\Program Files\1cv8");
		МассивВозможныхПутей.Добавить("c:\");
		Для Каждого Путь Из МассивВозможныхПутей Цикл
			НайденныеФайлы = НайтиФайлы(Путь, "1cestart.exe", Истина);
			Если НайденныеФайлы.Количество() > 0 Тогда
				ПутьКФайлу = НайденныеФайлы[0].ПолноеИмя;	
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ПутьКФайлу = "";
		#Если НЕ ВебКлиент	Тогда
		ПутьКФайлу = КаталогПрограммы() + "1cv8.exe";
		#КонецЕсли
	КонецЕсли;
	
	Возврат ПутьКФайлу;
	
КонецФункции

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	Если Не АР_ОбщиеПроцедурыКлиент.ДоступнаРаботаMSOffice(2) Тогда
		Возврат;		
	КонецЕсли;
	
	ЭтоВебКлиент = Ложь;
	#Если ВебКлиент	Тогда
	ЭтоВебКлиент = Истина;	
	Сообщить("В режиме веб-клиента дополнительные функции MS Excel при клике на объекте (вывод информации во всплывающих окнах и открытие объекта в 1С) отключены");	
	ПутьКИсполняемомуФайлу = "";
	#КонецЕсли
	
	Если НЕ ЭтоВебКлиент И НЕ ЗначениеЗаполнено(ПутьКИсполняемомуФайлу) Тогда
		ПутьКИсполняемомуФайлу = ПолучитьПутьКИсполняемомуФайлу();
	КонецЕсли;
	
	НавигационнаяСсылкаИнформационнойБазы = ПолучитьНавигационнуюСсылкуИнформационнойБазы();
	
	ДанныеПланировок = ПолучитьДанныеПланировок();
	

	ОбрабатыватьШаблоныИПланировкиНаКлиенте = НЕ ЭтоВебКлиент И АР_ОбщиеПроцедуры.ПолучитьЗначениеКонстанты("АР_ОбрабатыватьШаблоныИПланировкиНаКлиенте");
	
	Если НЕ ОбрабатыватьШаблоныИПланировкиНаКлиенте Тогда
		
		МассивДанных = ПечатьЗанятыхПлощадейНаСервере(ДанныеПланировок);
		
		Если НЕ ЗначениеЗаполнено(МассивДанных) Тогда
			Возврат;	
		КонецЕсли;	
			
		Для Каждого Данные Из МассивДанных Цикл
			
			СохранятьКак = АР_ОбщиеПроцедурыКлиентСервер.ПолучитьИмяФайлаПланировки(Данные.ФайлПланировки, "Занятость площадей");
			Файл = Новый Файл(СохранятьКак);
			ИмяФайла = Файл.Имя;
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ДанныеФайла", Данные);
			ДополнительныеПараметры.Вставить("СохранятьКак", СохранятьКак);
			ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
			
			Если ЭтоВебКлиент Тогда
				СформироватьОтчетРасширениеПредложено(Ложь, ДополнительныеПараметры);
			Иначе
				ОписаниеОповещения = Новый ОписаниеОповещения("СформироватьОтчетРасширениеПредложено", ЭтотОбъект, ДополнительныеПараметры);
				ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе	
		АР_ОбщиеПроцедурыКлиентСервер.ПечатьЗанятыхПлощадей(ДанныеПланировок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетРасширениеПредложено(РасширениеРаботыСФайламиПодключено, ДополнительныеПараметры) Экспорт
	
	ДанныеФайла = ДополнительныеПараметры.ДанныеФайла;
	СохранятьКак = ДополнительныеПараметры.СохранятьКак;
	ИмяФайла = ДополнительныеПараметры.ИмяФайла;

	Если РасширениеРаботыСФайламиПодключено Тогда
		РабочийКаталогПользователя = РаботаСФайламиСлужебныйКлиент.РабочийКаталогПользователя();
		Если ПустаяСтрока(РабочийКаталогПользователя) Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не задан рабочий каталог'"));
			Возврат;
		КонецЕсли;
		
		ПолныйПуть = "";
		ФайлМожноОткрывать = РаботаСФайламиСлужебныйКлиент.ПолучитьФайлВРабочийКаталог(
				ДанныеФайла.СсылкаНаДвоичныеДанныеФайла,
				"",
				ТекущаяДата(),
				ИмяФайла,
				КаталогВременныхФайлов(),
				ПолныйПуть
			);

		АР_ОбщиеПроцедурыКлиент.УстановитьМакросыВФайлПланировки(ПолныйПуть);	
			
		Если ФайлМожноОткрывать Тогда
			ЗапуститьПриложение(ПолныйПуть);
		КонецЕсли; 
		
	Иначе
		ПолучитьФайл(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, СохранятьКак, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаЦветов(Команда)
	
	ОткрытьФорму("РегистрСведений.АР_ЦветаРаскраскиПомещений.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура СоставИнформацииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Не Копирование Тогда
		Отказ = Истина;
		ОткрытьФорму("Отчет.АР_ЗанятостьПлощадей.Форма.ФормаВыбораПолей", Новый Структура("ЗакрыватьПриВыборе", Истина),ЭтаФорма,,ВариантОткрытияОкна.ОтдельноеОкно,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)
	КонецЕсли;
	
	СоставИнформацииПриОкончанииРедактированияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СоставИнформацииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Модифицированность = Ложь;
	СоставИнформацииПриОкончанииРедактированияНаСервере();
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура СоставИнформацииПриОкончанииРедактированияНаСервере()
	
	СоставИнформации.Загрузить(Отчет.СоставИнформации.Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура СоставИнформацииПослеУдаления(Элемент)
	
	СоставИнформацииПриОкончанииРедактированияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Стр = Отчет.СоставИнформации.Добавить();
	Стр.Информация = ВыбранноеЗначение.Заголовок;
	Стр.ИмяПоля = ВыбранноеЗначение.Поле;
	Стр.Использование = Истина;
	
	СоставИнформацииПриОкончанииРедактированияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КраткоеПредставлениеОбъектаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОткрытьФорму("Отчет.АР_ЗанятостьПлощадей.Форма.ФормаВыбораПолей", Новый Структура("ЗакрыватьПриВыборе", Истина), Элемент,,ВариантОткрытияОкна.ОтдельноеОкно,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КраткоеПредставлениеОбъектаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	КраткоеПредставлениеОбъектаПоле = ВыбранноеЗначение.Поле;
	КраткоеПредставлениеОбъекта = ВыбранноеЗначение.Заголовок;
	
КонецПроцедуры

&НаКлиенте
Процедура КраткоеПредставлениеОбъектаОчистка(Элемент, СтандартнаяОбработка)
	
	КраткоеПредставлениеОбъектаПоле = "";
	КраткоеПредставлениеОбъекта = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьИнформациюВоВсплывающихОкнахПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Отчет = Форма.Отчет;
	Элементы = Форма.Элементы;
	
	Элементы.КраткоеПредставлениеОбъекта.Видимость = Форма.ВыводитьИнформациюВоВсплывающихОкнах;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставИнформацииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Модифицированность = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СоставИнформацииПриИзменении(Элемент)
	Модифицированность = Ложь;
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Если Настройки.Получить("ДополнительныеСвойства") = Неопределено Тогда
		Настройки.Вставить("ДополнительныеСвойства", Новый Структура);	
	КонецЕсли;
	СохранитьНастройки(Настройки["ДополнительныеСвойства"]);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	ЗагрузитьНастройки(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки(ДополнительныеСвойства)
	
	ДополнительныеСвойства.Вставить("Период", Период);
	ДополнительныеСвойства.Вставить("ВыводитьИнформациюВоВсплывающихОкнах", ВыводитьИнформациюВоВсплывающихОкнах);
	ДополнительныеСвойства.Вставить("КраткоеПредставлениеОбъекта", КраткоеПредставлениеОбъекта);
	ДополнительныеСвойства.Вставить("КраткоеПредставлениеОбъектаПоле", КраткоеПредставлениеОбъектаПоле);
	ДополнительныеСвойства.Вставить("НастройкиСКД", КомпоновщикНастроек.Настройки);
	
	МассивПолей = Новый Массив;
	Для Каждого СтрокаТЧ Из Отчет.СоставИнформации Цикл
		Структура = Новый Структура("Использование, ИмяПоля, Информация");
		ЗаполнитьЗначенияСвойств(Структура, СтрокаТЧ);
		МассивПолей.Добавить(Структура);
	КонецЦикла;
	
	ДополнительныеСвойства.Вставить("МассивПолейИнформации", МассивПолей);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройки(Настройки)
	
	ЗаполнитьСоставИнформацииПоУмолчанию = Ложь;
	Если ЗначениеЗаполнено(Настройки) И ЗначениеЗаполнено(Настройки["ДополнительныеСвойства"]) Тогда
		ДополнительныеСвойства = Настройки["ДополнительныеСвойства"];
		Если ДополнительныеСвойства.Свойство("Период") Тогда
			Период 								= ДополнительныеСвойства.Период;
		КонецЕсли;
		Если ДополнительныеСвойства.Свойство("ВыводитьИнформациюВоВсплывающихОкнах") Тогда
			ВыводитьИнформациюВоВсплывающихОкнах 	= ДополнительныеСвойства.ВыводитьИнформациюВоВсплывающихОкнах;
		КонецЕсли;
		Если ДополнительныеСвойства.Свойство("КраткоеПредставлениеОбъекта") Тогда
			КраткоеПредставлениеОбъекта 				= ДополнительныеСвойства.КраткоеПредставлениеОбъекта;
		КонецЕсли;
		Если ДополнительныеСвойства.Свойство("КраткоеПредставлениеОбъектаПоле") Тогда
			КраткоеПредставлениеОбъектаПоле 			= ДополнительныеСвойства.КраткоеПредставлениеОбъектаПоле;
		КонецЕсли;	
		Если ДополнительныеСвойства.Свойство("НастройкиСКД") Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(ДополнительныеСвойства.НастройкиСКД); 
		КонецЕсли;
		Если ДополнительныеСвойства.Свойство("МассивПолейИнформации") Тогда
			Отчет.СоставИнформации.Очистить();
			МассивПолей = ДополнительныеСвойства.МассивПолейИнформации;
			Для Каждого Элемент Из МассивПолей Цикл
				Стр = Отчет.СоставИнформации.Добавить();
				ЗаполнитьЗначенияСвойств(Стр, Элемент);
			КонецЦикла;
		Иначе
			ЗаполнитьСоставИнформацииПоУмолчанию = Истина;
		КонецЕсли;
	Иначе
		Период = ТекущаяДата();
		КраткоеПредставлениеОбъектаПоле = "ОбъектНедвижимости.Наименование";
		КраткоеПредставлениеОбъекта = "Объект недвижимости.Наименование";
		СхемаКомпоновки = Отчеты.АР_ЗанятостьПлощадей.ПолучитьМакет("Макет");
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
		ЗаполнитьСоставИнформацииПоУмолчанию = Истина;
	КонецЕсли;
	
	Если ЗаполнитьСоставИнформацииПоУмолчанию Тогда
		Отчет.СоставИнформации.Очистить();
		СписокИнформации = Новый СписокЗначений;
		СписокИнформации.Добавить("ОбъектАренды", "Объект недвижимости", Истина);
		СписокИнформации.Добавить("ОбъектАренды.ЗначениеХарактеристики", "Объект недвижимости.Площадь", Истина);   
		СписокИнформации.Добавить("Контрагент", "Арендатор", Истина);	
		Для Каждого Элемент Из СписокИнформации Цикл
			Стр = Отчет.СоставИнформации.Добавить();
			Стр.Использование = Элемент.Пометка;
			Стр.ИмяПоля = Элемент.Значение;
			Стр.Информация = Элемент.Представление;
		КонецЦикла;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

