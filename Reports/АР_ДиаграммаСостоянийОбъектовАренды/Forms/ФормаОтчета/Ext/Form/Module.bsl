
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализироватьКомпоновщикНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(Отчет.НачалоПериода) Тогда
		Отчет.НачалоПериода = НачалоМесяца(ТекущаяДата());
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Отчет.КонецПериода) Тогда
		Отчет.КонецПериода = КонецМесяца(ТекущаяДата());
	КонецЕсли;
	
	Если ДиаграммаГанта.ОбластьПостроения.ШкалаВремени.Элементы.Количество() > 0 Тогда
		ДиаграммаГанта.ОбластьПостроения.ШкалаВремени.Элементы[0].Единица = ТипЕдиницыШкалыВремени.Месяц;
	КонецЕсли;
	
	Отчет.ОтображатьТолькоАренду = Истина;
	
	ПриИзмененииПериода();
  	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МасштабПриИзменении(Элемент)
	
	ПриИзмененииМасштаба();
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаГантаВыбор(Элемент, Значения, СтандартнаяОбработка, Дата)
	
	ОбъектНедвижимости = Неопределено;
	ДатаСреза = Дата(1, 1, 1);
	КоличествоИнтервалов = 0;
	НачалоПересечения = Дата(1, 1, 1);
	КонецПересечения = Отчет.КонецПериода;
	НачалоПериода = Дата(1,1,1);
	Статус = Неопределено;
	Если ТипЗнч(Значения) = Тип("Массив") Тогда
		Для Каждого Элемент Из Значения Цикл
			Если ТипЗнч(Элемент) = Тип("ИнтервалДиаграммыГанта") Тогда
				ОбъектНедвижимости = Элемент.Значение.Точка.Значение;
				ДатаСреза = Элемент.Конец;
				КоличествоИнтервалов = КоличествоИнтервалов + 1;
				НачалоПересечения = Макс(НачалоПересечения, Элемент.Начало);
				КонецПересечения = Мин(КонецПересечения, Элемент.Конец);
				НачалоПериода = Элемент.Начало;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если КоличествоИнтервалов > 1 Тогда
		Если Отчет.ОтображатьТолькоАренду ИЛИ (НЕ Отчет.ОтображатьТолькоАренду И НЕ ТипЗнч(ОбъектНедвижимости) = Тип("Строка")) Тогда
			ТекстСообщения = "Для объекта недвижимости """ + ОбъектНедвижимости + """ некорректно установлен статус с " 
				+ Формат(НачалоПересечения, "ДФ=dd.MM.yyyy") + " по " + Формат(КонецПересечения, "ДФ=dd.MM.yyyy");
		Иначе
			МассивПодстрок = СтрРазделить(ОбъектНедвижимости, "_");
			ОбъектНедвижимости = ПолучитьОбъектНедвижимостиПоКоду(МассивПодстрок[0]);
			Услуга = ПолучитьНоменклатуруПоКоду(МассивПодстрок[1]);
			ТекстСообщения = "Для объекта недвижимости """ + ОбъектНедвижимости + """ и услуги """ + Услуга + """ некорректно установлен статус с " 
				+ Формат(НачалоПересечения, "ДФ=dd.MM.yyyy") + " по " + Формат(КонецПересечения, "ДФ=dd.MM.yyyy");
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Регистратор = ПолучитьДокументУстановкиСтатуса(ОбъектНедвижимости, ДатаСреза, НачалоПериода);
	Если ЗначениеЗаполнено(Регистратор) Тогда
		ПоказатьЗначение(, Регистратор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбъектНедвижимостиПоКоду(Код)
	
	Возврат Справочники.АР_ОбъектыАренды.НайтиПоКоду(Код)
	
КонецФункции

&НаСервере
Функция ПолучитьНоменклатуруПоКоду(Код)
	
	Возврат Справочники.Номенклатура.НайтиПоКоду(Код)
	
КонецФункции

&НаКлиенте
Процедура ДиаграммаГантаОбработкаРасшифровки(Элемент, Расшифровки, СтандартнаяОбработка, Дата)
	
	Если ТипЗнч(Расшифровки) = Тип("Массив") Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#Область РаботаСПериодом

&НаКлиенте
Процедура ВидПериодаПриИзменении(Элемент)
	
	ВыборПериодаКлиент.ВидПериодаПриИзменении(Элемент, ВидПериода, Отчет.НачалоПериода, Отчет.КонецПериода, Период);
	ВыборПериодаКлиентСервер.ПереключитьТекущуюСтраницуВыбораПериода(ВидПериода, Элементы.ГруппаПоляВводаПериода);
	ПриИзмененииПериода();
		
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ВыборПериодаКлиент.ПериодПриИзменении(Элемент, Период, Отчет.НачалоПериода, Отчет.КонецПериода);
	ПриИзмененииПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПериодНачалоВыбораЗавершение", ЭтотОбъект);
	ВыборПериодаКлиент.ПериодНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка, 
		ВидПериода, Отчет.НачалоПериода, ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура ПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВыборПериодаКлиент.ПериодОбработкаВыбора(
		Элемент, ВыбранноеЗначение, СтандартнаяОбработка,
		ВидПериода, Период, Отчет.НачалоПериода, Отчет.КонецПериода);
	ПриИзмененииПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ВыборПериодаКлиент.ПериодАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка,
		ВидПериода, Период, Отчет.НачалоПериода, Отчет.КонецПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборПериодаКлиент.ПериодОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка,
		ВидПериода, Период, Отчет.НачалоПериода, Отчет.КонецПериода);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	СформироватьОтчетНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаЦветов(Команда)
	
	ОткрытьФорму("РегистрСведений.АР_ЦветаРаскраскиПомещений.ФормаСписка");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Отчет    = Форма.Отчет;
	Элементы = Форма.Элементы;

	Форма.Период = ВыборПериодаКлиентСервер.ПолучитьПредставлениеПериодаОтчета(
		Форма.ВидПериода, Отчет.НачалоПериода, Отчет.КонецПериода);
		
	ВыборПериодаКлиентСервер.ПереключитьТекущуюСтраницуВыбораПериода(Форма.ВидПериода, Элементы.ГруппаПоляВводаПериода);
		
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчетНаСервере()
	
	СхемаКомпоновкиДанных = Отчеты.АР_ДиаграммаСостоянийОбъектовАренды.ПолучитьМакет("Макет");;
	НастройкиКомпоновки = КомпоновщикНастроек.Настройки;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Попытка 
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		
		ТаблицаЗначений =  Новый ТаблицаЗначений;
		
		ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	Исключение
		Возврат;
	КонецПопытки;
	
	СписокУслуг = Новый СписокЗначений;
	СписокОбъектовАренды = Новый СписокЗначений;
	СписокСтатусов = Новый СписокЗначений;
	
	СписокУслуг.ЗагрузитьЗначения(ТаблицаЗначений.ВыгрузитьКолонку("УслугаСсылка"));
	СписокОбъектовАренды.ЗагрузитьЗначения(ТаблицаЗначений.ВыгрузитьКолонку("ОбъектАрендыСсылка"));
	СписокСтатусов.ЗагрузитьЗначения(ТаблицаЗначений.ВыгрузитьКолонку("СтатусСсылка"));
	СписокУслуг.Добавить(Справочники.Номенклатура.ПустаяСсылка());
	
	ПостроительОтчета = Новый ПостроительОтчета(ПолучитьТекстЗапросаПосторителя());
	ПостроительОтчета.Параметры.Вставить("СписокУслуг", СписокУслуг);
	ПостроительОтчета.Параметры.Вставить("СписокОбъектовАренды", СписокОбъектовАренды);
	ПостроительОтчета.Параметры.Вставить("СписокСтатусов", СписокСтатусов);
	
	ДиаграммаГанта.Очистить();
		
	ПостроительОтчета.Параметры.Вставить("ДатаНач", Отчет.НачалоПериода);
	ПостроительОтчета.Параметры.Вставить("ДатаКон", Отчет.КонецПериода);
	ПостроительОтчета.Параметры.Вставить("НеТолькоАренда", Не Отчет.ОтображатьТолькоАренду);
	ПостроительОтчета.Выполнить();
	
	Если ЗначениеЗаполнено(Отчет.НачалоПериода) И ЗначениеЗаполнено(Отчет.КонецПериода) Тогда
		
		ДиаграммаГанта.АвтоОпределениеПолногоИнтервала = Ложь;
		ДиаграммаГанта.УстановитьПолныйИнтервал(НачалоДня(Отчет.НачалоПериода), КонецДня(Отчет.КонецПериода));
		
	КонецЕсли;
	
	Если ПостроительОтчета.Результат.Пустой() Тогда
		
		ДиаграммаГанта.АвтоОпределениеПолногоИнтервала = Ложь;
		ДатаНачала = ?(ЗначениеЗаполнено(Отчет.НачалоПериода), Отчет.НачалоПериода, ?(ЗначениеЗаполнено(Отчет.КонецПериода) И Отчет.КонецПериода < ТекущаяДата(), Отчет.КонецПериода, ТекущаяДата()));
		ДатаКонца = ?(ЗначениеЗаполнено(Отчет.КонецПериода), Отчет.КонецПериода, ?(ЗначениеЗаполнено(Отчет.НачалоПериода) И Отчет.НачалоПериода > ТекущаяДата(), Отчет.НачалоПериода, ТекущаяДата()));
		ДиаграммаГанта.УстановитьПолныйИнтервал(ДатаНачала, ДатаКонца);
		Возврат;
		
	КонецЕсли;
	
	ДиаграммаГанта.ОтображатьПустыеЗначения = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АР_ОбъектыАренды.Ссылка КАК ОбъектАренды
	|ИЗ
	|	Справочник.АР_ОбъектыАренды КАК АР_ОбъектыАренды
	|ГДЕ
	|	АР_ОбъектыАренды.Ссылка В(&СписокОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	АР_ОбъектыАренды.Наименование
	|ИТОГИ ПО
	|	ОбъектАренды ИЕРАРХИЯ";
	Запрос.УстановитьПараметр("СписокОбъектов", СписокОбъектовАренды);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТочкаОбъектаАренды = ДиаграммаГанта.УстановитьТочку(Выборка.ОбъектАренды, Выборка.ОбъектАренды.Родитель);
	КонецЦикла;
	
	ВыборкаСтатусов = ПостроительОтчета.Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Серия = Неопределено;
	Пока ВыборкаСтатусов.Следующий() Цикл
		
		Если Не ВыборкаСтатусов.Статус = Перечисления.АР_СтатусыОбъектовАренды.ПустаяСсылка() Тогда
			Если ЗначениеЗаполнено(ВыборкаСтатусов.ЦветСтатуса) Тогда
				СерияСтатус = ДиаграммаГанта.УстановитьСерию(ВыборкаСтатусов.Статус);
				СерияСтатус.Цвет = ПолучитьЦвет(ВыборкаСтатусов.ЦветСтатуса);
				Если Серия = Неопределено Тогда
					Серия = СерияСтатус;					
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ВыборкаСтатусов.Статус) Тогда
					СерияСтатус.Текст = "Статус не определен";
				КонецЕсли;
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не задан цвет для статуса " + ВыборкаСтатусов.Статус);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ВыборкаСтатусов.Сбросить();
	НарисоватьДиаграмуПоСтатусам(ВыборкаСтатусов, Серия);
	
	ДиаграммаГанта.ПоказатьУровеньТочек(0);	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТекстЗапросаПосторителя()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АР_ОбъектыАренды.Ссылка КАК ОбъектАренды,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА ЕСТЬNULL(АР_СтатусыОбъектовАренды.ДатаНачалаАренды, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) < &ДатаНач
	|				ТОГДА &ДатаНач
	|			ИНАЧЕ ЕСТЬNULL(АР_СтатусыОбъектовАренды.ДатаНачалаАренды, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|		КОНЕЦ, ДЕНЬ) КАК ПериодНачало,
	|	КОНЕЦПЕРИОДА(ВЫБОР
	|			КОГДА &ДатаКон = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ЕСТЬNULL(АР_СтатусыОбъектовАренды.ДатаОкончанияАренды, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЕСТЬNULL(АР_СтатусыОбъектовАренды.ДатаОкончанияАренды, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА &ДатаКон
	|					КОГДА ЕСТЬNULL(АР_СтатусыОбъектовАренды.ДатаОкончанияАренды, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) > &ДатаКон
	|						ТОГДА &ДатаКон
	|					ИНАЧЕ ЕСТЬNULL(АР_СтатусыОбъектовАренды.ДатаОкончанияАренды, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|				КОНЕЦ
	|		КОНЕЦ, ДЕНЬ) КАК ПериодОкончание,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОбъектыПодлежащиеСдачеВАренду.ПодлежитСдачеВАренду, ЛОЖЬ)
	|			ТОГДА ЕСТЬNULL(АР_СтатусыОбъектовАренды.Статус, ЗНАЧЕНИЕ(Перечисление.АР_СтатусыОбъектовАренды.Свободен))
	|		ИНАЧЕ ВЫБОР
	|				КОГДА АР_СтатусыОбъектовАренды.Регистратор ССЫЛКА Документ.АР_ИзменениеСтатусовОбъектов
	|					ТОГДА АР_СтатусыОбъектовАренды.Статус
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.АР_СтатусыОбъектовАренды.ПустаяСсылка)
	|			КОНЕЦ
	|	КОНЕЦ КАК Статус,
	|	ЕСТЬNULL(ОбъектыПодлежащиеСдачеВАренду.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК СдаетсяВАрендуС,
	|	ЕСТЬNULL(АР_СтатусыОбъектовАренды.Услуга, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Услуга,
	|	АР_ЦветаРаскраскиПомещений.Цвет КАК ЦветСтатуса
	|{ВЫБРАТЬ
	|	ОбъектАренды.*,
	|	ПериодНачало,
	|	ПериодОкончание,
	|	Статус.*,
	|	Услуга.*}
	|ИЗ
	|	Справочник.АР_ОбъектыАренды КАК АР_ОбъектыАренды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АР_СтатусыОбъектовАренды.СрезПоследних(&ДатаКон, ) КАК АР_СтатусыОбъектовАренды
	|		ПО (АР_СтатусыОбъектовАренды.ОбъектАренды = АР_ОбъектыАренды.Ссылка)
	|			И (ВЫБОР
	|				КОГДА &ДатаКон = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ АР_СтатусыОбъектовАренды.ДатаНачалаАренды <= &ДатаКон
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА &ДатаНач = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ АР_СтатусыОбъектовАренды.ДатаОкончанияАренды = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ИЛИ АР_СтатусыОбъектовАренды.ДатаОкончанияАренды >= &ДатаНач
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА АР_СтатусыОбъектовАренды.ДатаНачалаАренды < &ДатаНач
	|					ТОГДА &ДатаНач
	|				ИНАЧЕ АР_СтатусыОбъектовАренды.ДатаНачалаАренды
	|			КОНЕЦ <= ВЫБОР
	|				КОГДА &ДатаКон = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА АР_СтатусыОбъектовАренды.ДатаОкончанияАренды
	|				ИНАЧЕ ВЫБОР
	|						КОГДА АР_СтатусыОбъектовАренды.ДатаОкончанияАренды = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|							ТОГДА &ДатаКон
	|						КОГДА АР_СтатусыОбъектовАренды.ДатаОкончанияАренды > &ДатаКон
	|							ТОГДА &ДатаКон
	|						ИНАЧЕ АР_СтатусыОбъектовАренды.ДатаОкончанияАренды
	|					КОНЕЦ
	|			КОНЕЦ)
	|			И (АР_СтатусыОбъектовАренды.Услуга.АР_УслугаАренды
	|				ИЛИ &НеТолькоАренда
	|				ИЛИ АР_СтатусыОбъектовАренды.Услуга = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АР_ОбъектыПодлежащиеСдачеВАренду.СрезПоследних(&ДатаКон, ) КАК ОбъектыПодлежащиеСдачеВАренду
	|		ПО (ОбъектыПодлежащиеСдачеВАренду.ОбъектАренды = АР_ОбъектыАренды.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АР_ЦветаРаскраскиПомещений КАК АР_ЦветаРаскраскиПомещений
	|		ПО (ВЫБОР
	|				КОГДА ЕСТЬNULL(ОбъектыПодлежащиеСдачеВАренду.ПодлежитСдачеВАренду, ЛОЖЬ)
	|					ТОГДА ЕСТЬNULL(АР_СтатусыОбъектовАренды.Статус, ЗНАЧЕНИЕ(Перечисление.АР_СтатусыОбъектовАренды.Свободен))
	|				ИНАЧЕ ВЫБОР
	|						КОГДА АР_СтатусыОбъектовАренды.Регистратор ССЫЛКА Документ.АР_ИзменениеСтатусовОбъектов
	|							ТОГДА АР_СтатусыОбъектовАренды.Статус
	|						ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.АР_СтатусыОбъектовАренды.ПустаяСсылка)
	|					КОНЕЦ
	|			КОНЕЦ = АР_ЦветаРаскраскиПомещений.Объект)
	|ГДЕ
	|	ЕСТЬNULL(АР_СтатусыОбъектовАренды.Услуга, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) В (&СписокУслуг)
	|	И ЕСТЬNULL(АР_СтатусыОбъектовАренды.Статус, ЗНАЧЕНИЕ(Перечисление.АР_СтатусыОбъектовАренды.Свободен)) В (&СписокСтатусов)
	|	И АР_ОбъектыАренды.Ссылка В(&СписокОбъектовАренды)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Статус,
	|	ОбъектАренды,
	|	Услуга,
	|	ПериодНачало
	|ИТОГИ
	|	МАКСИМУМ(ЦветСтатуса)
	|ПО
	|	Статус,
	|	ОбъектАренды ИЕРАРХИЯ,
	|	Услуга";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Процедура НарисоватьДиаграмуПоСтатусам(ВыборкаСтатусов, Серия, ЗаполнитьОтрезкиСвободнымСтатусом = Ложь)
	
	ТаблицаИнтервалов = Новый ТаблицаЗначений;
	ТаблицаИнтервалов.Колонки.Добавить("ОбъектАренды");
	ТаблицаИнтервалов.Колонки.Добавить("Услуга");
	ТаблицаИнтервалов.Колонки.Добавить("НачалоИнтервала");
	ТаблицаИнтервалов.Колонки.Добавить("КонецИнтервала");
	ТаблицаИнтервалов.Колонки.Добавить("СдаетсяВАрендуС");
	
	Пока ВыборкаСтатусов.Следующий() Цикл
		
		//Объекты аренды
		ВыборкаОбъектов = ВыборкаСтатусов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаОбъектов.Следующий() Цикл
			
			ТочкаОбъектаАренды = ДиаграммаГанта.УстановитьТочку(ВыборкаОбъектов.ОбъектАренды, ВыборкаОбъектов.ОбъектАренды.Родитель);
			ТочкаОбъектаАренды.Расшифровка = ВыборкаОбъектов.ОбъектАренды;
			
			//Услуги
			ВыборкаУслуг = ВыборкаОбъектов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаУслуг.Следующий() Цикл
				
				Если Не Отчет.ОтображатьТолькоАренду Тогда
					ТочкаУслуги = ДиаграммаГанта.УстановитьТочку(ВыборкаОбъектов.ОбъектАренды.Код+"_"+ВыборкаУслуг.Услуга.Код,ВыборкаОбъектов.ОбъектАренды);
					ТочкаУслуги.Расшифровка = ВыборкаОбъектов.ОбъектАренды;
					ТочкаУслуги.Текст = ?(ЗначениеЗаполнено(ВыборкаУслуг.Услуга),ВыборкаУслуг.Услуга, " ");
				КонецЕсли;
				
				//Периоды
				ВыборкаПериоды = ВыборкаУслуг.Выбрать(ОбходРезультатаЗапроса.Прямой);
				
				НовыйИнтервал = Истина;
				
				ТаблицаПериодов = Новый ТаблицаЗначений;
				ТаблицаПериодов.Колонки.Добавить("НачалоПериода");
				ТаблицаПериодов.Колонки.Добавить("КонецПериода");  // в эту таблицу писать услугу, объект и период. затем по каждой услуге отбирать сортировать, по дате и если какой период не заполне - заполнять
				
				Пока ВыборкаПериоды.Следующий() Цикл
					
					Если ВыборкаУслуг.Статус = Перечисления.АР_СтатусыОбъектовАренды.ПустаяСсылка() Тогда
						Продолжить;
					КонецЕсли;
					
					НачалоИнтервала = ?(ВыборкаПериоды.ПериодНачало >= ВыборкаПериоды.СдаетсяВАрендуС, ВыборкаПериоды.ПериодНачало, ВыборкаПериоды.СдаетсяВАрендуС);
					КонецИнтервала = ?(ВыборкаПериоды.ПериодОкончание >= ВыборкаПериоды.СдаетсяВАрендуС, ВыборкаПериоды.ПериодОкончание, ВыборкаПериоды.СдаетсяВАрендуС);
					
					Если НачалоИнтервала >= КонецИнтервала Тогда
						Продолжить;
					КонецЕсли;
					
					Если НовыйИнтервал Тогда 
						Интервал = ЗаполнитьИнтервал(НачалоИнтервала, КонецИнтервала, ВыборкаПериоды.ЦветСтатуса, ТочкаОбъектаАренды, ТочкаУслуги, Серия); 
						НовыйИнтервал = Ложь;
					Иначе
						Если Интервал.Конец + 1  >= НачалоИнтервала Тогда
							Если  Интервал.Конец < КонецИнтервала Тогда
								Интервал.Конец  = КонецИнтервала;
							КонецЕсли;
						Иначе
							Интервал = ЗаполнитьИнтервал(НачалоИнтервала, КонецИнтервала, ВыборкаПериоды.ЦветСтатуса, ТочкаОбъектаАренды, ТочкаУслуги, Серия); 
						КонецЕсли;
					КонецЕсли;
					
					ЗарегистрироватьПериодИнтервала(ТаблицаИнтервалов, ВыборкаПериоды, НачалоИнтервала, КонецИнтервала);
					
				КонецЦикла;
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
	ЦветРаскраски = РегистрыСведений.АР_ЦветаРаскраскиПомещений.СоздатьМенеджерЗаписи();
	ЦветРаскраски.Объект = Перечисления.АР_СтатусыОбъектовАренды.Свободен;
	ЦветРаскраски.Прочитать();
	
	ЦветСвободногоСтатуса = ЦветРаскраски.Цвет;
	
	Если Отчет.ОтображатьТолькоАренду Тогда
		ТаблицаОбъектов = ТаблицаИнтервалов.Скопировать(, "ОбъектАренды");
		ТаблицаОбъектов.Свернуть("ОбъектАренды");
		Для Каждого Стр Из ТаблицаОбъектов Цикл
			
			ТочкаОбъектаАренды = ДиаграммаГанта.УстановитьТочку(Стр.ОбъектАренды, Стр.ОбъектАренды.Родитель);
			
			Интервалы = ТаблицаИнтервалов.Скопировать(Новый Структура("ОбъектАренды", Стр.ОбъектАренды));
			Интервалы.Сортировать("НачалоИнтервала");
			СкорректироватьТаблицуИнтерваловСУчетомПересекающихсяПериодов(Интервалы, Ложь);
			НачалоИнтервала = Неопределено;
			Для Каждого Строк Из Интервалы Цикл
				Если НачалоИнтервала = Неопределено Тогда
					НачалоИнтервала = Макс(Отчет.НачалоПериода, Строк.СдаетсяВАрендуС);
				КонецЕсли;
				Если НЕ НачалоИнтервала = Строк.НачалоИнтервала Тогда
					ЗаполнитьИнтервал(НачалоИнтервала, Строк.НачалоИнтервала, ЦветСвободногоСтатуса, ТочкаОбъектаАренды, Неопределено, Серия);	
				КонецЕсли;
				НачалоИнтервала = Строк.КонецИнтервала + 1;
				КонецИнтервала = Строк.КонецИнтервала;
			КонецЦикла;
			Если КонецИнтервала < КонецДня(Отчет.КонецПериода) Тогда
				КонецИнтервала = КонецДня(Отчет.КонецПериода);
				НачалоИнтервала = Макс(НачалоИнтервала, Строк.СдаетсяВАрендуС);
				Если НачалоИнтервала < КонецИнтервала Тогда
					ЗаполнитьИнтервал(НачалоИнтервала, КонецИнтервала, ЦветСвободногоСтатуса, ТочкаОбъектаАренды, Неопределено, Серия);		
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	Иначе
		ТаблицаОбъектов = ТаблицаИнтервалов.Скопировать(, "ОбъектАренды");
		ТаблицаОбъектов.Свернуть("ОбъектАренды");
		Для Каждого Стр Из ТаблицаОбъектов Цикл
			
			ТочкаОбъектаАренды = ДиаграммаГанта.УстановитьТочку(Стр.ОбъектАренды, Стр.ОбъектАренды.Родитель);
			
			ТаблицаИнтерваловПроверка = ТаблицаИнтервалов.СкопироватьКолонки();
			Для Каждого Строк Из ТаблицаИнтервалов Цикл
				Если НЕ ЗначениеЗаполнено(Строк.Услуга) ИЛИ Строк.Услуга.АР_УслугаАренды Тогда
					Строка = ТаблицаИнтерваловПроверка.Добавить();
					ЗаполнитьЗначенияСвойств(Строка, Строк);
				КонецЕсли;
			КонецЦикла;
			
			Интервалы = ТаблицаИнтерваловПроверка.Скопировать(Новый Структура("ОбъектАренды", Стр.ОбъектАренды));
			Интервалы.Сортировать("НачалоИнтервала");
			СкорректироватьТаблицуИнтерваловСУчетомПересекающихсяПериодов(Интервалы, Ложь);
			
			ТаблицаУслуг = ТаблицаИнтервалов.Скопировать(Новый Структура("ОбъектАренды", Стр.ОбъектАренды), "Услуга");
			ТаблицаУслуг.Свернуть("Услуга");
			
			Для Каждого СтрокаУслуг Из ТаблицаУслуг Цикл
			
				ТочкаУслуги = ДиаграммаГанта.УстановитьТочку(Стр.ОбъектАренды.Код + "_" + СтрокаУслуг.Услуга.Код, Стр.ОбъектАренды);
				
				Интервалы = ТаблицаИнтервалов.Скопировать(Новый Структура("ОбъектАренды, Услуга", Стр.ОбъектАренды, СтрокаУслуг.Услуга));
				Интервалы.Сортировать("НачалоИнтервала");
				СкорректироватьТаблицуИнтерваловСУчетомПересекающихсяПериодов(Интервалы, Истина);
				НачалоИнтервала = Неопределено;
				Для Каждого Строк Из Интервалы Цикл
					Если НачалоИнтервала = Неопределено Тогда
						НачалоИнтервала = Макс(Отчет.НачалоПериода, Строк.СдаетсяВАрендуС);
					КонецЕсли;
					Если НЕ НачалоИнтервала = Строк.НачалоИнтервала Тогда
						ЗаполнитьИнтервал(НачалоИнтервала, Строк.НачалоИнтервала, ЦветСвободногоСтатуса, ТочкаОбъектаАренды, ТочкаУслуги, Серия);	
					КонецЕсли;
					НачалоИнтервала = Строк.КонецИнтервала + 1;
					КонецИнтервала = Строк.КонецИнтервала;
				КонецЦикла;
				Если КонецИнтервала < КонецДня(Отчет.КонецПериода) Тогда
					КонецИнтервала = КонецДня(Отчет.КонецПериода);
					НачалоИнтервала = Макс(НачалоИнтервала, Строк.СдаетсяВАрендуС);
					Если НачалоИнтервала < КонецИнтервала Тогда
						ЗаполнитьИнтервал(НачалоИнтервала, КонецИнтервала, ЦветСвободногоСтатуса, ТочкаОбъектаАренды, ТочкаУслуги, Серия);		
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьИнтервал(НачалоПериода, КонецПериода, ЦветСтатуса, ТочкаОбъектаАренды, ТочкаУслуги, Серия)
	
	Если Отчет.ОтображатьТолькоАренду Тогда
		ЗначениеПериод = ДиаграммаГанта.ПолучитьЗначение(ТочкаОбъектаАренды, Серия);
	Иначе
		ЗначениеПериод = ДиаграммаГанта.ПолучитьЗначение(ТочкаУслуги, Серия);
	КонецЕсли;
	Если НачалоПериода < КонецПериода Тогда
		ОтключитьРасшифровку = Ложь;
		Для Каждого Интервал Из ЗначениеПериод Цикл 
			Если Интервал.Начало = НачалоПериода И Интервал.Конец = КонецПериода Тогда
				ОтключитьРасшифровку = Истина;
				Интервал.Расшифровка = Неопределено;
			КонецЕсли;
		КонецЦикла;
		Интервал = ЗначениеПериод.Добавить();
		Интервал.Начало = НачалоПериода;
		Интервал.Конец  = КонецПериода;
		Интервал.Цвет = ПолучитьЦвет(ЦветСтатуса);
		ОбъектНедвижимости = ТочкаОбъектаАренды.Значение;
		ДокументУстановкиСтатуса = ПолучитьДокументУстановкиСтатуса(ОбъектНедвижимости, Интервал.Конец, Интервал.Начало);
		Если НЕ ДокументУстановкиСтатуса = Неопределено И НЕ ОтключитьРасшифровку Тогда
			Интервал.Расшифровка = Истина;
		Иначе
			Интервал.Расшифровка = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Интервал;
	
КонецФункции

&НаСервере
Функция ЗарегистрироватьПериодИнтервала(ТаблицаИнтервалов, Выборка, НачалоИнтервала, КонецИнтервала)
	
	Стр = ТаблицаИнтервалов.Добавить();
	ЗаполнитьЗначенияСвойств(Стр, Выборка);
	Стр.НачалоИнтервала = НачалоИнтервала;
	Стр.КонецИнтервала = КонецИнтервала;
	
	Возврат ТаблицаИнтервалов;
	
КонецФункции

&НаСервере
Функция ПолучитьДокументУстановкиСтатуса(Знач ОбъектНедвижимостиПарам, Знач ДатаСреза, НачалоПериода)
	
	Если НЕ ЗначениеЗаполнено(ОбъектНедвижимостиПарам) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПереданоСтроковоеПредставлениеОбъекта = Ложь;
	Если НЕ Отчет.ОтображатьТолькоАренду И ТипЗнч(ОбъектНедвижимостиПарам) = Тип("Строка") Тогда
		МассивПодстрок = СтрРазделить(ОбъектНедвижимостиПарам, "_");
		ОбъектНедвижимости = Справочники.АР_ОбъектыАренды.НайтиПоКоду(МассивПодстрок[0]);
		Услуга = Справочники.Номенклатура.НайтиПоКоду(МассивПодстрок[1]);
	Иначе
		ОбъектНедвижимости = ОбъектНедвижимостиПарам;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", НачалоДня(ДатаСреза));
	Запрос.УстановитьПараметр("ОбъектНедвижимости", ОбъектНедвижимости);
	Запрос.УстановитьПараметр("ОтображатьТолькоАренду", Отчет.ОтображатьТолькоАренду ИЛИ (НЕ Отчет.ОтображатьТолькоАренду И НЕ ТипЗнч(ОбъектНедвижимостиПарам) = Тип("Строка")));
	Запрос.УстановитьПараметр("Услуга", Услуга);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АР_СтатусыОбъектовАрендыСрезПоследних.Регистратор
	|ИЗ
	|	РегистрСведений.АР_СтатусыОбъектовАренды.СрезПоследних(&ДатаСреза, ОбъектАренды = &ОбъектНедвижимости) КАК АР_СтатусыОбъектовАрендыСрезПоследних
	|ГДЕ
	|	(&ОтображатьТолькоАренду
	|				И (АР_СтатусыОбъектовАрендыСрезПоследних.Услуга.АР_УслугаАренды
	|					ИЛИ АР_СтатусыОбъектовАрендыСрезПоследних.Услуга = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|			ИЛИ НЕ &ОтображатьТолькоАренду
	|				И АР_СтатусыОбъектовАрендыСрезПоследних.Услуга = &Услуга)
	|	И АР_СтатусыОбъектовАрендыСрезПоследних.ДатаНачалаАренды <= &НачалоПериода
	|	И АР_СтатусыОбъектовАрендыСрезПоследних.ДатаОкончанияАренды >= &КонецПериода";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Регистратор;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура СкорректироватьТаблицуИнтерваловСУчетомПересекающихсяПериодов(ТаблицаИнтервалов, УчитыватьУслуги = Ложь)
	
	МассивКорректируемыхИнтервалов = Новый Массив;
	КонецИнтервала = Дата(1, 1, 1);
	Для Каждого Стр Из ТаблицаИнтервалов Цикл
		Если Стр.НачалоИнтервала < КонецИнтервала Тогда
			КонецПериода = ?(Стр.КонецИнтервала + 1 < КонецИнтервала, Стр.КонецИнтервала, КонецИнтервала);
			Если УчитыватьУслуги Тогда
				ТекстСообщения = "Для объекта недвижимости """ + Стр.ОбъектАренды + """ и услуги """ + Стр.Услуга + """ некорректно установлен статус с " 
					+ Формат(Стр.НачалоИнтервала, "ДФ=dd.MM.yyyy") + " по " + Формат(КонецПериода, "ДФ=dd.MM.yyyy");
			Иначе		
				ТекстСообщения = "Для объекта недвижимости """ + Стр.ОбъектАренды + """ некорректно установлен статус с " 
					+ Формат(Стр.НачалоИнтервала, "ДФ=dd.MM.yyyy") + " по " + Формат(КонецПериода, "ДФ=dd.MM.yyyy");
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Если Стр.КонецИнтервала + 1 < КонецИнтервала Тогда
				МассивКорректируемыхИнтервалов.Добавить(Новый Структура("НачалоИнтервала, КонецИнтервала", Стр.КонецИнтервала + 1, КонецИнтервала));
			Иначе
				МассивКорректируемыхИнтервалов.Добавить(Новый Структура("НачалоИнтервала, КонецИнтервала", КонецИнтервала + 1, Стр.КонецИнтервала));
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		КонецИнтервала = Стр.КонецИнтервала;	
	КонецЦикла;
	
	Для Каждого Интервал Из МассивКорректируемыхИнтервалов Цикл
		Стр = ТаблицаИнтервалов.Добавить();
		ЗаполнитьЗначенияСвойств(Стр, ТаблицаИнтервалов[0]);
		Стр.НачалоИнтервала = Интервал.НачалоИнтервала;
		Стр.КонецИнтервала = Интервал.КонецИнтервала;
	КонецЦикла;
	
	ТаблицаИнтервалов.Сортировать("НачалоИнтервала");
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроек()
	
	СхемаКомпоновкиДанных = Отчеты.АР_ДиаграммаСостоянийОбъектовАренды.ПолучитьМакет("Макет");
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, ЭтаФорма.УникальныйИдентификатор))
	);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПериода()
	
	КоличествоМесяцев = Окр((Отчет.КонецПериода - Отчет.НачалоПериода) / (30*24*60*60), 0) + 1;
	Если КоличествоМесяцев = 1 Тогда
		КоличествоМесяцев = 2;
	КонецЕсли;
	Элементы.Масштаб.МаксимальноеЗначение = КоличествоМесяцев;
	МасштабДиаграммы = КоличествоМесяцев - 1;
	ПриИзмененииМасштаба();

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииМасштаба()
	
	Если Не ДиаграммаГанта.ПоддержкаМасштаба = ПоддержкаМасштабаДиаграммыГанта.Период Тогда
		ДиаграммаГанта.ПоддержкаМасштаба = ПоддержкаМасштабаДиаграммыГанта.Период;
	КонецЕсли;
	ДиаграммаГанта.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Месяц;
	ДиаграммаГанта.КратностьПериодическогоВарианта = Элементы.Масштаб.МаксимальноеЗначение - МасштабДиаграммы + 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодНачалоВыбораЗавершение(СтруктураПериода, ДополнительныеПараметры) Экспорт
	
	// Установим полученный период
	Если СтруктураПериода <> Неопределено Тогда
		ВидПериода = СтруктураПериода.ВидПериода;
		Период = СтруктураПериода.Период;
		Отчет.НачалоПериода = СтруктураПериода.НачалоПериода;
		Отчет.КонецПериода = СтруктураПериода.КонецПериода;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьЦвет(знач ЦветСтрока)
	
	Если Не ЗначениеЗаполнено(ЦветСтрока) Тогда
		Возврат Новый Цвет(255, 255, 255);
	Иначе
		Ном = Найти(ЦветСтрока, ",");
		КрасныйСтрока = Лев(ЦветСтрока, Ном - 1);
		Строка = Сред(ЦветСтрока, Ном + 1);
		Красный = Число(КрасныйСтрока);
		Ном = Найти(Строка, ",");
		ЗеленыйСтрока = Лев(Строка, Ном - 1);
		Строка = Сред(Строка, Ном + 1);
		Зеленый = Число(ЗеленыйСтрока);
		Синий = Число(Строка);
		Возврат Новый Цвет(Красный, Зеленый, Синий);
	КонецЕсли;
	
КонецФункции

#КонецОбласти
