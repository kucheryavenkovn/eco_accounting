#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.ПараметрыОтчета = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Отчет не предназначен для непосредственного использования.'");
	КонецЕсли;
	
	ЗагрузитьПоставляемыеДанные();
	
	ПараметрыОтчета = Параметры.ПараметрыОтчета;
	Если Не ЗначениеЗаполнено(ПараметрыОтчета.Период) Тогда
		ПараметрыОтчета.Период = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыОтчета,
		"Налог,Режим,КодРегиона,КодВидаДеятельности,НаименованиеВидаДеятельности");
	
	Элементы.КодРегиона.ТолькоПросмотр = Налог = "ПСН";
	Элементы.НаименованиеВидаДеятельности.ТолькоПросмотр = Налог = "ПСН";
	
	Если ЗначениеЗаполнено(КодРегиона) 
		И ЗначениеЗаполнено(КодВидаДеятельности) Тогда
		СформироватьОтчетНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(
			Элементы.ДокументРезультат, "ФормированиеОтчета");
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительнаяОперация,
			Новый ОписаниеОповещения("ПриЗавершенииЗадания", ЭтотОбъект),
			ПараметрыОжидания);
	Иначе
		ОбработатьОшибкиФормированияОтчета();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Или ДокументРезультат.ВысотаТаблицы > 0 Тогда
		ТекущийЭлемент = Элементы.ДокументРезультат;
	Иначе
		ТекущийЭлемент = Элементы.КодРегиона;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КодРегионаРегистрацииПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ДокументРезультат, "НеАктуальность");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДеятельностиПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийКод", КодВидаДеятельности);
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборВидаДеятельностиОКВЭД2Завершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборВидаДеятельности", ПараметрыФормы, , , , , ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументРезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Расшифровка) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Действие = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Расшифровка, "Действие", "");
	
	Если Действие = "ПерейтиПоСсылке" Тогда
		
		СсылкаДляПерехода = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Расшифровка, "Ссылка", "");
		Если СтрНачинаетсяС(СсылкаДляПерехода, "http") Тогда
			ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(СсылкаДляПерехода);
		КонецЕсли;
	
	ИначеЕсли Действие = "ПрименитьСтавку" Тогда
		
		Если Режим = "НалогиИОтчеты" Тогда
			
			ФормаНалогиИОтчеты = ВладелецФормы;
			Если ТипЗнч(ФормаНалогиИОтчеты) <> Тип("ФормаКлиентскогоПриложения") 
				ИЛИ ФормаНалогиИОтчеты.ИмяФормы <> "ОбщаяФорма.НалогиИОтчеты"
				ИЛИ НЕ ФормаНалогиИОтчеты.Открыта() Тогда
				Возврат;
			КонецЕсли;
			ФормаНалогиИОтчеты.Открыть();
			
			Оповестить("ИзменениеСтавокУСННалогиИОтчеты", Расшифровка, ЭтотОбъект);
			
		ИначеЕсли Режим = "СравнениеРежимовНалогообложения" Тогда
			
			ФормаСтавкиНалогов = ВладелецФормы;
			Если ТипЗнч(ФормаСтавкиНалогов) <> Тип("ФормаКлиентскогоПриложения")
				ИЛИ ФормаСтавкиНалогов.ИмяФормы <> "Обработка.СравнениеРежимовНалогообложения.Форма.ФормаСтавкиНалогов"
				ИЛИ НЕ ФормаСтавкиНалогов.Открыта() Тогда
				Возврат;
			КонецЕсли;
			// ФормаСтавкиНалогов - блокирующая, открываем ее владельца
			ФормаСравнениеРежимов = ФормаСтавкиНалогов.ВладелецФормы;
			Если ТипЗнч(ФормаСравнениеРежимов) <> Тип("ФормаКлиентскогоПриложения")
				ИЛИ НЕ ФормаСравнениеРежимов.Открыта() Тогда
				Возврат;
			КонецЕсли; 
			ФормаСравнениеРежимов.Открыть();
			
			Если Налог = "УСН" Тогда
				Оповестить("ИзменениеСтавокУСНСравнениеРежимовНалогообложения", Расшифровка, ЭтотОбъект);
			ИначеЕсли Налог = "ПСН" Тогда
				Оповестить("ИзменениеСтавокПСНСравнениеРежимовНалогообложения", Расшифровка, ЭтотОбъект);
			КонецЕсли;
			
		ИначеЕсли Налог = "ПСН" И Режим = "Помощник" Тогда
			
			ФормаПомощника = ВладелецФормы;
			Если ТипЗнч(ФормаПомощника) <> Тип("УправляемаяФорма") 
				ИЛИ ФормаПомощника.ИмяФормы <> "Обработка.ПомощникЗаполненияЗаявленияНаПолучениеПатента.Форма.Форма"
				ИЛИ НЕ ФормаПомощника.Открыта() Тогда
				Возврат;
			КонецЕсли;
			ФормаПомощника.Открыть();
			
			Оповестить("ИзменениеСтавокПСНПомощник", Расшифровка, ЭтотОбъект);
			
		КонецЕсли;
		
		Закрыть();
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(
		Элементы.ДокументРезультат, "ФормированиеОтчета");
	
	Результат = СформироватьОтчетНаСервере();
		
	Если Результат Тогда
		ОбработатьОшибкиФормированияОтчета();
		Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(
				Элементы.ДокументРезультат, "НеИспользовать");
		КонецЕсли;
	Иначе
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительнаяОперация,
			Новый ОписаниеОповещения("ПриЗавершенииЗадания", ЭтотОбъект),
			ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыборВидаДеятельностиОКВЭД2Завершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	КодВидаДеятельности = РезультатВыбора.Код;
	НаименованиеВидаДеятельности = РезультатВыбора.Наименование;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ДокументРезультат, "НеАктуальность");
	
КонецПроцедуры

&НаСервере
Функция СформироватьОтчетНаСервере()
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	КонецЕсли;
	
	ИдентификаторЗадания = Неопределено;
	ОписаниеОшибки = "";
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	Если Налог = "УСН" Тогда
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru='Формирование отчета: Ставки налога в вашем регионе - УСН'");
		ПараметрыОтчета = ПараметрыФормированияОтчета();
		ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне("Отчеты.СтавкиНалогаВВашемРегионе.СформироватьОтчетУСН",
			ПараметрыОтчета, ПараметрыВыполнения);
	ИначеЕсли Налог = "ПСН" Тогда
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru='Формирование отчета: Ставки налога в вашем регионе - ПСН'");
		ПараметрыОтчета = ПараметрыФормированияОтчета();
		ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне("Отчеты.СтавкиНалогаВВашемРегионе.СформироватьОтчетПСН",
			ПараметрыОтчета, ПараметрыВыполнения);
	КонецЕсли;
	
	АдресХранилища = ДлительнаяОперация.АдресРезультата;
	
	Если ДлительнаяОперация.Статус = "Выполняется" Тогда
		ИдентификаторЗадания = ДлительнаяОперация.ИдентификаторЗадания;
		Возврат Ложь;
	Иначе
		ИдентификаторЗадания = Неопределено;
		Если ДлительнаяОперация.Статус = "Выполнено" Тогда
			ЗагрузитьПодготовленныеДанные();
			Возврат Истина;
		ИначеЕсли ДлительнаяОперация.Статус = "Ошибка" Тогда
			ВызватьИсключение ДлительнаяОперация.КраткоеПредставлениеОшибки;
		Иначе
			ВызватьИсключение НСтр("ru = 'Формирование отчета отменено.'");
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПараметрыФормированияОтчета()

	Результат = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыОтчета);
	Результат.КодРегиона = КодРегиона;
	ЭлементСписка = Элементы.КодРегиона.СписокВыбора.НайтиПоЗначению(КодРегиона);
	Результат.НаименованиеРегиона = ?(ЭлементСписка <> Неопределено, ЭлементСписка.Представление, "");
	Результат.КодВидаДеятельности = КодВидаДеятельности;
	Результат.НаименованиеВидаДеятельности = НаименованиеВидаДеятельности;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	ДанныеОтчета = ПолучитьИзВременногоХранилища(АдресХранилища);
	УдалитьИзВременногоХранилища(АдресХранилища);
	
	Если ДанныеОтчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = ДанныеОтчета.ОписаниеОшибки;
	Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументРезультат.Очистить();
	ДокументРезультат.Вывести(ДанныеОтчета.ДокументРезультат);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПриЗавершенииЗадания(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторЗадания = Неопределено;
	ЗагрузитьПодготовленныеДанные();
	ОбработатьОшибкиФормированияОтчета();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ДокументРезультат, "НеИспользовать");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОшибкиФормированияОтчета()

	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьПредупреждение(, ОписаниеОшибки);
	ОписаниеОшибки = "";

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПоставляемыеДанные()
	
	КлассификаторСубъектовРФ = АдресныйКлассификатор.СубъектыРФ();
	ШаблонПредставления = НСтр("ru='%1 %2 %3'"); // например: "77 Москва г".
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка");
	Для Каждого Регион Из КлассификаторСубъектовРФ Цикл
		КодРегиона = ОписаниеТипаСтрока.ПривестиЗначение(Регион.КодСубъектаРФ);
		Если СтрДлина(КодРегиона) = 1 Тогда
			КодРегиона = "0" + КодРегиона;
		КонецЕсли;
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления,
			КодРегиона,
			Регион.Наименование,
			Регион.Сокращение);
		Элементы.КодРегиона.СписокВыбора.Добавить(КодРегиона, Представление);
	КонецЦикла;
	
	Элементы.КодРегиона.СписокВыбора.СортироватьПоПредставлению();
	
КонецПроцедуры

#КонецОбласти
