#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область БухгалтерскиеОтчеты

// Описывает свойства отчета (манифест), декларирующий поддержанные в нем возможности подсистемы,
// включая реализованный программный интерфейс.
//
Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Манифест = Новый Структура;
	Манифест.Вставить("ИспользоватьДанныеРасшифровки",      Истина);
	Манифест.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	Манифест.Вставить("ИспользоватьПослеКомпоновкиМакета",  Истина);
	Манифест.Вставить("ИспользоватьВнешниеНаборыДанных",    Истина);
	Манифест.Вставить("ИспользоватьПриВыводеЗаголовка",     Истина);
	Манифест.Вставить("ИспользоватьПослеВыводаРезультата",  Истина);
	
	СправкиРасчеты.УстановитьОтчетНеИспользуетНаборыСуммовыхПоказателей(Манифест);

	Возврат Манифест;

КонецФункции

#КонецОбласти

#Область ОбработчикиБухгалтерскиеОтчеты

// Обработчик события подсистемы БухгалтерскиеОтчеты.
// Вызов определяется параметром ИспользоватьПередКомпоновкойМакета.
//
// Параметры:
//  Контекст			 - Структура - контекст, в котором формируется отчет.
//                         См. СправкиРасчеты.КонтекстФормированияОтчета.
//  Схема				 - СхемаКомпоновкиДанных - схема отчета.
//  КомпоновщикНастроек	 - КомпоновщикНастроекКомпоновкиДанных - описание связи настроек и схемы отчета.
//
Процедура ПередКомпоновкойМакета(Контекст, Схема, КомпоновщикНастроек) Экспорт
	
	Контекст.ВыполнениеОтчета.Вставить("Примечания", Новый Структура);
	
	Если СправкиРасчеты.ТребуетсяДополнитьПериодОтчетаПримечанием(Контекст) Тогда
		Контекст.ВыполнениеОтчета.Примечания.Вставить("НалоговыйПериод", Контекст.ВыполнениеОтчета.Примечания.Количество());
		// Вывод текста примечания - в СправкиРасчеты.ОформитьРезультатОтчета()
	КонецЕсли;
	
	РегистрыСведений.РасчетОтложенногоНалога.НастроитьПериодОтчета(
		КомпоновщикНастроек,
		Контекст.НачалоПериода,
		Контекст.КонецПериода,
		Контекст.Организация);
		
	ВключитьГруппировкуФилиал(КомпоновщикНастроек.Настройки.Структура, Контекст.Организация);
	
	СтавкиНалога = РегистрыСведений.ПримененныеСтавкиОтложенногоНалога.ПрочитатьСтавки(
		Контекст.КонецПериода,
		Контекст.Организация,
		"%");
	Контекст.ВыполнениеОтчета.Вставить("СтавкиНалога", СтавкиНалога); // См. ПослеВыводаРезультата
	
	СтавкаНалогаПервоеПрименение = РегистрыСведений.ПримененныеСтавкиОтложенногоНалога.ПрочитатьСтавки(
		Контекст.НачалоПериода - 1,
		Контекст.Организация,
		"%",
		Перечисления.ВидыСтавокОтложенногоНалога.ПервоеПрименение);
	
	Если СтавкаНалогаПервоеПрименение <> Неопределено 
		И ИспользуютсяРазныеСтавки(СтавкиНалога)
		И СтавкиНалога[Перечисления.ВидыСтавокОтложенногоНалога.ПредыдущаяОценка] <> СтавкаНалогаПервоеПрименение Тогда
		Контекст.ВыполнениеОтчета.Вставить(
			"СтавкаНалогаПервоеПрименение",
			СтавкаНалогаПервоеПрименение); 
		Контекст.ВыполнениеОтчета.Примечания.Вставить(
			"Расхождения",
			Контекст.ВыполнениеОтчета.Примечания.Количество());
		// Вывод текста примечания - в ПослеВыводаРезультата
	КонецЕсли;
	
	ИспользованиеКолонок = НастроитьКолонкиОтчета(
		КомпоновщикНастроек,
		Контекст.ВыполнениеОтчета.СтавкиНалога,
		Контекст.НачалоПериода,
		Контекст.КонецПериода,
		Контекст.Организация,
		Контекст.ВыполнениеОтчета.Примечания);
		
	ТекстРасхождение = НСтр("ru = 'Расхождение'");
	Если Контекст.ВыполнениеОтчета.Примечания.Свойство("Расхождения") Тогда
		СправкиРасчеты.ДополнитьСловоСсылкойНаПримечание(
			ТекстРасхождение,
			Контекст.ВыполнениеОтчета.Примечания.Расхождения + 1);
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек,
		"Расхождение",
		ТекстРасхождение);
	
	ВыводитьРасчетВременныхРазниц = (ИспользованиеКолонок["НаКонецПериодаДетально"] <> Ложь);
	Контекст.ВыполнениеОтчета.Вставить("ВыводитьРасчетВременныхРазниц", ВыводитьРасчетВременныхРазниц); // См. ПослеВыводаРезультата
	
	НастроитьОтборПоОрганизации(КомпоновщикНастроек, Контекст.Организация);
	
КонецПроцедуры

// Обработчик события подсистемы БухгалтерскиеОтчеты.
// Вызов определяется параметром ИспользоватьПослеКомпоновкиМакета.
//
// Параметры:
//  Контекст		 - Структура - контекст, в котором формируется отчет.
//                     См. СправкиРасчеты.КонтекстФормированияОтчета.
//  МакетКомпоновки	 - МакетКомпоновкиДанных - сформированный макет компоновки данных.
//
Процедура ПослеКомпоновкиМакета(Контекст, МакетКомпоновки) Экспорт
	
	СправкиРасчеты.НастроитьГрафыОтчета(МакетКомпоновки, ГрафыОтчета());
	
КонецПроцедуры

// Обработчик события подсистемы БухгалтерскиеОтчеты.
// Вызов определяется параметром ИспользоватьВнешниеНаборыДанных.
//
// Параметры:
//  Контекст		 - Структура - контекст, в котором формируется отчет.
//                     См. СправкиРасчеты.КонтекстФормированияОтчета.
//  МакетКомпоновки	 - МакетКомпоновкиДанных - сформированный макет компоновки данных.
//
Функция ПолучитьВнешниеНаборыДанных(Контекст, МакетКомпоновки) Экспорт
	
	ВнешниеНаборы = Новый Структура;
	ВнешниеНаборы.Вставить("ГруппыБалансовыхСчетов", ГруппыБалансовыхСчетов());
	Возврат ВнешниеНаборы;
		
КонецФункции	

// Обработчик события подсистемы БухгалтерскиеОтчеты.
// Вызов определяется параметром ИспользоватьПриВыводеЗаголовка.
//
// Параметры:
//  Контекст		 - Структура - контекст, в котором формируется отчет.
//                     См. СправкиРасчеты.КонтекстФормированияОтчета.
//  КомпоновщикНастроек	 - КомпоновщикНастроекКомпоновкиДанных - описание связи настроек и схемы отчета.
//  Результат - ТабличныйДокумент - табличный документ с сформированным отчетом.
//
Процедура ПриВыводеЗаголовка(Контекст, КомпоновщикНастроек, Результат) Экспорт
	
	СправкиРасчеты.ВывестиШапкуОтчета(Результат, Контекст);
	
КонецПроцедуры

// Обработчик события подсистемы БухгалтерскиеОтчеты.
// Вызов определяется параметром ИспользоватьПослеВыводаРезультата.
//
// Параметры:
//  Контекст  - Структура - контекст, в котором формируется отчет.
//              См. СправкиРасчеты.КонтекстФормированияОтчета.
//  Результат - ТабличныйДокумент - табличный документ с сформированным отчетом.
//
Процедура ПослеВыводаРезультата(Контекст, Результат) Экспорт
	
	Результат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	СправкиРасчеты.ОформитьРезультатОтчета(Результат, Контекст, Истина);
	
	ВывестиПояснениеПервоеПрименение(Результат, Контекст);
	
	ВывестиПорядокРасчета(
		Результат,
		Контекст.ВыполнениеОтчета.ВыводитьРасчетВременныхРазниц,
		Контекст.ВыполнениеОтчета.СтавкиНалога,
		Контекст.КонецПериода,
		Контекст.Организация);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ТонкаяНастройка

Функция ИспользуютсяРазныеСтавки(СтавкиНалога)
	Возврат (ТипЗнч(СтавкиНалога) = Тип("Соответствие"));
КонецФункции

Процедура ВключитьГруппировкуФилиал(Группировки, Организация)
	
	ГруппировкаФилиалы = БухгалтерскиеОтчеты.НайтиГруппировкуТаблицы(Группировки, "Филиал");
	
	Если ГруппировкаФилиалы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВсяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(Организация);
	Если ВсяОрганизация.Количество() > 1 Тогда
		ГруппировкаФилиалы.Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных.Включен;
	Иначе
		ГруппировкаФилиалы.Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных.Отключен;
	КонецЕсли;
	
КонецПроцедуры

Процедура НастроитьОтборПоОрганизации(КомпоновщикНастроек, Организация)
	
	// Отложенный налог рассчитывается по организации.
	// Поэтому для того, чтобы вывести данные по филиалу, следует
	// - отбор по полю Организация выполнять по головной организации
	// - дополнительно установить отбор по полю Филиал.
	
	ОписаниеОтбораПоОрганизации = Новый Структура;
	ОписаниеОтбораПоОрганизации.Вставить("Организация",                       Организация);
	ОписаниеОтбораПоОрганизации.Вставить("ВключатьОбособленныеПодразделения", Ложь);
	
	ДобавитьОтборФилиал(КомпоновщикНастроек.ФиксированныеНастройки.Отбор, ОписаниеОтбораПоОрганизации);
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ОписаниеОтбораПоОрганизации, КомпоновщикНастроек);
	
КонецПроцедуры

Процедура ДобавитьОтборФилиал(Отбор, ОписаниеОтбораПоОрганизации)
	
	Если Не ЗначениеЗаполнено(ОписаниеОтбораПоОрганизации.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ГоловнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОписаниеОтбораПоОрганизации.Организация, "ГоловнаяОрганизация");
	
	Если Не ЗначениеЗаполнено(ГоловнаяОрганизация)
		Или ГоловнаяОрганизация = ОписаниеОтбораПоОрганизации.Организация Тогда
		Возврат;
	КонецЕсли;
	
	// Выводим данные только по филиалу
	ОтборФилиал = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборФилиал.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Филиал");
	ОтборФилиал.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ОтборФилиал.ПравоеЗначение   = ОписаниеОтбораПоОрганизации.Организация;
	ОтборФилиал.Использование    = Истина;
	ОтборФилиал.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	// Отложенный налог рассчитывается по головной организации
	ОписаниеОтбораПоОрганизации.Организация = ГоловнаяОрганизация;
	
КонецПроцедуры

Функция НастроитьКолонкиОтчета(КомпоновщикНастроек, СтавкиНалога, НачалоПериода, КонецПериода, Организация, Примечания)
	
	ИспользованиеКолонок = Новый Соответствие; // См. СправкиРасчеты.ИспользованиеКолонокСуммовыхПоказателей()
	
	ВариантУчетаОтложенногоНалога = НалогНаПрибыльБухгалтерскийУчет.ВариантУчетаОтложенногоНалога(КонецПериода, Организация);
	Если ВариантУчетаОтложенногоНалога = Перечисления.ВариантыУчетаОтложенногоНалога.БалансовыйМетодПостоянныеРазницы Тогда
		
		// Разницы определяются по данным учета разниц, а не по данным о балансовой и налоговой стоимости.
		ПоказыватьРасчетРазниц = Ложь;
		
	Иначе
		
		// В частном случае данных о балансовой и налоговой стоимости может не быть.
		// Например, при переходе с одного метода на другой.
		// Поэтому состав колонок определяется динамически.
		
		ПериодДанных = РегистрыСведений.РасчетОтложенногоНалога.ПериодДанныхНаКонецПериодаОтчета(
			НачалоПериода,
			КонецПериода,
			Организация);
			
		ПоказыватьРасчетРазниц = РегистрыСведений.РасчетОтложенногоНалога.СодержитБалансовыеПоказатели(
			ПериодДанных,
			Организация);
			
	КонецЕсли;
	
	ИспользованиеКолонок.Вставить("НаКонецПериодаДетально", ПоказыватьРасчетРазниц);
	ИспользованиеКолонок.Вставить("НаКонецПериодаКратко",   Не ПоказыватьРасчетРазниц);
	
	// Когда изменения отложенного налога заведомо отражаются за счет единственного эффекта (изменения разниц),
	// то информацию об этих изменениях показываем кратко.
	// Если есть и другие эффекты (изменения ставок), то дополнительно показываем изменение разниц.
	
	ПоказыватьИзмененияРазниц = ИспользуютсяРазныеСтавки(СтавкиНалога);
	
	ИспользованиеКолонок.Вставить("ОтложенныйНалогКратко",           Не ПоказыватьИзмененияРазниц);
	ИспользованиеКолонок.Вставить("ЭффектИзмененияВычитаемыхРазниц", ПоказыватьИзмененияРазниц);
	ИспользованиеКолонок.Вставить("ЭффектИзмененияОблагаемыхРазниц", ПоказыватьИзмененияРазниц);
	
	СправкиРасчеты.НастроитьИспользованиеКолонокСуммовыхПоказателей(
		КомпоновщикНастроек,
		ИспользованиеКолонок);
	
	ТекстыЗаголовковГруппКолонок = ЗаголовкиГруппКолонок(СтавкиНалога, НачалоПериода, КонецПериода, Примечания);
	
	БухгалтерскиеОтчеты.УстановитьЗаголовкиГруппКолонок(КомпоновщикНастроек, ТекстыЗаголовковГруппКолонок);
	
	Возврат ИспользованиеКолонок;
	
КонецФункции

Функция ГруппыБалансовыхСчетов()
	
	// Для вычисления отложенных налоговых активов и обязательств, 
	// показатели на основном счете учета актива и контрарном счете суммируются,
	// при этом считается, что итоговая сумма отражена на основном счете.
	
	// Пользователю следует дать представление о том, какие счета были сгруппированы.
	// Поэтому в представлении основного счета выводится все содержимое группы.
	
	// С технической точки зрения набор используется для отображения представления счета
	// (см. вычисляемое поле ГруппаСчетов).
	// Для выполнения отчета без внешнего набора данных можно заменить в настройках это поле на Счет.
	
	ГруппыБалансовыхСчетов = Новый ТаблицаЗначений;
	ГруппыБалансовыхСчетов.Колонки.Добавить("ОсновнойСчет",              Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ГруппыБалансовыхСчетов.Колонки.Добавить("ПредставлениеГруппыСчетов", Новый ОписаниеТипов("Строка"));
	
	// Получим правила
	ГруппыСчетов = Новый Соответствие;
	ВсеСчета     = Новый Массив;
	
	ПравилаГруппировки = НалогНаПрибыльБухгалтерскийУчет.НовыйПравилаГруппировкиАктивовОбязательств();
	НалогНаПрибыльБухгалтерскийУчет.ЗаполнитьПравилаГруппировкиВидовАктивовИОбязательств(ПравилаГруппировки);
	Для Каждого Правило Из ПравилаГруппировки Цикл
		
		Если Не ЗначениеЗаполнено(Правило.ДополнительныеСчета) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетаПравила = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Правило.ДополнительныеСчета);
		СчетаПравила.Вставить(0, Правило.ОсновнойСчет);
		
		ГруппыСчетов.Вставить(Правило.ОсновнойСчет, СчетаПравила);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеСчета, СчетаПравила);
		
	КонецЦикла;
	
	// Получим представления
	Представления = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счета", ВсеСчета);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Ссылка,
	|	Хозрасчетный.Код КАК Код
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В(&Счета)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Представления.Вставить(Выборка.Ссылка, Выборка.Код);
	КонецЦикла;

	// Скомпонуем вместе
	Для Каждого ГруппаСчетов Из ГруппыСчетов Цикл
		
		ПредставленияГруппы = Новый Массив;
		Для Каждого Счет Из ГруппаСчетов.Значение Цикл
			ПредставлениеСчета = Представления[Счет];
			Если ПредставлениеСчета <> Неопределено Тогда
				ПредставленияГруппы.Добавить(ПредставлениеСчета);
			КонецЕсли;
		КонецЦикла;
		
		Строка = ГруппыБалансовыхСчетов.Добавить();
		Строка.ОсновнойСчет              = ГруппаСчетов.Ключ;
		Строка.ПредставлениеГруппыСчетов = СтрСоединить(ПредставленияГруппы, ", ");
		
	КонецЦикла;
	
	Возврат ГруппыБалансовыхСчетов;
	
КонецФункции

Функция ГрафыОтчета()
	
	Разделы = Новый Соответствие;
	
	// Заголовки строк
	Разделы.Вставить(
		СправкиРасчеты.СлужебноеИмяЗаголовкиСтрок(),
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НСтр("ru = '1'")));
	
	// "НаНачалоПериода"
	ГрафыРаздела = Новый Массив;
	ГрафыРаздела.Добавить(НСтр("ru = '2'")); // ВычитаемаяРазницаНачало
	ГрафыРаздела.Добавить(НСтр("ru = '3'")); // ОблагаемаяРазницаНачало
	ГрафыРаздела.Добавить(НСтр("ru = '4'")); // НалоговыйАктивНачало
	ГрафыРаздела.Добавить(НСтр("ru = '5'")); // НалоговоеОбязательствоНачало
	
	Разделы.Вставить("НаНачалоПериода", ГрафыРаздела);
	
	// "НаКонецПериодаКратко"
	ГрафыРаздела = Новый Массив;
	ГрафыРаздела.Добавить(НСтр("ru = '6'")); // ВычитаемаяРазницаКонец
	ГрафыРаздела.Добавить(НСтр("ru = '7'")); // ОблагаемаяРазницаКонец
	ГрафыРаздела.Добавить(НСтр("ru = '8'")); // НалоговыйАктивКонец
	ГрафыРаздела.Добавить(НСтр("ru = '9'")); // НалоговоеОбязательствоКонец
	
	Разделы.Вставить("НаКонецПериодаКратко", ГрафыРаздела);
	
	// "НаКонецПериодаДетально"
	ГрафыРаздела = Новый Массив;
	ГрафыРаздела.Добавить(НСтр("ru = 'А'")); // БалансоваяСтоимостьКонец
	ГрафыРаздела.Добавить(НСтр("ru = 'Б'")); // НалоговаяСтоимостьКонец
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ГрафыРаздела, Разделы["НаКонецПериодаКратко"]);
	
	Разделы.Вставить("НаКонецПериодаДетально", ГрафыРаздела);
	
	// "ОтложенныйНалогКратко"
	ГрафыРаздела = Новый Массив;
	ГрафыРаздела.Добавить(НСтр("ru = '10а'")); // ПризнаниеНалоговогоАктива
	ГрафыРаздела.Добавить(НСтр("ru = '10б'")); // ПогашениеНалоговогоАктива
	ГрафыРаздела.Добавить(НСтр("ru = '11а'")); // ПризнаниеНалоговогоОбязательства
	ГрафыРаздела.Добавить(НСтр("ru = '11б'")); // ПогашениеНалоговогоОбязательства
	
	Разделы.Вставить("ОтложенныйНалогКратко", ГрафыРаздела);
	
	// "ЭффектИзмененияВычитаемыхРазниц"
	ГрафыРаздела = Новый Массив;
	ГрафыРаздела.Добавить(НСтр("ru = '10'"));  // ИзменениеВычитаемыхРазниц
	ГрафыРаздела.Добавить(НСтр("ru = '10а'")); // ПризнаниеНалоговогоАктива
	ГрафыРаздела.Добавить(НСтр("ru = '10б'")); // ПогашениеНалоговогоАктива
	
	Разделы.Вставить("ЭффектИзмененияВычитаемыхРазниц", ГрафыРаздела);
	
	// "ЭффектИзмененияОблагаемыхРазниц"
	ГрафыРаздела = Новый Массив;
	ГрафыРаздела.Добавить(НСтр("ru = '11'"));  // ИзменениеОблагаемыхРазниц
	ГрафыРаздела.Добавить(НСтр("ru = '11а'")); // ПризнаниеНалоговогоОбязательства
	ГрафыРаздела.Добавить(НСтр("ru = '11б'")); // ПогашениеНалоговогоОбязательства
	
	Разделы.Вставить("ЭффектИзмененияОблагаемыхРазниц", ГрафыРаздела);
	
	Возврат Разделы;
	
КонецФункции

Функция ЗаголовкиГруппКолонок(СтавкиНалога, НачалоПериода, КонецПериода, Примечания)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НаНачалоПериода",                 "");
	Заголовки.Вставить("НаКонецПериодаКратко",            "");
	Заголовки.Вставить("НаКонецПериодаДетально",          "");
	Заголовки.Вставить("ОтложенныйНалогКратко",           "");
	Заголовки.Вставить("ЭффектИзмененияВычитаемыхРазниц", "");
	Заголовки.Вставить("ЭффектИзмененияОблагаемыхРазниц", "");
	
	ИспользуютсяРазныеСтавки = ИспользуютсяРазныеСтавки(СтавкиНалога);
	
	Если ИспользуютсяРазныеСтавки Тогда
		ШаблонГраницаПериода = НСтр("ru = 'На [ОтчетнаяДата], по ставке [Ставка]%'");
		ШаблонИзменение      = НСтр("ru = 'За отчетный период, по ставке [Ставка]%'");
		ШаблонЭффектИзмененияВычитаемыхРазниц = НСтр("ru = 'Эффект изменения вычитаемых временных разниц, по ставке [Ставка]%'");
		ШаблонЭффектИзмененияОблагаемыхРазниц = НСтр("ru = 'Эффект изменения налогооблагаемых временных разниц, по ставке [Ставка]%'");
	Иначе
		ШаблонГраницаПериода = НСтр("ru = 'На [ОтчетнаяДата]'");
		ШаблонИзменение      = НСтр("ru = 'За отчетный период'");
		ШаблонЭффектИзмененияВычитаемыхРазниц = НСтр("ru = 'Эффект изменения вычитаемых временных разниц'");
		ШаблонЭффектИзмененияОблагаемыхРазниц = НСтр("ru = 'Эффект изменения налогооблагаемых временных разниц'");
	КонецЕсли;
	
	ПараметрыТекста = Новый Структура;
	ПараметрыТекста.Вставить("ОтчетнаяДата", Формат(НачалоПериода, "ДЛФ=D"));
	Если ИспользуютсяРазныеСтавки Тогда
		ПараметрыТекста.Вставить("Ставка", СтавкиНалога[Перечисления.ВидыСтавокОтложенногоНалога.ПредыдущаяОценка]);
	КонецЕсли;
	
	ТекстНаНачалоПериода = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонГраницаПериода, ПараметрыТекста);
	Если Примечания.Свойство("Расхождения") Тогда
		СправкиРасчеты.ДополнитьСловоСсылкойНаПримечание(ТекстНаНачалоПериода, Примечания.Расхождения + 1);
	КонецЕсли;
	Заголовки.НаНачалоПериода = ТекстНаНачалоПериода;
	
	ПараметрыТекста = Новый Структура;
	ПараметрыТекста.Вставить("ОтчетнаяДата", Формат(КонецДня(КонецПериода) + 1, "ДЛФ=D"));
	Если ИспользуютсяРазныеСтавки Тогда
		ПараметрыТекста.Вставить("Ставка", СтавкиНалога[Перечисления.ВидыСтавокОтложенногоНалога.БудущийНалог]);
	КонецЕсли;
	
	Заголовки.НаКонецПериодаКратко = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонГраницаПериода, ПараметрыТекста);
	Заголовки.НаКонецПериодаДетально = Заголовки.НаКонецПериодаКратко;
	
	ПараметрыТекста = Новый Структура;
	Если ИспользуютсяРазныеСтавки Тогда
		ПараметрыТекста.Вставить("Ставка", СтавкиНалога[Перечисления.ВидыСтавокОтложенногоНалога.ТекущийНалог]);
	КонецЕсли;
	
	Заголовки.ОтложенныйНалогКратко           = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
		ШаблонИзменение,
		ПараметрыТекста);
	Заголовки.ЭффектИзмененияВычитаемыхРазниц = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
		ШаблонЭффектИзмененияВычитаемыхРазниц,
		ПараметрыТекста);
	Заголовки.ЭффектИзмененияОблагаемыхРазниц = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
		ШаблонЭффектИзмененияОблагаемыхРазниц,
		ПараметрыТекста);
		
	Возврат Заголовки;
		
КонецФункции

Процедура ВывестиПояснениеПервоеПрименение(Результат, Контекст)
	
	Если Не Контекст.ВыполнениеОтчета.Примечания.Свойство("Расхождения") Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонТекста = НСтр(
		"ru = 'На %1 установленная ставка составляет %2%%.
         |Детальные данные о суммах отложенных налоговых активов и обязательств оценены исходя из этой ставки.
         |
         |Однако, отраженные на счетах суммы отложенного налога на %1 не совпадают с рассчитанными по этой ставке.
         |Исходя из общих сумм отложенного налога и временных разниц на %1 фактически примененная ставка составляет %3%%.
         |
         |Расхождения между расчетными и фактическими суммами показаны отдельными строками.
         |Наличие таких строк может быть следствием изменения учетной политики с %1, а также указывать на ошибки в учете, допущенные до %1.
         |Последствия этого изменения (этих ошибок) устранены при пересчете отложенных налоговых активов и обязательств по ставке %4%%, записями за %5.
         |См. Справку-расчет эффекта изменения ставок налога на прибыль, графы 6 и 7'");
	
	СтавкаНалогаПредыдущаяОценка = Контекст.ВыполнениеОтчета.СтавкиНалога[
		Перечисления.ВидыСтавокОтложенногоНалога.ПредыдущаяОценка];
	СтавкаНалогаТекущийНалог     = Контекст.ВыполнениеОтчета.СтавкиНалога[
		Перечисления.ВидыСтавокОтложенногоНалога.ТекущийНалог];
	
	Текст = СтрШаблон(
		ШаблонТекста,
		Формат(Контекст.НачалоПериода, "ДЛФ=D"),
		Контекст.ВыполнениеОтчета.СтавкаНалогаПервоеПрименение, // установленная на начало периода
		СтавкаНалогаПредыдущаяОценка,                           // фактически примененная на начало периода
		СтавкаНалогаТекущийНалог,                               // на которую выполняется пересчет
		Формат(Контекст.НачалоПериода, НСтр("ru = 'ДФ=''MMMM yyyy'''")));
	
	НомерПримечания = Контекст.ВыполнениеОтчета.Примечания.Расхождения; // ДобавитьПримечание инкрементирует номер
	СправкиРасчеты.ДобавитьПримечание(Результат, Текст, НомерПримечания);
	
КонецПроцедуры

Процедура ВывестиПорядокРасчета(ТабличныйДокумент, ВыводитьРасчетВременныхРазниц, СтавкиНалога, КонецПериода, Организация)
	
	Шаблон = Отчеты.СправкаРасчетОтложенногоНалога.ПолучитьМакет("ПорядокРасчета");
	
	ВариантУчетаОтложенногоНалога = НалогНаПрибыльБухгалтерскийУчет.ВариантУчетаОтложенногоНалога(КонецПериода, Организация);
	
	// Заголовок
	ШаблонЗаголовок = Шаблон.ПолучитьОбласть("Заголовок");
	ТабличныйДокумент.Вывести(ШаблонЗаголовок);
	
	ПараметрыТекста = Новый Структура;
	ПараметрыТекста.Вставить("ОтчетнаяДата", Формат(КонецМесяца(КонецПериода) + 1, "ДЛФ=D"));
	
	// Счет, в корреспонденции с которым отражается изменение отложенных налоговых активов и обязательств
	Если ВариантУчетаОтложенногоНалога = Перечисления.ВариантыУчетаОтложенногоНалога.БалансовыйМетодПостоянныеРазницы Тогда
		СчетРасходаПоНалогу = ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль;
	Иначе
		СчетРасходаПоНалогу = ПланыСчетов.Хозрасчетный.ОтложенныйНалогНаПрибыль;
	КонецЕсли;
	
	КодСчетаРасходаПоНалогу = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетРасходаПоНалогу, "Код");
	ЭлементыКодаСчета = СтрРазделить(КодСчетаРасходаПоНалогу, ".");
	Если ЗначениеЗаполнено(ЭлементыКодаСчета) Тогда
		КодСчетаРасходаПоНалогу = ЭлементыКодаСчета[0];
	КонецЕсли;
	
	ПараметрыТекста.Вставить("СчетРасходаПоНалогу", КодСчетаРасходаПоНалогу);
	
	// Расчет временных разниц (может отсутствовать, если данные разниц выбраны из регистра непосредственно)
	Если ВыводитьРасчетВременныхРазниц Тогда
		ШаблонПорядокРасчета = Шаблон.ПолучитьОбласть("РасчетВременныхРазниц");
		ШаблонПорядокРасчета.Параметры.Заполнить(ПараметрыТекста);
		ТабличныйДокумент.Вывести(ШаблонПорядокРасчета);
	КонецЕсли;
	
	// Основной текст
	Если ИспользуютсяРазныеСтавки(СтавкиНалога) Тогда
		ИмяШаблонаПорядокРасчета = "РазныеСтавкиНалога";
	Иначе
		ИмяШаблонаПорядокРасчета = "ОдинаковаяСтавкаНалога";
	КонецЕсли;
	
	ШаблонПорядокРасчета = Шаблон.ПолучитьОбласть(ИмяШаблонаПорядокРасчета);
	
	Если ИмяШаблонаПорядокРасчета = "РазныеСтавкиНалога" Тогда
		
		ПараметрыТекста.Вставить(
			"СтавкаНалогаБудущийНалог",
			Формат(СтавкиНалога[Перечисления.ВидыСтавокОтложенногоНалога.БудущийНалог], "ЧН=0"));
		ПараметрыТекста.Вставить(
			"СтавкаНалогаТекущийНалог",
			Формат(СтавкиНалога[Перечисления.ВидыСтавокОтложенногоНалога.ТекущийНалог], "ЧН=0"));
		
	ИначеЕсли ТипЗнч(СтавкиНалога) = Тип("Число") Тогда
		
		ПараметрыТекста.Вставить("СтавкаНалога", СтрШаблон(НСтр("ru = 'Ставка налога - %1%%'"), СтавкиНалога));
		
	Иначе
		
		ПараметрыТекста.Вставить("СтавкаНалога", "");
		
	КонецЕсли;
	
	ШаблонПорядокРасчета.Параметры.Заполнить(ПараметрыТекста);
	
	ТабличныйДокумент.Вывести(ШаблонПорядокРасчета);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
