#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// См. БухгалтерскиеОтчеты.ПараметрыИсполненияОтчета
//
Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	Результат.Вставить("ИспользоватьПослеКомпоновкиМакета",  Истина);
	Результат.Вставить("ИспользоватьПослеВыводаРезультата",  Истина);
	Результат.Вставить("ИспользоватьДанныеРасшифровки",      Истина);
	Результат.Вставить("ИспользоватьВнешниеНаборыДанных",    Истина);
	Результат.Вставить("ИспользоватьПривилегированныйРежим", Истина);
	Результат.Вставить("ИспользоватьРасширенныеПараметрыРасшифровки", Истина);
	
	Возврат Результат;
	
КонецФункции

// Возвращает текст заголовка отчета
// 
// Параметры:
//   ПараметрыОтчета - Структура - Параметры исполнения отчета. См. ПустыеПараметрыКомпоновкиОтчета()
//
// Возвращаемое значение:
//   Строка - текст заголовка отчета.
//
Функция ПолучитьТекстЗаголовка(ПараметрыОтчета) Экспорт
	
	ПредставлениеТекущегоВарианта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ПараметрыОтчета, "ПредставлениеТекущегоВарианта");
	
	Если Не ЗначениеЗаполнено(ПредставлениеТекущегоВарианта) Тогда
		ПредставлениеТекущегоВарианта = НСтр("ru = 'Сравнение продаж'");
	КонецЕсли;
	
	ПредставлениеПериода = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
		ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);
	
	Возврат СтрШаблон(НСтр("ru = '%1%2'"), ПредставлениеТекущегоВарианта, ПредставлениеПериода);
	
КонецФункции

// См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СравнениеПродажПоКонтрагентам");
	ОписаниеВарианта.Размещение.Вставить(Метаданные.Подсистемы.Руководителю.Подсистемы.Продажи, "");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СравнениеПродажПоНоменклатуре");
	ОписаниеВарианта.Размещение.Вставить(Метаданные.Подсистемы.Руководителю.Подсистемы.Продажи, "");
	
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	
КонецПроцедуры

// Заполняет параметры расшифровки ячейки отчета.
//
// Параметры:
//   Адрес - Строка - Адрес временного хранилища с данными расшифровки отчета.
//   Расшифровка - Произвольный - Значения полей расшифровки.
//   ПараметрыРасшифровки - Структура - Возвращаемый параметр. Содержит ключи (опционально):
//      * ОткрытьОбъект - Булево - Если Истина, то необходимо открыть указанный объект.
//      * Значение - Произвольный - Значение расшифровывающего объекта.
//      * СписокПунктовМеню - СписокЗначений - Пункты меню для отображения выбора режима расшифровки.
//
Процедура ЗаполнитьПараметрыРасшифровкиОтчета(Адрес, Расшифровка, ПараметрыРасшифровки) Экспорт
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";
	
	ДанныеОбъекта = ПолучитьИзВременногоХранилища(Адрес);
	
	ОтчетОбъект       = ДанныеОбъекта.Объект;
	ДанныеРасшифровки = ДанныеОбъекта.ДанныеРасшифровки;
	
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("Организация", ОтчетОбъект.Организация);
	ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
	ДополнительныеСвойства.Вставить("ОчищатьТаблицуГруппировок", Истина);
	
	Периоды = Новый Структура;
	Периоды.Вставить("Год", Неопределено);
	Периоды.Вставить("Месяц", Неопределено);
	Периоды.Вставить("Квартал", Неопределено);
	Периоды.Вставить("ГраницаНачалаРасчета", Неопределено);
	Периоды.Вставить("ГраницаОкончанияРасчета", Неопределено);
	
	КлючВариантаРасшифровки = Неопределено;
	ПолеГруппировкиСравнениеПродаж = Неопределено;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(ДанныеРасшифровки.Настройки);
	КомпоновщикНастроек.Инициализировать(
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(ДанныеОбъекта.Объект.СхемаКомпоновкиДанных));
	
	МассивПолей = БухгалтерскиеОтчетыВызовСервера.ПолучитьМассивПолейРасшифровки(
		Расшифровка, ДанныеРасшифровки, КомпоновщикНастроек, Истина);
	
	ИсключаемыеПоляОтбора = Новый Массив;
	ИсключаемыеПоляОтбора.Добавить("УточнениеПериода");
	ИсключаемыеПоляОтбора.Добавить("Отклонение");
	
	Для Каждого Отбор Из МассивПолей Цикл
		Если ТипЗнч(Отбор) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
			Если Отбор.Значение = NULL
				Или ИсключаемыеПоляОтбора.Найти(Отбор.Поле) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ДобавлятьОтбор = Истина;
			
			Если Периоды.Свойство(Отбор.Поле) Тогда
				Периоды.Вставить(Отбор.Поле, Отбор.Значение);
				ДобавлятьОтбор = Ложь;
			ИначеЕсли Отбор.Поле = "НоменклатурнаяГруппа" Тогда
				ПолеГруппировкиСравнениеПродаж = "Номенклатура";
			ИначеЕсли СтрНайти(Отбор.Поле, ".") > 0 И ПолеГруппировкиСравнениеПродаж = Неопределено Тогда
				ПолеГруппировкиСравнениеПродаж = Отбор.Поле;
			КонецЕсли;
			
			Если ДобавлятьОтбор Тогда
				Если Отбор.Иерархия Тогда
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(
						ПользовательскиеОтборы, Отбор.Поле, Отбор.Значение, ВидСравненияКомпоновкиДанных.ВИерархии);
				Иначе
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, Отбор.Значение);
				КонецЕсли;
			КонецЕсли;
			
			Если КлючВариантаРасшифровки = Неопределено Тогда
				Если СтрНачинаетсяС(Отбор.Поле, "Номенклатура") Или СтрНачинаетсяС(Отбор.Поле, "НоменклатурнаяГруппа") Тогда
					КлючВариантаРасшифровки = "ПродажиПоНоменклатуре";
				ИначеЕсли СтрНачинаетсяС(Отбор.Поле, "Контрагент") Тогда
					КлючВариантаРасшифровки = "ПродажиПоКонтрагентам";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Отбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
			И Отбор.Представление = "###ОтборПоОрганизацииСОП###" Тогда
			Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
				Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
					ДополнительныеСвойства.Вставить("Организация", ЭлементОтбора.ПравоеЗначение);
					ДополнительныеСвойства.Вставить("ВключатьОбособленныеПодразделения", Истина);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЗнч(Отбор) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если Отбор.Представление = "###ОтборПоОрганизации###" Тогда
				ДополнительныеСвойства.Вставить("Организация", Отбор.ПравоеЗначение);
				ДополнительныеСвойства.Вставить("ВключатьОбособленныеПодразделения", Ложь);
			ИначеЕсли Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") 
				И Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
				ДополнительныеСвойства.Вставить("Подразделение", Отбор.ПравоеЗначение);
			Иначе
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(
					ПользовательскиеОтборы, Отбор.ЛевоеЗначение, Отбор.ПравоеЗначение, Отбор.ВидСравнения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПолеГруппировкиСравнениеПродаж <> Неопределено Тогда
		
		ДополнительныеСвойства.Вставить("НачалоПериода", ОтчетОбъект.НачалоПериода);
		ДополнительныеСвойства.Вставить("КонецПериода", ОтчетОбъект.КонецПериода);
		НастройкиОтчетаПоУмолчанию = НастройкиОтчетаСохраняемыеВРассылке();
		ЗаполнитьЗначенияСвойств(НастройкиОтчетаПоУмолчанию, ОтчетОбъект);
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДополнительныеСвойства, НастройкиОтчетаПоУмолчанию, Ложь);
		
	ИначеЕсли Периоды.Месяц <> Неопределено И Периоды.Год <> Неопределено Тогда
		
		ДополнительныеСвойства.Вставить("НачалоПериода", НачалоМесяца(ДобавитьМесяц(Периоды.Год, Периоды.Месяц - 1)));
		ДополнительныеСвойства.Вставить("КонецПериода", КонецМесяца(ДобавитьМесяц(Периоды.Год, Периоды.Месяц - 1)));
		
	ИначеЕсли Периоды.Квартал <> Неопределено И Периоды.Год <> Неопределено Тогда
		
		Месяц = Периоды.Квартал * 3;
		ДополнительныеСвойства.Вставить("НачалоПериода", НачалоКвартала(ДобавитьМесяц(Периоды.Год, Месяц - 1)));
		ДополнительныеСвойства.Вставить("КонецПериода", КонецКвартала(ДополнительныеСвойства.НачалоПериода));
		
	ИначеЕсли Периоды.Месяц <> Неопределено И Периоды.Год = Неопределено Тогда
		
		Период = Дата(Год(ДанныеОбъекта.Объект.НачалоПериода), Периоды.Месяц, 1);
		ДополнительныеСвойства.Вставить("НачалоПериода", НачалоМесяца(Период));
		ДополнительныеСвойства.Вставить("КонецПериода", Мин(ДанныеОбъекта.Объект.КонецПериода, КонецМесяца(Период)));
		
	ИначеЕсли Периоды.Квартал <> Неопределено И Периоды.Год = Неопределено Тогда
		
		Период = Дата(Год(ДанныеОбъекта.Объект.НачалоПериода), Периоды.Квартал * 3, 1);
		ДополнительныеСвойства.Вставить("НачалоПериода", НачалоКвартала(Период));
		ДополнительныеСвойства.Вставить("КонецПериода", Мин(ДанныеОбъекта.Объект.КонецПериода, КонецКвартала(Период)));
		
	ИначеЕсли Периоды.ГраницаНачалаРасчета <> Неопределено И Периоды.ГраницаОкончанияРасчета <> Неопределено Тогда
		
		ДополнительныеСвойства.Вставить("НачалоПериода", Периоды.ГраницаНачалаРасчета);
		ДополнительныеСвойства.Вставить("КонецПериода", Периоды.ГраницаОкончанияРасчета);
		
	ИначеЕсли Периоды.Год <> Неопределено Тогда
		
		ДополнительныеСвойства.Вставить("НачалоПериода", НачалоГода(Периоды.Год));
		ДополнительныеСвойства.Вставить("КонецПериода", КонецГода(Периоды.Год));
		
	Иначе
		
		ДополнительныеСвойства.Вставить("НачалоПериода");
		ДополнительныеСвойства.Вставить("КонецПериода");
		
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ПоказательКоличество", Истина);
	ДополнительныеСвойства.Вставить("ПоказательСумма", Истина);
	
	ИменаКолонокГруппировки = "Использование, Поле, Представление, ТипГруппировки";
	Группировка = ДанныеОбъекта.Объект.Группировка.СкопироватьКолонки(ИменаКолонокГруппировки);
	Для Каждого СтрокаГруппировки Из ДанныеОбъекта.Объект.Группировка Цикл
		Если Не СтрокаГруппировки.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДляРасшифровки = Новый Структура(ИменаКолонокГруппировки);
		ЗаполнитьЗначенияСвойств(СтрокаДляРасшифровки, СтрокаГруппировки);
		
		Если СтрокаДляРасшифровки.Поле = ПолеГруппировкиСравнениеПродаж
			И СтрНайти(СтрокаДляРасшифровки.Поле, ".") > 0 Тогда
			
			ЧастиИмениПоля = СтрРазделить(СтрокаДляРасшифровки.Поле, ".");
			ЧастиИмениПоля.Удалить(ЧастиИмениПоля.ВГраница());
			СтрокаДляРасшифровки.Поле = СтрСоединить(ЧастиИмениПоля, ".");
			СтрокаДляРасшифровки.Представление =
				ПолучитьПредставлениеПоляКомпоновки(СтрокаДляРасшифровки.Поле, КомпоновщикНастроек);
			
		ИначеЕсли СтрокаДляРасшифровки.Поле = "НоменклатурнаяГруппа"
			И ПолеГруппировкиСравнениеПродаж <> Неопределено Тогда
			
			СтрокаДляРасшифровки.Поле = "Номенклатура";
			СтрокаДляРасшифровки.Представление =
				ПолучитьПредставлениеПоляКомпоновки(СтрокаДляРасшифровки.Поле, КомпоновщикНастроек);
			
		КонецЕсли;
		
		Если Группировка.Найти(СтрокаДляРасшифровки.Поле, "Поле") = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Группировка.Добавить(), СтрокаДляРасшифровки);
		КонецЕсли;
	КонецЦикла;
	
	ДополнительныеСвойства.Вставить("Группировка", ОбщегоНазначения.ТаблицаЗначенийВМассив(Группировка));
	
	Если КлючВариантаРасшифровки <> Неопределено Тогда
		ДополнительныеСвойства.Вставить("КлючВарианта", КлючВариантаРасшифровки);
	Иначе
		ДополнительныеСвойства.Вставить("КлючВарианта", "ПродажиПоНоменклатурнымГруппам");
	КонецЕсли;
	
	Если ПолеГруппировкиСравнениеПродаж <> Неопределено Тогда
		ДополнительныеСвойства.Вставить("КлючВарианта", "");
		
		СписокПунктовМеню = Новый СписокЗначений;
		СписокПунктовМеню.Добавить("СравнениеПродаж", НСтр("ru = 'Сравнение продаж'"));
		
		НастройкиРасшифровки = Новый Структура("СравнениеПродаж", ПользовательскиеНастройки);
		
		ДанныеОбъекта.Вставить("НастройкиРасшифровки", НастройкиРасшифровки);
	Иначе
		СписокПунктовМеню = Новый СписокЗначений;
		СписокПунктовМеню.Добавить("Продажи", НСтр("ru = 'Продажи'"));
		
		НастройкиРасшифровки = Новый Структура("Продажи", ПользовательскиеНастройки);
		
		ДанныеОбъекта.Вставить("НастройкиРасшифровки", НастройкиРасшифровки);
	КонецЕсли;
	
	Адрес = ПоместитьВоВременноеХранилище(ДанныеОбъекта, Адрес);
	ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
	ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Ложь);
	
КонецПроцедуры

// Возвращает набор параметров, которые необходимо сохранять в рассылке отчетов.
// Значения параметров используются при формировании отчета в рассылке.
//
// Возвращаемое значение:
//   Структура - структура настроек, сохраняемых в рассылке с неинициализированными значениями.
//
Функция НастройкиОтчетаСохраняемыеВРассылке() Экспорт
	
	КоллекцияНастроек = Новый Структура;
	КоллекцияНастроек.Вставить("Организация"                      , Справочники.Организации.ПустаяСсылка());
	КоллекцияНастроек.Вставить("ПоказательКоличество"             , Истина);
	КоллекцияНастроек.Вставить("ПоказательСумма"                  , Истина);
	КоллекцияНастроек.Вставить("ВключатьОбособленныеПодразделения", Ложь);
	КоллекцияНастроек.Вставить("РазмещениеДополнительныхПолей"    , 0);
	КоллекцияНастроек.Вставить("ВыводитьЛегендуДиаграмм"          , Ложь);
	КоллекцияНастроек.Вставить("ВыводитьЗаголовок"                , Ложь);
	КоллекцияНастроек.Вставить("ВыводитьПодвал"                   , Ложь);
	КоллекцияНастроек.Вставить("МакетОформления"                  , Неопределено);
	КоллекцияНастроек.Вставить("НастройкиКомпоновкиДанных"        , Неопределено);
	КоллекцияНастроек.Вставить("Группировка"                      , Неопределено);
	КоллекцияНастроек.Вставить("ТипДиаграммы"                     , "Гистограмма");
	КоллекцияНастроек.Вставить("ПериодичностьСравнения"           , Перечисления.Периодичность.Месяц);
	КоллекцияНастроек.Вставить("ПредставлениеТекущегоВарианта"    , "");
	
	Возврат КоллекцияНастроек;
	
КонецФункции

// Возвращает структуру параметров, наличие которых требуется для успешного формирования отчета.
//
// Возвращаемое значение:
//   Структура - структура параметров для формирования отчета.
//
Функция ПустыеПараметрыКомпоновкиОтчета() Экспорт
	
	// Часть параметров компоновки отчета используется так же и в рассылке отчета.
	ПараметрыОтчета = НастройкиОтчетаСохраняемыеВРассылке();
	
	// Дополним параметрами, влияющими на формирование отчета.
	ПараметрыОтчета.Вставить("ПериодОтчета"         , Неопределено);
	ПараметрыОтчета.Вставить("НачалоПериода"        , Дата(1, 1, 1));
	ПараметрыОтчета.Вставить("КонецПериода"         , Дата(1, 1, 1));
	ПараметрыОтчета.Вставить("РежимРасшифровки"     , Ложь);
	ПараметрыОтчета.Вставить("ДанныеРасшифровки"    , Неопределено);
	ПараметрыОтчета.Вставить("СхемаКомпоновкиДанных", Неопределено);
	ПараметрыОтчета.Вставить("ИдентификаторОтчета"  , "");
	
	Возврат ПараметрыОтчета;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает внешние наборы данных, которые используются при компоновке макета
// 
// Параметры:
//   ПараметрыОтчета - Структура - Параметры исполнения отчета (См. ПустыеПараметрыКомпоновкиОтчета()),
//       дополненная полем "ТаблицаПериодов" в ПередКомпоновкойМакета()
//
// Возвращаемое значение:
//   Структура - внешние наборы данных.
//
Функция ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	ВнешниеНаборыДанных = Новый Структура("Периоды", ПараметрыОтчета.ТаблицаПериодов);
	
	Возврат ВнешниеНаборыДанных;
	
КонецФункции

// Дополнительная обработка компоновщика СКД перед выводом в отчет.
// Изменения сохранены не будут.
//
// Параметры:
//   ПараметрыОтчета - Структура - параметры формирования отчета.
//   Схема - СхемаКомпоновкиДанных - исполняемая схема компоновки данных.
//   КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - компоновщик настроек схемы.
//
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	ВидыСубконтоКД = Новый СписокЗначений;
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Субконто", ВидыСубконтоКД);
	
	ВПределахОдногоГода = (НачалоГода(ПараметрыОтчета.НачалоПериода) = (НачалоГода(ПараметрыОтчета.КонецПериода)));
	ПараметрыОтчета.Вставить("ВПределахОдногоГода", ВПределахОдногоГода);
	
	НеполныйПериод = КонецДня(ПараметрыОтчета.КонецПериода) <> КонецГода(ПараметрыОтчета.КонецПериода);
	ПараметрыОтчета.Вставить("НеполныйПериод", НеполныйПериод);
	
	КоличествоМесяцев = ОбщегоНазначенияБПКлиентСервер.РазностьДат(
		ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода, Перечисления.Периодичность.Месяц) + 1;
	
	ТаблицаПериодов = ПериодыСравненияСАналогичнымиПериодамиВПрошлом(
		ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода, Перечисления.Периодичность.Месяц, КоличествоМесяцев);
	
	Если ТаблицаПериодов.Количество() Тогда
		ДатаНачалаПериодаОтчета = ТаблицаПериодов[ТаблицаПериодов.Количество() - 1].ДатаНачалаРасчета;
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
			КомпоновщикНастроек, "ПервыйГод", НачалоГода(ДатаНачалаПериодаОтчета));
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
			КомпоновщикНастроек, "ДатаНачалаПериодаОтчета", ДатаНачалаПериодаОтчета);
	Иначе
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
			КомпоновщикНастроек, "ПервыйГод", НачалоГода(ПараметрыОтчета.НачалоПериода));
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
			КомпоновщикНастроек, "ДатаНачалаПериодаОтчета", ПараметрыОтчета.НачалоПериода);
	КонецЕсли;
	
	ПараметрыОтчета.Вставить("ТаблицаПериодов", ТаблицаПериодов);
	
	СтандартныйПериод = Новый СтандартныйПериод;
	СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
	СтандартныйПериод.ДатаНачала = ПараметрыОтчета.НачалоПериода;
	СтандартныйПериод.ДатаОкончания = ПараметрыОтчета.КонецПериода;
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПериодОтчета", СтандартныйПериод);
	
	Если ПараметрыОтчета.ВПределахОдногоГода
		И ПараметрыОтчета.ПериодичностьСравнения = Перечисления.Периодичность.Месяц Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "РасчетОтклонения", "Месяц");
	ИначеЕсли ПараметрыОтчета.ВПределахОдногоГода
		И ПараметрыОтчета.ПериодичностьСравнения = Перечисления.Периодичность.Квартал Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "РасчетОтклонения", "Квартал");
	Иначе
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "РасчетОтклонения", "Год");
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из КомпоновщикНастроек.Настройки.Структура Цикл
		Если СтрНачинаетсяС(ВРег(ЭлементСтруктуры.Имя), ВРег("Диаграмма")) Тогда
			УстановитьПараметрыВыводаДиаграммы(ЭлементСтруктуры, ПараметрыОтчета);
		ИначеЕсли ВРег(ЭлементСтруктуры.Имя) = ВРег("Таблица") Тогда
			УстановитьПараметрыВыводаТаблицы(ЭлементСтруктуры, ПараметрыОтчета);
		КонецЕсли;
	КонецЦикла;
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,
		"КартинкаУменьшениеПоказателя", Новый ХранилищеЗначения(БиблиотекаКартинок.ПродажиУменьшениеПоказателяВТаблице));
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,
		"КартинкаУвеличениеПоказателя", Новый ХранилищеЗначения(БиблиотекаКартинок.ПродажиУвеличениеПоказателяВТаблице));
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

// Дополнительная обработка макета компоновки после компоновки, но до вывода в отчет.
// Изменения сохранены не будут.
//
// Параметры:
//   ПараметрыОтчета - Структура - параметры формирования отчета.
//   МакетКомпоновки - МакетКомпоновкиДанных - инициализированный макет компоновки данных.
//
Процедура ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	Для Каждого Связь Из МакетКомпоновки.СвязиНаборовДанных Цикл
		Связь.ТипСвязи = ТипСвязиНаборовДанныхКомпоновкиДанных.Внешняя;
	КонецЦикла;
	
КонецПроцедуры

// Обработка табличного документа - результата формирования отчета.
// Можно настроить отображение различных элементов результата.
//
// Параметры:
//   ПараметрыОтчета - Структура - параметры формирования отчета.
//   Результат - ТабличныйДокумент - результат отчета, оформленный в табличном документе.
//
Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
	// Пост-обработка диаграмм отчета.
	Для Каждого Рисунок Из Результат.Рисунки Цикл
		
		Если ТипЗнч(Рисунок.Объект) <> Тип("Диаграмма") Тогда
			Продолжить;
		КонецЕсли;
		
		Диаграмма = Рисунок.Объект;
		
		Диаграмма.ОбластьПостроения.ВертикальныеМетки = Ложь;
		
		ИзменениеТочки = 0;
		ИзменениеСерии = 0;
		Если ПараметрыОтчета.ПериодичностьСравнения = Перечисления.Периодичность.Месяц
			Или ПараметрыОтчета.ПериодичностьСравнения = Перечисления.Периодичность.Квартал Тогда
			Если ПараметрыОтчета.ВПределахОдногоГода Тогда
				ИзменениеТочки = -1;
			Иначе
				ИзменениеСерии = -1;
			КонецЕсли;
		Иначе
			ИзменениеТочки = -1;
		КонецЕсли;
		
		ШаблонПодсказкиСОтклонением = НСтр("ru = '%1: <b>%2</b> (<img src=""%3""> <span style=""color: %4"">%5%</span>)'");
		ШаблонПодсказкиБезОтклонения = НСтр("ru = '%1: <b>%2</b>'");
		
		Для НомерТочки = 0 По Диаграмма.Точки.Количество() - 1 Цикл
			
			Для НомерСерии = 0 По Диаграмма.Серии.Количество() - 1 Цикл
				
				ТекущееЗначение = Диаграмма.ПолучитьЗначение(НомерТочки, НомерСерии);
				Если (НомерТочки + ИзменениеТочки) >= 0 И (НомерСерии + ИзменениеСерии) >= 0 Тогда
					ПредыдущееЗначение = Диаграмма.ПолучитьЗначение(НомерТочки + ИзменениеТочки, НомерСерии + ИзменениеСерии);
				Иначе
					ПредыдущееЗначение = Неопределено;
				КонецЕсли;
				
				Если ПредыдущееЗначение = Неопределено Тогда
					Изменение = 0;
				ИначеЕсли ЗначениеЗаполнено(ТекущееЗначение.Значение) И ЗначениеЗаполнено(ПредыдущееЗначение.Значение) Тогда
					Изменение = Окр((ТекущееЗначение.Значение / ПредыдущееЗначение.Значение - 1) * 100, 0);
				ИначеЕсли ЗначениеЗаполнено(ТекущееЗначение.Значение) Тогда
					Изменение = 100;
				ИначеЕсли ЗначениеЗаполнено(ПредыдущееЗначение.Значение) Тогда
					Изменение = -100;
				Иначе
					Изменение = 0;
				КонецЕсли;
				
				Если Изменение > 0 Тогда
					Подсказка = СтроковыеФункции.ФорматированнаяСтрока(ШаблонПодсказкиСОтклонением,
						ТекущееЗначение.Серия.Текст,
						ТекущееЗначение.Значение,
						"ПродажиУвеличениеПоказателя",
						"ПродажиХорошаяОценкаЦвет",
						Изменение);
				ИначеЕсли Изменение < 0 Тогда
					Изменение = -Изменение; // Изменение всегда показываем положительным, вместо знака выводим картинку.
					Подсказка = СтроковыеФункции.ФорматированнаяСтрока(ШаблонПодсказкиСОтклонением,
						ТекущееЗначение.Серия.Текст,
						ТекущееЗначение.Значение,
						"ПродажиУменьшениеПоказателя",
						"ПродажиПлохаяОценкаЦвет",
						Изменение);
				Иначе
					Подсказка = СтроковыеФункции.ФорматированнаяСтрока(ШаблонПодсказкиБезОтклонения,
						ТекущееЗначение.Серия.Текст, ТекущееЗначение.Значение);
				КонецЕсли;
				
				Диаграмма.УстановитьЗначение(
					НомерТочки, НомерСерии, ТекущееЗначение.Значение, ТекущееЗначение.Расшифровка, Подсказка);
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если Диаграмма.Серии.Количество() = 1 Или Диаграмма.МаксимумСерийКоличество = 1 Тогда
			Диаграмма.ОбластьЛегенды.Расположение = РасположениеЛегендыДиаграммы.Нет;
		ИначеЕсли Диаграмма.Серии.Количество() > КоличествоСерийСоединяемыхЛиниями() Тогда
			Диаграмма.СоединениеЗначенийПоСериям = ТипСоединенияЗначенийПоСериямДиаграммы.Нет;
		КонецЕсли;
		
		Если Диаграмма.ОбластьЛегенды.Расположение = РасположениеЛегендыДиаграммы.Низ Тогда
			// Искусственно увеличиваем интервал между подписями в легенде.
			Для Каждого СерияДиаграммы Из Диаграмма.Серии Цикл
				СерияДиаграммы.Текст = СтрШаблон("%1   ", СерияДиаграммы.Текст);
			КонецЦикла;
		КонецЕсли;
		
		Диаграмма.Обновление = Истина;
		
	КонецЦикла;
	
	БухгалтерскиеОтчетыВызовСервера.ИзменитьРазмерДиаграмм(Результат, 0.85, 0.75);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПериодыСравненияСАналогичнымиПериодамиВПрошлом(НачалоПериода, КонецПериода, ШагПериодовСравнения, КоличествоПериодов)
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("ДатаНачалаРасчета", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаПериодов.Колонки.Добавить("ДатаОкончанияРасчета", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаПериодов.Колонки.Добавить("ГраницаНачалаРасчета", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаПериодов.Колонки.Добавить("ГраницаОкончанияРасчета", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаПериодов.Колонки.Добавить("УточнениеПериода", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	
	Для Счетчик = 0 По КоличествоПериодов - 1 Цикл
		
		ДатаРасчета = ОбщегоНазначенияБПКлиентСервер.ДобавитьПериод(КонецПериода, ШагПериодовСравнения, -Счетчик);
		
		Если Месяц(ДатаРасчета) < Месяц(НачалоПериода)
			Или Месяц(ДатаРасчета) > Месяц(КонецПериода) Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйПериод = ТаблицаПериодов.Добавить();
		НовыйПериод.ДатаНачалаРасчета = ОбщегоНазначенияБПКлиентСервер.НачалоПериода(ДатаРасчета, ШагПериодовСравнения);
		НовыйПериод.ДатаОкончанияРасчета = ОбщегоНазначенияБПКлиентСервер.КонецПериода(ДатаРасчета, ШагПериодовСравнения);
		
		Если Месяц(НовыйПериод.ДатаНачалаРасчета) = Месяц(НачалоПериода) Тогда
			
			РазностьЛет = Год(НовыйПериод.ДатаНачалаРасчета) - Год(НачалоПериода);
			НовыйПериод.ДатаНачалаРасчета = ДобавитьМесяц(НачалоПериода, 12 * РазностьЛет);
			
		ИначеЕсли Месяц(НовыйПериод.ДатаОкончанияРасчета) = Месяц(КонецПериода) Тогда
			
			РазностьЛет = Год(НовыйПериод.ДатаОкончанияРасчета) - Год(КонецПериода);
			НовыйПериод.ДатаОкончанияРасчета = КонецДня(ДобавитьМесяц(КонецПериода, 12 * РазностьЛет));
			
		КонецЕсли;
		
	КонецЦикла;
	
	НеполныйПериод = КонецДня(КонецПериода) <> КонецГода(КонецПериода);
	Для НомерСтроки = 0 По ТаблицаПериодов.Количество() - 1 Цикл
		
		СтрокаТаблицы = ТаблицаПериодов[НомерСтроки];
		
		Если НеполныйПериод Тогда
			ЭкстремумыГода = ЭкстремумыГода(ТаблицаПериодов, Год(СтрокаТаблицы.ДатаНачалаРасчета));
			Если КонецДня(ЭкстремумыГода.Максимум) <> КонецМесяца(ЭкстремумыГода.Максимум) Тогда
				СтрокаТаблицы.УточнениеПериода = СтрШаблон(НСтр("ru = '%1 - %2'"),
					Формат(ЭкстремумыГода.Минимум, "ДЛФ=DD"),
					Формат(ЭкстремумыГода.Максимум, "ДЛФ=DD"));
			Иначе
				СтрокаТаблицы.УточнениеПериода = СтрШаблон(НСтр("ru = '%1 - %2 %3 г.'"),
					Формат(ЭкстремумыГода.Минимум, "ДФ='ММММ'"),
					Формат(ЭкстремумыГода.Максимум, "ДФ='ММММ'"),
					Формат(ЭкстремумыГода.Максимум, "ДФ='гггг'"));
			КонецЕсли;
			
			СтрокаТаблицы.ГраницаНачалаРасчета = ЭкстремумыГода.Минимум;
			СтрокаТаблицы.ГраницаОкончанияРасчета = ЭкстремумыГода.Максимум;
			
		Иначе
			СтрокаТаблицы.ГраницаНачалаРасчета = НачалоГода(СтрокаТаблицы.ДатаНачалаРасчета);
			СтрокаТаблицы.ГраницаОкончанияРасчета = КонецГода(СтрокаТаблицы.ДатаНачалаРасчета);
			СтрокаТаблицы.УточнениеПериода =
				СтрШаблон(НСтр("ru = '%1 год'"), Формат(СтрокаТаблицы.ДатаНачалаРасчета, "ДФ='гггг'"));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаПериодов;
	
КонецФункции

Функция ЭкстремумыГода(ТаблицаПериодов, Год)
	
	ЭкстремумыГода = Новый Структура("Минимум, Максимум", Неопределено, Неопределено);
	
	Для Каждого СтрокаПериода Из ТаблицаПериодов Цикл
	
		Если Год(СтрокаПериода.ДатаНачалаРасчета) <> Год Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЭкстремумыГода.Минимум)
			Или ЭкстремумыГода.Минимум > СтрокаПериода.ДатаНачалаРасчета Тогда
			ЭкстремумыГода.Минимум = СтрокаПериода.ДатаНачалаРасчета;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЭкстремумыГода.Максимум)
			Или ЭкстремумыГода.Максимум < СтрокаПериода.ДатаОкончанияРасчета Тогда
			ЭкстремумыГода.Максимум = СтрокаПериода.ДатаОкончанияРасчета;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЭкстремумыГода;
	
КонецФункции

Процедура УстановитьПараметрыВыводаДиаграммы(Диаграмма, ПараметрыОтчета)
	
	Если СтрЗаканчиваетсяНа(ВРег(Диаграмма.Имя), ВРег("Количество")) И Не ПараметрыОтчета.ПоказательКоличество Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрЗаканчиваетсяНа(ВРег(Диаграмма.Имя), ВРег("Сумма")) И Не ПараметрыОтчета.ПоказательСумма Тогда
		Возврат;
	КонецЕсли;
	
	ВыводитьДиаграмму = ЗначениеЗаполнено(ПараметрыОтчета.ТипДиаграммы) И (ПараметрыОтчета.ТипДиаграммы <> "Таблица");
	
	Если Не ВыводитьДиаграмму Тогда
		Возврат;
	КонецЕсли;
	
	Диаграмма.Использование = ВыводитьДиаграмму;
	Если ПараметрыОтчета.ВыводитьЛегендуДиаграмм Тогда
		Диаграмма.ПараметрыВывода.УстановитьЗначениеПараметра(
			"ТипДиаграммы.РасположениеЛегенды", РасположениеЛегендыДиаграммыКомпоновкиДанных.Право);
	Иначе
		Диаграмма.ПараметрыВывода.УстановитьЗначениеПараметра(
			"ТипДиаграммы.РасположениеЛегенды", РасположениеЛегендыДиаграммыКомпоновкиДанных.Нет);
	КонецЕсли;
	
	Диаграмма.Серии.Очистить();
	Диаграмма.Точки.Очистить();
	
	СоединятьЗначенияСерий = Ложь;
	НакапливатьСерии = Ложь;
	
	Если ПараметрыОтчета.ПериодичностьСравнения = Перечисления.Периодичность.Месяц
		Или ПараметрыОтчета.ПериодичностьСравнения = Перечисления.Периодичность.Квартал Тогда
		
		АктивнаяГруппировка = БухгалтерскиеОтчеты.ПерваяАктивнаяГруппировка(ПараметрыОтчета.Группировка);
		Если ПараметрыОтчета.ВПределахОдногоГода И АктивнаяГруппировка <> Неопределено Тогда
			НакапливатьСерии = Истина;
			СоединятьЗначенияСерий = Истина;
			
			ОписаниеНовойСерии = АктивнаяГруппировка;
		Иначе
			ОписаниеНовойСерии = Новый Структура();
			ОписаниеНовойСерии.Вставить("ТипГруппировки", 0);
			ОписаниеНовойСерии.Вставить("Поле", "Год");
			
			Если ПараметрыОтчета.ВыводитьЛегендуДиаграмм Тогда
				Диаграмма.ПараметрыВывода.УстановитьЗначениеПараметра(
					"ТипДиаграммы.РасположениеЛегенды", РасположениеЛегендыДиаграммыКомпоновкиДанных.Низ);
			КонецЕсли;
		КонецЕсли;
		
		НоваяСерия = Диаграмма.Серии.Добавить();
		БухгалтерскиеОтчетыВызовСервера.ЗаполнитьГруппировку(ОписаниеНовойСерии, НоваяСерия);
		
		ОписаниеНовойТочки = Новый Структура();
		ОписаниеНовойТочки.Вставить("ТипГруппировки", 0);
		Если ПараметрыОтчета.ПериодичностьСравнения = Перечисления.Периодичность.Месяц Тогда
			ОписаниеНовойТочки.Вставить("Поле", "Месяц");
		Иначе
			ОписаниеНовойТочки.Вставить("Поле", "Квартал");
		КонецЕсли;
		
		НоваяТочка = Диаграмма.Точки.Добавить();
		БухгалтерскиеОтчетыВызовСервера.ЗаполнитьГруппировку(ОписаниеНовойТочки, НоваяТочка);
		
		Если НакапливатьСерии Тогда
			НоваяТочка.Порядок.Элементы.Очистить();
			ПолеПорядка = НоваяТочка.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			ПолеПорядка.Поле = Новый ПолеКомпоновкиДанных(ОписаниеНовойТочки.Поле);
			ПолеПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
			
			НоваяСерия.Порядок.Элементы.Очистить();
			ПолеПорядка = НоваяСерия.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			ПолеПорядка.Поле = Диаграмма.Выбор.Элементы[1].Поле;
			ПолеПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
		КонецЕсли;
		
	ИначеЕсли ПараметрыОтчета.ПериодичностьСравнения = Перечисления.Периодичность.Год Тогда
		
		НакапливатьСерии = Истина;
		
		ПоляГруппировки = СтрРазделить("Год,УточнениеПериода,ГраницаНачалаРасчета,ГраницаОкончанияРасчета", ",");
		НоваяТочка = Диаграмма.Точки.Добавить();
		Для Каждого Поле Из ПоляГруппировки Цикл
			
			ОписаниеГруппировки = Новый Структура();
			ОписаниеГруппировки.Вставить("ТипГруппировки", 0);
			ОписаниеГруппировки.Вставить("Поле", Поле);
			
			БухгалтерскиеОтчетыВызовСервера.ЗаполнитьГруппировку(ОписаниеГруппировки, НоваяТочка);
			
		КонецЦикла;
		
		НоваяТочка.Выбор.Элементы.Очистить();
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(НоваяТочка.Выбор, "УточнениеПериода");
		
		НоваяТочка.Порядок.Элементы.Очистить();
		ПолеПорядка = НоваяТочка.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПолеПорядка.Поле = Новый ПолеКомпоновкиДанных("УточнениеПериода");
		ПолеПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		
		АктивнаяГруппировка = БухгалтерскиеОтчеты.ПерваяАктивнаяГруппировка(ПараметрыОтчета.Группировка);
		Если АктивнаяГруппировка <> Неопределено Тогда
			
			СоединятьЗначенияСерий = Истина;
			
			НоваяСерия = Диаграмма.Серии.Добавить();
			БухгалтерскиеОтчетыВызовСервера.ЗаполнитьГруппировку(АктивнаяГруппировка, НоваяСерия);
			
			НоваяСерия.Порядок.Элементы.Очистить();
			ПолеПорядка = НоваяСерия.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			ПолеПорядка.Поле = Диаграмма.Выбор.Элементы[1].Поле;
			ПолеПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НакапливатьСерии Тогда
		ИмяТипаДиаграммы = СтрШаблон("%1СНакоплением", ПараметрыОтчета.ТипДиаграммы);
	Иначе
		ИмяТипаДиаграммы = ПараметрыОтчета.ТипДиаграммы;
	КонецЕсли;
	Диаграмма.ПараметрыВывода.УстановитьЗначениеПараметра("ТипДиаграммы", ТипДиаграммы[ИмяТипаДиаграммы]);
	
	Если СоединятьЗначенияСерий Тогда
		Диаграмма.ПараметрыВывода.УстановитьЗначениеПараметра(
			"ТипДиаграммы.СоединениеЗначенийПоСериям", ТипСоединенияЗначенийПоСериямДиаграммы.СоединениеКраев);
		Диаграмма.ПараметрыВывода.УстановитьЗначениеПараметра(
			"ТипДиаграммы.ЛинииСоединенияЗначенийПоСериям", Новый Линия(ТипЛинииДиаграммы.Сплошная));
		Диаграмма.ПараметрыВывода.УстановитьЗначениеПараметра(
			"ТипДиаграммы.ЦветСоединенияЗначенийПоСериям", ЦветаСтиля.ЦветВторостепенногоТекстаМонитораРуководителя);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрыВыводаТаблицы(Таблица, ПараметрыОтчета)
	
	// Колонки таблицы.
	
	// Если указан период - неполный год и сравнение по годам, 
	// то в заголовке выводим уточнение периода (с .. по ..), иначе просто год.
	Если ПараметрыОтчета.НеполныйПериод
		И ПараметрыОтчета.ПериодичностьСравнения = Перечисления.Периодичность.Год Тогда
		
		// Группировка по полям: Год, УточнениеПериода, ГраницаНачалаРасчета, ГраницаОкончанияРасчета.
		Таблица.Колонки[0].Использование = Истина;
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Таблица.Колонки[0].Выбор, "УточнениеПериода");
		
		// Состав выбранных полей зависит от параметров отчета. 
		// Выбранные поля могут быть указаны в колонке таблицы отчета.
		УстановитьВидимостьВыбранныхПолей(Таблица.Колонки[0].Выбор.Элементы, ПараметрыОтчета);
		
	ИначеЕсли ПараметрыОтчета.ВПределахОдногоГода
		И ПараметрыОтчета.ПериодичностьСравнения = Перечисления.Периодичность.Месяц Тогда
		
		// Группировка по полю "Месяц".
		Таблица.Колонки[1].Использование = Истина;
		
		// Состав выбранных полей зависит от параметров отчета. 
		// Выбранные поля могут быть указаны в колонке таблицы отчета.
		УстановитьВидимостьВыбранныхПолей(Таблица.Колонки[1].Выбор.Элементы, ПараметрыОтчета);
		
	ИначеЕсли ПараметрыОтчета.ВПределахОдногоГода
		И ПараметрыОтчета.ПериодичностьСравнения = Перечисления.Периодичность.Квартал Тогда
		
		// Группировка по полю "Квартал".
		Таблица.Колонки[2].Использование = Истина;
		
		// Состав выбранных полей зависит от параметров отчета. 
		// Выбранные поля могут быть указаны в колонке таблицы отчета.
		УстановитьВидимостьВыбранныхПолей(Таблица.Колонки[2].Выбор.Элементы, ПараметрыОтчета);
		
	Иначе
		
		// Группировка по полям: Год, УточнениеПериода, ГраницаНачалаРасчета, ГраницаОкончанияРасчета.
		Таблица.Колонки[0].Использование = Истина;
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Таблица.Колонки[0].Выбор, "Год");
		
		// Состав выбранных полей зависит от параметров отчета. 
		// Выбранные поля могут быть указаны в колонке таблицы отчета.
		УстановитьВидимостьВыбранныхПолей(Таблица.Колонки[0].Выбор.Элементы, ПараметрыОтчета);
		
	КонецЕсли;
	
	// Строки таблицы.
	
	Таблица.Строки.Очистить();
	Если ПараметрыОтчета.ПериодичностьСравнения <> Перечисления.Периодичность.Год
		И Не ПараметрыОтчета.ВПределахОдногоГода Тогда
		
		ГруппировкаМесяц = Новый Структура;
		ГруппировкаМесяц.Вставить("ТипГруппировки", 0);
		Если ПараметрыОтчета.ПериодичностьСравнения = Перечисления.Периодичность.Месяц Тогда
			ГруппировкаМесяц.Вставить("Поле", "Месяц");
		ИначеЕсли ПараметрыОтчета.ПериодичностьСравнения = Перечисления.Периодичность.Квартал Тогда
			ГруппировкаМесяц.Вставить("Поле", "Квартал");
		КонецЕсли;
		
		БухгалтерскиеОтчетыВызовСервера.ЗаполнитьГруппировку(ГруппировкаМесяц, Таблица.Строки.Добавить());
		Группировка = Таблица.Строки[0].Структура;
	Иначе
		Группировка = Таблица.Строки;
	КонецЕсли;
	
	Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл
		
		Если Не ПолеВыбраннойГруппировки.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Группировка) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") Тогда
			Группировка = Группировка.Добавить();
			
			ПолеПорядка = Группировка.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			ПолеПорядка.Поле = Новый ПолеКомпоновкиДанных("Сумма");
			ПолеПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
			
			ПолеПорядка = Группировка.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			ПолеПорядка.Поле = Новый ПолеКомпоновкиДанных("Количество");
			ПолеПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
		Иначе
			Группировка = Группировка.Структура.Добавить();
		КонецЕсли;
		
		БухгалтерскиеОтчетыВызовСервера.ЗаполнитьГруппировку(ПолеВыбраннойГруппировки, Группировка);
		
	КонецЦикла;
	
	УстановитьВидимостьВыбранныхПолей(Таблица.Выбор.Элементы, ПараметрыОтчета);
	
КонецПроцедуры

Процедура УстановитьВидимостьВыбранныхПолей(ВыбранныеПоля, ПараметрыОтчета)
	
	ПолеКоличество = Новый ПолеКомпоновкиДанных("Количество");
	ПолеСумма = Новый ПолеКомпоновкиДанных("Сумма");
	ПолеОтклонениеКоличество = Новый ПолеКомпоновкиДанных("ОтклонениеКоличество");
	ПолеОтклонениеСумма = Новый ПолеКомпоновкиДанных("Отклонение");
	
	Для Каждого ЭлементВыбора Из ВыбранныеПоля Цикл
		Если ТипЗнч(ЭлементВыбора) <> Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементВыбора.Поле = ПолеОтклонениеКоличество Тогда
			ЭлементВыбора.Использование = ПараметрыОтчета.ПоказательКоличество И Не ПараметрыОтчета.ПоказательСумма;
		КонецЕсли;
		Если ЭлементВыбора.Поле = ПолеКоличество Тогда
			ЭлементВыбора.Использование = ПараметрыОтчета.ПоказательКоличество;
		КонецЕсли;
		Если ЭлементВыбора.Поле = ПолеСумма Или ЭлементВыбора.Поле = ПолеОтклонениеСумма Тогда
			ЭлементВыбора.Использование = ПараметрыОтчета.ПоказательСумма;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПредставлениеПоляКомпоновки(ИмяПоляКомпоновки, ОбластьПоиска)
	
	Если ТипЗнч(ОбластьПоиска) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ПолеКомпоновки = БухгалтерскиеОтчетыВызовСервера.ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(
			ИмяПоляКомпоновки, ОбластьПоиска.Настройки.ДоступныеПоляГруппировок);
	Иначе
		ПолеКомпоновки = БухгалтерскиеОтчетыВызовСервера.ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(
			ИмяПоляКомпоновки, ОбластьПоиска);
	КонецЕсли;
		
	Если ПолеКомпоновки <> Неопределено Тогда
		Возврат ПолеКомпоновки.Заголовок;
	Иначе
		Возврат ИмяПоляКомпоновки;
	КонецЕсли;
	
КонецФункции

Функция КоличествоСерийСоединяемыхЛиниями()
	Возврат 20;
КонецФункции

#Область ОбновлениеИнформационнойБазы

// Обработчик обновления на версию 3.0.76.34
// Переносит текущие и сохраненные пользовательские настройки из старого варианта отчета в новые.
//
Процедура ПеренестиПользовательскиеНастройкиВНовыйВариантОтчета() Экспорт
	
	НовыеВладельцыНастроек = Новый Массив;
	НовыеВладельцыНастроек.Добавить("Отчет.СравнениеПродаж/СравнениеПродажПоНоменклатуре");
	НовыеВладельцыНастроек.Добавить("Отчет.СравнениеПродаж/СравнениеПродажПоКонтрагентам");
	
	Для Каждого НовыйКлючОбъекта Из НовыеВладельцыНастроек Цикл
		
		// Перенесем текущие пользовательские настройки
		ПеренестиПользовательскиеНастройкиОтчета(
			ХранилищеСистемныхНастроек,
			"Отчет.ПродажиПоМесяцам/ПродажиПоМесяцам/ТекущиеПользовательскиеНастройки",
			СтрШаблон("%1/ТекущиеПользовательскиеНастройки", НовыйКлючОбъекта));
		
		// Перенесем сохраненные пользовательские настройки
		ПеренестиПользовательскиеНастройкиОтчета(
			ХранилищеПользовательскихНастроекОтчетов,
			"Отчет.ПродажиПоМесяцам/ПродажиПоМесяцам",
			НовыйКлючОбъекта);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПеренестиПользовательскиеНастройкиОтчета(ХранилищеНастроек, СтарыйКлючОбъекта, НовыйКлючОбъекта)
	
	ВыборкаНастроек = ХранилищеНастроек.Выбрать(Новый Структура("КлючОбъекта", СтарыйКлючОбъекта));
	
	Пока ВыборкаНастроек.Следующий() Цикл
		
		ПользовательскиеНастройки = ВыборкаНастроек.Настройки;
		
		Если ТипЗнч(ПользовательскиеНастройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных")
			И ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ДанныеОтчета")
			И ТипЗнч(ПользовательскиеНастройки.ДополнительныеСвойства.ДанныеОтчета) = Тип("ХранилищеЗначения") Тогда
			
			ДанныеОтчета = ПользовательскиеНастройки.ДополнительныеСвойства.ДанныеОтчета.Получить();
			
			Если ТипЗнч(ДанныеОтчета) = Тип("Структура") И ДанныеОтчета.Свойство("КонецПериода") Тогда
				ДанныеОтчета.КонецПериода = КонецГода(ДанныеОтчета.КонецПериода);
			КонецЕсли;
			
			ПользовательскиеНастройки.ДополнительныеСвойства.ДанныеОтчета = Новый ХранилищеЗначения(ДанныеОтчета);
			
		КонецЕсли;
		
		ОписаниеНастроек = ХранилищеНастроек.ПолучитьОписание(
			ВыборкаНастроек.КлючОбъекта, ВыборкаНастроек.КлючНастроек, ВыборкаНастроек.Пользователь);
		
		ОписаниеНастроек.КлючОбъекта = НовыйКлючОбъекта;
		
		ХранилищеНастроек.Сохранить(
			НовыйКлючОбъекта,
			ВыборкаНастроек.КлючНастроек,
			ПользовательскиеНастройки,
			ОписаниеНастроек,
			ВыборкаНастроек.Пользователь);
		
	КонецЦикла;
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли