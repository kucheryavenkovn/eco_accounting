#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет поддерживаемый набор суммовых показателей справки-расчета.
// См. соответствующие методы модулей подсистемы СправкиРасчеты.
// Справка-расчет должна поддерживать хотя бы один набор.
// Если поддерживается несколько наборов, то конкретный набор выбирается в форме
// и передается через свойство отчета НаборПоказателейОтчета.
//
// См. также ПолучитьНаборПоказателей
//
// Возвращаемое значение:
//  Массив - номера наборов суммовых показателей.
//
Функция ПоддерживаемыеНаборыСуммовыхПоказателей() Экспорт
	
	Наборы = Новый Массив;
	Наборы.Добавить(СправкиРасчетыКлиентСервер.НомерНабораСуммовыхПоказателейПоУмолчанию());
	Наборы.Добавить(СправкиРасчетыКлиентСервер.НомерНабораСуммовыхПоказателейНалоговыйУчет());
	Наборы.Добавить(СправкиРасчетыКлиентСервер.НомерНабораСуммовыхПоказателейОтложенногоНалога());
	// Набор показателей сверки не поддерживается, так как представление данных бухгалтерского и налогового учета имеет разную структуру
	
	Возврат Наборы;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиБухгалтерскиеОтчеты

Функция ПолучитьТекстЗаголовка(Контекст) Экспорт 
	
	Возврат СправкиРасчеты.ЗаголовокОтчета(Контекст);
	
КонецФункции

Процедура ПриВыводеЗаголовка(Контекст, КомпоновщикНастроек, Результат) Экспорт
	
	СправкиРасчеты.ВывестиШапкуОтчета(Результат, Контекст);
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(Контекст, Результат) Экспорт
	
	СчетчикПримечаний = СправкиРасчеты.ОформитьРезультатОтчета(Результат, Контекст);
	
	ДобавитьПримечаниеПолныеРубли(Результат, Контекст.ПоказательВР, СчетчикПримечаний);
	
КонецПроцедуры

#КонецОбласти

#Область ТонкаяНастройка

Процедура ДобавитьПримечаниеПолныеРубли(Результат, ПоказательВР, СчетчикПримечаний)
	
	Если Не ПоказательВР Тогда
		Возврат;
	КонецЕсли;
		
	СправкиРасчеты.ДобавитьПримечание(
		Результат,
		НСтр("ru = 'Сумма налога исчисляется в полных рублях.п. 6 ст. 52 НК РФ'"),
		СчетчикПримечаний);
		
КонецПроцедуры
	
#КонецОбласти

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	Результат.Вставить("ИспользоватьПослеКомпоновкиМакета",  Истина);
	Результат.Вставить("ИспользоватьПослеВыводаРезультата",  Истина);
	Результат.Вставить("ИспользоватьДанныеРасшифровки",      Ложь);
	Результат.Вставить("ИспользоватьПриВыводеЗаголовка",     Истина);
	Результат.Вставить("ИспользоватьВнешниеНаборыДанных",    Истина);
	Результат.Вставить("ИспользоватьПривилегированныйРежим", Истина);
	
	Возврат Результат;
													
КонецФункции

Функция РезультатРасчетаСтавкиНалога(Период, Организация)
	
	РезультатРасчета = Неопределено;
	
	НалоговыйУчетОбособленныхПодразделений.ВыполнитьЗапросРасчетСтавкиНалогаНаПрибыльЗаМесяц(
		РезультатРасчета, 
		Организация,
		Период);
		
	Возврат РезультатРасчета;
	
КонецФункции

Функция ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	Перем ПустойЗапрос;
	
	ЗапросРасчетСтавкиНалогаНаПрибыль = ПараметрыОтчета.РасчетСтавкиНалога;
	ЗапросРасчетНалогаНаПрибыль       = ПараметрыОтчета.ВыполнениеОтчета.ЗапросРасчетНалогаНаПрибыль;
		
	ТекстПустогоЗапроса =
	"ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО КАК Организация,
	|	NULL КАК СтавкаСубъектРФ,
	|	NULL КАК СуммаНалогГод,
	|	NULL КАК СуммаНалогМесяц,
	|	NULL КАК СуммаНалогОстальныеМесяцы,
	|	NULL КАК Бюджет,
	|	NULL КАК ДоляНалоговойБазы,
	|	NULL КАК РегистрацияВНалоговомОргане,
	|	NULL КАК ОрганизацияГоловнаяОрганизация,
	|	NULL КАК Ставка,
	|	NULL КАК СуммаНалога,
	|	NULL КАК СуммаБазы";
		
	Если ЗапросРасчетСтавкиНалогаНаПрибыль = Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстПустогоЗапроса;
		ПустойЗапрос = Запрос.Выполнить();
	
		ЗапросРасчетСтавкиНалогаНаПрибыль = ПустойЗапрос;
		
	КонецЕсли;	
	
	Если ЗапросРасчетНалогаНаПрибыль = Неопределено Тогда
		
		Если ПустойЗапрос = Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = ТекстПустогоЗапроса;
			ПустойЗапрос = Запрос.Выполнить();
		КонецЕсли;
		
		ЗапросРасчетНалогаНаПрибыль = ПустойЗапрос;
		
	КонецЕсли;	
	
	Возврат Новый Структура("ЗапросРасчетСтавкиНалогаНаПрибыль,ЗапросРасчетНалогаНаПрибыль",
							ЗапросРасчетСтавкиНалогаНаПрибыль,
							ЗапросРасчетНалогаНаПрибыль);
		
КонецФункции	

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	ЗапросРасчетНалогаНаПрибыль = Неопределено;
	НалоговыйУчетОбособленныхПодразделений.ВыполнитьЗапросРасчетНалогаНаПрибыль(
		ЗапросРасчетНалогаНаПрибыль, ПараметрыОтчета.Организация, КонецДня(ПараметрыОтчета.КонецПериода));
	ПараметрыОтчета.ВыполнениеОтчета.Вставить("ЗапросРасчетНалогаНаПрибыль", ЗапросРасчетНалогаНаПрибыль);
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", ПараметрыОтчета.НачалоПериода);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		
		Если Не ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
			НачалоМесяца = ПараметрыОтчета.НачалоПериода;
		ИначеЕсли ПараметрыОтчета.НачалоПериода = НачалоМесяца(ПараметрыОтчета.КонецПериода) Тогда
			НачалоМесяца = ПараметрыОтчета.НачалоПериода;
		ИначеЕсли Месяц(ПараметрыОтчета.КонецПериода) = 1 Тогда
			НачалоМесяца = ПараметрыОтчета.НачалоПериода;
		Иначе
			НачалоМесяца = Макс(ПараметрыОтчета.НачалоПериода, НачалоМесяца(ПараметрыОтчета.КонецПериода));
		КонецЕсли;
		
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоМесяца", НачалоМесяца);
		
	КонецЕсли;
	
	ВариантУчетаОтложенногоНалога = НалогНаПрибыльБухгалтерскийУчет.ВариантУчетаОтложенногоНалога(
		ПараметрыОтчета.КонецПериода,
		ПараметрыОтчета.Организация);
	ВедетсяУчетУсловногоРасхода = (ВариантУчетаОтложенногоНалога = Перечисления.ВариантыУчетаОтложенногоНалога.БалансовыйМетодПостоянныеРазницы
		Или ВариантУчетаОтложенногоНалога = Перечисления.ВариантыУчетаОтложенногоНалога.ЗатратныйМетод);
		
	РасчетНалогаНаПрибыльПриводитсяСправочно = ПараметрыОтчета.ПоказательБУ И Не ПараметрыОтчета.ПоказательНУ И Не ВедетсяУчетУсловногоРасхода;
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПоддержкаПБУ18", ВедетсяУчетУсловногоРасхода);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "РасчетНалогаНаПрибыльПриводитсяСправочно", РасчетНалогаНаПрибыльПриводитсяСправочно);

	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,"ВключатьОбособленныеПодразделения",ПараметрыОтчета.ВключатьОбособленныеПодразделения);

	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,
														"ИспользуютсяОбособленныеПодразделения",
														БухгалтерскийУчетПереопределяемый.ОбособленноеПодразделение(ПараметрыОтчета.Организация));
														
	БазаРаспределенияКосвенныхРасходовПоВидамДеятельности = УчетнаяПолитика.БазаРаспределенияКосвенныхРасходовПоВидамДеятельности(ПараметрыОтчета.Организация, ПараметрыОтчета.КонецПериода);
	Если ЗначениеЗаполнено(БазаРаспределенияКосвенныхРасходовПоВидамДеятельности) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,"УчитыватьВсеДоходы", 
			БазаРаспределенияКосвенныхРасходовПоВидамДеятельности = 
				Перечисления.БазыРаспределенияКосвенныхРасходовПоВидамДеятельности.ДоходыОтРеализацииИВнереализационные);
	Иначе
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,"УчитыватьВсеДоходы",Истина);
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,"ИспользуетсяЕНВД",Константы.ИспользуетсяЕНВД.Получить());
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НалоговыйУчет",ПараметрыОтчета.ПоказательНУ);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек,
		"БУПРВР",
		ПараметрыОтчета.ПоказательВР Или ПараметрыОтчета.ПоказательПР);
		
	РасчетСтавкиНалога = РезультатРасчетаСтавкиНалога(КонецДня(ПараметрыОтчета.КонецПериода), ПараметрыОтчета.Организация);
	ПараметрыОтчета.Вставить("РасчетСтавкиНалога", РасчетСтавкиНалога);
		
	// Параметры для заголовков колонок
	// - СноскаНалоговыйПериод
	СноскаНалоговыйПериод = "";
	СправкиРасчеты.ДополнитьПериодОтчетаПримечанием(СноскаНалоговыйПериод, ПараметрыОтчета);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СноскаНалоговыйПериод", СноскаНалоговыйПериод);
	
	// - заголовки таблицы НалогНаПрибыль
	ЗаголовкиНалогНаПрибыль = Новый Структура;
	ЗаголовкиНалогНаПрибыль.Вставить("ЗаголовокНалогМесяц",           "");
	ЗаголовкиНалогНаПрибыль.Вставить("ЗаголовокНалогОстальныеМесяцы", "");
	ЗаголовкиНалогНаПрибыль.Вставить("ЗаголовокНалогГод",             "");
	
	Если Не РасчетНалогаНаПрибыльПриводитсяСправочно Тогда
		
		СтавкаНалогаНаПрибыль = РасчетНалогаНаПрибыль.СуммарнаяУстановленнаяСтавкаНалога(
			ПараметрыОтчета.КонецПериода,
			ПараметрыОтчета.Организация,
			"Процент");
			
		Если РасчетСтавкиНалога <> Неопределено И Не РасчетСтавкиНалога.Пустой() Тогда
			ДанныеСтавокНалога = РасчетСтавкиНалога.Выгрузить();
			СтавкаНалогаНаПрибыль = ДанныеСтавокНалога[0].Ставка;
		ИначеЕсли ЗапросРасчетНалогаНаПрибыль <> Неопределено И Не ЗапросРасчетНалогаНаПрибыль.Пустой() Тогда
			// Фактически налог может определяться не одной ставкой налога, а совокупностью ставок
			ЕдинаяСтавкаНалога = Неопределено;
			Для Каждого Запись Из ЗапросРасчетНалогаНаПрибыль.Выгрузить() Цикл
				
				Если Запись.Бюджет <> Перечисления.УровниБюджетов.РегиональныйБюджет Или Запись.СтавкаСубъектРФ = Null Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЕдинаяСтавкаНалога = Неопределено Тогда
					ЕдинаяСтавкаНалога = Запись.СтавкаСубъектРФ;
				ИначеЕсли ЕдинаяСтавкаНалога <> Запись.СтавкаСубъектРФ Тогда
					СтавкаНалогаНаПрибыль = Неопределено;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ПредставлениеСтавки = СтрШаблон(НСтр("ru = '%1%%'"), СтавкаНалогаНаПрибыль);
		
		Если СтавкаНалогаНаПрибыль = Неопределено Тогда
			ЗаголовкиНалогНаПрибыль.Вставить("ЗаголовокНалогМесяц",           НСтр("ru = 'гр. 7 таб. Расчет налога на прибыль'"));
			ЗаголовкиНалогНаПрибыль.Вставить("ЗаголовокНалогОстальныеМесяцы", НСтр("ru = 'гр. 6 таб. Расчет налога на прибыль'"));
			ЗаголовкиНалогНаПрибыль.Вставить("ЗаголовокНалогГод",             НСтр("ru = 'гр. 5 таб. Расчет налога на прибыль'"));
		Иначе
			ШаблоныЗаголовков = Новый Структура;
			ШаблоныЗаголовков.Вставить(
				"ЗаголовокНалогМесяц",
				НСтр("ru = 'Итог гр.4 (Всего по видам деятельности с основной системой налогообложения) за вычетом убытков предыдущих месяцев гр. 7 * %1'"));
			ШаблоныЗаголовков.Вставить(
				"ЗаголовокНалогОстальныеМесяцы",
				НСтр("ru = 'Итог гр.7 (Всего по видам деятельности с основной системой налогообложения) * %1'"));
			ШаблоныЗаголовков.Вставить(
				"ЗаголовокНалогГод",
				НСтр("ru = 'Итог гр.10 (Всего по видам деятельности с основной системой налогообложения) * %1'"));
				
			Для Каждого ОписаниеЗаголовка Из ШаблоныЗаголовков Цикл
				ЗаголовкиНалогНаПрибыль.Вставить(ОписаниеЗаголовка.Ключ, СтрШаблон(ОписаниеЗаголовка.Значение, ПредставлениеСтавки));
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ОписаниеЗаголовка Из ЗаголовкиНалогНаПрибыль Цикл
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, ОписаниеЗаголовка.Ключ, ОписаниеЗаголовка.Значение);
	КонецЦикла;
	
	ИспользуютсяОбозначенияПоказателей = (ПараметрыОтчета.СоставНабораПоказателей.Количество() > 1);
	ПоказыватьЕНВД = Не ПараметрыОтчета.ПоказательНУ;
	
	МассивТаблицОтчета = Новый Массив;
	МассивТаблицОтчета.Добавить("ОсновнаяДеятельность");
	МассивТаблицОтчета.Добавить("НеосновнаяДеятельность");
	МассивТаблицОтчета.Добавить("ОсновнаяДеятельностьЕНВД");
	МассивТаблицОтчета.Добавить("НеосновнаяДеятельностьЕНВД");
	МассивТаблицОтчета.Добавить("УбыткиПрошлыхЛет");
	МассивТаблицОтчета.Добавить("ВсегоОСН");
	МассивТаблицОтчета.Добавить("ВсегоЕНВД");
	
	Для Каждого ИмяТаблицы Из МассивТаблицОтчета Цикл
		
		Группировка = БухгалтерскиеОтчеты.НайтиПоИмени(КомпоновщикНастроек.Настройки.Структура,"Заголовки." + ИмяТаблицы);
		
		//Видимость Таблицы ЕНВД
		Если (СтрНайти(ИмяТаблицы,"ЕНВД") <> 0) и (НЕ ПоказыватьЕНВД) Тогда
			Группировка.Использование = Ложь;
			Продолжить;
		КонецЕсли;	
		
		Таблица = БухгалтерскиеОтчеты.НайтиПоИмени(Группировка.Структура,ИмяТаблицы);
		
		ГруппировкаПоказатель = БухгалтерскиеОтчеты.НайтиПоИмени(Таблица.Строки,"Показатель");
		Отбор = ГруппировкаПоказатель.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		Отбор.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
		// Колонка "показатели"
		Если ИспользуютсяОбозначенияПоказателей Тогда
			Колонка = Таблица.Колонки.Добавить();
			Колонка.Имя           = "Показатели";
			Колонка.Использование = Истина;
			
			ГруппаПоказатели = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ГруппаПоказатели.Использование = Истина;
			ГруппаПоказатели.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
			
			Для Каждого ИмяПоказателя Из ПараметрыОтчета.СоставНабораПоказателей Цикл
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаПоказатели, "Показатели." + ИмяПоказателя);
			КонецЦикла;
			
		КонецЕсли;
		
		// Колонка "за текущий месяц"
		//
		Колонка = Таблица.Колонки.Добавить();
		Колонка.Имя           = ИмяТаблицы + ".ЗаТекущийМесяц";
		Колонка.Использование = Истина;
		
		//Группа "Доходы"
		ГруппаДоходыМесяц = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ГруппаДоходыМесяц.Использование = Истина;
		ГруппаДоходыМесяц.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		ГруппаДоходыМесяц.Заголовок	 = "Доходы без НДС, акцизов и пошлин";
		
		//Группа "Расходы"
		ГруппаРасходыМесяц = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ГруппаРасходыМесяц.Использование = Истина;
		ГруппаРасходыМесяц.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		ГруппаРасходыМесяц.Заголовок	 = "Расходы без НДС, акцизов и пошлин";
		
		//Группа "ПрибыльУбыток"
		ГруппаПрибыльУбытокМесяц = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ГруппаПрибыльУбытокМесяц.Использование = Истина;
		ГруппаПрибыльУбытокМесяц.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		ГруппаПрибыльУбытокМесяц.Заголовок	 = "Прибыль (+) убыток (-) гр.2 - гр.3";
		
		
		// Колонка "за прошлые месяцы года"
		//
		Колонка = Таблица.Колонки.Добавить();
		Колонка.Имя           = ИмяТаблицы + ".ЗаПрошлыеМесяцы";
		Колонка.Использование = Истина;
		
		//Группа "Доходы"
		ГруппаДоходыПрошлыеМесяцы = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ГруппаДоходыПрошлыеМесяцы.Использование = Истина;
		ГруппаДоходыПрошлыеМесяцы.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		ГруппаДоходыПрошлыеМесяцы.Заголовок	 = "Доходы без НДС, акцизов и пошлин";
		
		//Группа "Расходы"
		ГруппаРасходыПрошлыеМесяцы = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ГруппаРасходыПрошлыеМесяцы.Использование = Истина;
		ГруппаРасходыПрошлыеМесяцы.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		ГруппаРасходыПрошлыеМесяцы.Заголовок	 = "Расходы без НДС, акцизов и пошлин";
		
		//Группа "ПрибыльУбыток"
		ГруппаПрибыльУбытокПрошлыеМесяцы = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ГруппаПрибыльУбытокПрошлыеМесяцы.Использование = Истина;
		ГруппаПрибыльУбытокПрошлыеМесяцы.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		ГруппаПрибыльУбытокПрошлыеМесяцы.Заголовок	 = "Прибыль (+)" + символы.ПС + "убыток (-)" + символы.ПС + "гр.2 - гр.3";
		
		// Колонка "за текущий год"
		//
		Колонка = Таблица.Колонки.Добавить();
		Колонка.Имя           = ИмяТаблицы + ".ЗаГод";
		Колонка.Использование = Истина;
		
		//Группа "Доходы"
		ГруппаДоходыГод = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ГруппаДоходыГод.Использование = Истина;
		ГруппаДоходыГод.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		ГруппаДоходыГод.Заголовок	 = "Доходы без НДС, акцизов и пошлин";
		
		//Группа "Расходы"
		ГруппаРасходыГод = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ГруппаРасходыГод.Использование = Истина;
		ГруппаРасходыГод.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		ГруппаРасходыГод.Заголовок	 = "Расходы без НДС, акцизов и пошлин";
		
		//Группа "ПрибыльУбыток"
		ГруппаПрибыльУбытокГод = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ГруппаПрибыльУбытокГод.Использование = Истина;
		ГруппаПрибыльУбытокГод.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		ГруппаПрибыльУбытокГод.Заголовок	 = "Прибыль (+)" + символы.ПС + "убыток (-)" + символы.ПС + "гр.2 - гр.3";
		
		ОтборГруппировки = Группировка.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
        ОтборГруппировки.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
		ОтборГруппировкиВсего = Группировка.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
        ОтборГруппировкиВсего.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		ОтборГруппировкиВсего.Использование = Ложь;
		
		//Добавляем показатели в группы
		Для Каждого ИмяПоказателя Из ПараметрыОтчета.СоставНабораПоказателей Цикл
				
			//Показатели текущего месяца
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаДоходыМесяц, ИмяТаблицы + ".Доход" + ИмяПоказателя + "Месяц");
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаРасходыМесяц, ИмяТаблицы +  ".Расход" + ИмяПоказателя + "Месяц");
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаПрибыльУбытокМесяц, ИмяТаблицы + ".ПрибыльУбыток" + ИмяПоказателя + "Месяц");
			
			//Строка показывается если хотя бы одна из ВЫВОДИМЫХ сумм не равна нулю
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(Отбор, ИмяТаблицы + ".Доход" + ИмяПоказателя + "Месяц",0,ВидСравненияКомпоновкиДанных.НеРавно);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(Отбор, ИмяТаблицы + ".Расход" + ИмяПоказателя + "Месяц",0,ВидСравненияКомпоновкиДанных.НеРавно);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(Отбор, ИмяТаблицы + ".ПрибыльУбыток" + ИмяПоказателя + "Месяц",0,ВидСравненияКомпоновкиДанных.НеРавно);
			
			//Показатели прошлых месяцев
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаДоходыПрошлыеМесяцы, ИмяТаблицы +  ".Доход" + ИмяПоказателя + "ОстальныеМесяцы");
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаРасходыПрошлыеМесяцы, ИмяТаблицы +  ".Расход" + ИмяПоказателя + "ОстальныеМесяцы");
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаПрибыльУбытокПрошлыеМесяцы, ИмяТаблицы +  ".ПрибыльУбыток" + ИмяПоказателя + "ОстальныеМесяцы");
			
			//Строка показывается если хотя бы одна из ВЫВОДИМЫХ сумм не равна нулю
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(Отбор, ИмяТаблицы + ".Доход" + ИмяПоказателя + "ОстальныеМесяцы",0,ВидСравненияКомпоновкиДанных.НеРавно);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(Отбор, ИмяТаблицы + ".Расход" + ИмяПоказателя + "ОстальныеМесяцы",0,ВидСравненияКомпоновкиДанных.НеРавно);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(Отбор, ИмяТаблицы + ".ПрибыльУбыток" + ИмяПоказателя + "ОстальныеМесяцы",0,ВидСравненияКомпоновкиДанных.НеРавно);
			
			//Показатели текущего года
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаДоходыГод, ИмяТаблицы +  ".Доход" + ИмяПоказателя + "Год");
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаРасходыГод, ИмяТаблицы +  ".Расход" + ИмяПоказателя + "Год");
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаПрибыльУбытокГод, ИмяТаблицы +  ".ПрибыльУбыток" + ИмяПоказателя + "Год");
			
			//Строка показывается если хотя бы одна из ВЫВОДИМЫХ сумм не равна нулю
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(Отбор, ИмяТаблицы + ".Доход" + ИмяПоказателя + "Год",0,ВидСравненияКомпоновкиДанных.НеРавно);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(Отбор, ИмяТаблицы + ".Расход" + ИмяПоказателя + "Год",0,ВидСравненияКомпоновкиДанных.НеРавно);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(Отбор, ИмяТаблицы + ".ПрибыльУбыток" + ИмяПоказателя + "Год",0,ВидСравненияКомпоновкиДанных.НеРавно);
			
			//Отбор для всей таблицы (если нет данных по выводимым суммам таблица не показывается)
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборГруппировки, ИмяТаблицы + ".Доход" + ИмяПоказателя + "Месяц",0,ВидСравненияКомпоновкиДанных.НеРавно);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборГруппировки, ИмяТаблицы + ".Расход" + ИмяПоказателя + "Месяц",0,ВидСравненияКомпоновкиДанных.НеРавно);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборГруппировки, ИмяТаблицы + ".ПрибыльУбыток" + ИмяПоказателя + "Месяц",0,ВидСравненияКомпоновкиДанных.НеРавно);
			
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборГруппировки, ИмяТаблицы + ".Доход" + ИмяПоказателя + "ОстальныеМесяцы",0,ВидСравненияКомпоновкиДанных.НеРавно);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборГруппировки, ИмяТаблицы + ".Расход" + ИмяПоказателя + "ОстальныеМесяцы",0,ВидСравненияКомпоновкиДанных.НеРавно);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборГруппировки, ИмяТаблицы + ".ПрибыльУбыток" + ИмяПоказателя + "ОстальныеМесяцы",0,ВидСравненияКомпоновкиДанных.НеРавно);
			
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборГруппировки, ИмяТаблицы + ".Доход" + ИмяПоказателя + "Год",0,ВидСравненияКомпоновкиДанных.НеРавно);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборГруппировки, ИмяТаблицы + ".Расход" + ИмяПоказателя + "Год",0,ВидСравненияКомпоновкиДанных.НеРавно);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборГруппировки, ИмяТаблицы + ".ПрибыльУбыток" + ИмяПоказателя + "Год",0,ВидСравненияКомпоновкиДанных.НеРавно);
			
			// Отбор для итоговых таблиц, если есть только один вид деятельности то не нужно выводить таблицу с итогом по всем видам деятельности
			Если СтрНайти(ИмяТаблицы,"Всего") <> 0 Тогда
				
				ОтборГруппировкиВсего.Использование = Истина;
				
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборГруппировкиВсего, //ЭлементСтруктуры 
						ИмяТаблицы + ".Доход" + ИмяПоказателя + "Месяц", //Поле
						Новый ПолеКомпоновкиДанных("ОсновнаяДеятельность" + ?(СтрНайти(ИмяТаблицы,"ЕНВД") <> 0,"ЕНВД","") + ".Доход" + ИмяПоказателя + "Месяц"), //Значение
						ВидСравненияКомпоновкиДанных.НеРавно); // ВидСравнения
				
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборГруппировкиВсего, //ЭлементСтруктуры 
						ИмяТаблицы + ".Расход" + ИмяПоказателя + "Месяц", //Поле
						Новый ПолеКомпоновкиДанных("ОсновнаяДеятельность" + ?(СтрНайти(ИмяТаблицы,"ЕНВД") <> 0,"ЕНВД","") + ".Расход" + ИмяПоказателя + "Месяц"), //Значение
						ВидСравненияКомпоновкиДанных.НеРавно); // ВидСравнения
				
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборГруппировкиВсего,//ЭлементСтруктуры 
						ИмяТаблицы + ".ПрибыльУбыток" + ИмяПоказателя + "Месяц", //Поле
						Новый ПолеКомпоновкиДанных("ОсновнаяДеятельность" + ?(СтрНайти(ИмяТаблицы,"ЕНВД") <> 0,"ЕНВД","") + ".ПрибыльУбыток" + ИмяПоказателя + "Месяц"), //Значение
						ВидСравненияКомпоновкиДанных.НеРавно); // ВидСравнения
				
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборГруппировкиВсего, //ЭлементСтруктуры  
						ИмяТаблицы + ".Доход" + ИмяПоказателя + "ОстальныеМесяцы", //Поле
						Новый ПолеКомпоновкиДанных( "ОсновнаяДеятельность" + ?(СтрНайти(ИмяТаблицы,"ЕНВД") <> 0,"ЕНВД","") + ".Доход" + ИмяПоказателя + "ОстальныеМесяцы"), //Значение 
						ВидСравненияКомпоновкиДанных.НеРавно); // ВидСравнения
				
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборГруппировкиВсего, //ЭлементСтруктуры  
						ИмяТаблицы + ".Расход" + ИмяПоказателя + "ОстальныеМесяцы", //Поле
						Новый ПолеКомпоновкиДанных("ОсновнаяДеятельность" + ?(СтрНайти(ИмяТаблицы,"ЕНВД") <> 0,"ЕНВД","") + ".Расход" + ИмяПоказателя + "ОстальныеМесяцы"), //Значение 
						ВидСравненияКомпоновкиДанных.НеРавно); // ВидСравнения
				
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборГруппировкиВсего, //ЭлементСтруктуры  
						ИмяТаблицы + ".ПрибыльУбыток" "ОстальныеМесяцы", //Поле
						Новый ПолеКомпоновкиДанных( "ОсновнаяДеятельность" + ?(СтрНайти(ИмяТаблицы,"ЕНВД") <> 0,"ЕНВД","") + ".ПрибыльУбыток" + ИмяПоказателя + "ОстальныеМесяцы"), //Значение 
						ВидСравненияКомпоновкиДанных.НеРавно); // ВидСравнения
				
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборГруппировкиВсего, //ЭлементСтруктуры  
						ИмяТаблицы + ".Доход" + ИмяПоказателя + "Год", //Поле 
						Новый ПолеКомпоновкиДанных("ОсновнаяДеятельность" + ?(СтрНайти(ИмяТаблицы,"ЕНВД") <> 0,"ЕНВД","") + ".Доход" + ИмяПоказателя + "Год"), //Значение 
						ВидСравненияКомпоновкиДанных.НеРавно); // ВидСравнения
				
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборГруппировкиВсего, //ЭлементСтруктуры 
						ИмяТаблицы + ".Расход" + ИмяПоказателя + "Год", //Поле 
						Новый ПолеКомпоновкиДанных("ОсновнаяДеятельность" + ?(СтрНайти(ИмяТаблицы,"ЕНВД") <> 0,"ЕНВД","") + ".Расход" + ИмяПоказателя + "Год"), //Значение 
						ВидСравненияКомпоновкиДанных.НеРавно); // ВидСравнения
				
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборГруппировкиВсего, //ЭлементСтруктуры 
						ИмяТаблицы + ".ПрибыльУбыток" + ИмяПоказателя + "Год", //Поле
						Новый ПолеКомпоновкиДанных("ОсновнаяДеятельность" + ?(СтрНайти(ИмяТаблицы,"ЕНВД") <> 0,"ЕНВД","") + ".ПрибыльУбыток" + ИмяПоказателя + "Год"), //Значение 
						ВидСравненияКомпоновкиДанных.НеРавно); // ВидСравнения
				
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЦикла;
	
	//Налог на прибыль
	    ИмяТаблицы = "НалогНаПрибыль";
		
		Группировка = БухгалтерскиеОтчеты.НайтиПоИмени(КомпоновщикНастроек.Настройки.Структура,"Заголовки." + ИмяТаблицы);
		ОтборГруппировки = Группировка.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
        ОтборГруппировки.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
		Таблица = БухгалтерскиеОтчеты.НайтиПоИмени(Группировка.Структура,ИмяТаблицы);
		
		Если ИспользуютсяОбозначенияПоказателей Тогда
			Колонка = Таблица.Колонки.Добавить();
			Колонка.Имя           = "Показатели";
			Колонка.Использование = Истина;
			ГруппаПоказатели = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ГруппаПоказатели.Использование = Истина;
			ГруппаПоказатели.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаПоказатели,"Показатели.БУ");
		КонецЕсли;
		
		// Колонка "за текущий месяц"
		//
		Колонка = Таблица.Колонки.Добавить();
		Колонка.Имя           = ИмяТаблицы + ".ЗаТекущийМесяц";
		Колонка.Использование = Истина;
		
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Колонка.Выбор,ИмяТаблицы + ".НалогМесяц");
		
		// Колонка "за прошлые месяцы года"
		//
		Колонка = Таблица.Колонки.Добавить();
		Колонка.Имя           = ИмяТаблицы + ".ЗаПрошлыеМесяцы";
		Колонка.Использование = Истина;
		
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Колонка.Выбор,ИмяТаблицы + ".НалогОстальныеМесяцы");
		
		// Колонка "за текущий год"
		//
		Колонка = Таблица.Колонки.Добавить();
		Колонка.Имя           = ИмяТаблицы + ".ЗаГод";
		Колонка.Использование = Истина;
		
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Колонка.Выбор,ИмяТаблицы + ".НалогГод");
		
		//Отбор по всей таблице
		Если ПараметрыОтчета.ПоказательНУ Тогда
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборГруппировки, ИмяТаблицы + ".НалогМесяц",0,ВидСравненияКомпоновкиДанных.НеРавно);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборГруппировки, ИмяТаблицы + ".НалогОстальныеМесяцы",0,ВидСравненияКомпоновкиДанных.НеРавно);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборГруппировки, ИмяТаблицы + ".НалогГод",0,ВидСравненияКомпоновкиДанных.НеРавно);
		КонецЕсли;
		
		//Отбор на строки таблицы
		Группировка = БухгалтерскиеОтчеты.НайтиПоИмени(Таблица.Строки,"Показатель");
		ОтборСтроки = Группировка.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ОтборСтроки.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборСтроки, ИмяТаблицы + ".НалогМесяц",0,ВидСравненияКомпоновкиДанных.НеРавно);
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборСтроки, ИмяТаблицы + ".НалогОстальныеМесяцы",0,ВидСравненияКомпоновкиДанных.НеРавно);
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборСтроки, ИмяТаблицы + ".НалогГод",0,ВидСравненияКомпоновкиДанных.НеРавно);
		
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

Процедура ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	ПараметрыПоиска = БухгалтерскиеОтчеты.ПараметрыПоискаВТелеМакетаКомпоновки();
	ЭлементТела = БухгалтерскиеОтчеты.ПодобратьЭлементыИзТелаМакета(
					МакетКомпоновки, "РасчетНалогаНаПрибыль", ПараметрыПоиска);
	Параметры = МакетКомпоновки.Макеты[ЭлементТела.МакетПодвала.Макет].Параметры;
	Параметры.Удалить(Параметры[0]);
	Параметры.Удалить(Параметры[0]);
	Параметры.Удалить(Параметры[0]);				
	ЭлементТела.Тело.Удалить(ЭлементТела.Тело[1]);

	КоличествоВыведенныхПримечаний = 0;
	Если СправкиРасчеты.ТребуетсяДополнитьПериодОтчетаПримечанием(ПараметрыОтчета) Тогда
		КоличествоВыведенныхПримечаний = КоличествоВыведенныхПримечаний + 1;
	КонецЕсли;
	
	ЭлементТела = БухгалтерскиеОтчеты.ПодобратьЭлементыИзТелаМакета(
					МакетКомпоновки, "ЗаголовокНалогНаПрибыль", ПараметрыПоиска);		
	Если ЭлементТела <> Неопределено Тогда
		
		ЭлементТела = БухгалтерскиеОтчеты.ПодобратьЭлементыИзТелаМакета(
			ЭлементТела, "Показатель", ПараметрыПоиска);
		ЭлементТела.Тело.Удалить(ЭлементТела.Тело[0]);
		ЭлементыМакета = МакетКомпоновки.Макеты[ЭлементТела.МакетПодвала.Макет].Макет[0].Ячейки[0].Элементы;
		ЭлементыМакета[0].Значение = "Налог на прибыль";
		
		Если ПараметрыОтчета.ПоказательНУ Тогда

			ЭлементТела.Тело.Удалить(ЭлементТела.Тело[0]);

		ИначеЕсли Не ПараметрыОтчета.ПоказательВР Тогда

			ЭлементТела.МакетПодвала.Макет = "";
			ЭлементТела.МакетПодвала.МакетРесурсов.Очистить();

		Иначе
			// Добавим примечание *
			КоличествоВыведенныхПримечаний = КоличествоВыведенныхПримечаний + 1;
			СимволыПримечания = СправкиРасчеты.СимволыПримечания(КоличествоВыведенныхПримечаний);
			ЭлементыМакета.Добавить(Тип("ПолеОбластиКомпоновкиДанных")).Значение = СимволыПримечания;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьНаборПоказателей() Экспорт
	
	// См. ПоддерживаемыеНаборыСуммовыхПоказателей
	
	НаборПоказателей = Новый Массив;
	НаборПоказателей.Добавить("БУ");
	НаборПоказателей.Добавить("НУ");
	НаборПоказателей.Добавить("ПР");
	НаборПоказателей.Добавить("ВР");
	
	Возврат НаборПоказателей;
	
КонецФункции
 
Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	
	ВариантыНастроек = ВариантыНастроек();
	Для Каждого Вариант Из ВариантыНастроек Цикл
		ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, Вариант.Имя).Размещение.Вставить(
			Метаданные.Подсистемы.Отчеты.Подсистемы.СправкиРасчеты.Подсистемы.БухгалтерскийИНалоговыйУчет, "");
		ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, Вариант.Имя).Размещение.Вставить(
			Метаданные.Подсистемы.БухгалтерияПредприятияПодсистемы.Подсистемы.ПростойИнтерфейс.Подсистемы.Отчеты.Подсистемы.СправкиРасчеты, "");
	КонецЦикла;	
	
КонецПроцедуры

//Процедура используется подсистемой варианты отчетов
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	ВариантыНастроек = ВариантыНастроек();
	Для Каждого Вариант Из ВариантыНастроек Цикл
		Настройки.ОписаниеВариантов.Вставить(Вариант.Имя,Вариант.Представление);
	КонецЦикла;
	
КонецПроцедуры

Функция ВариантыНастроек() Экспорт
	
	Массив = Новый Массив;
	
	Массив.Добавить(Новый Структура("Имя, Представление","РасчетНалогаНаПрибыль", "Расчет налога на прибыль"));
	
	Возврат Массив;
	
КонецФункции

#КонецЕсли