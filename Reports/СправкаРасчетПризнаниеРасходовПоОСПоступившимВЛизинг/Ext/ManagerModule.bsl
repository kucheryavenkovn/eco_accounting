#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет поддерживаемый набор суммовых показателей справки-расчета.
// См. соответствующие методы модулей подсистемы СправкиРасчеты.
// Справка-расчет должна поддерживать хотя бы один набор.
// Если поддерживается несколько наборов, то конкретный набор выбирается в форме
// и передается через свойство отчета НаборПоказателейОтчета.
//
// См. также ПолучитьНаборПоказателей
// 
// Возвращаемое значение:
//  Массив - номера наборов суммовых показателей.
//
Функция ПоддерживаемыеНаборыСуммовыхПоказателей() Экспорт
	
	Возврат СправкиРасчетыКлиентСервер.ВсеНаборыСуммовыхПоказателей();
	
КонецФункции

#КонецОбласти

#Область ОбработчикиБухгалтерскиеОтчеты

Функция ПолучитьТекстЗаголовка(Контекст) Экспорт 
	
	Возврат СправкиРасчеты.ЗаголовокОтчета(Контекст);
	
КонецФункции

Процедура ПриВыводеЗаголовка(Контекст, КомпоновщикНастроек, Результат) Экспорт
	
	СправкиРасчеты.ВывестиШапкуОтчета(Результат, Контекст, Истина);
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(Контекст, Результат) Экспорт
	
	СправкиРасчеты.ОформитьРезультатОтчета(Результат, Контекст);
	
	Результат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
КонецПроцедуры

#КонецОбласти

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	Результат.Вставить("ИспользоватьПослеВыводаРезультата",  Истина);
	Результат.Вставить("ИспользоватьДанныеРасшифровки",      Ложь);
	Результат.Вставить("ИспользоватьПриВыводеЗаголовка",     Истина);
	
	Возврат Результат;
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", ПараметрыОтчета.НачалоПериода);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	КонецЕсли;
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,"ПоддержкаПБУ18",УчетнаяПолитика.ПоддержкаПБУ18(ПараметрыОтчета.Организация, ПараметрыОтчета.КонецПериода));
	
	Таблица = КомпоновщикНастроек.Настройки.Структура;
	
	МассивПоказателей 	= Новый Массив;
	
	ОсновнойПоказатель = ПараметрыОтчета.СоставНабораПоказателей[0];
	ИспользуютсяОбозначенияПоказателей = (ПараметрыОтчета.СоставНабораПоказателей.Количество() > 1);
		
	Если ОсновнойПоказатель = "НУ" Тогда
		СуффиксГруппировки           = "НУ";
		РасширенныйСоставПоказателей = Истина; // см. макеты заголовков
	ИначеЕсли ИспользуютсяОбозначенияПоказателей Тогда
		СуффиксГруппировки           = "СРазницами";
		РасширенныйСоставПоказателей = Истина;
	Иначе
		СуффиксГруппировки = "БУ";
		РасширенныйСоставПоказателей = Ложь;
	КонецЕсли;
	
	ГруппировкаКонтрагент         = БухгалтерскиеОтчеты.НайтиПоИмени(Таблица, "ГруппировкаКонтрагент"         + СуффиксГруппировки);
	ГруппировкаДоговорКонтрагента = БухгалтерскиеОтчеты.НайтиПоИмени(Таблица, "ГруппировкаДоговорКонтрагента" + СуффиксГруппировки);
	ГруппировкаПериодРасчета      = БухгалтерскиеОтчеты.НайтиПоИмени(Таблица, "ГруппировкаПериодРасчета"      + СуффиксГруппировки);
	
	ГруппировкаКонтрагент.Использование         = Истина;
	ГруппировкаДоговорКонтрагента.Использование = Истина;
	ГруппировкаПериодРасчета.Использование      = Истина;
	
	// Установим отбор, чтобы не показывать строки с только нулевыми суммами
	
	МассивСумм = Новый Массив;
	МассивСумм.Добавить("Амортизация");
	МассивСумм.Добавить("СуммаПлатежа");
	МассивСумм.Добавить("КорректировкаАмортизации");
	МассивСумм.Добавить("ИтогоАмортизация");
	МассивСумм.Добавить("ВсегоРасходыПоАренде");

	ОтборГруппировки = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппировки.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ОтборГруппировки.РежимОтображения =  РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	МассивСумм.Добавить("ЗадолженностьНачальныйОстаток");
	МассивСумм.Добавить("ЗадолженностьПриход");
	МассивСумм.Добавить("ЗадолженностьПриходНДС");
	МассивСумм.Добавить("ЗадолженностьРасход");
	МассивСумм.Добавить("ЗадолженностьРасходНДС");
	МассивСумм.Добавить("ЗадолженностьКонечныйОстаток");
	Для Каждого ИмяСумм Из МассивСумм Цикл
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборГруппировки, ИмяСумм,0,ВидСравненияКомпоновкиДанных.НеРавно);
	КонецЦикла;

	МассивСумм.Очистить();
	МассивСумм.Добавить("Амортизация");
	МассивСумм.Добавить("СуммаПлатежа");
	МассивСумм.Добавить("КорректировкаАмортизации");
	МассивСумм.Добавить("ИтогоАмортизация");
	МассивСумм.Добавить("ВсегоРасходыПоАренде");

	Для Каждого ИмяСумм Из МассивСумм Цикл
		Для Каждого ИмяПоказателя Из ПараметрыОтчета.СоставНабораПоказателей Цикл
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборГруппировки, ИмяСумм + ИмяПоказателя,0,ВидСравненияКомпоновкиДанных.НеРавно);
		КонецЦикла;
	КонецЦикла;
	
	МассивГруппировок = Новый Массив;
	МассивГруппировок.Добавить(ГруппировкаКонтрагент);
	МассивГруппировок.Добавить(ГруппировкаДоговорКонтрагента);
	МассивГруппировок.Добавить(ГруппировкаПериодРасчета);
	
	Для Каждого Группировка Из МассивГруппировок Цикл
	
		Группа = Группировка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
		Если Группировка = ГруппировкаКонтрагент Тогда
	 		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"Контрагент");
	 	ИначеЕсли Группировка = ГруппировкаДоговорКонтрагента Тогда
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ДоговорКонтрагента");
		ИначеЕсли Группировка = ГруппировкаПериодРасчета Тогда
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ПериодРасчета");
		КонецЕсли;
		
		Группа = Группировка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ЗадолженностьНачальныйОстаток");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ЗадолженностьПриход");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ЗадолженностьПриходНДС");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ЗадолженностьРасход");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ЗадолженностьРасходНДС");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ЗадолженностьКонечныйОстаток");

		// Поля колонок, начиная с седьмой, добавляются в особом порядке, так как они могут быть размещены вертикально,
		// если используются обозначения показателей.
		
		ОсобыеКолонки = Новый Массив;
		Если ИспользуютсяОбозначенияПоказателей Тогда
			ОсобыеКолонки.Добавить("Показатели.");              // 7а. обозначения показателей
		КонецЕсли;
		ОсобыеКолонки.Добавить("Амортизация");                  // 8. Расходы по амортизациии ("Сумма амортизации")
		Если РасширенныйСоставПоказателей Тогда
			ОсобыеКолонки.Добавить("СуммаПлатежа");             // 9.  Признаны расходы по арендным платежам в налоговом учете
			ОсобыеКолонки.Добавить("КорректировкаАмортизации"); // 10. Корректировка суммы амортизации в налоговом учете
			ОсобыеКолонки.Добавить("ИтогоАмортизация");         // 11. Итого сумма амортизации
		КонецЕсли;
		ОсобыеКолонки.Добавить("ВсегоРасходыПоАренде");         // 12. Всего расходы по аренде. В сокращенном варианте - 9.  Признаны расходы по аренде
		
		Для Каждого ПрефиксПоля Из ОсобыеКолонки Цикл
			
			Группа = Группировка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
			
			Если ИспользуютсяОбозначенияПоказателей Тогда
				// Расположим вертикально
				ПодГруппа = Группа.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				ПодГруппа.Расположение = РасположениеПоляКомпоновкиДанных.Вертикально;
				
				Группа = ПодГруппа;
				
			КонецЕсли;
			
			// Собственно показатели
			Для Каждого ИмяПоказателя Из ПараметрыОтчета.СоставНабораПоказателей Цикл
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, ПрефиксПоля + ИмяПоказателя);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла; // По группировкам
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

Функция ПолучитьНаборПоказателей() Экспорт
	
	// См. ПоддерживаемыеНаборыСуммовыхПоказателей
	
	Возврат СправкиРасчетыКлиентСервер.ВсеПоказателиОтчета();
	
КонецФункции

Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	
	ВариантыНастроек = ВариантыНастроек();
	Для Каждого Вариант Из ВариантыНастроек Цикл
		ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, Вариант.Имя).Размещение.Вставить(
			Метаданные.Подсистемы.Отчеты.Подсистемы.СправкиРасчеты.Подсистемы.БухгалтерскийУчет, "");
		ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, Вариант.Имя).Размещение.Вставить(
			Метаданные.Подсистемы.Отчеты.Подсистемы.СправкиРасчеты.Подсистемы.БухгалтерскийИНалоговыйУчет, "");
		ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, Вариант.Имя).Размещение.Вставить(
			Метаданные.Подсистемы.БухгалтерияПредприятияПодсистемы.Подсистемы.ПростойИнтерфейс.Подсистемы.Отчеты.Подсистемы.СправкиРасчеты, "");
	КонецЦикла;
	
КонецПроцедуры

//Процедура используется подсистемой варианты отчетов
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	ВариантыНастроек = ВариантыНастроек();
	Для Каждого Вариант Из ВариантыНастроек Цикл
		Настройки.ОписаниеВариантов.Вставить(Вариант.Имя,Вариант.Представление);
	КонецЦикла;	
	
КонецПроцедуры

Функция ВариантыНастроек() Экспорт
	
	Массив = Новый Массив;
	
	Массив.Добавить(Новый Структура("Имя, Представление","ПризнаниеРасходовПоОСПоступившимВЛизинг", "Признание расходов по ОС, поступившим в лизинг"));
	
	Возврат Массив;
	
КонецФункции

#КонецЕсли