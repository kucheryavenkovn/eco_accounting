
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ОБЪЕКТА

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//ПараметрПериод = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	//ИДПараметра = КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьИдентификаторПоОбъекту(ПараметрПериод);
	//ЗначениеПараметра = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИДПараметра);
	//Если ЗначениеПараметра <> Неопределено И ЗначениеПараметра.Использование Тогда
	//	Период = ?(ЗначениеЗаполнено(ЗначениеПараметра.Значение), ЗначениеПараметра.Значение.Дата, Дата(1, 1, 1));
	//Иначе
	//	Период = Дата(1, 1, 1);
	//КонецЕсли;
	
	Период = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Период");
	Периодичность = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Периодичность");
	
	ДокументРезультат.Очистить();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	ВнешниеНаборыДанных = ПолучитьВнешниеНаборыДанных(Период.Значение.ДатаНачала, Период.Значение.ДатаОкончания, Периодичность.Значение);
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	ПроцессорВывода.НачатьВывод();
	ЭлементРезультата = ПроцессорКомпоновки.Следующий();
	Пока ЭлементРезультата <> Неопределено Цикл
		ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
		ЭлементРезультата = ПроцессорКомпоновки.Следующий();
	КонецЦикла;
	ПроцессорВывода.ЗакончитьВывод();
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции

//
// Копирует отбор компоновки данных добавлением к существующим
//
Процедура СкопироватьОтборКомпоновкиДанных(ГруппаПриемник, ГруппаИсточник) 
	
	КоллекцияИсточник = ГруппаИсточник.Элементы;
	КоллекцияПриемник = ГруппаПриемник.Элементы;
	Для Каждого ЭлементИсточник Из КоллекцияИсточник Цикл
		
		Если Лев(Строка(ЭлементИсточник.ЛевоеЗначение), 10) = "Контрагент"
			ИЛИ Лев(Строка(ЭлементИсточник.ЛевоеЗначение), 7) = "Договор"
			ИЛИ Лев(Строка(ЭлементИсточник.ЛевоеЗначение), 11) = "Организация"
			ИЛИ ТипЗнч(ЭлементИсточник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ЭлементПриемник = КоллекцияПриемник.Добавить(ТипЗнч(ЭлементИсточник));
			ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
			
			// В некоторых элементах коллекции необходимо заполнить другие коллекции
			Если ТипЗнч(ЭлементИсточник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				СкопироватьОтборКомпоновкиДанных(ЭлементПриемник, ЭлементИсточник);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьВнешниеНаборыДанных(НачалоПериода, КонецПериода, Периодичность)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДанных.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаДанных.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаДанных.Колонки.Добавить("ПериодАренды", Новый ОписаниеТипов("Дата", , ,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаДанных.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаДанных.Колонки.Добавить("ОбъектАренды", Новый ОписаниеТипов("СправочникСсылка.АР_ОбъектыАренды"));
	ТаблицаДанных.Колонки.Добавить("СпособНачисления", Новый ОписаниеТипов("СправочникСсылка.АР_СпособыНачисленияАренднойПлаты"));
	ТаблицаДанных.Колонки.Добавить("ВалютаДоговора", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаДанных.Колонки.Добавить("Документ", Новый ОписаниеТипов("ДокументСсылка.АР_НачислениеАренднойПлаты"));
	ТаблицаДанных.Колонки.Добавить("ДанныеНеСовпадают", Новый ОписаниеТипов("Булево"));
	
	ТаблицаДанных.Колонки.Добавить("СуммаПоАктам", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТаблицаДанных.Колонки.Добавить("СуммаПоУсловиямДоговора", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТаблицаДанных.Колонки.Добавить("Отклонение", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
		 
	СхемаКомпоновкиДанныхОтбора = ПолучитьМакет("НастройкаОтбора");
	КомпоновщикНастроекОтбора = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекОтбора.Инициализировать(
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанныхОтбора)
	);
	
	КомпоновщикНастроекОтбора.ЗагрузитьНастройки(СхемаКомпоновкиДанныхОтбора.НастройкиПоУмолчанию);
	НастройкиКомпоновкиОтбора = КомпоновщикНастроекОтбора.ПолучитьНастройки();
	НастройкиКомпоновки = КомпоновщикНастроек.ПолучитьНастройки();
	СкопироватьОтборКомпоновкиДанных(НастройкиКомпоновкиОтбора.Отбор, НастройкиКомпоновки.Отбор);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ТаблицаЗначений = Новый ТаблицаЗначений;
	МассивДоговоров = Новый Массив;
	Попытка 
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанныхОтбора, НастройкиКомпоновкиОтбора, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
				
		ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		
		МассивДоговоров = ТаблицаЗначений.ВыгрузитьКолонку("ДоговорКонтрагента");
	Исключение
		//Возврат ;
	КонецПопытки;
	
	// Данные по условиям договоров
	ТаблицаДат = РазбитьПериод(НачалоПериода, КонецПериода, Периодичность);
	
	Для каждого Договор Из МассивДоговоров Цикл
		ДокСчет = Документы.АР_СчетНаАренду.СоздатьДокумент();
		ДокСчет.Дата = ТекущаяДата();
		ДокСчет.ДоговорКонтрагента = Договор;
		ДокСчет.Организация = ДокСчет.ДоговорКонтрагента.Организация;
		ДокСчет.Контрагент = ДокСчет.ДоговорКонтрагента.Владелец;
		ДокСчет.ВалютаДокумента = ДокСчет.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		
		СтруктураКурса = АР_ПроцедурыНачисления.ПолучитьКурсВалюты(ДокСчет.ВалютаДокумента, ДокСчет.Дата, ДокСчет.ДоговорКонтрагента);
        ДокСчет.КурсВзаиморасчетов = СтруктураКурса.Курс;
		ДокСчет.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
		
		ДокСчет.СуммаВключаетНДС = Истина;
		
		Для Каждого Стр Из ТаблицаДат Цикл
			
			ДокСчет.ДатаКурса = Стр.ОкончаниеПериода;
			
			ДокСчет.Состав.Очистить();
			
			ДокСчет.НачалоПериода = Стр.НачалоПериода;
			ДокСчет.ОкончаниеПериода = Стр.ОкончаниеПериода;
			
			ДокСчет.ЗаполнитьСтроки(Истина, Ложь);
			
			Для каждого СтрокаТЧ Из ДокСчет.Состав Цикл
				НоваяСтрока = ТаблицаДанных.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДокСчет);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
				НоваяСтрока.ОбъектАренды = СтрокаТЧ.ОбъектАренды;
				НоваяСтрока.СпособНачисления = СтрокаТЧ.СпособНачисления;
				НоваяСтрока.ВалютаДоговора = ДокСчет.ВалютаДокумента;
				Сумма = СтрокаТЧ.Сумма + ?(ДокСчет.СуммаВключаетНДС, 0, СтрокаТЧ.СуммаНДС);
				НоваяСтрока.СуммаПоУсловиямДоговора = Сумма;
				НоваяСтрока.Отклонение = Сумма;
				НоваяСтрока.СуммаПоАктам = 0;
				НоваяСтрока.ПериодАренды = Стр.НачалоПериода;
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
	// Фактические данные
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеПоАктам.Ссылка КАК Ссылка,
	|	ДанныеПоАктам.Ссылка.НачалоПериода КАК НачалоПериода,
	|	ДанныеПоАктам.ОбъектАренды КАК ОбъектАренды,
	|	ДанныеПоАктам.Номенклатура КАК Номенклатура,
	|	ДанныеПоАктам.СпособНачисления КАК СпособНачисления,
	|	ДанныеПоАктам.ПериодАренды КАК ПериодАренды,
	|	ДанныеПоАктам.Сумма КАК Сумма,
	|	ДанныеПоАктам.СуммаНДС КАК СуммаНДС
	|ПОМЕСТИТЬ ВР_ДанныеПоАктам
	|ИЗ
	|	Документ.АР_НачислениеАренднойПлаты.Состав КАК ДанныеПоАктам
	|ГДЕ
	|	ДанныеПоАктам.Ссылка.ДоговорКонтрагента В(&МассивДоговоров)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПоАктам.Ссылка.Организация КАК Организация,
	|	ДанныеПоАктам.Ссылка.Контрагент КАК Контрагент,
	|	ДанныеПоАктам.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДанныеПоАктам.ОбъектАренды КАК ОбъектАренды,
	|	ДанныеПоАктам.Номенклатура КАК Номенклатура,
	|	ДанныеПоАктам.СпособНачисления КАК СпособНачисления,
	|	ВЫБОР
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|			ТОГДА НАЧАЛОПЕРИОДА(ДанныеПоАктам.НачалоПериода, ГОД)
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|			ТОГДА НАЧАЛОПЕРИОДА(ДанныеПоАктам.НачалоПериода, ПОЛУГОДИЕ)
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|			ТОГДА НАЧАЛОПЕРИОДА(ДанныеПоАктам.НачалоПериода, КВАРТАЛ)
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|			ТОГДА НАЧАЛОПЕРИОДА(ДанныеПоАктам.НачалоПериода, МЕСЯЦ)
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			ТОГДА НАЧАЛОПЕРИОДА(ДанныеПоАктам.НачалоПериода, НЕДЕЛЯ)
	|		ИНАЧЕ ДанныеПоАктам.НачалоПериода
	|	КОНЕЦ КАК ПериодАренды,
	|	ДанныеПоАктам.Сумма + ВЫБОР
	|		КОГДА ДанныеПоАктам.Ссылка.СуммаВключаетНДС
	|			ТОГДА 0
	|		ИНАЧЕ ДанныеПоАктам.СуммаНДС
	|	КОНЕЦ КАК СуммаПоАктам,
	|	0 КАК СуммаПоУсловиямДоговора,
	|	-ДанныеПоАктам.Сумма - ВЫБОР
	|		КОГДА ДанныеПоАктам.Ссылка.СуммаВключаетНДС
	|			ТОГДА 0
	|		ИНАЧЕ ДанныеПоАктам.СуммаНДС
	|	КОНЕЦ КАК Отклонение,
	|	ДанныеПоАктам.Ссылка КАК Документ,
	|	ДанныеПоАктам.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаДоговора
	|ИЗ
	|	ВР_ДанныеПоАктам КАК ДанныеПоАктам
	|ГДЕ
	|	ДанныеПоАктам.Ссылка.Проведен
	|	И ДанныеПоАктам.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ДанныеПоАктам.Номенклатура.АР_ПостояннаяЧастьОплаты";
	
	Запрос.УстановитьПараметр("МассивДоговоров", МассивДоговоров);
	Запрос.УстановитьПараметр("Периодичность", Периодичность);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
	ТаблицаДанных.Свернуть("Организация, Контрагент, ДоговорКонтрагента, ПериодАренды, Номенклатура, ОбъектАренды, СпособНачисления, ВалютаДоговора, Документ, ДанныеНеСовпадают", "СуммаПоАктам, СуммаПоУсловиямДоговора, Отклонение");
	
	ТаблицаОтклонений = ТаблицаДанных.Скопировать();
	ТаблицаОтклонений.Свернуть("ДоговорКонтрагента, ПериодАренды, Номенклатура, ОбъектАренды", "Отклонение");
	Для каждого СтрокаОтклонение Из ТаблицаОтклонений Цикл
		Если СтрокаОтклонение.Отклонение <> 0 Тогда
			СтруктураОтбора = Новый Структура("ДоговорКонтрагента, ПериодАренды, Номенклатура, ОбъектАренды");
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаОтклонение);
			СтрокиТаблицы = ТаблицаДанных.НайтиСтроки(СтруктураОтбора);
			Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
				СтрокаТаблицы.ДанныеНеСовпадают = Истина;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
		
	Возврат Новый Структура("ТаблицаДанных", ТаблицаДанных);
	
КонецФункции

Функция РазбитьПериод(НачалоПериода, ОкончаниеПериода, Периодичность)
	
	ТаблицаДат = Новый ТаблицаЗначений;
	ТаблицаДат.Колонки.Добавить("НачалоПериода");
	ТаблицаДат.Колонки.Добавить("ОкончаниеПериода");
	
	День = 60*60*24;
	
	ОчереднаяДата = НачалоПериода;
	
	Пока ОчереднаяДата <= ОкончаниеПериода Цикл
		
		Стр = ТаблицаДат.Добавить();
		Стр.НачалоПериода = ОчереднаяДата;
		Стр.ОкончаниеПериода = Мин(АР_ПроцедурыНачисления.КонецПериода(ОчереднаяДата, Периодичность), ОкончаниеПериода);
		
		ОчереднаяДата = КонецДня(Стр.ОкончаниеПериода) + 1
	КонецЦикла;
	
	Возврат ТаблицаДат;
	
КонецФункции

#КонецОбласти

#КонецЕсли
