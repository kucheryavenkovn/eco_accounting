#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает набор параметров, которые необходимо сохранять в рассылке отчетов.
// Значения параметров используются при формировании отчета в рассылке.
//
// Возвращаемое значение:
//   Структура - структура настроек, сохраняемых в рассылке с неинициализированными значениями.
//
Функция НастройкиОтчетаСохраняемыеВРассылке() Экспорт
	
	КоллекцияНастроек = Новый Структура;
	КоллекцияНастроек.Вставить("Организация"                      , Справочники.Организации.ПустаяСсылка());
	КоллекцияНастроек.Вставить("ВключатьОбособленныеПодразделения", Ложь);
	КоллекцияНастроек.Вставить("РазмещениеДополнительныхПолей"    , 0);
	КоллекцияНастроек.Вставить("Группировка"                      , Неопределено);
	КоллекцияНастроек.Вставить("ДополнительныеПоля"               , Неопределено);
	КоллекцияНастроек.Вставить("ВыводитьЗаголовок"                , Ложь);
	КоллекцияНастроек.Вставить("ВыводитьПодвал"                   , Ложь);
	КоллекцияНастроек.Вставить("МакетОформления"                  , Неопределено);
	КоллекцияНастроек.Вставить("НастройкиКомпоновкиДанных"        , Неопределено);
	
	Возврат КоллекцияНастроек;
	
КонецФункции

// Настройки размещения в панели отчетов.
//
// Параметры:
//   Настройки - ТаблицаЗначений - см. ВариантыОтчетов.КоллекцияПредопределенныхВариантовОтчетов
//   НастройкиОтчета - СтрокаДереваЗначений - Настройки этого отчета,
//       уже сформированные при помощи функции ВариантыОтчетов.ОписаниеОтчета() и готовые к изменению
//
Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	
	ВариантыОтчетов.ОписаниеВарианта(
		Настройки, ОписаниеОтчета, "РасчетыСПокупателямиИПоставщиками").Размещение.Вставить(
		Метаданные.Подсистемы.Руководителю.Подсистемы.ОбщиеПоказатели, "");
	
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	
КонецПроцедуры

// Возвращает коллекцию вариантов настроек отчета
//
Функция ВариантыНастроек() Экспорт
	
	Массив = Новый Массив;
	
	Массив.Добавить(Новый Структура(
		"Имя, Представление", "РасчетыСПокупателямиИПоставщиками", НСтр("ru = 'Расчеты с покупателями и поставщиками'")));
	
	Возврат Массив;
	
КонецФункции

// Возвращает структуру параметров, наличие которых требуется для успешного формирования отчета.
//
// Возвращаемое значение:
//   Структура - структура параметров для формирования отчета.
//
Функция ПустыеПараметрыКомпоновкиОтчета() Экспорт
	
	// Часть параметров компоновки отчета используется так же и в рассылке отчета.
	ПараметрыОтчета = НастройкиОтчетаСохраняемыеВРассылке();
	
	// Дополним параметрами, влияющими на формирование отчета.
	ПараметрыОтчета.Вставить("ПериодОтчета"         , Неопределено);
	ПараметрыОтчета.Вставить("Период"               , Дата(1,1,1));
	ПараметрыОтчета.Вставить("РежимРасшифровки"     , Ложь);
	ПараметрыОтчета.Вставить("ДанныеРасшифровки"    , Неопределено);
	ПараметрыОтчета.Вставить("СхемаКомпоновкиДанных", Неопределено);
	ПараметрыОтчета.Вставить("ИдентификаторОтчета"  , "");
	
	Возврат ПараметрыОтчета;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьВнешниеНаборыДанных", Ложь);
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	Результат.Вставить("ИспользоватьПослеКомпоновкиМакета", Ложь);
	Результат.Вставить("ИспользоватьПослеВыводаРезультата", Истина);
	Результат.Вставить("ИспользоватьДанныеРасшифровки", Истина);
	Результат.Вставить("ИспользоватьПривилегированныйРежим", Истина);
	Результат.Вставить("ИспользоватьРасширенныеПараметрыРасшифровки", Истина);

	Возврат Результат;

КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета) Экспорт 
	
	Возврат СтрШаблон(НСтр("ru = 'Расчеты с покупателями и поставщиками на %1'"),
		Формат(ПараметрыОтчета.Период, "ДЛФ=D"));
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
//
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	СчетаУчетаРасчетовПокупателей = БухгалтерскиеОтчеты.СчетаУчетаРасчетовПокупателей();
	
	ПредопределенныеСчетаАвансов = Новый Массив;
	ПредопределенныеСчетаАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным); // 62.02
	ПредопределенныеСчетаАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал); // 62.22
	ПредопределенныеСчетаАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ); // 62.32
	ПредопределенныеСчетаАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным); // 60.02
	ПредопределенныеСчетаАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымВал); // 60.22
	ПредопределенныеСчетаАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымУЕ); // 60.32
	
	СчетаАвансов = БухгалтерскийУчет.СформироватьМассивСубсчетов(ПредопределенныеСчетаАвансов);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,
		"СчетаПокупателейСДокументомРасчетов", СчетаУчетаРасчетовПокупателей.СчетаСДокументомРасчетов);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,
		"СчетаПокупателейБезДокументаРасчетов", СчетаУчетаРасчетовПокупателей.СчетаБезДокументаРасчетов);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СчетаАвансов", СчетаАвансов);
	
	СчетаУчетаРасчетовПоставщиков = БухгалтерскиеОтчеты.СчетаУчетаРасчетовПоставщиков();
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,
		"СчетаПоставщиковСДокументомРасчетов", СчетаУчетаРасчетовПоставщиков.СчетаСДокументомРасчетов);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,
		"СчетаПоставщиковБезДокументаРасчетов", СчетаУчетаРасчетовПоставщиков.СчетаБезДокументаРасчетов);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек, "ВидыДоговоровПокупателей", БухгалтерскиеОтчеты.ВидыДоговоровПокупателей());
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек, "ВидыДоговоровПоставщиков", БухгалтерскиеОтчеты.ВидыДоговоровПоставщиков());
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек, "СтандартныйСрокОплатыПокупателей", Константы.СрокОплатыПокупателей.Получить());
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек, "СтандартныйСрокОплатыПоставщикам", Константы.СрокОплатыПоставщикам.Получить());
	
	ИспользуютсяСрокиОплатыОтПокупателей = ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеПлатежейОтПокупателей");
	ИспользуютсяСрокиОплатыПоставщикам = ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеПлатежейПоставщикам");
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек,
		"ИспользоватьПланированиеПлатежейОтПокупателей",
		ИспользуютсяСрокиОплатыОтПокупателей);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек,
		"ИспользоватьПланированиеПлатежейПоставщикам",
		ИспользуютсяСрокиОплатыПоставщикам);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек, "Период", КонецДня(ПараметрыОтчета.Период) + 1);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "РабочаяДата",
		ОбщегоНазначения.ТекущаяДатаПользователя());
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
	
	// Группировка
	БухгалтерскиеОтчетыВызовСервера.ДобавитьГруппировки(ПараметрыОтчета, КомпоновщикНастроек);
	
	Если ВключенаГруппировкаПоДокументу(КомпоновщикНастроек.Настройки.Структура, Ложь)
		И (ИспользуютсяСрокиОплатыОтПокупателей Или ИспользуютсяСрокиОплатыПоставщикам) Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ПланируемаяДатаПлатежа");
	КонецЕсли;
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "МыДолжны");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "НамДолжны");
	
	// Дополнительные данные
	БухгалтерскиеОтчетыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);

	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыРасшифровкиОтчета(Адрес, Расшифровка, ПараметрыРасшифровки) Экспорт
	
	// Инициализируем список мунктов меню
	СписокПунктовМеню = Новый СписокЗначений();
	
	// Заполним соответствие полей которые мы хотим получить из данных расшифровки
	СоответствиеПолей = Новый Соответствие;
	ДанныеОтчета = ПолучитьИзВременногоХранилища(Адрес);
	
	// Укажем что открывать объект сразу не нужно
	ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Ложь);
	
	Если ДанныеОтчета = Неопределено Тогда 
		ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
		Возврат;
	КонецЕсли;
	
	ЗначениеРасшифровки = ДанныеОтчета.ДанныеРасшифровки.Элементы[Расшифровка];
	Если ТипЗнч(ЗначениеРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Для Каждого ПолеРасшифровки ИЗ ЗначениеРасшифровки.ПолучитьПоля() Цикл
			Если ЗначениеЗаполнено(ПолеРасшифровки.Значение) Тогда
				ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Истина);
				ПараметрыРасшифровки.Вставить("Значение", ПолеРасшифровки.Значение);
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Прежде всего интересны данные группировочных полей
	Для Каждого Группировка Из ДанныеОтчета.Объект.Группировка Цикл
		СоответствиеПолей.Вставить(Группировка.Поле);
	КонецЦикла;
	
	// Инициализация пользовательских настроек
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("РежимРасшифровки",  Истина);
	ДополнительныеСвойства.Вставить("Организация",       ДанныеОтчета.Объект.Организация);
	ДополнительныеСвойства.Вставить("Период",            ДанныеОтчета.Объект.Период);
	ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", ДанныеОтчета.Объект.ВыводитьЗаголовок);
	ДополнительныеСвойства.Вставить("ВыводитьПодвал",    ДанныеОтчета.Объект.ВыводитьПодвал);
	ДополнительныеСвойства.Вставить("МакетОформления",   ДанныеОтчета.Объект.МакетОформления);
	ДополнительныеСвойства.Вставить(
		"ВключатьОбособленныеПодразделения", ДанныеОтчета.Объект.ВключатьОбособленныеПодразделения);
	
	// Получаем соответствие полей доступных в расшифровке
	ДанныеРасшифровки = БухгалтерскиеОтчеты.ПолучитьДанныеРасшифровки(
		ДанныеОтчета.ДанныеРасшифровки, СоответствиеПолей, Расшифровка);
	
	Договор = ДанныеРасшифровки.Получить("Договор");
	Если Не ЗначениеЗаполнено(Договор) Тогда
		Документ = ДанныеРасшифровки.Получить("Документ");
		Если ЗначениеЗаполнено(Документ)
			И ОбщегоНазначения.ЕстьРеквизитОбъекта("ДоговорКонтрагента", Документ.Метаданные()) Тогда
			Договор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ДоговорКонтрагента");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Договор) Тогда
		
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "Организация");
		ДополнительныеСвойства.Вставить("Организация", Организация);
		
	КонецЕсли;
	
	ОтборПоЗначениямРасшифровки = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ОтборПоЗначениямРасшифровки.ИдентификаторПользовательскойНастройки = "Отбор";
	
	Для Каждого ЗначениеРасшифровки Из ДанныеРасшифровки Цикл
		
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(
			ОтборПоЗначениямРасшифровки, ЗначениеРасшифровки.Ключ, ЗначениеРасшифровки.Значение);
		
	КонецЦикла;
	
	Группировка = Новый Массив();
	ЕстьГруппировкаПоДокументу = Ложь;
	Для Каждого СтрокаГруппировки Из ДанныеОтчета.Объект.Группировка Цикл
		Если СтрокаГруппировки.Поле = "Контрагент" Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаГруппировки.Использование Тогда
			СтрокаДляРасшифровки = Новый Структура("Использование, Поле, Представление, ТипГруппировки");
			ЗаполнитьЗначенияСвойств(СтрокаДляРасшифровки, СтрокаГруппировки);
			Группировка.Добавить(СтрокаДляРасшифровки);
			
			Если СтрокаГруппировки.Поле = "Документ" Тогда
				
				ЕстьГруппировкаПоДокументу = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьГруппировкаПоДокументу Тогда
		
		СтрокаДляРасшифровки = Новый Структура();
		СтрокаДляРасшифровки.Вставить("Использование",  Истина);
		СтрокаДляРасшифровки.Вставить("Поле",           "Документ");
		СтрокаДляРасшифровки.Вставить("Представление",  "Документ");
		СтрокаДляРасшифровки.Вставить("ТипГруппировки", 0);
		
		Группировка.Добавить(СтрокаДляРасшифровки);
		
	КонецЕсли;
	ДополнительныеСвойства.Вставить("Группировка", Группировка);
	
	НастройкиРасшифровки = Новый Структура();
	
	ВывестиЗадолженностьПокупателей = Ложь;
	ВывестиЗадолженностьПоставщикам = Ложь;
	
	Если ЗначениеЗаполнено(Договор) Тогда
		ВидыДоговоров = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВидДоговора"));
	Иначе
		Контрагент = ДанныеРасшифровки.Получить("Контрагент");
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ВидыДоговоров = ВидыДоговоровКонтрагента(Контрагент, ДополнительныеСвойства.Организация);
		Иначе
			ВидыДоговоров = Новый Массив;
			ВывестиЗадолженностьПокупателей = Истина;
			ВывестиЗадолженностьПоставщикам = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ВидыДоговоровПокупателей = БухгалтерскиеОтчеты.ВидыДоговоровПокупателей();
	ВидыДоговоровПоставщиков = БухгалтерскиеОтчеты.ВидыДоговоровПоставщиков();
	
	Для Каждого ВидДоговора Из ВидыДоговоров Цикл
		Если ВидыДоговоровПокупателей.Найти(ВидДоговора) <> Неопределено Тогда
			ВывестиЗадолженностьПокупателей = Истина;
		ИначеЕсли ВидыДоговоровПоставщиков.Найти(ВидДоговора) <> Неопределено Тогда
			ВывестиЗадолженностьПоставщикам = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ВывестиЗадолженностьПокупателей Тогда
		СписокПунктовМеню.Добавить("ЗадолженностьПокупателей", НСтр("ru = 'Задолженность покупателей'"));
		НастройкиРасшифровки.Вставить("ЗадолженностьПокупателей", ПользовательскиеНастройки);
	КонецЕсли;
	
	Если ВывестиЗадолженностьПоставщикам Тогда
		СписокПунктовМеню.Добавить("ЗадолженностьПоставщикам", НСтр("ru = 'Задолженность поставщикам'"));
		НастройкиРасшифровки.Вставить("ЗадолженностьПоставщикам", ПользовательскиеНастройки);
	КонецЕсли;
	
	ДанныеОтчета.Вставить("НастройкиРасшифровки", НастройкиРасшифровки);
	
	ПоместитьВоВременноеХранилище(ДанныеОтчета, Адрес);
	
	ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВключенаГруппировкаПоДокументу(Группировки, Результат)
	
	Если Результат Тогда
		Возврат Результат;
	КонецЕсли;
	Для Каждого Группировка Из Группировки Цикл
		Если Группировка.ПоляГруппировки.Элементы.Количество() = 0 Тогда
			Возврат Результат;
		КонецЕсли;
		Поле = Строка(Группировка.ПоляГруппировки.Элементы[0].Поле);
		Если НРег(Поле) = "документ" Тогда
			Возврат Группировка.Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных.Включен;
		ИначеЕсли Группировка.Структура.Количество() > 0 Тогда
			Возврат ВключенаГруппировкаПоДокументу(Группировка.Структура, Результат);
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция ВидыДоговоровКонтрагента(Контрагент, Организация)
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса( 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДоговорыКонтрагентов.ВидДоговора КАК ВидДоговора
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Владелец = &Владелец");
	
	Если ЗначениеЗаполнено(Организация) Тогда
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить("ДоговорыКонтрагентов.Организация = &Организация");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос.УстановитьПараметр("Владелец", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВидыДоговоров = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		ВидыДоговоров.Добавить(Выборка.ВидДоговора);
	КонецЦикла;
	
	Возврат ВидыДоговоров;
	
КонецФункции

#КонецОбласти

#КонецЕсли