
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ОБЪЕКТА

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрПериод = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	ИДПараметра = КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьИдентификаторПоОбъекту(ПараметрПериод);
	ЗначениеПараметра = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИДПараметра);
	Если ЗначениеПараметра <> Неопределено И ЗначениеПараметра.Использование Тогда
		Период = ?(ЗначениеЗаполнено(ЗначениеПараметра.Значение), ЗначениеПараметра.Значение.Дата, Дата(1, 1, 1));
	Иначе
		Период = Дата(1, 1, 1);
	КонецЕсли;
	
	ДокументРезультат.Очистить();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	ВнешниеНаборыДанных = ПолучитьВнешниеНаборыДанных();
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	ПроцессорВывода.НачатьВывод();
	ЭлементРезультата = ПроцессорКомпоновки.Следующий();
	Пока ЭлементРезультата <> Неопределено Цикл
		ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
		ЭлементРезультата = ПроцессорКомпоновки.Следующий();
	КонецЦикла;
	ПроцессорВывода.ЗакончитьВывод();
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции

//
// Копирует отбор компоновки данных добавлением к существующим
//
Процедура СкопироватьОтборКомпоновкиДанных(ГруппаПриемник, ГруппаИсточник) 
	
	КоллекцияИсточник = ГруппаИсточник.Элементы;
	КоллекцияПриемник = ГруппаПриемник.Элементы;
	Для Каждого ЭлементИсточник Из КоллекцияИсточник Цикл
		
		Если Лев(Строка(ЭлементИсточник.ЛевоеЗначение), 10) = "Контрагент"
			ИЛИ Лев(Строка(ЭлементИсточник.ЛевоеЗначение), 7) = "Договор"
			ИЛИ Лев(Строка(ЭлементИсточник.ЛевоеЗначение), 11) = "Организация"
			ИЛИ ТипЗнч(ЭлементИсточник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ЭлементПриемник = КоллекцияПриемник.Добавить(ТипЗнч(ЭлементИсточник));
			ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
			
			// В некоторых элементах коллекции необходимо заполнить другие коллекции
			Если ТипЗнч(ЭлементИсточник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				СкопироватьОтборКомпоновкиДанных(ЭлементПриемник, ЭлементИсточник);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьВнешниеНаборыДанных()
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаДанных.Колонки.Добавить("Договор", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаДанных.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	
	ТаблицаДанных.Колонки.Добавить("ПериодАренды", Новый ОписаниеТипов("Дата", , ,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаДанных.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаДанных.Колонки.Добавить("ОбъектАренды", Новый ОписаниеТипов("СправочникСсылка.АР_ОбъектыАренды"));
	ТаблицаДанных.Колонки.Добавить("СчетНаАренду", Новый ОписаниеТипов("ДокументСсылка.АР_СчетНаАренду"));
	ТаблицаДанных.Колонки.Добавить("ДокументРасчетов", Новый ОписаниеТипов("ДокументСсылка.АР_НачислениеАренднойПлаты"));
	ТаблицаДанных.Колонки.Добавить("СрокОплаты", Новый ОписаниеТипов("Дата", , ,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаДанных.Колонки.Добавить("КоличествоДнейПросрочки", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Любой)));
	ТаблицаДанных.Колонки.Добавить("ДолгЗаПериод", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТаблицаДанных.Колонки.Добавить("СтавкаПени", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	 
	СхемаКомпоновкиДанныхОтбора = ПолучитьМакет("НастройкаОтбора");
	КомпоновщикНастроекОтбора = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекОтбора.Инициализировать(
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанныхОтбора)
	);
	
	КомпоновщикНастроекОтбора.ЗагрузитьНастройки(СхемаКомпоновкиДанныхОтбора.НастройкиПоУмолчанию);
	НастройкиКомпоновкиОтбора = КомпоновщикНастроекОтбора.ПолучитьНастройки();
	НастройкиКомпоновки = КомпоновщикНастроек.ПолучитьНастройки();
	СкопироватьОтборКомпоновкиДанных(НастройкиКомпоновкиОтбора.Отбор, НастройкиКомпоновки.Отбор);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ТаблицаЗначений = Новый ТаблицаЗначений;
	МассивДоговоров = Новый Массив;
	Попытка 
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанныхОтбора, НастройкиКомпоновкиОтбора, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
				
		ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		
		МассивДоговоров = ТаблицаЗначений.ВыгрузитьКолонку("Договор");
	Исключение
		//Возврат ;
	КонецПопытки;
	
	ДанныеПоНачислениям = АР_ПроцедурыНачисления.НачислениеПени(МассивДоговоров, ?(ЗначениеЗаполнено(Период), КонецДня(Период), КонецДня(ТекущаяДата())));
	Если Не ДанныеПоНачислениям = Неопределено Тогда
		Для каждого СтрокаТаб Из ДанныеПоНачислениям Цикл
			НоваяСтрока = ТаблицаДанных.Добавить();
			НоваяСтрока.Контрагент = СтрокаТаб.Договор.Владелец;
			НоваяСтрока.Договор = СтрокаТаб.Договор;
			НоваяСтрока.Сумма = СтрокаТаб.Сумма;
			НоваяСтрока.ПериодАренды = СтрокаТаб.ПериодАренды;
			НоваяСтрока.Номенклатура = СтрокаТаб.Номенклатура;
			НоваяСтрока.ОбъектАренды = СтрокаТаб.ОбъектАренды;
			НоваяСтрока.СчетНаАренду = СтрокаТаб.СчетНаАренду;
			НоваяСтрока.ДокументРасчетов = СтрокаТаб.ДокументРасчетов;
			НоваяСтрока.СрокОплаты = СтрокаТаб.СрокОплаты;
			НоваяСтрока.КоличествоДнейПросрочки = СтрокаТаб.КоличествоДнейПросрочки;
			НоваяСтрока.ДолгЗаПериод = СтрокаТаб.ДолгЗаПериод;
			НоваяСтрока.СтавкаПени = СтрокаТаб.СтавкаПени;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Новый Структура("ТаблицаДанных", ТаблицаДанных);
	
КонецФункции

#КонецОбласти

#КонецЕсли
