#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет поддерживаемый набор суммовых показателей справки-расчета.
// См. соответствующие методы модулей подсистемы СправкиРасчеты.
// Справка-расчет должна поддерживать хотя бы один набор.
// Если поддерживается несколько наборов, то конкретный набор выбирается в форме
// и передается через свойство отчета НаборПоказателейОтчета.
//
// См. также ПолучитьНаборПоказателей
// 
// Возвращаемое значение:
//  Массив - номера наборов суммовых показателей.
//
Функция ПоддерживаемыеНаборыСуммовыхПоказателей() Экспорт
	
	Возврат СправкиРасчетыКлиентСервер.ВсеНаборыСуммовыхПоказателей();
	
КонецФункции

#КонецОбласти

#Область ОбработчикиБухгалтерскиеОтчеты

Функция ПолучитьТекстЗаголовка(Контекст) Экспорт 
	
	Возврат СправкиРасчеты.ЗаголовокОтчета(Контекст);
	
КонецФункции

Процедура ПриВыводеЗаголовка(Контекст, КомпоновщикНастроек, Результат) Экспорт
	
	СправкиРасчеты.ВывестиШапкуОтчета(Результат, Контекст, Истина);
	
КонецПроцедуры

Процедура ПослеКомпоновкиМакета(Контекст, МакетКомпоновки) Экспорт
	
	УдалитьИтоги(МакетКомпоновки);
	
	СправкиРасчеты.ДобавитьФиксациюПервойТаблицы(Контекст, МакетКомпоновки);
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(Контекст, Результат) Экспорт
	
	СправкиРасчеты.ОформитьРезультатОтчета(Результат, Контекст);
	
	Результат.ФиксацияСлева = 1;
	
КонецПроцедуры

#КонецОбласти

#Область ТонкаяНастройка

Процедура УдалитьИтоги(МакетКомпоновки)
	
	// Удаление итоговых строк в группировке по контрагентам
	ПараметрыПоиска = БухгалтерскиеОтчеты.ПараметрыПоискаВТелеМакетаКомпоновки();
	ИтогиГруппировки = БухгалтерскиеОтчеты.ПодобратьЭлементыИзТелаМакета(
						МакетКомпоновки, "ГруппировкаКонтрагент", ПараметрыПоиска);
	ИтогиГруппировки.Тело.Удалить(ИтогиГруппировки.Тело[2]);
	
КонецПроцедуры

#КонецОбласти


Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	Результат.Вставить("ИспользоватьПослеКомпоновкиМакета",  Истина);
	Результат.Вставить("ИспользоватьПослеВыводаРезультата",  Истина);
	Результат.Вставить("ИспользоватьДанныеРасшифровки",      Ложь);
	Результат.Вставить("ИспользоватьПриВыводеЗаголовка",     Истина);
	
	Возврат Результат;
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", ПараметрыОтчета.НачалоПериода);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	КонецЕсли;
	
	// Параметр для заголовков колонок - СноскаНалоговыйПериод
	// Текст примечания выводится в СправкиРасчеты.ОформитьРезультатОтчета()
	СноскаНалоговыйПериод = "";
	СправкиРасчеты.ДополнитьПериодОтчетаПримечанием(СноскаНалоговыйПериод, ПараметрыОтчета);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СноскаНалоговыйПериод", СноскаНалоговыйПериод);
	
	ГруппировкаСтатьи = БухгалтерскиеОтчеты.НайтиПоИмени(КомпоновщикНастроек.Настройки.Структура,"ГруппировкаСтатьяЗатрат");
	
	Таблица = БухгалтерскиеОтчеты.НайтиПоИмени(КомпоновщикНастроек.Настройки.Структура,"СомнительныеДолги");
	
	// До 2017 года не выводим колонки, связанные со встречной задолженностью
	// Для этого используем отдельный вариант настроек компоновщика, в котором в имена группировок добавлен суффикс "До2017"
	ВыводитьВстречнуюЗадолженность = (ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) И ПараметрыОтчета.КонецПериода >= '2017-01-01');
	Суффикс = ?(ВыводитьВстречнуюЗадолженность, "", "До2017");
	
	МассивНазванийГруппировок = Новый Массив;
	МассивНазванийГруппировок.Добавить("ГруппировкаКонтрагент"+Суффикс);
	МассивНазванийГруппировок.Добавить("ГруппировкаДоговор"+Суффикс);
	МассивНазванийГруппировок.Добавить("ГруппировкаДокументДолга"+Суффикс);
	МассивНазванийГруппировок.Добавить("ГруппировкаПериод"+Суффикс);
	
	ИспользуютсяОбозначенияПоказателей = (ПараметрыОтчета.СоставНабораПоказателей.Количество() > 1);
	
	МассивГруппировок = Новый Массив;
	
	ОсновнойПоказатель = ПараметрыОтчета.СоставНабораПоказателей[0];
		
	Если ОсновнойПоказатель = "НУ" Тогда
		СуффиксГруппировки = "НУ"; // Выводится расширенный набор показателей налогового учета - см. МассивСумм
	ИначеЕсли ИспользуютсяОбозначенияПоказателей Тогда
		СуффиксГруппировки = "СРазницами";
	Иначе
		СуффиксГруппировки = "БУ";
	КонецЕсли;
	
	Для Каждого ИмяГруппировки Из МассивНазванийГруппировок Цикл
		МассивГруппировок.Добавить(БухгалтерскиеОтчеты.НайтиПоИмени(Таблица.Строки, ИмяГруппировки + СуффиксГруппировки));
	КонецЦикла;
	
	Для Каждого Группировка Из МассивГруппировок Цикл
		Группировка.Использование = Истина;
	КонецЦикла;
	
	МассивСумм = Новый Массив;
	Если ОсновнойПоказатель = "НУ" Тогда
		МассивСумм.Добавить("Доля");   
	КонецЕсли;
	МассивСумм.Добавить("НачисленоРанее");
	Если ОсновнойПоказатель = "НУ" Тогда
		МассивСумм.Добавить("НачисленоСНачалаГода");   
	КонецЕсли;
	МассивСумм.Добавить("Начислено");
	МассивСумм.Добавить("Восстановлено");
	Если ОсновнойПоказатель = "БУ" Тогда
		МассивСумм.Добавить("Присоединено");
	КонецЕсли;	
	МассивСумм.Добавить("Остаток");
	МассивСумм.Добавить("Контроль");
	
	МассивСуммПоДокументу = Новый Массив;
	МассивСуммПоДокументу.Добавить("НачисленоРанее");
	МассивСуммПоДокументу.Добавить("Контроль");
	МассивСуммПоДокументу.Добавить("Остаток");
	
	Номер = 0;
	
	
	// Отчет спроектирован так, что вне зависимости от данных, показывает суммы разниц как постоянные.
	// Если основной вид разниц другой - временные - то подменим имя колонки с разницами.
	ЗаменитьИмяПоказателяРазниц = Ложь;
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) И ЗначениеЗаполнено(ПараметрыОтчета.Организация) Тогда
		
		ОсновнойВидРазниц = НалогНаПрибыльБухгалтерскийУчет.ОсновнойВидРазниц(
			ПараметрыОтчета.НачалоПериода,
			ПараметрыОтчета.Организация);
			
		Если ОсновнойВидРазниц = Перечисления.ВидыРазницПБУ18.ВР Тогда
			ЗаменитьИмяПоказателяРазниц = Истина;
		КонецЕсли;
			
	КонецЕсли;
	
	Для Каждого Группировка Из МассивГруппировок Цикл
		Группа = Группировка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
		ИмяПоля = СтрЗаменить(МассивНазванийГруппировок[Номер], "Группировка", "");
		ИмяПоля = СтрЗаменить(ИмяПоля, "До2017", "");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, ИмяПоля);
		Если Номер = 2 Тогда
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, "ДатаВозникновенияЗадолженности");	
		КонецЕсли;
		Если Номер = 3 Тогда
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, "СрокЗадолженности");	
		КонецЕсли;
		
		Группа = Группировка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, "СуммаДолга" + ?(СтрНайти(Группировка.Имя,"ГруппировкаПериод") = 0,"ПоДокументу",""));	
		
		Если ВыводитьВстречнуюЗадолженность Тогда
			// Выводим суммы встречного долга
			// На уровне документа и выше - на конец периода отчета в пределах суммы просроченного долга контрагента
			// На уровне детальных записей (период) - на указанный период в пределах суммы просроченного долга контрагента
			// Дополнительно выводим сумму сомнительного долга, по которой рассчитан резерв
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, "СуммаВстречногоДолга" + ?(СтрНайти(Группировка.Имя,"ГруппировкаПериод") = 0,"ПоДокументу",""));	
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, "СуммаСомнительногоДолга" + ?(СтрНайти(Группировка.Имя,"ГруппировкаПериод") = 0,"ПоДокументу",""));	
		КонецЕсли; 
		
		Если ИспользуютсяОбозначенияПоказателей Тогда 
			Группа = Группировка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
			ПодГруппа	= Группа.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ПодГруппа.Расположение 		= РасположениеПоляКомпоновкиДанных.Вертикально;
			
			Для Каждого ИмяПоказателя Из ПараметрыОтчета.СоставНабораПоказателей Цикл
				
				Если ЗаменитьИмяПоказателяРазниц И ИмяПоказателя = "ПР" Тогда
					ИмяПоказателя = "ВР";
				КонецЕсли;
				
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, "Показатели." + ИмяПоказателя);
				
			КонецЦикла;
			
		КонецЕсли;	
		
		Для Каждого ИмяСуммы Из МассивСумм Цикл
			Приставка = "";
			Если СтрНайти(Группировка.Имя,"ГруппировкаПериод") = 0 Тогда
				Приставка = ?(МассивСуммПоДокументу.Найти(ИмяСуммы) = Неопределено,"","ПоДокументу");	
			КонецЕсли;	
			
			Группа = Группировка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
			Если ИспользуютсяОбозначенияПоказателей Тогда
				ПодГруппа	= Группа.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				ПодГруппа.Расположение 		= РасположениеПоляКомпоновкиДанных.Вертикально;
				Для Каждого СуффиксНабора Из ПараметрыОтчета.СоставНабораПоказателей Цикл
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, ИмяСуммы  + Приставка + СуффиксНабора);
				КонецЦикла;
			Иначе 
				
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, ИмяСуммы + Приставка + ОсновнойПоказатель);
			КонецЕсли;	
		КонецЦикла;
		
		Номер = Номер + 1;
		
	КонецЦикла;
	
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

Функция ПолучитьНаборПоказателей() Экспорт
	
	// См. ПоддерживаемыеНаборыСуммовыхПоказателей
	
	НаборПоказателей = Новый Массив;
	НаборПоказателей.Добавить("БУ");
	НаборПоказателей.Добавить("НУ");
	НаборПоказателей.Добавить("ПР");
	НаборПоказателей.Добавить("СверкаНУ");
	
	// ВР фактически не поддерживается, так как принято,
	// что в одном периоде разницы могут быть или только временными или только постоянными:
	// в обоих случаях используется показатель ПР, но у него подменяется заголовок
	// См. ЗаменитьИмяПоказателяРазниц в ПередКомпоновкойМакета
	
	Возврат НаборПоказателей;
	
КонецФункции

Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	
	Схема = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Для Каждого Вариант из Схема.ВариантыНастроек Цикл
		ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, Вариант.Имя).Размещение.Вставить(
			Метаданные.Подсистемы.Отчеты.Подсистемы.СправкиРасчеты.Подсистемы.БухгалтерскийУчет, "");
		ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, Вариант.Имя).Размещение.Вставить(
			Метаданные.Подсистемы.Отчеты.Подсистемы.СправкиРасчеты.Подсистемы.БухгалтерскийИНалоговыйУчет, "");
		ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, Вариант.Имя).Размещение.Вставить(
			Метаданные.Подсистемы.БухгалтерияПредприятияПодсистемы.Подсистемы.ПростойИнтерфейс.Подсистемы.Отчеты.Подсистемы.СправкиРасчеты, "");
	КонецЦикла;	
	
КонецПроцедуры

//Процедура используется подсистемой варианты отчетов
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	Схема = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Для Каждого Вариант из Схема.ВариантыНастроек Цикл
		 Настройки.ОписаниеВариантов.Вставить(Вариант.Имя,Вариант.Представление);
	КонецЦикла;	
	
КонецПроцедуры

#КонецЕсли
