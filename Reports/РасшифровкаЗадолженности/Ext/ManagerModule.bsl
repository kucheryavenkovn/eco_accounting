#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьПараметрыРасшифровкиОтчета(Адрес, Расшифровка, ПараметрыРасшифровки) Экспорт
	
	ДанныеОтчета = ПолучитьИзВременногоХранилища(Адрес);
	
	ЗначениеРасшифровки = ДанныеОтчета.ДанныеРасшифровки.Элементы[Расшифровка];
	Если ТипЗнч(ЗначениеРасшифровки) <> Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Возврат;
	КонецЕсли;
	
	ПоляРасшифровки = ЗначениеРасшифровки.ПолучитьПоля();
	Если ПоляРасшифровки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПолеРасшифровки = ПоляРасшифровки[0];
	Если ЗначениеЗаполнено(ПолеРасшифровки.Значение) И Не ПолеРасшифровки.Поле = "СрокЗадолженности" Тогда
		
		ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Истина);
		ПараметрыРасшифровки.Вставить("Значение",  ПолеРасшифровки.Значение);
		
	ИначеЕсли ПолеРасшифровки.Поле <> "ПодтвержденоПоДаннымУчета" Тогда
		
		РодительскиеГруппировки = ЗначенияРодительскихГруппировокРасшифровки(ЗначениеРасшифровки);
		Если РодительскиеГруппировки.Количество() > 0 Тогда
			
			АктИнвентаризации = АктИнвентаризацииРасчетов(РодительскиеГруппировки, ДанныеОтчета.Объект);
			Если ЗначениеЗаполнено(АктИнвентаризации) Тогда
				ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Истина);
				ПараметрыРасшифровки.Вставить("Значение", АктИнвентаризации);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьВнешниеНаборыДанных",             Истина);
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета",          Истина);
	Результат.Вставить("ИспользоватьПослеКомпоновкиМакета",           Ложь);
	Результат.Вставить("ИспользоватьПослеВыводаРезультата",           Истина);
	Результат.Вставить("ИспользоватьДанныеРасшифровки",               Истина);
	Результат.Вставить("ИспользоватьПривилегированныйРежим",          Истина);
	Результат.Вставить("ИспользоватьРасширенныеПараметрыРасшифровки", Истина);

	Возврат Результат;

КонецФункции

// Возвращает заголовок отчета
//
// Параметры:
//   ПараметрыОтчета - Структура - См. ПустыеПараметрыКомпоновкиОтчета()
//
// Возвращаемое значение:
//   Строка
//
Функция ПолучитьТекстЗаголовка(ПараметрыОтчета) Экспорт
	
	ПредставлениеПериода = Формат(ПараметрыОтчета.Период, "ДФ=dd.MM.yyyy; ДП=...");
	
	ВариантыДетализации = ВариантыДетализацииПоСрокам();
	
	Если ПараметрыОтчета.ВариантДетализации = ВариантыДетализации.ПоСрокамПогашения Тогда
		Заголовок = СтрШаблон(НСтр("ru = 'Расшифровка задолженности по срокам погашения на %1'"), ПредставлениеПериода);
	ИначеЕсли ПараметрыОтчета.ВариантДетализации = ВариантыДетализации.ПоСрокамВозникновения Тогда
		Заголовок = СтрШаблон(НСтр("ru = 'Расшифровка задолженности по срокам возникновения на %1'"), ПредставлениеПериода);
	Иначе
		Заголовок = СтрШаблон(НСтр("ru = 'Расшифровка задолженности на %1'"), ПредставлениеПериода);
	КонецЕсли;
	
	Возврат Заголовок;
	
КонецФункции

Функция ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	ИсточникРасчета = Документы.ИнвентаризацияРасчетовСКонтрагентами;
	
	ДанныеОтчета = Новый Структура();
	ДанныеОтчета.Вставить("Организация",   ПараметрыОтчета.Организация);
	ДанныеОтчета.Вставить("Дата",          ПараметрыОтчета.Период);	
	ДанныеОтчета.Вставить("СчетаРасчетов", ВыбранныеСчетаРасчетов(ПараметрыОтчета.СчетаРасчетов));
	
	ПараметрыРасчета = ИсточникРасчета.НовыеПараметрыЗаполнения(ДанныеОтчета);
	ПараметрыРасчета.Организация = ПараметрыОтчета.СписокОрганизаций;
	
	ПоляВыбора = ПоляВыводаРезультатаОтчета(МакетКомпоновки.НаборыДанных.ДанныеОтчета.Поля);
	
	ЗадолженностьПоБУ = ИсточникРасчета.ЗадолженностьПоРасчетам(
		ПараметрыРасчета,
		Перечисления.ВидыЗадолженности.Дебиторская);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
		ИсточникРасчета.ЗадолженностьПоРасчетам(ПараметрыРасчета, Перечисления.ВидыЗадолженности.Кредиторская),
		ЗадолженностьПоБУ);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаОтчета(ПараметрыОтчета.ВариантДетализации, ПараметрыОтчета.Интервалы, ПоляВыбора);
	Запрос.УстановитьПараметр("Период",        НачалоДня(ПараметрыОтчета.Период));
	Запрос.УстановитьПараметр("Организации",   ПараметрыОтчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("СчетаРасчетов", ВыбранныеСчетаРасчетов(ПараметрыОтчета.СчетаРасчетов));
	Запрос.УстановитьПараметр("ДанныеУчета",   ЗадолженностьПоБУ);
	Запрос.УстановитьПараметр("ДоступныеТипыДокументов", ПараметрыОтчета.ДоступныеТипыДокументов);
	Запрос.УстановитьПараметр("ДебиторскаяЗадолженность", Перечисления.ВидыЗадолженности.Дебиторская);
	Запрос.УстановитьПараметр("СчетаФинансовыеВложения", СчетаФинансовыеВложения());
	Запрос.УстановитьПараметр("СчетаФинансовыеВложенияАктив", СчетаФинансовыеВложенияАктив());
	Запрос.УстановитьПараметр("СчетаПрочиеОборотныеАктивы", СчетаПрочиеОборотныеАктивы());
	Запрос.УстановитьПараметр("СчетаОценочныеОбязательства", СчетаОценочныеОбязательства());
	Запрос.УстановитьПараметр("СчетаЗаемныеСредстваДолгосрочные", СчетаЗаемныеСредстваДолгосрочные());
	Запрос.УстановитьПараметр("СчетаЗаемныеСредстваКраткосрочные", СчетаЗаемныеСредстваКраткосрочные());
	Запрос.УстановитьПараметр("СчетаПрочиеОбязательстваДолгосрочные", СчетаПрочиеОбязательстваДолгосрочные());
	Запрос.УстановитьПараметр("СчетаПрочиеОбязательстваКраткосрочные", СчетаПрочиеОбязательстваКраткосрочные());
	Запрос.УстановитьПараметр("СчетаУчетПоНаименованию",
		Документы.ИнвентаризацияРасчетовСКонтрагентами.СчетаРасчетовУчетПоНаименованию());
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ДанныеОтчета", Запрос.Выполнить().Выгрузить());
	
	Если ПараметрыОтчета.КлючВарианта = "РасшифровкаЗадолженностиПоСтрокамБаланса" Тогда
		СтрокиБаланса = ВнешниеНаборыДанных.ДанныеОтчета.Скопировать(, "СтрокаБаланса");
		СтрокиБаланса.Свернуть("СтрокаБаланса");
		
		Для Каждого ТекущаяСтрока Из СтрокиБаланса Цикл
			
			ИмяПараметра = Стршаблон("ВыводитьСтроку%1", ТекущаяСтрока.СтрокаБаланса);
			Параметр = МакетКомпоновки.ЗначенияПараметров.Найти(ИмяПараметра);
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ВнешниеНаборыДанных;
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	УстановитьПоляНабораДанных(ПараметрыОтчета, Схема);
	УстановитьПоляВывода(ПараметрыОтчета, КомпоновщикНастроек);
	
	// Заново инициализируем компоновщик доступными полями, т.к. могли быть добавлены в Схему новые поля для интервалов.
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
	
	УстановитьПараметры(ПараметрыОтчета, Схема, КомпоновщикНастроек);
	ДобавитьГруппировки(ПараметрыОтчета, КомпоновщикНастроек);
	
	Для Каждого ТекущаяГруппировка Из ПараметрыОтчета.ДополнительныеПоля Цикл
		Если СтрНайти(ТекущаяГруппировка.Поле, "ДебиторКредитор") > 0 Тогда
			ТекущаяГруппировка.Поле = СтрЗаменить(ТекущаяГруппировка.Поле, "ДебиторКредитор", "ДебиторКредиторГруппировка");
		КонецЕсли;
	КонецЦикла;
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	ВывестиПредставлениеОтбораСчетаРасчетов(ПараметрыОтчета, Результат);
	ВывестиПримечания(ПараметрыОтчета, Результат);
	
КонецПроцедуры

Функция СчетаРасчетовПоУмолчанию(ВключитьСчетаБезИнвентаризацииВАкте = Ложь) Экспорт
	
	СчетаДетализацииЗадолженности = Документы.ИнвентаризацияРасчетовСКонтрагентами.СчетаДетализацииЗадолженности();
	
	Результат = СчетаДетализацииЗадолженности.СкопироватьКолонки();
	СчетаСИерархией = ВыбранныеСчетаРасчетов(СчетаДетализацииЗадолженности.ВыгрузитьКолонку("СчетРасчетов"));
	
	Для Каждого ТекущийСчет Из СчетаСИерархией Цикл
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.СчетРасчетов = ТекущийСчет;
		НоваяСтрока.УчаствуетВРасчетах = Истина;
	КонецЦикла;
	
	Если ВключитьСчетаБезИнвентаризацииВАкте Тогда
		
		СчетаДополнительно = СчетаБезИнвентаризацииВАкте();
		Для Каждого ТекущийСчет Из СчетаДополнительно Цикл
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.СчетРасчетов = ТекущийСчет;
			НоваяСтрока.УчаствуетВРасчетах = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
	Результат.Сортировать("СчетРасчетов");
	
	Возврат Результат;
	
КонецФункции

Функция ВариантыНастроек() Экспорт
	
	Результат = Новый Массив;
	
	Схема = ПолучитьМакет("СхемаКомпоновкиДанных");
	Для Каждого Вариант Из Схема.ВариантыНастроек Цикл
		
		ТекущийВариант = Новый Структура;
		ТекущийВариант.Вставить("Имя", Вариант.Имя);
		ТекущийВариант.Вставить("Представление", Вариант.Представление);
		
		Результат.Добавить(ТекущийВариант);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Процедура используется подсистемой варианты отчетов
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	Схема = ПолучитьМакет("СхемаКомпоновкиДанных");
	Для Каждого Вариант Из Схема.ВариантыНастроек Цикл
		 Настройки.ОписаниеВариантов.Вставить(Вариант.Имя, Вариант.Представление);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру параметров, наличие которых требуется для успешного формирования отчета.
//
// Возвращаемое значение:
//   Структура - структура параметров для формирования отчета.
//
Функция ПустыеПараметрыКомпоновкиОтчета() Экспорт
	
	ПараметрыОтчета = БухгалтерскиеОтчеты.ПустыеПараметрыКомпоновкиОтчета();
	
	ПараметрыОтчета.ИдентификаторОтчета   = "РасшифровкаЗадолженности";
	
	ОтчетОбъект = Отчеты.РасшифровкаЗадолженности.Создать();
	
	// 0 = В одной колонке, 1 = В отдельных колонках
	ПараметрыОтчета.Вставить("РазмещениеДополнительныхПолей",
		БухгалтерскиеОтчетыКлиентСервер.РазмещениеДополнительныхПолей().ВместеСВладельцем);
	ПараметрыОтчета.Вставить("ДополнительныеПоля", ОтчетОбъект.ДополнительныеПоля.ВыгрузитьКолонки());
	ПараметрыОтчета.Вставить("Группировка",        ОтчетОбъект.Группировка.ВыгрузитьКолонки());
	ПараметрыОтчета.Вставить("Интервалы",          ОтчетОбъект.Интервалы.ВыгрузитьКолонки());
	ПараметрыОтчета.Вставить("СчетаРасчетов",      ОтчетОбъект.СчетаРасчетов.ВыгрузитьКолонки());
	
	ПараметрыОтчета.Вставить("Период",             Дата(1, 1, 1));
	ПараметрыОтчета.Вставить("СписокОрганизаций",  Неопределено);
	ПараметрыОтчета.Вставить("КонтрольПоБУ",       Ложь);
	ПараметрыОтчета.Вставить("ВариантДетализации", 0);
	ПараметрыОтчета.Вставить("КлючВарианта",       ""); // "РасшифровкаЗадолженности" или "РасшифровкаЗадолженностиПоСтрокамБаланса"
	ПараметрыОтчета.Вставить("ВыводитьПримечания", Ложь);
	
	ПараметрыОтчета.Вставить("Заголовок",          "");
	
	ПараметрыОтчета.Вставить("ДоступныеТипыДокументов", ДоступныеТипыЗначенийДокументы());
	
	Возврат ПараметрыОтчета;
	
КонецФункции

// Заполняет структуру настроек универсального формата из реквизитов формы.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПустыеПараметрыКомпоновкиОтчета()
//  Форма - УправляемаяФорма - содержит основновной реквизит Отчет .
//
Процедура ЗаполнитьПараметрыИзФормы(ПараметрыОтчета, Форма) Экспорт
	
	БухгалтерскиеОтчеты.ЗаполнитьПараметрыИзФормы(ПараметрыОтчета, Форма);
	
	Отчет = Форма.Отчет;
	
	ПараметрыОтчета.СчетаРасчетов      = Отчет.СчетаРасчетов.Выгрузить();
	ПараметрыОтчета.КонтрольПоБУ       = Отчет.КонтрольПоБУ;
	ПараметрыОтчета.ВариантДетализации = Отчет.ВариантДетализации;
	ПараметрыОтчета.КлючВарианта       = Форма.КлючТекущегоВарианта;

КонецПроцедуры

// Возвращает список полей, которые выводятся в отчете по выбранному варианту детализации
//
// Параметры:
//   ВариантДетализации - Число - Вариант детализации данных
//   Интервалы          - ТаблицаЗначений - Настройка интервалов
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция ПоляВыводаВариантаДетализации(ВариантДетализации, Интервалы, КонтрольПоБУ) Экспорт
	
	Результат = Новый СписокЗначений;
	
	Если ВариантДетализации = 0 Тогда
		
		// Вариант "Без детализации"
		
		Результат.Добавить("Подтверждено", НСтр("ru = 'Общая задолженность'"));
		Результат.Добавить("ДатаВозникновения");
		Результат.Добавить("ДатаПогашения");
		
	ИначеЕсли ВариантДетализации = 1 Тогда
		
		// Вариант "По срокам возникновения"
		
		ГруппаЗадолженность = Новый СписокЗначений;
		ГруппаЗадолженность.Добавить("Подтверждено", НСтр("ru = 'Всего'"));
		
		ПоляИнтевалов = ПоляВыводаПоИнтервалам(Интервалы);
		Для Каждого ТекущееПоле Из ПоляИнтевалов Цикл
			ГруппаЗадолженность.Добавить(ТекущееПоле.Значение, ТекущееПоле.Представление);
		КонецЦикла;
		
		Результат.Добавить(ГруппаЗадолженность, НСтр("ru = 'Задолженность'"));
		
	Иначе
		
		// Вариант "По срокам погашения"
		
		Результат.Добавить("Подтверждено", НСтр("ru = 'Общая задолженность'"));
		
		ГруппаЗадолженность = Новый СписокЗначений;
		ГруппаЗадолженность.Добавить("Просрочено", НСтр("ru = 'Всего'"));
		
		ПоляИнтевалов = ПоляВыводаПоИнтервалам(Интервалы);
		Для Каждого ТекущееПоле Из ПоляИнтевалов Цикл
			ГруппаЗадолженность.Добавить(ТекущееПоле.Значение, ТекущееПоле.Представление);
		КонецЦикла;
		
		Результат.Добавить(ГруппаЗадолженность, НСтр("ru = 'Просроченная задолженность'"));
		
	КонецЕсли;
	
	Если КонтрольПоБУ Тогда
		
		ПоляИнтевалов = Новый СписокЗначений;
		
		ПоляИнтевалов.Добавить("ПодтвержденоПоДаннымУчета", НСтр("ru = 'По данным учета'"));
		ПоляИнтевалов.Добавить("ПодтвержденоПоАктам", НСтр("ru = 'По актам инвентаризации'"));
		ПоляИнтевалов.Добавить("Расхождение");
		
		Результат.Добавить(ПоляИнтевалов, НСтр("ru = 'Контроль*'"));
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает возможные варианты настройки отчета "Детализация по срокам".
//
// Возвращаемое значение:
//	ФиксированнаяСтруктура.
//
Функция ВариантыДетализацииПоСрокам() Экспорт

	Результат = Новый Структура();
	Результат.Вставить("БезДетализации",        0);
	Результат.Вставить("ПоСрокамВозникновения", 1);
	Результат.Вставить("ПоСрокамПогашения",     2);
	
	Возврат Новый ФиксированнаяСтруктура(Результат);

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция АктИнвентаризацииРасчетов(ПараметрыРасшифровки, ПараметрыОтчета)
	
	СчетаУчетаБезАкта = СчетаБезИнвентаризацииВАкте();
	СсылкаНаДокумент  = Неопределено;
	СчетРасчетов      = Неопределено;
	
	Если ПараметрыРасшифровки.Свойство("Ссылка", СсылкаНаДокумент) Тогда
		
		Возврат СсылкаНаДокумент;
		
	ИначеЕсли ПараметрыРасшифровки.Свойство("СчетРасчетов", СчетРасчетов)
		И СчетаУчетаБезАкта.Найти(СчетРасчетов) <> Неопределено Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИнвентаризацияРасчетовСКонтрагентами.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ИнвентаризацияРасчетовСКонтрагентами КАК ИнвентаризацияРасчетовСКонтрагентами
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияРасчетовСКонтрагентами.ДетальныеЗаписи КАК ДокументДетальныеЗаписи
	|		ПО ИнвентаризацияРасчетовСКонтрагентами.Ссылка = ДокументДетальныеЗаписи.Ссылка
	|			И ИнвентаризацияРасчетовСКонтрагентами.ДетализироватьЗадолженность
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияРасчетовСКонтрагентами.Контрагенты КАК ДокументКонтрагенты
	|		ПО ИнвентаризацияРасчетовСКонтрагентами.Ссылка = ДокументКонтрагенты.Ссылка
	|			И ИнвентаризацияРасчетовСКонтрагентами.ДетализироватьЗадолженность = ЛОЖЬ
	|ГДЕ
	|	ИнвентаризацияРасчетовСКонтрагентами.Проведен
	|	И ИнвентаризацияРасчетовСКонтрагентами.Организация В(&Организации)
	|	И ИнвентаризацияРасчетовСКонтрагентами.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) И КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
	|");
	
	СписокОрганизаций = ОбщегоНазначенияБП.СписокДоступныхОрганизаций(
		ПараметрыОтчета.Организация,
		ПараметрыОтчета.ВключатьОбособленныеПодразделения);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", ПараметрыОтчета.Период);
	Запрос.УстановитьПараметр("Организации", СписокОрганизаций);
	
	КолонкиИсточника = Метаданные.Документы.ИнвентаризацияРасчетовСКонтрагентами.ТабличныеЧасти.ДетальныеЗаписи.Реквизиты;
	
	Для Каждого ТекущийПараметр Из ПараметрыРасшифровки Цикл
		
		Запрос.УстановитьПараметр(ТекущийПараметр.Ключ, ТекущийПараметр.Значение);
		
		Если ТекущийПараметр.Ключ = "ДебиторКредиторГруппировка" Тогда
			
			СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить(
				"ВЫБОР
				|	КОГДА ЕСТЬNULL(ДокументДетальныеЗаписи.СчетРасчетов, ДокументКонтрагенты.СчетРасчетов) В(&СчетаУчетаПоНаименованию)
				|		ТОГДА ИСТИНА
				|	ИНАЧЕ ЕСТЬNULL(ДокументДетальныеЗаписи.Субконто1, ДокументКонтрагенты.Контрагент) = &ДебиторКредиторГруппировка
				|КОНЕЦ");
			
			Запрос.УстановитьПараметр("СчетаУчетаПоНаименованию",
				Документы.ИнвентаризацияРасчетовСКонтрагентами.СчетаРасчетовУчетПоНаименованию());

		ИначеЕсли ТекущийПараметр.Ключ = "ВидЗадолженности" Тогда
			
			СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить(
				"ЕСТЬNULL(ДокументДетальныеЗаписи.ВидЗадолженности, ДокументКонтрагенты.ВидЗадолженности) = &ВидЗадолженности");

		ИначеЕсли ТекущийПараметр.Ключ = "СчетРасчетов" Тогда
			
			СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить(
				"ЕСТЬNULL(ДокументДетальныеЗаписи.СчетРасчетов, ДокументКонтрагенты.СчетРасчетов) = &СчетРасчетов");
			
		ИначеЕсли ТекущийПараметр.Ключ = "Договор" Тогда
			
			СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить(
				"ДокументДетальныеЗаписи.Субконто2 = &Договор");
			
		ИначеЕсли ТекущийПараметр.Ключ = "Документ" Тогда
			
			СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить(
				"ДокументДетальныеЗаписи.Субконто3 = &Документ");
			
		ИначеЕсли КолонкиИсточника.Найти(ТекущийПараметр.Ключ) <> Неопределено Тогда
			
			СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить(
				СтрШаблон("ДокументДетальныеЗаписи.%1 = &%1", ТекущийПараметр.Ключ));
			
		КонецЕсли;
		
	КонецЦикла;
	
	АктИнвентаризации = Неопределено;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		АктИнвентаризации = РезультатЗапроса.Выгрузить()[0].Ссылка;
	КонецЕсли;
	
	Возврат АктИнвентаризации;
	
КонецФункции

Функция ВыбранныеСчетаРасчетов(ИерархияСчетов)
	
	СчетаРасчетов = Новый Массив;
	
	Если ТипЗнч(ИерархияСчетов) = Тип("ТаблицаЗначений") Тогда
		// Передана таблица из табличной части СчетаРасчетов отчета.
		Для каждого СтрокаТаблицы Из ИерархияСчетов Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.СчетРасчетов) И СтрокаТаблицы.УчаствуетВРасчетах Тогда
				СчетаРасчетов.Добавить(СтрокаТаблицы.СчетРасчетов);
			КонецЕсли;
		КонецЦикла;
	
	ИначеЕсли ТипЗнч(ИерархияСчетов) = Тип("Массив") Тогда
		Для Каждого ТекущийСчет Из ИерархияСчетов Цикл
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаРасчетов, БухгалтерскийУчетПовтИсп.СчетаВИерархии(ТекущийСчет));
		КонецЦикла;

	КонецЕсли;
	
	Возврат СчетаРасчетов;
	
КонецФункции

Процедура ВывестиПримечания(ПараметрыОтчета, Результат)
	
	Если Не ПараметрыОтчета.ВыводитьПримечания Или Не ПараметрыОтчета.КонтрольПоБУ Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОтчета.ВыводитьПодвал Тогда
		ОбластьПодписи = Результат.Области.Найти("Подписи");
		ЗавершениеТаблицы = ОбластьПодписи.Верх;
	Иначе
		ЗавершениеТаблицы = Результат.ВысотаТаблицы + 1;
	КонецЕсли;
	
	Примечание = ПолучитьМакет("Примечания").Область("КонтрольПоБУ");
	
	Результат.ВставитьОбласть(Примечание,
		Результат.Область(СтрШаблон("R%1", Формат(ЗавершениеТаблицы, "ЧГ=0"))),
		ТипСмещенияТабличногоДокумента.ПоГоризонтали,
		Истина);
	
КонецПроцедуры

Процедура ВывестиПредставлениеОтбораСчетаРасчетов(ПараметрыОтчета, Результат)
	
	Если Не ПараметрыОтчета.ВыводитьЗаголовок Тогда
		Возврат;
	КонецЕсли;
	
	// Выведем описание отборов по счетам учета
	КоличествоСчетовОбщее = ПараметрыОтчета.СчетаРасчетов.Количество();
	СтрокиОтбора = ПараметрыОтчета.СчетаРасчетов.НайтиСтроки(Новый Структура("УчаствуетВРасчетах", Истина));
	
	Если КоличествоСчетовОбщее = СтрокиОтбора.Количество() Тогда
		// Не установлены специальные отборы по счетам
		Возврат;
	КонецЕсли;
	
	МакетПримечаний = ПолучитьМакет("Примечания");
	
	ОбластьОтборов = Результат.НайтиТекст(НСтр("ru = 'Отбор:'"));
	Если ОбластьОтборов = Неопределено Тогда
		
		ОбластьОтборов = МакетПримечаний.Область("Отбор");
		// Отборы выводятся после заголовка
		СтрокаВставкиОбластиОтборов = Результат.Области.ОбластьЗаголовок.Верх + 1;
		
	Иначе
		ОбластьОтборов = МакетПримечаний.Область("ОтборБезПредставления");
		СтрокаВставкиОбластиОтборов = ОбластьОтборов.Верх;
	КонецЕсли;
		
	ВыбранныеСчета = Новый Массив;
	Для Каждого ТекущийСчет Из СтрокиОтбора Цикл
		ВыбранныеСчета.Добавить(ТекущийСчет.СчетРасчетов);
	КонецЦикла;
	
	// В табличный документ выводим ограниченное количество выбранных счетов
	МаксимальноеКоличествоДляОтображения = 20;
	
	Запрос = Новый Запрос(СтрШаблон(
	"ВЫБРАТЬ ПЕРВЫЕ %1
	|	Хозрасчетный.Ссылка КАК Ссылка
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В(&ВыбранныеСчета)
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(Хозрасчетный.Ссылка) КАК Количество
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В(&ВыбранныеСчета)
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках", МаксимальноеКоличествоДляОтображения));
	
	Запрос.УстановитьПараметр("ВыбранныеСчета", ВыбранныеСчета);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если Не РезультатЗапроса[0].Пустой() Тогда
		
		КоличествоСчетовВсего = РезультатЗапроса[1].Выгрузить()[0].Количество;
		
		ПредставлениеСчета = СтрСоединить(РезультатЗапроса[0].Выгрузить().ВыгрузитьКолонку("Ссылка"), "; ");
		Если КоличествоСчетовВсего > МаксимальноеКоличествоДляОтображения Тогда
			ПредставлениеОтбора = СтрШаблон(Нстр("ru = 'Счет расчетов В списке ""%1...""'"), ПредставлениеСчета);
		Иначе
			ПредставлениеОтбора = СтрШаблон(Нстр("ru = 'Счет расчетов В списке ""%1""'"), ПредставлениеСчета);
		КонецЕсли;
		
		МакетПримечаний.Параметры.ОписаниеОтбора = ПредставлениеОтбора;
		
		Результат.ВставитьОбласть(ОбластьОтборов,
			Результат.Область(СтрШаблон("R%1", Формат(СтрокаВставкиОбластиОтборов, "ЧГ=0"))),
			ТипСмещенияТабличногоДокумента.ПоВертикали,
			Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДоступныеТипыЗначенийДокументы()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВидыСубконтоХозрасчетные.ТипЗначения КАК ТипЗначения
	|ИЗ
	|	ПланВидовХарактеристик.ВидыСубконтоХозрасчетные КАК ВидыСубконтоХозрасчетные
	|ГДЕ
	|	ВидыСубконтоХозрасчетные.Ссылка В(&ВидыСубконто)");
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФВыданные);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФПолученные);
	
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	Результат = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, Выборка.ТипЗначения.Типы());
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьПолеВНаборДанных(НаборДанных, ПолеВывода)
	
	Если НаборДанных.Найти(ПолеВывода.Значение) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовоеПоле = НаборДанных.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	НовоеПоле.ПутьКДанным = ПолеВывода.Значение;
	НовоеПоле.Поле = ПолеВывода.Значение;
	НовоеПоле.Заголовок = ПолеВывода.Представление;
	НовоеПоле.ТипЗначения = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	
	НовоеПоле.ОграничениеИспользования.Группировка = Ложь;
	НовоеПоле.ОграничениеИспользования.Поле = Ложь;
	НовоеПоле.ОграничениеИспользования.Порядок = Истина;
	НовоеПоле.ОграничениеИспользования.Условие = Истина;
	
	НовоеПоле.ОграничениеИспользованияРеквизитов.Группировка = Ложь;
	НовоеПоле.ОграничениеИспользованияРеквизитов.Поле = Ложь;
	НовоеПоле.ОграничениеИспользованияРеквизитов.Порядок = Истина;
	НовоеПоле.ОграничениеИспользованияРеквизитов.Условие = Истина;
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(НовоеПоле.Оформление, "Формат", "ЧЦ=15; ЧДЦ=2");
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(НовоеПоле.Оформление, "МинимальнаяШирина", 15);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(НовоеПоле.Оформление, "МаксимальнаяШирина", 15);
	
КонецПроцедуры

Процедура ДобавитьГруппировки(ПараметрыОтчета, КомпоновщикНастроек)
	
	УровеньГруппировки = УровеньГруппировкаДанных(КомпоновщикНастроек.Настройки.Структура);
	
	Если ТипЗнч(УровеньГруппировки) <> Тип("ГруппировкаКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Группировка = УровеньГруппировки.Родитель.Структура;
	Группировка.Очистить();
	ПерваяГруппировка = Истина;
	
	ТипГруппировки = БухгалтерскиеОтчетыКлиентСервер.ТипГруппировки();
	
	Для Каждого ТекущаяГруппировка Из ПараметрыОтчета.Группировка Цикл 
		
		Если Не ТекущаяГруппировка.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекущаяГруппировка.Поле);
		ПредставленияПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			ТекущаяГруппировка.Представление, , , Истина);
		
		НоваяГруппировка = Группировка.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		
		Для Каждого ТекущееПоле Из МассивПолей Цикл
			
			ПолеГруппировки = НоваяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование = Истина;
			
			Если ТекущееПоле = "ДебиторКредитор" Тогда
				// Для группировки выводятся только те значения, которые разрешены схемой (указываются в поле ДебиторКредиторГруппировка)
				ТекущееПоле = "ДебиторКредиторГруппировка";
			КонецЕсли;
			
			ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(ТекущееПоле);
			Если ТекущаяГруппировка.ТипГруппировки = ТипГруппировки.Иерархия Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
			ИначеЕсли ТекущаяГруппировка.ТипГруппировки = ТипГруппировки.ТолькоИерархия Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
			Иначе
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			КонецЕсли;
			
		КонецЦикла;
		
		НоваяГруппировка.Использование = Истина;
		НоваяГруппировка.Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных.Включен;
		НоваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		НоваяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		
		Если ПерваяГруппировка Тогда
			РасположениеОбщихИтогов = НоваяГруппировка.ПараметрыВывода.Элементы.Найти("ВертикальноеРасположениеОбщихИтогов");
			РасположениеОбщихИтогов.Использование = Истина;
			РасположениеОбщихИтогов.Значение = РасположениеИтоговКомпоновкиДанных.Конец;
			ПерваяГруппировка = Ложь;
		КонецЕсли;
		
		Группировка = НоваяГруппировка.Структура;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПолеИтога(ПоляИтога, ИмяПоля)
	
	Если ПоляИтога.Найти(ИмяПоля) = Неопределено Тогда
		ТекущееПоле = ПоляИтога.Добавить();
		ТекущееПоле.ПутьКДанным = ИмяПоля;
		ТекущееПоле.Выражение = СтрШаблон("Сумма(%1)", ИмяПоля);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначенияРодительскихГруппировокРасшифровки(ЭлементРасшифровки)
	
	Результат = Новый Структура;
	
	ПоляРодителей = ЭлементРасшифровки.ПолучитьРодителей();
	Для Каждого ТекущийРодитель Из ПоляРодителей Цикл
		
		Если ТипЗнч(ТекущийРодитель) = Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") Тогда
			ПоляРасшифровки = ЗначенияРодительскихГруппировокРасшифровки(ТекущийРодитель);
			КлючПоля = "Ключ";
		Иначе
			ПоляРасшифровки = ТекущийРодитель.ПолучитьПоля();
			КлючПоля = "Поле";
		КонецЕсли;
		
		Для Каждого ТекущееПоле Из ПоляРасшифровки Цикл
			Результат.Вставить(ТекущееПоле[КлючПоля], ТекущееПоле.Значение);
		КонецЦикла;
		
		РодительскиеПоля = ЗначенияРодительскихГруппировокРасшифровки(ТекущийРодитель);
		Для Каждого ПолеРодителя Из РодительскиеПоля Цикл
			Результат.Вставить(ПолеРодителя.Ключ, ПолеРодителя.Значение);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПоляВыводаПоИнтервалам(Интервалы)
	
	Результат = Новый СписокЗначений;
	ШаблонИмениПоля = "СуммаЗадолженности%1";
	
	Для Каждого ТекущийИнтервал Из Интервалы Цикл
		Результат.Добавить(
			СтрШаблон(ШаблонИмениПоля, Формат(ТекущийИнтервал.НомерСтроки, "ЧГ=0")),
			ТекущийИнтервал.Представление);
	КонецЦикла;
	
	Результат.Добавить(
		СтрШаблон(ШаблонИмениПоля, Формат(ТекущийИнтервал.НомерСтроки + 1, "ЧГ=0")),
		СтрШаблон(НСтр("ru = 'Свыше %1 дней'"), ТекущийИнтервал.Значение));
	
	Возврат Результат;
	
КонецФункции

Функция ПоляВыводаРезультатаОтчета(КоллекцияПолей)
	
	Результат = Новый Массив;
	Для Каждого ТекущееПоле Из КоллекцияПолей Цикл
		Результат.Добавить(ТекущееПоле.ПутьКДанным);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаОтчета(ВариантДетализации, Интервалы, ПоляВыбора)
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(
	"ВЫБРАТЬ
	|	ДанныеУчета.ВидЗадолженности КАК ВидЗадолженности,
	|	ДанныеУчета.СчетРасчетов КАК СчетРасчетов,
	|	ДанныеУчета.НаименованиеСчета КАК НаименованиеСчета,
	|	ДанныеУчета.Субконто1 КАК Субконто1,
	|	ДанныеУчета.Субконто2 КАК Субконто2,
	|	ДанныеУчета.Субконто3 КАК Субконто3,
	|	ДанныеУчета.Подтверждено КАК Подтверждено,
	|	ДанныеУчета.НеПодтверждено КАК НеПодтверждено,
	|	ДанныеУчета.ИстекСрокДавности КАК ИстекСрокДавности,
	|	ВЫРАЗИТЬ(ДанныеУчета.ДатаВозникновения КАК ДАТА) КАК ДатаВозникновения,
	|	ВЫРАЗИТЬ(ДанныеУчета.ДатаПогашения КАК ДАТА) КАК ДатаПогашения,
	|	ДанныеУчета.Комментарий КАК Комментарий
	|ПОМЕСТИТЬ ДанныеУчета
	|ИЗ
	|	&ДанныеУчета КАК ДанныеУчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЗадолженности,
	|	СчетРасчетов,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК ИдЗапроса,
	|	ИнвентаризацияРасчетовСКонтрагентамиДетальныеЗаписи.Ссылка КАК Ссылка,
	|	ИнвентаризацияРасчетовСКонтрагентамиДетальныеЗаписи.ВидЗадолженности КАК ВидЗадолженности,
	|	ИнвентаризацияРасчетовСКонтрагентамиДетальныеЗаписи.СчетРасчетов КАК СчетРасчетов,
	|	ИнвентаризацияРасчетовСКонтрагентамиДетальныеЗаписи.СчетРасчетов.Наименование КАК НаименованиеСчета,
	|	ИнвентаризацияРасчетовСКонтрагентамиДетальныеЗаписи.Субконто1 КАК Субконто1,
	|	ИнвентаризацияРасчетовСКонтрагентамиДетальныеЗаписи.Субконто2 КАК Субконто2,
	|	ИнвентаризацияРасчетовСКонтрагентамиДетальныеЗаписи.Субконто3 КАК Субконто3,
	|	ИнвентаризацияРасчетовСКонтрагентамиДетальныеЗаписи.Подтверждено КАК Подтверждено,
	|	ИнвентаризацияРасчетовСКонтрагентамиДетальныеЗаписи.НеПодтверждено КАК НеПодтверждено,
	|	ИнвентаризацияРасчетовСКонтрагентамиДетальныеЗаписи.ИстекСрокДавности КАК ИстекСрокДавности,
	|	ИнвентаризацияРасчетовСКонтрагентамиДетальныеЗаписи.ДатаВозникновения КАК ДатаВозникновения,
	|	ИнвентаризацияРасчетовСКонтрагентамиДетальныеЗаписи.ДатаПогашения КАК ДатаПогашения,
	|	ИнвентаризацияРасчетовСКонтрагентамиДетальныеЗаписи.Комментарий КАК Комментарий
	|ПОМЕСТИТЬ ДанныеПоАктам
	|ИЗ
	|	Документ.ИнвентаризацияРасчетовСКонтрагентами КАК ИнвентаризацияРасчетовСКонтрагентами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияРасчетовСКонтрагентами.ДетальныеЗаписи КАК ИнвентаризацияРасчетовСКонтрагентамиДетальныеЗаписи
	|		ПО ИнвентаризацияРасчетовСКонтрагентами.Ссылка = ИнвентаризацияРасчетовСКонтрагентамиДетальныеЗаписи.Ссылка
	|ГДЕ
	|	ИнвентаризацияРасчетовСКонтрагентами.Организация В(&Организации)
	|	И ИнвентаризацияРасчетовСКонтрагентами.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) И КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
	|	И ИнвентаризацияРасчетовСКонтрагентами.Проведен
	|	И ИнвентаризацияРасчетовСКонтрагентами.ДетализироватьЗадолженность
	|	И ИнвентаризацияРасчетовСКонтрагентамиДетальныеЗаписи.СчетРасчетов В(&СчетаРасчетов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ИнвентаризацияРасчетовСКонтрагентамиКонтрагенты.Ссылка,
	|	ИнвентаризацияРасчетовСКонтрагентамиКонтрагенты.ВидЗадолженности,
	|	ИнвентаризацияРасчетовСКонтрагентамиКонтрагенты.СчетРасчетов,
	|	ИнвентаризацияРасчетовСКонтрагентамиКонтрагенты.СчетРасчетов.Наименование,
	|	ИнвентаризацияРасчетовСКонтрагентамиКонтрагенты.Контрагент,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ИнвентаризацияРасчетовСКонтрагентамиКонтрагенты.Подтверждено,
	|	ИнвентаризацияРасчетовСКонтрагентамиКонтрагенты.НеПодтверждено,
	|	ИнвентаризацияРасчетовСКонтрагентамиКонтрагенты.ИстекСрокДавности,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0),
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0),
	|	""""
	|ИЗ
	|	Документ.ИнвентаризацияРасчетовСКонтрагентами КАК ИнвентаризацияРасчетовСКонтрагентами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияРасчетовСКонтрагентами.Контрагенты КАК ИнвентаризацияРасчетовСКонтрагентамиКонтрагенты
	|		ПО ИнвентаризацияРасчетовСКонтрагентами.Ссылка = ИнвентаризацияРасчетовСКонтрагентамиКонтрагенты.Ссылка
	|ГДЕ
	|	ИнвентаризацияРасчетовСКонтрагентами.Организация В(&Организации)
	|	И ИнвентаризацияРасчетовСКонтрагентами.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) И КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
	|	И ИнвентаризацияРасчетовСКонтрагентами.Проведен
	|	И ИнвентаризацияРасчетовСКонтрагентами.ДетализироватьЗадолженность = ЛОЖЬ
	|	И ИнвентаризацияРасчетовСКонтрагентамиКонтрагенты.СчетРасчетов В(&СчетаРасчетов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЗадолженности,
	|	СчетРасчетов,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА МИНИМУМ(Данные.ИдЗапроса) <= 2
	|			ТОГДА МАКСИМУМ(Данные.Ссылка)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Ссылка,
	|	Данные.ВидЗадолженности КАК ВидЗадолженности,
	|	Данные.СчетРасчетов КАК СчетРасчетов,
	|	Данные.ДебиторКредиторГруппировка КАК ДебиторКредиторГруппировка,
	|	Данные.ДебиторКредитор КАК ДебиторКредитор,
	|	Данные.Договор КАК Договор,
	|	Данные.Документ КАК Документ,
	|	ВЫБОР
	|		КОГДА МИНИМУМ(Данные.ИдЗапроса) = 1
	|			ТОГДА СУММА(Данные.ПодтвержденоДанныеАкта)
	|		ИНАЧЕ СУММА(Данные.ПодтвержденоДанныеУчета)
	|	КОНЕЦ КАК Подтверждено,
	|	ВЫБОР
	|		КОГДА МИНИМУМ(Данные.ИдЗапроса) = 1
	|			ТОГДА СУММА(Данные.ПросроченоДанныеАкта)
	|		ИНАЧЕ СУММА(Данные.ПросроченоДанныеУчета)
	|	КОНЕЦ КАК Просрочено,
	|	СУММА(Данные.ПодтвержденоПоАктам) КАК ПодтвержденоПоАктам,
	|	СУММА(Данные.ПодтвержденоПоДаннымУчета) КАК ПодтвержденоПоДаннымУчета,
	|	ВЫБОР
	|		КОГДА МИНИМУМ(Данные.ИдЗапроса) = 1
	|			ТОГДА СУММА(Данные.ПодтвержденоПоАктам)
	|		ИНАЧЕ СУММА(Данные.ПодтвержденоПоДаннымУчета)
	|	КОНЕЦ КАК ПодтвержденоДляРасчетаИнтервалов,
	|	ВЫБОР
	|		КОГДА МИНИМУМ(Данные.ИдЗапроса) = 1
	|			ТОГДА СУММА(Данные.НеПодтвержденоДанныеАкта)
	|		ИНАЧЕ СУММА(Данные.НеПодтвержденоДанныеУчета)
	|	КОНЕЦ КАК НеПодтверждено,
	|	ВЫБОР
	|		КОГДА МИНИМУМ(Данные.ИдЗапроса) = 1
	|			ТОГДА СУММА(Данные.ИстекСрокДавностиДанныеАкта)
	|		ИНАЧЕ СУММА(Данные.ИстекСрокДавностиДанныеУчета)
	|	КОНЕЦ КАК ИстекСрокДавности,
	|	ВЫБОР
	|		КОГДА МИНИМУМ(Данные.ИдЗапроса) = 1
	|			ТОГДА МИНИМУМ(Данные.ДатаВозникновенияДанныеАкта)
	|		ИНАЧЕ МИНИМУМ(Данные.ДатаВозникновенияДанныеУчета)
	|	КОНЕЦ КАК ДатаВозникновения,
	|	ВЫБОР
	|		КОГДА МИНИМУМ(Данные.ИдЗапроса) = 1
	|			ТОГДА МАКСИМУМ(Данные.ДатаПогашенияДанныеАкта)
	|		ИНАЧЕ МАКСИМУМ(Данные.ДатаПогашенияДанныеУчета)
	|	КОНЕЦ КАК ДатаПогашения,
	|	ВЫБОР
	|		КОГДА МИНИМУМ(Данные.ИдЗапроса) = 1
	|			ТОГДА МАКСИМУМ(Данные.КомментарийДанныеАкта)
	|		ИНАЧЕ МАКСИМУМ(Данные.КомментарийДанныеУчета)
	|	КОНЕЦ КАК Комментарий,
	|	ВЫБОР
	|		КОГДА МИНИМУМ(Данные.ИдЗапроса) = 1
	|			ТОГДА МАКСИМУМ(Данные.СрокЗадолженностиДанныеАкта)
	|		ИНАЧЕ МАКСИМУМ(Данные.СрокЗадолженностиДанныеУчета)
	|	КОНЕЦ КАК СрокЗадолженности,
	|	ВЫБОР
	|		КОГДА Данные.СчетРасчетов В (&СчетаФинансовыеВложенияАктив)
	|			ТОГДА ""1170""
	|		КОГДА Данные.ВидЗадолженности = &ДебиторскаяЗадолженность
	|				И Данные.СчетРасчетов В (&СчетаФинансовыеВложения)
	|			ТОГДА ""1240""
	|		КОГДА Данные.ВидЗадолженности = &ДебиторскаяЗадолженность
	|				И Данные.СчетРасчетов В (&СчетаПрочиеОборотныеАктивы)
	|			ТОГДА ""1260""
	|		КОГДА Данные.ВидЗадолженности = &ДебиторскаяЗадолженность
	|			ТОГДА ""1230""
	|		КОГДА Данные.СчетРасчетов В (&СчетаЗаемныеСредстваДолгосрочные)
	|			ТОГДА ""1410""
	|		КОГДА Данные.СчетРасчетов В (&СчетаПрочиеОбязательстваДолгосрочные)
	|			ТОГДА ""1450""
	|		КОГДА Данные.СчетРасчетов В (&СчетаЗаемныеСредстваКраткосрочные)
	|			ТОГДА ""1510""
	|		КОГДА Данные.СчетРасчетов В (&СчетаОценочныеОбязательства)
	|			ТОГДА ""1540""
	|		КОГДА Данные.СчетРасчетов В (&СчетаПрочиеОбязательстваКраткосрочные)
	|			ТОГДА ""1550""
	|		ИНАЧЕ ""1520""
	|	КОНЕЦ КАК СтрокаБаланса
	|ПОМЕСТИТЬ ПредварительныеДанные
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеПоАктам.ИдЗапроса КАК ИдЗапроса,
	|		ЕСТЬNULL(ДанныеПоАктам.Ссылка, НЕОПРЕДЕЛЕНО) КАК Ссылка,
	|		ДанныеПоАктам.ВидЗадолженности КАК ВидЗадолженности,
	|		ДанныеПоАктам.СчетРасчетов КАК СчетРасчетов,
	|		ВЫБОР
	|			КОГДА ДанныеПоАктам.СчетРасчетов В (&СчетаУчетПоНаименованию)
	|				ТОГДА ДанныеПоАктам.НаименованиеСчета
	|			ИНАЧЕ ДанныеПоАктам.Субконто1
	|		КОНЕЦ КАК ДебиторКредиторГруппировка,
	|		ДанныеПоАктам.Субконто1 КАК ДебиторКредитор,
	|		ВЫБОР
	|			КОГДА ДанныеПоАктам.Субконто2 ССЫЛКА Справочник.ДоговорыКонтрагентов
	|				ТОГДА ДанныеПоАктам.Субконто2
	|			КОГДА ДанныеПоАктам.Субконто3 ССЫЛКА Справочник.ДоговорыКонтрагентов
	|				ТОГДА ДанныеПоАктам.Субконто3
	|			ИНАЧЕ NULL
	|		КОНЕЦ КАК Договор,
	|		ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ДанныеПоАктам.Субконто3) В (&ДоступныеТипыДокументов)
	|				ТОГДА ДанныеПоАктам.Субконто3
	|			ИНАЧЕ NULL
	|		КОНЕЦ КАК Документ,
	|		ДанныеПоАктам.Подтверждено КАК ПодтвержденоДанныеАкта,
	|		0 КАК ПодтвержденоДанныеУчета,
	|		ВЫБОР
	|			КОГДА ДанныеПоАктам.ДатаПогашения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ИЛИ ДанныеПоАктам.ДатаПогашения >= &Период
	|				ТОГДА 0
	|			ИНАЧЕ ДанныеПоАктам.Подтверждено
	|		КОНЕЦ КАК ПросроченоДанныеАкта,
	|		0 КАК ПросроченоДанныеУчета,
	|		ДанныеПоАктам.Подтверждено КАК ПодтвержденоПоАктам,
	|		0 КАК ПодтвержденоПоДаннымУчета,
	|		ДанныеПоАктам.НеПодтверждено КАК НеПодтвержденоДанныеАкта,
	|		0 КАК НеПодтвержденоДанныеУчета,
	|		ДанныеПоАктам.ИстекСрокДавности КАК ИстекСрокДавностиДанныеАкта,
	|		0 КАК ИстекСрокДавностиДанныеУчета,
	|		ДанныеПоАктам.ДатаВозникновения КАК ДатаВозникновенияДанныеАкта,
	|		ДАТАВРЕМЯ(2999, 12, 31, 23, 59, 59) КАК ДатаВозникновенияДанныеУчета,
	|		ДанныеПоАктам.ДатаПогашения КАК ДатаПогашенияДанныеАкта,
	|		ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаПогашенияДанныеУчета,
	|		ДанныеПоАктам.Комментарий КАК КомментарийДанныеАкта,
	|		"""" КАК КомментарийДанныеУчета,
	|		ВЫБОР
	|			КОГДА ДанныеПоАктам.ДатаВозникновения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА 0
	|			ИНАЧЕ РАЗНОСТЬДАТ(ДанныеПоАктам.ДатаВозникновения, &Период, ДЕНЬ)
	|		КОНЕЦ КАК СрокЗадолженностиДанныеАкта,
	|		ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК СрокЗадолженностиДанныеУчета
	|	ИЗ
	|		ДанныеПоАктам КАК ДанныеПоАктам
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		3,
	|		НЕОПРЕДЕЛЕНО,
	|		ДанныеУчета.ВидЗадолженности,
	|		ДанныеУчета.СчетРасчетов,
	|		ВЫБОР
	|			КОГДА ДанныеУчета.СчетРасчетов В (&СчетаУчетПоНаименованию)
	|				ТОГДА ДанныеУчета.НаименованиеСчета
	|			ИНАЧЕ ДанныеУчета.Субконто1
	|		КОНЕЦ,
	|		ДанныеУчета.Субконто1,
	|		ВЫБОР
	|			КОГДА ДанныеУчета.Субконто2 ССЫЛКА Справочник.ДоговорыКонтрагентов
	|				ТОГДА ДанныеУчета.Субконто2
	|			КОГДА ДанныеУчета.Субконто3 ССЫЛКА Справочник.ДоговорыКонтрагентов
	|				ТОГДА ДанныеУчета.Субконто3
	|			ИНАЧЕ NULL
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ДанныеУчета.Субконто3) В (&ДоступныеТипыДокументов)
	|				ТОГДА ДанныеУчета.Субконто3
	|			ИНАЧЕ NULL
	|		КОНЕЦ,
	|		0,
	|		ДанныеУчета.Подтверждено,
	|		0,
	|		ВЫБОР
	|			КОГДА ДанныеУчета.ДатаПогашения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ИЛИ ДанныеУчета.ДатаПогашения >= &Период
	|				ТОГДА 0
	|			ИНАЧЕ ДанныеУчета.Подтверждено
	|		КОНЕЦ,
	|		0,
	|		ДанныеУчета.Подтверждено,
	|		0,
	|		ДанныеУчета.НеПодтверждено,
	|		0,
	|		ДанныеУчета.ИстекСрокДавности,
	|		ДАТАВРЕМЯ(2999, 12, 31, 23, 59, 59),
	|		ДанныеУчета.ДатаВозникновения,
	|		ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0),
	|		ДанныеУчета.ДатаПогашения,
	|		"""",
	|		ДанныеУчета.Комментарий,
	|		ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0),
	|		ВЫБОР
	|			КОГДА ДанныеУчета.ДатаВозникновения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА 0
	|			ИНАЧЕ РАЗНОСТЬДАТ(ДанныеУчета.ДатаВозникновения, &Период, ДЕНЬ)
	|		КОНЕЦ
	|	ИЗ
	|		ДанныеУчета КАК ДанныеУчета) КАК Данные
	|
	|СГРУППИРОВАТЬ ПО
	|	Данные.ВидЗадолженности,
	|	Данные.СчетРасчетов,
	|	Данные.ДебиторКредиторГруппировка,
	|	Данные.ДебиторКредитор,
	|	Данные.Документ,
	|	Данные.Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеПоАктам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПредварительныеДанные.Ссылка КАК Ссылка,
	|	ПредварительныеДанные.ВидЗадолженности КАК ВидЗадолженности,
	|	ПредварительныеДанные.СчетРасчетов КАК СчетРасчетов,
	|	ПредварительныеДанные.ДебиторКредиторГруппировка КАК ДебиторКредиторГруппировка,
	|	ПредварительныеДанные.ДебиторКредитор КАК ДебиторКредитор,
	|	ПредварительныеДанные.Договор КАК Договор,
	|	ПредварительныеДанные.Документ КАК Документ,
	|	ПредварительныеДанные.Подтверждено КАК Подтверждено,
	|	ПредварительныеДанные.Просрочено КАК Просрочено,
	|	ПредварительныеДанные.ПодтвержденоПоАктам КАК ПодтвержденоПоАктам,
	|	ПредварительныеДанные.ПодтвержденоПоДаннымУчета КАК ПодтвержденоПоДаннымУчета,
	|	ПредварительныеДанные.НеПодтверждено КАК НеПодтверждено,
	|	ПредварительныеДанные.ИстекСрокДавности КАК ИстекСрокДавности,
	|	ПредварительныеДанные.ДатаВозникновения КАК ДатаВозникновения,
	|	ПредварительныеДанные.ДатаПогашения КАК ДатаПогашения,
	|	ПредварительныеДанные.Комментарий КАК Комментарий,
	|	ПредварительныеДанные.СрокЗадолженности КАК СрокЗадолженности,
	|	ПредварительныеДанные.СтрокаБаланса КАК СтрокаБаланса
	|ИЗ
	|	ПредварительныеДанные КАК ПредварительныеДанные");
	
	Если ВариантДетализации = 0 Тогда
		Возврат ТекстЗапросаСОграничениемПолейВывода(СхемаЗапроса, ПоляВыбора);
	КонецЕсли;
	
	Если ВариантДетализации = 1 Тогда
		ВыражениеСрок = "ПредварительныеДанные.ДатаВозникновения";
	Иначе
		ВыражениеСрок = "ПредварительныеДанные.ДатаПогашения";
	КонецЕсли;
	
	НомерПакетаВыборкиДанных = СхемаЗапроса.ПакетЗапросов.Количество() - 1;
	ВыбираемыеПоля = СхемаЗапроса.ПакетЗапросов[НомерПакетаВыборкиДанных].Операторы[0].ВыбираемыеПоля;
	НачальноеЗначение = 0;
	
	Для Каждого ТекущийИнтервал Из Интервалы Цикл
		
		ВыбираемыеПоля.Добавить(ТекстПоляВыборки(НачальноеЗначение, ТекущийИнтервал.Значение, ВыражениеСрок, ВариантДетализации));
		
		НачальноеЗначение = ТекущийИнтервал.Значение;
		Колонка = СхемаЗапроса.ПакетЗапросов[НомерПакетаВыборкиДанных].Колонки.Получить(ВыбираемыеПоля.Количество() - 1);
		Колонка.Псевдоним = СтрШаблон("СуммаЗадолженности%1", Формат(ТекущийИнтервал.НомерСтроки, "ЧГ=0"));
		
	КонецЦикла;
	
	ВыбираемыеПоля.Добавить(ТекстПоляВыборки(Формат(НачальноеЗначение, "ЧГ=; ЧН="), 0, ВыражениеСрок, ВариантДетализации));
	
	Колонка = СхемаЗапроса.ПакетЗапросов[НомерПакетаВыборкиДанных].Колонки.Получить(ВыбираемыеПоля.Количество() - 1);
	Колонка.Псевдоним = СтрШаблон("СуммаЗадолженности%1", Формат(ТекущийИнтервал.НомерСтроки + 1, "ЧГ=0"));
	
	Возврат ТекстЗапросаСОграничениемПолейВывода(СхемаЗапроса, ПоляВыбора);
	
КонецФункции

Функция ТекстПоляВыборки(НачальноеЗначение, КонечноеЗначение, Выражение, ВариантДетализации)
	
	НачальноеЗначениеСтрока = Формат(НачальноеЗначение, "ЧГ=; ЧН=");
	КонечноеЗначениеСтрока  = Формат(КонечноеЗначение, "ЧГ=; ЧН=");

	Если НачальноеЗначение = 0 И ВариантДетализации = 1 Тогда
			
		ТекстПоля = СтрШаблон("ВЫБОР
		|	КОГДА %1 = ДАТАВРЕМЯ(1,1,1,0,0,0) ИЛИ РАЗНОСТЬДАТ(%1, &Период, ДЕНЬ) <= %2
		|		ТОГДА ПредварительныеДанные.ПодтвержденоДляРасчетаИнтервалов
		|	ИНАЧЕ 0
		|КОНЕЦ", Выражение, КонечноеЗначениеСтрока);
		
	ИначеЕсли НачальноеЗначение = 0 Тогда
			
		ТекстПоля = СтрШаблон("ВЫБОР
		|	КОГДА %1 = ДАТАВРЕМЯ(1,1,1,0,0,0)
		|		ТОГДА 0
		|	КОГДА РАЗНОСТЬДАТ(%1, &Период, ДЕНЬ) > 0 И РАЗНОСТЬДАТ(%1, &Период, ДЕНЬ) <= %2
		|		ТОГДА ПредварительныеДанные.ПодтвержденоДляРасчетаИнтервалов
		|	ИНАЧЕ 0
		|КОНЕЦ", Выражение, КонечноеЗначениеСтрока);
		
	ИначеЕсли КонечноеЗначение = 0 Тогда
		
		ТекстПоля = СтрШаблон("ВЫБОР
		|	КОГДА %1 = ДАТАВРЕМЯ(1,1,1,0,0,0)
		|		ТОГДА 0
		|	КОГДА РАЗНОСТЬДАТ(%1, &Период, ДЕНЬ) > %2
		|		ТОГДА ПредварительныеДанные.ПодтвержденоДляРасчетаИнтервалов
		|	ИНАЧЕ 0
		|КОНЕЦ", Выражение, НачальноеЗначениеСтрока);
		
	Иначе
		
		ТекстПоля = СтрШаблон("ВЫБОР
		|	КОГДА %1 = ДАТАВРЕМЯ(1,1,1,0,0,0)
		|		ТОГДА 0
		|	КОГДА РАЗНОСТЬДАТ(%1, &Период, ДЕНЬ) > %2 И РАЗНОСТЬДАТ(%1, &Период, ДЕНЬ) <= %3
		|		ТОГДА ПредварительныеДанные.ПодтвержденоДляРасчетаИнтервалов
		|	ИНАЧЕ 0
		|КОНЕЦ", Выражение, НачальноеЗначениеСтрока, КонечноеЗначениеСтрока);
		
	КонецЕсли;
	
	Возврат ТекстПоля;
	
КонецФункции

Функция ТекстЗапросаСОграничениемПолейВывода(СхемаЗапроса, ПоляВывода)
	
	Для Каждого ТекущийПакетЗапросов Из СхемаЗапроса.ПакетЗапросов Цикл
		
		Если ТипЗнч(ТекущийПакетЗапросов) = Тип("ЗапросВыбораСхемыЗапроса")
			И ТекущийПакетЗапросов.ТаблицаДляПомещения = "" Тогда
			
			УдалитьНеиспользуемыеПоляВыбораСхемыЗапроса(ТекущийПакетЗапросов.Колонки, ПоляВывода);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецФункции

Процедура УдалитьНеиспользуемыеПоляВыбораСхемыЗапроса(КоллекцияКолонок, ПоляВыбора)
	
	Индекс = 0;
	Пока Индекс < КоллекцияКолонок.Количество() Цикл
		
		ТекущаяКолонка = КоллекцияКолонок[Индекс];
		Если ПоляВыбора.Найти(ТекущаяКолонка.Псевдоним) = Неопределено Тогда
			КоллекцияКолонок.Удалить(Индекс);
		Иначе
			Индекс = Индекс + 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция УровеньГруппировкаДанных(СтруктураНастроек) Экспорт
	
	Для Каждого ТекущийЭлемент Из СтруктураНастроек Цикл
		
		Если ТекущийЭлемент.Имя = "Группировка" Тогда
			Возврат ТекущийЭлемент;
		Иначе
			Возврат УровеньГруппировкаДанных(ТекущийЭлемент.Структура);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура УстановитьПараметры(ПараметрыОтчета, Схема, КомпоновщикНастроек)
	
	ПараметрыОтчета.СписокОрганизаций = ОбщегоНазначенияБП.СписокДоступныхОрганизаций(
		ПараметрыОтчета.Организация,
		ПараметрыОтчета.ВключатьОбособленныеПодразделения);
	
	ДатаОтчета = КонецДня(ПараметрыОтчета.Период);
	ПериодГраница = Новый Граница(ДатаОтчета, ВидГраницы.Включая);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Период", ПериодГраница);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ДатаОтчета", ДатаОтчета);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,
		"Организация",
		ПараметрыОтчета.СписокОрганизаций);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,
		"СчетаРасчетов",
		ВыбранныеСчетаРасчетов(ПараметрыОтчета.СчетаРасчетов));
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Счет59", Счет59());
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Счет63", Счет63());
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Счет76НА", Счет76НА());
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Счет9601", Счет9601());
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Счет9609", Счет9609());
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Счет97", Счет97());
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СчетаСтроки1260", СчетаСтроки1260());
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Счета55", СчетаФинансовыеВложения55());
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,
		"СчетаРасчетовПереносСальдо",
		Документы.ИнвентаризацияРасчетовСКонтрагентами.СчетаРасчетовПереносСальдо());
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,
		"ДополнитьПрочимиСчетами",
		ПараметрыОтчета.КлючВарианта = "РасшифровкаЗадолженностиПоСтрокамБаланса");
	
КонецПроцедуры

Процедура УстановитьПоляВывода(ПараметрыОтчета, КомпоновщикНастроек)
	
	ПоляВывода = КомпоновщикНастроек.Настройки.Выбор;
	ПоляВывода.Элементы.Очистить();
	
	ПоляДетализации = ПоляВыводаВариантаДетализации(ПараметрыОтчета.ВариантДетализации,
		ПараметрыОтчета.Интервалы,
		ПараметрыОтчета.КонтрольПоБУ);
	
	Для Каждого ТекущееПоле Из ПоляДетализации Цикл
		
		Если ТипЗнч(ТекущееПоле.Значение) = Тип("СписокЗначений") Тогда
			
			ГруппаПолей = ПоляВывода.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ГруппаПолей.Заголовок = ТекущееПоле.Представление;
			
			Для Каждого ПолеГруппировки Из ТекущееПоле.Значение Цикл
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаПолей,
					ПолеГруппировки.Значение,
					ПолеГруппировки.Представление);
			КонецЦикла;
			
		Иначе
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПоляВывода,
				ТекущееПоле.Значение,
				ТекущееПоле.Представление);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПоляНабораДанных(ПараметрыОтчета, Схема)
	
	НаборДанныеОтчета  = Схема.НаборыДанных.ДанныеОтчета;
	НаборОсновныеСчета = Схема.НаборыДанных.ДанныеОтчета.Элементы.ОсновныеСчета;
	
	ПолеДокумент = НаборДанныеОтчета.Поля.Найти("Документ");
	Если ПолеДокумент <> Неопределено Тогда
		ПолеДокумент.ТипЗначения = Новый ОписаниеТипов(ПараметрыОтчета.ДоступныеТипыДокументов);
	КонецЕсли;
	
	ПоляВывода = ПоляВыводаВариантаДетализации(ПараметрыОтчета.ВариантДетализации,
		ПараметрыОтчета.Интервалы,
		ПараметрыОтчета.КонтрольПоБУ);
	
	Для Каждого ТекущееПоле Из ПоляВывода Цикл
		
		Если ТипЗнч(ТекущееПоле.Значение) = Тип("СписокЗначений") Тогда
			Для Каждого ПолеГруппировки Из ТекущееПоле.Значение Цикл
				ДобавитьПолеВНаборДанных(НаборДанныеОтчета.Поля, ПолеГруппировки);
				ДобавитьПолеВНаборДанных(НаборОсновныеСчета.Поля, ПолеГруппировки);
				ДобавитьПолеИтога(Схема.ПоляИтога, ПолеГруппировки.Значение);
			КонецЦикла;
		Иначе
			ДобавитьПолеВНаборДанных(НаборДанныеОтчета.Поля, ТекущееПоле);
			ДобавитьПолеВНаборДанных(НаборОсновныеСчета.Поля, ТекущееПоле);
			ДобавитьПолеИтога(Схема.ПоляИтога, ТекущееПоле.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоляГруппировкиПоУмолчанию(Структура, Группировки) Экспорт
	
	УровеньГруппировки = Отчеты.РасшифровкаЗадолженности.УровеньГруппировкаДанных(Структура);
	
	Если ТипЗнч(УровеньГруппировки) <> Тип("ГруппировкаКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьПоляГруппировкиСтруктуры(УровеньГруппировки, Группировки);
	
КонецПроцедуры

Процедура ДобавитьПоляГруппировкиСтруктуры(ТекущаяГруппировка, Группировки)
	
	ПоляГруппировки = Новый Массив;
	
	Для Каждого ТекущееПоле Из ТекущаяГруппировка.ПоляГруппировки.Элементы Цикл
		
		Если СтрНайти(ТекущееПоле.Поле, "ДебиторКредитор") > 0 Тогда
			ПоляГруппировки.Добавить("ДебиторКредитор");
		Иначе
			ПоляГруппировки.Добавить(Строка(ТекущееПоле.Поле));
		КонецЕсли;
	КонецЦикла;
	
	НоваяГруппировка = Группировки.Добавить();
	НоваяГруппировка.Использование = ТекущаяГруппировка.Использование;
	НоваяГруппировка.Поле = СтрСоединить(ПоляГруппировки, ",");
	НоваяГруппировка.Представление = ТекущаяГруппировка.ПоляГруппировки;
	
	Для Каждого ГруппировкаСтруктуры Из ТекущаяГруппировка.Структура Цикл
		
		ДобавитьПоляГруппировкиСтруктуры(ГруппировкаСтруктуры, Группировки);
		
	КонецЦикла;
	
КонецПроцедуры

#Область ПредставлениеСтрокБаланса

Функция СчетаБезИнвентаризацииВАкте()
	
	Результат = СчетаСтроки1260();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, Счет59());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, Счет63());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, Счет76НА());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, Счет9601());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, Счет9609());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, Счет97());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, СчетаФинансовыеВложения55());
	
	Возврат Результат;
	
КонецФункции

Функция СчетаПрочиеОборотныеАктивы()
	
	Результат = СчетаСтроки1260();
	
	// 76.НА - Расчеты по НДС при исполнении обязанностей налогового агента
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, Счет76НА());
	
	// 76.01.2 - Платежи (взносы) по добровольному страхованию на случай смерти и причинения вреда здоровью
	Результат.Добавить(ПланыСчетов.Хозрасчетный.ПлатежиПоДобровольномуСтрахованиюРаботников);
	
	// 76.01.9 - Платежи (взносы) по прочим видам страхования
	Результат.Добавить(ПланыСчетов.Хозрасчетный.ПлатежиПоПрочимВидамСтрахования);
	
	// 76.07.9 - НДС по арендным обязательствам
	Результат.Добавить(ПланыСчетов.Хозрасчетный.НДСпоАренднымОбязательствам);
	
	// 76.37.9 - НДС по арендным обязательствам (в у.е.)
	Результат.Добавить(ПланыСчетов.Хозрасчетный.НДСпоАренднымОбязательствамУЕ);
	
	Возврат Результат;
	
КонецФункции

Функция СчетаФинансовыеВложения()
	
	Результат = Новый Массив;
	
	// 58 - Финансовые вложения (за исключением счета 58.01.1 - Паи)
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ФинансовыеВложения));
	
	Индекс58_01_1 = Результат.Найти(ПланыСчетов.Хозрасчетный.Паи);
	Результат.Удалить(Индекс58_01_1);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, СчетаФинансовыеВложения55());
	
	Возврат Результат;
	
КонецФункции

Функция СчетаФинансовыеВложения55()
	
	Результат = Новый Массив;
	
	// 55.03 - Депозитные счета
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ДепозитныеСчета));
	
	// 55.23 - Депозитные счета (в валюте)
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ДепозитныеСчетаВал));
	
	Возврат Результат;
	
КонецФункции

Функция СчетаФинансовыеВложенияАктив()
	
	Результат = Новый Массив;
	
	// 58.01.1 - Паи
	Результат.Добавить(ПланыСчетов.Хозрасчетный.Паи);
	
	Возврат Результат;
	
КонецФункции

Функция СчетаЗаемныеСредстваДолгосрочные()
	
	Результат = Новый Массив;
	
	// 67.01 - Долгосрочные кредиты
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ДолгосрочныеКредиты));
	
	// 67.21 - Долгосрочные кредиты (в валюте)
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ДолгосрочныеКредитыВал));
	
	// 67.03 - Долгосрочные займы
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ДолгосрочныеЗаймы));
	
	// 67.23 - Долгосрочные займы (в валюте)
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ДолгосрочныеЗаймыВал));
	
	// 67.05 - Долгосрочные долговые ценные бумаги
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ДолгосрочныеДолговыеЦенныеБумаги));
	
	// 67.25 - Долгосрочные долговые ценные бумаги (в валюте)
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ДолгосрочныеДолговыеЦенныеБумагиВал));
	
	Возврат Результат;
	
КонецФункции

Функция СчетаЗаемныеСредстваКраткосрочные()
	
	Результат = Новый Массив;

	// 66 - Расчеты по краткосрочным кредитам и займам
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам));
	
	// 67.02 - Проценты по краткосрочным кредитам
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитам));
	
	// 67.04 - Проценты по краткосрочным займам
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймам));
	
	// 67.22 - Проценты по краткосрочным кредитам (в валюте)
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитамВал));
	
	// 67.24 - Проценты по краткосрочным займам (в валюте)
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймамВал));
	
	// 67.06 - Проценты по долгосрочным долговым ценным бумагам
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПроцентыПроцентыПоДолгосрочнымДолговымЦеннымБумагам));
	
	// 67.26 - Проценты по долгосрочным долговым ценным бумагам (в валюте)
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымДолговымЦеннымБумагамВал));
	
	Возврат Результат;
	
КонецФункции

Функция СчетаПрочиеОбязательстваДолгосрочные()
	
	Результат = Новый Массив;
	
	// 76.07.1 - Расчеты по имущественному и личному страхованию
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.АрендныеОбязательства));
	
	// 76.27.1 - Арендные обязательства (в валюте)
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.АрендныеОбязательстваВал));
	
	// 76.37.1 - Арендные обязательства (в у.е.)
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.АрендныеОбязательстваУЕ));
	
	Возврат Результат;
	
КонецФункции

Функция СчетаПрочиеОбязательстваКраткосрочные()
	
	Результат = Новый Массив;
	
	// 76.НА - Расчеты по НДС при исполнении обязанностей налогового агента
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, Счет76НА());
	
	Возврат Результат;
	
КонецФункции

Функция СчетаОценочныеОбязательства()
	
	Результат = Новый Массив;
	
	// 96.01 - Оценочные обязательства по вознаграждениям работникам
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, Счет9601());
	
	// 96.09 - Резервы предстоящих расходов прочие
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, Счет9609());
	
	Возврат Результат;
	
КонецФункции

Функция Счет59()
	
	// 59 - Резервы под обесценение финансовых вложений
	Возврат БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РезервыПодОбесценениеФинансовыхВложений);
	
КонецФункции

Функция Счет63()
	
	// 63 - Резервы по сомнительным долгам
	Возврат БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам);
	
КонецФункции

Функция Счет76НА()
	
	// 76.НА - Расчеты по НДС при исполнении обязанностей налогового агента
	Возврат БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента);
	
КонецФункции

Функция Счет9601()
	
	// 96.01 - Оценочные обязательства по вознаграждениям работникам
	Возврат БухгалтерскийУчетПовтИсп.СчетаВИерархии(
		ПланыСчетов.Хозрасчетный.ОценочныеОбязательстваПоВознаграждениямРаботникам);
	
КонецФункции

Функция Счет9609()
	
	// 96.09 - Резервы предстоящих расходов прочие
	Возврат БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РезервыПредстоящихРасходовПрочие);
	
КонецФункции

Функция Счет97()
	
	// 97 - Расходы будущих периодов
	Возврат БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов);
	
КонецФункции

Функция СчетаСтроки1260()
	
	Результат = Новый Массив;
	
	// 19.06 - Акцизы по оплаченным материальным ценностям
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.АкцизыПоОплаченнымМатериальнымЦенностям));
	
	// 50.03 - Денежные документы
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ДенежныеДокументы));
	
	// 50.23 - Денежные документы (в валюте)
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ДенежныеДокументыВал));
	
	// 68.22 - НДС по экспорту к возмещению
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.НДСпоЭкспортуКВозмещению));
	
	// 76.ОТ - НДС, начисленный по отгрузке
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.НДСНачисленныйПоОтгрузке));
	
	// 94 - Недостачи и потери от порчи ценностей
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.НедостачиИПотериОтПорчиЦенностей));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли