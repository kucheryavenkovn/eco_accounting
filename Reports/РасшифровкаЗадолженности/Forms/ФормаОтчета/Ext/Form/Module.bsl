#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ПараметрыОбработчикаОжиданияАктуализации Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияСвойств(Отчет, Параметры);
	БухгалтерскиеОтчетыВызовСервера.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	БухгалтерскиеОтчеты.ИнициализироватьРежимВыгрузки(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтотОбъект,
		"БП.Отчет.РасшифровкаЗадолженности",
		"ФормаОтчета",
		НСтр("ru = 'Новости: Расшифровка задолженности'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 
			ПараметрыОбработчикаОжидания.ТекущийИнтервал,
			Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
		
	ИначеЕсли Отчет.РежимРасшифровки Тогда
		
		БухгалтерскийУчетКлиентПереопределяемый.ПослеФормированияОтчета(ЭтотОбъект);
		
	Иначе
		
		ПодключитьОбработчикОжидания("Подключаемый_СформироватьПриОткрытии",
			БухгалтерскиеОтчетыКлиент.ИнтервалЗапускаФормированияОтчетаПриОткрытии(),
			Истина);
		
		УстановитьАктуальностьПоляРезультат();
		
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	БухгалтерскиеОтчетыКлиент.ПередЗакрытием(ЭтотОбъект,
		Отказ,
		ЗавершениеРаботы,
		ТекстПредупреждения,
		СтандартнаяОбработка,
		Отчет.РежимРасшифровки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	БухгалтерскиеОтчетыКлиент.ПриЗакрытии(ЭтотОбъект, ЗавершениеРаботы);
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	БухгалтерскиеОтчетыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтотОбъект, Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки, ИспользуютсяСтандартныеНастройки)
	
	СсылкаНаДокумент = Неопределено;
	Если Параметры.Свойство("СсылкаНаДокумент", СсылкаНаДокумент) И ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
		ИспользуютсяСтандартныеНастройки = Истина;
	КонецЕсли;
	
	Если Отчет.РежимРасшифровки Тогда

		// Если отчет открывается в режиме расшифровки, то заполнять его поля значениями по умолчанию не надо,
		// они приходят извне.
		// Установим переключатель на форме согласно переданному варианту отчета.
		ВариантОтчета = НомерВариантаОтчета(КлючТекущегоВарианта);
	
	ИначеЕсли ИспользуютсяСтандартныеНастройки Тогда
			
		Если ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
			Отчет.Период = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаДокумент, "Дата");
		Иначе
			Отчет.Период = КонецМесяца(ОбщегоНазначения.ТекущаяДатаПользователя());
		КонецЕсли;
		
		Отчет.Организация = Параметры.Организация;
		
		Если Не ЗначениеЗаполнено(Отчет.Организация)
			И Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
			
			Отчет.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
			
		КонецЕсли;
		
		Отчет.КонтрольПоБУ = Параметры.КонтрольПоБУ;
		Отчет.ВариантДетализации = 0;
		
		ПредставлениеТекущегоВарианта = "";
		КлючТекущегоВарианта = "";
		
		Отчет.СчетаРасчетов.Загрузить(Отчеты.РасшифровкаЗадолженности.СчетаРасчетовПоУмолчанию());
		ЗаполнитьИнтервалыПоУмолчанию(ЭтотОбъект);
		
	Иначе
		
		ПользовательскиеНастройки = ПоместитьВоВременноеХранилище(Настройки, УникальныйИдентификатор);
		
		Если ЗначениеЗаполнено(КлючТекущегоВарианта) Тогда
			ВариантОтчета = НомерВариантаОтчета(КлючТекущегоВарианта);
		КонецЕсли;
		
		БухгалтерскиеОтчетыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(
			ЭтотОбъект,
			Настройки);

	КонецЕсли;

	Если ЗначениеЗаполнено(Отчет.Организация) Тогда
		ОбщегоНазначенияБПКлиентСервер.УстановитьЗначениеПолеОрганизация(
			ПолеОрганизация,
			Отчет.Организация,
			Отчет.ВключатьОбособленныеПодразделения);
	КонецЕсли;
	
	БухгалтерскиеОтчетыВызовСервера.ИнициализацияКомпоновщикаНастроек(ЭтотОбъект, , КлючТекущегоВарианта);
	
	Если Отчет.Группировка.Количество() = 0 Тогда
		ЗагрузитьПоляГруппировки();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	ОбновитьТекстЗаголовка(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(Настройки)
	
	БухгалтерскиеОтчетыВызовСервера.УстановитьНастройкиПоУмолчанию(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	БухгалтерскийУчетКлиентПереопределяемый.ОбработкаОповещенияАктуализации(ЭтотОбъект,
		Отчет.Организация,
		Отчет.Период,
		ИмяСобытия,
		Параметр,
		Источник);
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения")
		И ИсточникВыбора.ИмяФормы = "Отчет.РасшифровкаЗадолженности.Форма.НастройкаСчетовУчетаРасчетов"
		И ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		
		Отчет.СчетаРасчетов.Очистить();
		Для Каждого ТекущаяСтрока Из ВыбранноеЗначение Цикл
			НоваяСтрока = Отчет.СчетаРасчетов.Добавить();
			НоваяСтрока.СчетРасчетов = ТекущаяСтрока.Значение;
			НоваяСтрока.УчаствуетВРасчетах = ТекущаяСтрока.Пометка;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	УстановитьАктуальностьПоляРезультат();
	ОбновитьТекстЗаголовка(ЭтотОбъект);
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализацииАвтоматически(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантДетализацииПриИзменении(Элемент)
	
	// Проверим выбранные Дополнительные поля
	ЗапрещенныеПоля = ПолучитьЗапрещенныеПоля();
	Индекс = 0;
	Пока Индекс < Отчет.ДополнительныеПоля.Количество() Цикл
		
		ТекущееПоле = Отчет.ДополнительныеПоля[Индекс];
		Если ЗапрещенныеПоля.Найти(ТекущееПоле.Поле) <> Неопределено Тогда
			Отчет.ДополнительныеПоля.Удалить(ТекущееПоле);
		Иначе
			Индекс = Индекс + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьАктуальностьПоляРезультат();
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализацииАвтоматически(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеОрганизацияПриИзменении(Элемент)
	
	ОбщегоНазначенияБПКлиент.ПолеОрганизацияПриИзменении(Элемент, ПолеОрганизация,
		Отчет.Организация, Отчет.ВключатьОбособленныеПодразделения);
	
	УстановитьАктуальностьПоляРезультат();
	
	БухгалтерскиеОтчетыКлиент.ОрганизацияПриИзменении(ЭтотОбъект, Элемент);
	ОбновитьТекстЗаголовка(ЭтотОбъект);
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализацииАвтоматически(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеОрганизацияОткрытие(Элемент, СтандартнаяОбработка)
	
	ОбщегоНазначенияБПКлиент.ПолеОрганизацияОткрытие(Элемент, СтандартнаяОбработка,
		ПолеОрганизация, СоответствиеОрганизаций);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбщегоНазначенияБПКлиент.ПолеОрганизацияОбработкаВыбора(Элемент,
		ВыбранноеЗначение,
		СтандартнаяОбработка,
		СоответствиеОрганизаций,
		Отчет.Организация,
		Отчет.ВключатьОбособленныеПодразделения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПоляТабличногоДокумента

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	БухгалтерскиеОтчетыКлиент.ОбработкаРасшифровкиСтандартногоОтчета(ЭтотОбъект,
		Элемент,
		Расшифровка,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	// Не будем обрабатывать нажатие на правую кнопку мыши.
	// Покажем стандартное контекстное меню ячейки табличного документа.
	Расшифровка = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПриАктивизации(Элемент)
	
	БухгалтерскиеОтчетыКлиент.НачатьРасчетСуммыВыделенныхЯчеек(
		Элементы.Результат,
		ЭтотОбъект,
		"Подключаемый_РезультатПриАктивизацииПодключаемый");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовГруппыФормыПоказатели

&НаКлиенте
Процедура ВариантОтчетаПриИзменении(Элемент)
	
	ИнициализацияКомпоновщикаНастроек();
	УстановитьАктуальностьПоляРезультат();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольПоБУПриИзменении(Элемент)
	
	УстановитьАктуальностьПоляРезультат();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИнтервалы

&НаКлиенте
Процедура ИнтервалыПриИзменении(Элемент)
	
	Отчет.Интервалы.Сортировать("Значение Возр");
	
	ПерваяСтрока = Истина;
	ПредыдущееЗначение = 0;
	Для Каждого Интервал Из Отчет.Интервалы Цикл
		Если ПерваяСтрока Тогда
			Интервал.Представление = СтрШаблон(НСтр("ru = 'До %1 дней'"), Интервал.Значение);
			ПредыдущееЗначение = Интервал.Значение;
			ПерваяСтрока = Ложь;
		Иначе
			Интервал.Представление = СтрШаблон(НСтр("ru = 'От %1 до %2 дней'"), ПредыдущееЗначение + 1, Интервал.Значение);
			ПредыдущееЗначение = Интервал.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыГруппировка

&НаКлиенте
Процедура ГруппировкаПриИзменении(Элемент)
	
	УстановитьАктуальностьПоляРезультат();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	БухгалтерскиеОтчетыКлиент.ГруппировкаПередНачаломДобавления(ЭтотОбъект,
		Элемент,
		Отказ,
		Копирование,
		Родитель,
		Группа);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПередНачаломИзменения(Элемент, Отказ)
	
	БухгалтерскиеОтчетыКлиент.ГруппировкаПередНачаломИзменения(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаСнятьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Отчет.Группировка Цикл
		СтрокаТаблицы.Использование = Ложь;
	КонецЦикла;
	
	УстановитьАктуальностьПоляРезультат();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаУстановитьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Отчет.Группировка Цикл
		СтрокаТаблицы.Использование = Истина;
	КонецЦикла;
	
	УстановитьАктуальностьПоляРезультат();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтборы

&НаКлиенте
Процедура НастройкаСчетовУчетаРасчетовНажатие(Элемент)
	
	СчетаРасчетов = Новый СписокЗначений;
	Для Каждого ТекущаяСтрока Из Отчет.СчетаРасчетов Цикл
		Значение = Новый Структура("СчетРасчетов, УчаствуетВРасчетах");
		СчетаРасчетов.Добавить(ТекущаяСтрока.СчетРасчетов, , ТекущаяСтрока.УчаствуетВРасчетах);
	КонецЦикла;
	
	ПараметрыНастройки = Новый Структура;
	ПараметрыНастройки.Вставить("СчетаРасчетов", СчетаРасчетов);
	
	ОткрытьФорму("Отчет.РасшифровкаЗадолженности.Форма.НастройкаСчетовУчетаРасчетов",
		ПараметрыНастройки,
		ЭтотОбъект,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПриИзменении(Элемент)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПриИзменении(ЭтотОбъект, Элемент, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломДобавления(ЭтотОбъект, Элемент, Отказ, Копирование, Родитель, Группа);

КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломИзменения(Элемент, Отказ)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломИзменения(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПравоеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПравоеЗначениеНачалоВыбора(ЭтотОбъект,
		Элемент,
		ДанныеВыбора,
		СтандартнаяОбработка,
		ПолучитьПараметрыВыбораЗначенияОтбора());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДополнительныеПоля

&НаКлиенте
Процедура РазмещениеДополнительныхПолейПриИзменении(Элемент)
	
	УстановитьАктуальностьПоляРезультат();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляПриИзменении(Элемент)
	
	УстановитьАктуальностьПоляРезультат();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	БухгалтерскиеОтчетыКлиент.ДополнительныеПоляПередНачаломДобавления(ЭтотОбъект,
		Элемент,
		Отказ,
		Копирование,
		Родитель,
		Группа);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляПередНачаломИзменения(Элемент, Отказ)
	
	БухгалтерскиеОтчетыКлиент.ДополнительныеПоляПередНачаломИзменения(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляСнятьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Отчет.ДополнительныеПоля Цикл
		СтрокаТаблицы.Использование = Ложь;
	КонецЦикла;
	
	УстановитьАктуальностьПоляРезультат();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляУстановитьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Отчет.ДополнительныеПоля Цикл
		СтрокаТаблицы.Использование = Истина;
	КонецЦикла;
	
	УстановитьАктуальностьПоляРезультат();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСортировка

&НаКлиенте
Процедура СортировкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	БухгалтерскиеОтчетыКлиент.СортировкаПередНачаломДобавления(ЭтотОбъект, Элемент, Отказ, Копирование, Родитель, Группа);
	
КонецПроцедуры

&НаКлиенте
Процедура СортировкаПередНачаломИзменения(Элемент, Отказ)
	
	БухгалтерскиеОтчетыКлиент.СортировкаПередНачаломИзменения(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУсловноеОформление

&НаКлиенте
Процедура МакетОформленияПриИзменении(Элемент)
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(
		Отчет.КомпоновщикНастроек.Настройки,
		"МакетОформления",
		МакетОформления);
	
	УстановитьАктуальностьПоляРезультат();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьЗаголовокПриИзменении(Элемент)
	
	УстановитьАктуальностьПоляРезультат();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьЕдиницуИзмеренияПриИзменении(Элемент)
	
	УстановитьАктуальностьПоляРезультат();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьПримечанияПриИзменении(Элемент)
	
	УстановитьАктуальностьПоляРезультат();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьПодвалПриИзменении(Элемент)
	
	УстановитьАктуальностьПоляРезультат();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выгрузить(Команда)
	
	Если Элементы.Результат.ОтображениеСостояния.Видимость Тогда
		
		ТекущийЭлемент = Элементы.Сформировать;
		ПоказатьПредупреждение( , НСтр("ru = 'Нажмите ""Сформировать"" для получения отчета'"),
								, НСтр("ru = 'Отчет не сформирован'"));
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Результат",   Результат);
	ПараметрыОтчета.Вставить("Организация", Отчет.Организация);
	ПараметрыОтчета.Вставить("ВключатьОбособленныеПодразделения", Отчет.ВключатьОбособленныеПодразделения);
	ПараметрыОтчета.Вставить("Период",      Отчет.Период);
	
	Закрыть(ПараметрыОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	Если ПроверитьЗаполнение() Тогда
		ЗапуститьФормированиеОтчета();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтотОбъект,
		Команда
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьАктуальность()
	
	БухгалтерскийУчетКлиентПереопределяемый.ПроверитьАктуальность(ЭтотОбъект, Отчет.Организация, Отчет.Период);
	
КонецПроцедуры

&НаКлиенте
Процедура Актуализировать(Команда)
	
	БухгалтерскийУчетКлиентПереопределяемый.Актуализировать(ЭтотОбъект, Отчет.Организация, Отчет.Период);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеАктуализации()
	
	БухгалтерскийУчетКлиентПереопределяемый.ПроверитьВыполнениеАктуализацииОтчета(
		ЭтотОбъект,
		Отчет.Организация,
		Отчет.Период);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьАктуализацию(Команда)
	
	БухгалтерскийУчетКлиентПереопределяемый.ОтменитьАктуализацию(ЭтотОбъект, Отчет.Организация, Отчет.Период);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПриНеобходимостиАктуализацииОбработкаНавигационнойСсылки(Элемент, ТекстСсылка, СтандартнаяОбработка)
	
	ПараметрыАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыйПараметрыАктуализацииОтчета();
	ПараметрыАктуализации.Вставить("Организация",                       Отчет.Организация);
	ПараметрыАктуализации.Вставить("ВключатьОбособленныеПодразделения", Отчет.ВключатьОбособленныеПодразделения);
	ПараметрыАктуализации.Вставить("ДатаАктуальности",                  ДатаАктуальности);
	ПараметрыАктуализации.Вставить("ДатаОкончанияАктуализации",         Отчет.Период);
	
	ЗакрытиеМесяцаКлиент.ТекстПриНеобходимостиАктуализацииОбработкаНавигационнойСсылки(
		ТекстСсылка,
		СтандартнаяОбработка,
		ЭтотОбъект,
		ПараметрыАктуализации);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеМесяцаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "СформироватьОтчет" Тогда
		
		БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализации(ЭтотОбъект);
		Активизировать();
		СформироватьОтчет("");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	БухгалтерскиеОтчетыКлиент.ОтчетСохранитьКак(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьНажатие(Элемент)
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализации(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьЗавершениеАктуализации()
	
	БухгалтерскийУчетКлиентПереопределяемый.ПроверитьЗавершениеАктуализации(ЭтотОбъект, Отчет.Организация, Отчет.Период);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьНастройки(Команда)
	
	КнопкаДействия = ?(Элементы.Выгрузить.Видимость, Элементы.Выгрузить, Элементы.Сформировать);
	КнопкаДействия.КнопкаПоУмолчанию = Истина;
	СкрытьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройки(Команда)
	
	Элементы.ПрименитьНастройки.КнопкаПоУмолчанию = Истина;
	ОткрытьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИнтервалы(Команда)
	
	Если Отчет.Интервалы.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Текущие настройки интервалов будут очищены.
		|Продолжить?'");
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьИнтервалыПоУмолчаниюЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		Отчет.Интервалы.Очистить();
		ЗаполнитьИнтервалыПоУмолчанию(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьГруппировкуПоУмолчанию(Команда)
	
	Если Отчет.Группировка.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Текущие настройки группировки будут очищены.
		|Продолжить?'");
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьГруппировкуПоУмолчаниюЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		Отчет.Группировка.Очистить();
		ЗагрузитьПоляГруппировки();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	ПолеСумма = БухгалтерскиеОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		Результат, КэшВыделеннойОбласти);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПодготовленныеДанныеНаСервере()
	
	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	Результат         = РезультатВыполнения.Результат;
	ДанныеРасшифровки = РезультатВыполнения.ДанныеРасшифровки;
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	ДополнительныеСвойства = Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПоляГруппировки()
	
	Отчеты.РасшифровкаЗадолженности.ЗаполнитьПоляГруппировкиПоУмолчанию(
		Отчет.КомпоновщикНастроек.Настройки.Структура, Отчет.Группировка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьГруппировкуПоУмолчаниюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Отчет.Группировка.Очистить();
	ЗагрузитьПоляГруппировки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИнтервалыПоУмолчаниюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Отчет.Интервалы.Очистить();
	ЗаполнитьИнтервалыПоУмолчанию(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьИнтервалыПоУмолчанию(Форма)
	
	Отчет = Форма.Отчет;
	Отчет.Интервалы.Очистить();
	
	НоваяСтрока = Отчет.Интервалы.Добавить();
	НоваяСтрока.Значение      = 90;
	НоваяСтрока.Представление = Нстр("ru = 'До 90 дней'");
	
	НоваяСтрока = Отчет.Интервалы.Добавить();
	НоваяСтрока.Значение      = 180;
	НоваяСтрока.Представление = Нстр("ru = 'От 91 до 180 дней'");
	
	НоваяСтрока = Отчет.Интервалы.Добавить();
	НоваяСтрока.Значение      = 270;
	НоваяСтрока.Представление = Нстр("ru = 'От 181 до 270 дней'");
	
	НоваяСтрока = Отчет.Интервалы.Добавить();
	НоваяСтрока.Значение      = 365;
	НоваяСтрока.Представление = Нстр("ru = 'От 271 до 365 дней'");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьФормированиеОтчета()
	
	ОчиститьСообщения();
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	РезультатВыполнения = СформироватьОтчетНаСервере();
	Если Не РезультатВыполнения.Статус = "Выполнено" Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания",
			ПараметрыОбработчикаОжидания.ТекущийИнтервал,
			Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	Иначе
		
		Если Не РезультатВыполнения.Свойство("ОтказПроверкиЗаполнения") Тогда
			БухгалтерскийУчетКлиентПереопределяемый.ПослеФормированияОтчета(ЭтотОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
	Если РезультатВыполнения.Свойство("ОтказПроверкиЗаполнения") Тогда
		ПоказатьНастройки("");
	Иначе
		СкрытьНастройки();
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИнициализацияКомпоновщикаНастроек()
	
	ПользовательскиеНастройки = "";
	КлючТекущегоВарианта = ТекущийВариантОтчета(ВариантОтчета);
	БухгалтерскиеОтчетыВызовСервера.ИнициализацияКомпоновщикаНастроек(ЭтотОбъект, , КлючТекущегоВарианта);
	
	Отчет.СчетаРасчетов.Загрузить(Отчеты.РасшифровкаЗадолженности.СчетаРасчетовПоУмолчанию(ВариантОтчета = 1));
	Отчет.Группировка.Очистить();
	Отчет.ДополнительныеПоля.Очистить();
	ЗагрузитьПоляГруппировки();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекстЗаголовка(Форма)
	
	Отчет = Форма.Отчет;
	
	ДобавитьОрганизацию = ЗначениеЗаполнено(Отчет.Организация) И Форма.ИспользуетсяНесколькоОрганизаций;
	ПериодПредставление = Формат(Отчет.Период, "ДФ=dd.MM.yyyy; ДП=...");
	
	Если ДобавитьОрганизацию И ЗначениеЗаполнено(Форма.ПредставлениеТекущегоВарианта) Тогда
		
		ЗаголовокОтчета = СтрШаблон(НСтр("ru = '%1 на %2 %3'"),
			Форма.ПредставлениеТекущегоВарианта,
			ПериодПредставление,
			БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(Отчет.Организация, Отчет.ВключатьОбособленныеПодразделения));
		
	ИначеЕсли ДобавитьОрганизацию Тогда
		
		ЗаголовокОтчета = СтрШаблон(НСтр("ru = 'Расшифровка задолженности на %1 %2'"),
			ПериодПредставление,
			БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(Отчет.Организация, Отчет.ВключатьОбособленныеПодразделения));
		
	Иначе
		
		ЗаголовокОтчета = СтрШаблон(НСтр("ru = 'Расшифровка задолженности на %1'"), ПериодПредставление);
		
	КонецЕсли;
	
	Форма.Заголовок = ЗаголовокОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки()
	
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.НастройкиОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			
			ЗагрузитьПодготовленныеДанныеНаСервере();
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
			БухгалтерскийУчетКлиентПереопределяемый.ПослеФормированияОтчета(ЭтотОбъект);
			
		Иначе
			
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
			
		КонецЕсли;
		
	Исключение
		
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииПодключаемый()
	
	НеобходимоВычислятьНаСервере = Ложь;
	БухгалтерскиеОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		ПолеСумма, Результат, Элементы.Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииПодключаемый");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СформироватьПриОткрытии()
	
	ЗапуститьФормированиеОтчета();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗапрещенныеПоля(Режим = "") Экспорт
	
	СписокПолей = Новый Массив;
	
	СписокПолей.Добавить("UserFields");
	СписокПолей.Добавить("DataParameters");
	СписокПолей.Добавить("SystemFields");
	СписокПолей.Добавить("Расхождение");
	СписокПолей.Добавить("ДебиторКредиторГруппировка");
	
	// Данные поля всегда есть в отчете
	СписокПолей.Добавить("Период");
	СписокПолей.Добавить("Показатели");
	
	// Ресурсы, которые предусмотрены вариантом детализации по умолчанию
	ПоляВариантаДетализации = ПоляВыводаВариантаДетализации(Режим);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокПолей, ПоляВариантаДетализации);
	
	Если Режим = "Группировка" Тогда
		
		СписокПолей.Добавить("ВидЗадолженности");
		СписокПолей.Добавить("СтрокаБаланса");
		БухгалтерскиеОтчетыКлиент.ДобавитьПоляРесурсовВЗапрещенныеПоля(ЭтотОбъект, СписокПолей);
		
	ИначеЕсли ВариантОтчета = 1 Тогда
		
		СписокПолей.Добавить("ВидЗадолженности");
		
	Иначе
		
		СписокПолей.Добавить("СтрокаБаланса");
		
	КонецЕсли;
	
	Если Режим = "Отбор" Тогда
		СписокПолей.Добавить("СчетРасчетов");
	КонецЕсли;
	
	Возврат Новый ФиксированныйМассив(СписокПолей);
	
КонецФункции

&НаСервере
Функция ПоляВыводаВариантаДетализации(Режим)
	
	ПоляВариантаДетализации = Отчеты.РасшифровкаЗадолженности.ПоляВыводаВариантаДетализации(
		Отчет.ВариантДетализации,
		Отчет.Интервалы,
		Отчет.КонтрольПоБУ);
	
	ПодготовленныеПоляВарианта = Новый Массив;
	Если Режим <> "Отбор" Тогда
		Для Каждого ТекущееПоле Из ПоляВариантаДетализации Цикл
			Если ТипЗнч(ТекущееПоле.Значение) = Тип("СписокЗначений") Тогда
				Для Каждого ПолеГруппировки Из ТекущееПоле.Значение Цикл
					ПодготовленныеПоляВарианта.Добавить(ПолеГруппировки.Значение);
				КонецЦикла;
			Иначе
				ПодготовленныеПоляВарианта.Добавить(ТекущееПоле.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПоляВывода = Новый Массив;
	
	// Добавим поля из предыдущего формирования отчета
	Схема = ПолучитьИзВременногоХранилища(СхемаКомпоновкиДанных);
	
	// Все ресурсы по интервалам задолженности не должны быть доступны
	Для Каждого ТекущееПоле Из Схема.НаборыДанных.ДанныеОтчета.Элементы.ОсновныеСчета.Поля Цикл
		Если СтрНайти(ТекущееПоле.Поле, "СуммаЗадолженности") > 0 Тогда
			ПоляВывода.Добавить(ТекущееПоле.Поле);
		КонецЕсли;
	КонецЦикла;
	
	Если Режим = "Порядок" Тогда
		
		Для Каждого ТекущееПоле Из ПодготовленныеПоляВарианта Цикл
			ИндексПоля = ПоляВывода.Найти(ТекущееПоле);
			Если ИндексПоля <> Неопределено Тогда
				ПоляВывода.Удалить(ИндексПоля);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПоляВывода, ПодготовленныеПоляВарианта);
	КонецЕсли;
	
	Возврат ПоляВывода;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыВыбораЗначенияОтбора()
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Организация", Отчет.Организация);
	СписокПараметров.Вставить("Контрагент", Неопределено);
	СписокПараметров.Вставить("Договор", Неопределено);
	
	Возврат СписокПараметров;
	
КонецФункции

&НаКлиенте
Процедура СкрытьНастройки()
	
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.Отчет;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкамиПоУмолчанию(ЗаполняемыеНастройки) Экспорт
	Перем ЗаполнятьКоллекцию;
	
	Если ЗаполняемыеНастройки.Свойство("Показатели", ЗаполнятьКоллекцию) И ЗаполнятьКоллекцию Тогда
		Отчет.КонтрольПоБУ = ЗначениеЗаполнено(Параметры.СсылкаНаДокумент);
	КонецЕсли;
	
	Если ЗаполняемыеНастройки.Свойство("Группировка", ЗаполнятьКоллекцию) И ЗаполнятьКоллекцию Тогда
		Отчет.Группировка.Очистить();
		ЗагрузитьПоляГруппировки();
	КонецЕсли;
	
	Если ЗаполняемыеНастройки.Свойство("Интервалы", ЗаполнятьКоллекцию) И ЗаполнятьКоллекцию Тогда
		Отчет.Интервалы.Очистить();
		ЗаполнитьИнтервалыПоУмолчанию(ЭтотОбъект);
	КонецЕсли;
	
	Если ЗаполняемыеНастройки.Свойство("СчетаРасчетов", ЗаполнятьКоллекцию) И ЗаполнятьКоллекцию Тогда
		Отчет.СчетаРасчетов.Очистить();
		Отчет.СчетаРасчетов.Загрузить(Отчеты.РасшифровкаЗадолженности.СчетаРасчетовПоУмолчанию(ВариантОтчета = 1));
	КонецЕсли;
	
	Если ЗаполняемыеНастройки.Свойство("Заголовок", ЗаполнятьКоллекцию) И ЗаполнятьКоллекцию Тогда
		ОбновитьТекстЗаголовка(ЭтотОбъект);
	КонецЕсли;
	
	Если ЗаполняемыеНастройки.Свойство("Отбор", ЗаполнятьКоллекцию) И ЗаполнятьКоллекцию Тогда
		Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
	КонецЕсли;
	
	Если ЗаполняемыеНастройки.Свойство("УсловноеОформление") Тогда
		Схема = Отчеты.РасшифровкаЗадолженности.ПолучитьМакет("СхемаКомпоновкиДанных");
		Настройки = Схема.НастройкиПоУмолчанию;
		
		КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(
			Отчет.КомпоновщикНастроек.Настройки.УсловноеОформление, Настройки.УсловноеОформление);
	КонецЕсли;
	
	Если ЗаполняемыеНастройки.Свойство("ДополнительныеПоля", ЗаполнятьКоллекцию) И ЗаполнятьКоллекцию Тогда
		Отчет.ДополнительныеПоля.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьОтчетНаСервере() Экспорт
	
	Если ЗначениеЗаполнено(Отчет.Организация) И ПустаяСтрока(ПолеОрганизация) Тогда
		
		ОбщегоНазначенияБПКлиентСервер.УстановитьЗначениеПолеОрганизация(
			ПолеОрганизация,
			Отчет.Организация,
			Отчет.ВключатьОбособленныеПодразделения);
		
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Новый Структура("ЗаданиеВыполнено, ОтказПроверкиЗаполнения", Истина, Истина);
	КонецЕсли;
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", ВыводитьЗаголовок);
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВыводитьПодвал"   , ВыводитьПодвал);
	
	ПараметрыОтчета = Отчеты.РасшифровкаЗадолженности.ПустыеПараметрыКомпоновкиОтчета();
	Отчеты.РасшифровкаЗадолженности.ЗаполнитьПараметрыИзФормы(ПараметрыОтчета, ЭтотОбъект);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтотОбъект);
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне(
		"БухгалтерскиеОтчетыВызовСервера.СформироватьОтчет", ПараметрыОтчета, ПараметрыВыполнения);
	
	ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	АдресХранилища       = РезультатВыполнения.АдресРезультата;
	
	Если РезультатВыполнения.Статус = "Выполнено" Тогда
		ЗагрузитьПодготовленныеДанныеНаСервере();
	КонецЕсли;
	
	КнопкаДействия = ?(Элементы.Выгрузить.Видимость, Элементы.Выгрузить, Элементы.Сформировать);
	КнопкаДействия.КнопкаПоУмолчанию = Истина;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервереБезКонтекста
Функция НомерВариантаОтчета(КлючВарианта)
	
	НомерВарианта = 0;
	ИндексСтроки = 0;
	
	ВариантыНастроек = Отчеты.РасшифровкаЗадолженности.ВариантыНастроек();
	Для Каждого ТекущийВариант Из ВариантыНастроек Цикл
		
		Если ТекущийВариант.Имя = КлючВарианта Тогда
			НомерВарианта = ИндексСтроки;
			Прервать;
		КонецЕсли;
		
		ИндексСтроки = ИндексСтроки + 1;
		
	КонецЦикла;
	
	Возврат НомерВарианта;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекущийВариантОтчета(ВариантОтчета)
	
	ВариантыНастроек = Отчеты.РасшифровкаЗадолженности.ВариантыНастроек();
	Возврат ВариантыНастроек[ВариантОтчета].Имя;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Отчет = Форма.Отчет;
	
	Элементы.ГруппаНастройкаИнтервалов.Видимость = Отчет.ВариантДетализации <> 0;
	
	КнопкаДействия = ?(Элементы.Выгрузить.Видимость, Элементы.Выгрузить, Элементы.Сформировать);
	КнопкаДействия.КнопкаПоУмолчанию = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАктуальностьПоляРезультат()
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные).
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()
	
	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(
		ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);
	
КонецПроцедуры

#КонецОбласти