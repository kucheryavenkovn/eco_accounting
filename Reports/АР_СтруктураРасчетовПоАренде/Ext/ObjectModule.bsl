
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - Структура - см. возвращаемое значение ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПриЗагрузкеВариантаНаСервере = Истина;
	
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   Отказ - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Передается из параметров обработчика "как есть".
//
// См. также:
//   "УправляемаяФорма.ПриСозданииНаСервере" в синтакс-помощнике.
//
Процедура ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка) Экспорт
	
	КомпоновщикНастроекФормы = ЭтаФорма.Отчет.КомпоновщикНастроек;
	Параметры = ЭтаФорма.Параметры;
	
	Если Параметры.Свойство("Расшифровка") И Параметры.Расшифровка <> Неопределено Тогда
		ДанныеРасшифровки = ПолучитьИзВременногоХранилища(Параметры.Расшифровка.Данные);
		Элемент = ДанныеРасшифровки.Элементы[Параметры.Расшифровка.Идентификатор];
		ЗначенияПолей = Элемент.ПолучитьПоля();
		Поле = ЗначенияПолей[0].Поле;
		
		МассивПолей = Новый Массив;
		МассивПолей.Добавить("ГруппаДепозит.ДепозитПоДоговору");
		МассивПолей.Добавить("ДепозитВал.ДепозитПоДоговоруВал");
		МассивПолей.Добавить("ГруппаДепозит.ДепозитКОплате");
		МассивПолей.Добавить("ДепозитВал.ДепозитКОплатеВал");
		МассивПолей.Добавить("ГруппаДепозит.ОбщийДолгСУчетомОстаткаДепозита");
		МассивПолей.Добавить("ДепозитВал.ОбщийДолгСУчетомОстаткаДепозитаВал");
		МассивПолей.Добавить("ГруппаДепозит.ОбщийДолгСУчетомДепозитаКОплате");
		МассивПолей.Добавить("ДепозитВал.ОбщийДолгСУчетомДепозитаКОплатеВал");
		МассивПолей.Добавить("ГруппаДепозит.ОбщийДолгСУчетомОстаткаДепозитаИДепозитаКОплате");
		МассивПолей.Добавить("ДепозитВал.ОбщийДолгСУчетомОстаткаДепозитаИДепозитаКОплатеВал");
		Если МассивПолей.Найти(Поле) <> Неопределено Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	//Если Параметры.Свойство("ПараметрКоманды") Тогда
	//	ЭтаФорма.ФормаПараметры.Отбор.Вставить("ОбъектАренды", Параметры.ПараметрКоманды);
	//КонецЕсли;
	
КонецПроцедуры

// Вызывается в одноименном обработчике формы отчета после выполнения кода формы.
//
// Подробнее - см. ОтчетыПереопределяемый.ПередЗагрузкойВариантаНаСервере
//
Процедура ПриЗагрузкеВариантаНаСервере(ЭтаФорма, НовыеНастройкиКД) Экспорт
	
	Отчет = ЭтаФорма.Отчет;
	КомпоновщикНастроекФормы = Отчет.КомпоновщикНастроек;
	
	Параметры = ЭтаФорма.Параметры;
	
	Если Параметры.Свойство("Расшифровка") И Параметры.Расшифровка <> Неопределено Тогда
		
		МассивИсключаемыхПолей = Новый Массив;
		МассивИсключаемыхПолей.Добавить("ГруппаДепозит.ДепозитПоДоговору");
		МассивИсключаемыхПолей.Добавить("ДепозитВал.ДепозитПоДоговоруВал");
		МассивИсключаемыхПолей.Добавить("ГруппаДепозит.ДепозитКОплате");
		МассивИсключаемыхПолей.Добавить("ДепозитВал.ДепозитКОплатеВал");
		МассивИсключаемыхПолей.Добавить("ГруппаДепозит.ОбщийДолгСУчетомОстаткаДепозита");
		МассивИсключаемыхПолей.Добавить("ДепозитВал.ОбщийДолгСУчетомОстаткаДепозитаВал");
		МассивИсключаемыхПолей.Добавить("ГруппаДепозит.ОбщийДолгСУчетомДепозитаКОплате");
		МассивИсключаемыхПолей.Добавить("ДепозитВал.ОбщийДолгСУчетомДепозитаКОплатеВал");
		МассивИсключаемыхПолей.Добавить("ГруппаДепозит.ОбщийДолгСУчетомОстаткаДепозитаИДепозитаКОплате");
		МассивИсключаемыхПолей.Добавить("ДепозитВал.ОбщийДолгСУчетомОстаткаДепозитаИДепозитаКОплатеВал");
		
		ДанныеРасшифровки = ПолучитьИзВременногоХранилища(Параметры.Расшифровка.Данные);
		Элемент = ДанныеРасшифровки.Элементы[Параметры.Расшифровка.Идентификатор];
		ЗначенияПолей = Элемент.ПолучитьПоля();
		Поле = ЗначенияПолей[0].Поле;
		Ном = Найти(Поле, ".");
		Если Ном > 0 Тогда
			Группа = Лев(Поле, Ном - 1);
			Если Группа = "ОсновнойДолг"
				ИЛИ Группа = "ОсновнойДолгВал"
				ИЛИ Группа = "ГруппаПени"
				ИЛИ Группа = "ПениВал"
				ИЛИ Группа = "ГруппаДепозит"
				ИЛИ Группа = "ДепозитВал"
				ИЛИ Группа = "ОбщаяСумма"
				ИЛИ Группа = "ОбщаяСуммаВал" Тогда
				Для каждого ВыбранныеПоля Из КомпоновщикНастроекФормы.ПользовательскиеНастройки.Элементы Цикл
					Если ТипЗнч(ВыбранныеПоля) = Тип("ВыбранныеПоляКомпоновкиДанных") Тогда
						Для каждого ГруппаПолей Из ВыбранныеПоля.Элементы Цикл
							Если ТипЗнч(ГруппаПолей) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
								Для каждого Элемент Из ГруппаПолей.Элементы Цикл
									Если ТипЗнч(Элемент) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
										Если Найти(Строка(Элемент.Поле), Группа) = 0 Тогда
											Элемент.Использование = Ложь;
										ИначеЕсли МассивИсключаемыхПолей.Найти(Строка(Элемент.Поле)) <> Неопределено Тогда
											Элемент.Использование = Ложь;
										КонецЕсли;
									КонецЕсли;
								КонецЦикла;
							ИначеЕсли ТипЗнч(ГруппаПолей) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
								Если Найти(Строка(ГруппаПолей.Поле), Группа) = 0 Тогда
									ГруппаПолей.Использование = Ложь;
								ИначеЕсли МассивИсключаемыхПолей.Найти(Строка(ГруппаПолей.Поле)) <> Неопределено Тогда
									ГруппаПолей.Использование = Ложь;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				// Добавим отборы, чтобы лишние регистраторы убрать
				МассивПолей = Новый Массив;
				Если Группа = "ОсновнойДолг"
					ИЛИ Группа = "ОсновнойДолгВал" Тогда
					МассивПолей.Добавить("ОсновнойДолг.ОсновнойДолгНачислено");
					МассивПолей.Добавить("ОсновнойДолг.ОсновнойДолгОплачено");
				ИначеЕсли Группа = "ГруппаПени"
					ИЛИ Группа = "ПениВал" Тогда
					МассивПолей.Добавить("ГруппаПени.ПениНачислено");
					МассивПолей.Добавить("ГруппаПени.ПениОплачено");
				ИначеЕсли Группа = "ОбщаяСумма"
					ИЛИ Группа = "ОбщаяСуммаВал" Тогда
					МассивПолей.Добавить("ОсновнойДолг.ОсновнойДолгНачислено");
					МассивПолей.Добавить("ОсновнойДолг.ОсновнойДолгОплачено");
					МассивПолей.Добавить("ГруппаПени.ПениНачислено");
					МассивПолей.Добавить("ГруппаПени.ПениОплачено");
				ИначеЕсли Группа = "ГруппаДепозит"
					ИЛИ Группа = "ДепозитВал" Тогда
					МассивПолей.Добавить("ГруппаДепозит.ДепозитНачальныйОстаток");
					МассивПолей.Добавить("ГруппаДепозит.ДепозитОплачено");
					МассивПолей.Добавить("ГруппаДепозит.ДепозитЗачтено");
					МассивПолей.Добавить("ГруппаДепозит.ДепозитКонечныйОстаток");
				КонецЕсли;
				Если МассивПолей.Количество() Тогда
					ГруппаИЛИ = КомпоновщикНастроекФормы.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
					ГруппаИЛИ.Использование = Истина;
					ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
					Для каждого Поле Из МассивПолей Цикл
						ЭлементОтбора = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
						ЭлементОтбора.Использование = Истина;
						ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Поле);
						ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	НовыеНастройкиКД = КомпоновщикНастроекФормы.Настройки;
	
КонецПроцедуры

//
// Копирует отбор компоновки данных добавлением к существующим
//
Процедура СкопироватьОтборКомпоновкиДанных(ГруппаПриемник, ГруппаИсточник) 
	
	КоллекцияИсточник = ГруппаИсточник.Элементы;
	КоллекцияПриемник = ГруппаПриемник.Элементы;
	Для Каждого ЭлементИсточник Из КоллекцияИсточник Цикл
		
		Если ТипЗнч(ЭлементИсточник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
			ИЛИ Лев(Строка(ЭлементИсточник.ЛевоеЗначение), 10) = "Контрагент"
			ИЛИ Лев(Строка(ЭлементИсточник.ЛевоеЗначение), 7) = "Договор"
			ИЛИ Лев(Строка(ЭлементИсточник.ЛевоеЗначение), 11) = "Организация" Тогда
			ЭлементПриемник = КоллекцияПриемник.Добавить(ТипЗнч(ЭлементИсточник));
			ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
			
			// В некоторых элементах коллекции необходимо заполнить другие коллекции
			Если ТипЗнч(ЭлементИсточник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				СкопироватьОтборКомпоновкиДанных(ЭлементПриемник, ЭлементИсточник);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьВнешниеНаборыДанных(НачалоПериода, КонецПериода)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.АР_ЗаключениеДоговораАренды"));
	МассивТипов.Добавить(Тип("ДокументСсылка.АР_ДополнительноеСоглашение"));
	ТаблицаДанных.Колонки.Добавить("Регистратор", Новый ОписаниеТипов(МассивТипов));
	ТаблицаДанных.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДанных.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаДанных.Колонки.Добавить("УслугаАренды", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаДанных.Колонки.Добавить("ОбъектАренды", Новый ОписаниеТипов("СправочникСсылка.АР_ОбъектыАренды"));
	ТаблицаДанных.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаДанных.Колонки.Добавить("ВидЗадолженности", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("ПериодОплаты", Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("Депозит", Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("Пени", Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("ДепозитПоДоговору", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТаблицаДанных.Колонки.Добавить("ДепозитПоДоговоруВал", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
		 
	СхемаКомпоновкиДанныхОтбора = ПолучитьМакет("НастройкаОтбора");
	КомпоновщикНастроекОтбора = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекОтбора.Инициализировать(
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанныхОтбора)
	);
	
	КомпоновщикНастроекОтбора.ЗагрузитьНастройки(СхемаКомпоновкиДанныхОтбора.НастройкиПоУмолчанию);
	НастройкиКомпоновкиОтбора = КомпоновщикНастроекОтбора.ПолучитьНастройки();
	НастройкиКомпоновки = КомпоновщикНастроек.ПолучитьНастройки();
	СкопироватьОтборКомпоновкиДанных(НастройкиКомпоновкиОтбора.Отбор, НастройкиКомпоновки.Отбор);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ТаблицаЗначений = Новый ТаблицаЗначений;
	МассивДоговоров = Новый Массив;
	Попытка 
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанныхОтбора, НастройкиКомпоновкиОтбора, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
				
		ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		
		МассивДоговоров = ТаблицаЗначений.ВыгрузитьКолонку("ДоговорКонтрагента");
	Исключение
		//Возврат ;
	КонецПопытки;
	
	Для каждого Договор Из МассивДоговоров Цикл
		Если Не ЗначениеЗаполнено(Договор) Тогда
			Продолжить;
		КонецЕсли;
		ДанныеПоДепозиту = ПолучитьДанныеПоДепозиту(Договор, КонецПериода);
		Если Не ЗначениеЗаполнено(ДанныеПоДепозиту.ДепозитПоДоговору) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаДанных.Добавить();
		НоваяСтрока.Регистратор = ДанныеПоДепозиту.Регистратор;
		НоваяСтрока.Организация = Договор.Организация;
		НоваяСтрока.Контрагент = Договор.Владелец;
		НоваяСтрока.ДоговорКонтрагента = Договор;
		НоваяСтрока.ВидЗадолженности = "Депозит";
		НоваяСтрока.ДепозитПоДоговору = ДанныеПоДепозиту.ДепозитПоДоговору;
		НоваяСтрока.ДепозитПоДоговоруВал = ДанныеПоДепозиту.ДепозитПоДоговоруВал;
		НоваяСтрока.Депозит = Истина;
	КонецЦикла;
			
	Возврат Новый Структура("ТаблицаДанных", ТаблицаДанных);
	
КонецФункции

Функция ПолучитьДанныеПоДепозиту(Договор, Период)
	
	Результат = Новый Структура("ДепозитПоДоговору, ДепозитПоДоговоруВал, Регистратор", 0, 0, Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	АР_СтавкиСрезПоследних.Регистратор КАК Регистратор,
	|	ЕСТЬNULL(АР_СтавкиСрезПоследних.Регистратор.УчитыватьЗалог, ЛОЖЬ) КАК УчитыватьЗалог,
	|	АР_СтавкиСрезПоследних.Регистратор.СуммаЗалога КАК СуммаЗалога,
	|	АР_СтавкиСрезПоследних.Регистратор.ВалютаДепозита КАК ВалютаДепозита,
	|	АР_СтавкиСрезПоследних.Договор.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
	|ИЗ
	|	РегистрСведений.АР_Ставки.СрезПоследних(
	|			&Период,
	|			Договор = &Договор
	|				И (Регистратор ССЫЛКА Документ.АР_ЗаключениеДоговораАренды
	|					ИЛИ Регистратор ССЫЛКА Документ.АР_ДополнительноеСоглашение)) КАК АР_СтавкиСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	АР_СтавкиСрезПоследних.Период УБЫВ";
	
	Запрос.УстановитьПараметр("Период", ?(ЗначениеЗаполнено(Период), КонецДня(Период), Период));
	Запрос.УстановитьПараметр("Договор", Договор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Результат.Регистратор = Выборка.Регистратор;
		
		Если Не Выборка.УчитыватьЗалог Тогда
			Возврат Результат;
		КонецЕсли;
				
		ДатаОкончанияДоговора = ПолучитьДатуОкончанияДоговора(Договор);
		Если НачалоДня(Период) > ДатаОкончанияДоговора
			И НачалоДня(ТекущаяДата()) > ДатаОкончанияДоговора Тогда
			Возврат Результат;
		КонецЕсли;
		
		ЗапросВзаиморасчеты = Новый Запрос;
		ЗапросВзаиморасчеты.Текст =
		"ВЫБРАТЬ
		|	АР_ВзаиморасчетыПоАрендеОбороты.СуммаРасход КАК Сумма,
		|	АР_ВзаиморасчетыПоАрендеОбороты.СуммаВзаиморасчетовРасход КАК СуммаВзаиморасчетов,
		|	0 КАК СуммаДепозит,
		|	АР_ВзаиморасчетыПоАрендеОбороты.Период КАК Период
		|ИЗ
		|	РегистрНакопления.АР_ВзаиморасчетыПоАренде.Обороты(
		|			,
		|			&Период,
		|			День,
		|			ДоговорКонтрагента = &Договор
		|				И Депозит) КАК АР_ВзаиморасчетыПоАрендеОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		ЗапросВзаиморасчеты.УстановитьПараметр("Период", КонецДня(Период));
		ЗапросВзаиморасчеты.УстановитьПараметр("Договор", Договор);
		
		ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
		Если Не ЗначениеЗаполнено(Выборка.ВалютаДепозита) Тогда
			ВалютаДепозита = ВалютаРегл;
		Иначе
			ВалютаДепозита = Выборка.ВалютаДепозита;
		КонецЕсли;
		
		ТаблицаРасчетов = ЗапросВзаиморасчеты.Выполнить().Выгрузить();
		Для каждого СтрокаТаб Из ТаблицаРасчетов Цикл
			Если ВалютаДепозита = ВалютаРегл Тогда
				СтрокаТаб.СуммаДепозит = СтрокаТаб.Сумма;
			ИначеЕсли ВалютаДепозита = Выборка.ВалютаВзаиморасчетов Тогда
				СтрокаТаб.СуммаДепозит = СтрокаТаб.СуммаВзаиморасчетов;
			Иначе
				СтруктураКурса = АР_ПроцедурыНачисленияПереопределяемый.ПолучитьКурсВалюты(ВалютаДепозита, СтрокаТаб.Период, Договор);
				СтрокаТаб.СуммаДепозит = СтрокаТаб.Сумма / СтруктураКурса.Курс;
			КонецЕсли;
		КонецЦикла;
		СуммаИтого = ТаблицаРасчетов.Итог("Сумма");
		СуммаВалИтого = ТаблицаРасчетов.Итог("СуммаВзаиморасчетов");
		СуммаДепозитИтого = ТаблицаРасчетов.Итог("СуммаДепозит");
		
		Если СуммаДепозитИтого <= Выборка.СуммаЗалога Тогда
			КурсДепозит = АР_ПроцедурыНачисленияПереопределяемый.ПолучитьКурсВалюты(ВалютаДепозита, Период, Договор);
			КурсВал = АР_ПроцедурыНачисленияПереопределяемый.ПолучитьКурсВалюты(Выборка.ВалютаВзаиморасчетов, Период, Договор);
			Результат.ДепозитПоДоговору = СуммаИтого + (Выборка.СуммаЗалога - СуммаДепозитИтого) * КурсДепозит.Курс;
			Результат.ДепозитПоДоговоруВал = СуммаВалИтого + (Выборка.СуммаЗалога - СуммаДепозитИтого) * КурсДепозит.Курс/КурсВал.Курс;
		Иначе
			Сумма = 0;
			СуммаВал = 0;
			СуммаДепозит = 0;
			Для каждого СтрокаРасчетов Из ТаблицаРасчетов Цикл
				Если СуммаДепозитИтого - СуммаДепозит - СтрокаРасчетов.СуммаДепозит <= Выборка.СуммаЗалога Тогда
					Результат.ДепозитПоДоговору = СуммаИтого - Сумма + (Выборка.СуммаЗалога - СуммаДепозитИтого + СуммаДепозит) * СтрокаРасчетов.Сумма/СтрокаРасчетов.СуммаДепозит;
					Результат.ДепозитПоДоговоруВал = СуммаВалИтого - СуммаВал + (Выборка.СуммаЗалога - СуммаДепозитИтого + СуммаДепозит) * СтрокаРасчетов.СуммаВзаиморасчетов/СтрокаРасчетов.СуммаДепозит;
					Прервать;
				Иначе
					Сумма = Сумма + СтрокаРасчетов.Сумма;
					СуммаВал = СуммаВал + СтрокаРасчетов.СуммаВзаиморасчетов;
					СуммаДепозит = СуммаДепозит + СтрокаРасчетов.СуммаДепозит;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДатуОкончанияДоговора(ДоговорКонтрагента)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(АР_СтатусыОбъектовАренды.ДатаОкончанияАренды) КАК ДатаОкончанияАренды
	|ИЗ
	|	РегистрСведений.АР_СтатусыОбъектовАренды.СрезПоследних(, Договор = &Договор) КАК АР_СтатусыОбъектовАренды";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат ?(ЗначениеЗаполнено(Выборка.ДатаОкончанияАренды), Выборка.ДатаОкончанияАренды, Дата(1, 1, 1));	
	КонецЕсли;
	
	Возврат Дата(1, 1, 1);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
	Период = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Период");
	//Периодичность = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Периодичность");
	
	ДокументРезультат.Очистить();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	ВнешниеНаборыДанных = ПолучитьВнешниеНаборыДанных(Период.Значение.ДатаНачала, Период.Значение.ДатаОкончания);
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	ПроцессорВывода.НачатьВывод();
	ЭлементРезультата = ПроцессорКомпоновки.Следующий();
	Пока ЭлементРезультата <> Неопределено Цикл
		ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
		ЭлементРезультата = ПроцессорКомпоновки.Следующий();
	КонецЦикла;
	ПроцессорВывода.ЗакончитьВывод();
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
