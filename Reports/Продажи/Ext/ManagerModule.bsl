#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	ДоступКПлануСчетов = УправлениеДоступомБПВызовСервера.ПравоДоступаКДаннымБухгалтерии();
	
	Параметры = Новый Структура();
	Параметры.Вставить("ИспользоватьПередКомпоновкойМакета",          Истина);
	Параметры.Вставить("ИспользоватьПослеКомпоновкиМакета",           Ложь);
	Параметры.Вставить("ИспользоватьПослеВыводаРезультата",           Истина);
	Параметры.Вставить("ИспользоватьДанныеРасшифровки",               Истина);
	Параметры.Вставить("ИспользоватьРасширенныеПараметрыРасшифровки", Истина);
	Параметры.Вставить("ИспользоватьПривилегированныйРежим",          ДоступКПлануСчетов);
	
	Возврат Параметры;
	
КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета) Экспорт 
	
	Если ПараметрыОтчета.КлючТекущегоВарианта = "ПродажиПоКонтрагентамПоОплате" Тогда
		ТекстПоОплате = " " + НСтр("ru='(по оплате)'");
	Иначе
		ТекстПоОплате = "";
	КонецЕсли;
	
	Возврат НСтр("ru='Продажи'") + ТекстПоОплате + БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	
	СчетаКассы = Новый Массив;
	СчетаКассы.Добавить(ПланыСчетов.Хозрасчетный.Касса);                          // 50
	СчетаКассы.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями); // 62.Р
	СчетаКассы.Добавить(ПланыСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам); //57.03
	
	СчетаКассы = БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаКассы);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СчетаКассы", СчетаКассы);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СчетаВыручки", БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Выручка));
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ДоговорыПоСертификатам", ДоговорыПоСертификатам(ПараметрыОтчета.Организация));
	
	Периодичность = БухгалтерскиеОтчетыКлиентСервер.ПолучитьЗначениеПериодичности(ПараметрыОтчета.Периодичность, ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);
	
	СхемаЭталон = ПолучитьМакет("СхемаКомпоновкиДанных");
	ТекстЗапроса = СхемаЭталон.НаборыДанных.Продажи.Запрос;
	
	ПериодичностьОтчета = Новый Соответствие;
	ПериодичностьОтчета.Вставить(6, "ДЕНЬ");
	ПериодичностьОтчета.Вставить(9, "МЕСЯЦ");
	ПериодичностьОтчета.Вставить(10, "КВАРТАЛ");
	ПериодичностьОтчета.Вставить(11, "ПОЛУГОДИЕ");
	ПериодичностьОтчета.Вставить(12, "ГОД");
	
	Схема.НаборыДанных.Продажи.Запрос = СтрЗаменить(ТекстЗапроса, ".ПериодДень", ".Период" + ПериодичностьОтчета.Получить(Периодичность));
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Периодичность", Периодичность);
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(ПараметрыОтчета.НачалоПериода));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПараметрПериод", КонецДня(ПараметрыОтчета.КонецПериода));
	Иначе
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПараметрПериод", КонецДня(ТекущаяДатаСеанса()));
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ОпределятьСуммуПоОплате", ПараметрыОтчета.ПоказательОпределятьСуммуПоОплате);
	
	СчетаДенежныхСредств = Новый Массив;
	СчетаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.Касса);
	СчетаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями);
	СчетаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	СчетаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);
	СчетаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам);
	СчетаДенежныхСредств = БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаДенежныхСредств);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СчетаДенежныхСредств", СчетаДенежныхСредств);
	
	СчетаРасчетовСПокупателями = Новый Массив;
	СчетаРасчетовСПокупателями.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками);
	СчетаРасчетовСПокупателями.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками);
	СчетаРасчетовСПокупателями.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиВал);
	СчетаРасчетовСПокупателями.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиУЕ);
	СчетаРасчетовСПокупателями.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами);
	СчетаРасчетовСПокупателями = БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаРасчетовСПокупателями);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СчетаРасчетовСКонтрагентами", СчетаРасчетовСПокупателями);
	
	ВыводитьДиаграмму = Неопределено;
	
	Если НЕ ПараметрыОтчета.Свойство("ВыводитьДиаграмму", ВыводитьДиаграмму) Тогда
		
		ВыводитьДиаграмму = Истина;
		
	КонецЕсли;
	
	Таблица   = Неопределено;
	ДиаграммаСумма = Неопределено;
	ДиаграммаКоличество = Неопределено;
	Для Каждого ЭлементСтруктуры Из КомпоновщикНастроек.Настройки.Структура Цикл
		Если ЭлементСтруктуры.Имя = "Таблица" Тогда
			Таблица = ЭлементСтруктуры;
		ИначеЕсли ЭлементСтруктуры.Имя = "ДиаграммаСумма" Тогда
			ДиаграммаСумма = ЭлементСтруктуры;
		ИначеЕсли ЭлементСтруктуры.Имя = "ДиаграммаКоличество" Тогда
			ДиаграммаКоличество = ЭлементСтруктуры;
		КонецЕсли;
	КонецЦикла;
	
	Если ДиаграммаСумма <> Неопределено Тогда
		
		Если ВыводитьДиаграмму И ПараметрыОтчета.ПоказательСумма Тогда
			
			ДиаграммаСумма.Точки.Очистить();
			ГруппировкаПериод = ДиаграммаСумма.Точки.Добавить();
			ПолеГруппировки = ГруппировкаПериод.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование = Истина;
			ПолеГруппировки.Поле          = Новый ПолеКомпоновкиДанных("Период");
			ПолеГруппировки.ТипДополнения = БухгалтерскиеОтчетыВызовСервера.ПолучитьТипДополненияПоИнтервалу(Периодичность);
			ПолеГруппировки.НачалоПериода = НачалоДня(ПараметрыОтчета.НачалоПериода);
			ПолеГруппировки.КонецПериода  = КонецДня(ПараметрыОтчета.КонецПериода);
			
			ГруппировкаПериод.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			ПорядокПериод = ГруппировкаПериод.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			ПорядокПериод.Поле = ПолеГруппировки.Поле;
			
			// Группировка
			ДиаграммаСумма.Серии.Очистить();
			Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
				Если ПолеВыбраннойГруппировки.Использование Тогда
					Группировка = ДиаграммаСумма.Серии.Добавить();
					ЗаполнитьГруппировкуДиаграммы(ПолеВыбраннойГруппировки, Группировка);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			ДиаграммаСумма.Использование = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДиаграммаКоличество <> Неопределено Тогда
		
		Если ВыводитьДиаграмму И ПараметрыОтчета.ПоказательКоличество Тогда
			
			ДиаграммаКоличество.Точки.Очистить();
			ГруппировкаПериод = ДиаграммаКоличество.Точки.Добавить();
			ПолеГруппировки = ГруппировкаПериод.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование = Истина;
			ПолеГруппировки.Поле          = Новый ПолеКомпоновкиДанных("Период");
			ПолеГруппировки.ТипДополнения = БухгалтерскиеОтчетыВызовСервера.ПолучитьТипДополненияПоИнтервалу(Периодичность);
			ПолеГруппировки.НачалоПериода =	НачалоДня(ПараметрыОтчета.НачалоПериода);
			ПолеГруппировки.КонецПериода  = КонецДня(ПараметрыОтчета.КонецПериода);
			
			ГруппировкаПериод.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			ПорядокПериод = ГруппировкаПериод.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			ПорядокПериод.Поле = ПолеГруппировки.Поле;
			
			// Группировка
			ДиаграммаКоличество.Серии.Очистить();
			Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
				Если ПолеВыбраннойГруппировки.Использование Тогда
					Группировка = ДиаграммаКоличество.Серии.Добавить();
					ЗаполнитьГруппировкуДиаграммы(ПолеВыбраннойГруппировки, Группировка);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			ДиаграммаКоличество.Использование = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Таблица <> Неопределено Тогда
		
		Таблица.Колонки.Очистить();
		ГруппировкаПериод = Таблица.Колонки.Добавить();
		ПолеГруппировки = ГруппировкаПериод.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование = Истина;
		ПолеГруппировки.Поле          = Новый ПолеКомпоновкиДанных("Период");
		ПолеГруппировки.ТипДополнения = БухгалтерскиеОтчетыВызовСервера.ПолучитьТипДополненияПоИнтервалу(Периодичность);
		ПолеГруппировки.НачалоПериода = НачалоДня(ПараметрыОтчета.НачалоПериода);
		ПолеГруппировки.КонецПериода  = КонецДня(ПараметрыОтчета.КонецПериода);
		
		ГруппировкаПериод.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		ПорядокПериод = ГруппировкаПериод.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПорядокПериод.Поле = ПолеГруппировки.Поле;
		
		// Группировка
		Таблица.Строки.Очистить();
		Группировка = Таблица.Строки;
		Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
			Если ПолеВыбраннойГруппировки.Использование Тогда
				
				Если ТипЗнч(Группировка) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") Тогда
					Группировка = Группировка.Добавить();
				Иначе
					Группировка = Группировка.Структура.Добавить();
				КонецЕсли;
				БухгалтерскиеОтчетыВызовСервера.ЗаполнитьГруппировку(ПолеВыбраннойГруппировки, Группировка);
				
				ПолеОтбора = Новый ПолеКомпоновкиДанных("Сумма");
				НовыйЭлемент = Группировка.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйЭлемент.Использование  = Истина;
				НовыйЭлемент.ЛевоеЗначение  = ПолеОтбора;
				НовыйЭлемент.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
				НовыйЭлемент.ПравоеЗначение = 0;
				ПараметрВыводитьОтбор = Группировка.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор");
				ПараметрВыводитьОтбор.Использование = Истина;
				ПараметрВыводитьОтбор.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
				
			КонецЕсли;
		КонецЦикла;
		
		Если ПараметрыОтчета.ПоказательКоличество И ПараметрыОтчета.ПоказательСумма
			И НЕ ПараметрыОтчета.ПоказательОпределятьСуммуПоОплате Тогда
			ГруппировкаКолонки = Таблица.Колонки;
			Для Каждого ПолеВыбраннойГруппировки Из ГруппировкаКолонки Цикл
				Если ПолеВыбраннойГруппировки.Использование Тогда
					ПолеВыбраннойГруппировки.Имя = "ПериодКоличествоИСумма";
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ПолеКоличество = Новый ПолеКомпоновкиДанных("Количество");
		ПолеСумма = Новый ПолеКомпоновкиДанных("Сумма");
		
		Для Каждого ЭлементВыбора Из Таблица.Выбор.Элементы Цикл
			Если ЭлементВыбора.Поле = ПолеКоличество Тогда
				ЭлементВыбора.Использование = ПараметрыОтчета.ПоказательКоличество И НЕ ПараметрыОтчета.ПоказательОпределятьСуммуПоОплате;
			КонецЕсли;
			Если ЭлементВыбора.Поле = ПолеСумма Тогда
				ЭлементВыбора.Использование = ПараметрыОтчета.ПоказательСумма;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
		
	// Дополнительные данные
	БухгалтерскиеОтчетыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
	Для Каждого Рисунок Из Результат.Рисунки Цикл
		
		Если ТипЗнч(Рисунок.Объект) <> Тип("Диаграмма") Тогда
			Продолжить;
		КонецЕсли;
		
		Диаграмма = Рисунок.Объект;
		
		Диаграмма.МаксимумСерий = МаксимумСерий.Ограничено;
		Диаграмма.МаксимумСерийКоличество = 6; // 5 топовых + 1 прочие
		
		Диаграмма.СводнаяСерия.Текст = НСтр("ru = 'Прочие'");
		Диаграмма.СводнаяСерия.Цвет  = WebЦвета.ТусклоСерый;
		
	КонецЦикла;
	
	БухгалтерскиеОтчетыВызовСервера.ИзменитьРазмерДиаграмм(Результат, 0.85, 0.75);
	
	ВывестиПримечания(ПараметрыОтчета, Результат);
	
КонецПроцедуры

Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	
	ПродажиПоНоменклатурнымГруппам = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПродажиПоНоменклатурнымГруппам");
	ПродажиПоНоменклатурнымГруппам.ФункциональныеОпции.Добавить("ИспользоватьНесколькоНоменклатурныхГрупп");
	ПродажиПоНоменклатурнымГруппам.Размещение.Вставить(Метаданные.Подсистемы.Руководителю.Подсистемы.Продажи, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПродажиПоНоменклатуре").Размещение.Вставить(Метаданные.Подсистемы.Руководителю.Подсистемы.Продажи, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПродажиПоКонтрагентам").Размещение.Вставить(Метаданные.Подсистемы.Руководителю.Подсистемы.Продажи, "");
	
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	
КонецПроцедуры

//Процедура используется подсистемой варианты отчетов
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	ВариантыНастроек = ВариантыНастроек();
	Для Каждого Вариант Из ВариантыНастроек Цикл
		Настройки.ОписаниеВариантов.Вставить(Вариант.Имя,Вариант.Представление);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыРасшифровкиОтчета(Адрес, Расшифровка, ПараметрыРасшифровки) Экспорт
	
	// Инициализируем список мунктов меню
	СписокПунктовМеню = Новый СписокЗначений();
	
	// Заполниим соответствие полей которые мы хотим получить из данных расшифровки
	СоответствиеПолей = Новый Соответствие;
	ДанныеОтчета = ПолучитьИзВременногоХранилища(Адрес);
	
	ЗначениеРасшифровки = ДанныеОтчета.ДанныеРасшифровки.Элементы[Расшифровка];
	Если ТипЗнч(ЗначениеРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Для Каждого ПолеРасшифровки ИЗ ЗначениеРасшифровки.ПолучитьПоля() Цикл
			Если ЗначениеЗаполнено(ПолеРасшифровки.Значение) Тогда
				ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Истина);
				ПараметрыРасшифровки.Вставить("Значение",  ПолеРасшифровки.Значение);
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Укажем что открывать объект сразу не нужно
	ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Ложь);
	
	Если ДанныеОтчета = Неопределено Тогда 
		ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
		Возврат;
	КонецЕсли;
	
	// Прежде всего интересны данные группировочных полей
	Для Каждого Группировка Из ДанныеОтчета.Объект.Группировка Цикл
		
		Если Группировка.Использование Тогда
			
			СоответствиеПолей.Вставить(Группировка.Поле);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СоответствиеПолей.Вставить("Период");
		
	// Инициализация пользовательских настроек
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("РежимРасшифровки", 	Истина);
	ДополнительныеСвойства.Вставить("Организация", 			ДанныеОтчета.Объект.Организация);
	ДополнительныеСвойства.Вставить("НачалоПериода", 		ДанныеОтчета.Объект.НачалоПериода);
	ДополнительныеСвойства.Вставить("КонецПериода", 		ДанныеОтчета.Объект.КонецПериода);
	ДополнительныеСвойства.Вставить("ВыводитьЗаголовок",	ДанныеОтчета.Объект.ВыводитьЗаголовок);
	ДополнительныеСвойства.Вставить("ВыводитьПодвал",		ДанныеОтчета.Объект.ВыводитьПодвал);
	ДополнительныеСвойства.Вставить("МакетОформления",		ДанныеОтчета.Объект.МакетОформления);
	ДополнительныеСвойства.Вставить("Периодичность",		ДанныеОтчета.Объект.Периодичность);
	ДополнительныеСвойства.Вставить("ВыводитьДиаграмму",	Ложь);
	ДополнительныеСвойства.Вставить("ПоказательКоличество",	ДанныеОтчета.Объект.ПоказательКоличество);
	ДополнительныеСвойства.Вставить("ПоказательСумма",		ДанныеОтчета.Объект.ПоказательСумма);
	ДополнительныеСвойства.Вставить("КлючТекущегоВарианта",	ДанныеОтчета.Объект.КлючТекущегоВарианта);
	ДополнительныеСвойства.Вставить("ОчищатьТаблицуГруппировок", 		Истина);
	ДополнительныеСвойства.Вставить("ПоказательОпределятьСуммуПоОплате",ДанныеОтчета.Объект.ПоказательОпределятьСуммуПоОплате);
	
	// Получаем соответствие полей доступных в расшифровке
	Данные_Расшифровки = БухгалтерскиеОтчеты.ПолучитьДанныеРасшифровки(ДанныеОтчета.ДанныеРасшифровки, СоответствиеПолей, Расшифровка);
	
	Договор = Данные_Расшифровки.Получить("Договор");
	
	Если ЗначениеЗаполнено(Договор) Тогда
		
		ДополнительныеСвойства.Вставить("Организация", Договор.Организация);
		
	КонецЕсли;
	
	Период = Данные_Расшифровки.Получить("Период");
	
	Если ЗначениеЗаполнено(Период) Тогда
		
		Периодичность = БухгалтерскиеОтчетыКлиентСервер.ПолучитьЗначениеПериодичности(ДанныеОтчета.Объект.Периодичность, ДанныеОтчета.Объект.НачалоПериода, ДанныеОтчета.Объект.КонецПериода);
		ДополнительныеСвойства.Вставить("Периодичность",		Периодичность);
		ДополнительныеСвойства.Вставить("КонецПериода", КонецДня(БухгалтерскиеОтчетыКлиентСервер.КонецПериода(Период, Периодичность)));
		ДополнительныеСвойства.Вставить("НачалоПериода", НачалоДня(БухгалтерскиеОтчетыКлиентСервер.НачалоПериода(Период, Периодичность)));

	КонецЕсли;
	
	ОтборПоЗначениямРасшифровки = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ОтборПоЗначениямРасшифровки.ИдентификаторПользовательскойНастройки = "Отбор";
	
	Для Каждого ЗначениеРасшифровки Из Данные_Расшифровки Цикл
		Если ЗначениеРасшифровки.Ключ <> "Период" Тогда
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборПоЗначениямРасшифровки, ЗначениеРасшифровки.Ключ, ЗначениеРасшифровки.Значение);
		КонецЕсли;
	КонецЦикла;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(ДанныеОтчета.ДанныеРасшифровки.Настройки);
	КомпоновщикНастроек.Инициализировать(
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(ДанныеОтчета.Объект.СхемаКомпоновкиДанных));
	
	МассивПолей = БухгалтерскиеОтчетыВызовСервера.ПолучитьМассивПолейРасшифровки(
		Расшифровка, ДанныеОтчета.ДанныеРасшифровки, КомпоновщикНастроек, Истина);
	
	Для Каждого Отбор Из МассивПолей Цикл
		Если ТипЗнч(Отбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
			И Отбор.Представление = "###ОтборПоОрганизацииСОП###" Тогда
			Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
				Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
					ДополнительныеСвойства.Вставить("Организация", ЭлементОтбора.ПравоеЗначение);
					ДополнительныеСвойства.Вставить("ВключатьОбособленныеПодразделения", Истина);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЗнч(Отбор) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если Отбор.Представление = "###ОтборПоОрганизации###" Тогда
				ДополнительныеСвойства.Вставить("Организация", Отбор.ПравоеЗначение);
				ДополнительныеСвойства.Вставить("ВключатьОбособленныеПодразделения", Ложь);
			ИначеЕсли Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") 
				И Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
				ДополнительныеСвойства.Вставить("Подразделение", Отбор.ПравоеЗначение);
			Иначе
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(
					ОтборПоЗначениямРасшифровки, Отбор.ЛевоеЗначение, Отбор.ПравоеЗначение, Отбор.ВидСравнения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Группировка = Новый Массив();
	ЕстьГруппировкаПоДокументу = Ложь;
	Для Каждого СтрокаГруппировки Из ДанныеОтчета.Объект.Группировка Цикл
		Если СтрокаГруппировки.Использование Тогда
			
			СтрокаДляРасшифровки = Новый Структура("Использование, Поле, Представление, ТипГруппировки");
			ЗаполнитьЗначенияСвойств(СтрокаДляРасшифровки, СтрокаГруппировки);
			Группировка.Добавить(СтрокаДляРасшифровки);
			
			Если СтрокаГруппировки.Поле = "Документ" Тогда
				ЕстьГруппировкаПоДокументу = Истина;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьГруппировкаПоДокументу Тогда
		
		СтрокаДляРасшифровки = Новый Структура();
		СтрокаДляРасшифровки.Вставить("Использование", 	Истина);
		СтрокаДляРасшифровки.Вставить("Поле", 			"Документ");
		СтрокаДляРасшифровки.Вставить("Представление", 	"Документ");
		СтрокаДляРасшифровки.Вставить("ТипГруппировки", 0);
		
		Группировка.Добавить(СтрокаДляРасшифровки);
		
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("Группировка", Группировка);
	
	СписокПунктовМеню.Добавить("Продажи", "Продажи");
	
	НастройкиРасшифровки = Новый Структура();
	НастройкиРасшифровки.Вставить("Продажи", ПользовательскиеНастройки);
	ДанныеОтчета.Вставить("НастройкиРасшифровки", НастройкиРасшифровки);
	
	ПоместитьВоВременноеХранилище(ДанныеОтчета, Адрес);
	
	ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
	
КонецПроцедуры

Функция ВариантыНастроек() Экспорт
	
	Массив = Новый Массив;
	
	Массив.Добавить(Новый Структура("Имя, Представление","ПродажиПоНоменклатурнымГруппам", НСтр("ru = 'Продажи по номенклатурным группам'")));
	Массив.Добавить(Новый Структура("Имя, Представление","ПродажиПоКонтрагентам", НСтр("ru = 'Продажи по контрагентам'")));
	Массив.Добавить(Новый Структура("Имя, Представление","ПродажиПоНоменклатуре", НСтр("ru = 'Продажи по номенклатуре'")));
	Массив.Добавить(Новый Структура("Имя, Представление","ПродажиПоКонтрагентамПоОплате", НСтр("ru = 'Продажи по контрагентам (по оплате)'")));
	
	Возврат Массив;
	
КонецФункции

Функция ПолучитьНаборПоказателей() Экспорт
	
	НаборПоказателей = Новый Массив;
	НаборПоказателей.Добавить("Сумма");
	НаборПоказателей.Добавить("Количество");
	
	Возврат НаборПоказателей;
	
КонецФункции

// Формирует таблицу данных для монитора руководителя по организации за период
// Параметры
// 	Организация - СправочникСсылка.Организации - Организация по которой нужны данные
// 	ДатаКон - Дата - дата конца периода
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблица с данными для монитора руководителя
//
Функция ПолучитьПродажиДляМонитораРуководителя(Организация, ДатаКон) Экспорт
	
	НачалоГода            = НачалоГода(ДатаКон);
	НачалоМесяца          = НачалоМесяца(ДатаКон);
	НачалоПрошлогоМесяца  = ДобавитьМесяц(НачалоМесяца, -1);
	КонецПрошлогоМесяца   = КонецМесяца(НачалоПрошлогоМесяца);
	НачалоПрошлогоПериода = НачалоГода(НачалоПрошлогоМесяца);
	КонецПериода          = КонецДня(ДатаКон);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",           Организация);
	Запрос.УстановитьПараметр("НачалоГода",            НачалоГода);
	Запрос.УстановитьПараметр("НачалоМесяца",          НачалоМесяца);
	Запрос.УстановитьПараметр("НачалоПрошлогоМесяца",  НачалоПрошлогоМесяца);
	Запрос.УстановитьПараметр("НачалоПрошлогоПериода", НачалоПрошлогоПериода);
	Запрос.УстановитьПараметр("КонецПрошлогоМесяца",   КонецПрошлогоМесяца);
	Запрос.УстановитьПараметр("КонецПериода",          КонецПериода);
	Запрос.УстановитьПараметр("КонецПериодаГраница",   Новый Граница(КонецПериода));
	
	
	СчетаВыручки = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Выручка);
	Запрос.УстановитьПараметр("СчетаВыручки", СчетаВыручки);
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ХозрасчетныйОборотыПоМесяцам.Период = &НачалоМесяца
	|					ТОГДА ХозрасчетныйОборотыПоМесяцам.СуммаОборотКт
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ПродажиТекущийМесяц,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ХозрасчетныйОборотыПоМесяцам.Период МЕЖДУ &НачалоГода И &КонецПериода
	|					ТОГДА ХозрасчетныйОборотыПоМесяцам.СуммаОборотКт
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ПродажиТекущийГод,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ХозрасчетныйОборотыПоМесяцам.Период = &НачалоПрошлогоМесяца
	|					ТОГДА ХозрасчетныйОборотыПоМесяцам.СуммаОборотКт
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ПродажиПрошлыйМесяц,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ХозрасчетныйОборотыПоМесяцам.Период МЕЖДУ &НачалоПрошлогоПериода И &КонецПрошлогоМесяца
	|					ТОГДА ХозрасчетныйОборотыПоМесяцам.СуммаОборотКт
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ПродажиПрошлыйПериод
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПрошлогоПериода, &КонецПериодаГраница, Месяц, Счет В (&СчетаВыручки), , Организация = &Организация, , ) КАК ХозрасчетныйОборотыПоМесяцам";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	СуммаТекущийМесяц = 0;
	СуммаПрошлыйМесяц = 0;
	СуммаТекущийГод  = 0;
	СуммаПрошлыйПериод  = 0;
	
	Если Результат.Следующий() Тогда
		СуммаТекущийМесяц  = Результат.ПродажиТекущийМесяц;
		СуммаТекущийГод    = Результат.ПродажиТекущийГод;
		СуммаПрошлыйМесяц  = Результат.ПродажиПрошлыйМесяц;
		СуммаПрошлыйПериод = Результат.ПродажиПрошлыйПериод;
	Конецесли;
	
	ПредставлениеТекущегоМесяца            = МониторРуководителя.ПолучитьПредставлениеПериода(НачалоМесяца, КонецПериода);
	ПредставлениеТекущегоМесяцаСНачалаГода = МониторРуководителя.ПолучитьПредставлениеПериода(НачалоГода, КонецПериода);
	ПредставлениеПрошлогоМесяца            = МониторРуководителя.ПолучитьПредставлениеПериода(НачалоПрошлогоМесяца, КонецПрошлогоМесяца);
	ПредставлениеПрошлогоМесяцаСНачалаГода = МониторРуководителя.ПолучитьПредставлениеПериода(НачалоПрошлогоПериода, КонецПрошлогоМесяца);
	
	ТаблицаДанных = МониторРуководителя.ТаблицаДанных();
		
	СтрокаТаблицы = ТаблицаДанных.Добавить();
	СтрокаТаблицы.Представление = ПредставлениеТекущегоМесяца;
	СтрокаТаблицы.Сумма 		= СуммаТекущийМесяц;
	СтрокаТаблицы.Порядок		= ПорядокТекущегоМесяца();
	
	СтрокаТаблицы = ТаблицаДанных.Добавить();
	СтрокаТаблицы.Представление = ПредставлениеТекущегоМесяцаСНачалаГода;
	СтрокаТаблицы.Сумма 		= СуммаТекущийГод;
	СтрокаТаблицы.Порядок		= ПорядокТекущегоМесяцаСНачалаГода();
	
	СтрокаТаблицы = ТаблицаДанных.Добавить();
	СтрокаТаблицы.Представление = ПредставлениеПрошлогоМесяца;
	СтрокаТаблицы.Сумма 		= СуммаПрошлыйМесяц;
	СтрокаТаблицы.Порядок		= ПорядокПрошлогоМесяца();
	
	СтрокаТаблицы = ТаблицаДанных.Добавить();
	СтрокаТаблицы.Представление = ПредставлениеПрошлогоМесяцаСНачалаГода;
	СтрокаТаблицы.Сумма 		= СуммаПрошлыйПериод;
	СтрокаТаблицы.Порядок		= ПорядокПрошлогоМесяцаСНачалаГода();
		
	Возврат ТаблицаДанных;
	
КонецФункции

// Возвращает набор параметров, которые необходимо сохранять в рассылке отчетов.
// Значения параметров используются при формировании отчета в рассылке.
//
// Возвращаемое значение:
//   Структура - структура настроек, сохраняемых в рассылке с неинициализированными значениями.
//
Функция НастройкиОтчетаСохраняемыеВРассылке() Экспорт
	
	КоллекцияНастроек = Новый Структура;
	Для Каждого Показатель Из ПолучитьНаборПоказателей() Цикл
		КоллекцияНастроек.Вставить("Показатель" + Показатель, Ложь);
	КонецЦикла;
	КоллекцияНастроек.Вставить("Организация"                      , Справочники.Организации.ПустаяСсылка());
	КоллекцияНастроек.Вставить("ВключатьОбособленныеПодразделения", Ложь);
	КоллекцияНастроек.Вставить("Периодичность"                    , 0);
	КоллекцияНастроек.Вставить("РазмещениеДополнительныхПолей"    , 0);
	КоллекцияНастроек.Вставить("Группировка"                      , Неопределено);
	КоллекцияНастроек.Вставить("ДополнительныеПоля"               , Неопределено);
	КоллекцияНастроек.Вставить("ВыводитьДиаграмму"                , Ложь);
	КоллекцияНастроек.Вставить("ВыводитьЗаголовок"                , Ложь);
	КоллекцияНастроек.Вставить("ВыводитьПодвал"                   , Ложь);
	КоллекцияНастроек.Вставить("ВыводитьПримечания"               , Ложь);
	КоллекцияНастроек.Вставить("МакетОформления"                  , Неопределено);
	КоллекцияНастроек.Вставить("НастройкиКомпоновкиДанных"        , Неопределено);
	
	Возврат КоллекцияНастроек;
	
КонецФункции

// Возвращает структуру параметров, наличие которых требуется для успешного формирования отчета.
//
// Возвращаемое значение:
//   Структура - структура параметров для формирования отчета.
//
Функция ПустыеПараметрыКомпоновкиОтчета() Экспорт
	
	// Часть параметров компоновки отчета используется так же и в рассылке отчета.
	ПараметрыОтчета = НастройкиОтчетаСохраняемыеВРассылке();
	
	// Дополним параметрами, влияющими на формирование отчета.
	ПараметрыОтчета.Вставить("НаборПоказателей"     , ПолучитьНаборПоказателей());
	ПараметрыОтчета.Вставить("ПериодОтчета"         , Неопределено);
	ПараметрыОтчета.Вставить("НачалоПериода"        , Дата(1,1,1));
	ПараметрыОтчета.Вставить("КонецПериода"         , Дата(1,1,1));
	ПараметрыОтчета.Вставить("РежимРасшифровки"     , Ложь);
	ПараметрыОтчета.Вставить("ДанныеРасшифровки"    , Неопределено);
	ПараметрыОтчета.Вставить("СхемаКомпоновкиДанных", Неопределено);
	ПараметрыОтчета.Вставить("ИдентификаторОтчета"  , "");
	ПараметрыОтчета.Вставить("КлючТекущегоВарианта" , "");
	
	Возврат ПараметрыОтчета;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьГруппировкуДиаграммы(ПолеВыбраннойГруппировки, Группировка)
	
	ПолеГруппировки = Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование  = Истина;
	ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
	
	Если ПолеВыбраннойГруппировки.ТипГруппировки = 2 Тогда
		
		ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
		
	Иначе
		// Для типа группировки Иерархия, выводим только элементы,
		// чтобы группы не учавствовали в диаграмме наравне с элементами.
		
		ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
		
	КонецЕсли;
	
	ЭлементВыбора = Группировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ЭлементВыбора.Поле = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
	
	Группировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
КонецПроцедуры

Функция ПорядокТекущегоМесяца() Экспорт
	
	Возврат 1;
	
КонецФункции

Функция ПорядокТекущегоМесяцаСНачалаГода() Экспорт
	
	Возврат 2;
	
КонецФункции

Функция ПорядокПрошлогоМесяца() Экспорт
	
	Возврат 3;
	
КонецФункции

Функция ПорядокПрошлогоМесяцаСНачалаГода() Экспорт
	
	Возврат 4;
	
КонецФункции

Функция ДоговорыПоСертификатам(Организация) Экспорт
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Организации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация);
	Иначе
		Организации = ОбщегоНазначенияБПВызовСервераПовтИсп.ОрганизацииДанныеКоторыхДоступныПользователю();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Организации", Организации);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыОплатОрганизаций.ДоговорКонтрагента
	|ИЗ
	|	Справочник.ВидыОплатОрганизаций КАК ВидыОплатОрганизаций
	|ГДЕ
	|	ВидыОплатОрганизаций.ТипОплаты В (ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСобственный), ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСторонний))
	|	И ВидыОплатОрганизаций.Организация В(&Организации)";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДоговорКонтрагента");
	
КонецФункции

#Область ОбновлениеИнформационнойБазы

// Обработчик обновления на версию 3.0.76.5
// Включает вывод показателя "Количество" в отчете для всех пользователей в текущих пользовательских настройках отчета.
// Не обрабатывает пользовательские настройки, явно сохраненные пользователем.
//
Процедура ВключитьПоказательКоличество() Экспорт
	
	ВариантыОтчета = ВариантыНастроек();
	
	ОтборНастроек = Новый Структура("КлючОбъекта");
	
	Для Каждого ВариантОтчета Из ВариантыОтчета Цикл
		
		ОтборНастроек.КлючОбъекта = СтрШаблон("Отчет.Продажи/%1/ТекущиеПользовательскиеНастройки", ВариантОтчета.Имя);
		
		ВыборкаНастроек = ХранилищеСистемныхНастроек.Выбрать(ОтборНастроек);
		
		Пока ВыборкаНастроек.Следующий() Цикл
			
			ПользовательскиеНастройки = ВыборкаНастроек.Настройки;
			
			Если ТипЗнч(ПользовательскиеНастройки) <> Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ДанныеОтчета")
				Или Не ТипЗнч(ПользовательскиеНастройки.ДополнительныеСвойства.ДанныеОтчета) = Тип("ХранилищеЗначения") Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеОтчета = ПользовательскиеНастройки.ДополнительныеСвойства.ДанныеОтчета.Получить();
			
			Если ТипЗнч(ДанныеОтчета) <> Тип("Структура") Или Не ДанныеОтчета.Свойство("ПоказательКоличество") Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеОтчета.ПоказательКоличество = Истина;
			
			ПользовательскиеНастройки.ДополнительныеСвойства.ДанныеОтчета = Новый ХранилищеЗначения(ДанныеОтчета);
			ХранилищеСистемныхНастроек.Сохранить(
				ВыборкаНастроек.КлючОбъекта, ,
				ПользовательскиеНастройки, ,
				ВыборкаНастроек.Пользователь);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Процедура ВывестиПримечания(ПараметрыОтчета, Результат)
	
	Если Не ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтчета, "ВыводитьПримечания", Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	ПерваяГруппировка = БухгалтерскиеОтчеты.ПерваяАктивнаяГруппировка(ПараметрыОтчета.Группировка);
	Если ПерваяГруппировка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОтчета.ВыводитьПодвал Тогда
		ОбластьПодписи = Результат.Области.Найти("Подписи");
		ЗавершениеТаблицы = ОбластьПодписи.Верх;
	Иначе
		ЗавершениеТаблицы = Результат.ВысотаТаблицы + 1;
	КонецЕсли;
	
	Примечания = ПолучитьМакет("Примечания");
	
	ИмяОбласти = СтрШаблон("Примечание%1", ПерваяГруппировка.Поле);
	
	Если Примечания.Области.Найти(ИмяОбласти) <> Неопределено Тогда
		Примечание = Примечания.Область(ИмяОбласти);
	Иначе
		Примечание = Примечания.Область("ПримечаниеПрочее");
		Примечания.Параметры.ПерваяГруппировка = ПерваяГруппировка.Представление;
	КонецЕсли;
	
	Результат.ВставитьОбласть(Примечание,
		Результат.Область(СтрШаблон("R%1", Формат(ЗавершениеТаблицы, "ЧГ=0"))),
		ТипСмещенияТабличногоДокумента.ПоГоризонтали,
		Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли