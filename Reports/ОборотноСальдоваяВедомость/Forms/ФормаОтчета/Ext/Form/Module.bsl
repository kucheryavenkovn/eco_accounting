#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ПараметрыОбработчикаОжиданияАктуализации Экспорт;

&НаКлиенте
Перем УИДЗамера;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	БухгалтерскиеОтчетыВызовСервера.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	БухгалтерскиеОтчетыКлиентСервер.НастроитьПоказателиНалогНаПрибыль(
		Отчет,
		ЭлементыПоказателейНалогНаПрибыль(ЭтотОбъект));

	БухгалтерскиеОтчеты.ИнициализироватьРежимВыгрузки(ЭтотОбъект);
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Отчет.ОборотноСальдоваяВедомость",
		"ФормаОтчета",
		НСтр("ru='Новости: Оборотно-сальдовая ведомость'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ОбновитьТекстЗаголовка(ЭтаФорма);

	ИБФайловая = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
	ПодключитьОбработчикОжидания = Не ИБФайловая И ЗначениеЗаполнено(ИдентификаторЗадания);
	Если ПодключитьОбработчикОжидания Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
			
	ИначеЕсли Отчет.РежимРасшифровки Тогда
		БухгалтерскийУчетКлиентПереопределяемый.ПослеФормированияОтчета(ЭтотОбъект);
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиент.ПриОткрытии(ЭтаФорма, Отказ);
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	БухгалтерскиеОтчетыКлиент.ПередЗакрытием(ЭтаФорма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, Отчет.РежимРасшифровки);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	БухгалтерскиеОтчетыКлиент.ПриЗакрытии(ЭтаФорма, ЗавершениеРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	БухгалтерскийУчетКлиентПереопределяемый.ОбработкаОповещенияАктуализации(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода, ИмяСобытия, Параметр, Источник);
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)

	БухгалтерскиеОтчетыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтаФорма, Настройки);

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки, ИспользуютсяСтандартныеНастройки)
	
	Если ИспользуютсяСтандартныеНастройки Тогда
		Возврат;
	КонецЕсли;

	Если Не КомпоновщикИнициализирован Тогда
		ПользовательскиеНастройки = ПоместитьВоВременноеХранилище(Настройки, УникальныйИдентификатор);
	КонецЕсли;
	
	БухгалтерскиеОтчетыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтаФорма, Настройки);
	
	Если Не КомпоновщикИнициализирован И ОбщегоНазначения.ЭтоВебКлиент() Тогда
		ИнициализацияКомпоновщикаНастроек();
		РазделыНастроек = Элементы.РазделыНастроек.ПодчиненныеЭлементы;
		Элементы.РазделыНастроек.ТекущаяСтраница = РазделыНастроек.ГруппаГруппировка;
	КонецЕсли;

	БухгалтерскиеОтчетыКлиентСервер.НастроитьПоказателиНалогНаПрибыль(
		Отчет,
		ЭлементыПоказателейНалогНаПрибыль(ЭтотОбъект));
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область Период

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", Отчет.НачалоПериода, Отчет.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Отчет, РезультатВыбора, "НачалоПериода,КонецПериода");
	
	БухгалтерскиеОтчетыКлиентСервер.НастроитьПоказателиНалогНаПрибыль(
		Отчет,
		ЭлементыПоказателейНалогНаПрибыль(ЭтотОбъект));
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализацииАвтоматически(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	БухгалтерскиеОтчетыКлиентСервер.НастроитьПоказателиНалогНаПрибыль(
		Отчет,
		ЭлементыПоказателейНалогНаПрибыль(ЭтотОбъект));
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализацииАвтоматически(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	БухгалтерскиеОтчетыКлиентСервер.НастроитьПоказателиНалогНаПрибыль(
		Отчет,
		ЭлементыПоказателейНалогНаПрибыль(ЭтотОбъект));
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализацииАвтоматически(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область Организация

&НаКлиенте
Процедура ПолеОрганизацияПриИзменении(Элемент)
	
	ОбщегоНазначенияБПКлиент.ПолеОрганизацияПриИзменении(Элемент, ПолеОрганизация,
		Отчет.Организация, Отчет.ВключатьОбособленныеПодразделения);
	
	БухгалтерскиеОтчетыКлиентСервер.НастроитьПоказателиНалогНаПрибыль(
		Отчет,
		ЭлементыПоказателейНалогНаПрибыль(ЭтотОбъект));
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиент.ОрганизацияПриИзменении(ЭтаФорма, Элемент);
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализацииАвтоматически(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеОрганизацияОткрытие(Элемент, СтандартнаяОбработка)
	
	ОбщегоНазначенияБПКлиент.ПолеОрганизацияОткрытие(Элемент, СтандартнаяОбработка,
		ПолеОрганизация, СоответствиеОрганизаций);
		
КонецПроцедуры

&НаКлиенте
Процедура ПолеОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбщегоНазначенияБПКлиент.ПолеОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, 
		СоответствиеОрганизаций, Отчет.Организация, Отчет.ВключатьОбособленныеПодразделения);
	
КонецПроцедуры

#КонецОбласти

#Область Результат

&НаКлиенте
Процедура РезультатПриАктивизации(Элемент)
	
	БухгалтерскиеОтчетыКлиент.НачатьРасчетСуммыВыделенныхЯчеек(
		Элементы.Результат,
		ЭтотОбъект,
		"Подключаемый_РезультатПриАктивизацииПодключаемый");
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)

	БухгалтерскиеОтчетыКлиент.ОбработкаРасшифровкиСтандартногоОтчета(ЭтаФорма, Элемент, Расшифровка, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)

	// Не будем обрабатывать нажатие на правую кнопку мыши.
	// Покажем стандартное контекстное меню ячейки табличного документа.
	Расшифровка = Неопределено;

КонецПроцедуры

#КонецОбласти

#Область Показатели

&НаКлиенте
Процедура ПоказательБУПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказательНУПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказательСверкаНУПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказательПРПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказательВРПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказательКонтрольПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказательВалютнаяСуммаПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Группировка

&НаКлиенте
Процедура ПоСубсчетамПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Элемент.ТекущиеДанные.Счет = ВыбранноеЗначение;	
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаСчетПриИзменении(Элемент)

	БухгалтерскиеОтчетыКлиент.ТабличноеПолеПоСчетамСчетПриИзменении(ЭтаФорма, "Группировка", Элемент);
	Элементы.Группировка.ТекущиеДанные.Использование = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	БухгалтерскиеОтчетыКлиент.ТабличноеПолеПоСчетамПредставлениеНачалоВыбора(ЭтаФорма, "Группировка", Элемент, ДанныеВыбора, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПредставлениеОчистка(Элемент, СтандартнаяОбработка)

	БухгалтерскиеОтчетыКлиент.ТабличноеПолеПоСчетамПредставлениеОчистка(ЭтаФорма, "Группировка", Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	БухгалтерскиеОтчетыКлиент.ТабличноеПолеПоСчетамПредставлениеОбработкаВыбора(ЭтаФорма, "Группировка", Элемент, ВыбранноеЗначение, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаСнятьФлажки(Команда)

	Для Каждого СтрокаТаблицы Из Отчет.Группировка Цикл
		СтрокаТаблицы.Использование = Ложь;
	КонецЦикла;

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаУстановитьФлажки(Команда)

	Для Каждого СтрокаТаблицы Из Отчет.Группировка Цикл
		СтрокаТаблицы.Использование = Истина;
	КонецЦикла;

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Отборы

&НаКлиенте
Процедура ВыводитьЗабалансовыеСчетаПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтборыПриИзменении(Элемент)

	БухгалтерскиеОтчетыКлиент.ОтборыПриИзменении(ЭтаФорма, Элемент, Ложь);
	
	ОбновитьТекстЗаголовка(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)

	БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломДобавления(ЭтаФорма, Элемент, Отказ, Копирование, Родитель, Группа);

КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломИзменения(Элемент, Отказ)

	БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломИзменения(ЭтаФорма, Элемент, Отказ);

КонецПроцедуры

#КонецОбласти

#Область РазвернутоеСальдо

&НаКлиенте
Процедура РазвернутоеСальдоПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РазвернутоеСальдоСчетПриИзменении(Элемент)

	БухгалтерскиеОтчетыКлиент.ТабличноеПолеПоСчетамСчетПриИзменении(ЭтаФорма, "РазвернутоеСальдо", Элемент);
	Элементы.РазвернутоеСальдо.ТекущиеДанные.Использование 	= Истина;
	Элементы.РазвернутоеСальдо.ТекущиеДанные.ПоСубсчетам 	= Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутоеСальдоПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	БухгалтерскиеОтчетыКлиент.ТабличноеПолеПоСчетамПредставлениеНачалоВыбора(ЭтаФорма, "РазвернутоеСальдо", Элемент, ДанныеВыбора, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура РазвернутоеСальдоПредставлениеОчистка(Элемент, СтандартнаяОбработка)

	БухгалтерскиеОтчетыКлиент.ТабличноеПолеПоСчетамПредставлениеОчистка(ЭтаФорма, "РазвернутоеСальдо", Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура РазвернутоеСальдоПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	БухгалтерскиеОтчетыКлиент.ТабличноеПолеПоСчетамПредставлениеОбработкаВыбора(ЭтаФорма, "РазвернутоеСальдо", Элемент, ВыбранноеЗначение, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура РазвернутоеСальдоСнятьФлажки(Команда)

	Для Каждого СтрокаТаблицы Из Отчет.РазвернутоеСальдо Цикл
		СтрокаТаблицы.Использование = Ложь;
	КонецЦикла;

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РазвернутоеСальдоУстановитьФлажки(Команда)

	Для Каждого СтрокаТаблицы Из Отчет.РазвернутоеСальдо Цикл
		СтрокаТаблицы.Использование = Истина;
	КонецЦикла;

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ДополнительныеПоля

&НаКлиенте
Процедура РазмещениеДополнительныхПолейПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)

	БухгалтерскиеОтчетыКлиент.ДополнительныеПоляПередНачаломДобавления(ЭтаФорма, Элемент, Отказ, Копирование, Родитель, Группа);

КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляПередНачаломИзменения(Элемент, Отказ)

	БухгалтерскиеОтчетыКлиент.ДополнительныеПоляПередНачаломИзменения(ЭтаФорма, Элемент, Отказ);

КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляСнятьФлажки(Команда)

	Для Каждого СтрокаТаблицы Из Отчет.ДополнительныеПоля Цикл
		СтрокаТаблицы.Использование = Ложь;
	КонецЦикла;

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляУстановитьФлажки(Команда)

	Для Каждого СтрокаТаблицы Из Отчет.ДополнительныеПоля Цикл
		СтрокаТаблицы.Использование = Истина;
	КонецЦикла;

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Оформление

&НаКлиенте
Процедура МакетОформленияПриИзменении(Элемент)

	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Отчет.КомпоновщикНастроек.Настройки, "МакетОформления", МакетОформления);

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыводитьЗаголовокПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыводитьПодвалПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыводитьЕдиницуИзмеренияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выгрузить(Команда)
	
	Если Элементы.Результат.ОтображениеСостояния.Видимость Тогда
		
		ТекущийЭлемент = Элементы.Сформировать;
		ПоказатьПредупреждение( , НСтр("ru = 'Нажмите ""Сформировать"" для получения отчета'"),
								, НСтр("ru = 'Отчет не сформирован'"));
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Результат",     Результат);
	ПараметрыОтчета.Вставить("Организация",   Отчет.Организация);
	ПараметрыОтчета.Вставить("ВключатьОбособленныеПодразделения", Отчет.ВключатьОбособленныеПодразделения);
	ПараметрыОтчета.Вставить("НачалоПериода", Отчет.НачалоПериода);
	ПараметрыОтчета.Вставить("КонецПериода",  Отчет.КонецПериода);
	
	Закрыть(ПараметрыОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	Перем ОтказПроверкиЗаполнения;

	ОчиститьСообщения();
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	УИДЗамера = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь, "ФормированиеОтчетаОборотноСальдоваяВедомость");
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
	РезультатВыполнения = СформироватьОтчетНаСервере();
	РезультатВыполнения.Свойство("ОтказПроверкиЗаполнения", ОтказПроверкиЗаполнения);
	Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	Иначе
		ЗафиксироватьДлительностьКлючевойОперации();
				
		Если ОтказПроверкиЗаполнения <> Истина Тогда
			БухгалтерскийУчетКлиентПереопределяемый.ПослеФормированияОтчета(ЭтотОбъект);
		КонецЕсли

	КонецЕсли;
	
	Если ОтказПроверкиЗаполнения = Истина Тогда
		ПоказатьНастройки("");
	Иначе	
		СкрытьНастройки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьАктуальность()
	
	БухгалтерскийУчетКлиентПереопределяемый.ПроверитьАктуальность(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода);

КонецПроцедуры

&НаКлиенте
Процедура Актуализировать(Команда)
	
	БухгалтерскийУчетКлиентПереопределяемый.Актуализировать(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеАктуализации()
	
	БухгалтерскийУчетКлиентПереопределяемый.ПроверитьВыполнениеАктуализацииОтчета(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода);

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьАктуализацию(Команда)
	
	БухгалтерскийУчетКлиентПереопределяемый.ОтменитьАктуализацию(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПриНеобходимостиАктуализацииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПараметрыАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыйПараметрыАктуализацииОтчета();
	ПараметрыАктуализации.Вставить("Организация",                       Отчет.Организация);
	ПараметрыАктуализации.Вставить("ВключатьОбособленныеПодразделения", Отчет.ВключатьОбособленныеПодразделения);
	ПараметрыАктуализации.Вставить("ДатаАктуальности",                  ДатаАктуальности);
	ПараметрыАктуализации.Вставить("ДатаОкончанияАктуализации",         Отчет.КонецПериода);

	ЗакрытиеМесяцаКлиент.ТекстПриНеобходимостиАктуализацииОбработкаНавигационнойСсылки(
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка,
		ЭтотОбъект,
		ПараметрыАктуализации);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеМесяцаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "СформироватьОтчет" Тогда
		
		БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализации(ЭтотОбъект);
		Активизировать();
		СформироватьОтчет("");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	БухгалтерскиеОтчетыКлиент.ОтчетСохранитьКак(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочте(Команда)
	
	ОтправкаПочтовыхСообщенийКлиент.ОтправитьОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьНажатие(Элемент)
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализации(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьЗавершениеАктуализации()
	
	БухгалтерскийУчетКлиентПереопределяемый.ПроверитьЗавершениеАктуализации(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьНастройки(Команда)
	
	КнопкаДействия = ?(Элементы.Выгрузить.Видимость, Элементы.Выгрузить, Элементы.Сформировать);
	КнопкаДействия.КнопкаПоУмолчанию = Истина;
	СкрытьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройки(Команда)
	
	Элементы.ПрименитьНастройки.КнопкаПоУмолчанию = Истина;
	
	Если Не КомпоновщикИнициализирован Тогда
		ИнициализацияКомпоновщикаНастроек();
	КонецЕсли;
	
	ОткрытьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСРазвернутымСальдо(Команда)
	
	ЗаполнитьНастройкамиПоУмолчанию(НастройкиСРазвернутымСальдо());
	
КонецПроцедуры

&НаКлиенте
Процедура ПростаяНастройка(Команда)
	
	ЗаполнитьНастройкамиПоУмолчанию(ПростыеНастройки());
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьИтоги(Команда)
	
	БухгалтерскиеОтчетыКлиент.ПересчитатьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПересчетИтоговНажатие(Элемент)
	
	БухгалтерскиеОтчетыКлиент.УстановитьВидимостьПанелиПересчетаИтогов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПослеПересчетаНажатие(Элемент)
	
	БухгалтерскиеОтчетыКлиент.УстановитьВидимостьПанелиПересчетаИтогов(ЭтотОбъект);
	
КонецПроцедуры

#Область РегистрыУчета

&НаКлиенте
Процедура СохранитьРегистрУчета(Команда)
	
	РегистрыУчетаКлиент.СохранитьРегистрУчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьРегистрУчетаИПодписатьЭП(Команда)
	
	РегистрыУчетаКлиент.СохранитьРегистрУчета(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьАрхивРегистровУчета(Команда)
	
	РегистрыУчетаКлиент.ОткрытьАрхивРегистровУчета(ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекстЗаголовка(Форма)

	Отчет = Форма.Отчет;

	ЗаголовокОтчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Оборотно-сальдовая ведомость%1'"),
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(Отчет.НачалоПериода, Отчет.КонецПериода));

	Если ЗначениеЗаполнено(Отчет.Организация) И Форма.ИспользуетсяНесколькоОрганизаций Тогда
		ЗаголовокОтчета = ЗаголовокОтчета + " " + БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(Отчет.Организация, Отчет.ВключатьОбособленныеПодразделения);
	КонецЕсли;

	Форма.Заголовок = ЗаголовокОтчета;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗапрещенныеПоля(Режим = "") Экспорт

	СписокПолей = Новый Массив;

	СписокПолей.Добавить("UserFields");
	СписокПолей.Добавить("DataParameters");
	СписокПолей.Добавить("SystemFields");
	СписокПолей.Добавить("Показатели");
	СписокПолей.Добавить("Период");

	Если Режим = "Выбор" Тогда
		Для Каждого ДоступноеПоле Из Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
			Если ДоступноеПоле.Ресурс Тогда
				СписокПолей.Добавить(Строка(ДоступноеПоле.Поле));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если Режим = "Выбор" Тогда
		СписокПолей.Добавить("СальдоНаНачалоПериода");
		СписокПолей.Добавить("ОборотыЗаПериод");
		СписокПолей.Добавить("СальдоНаКонецПериода");
	ИначеЕсли Режим = "Отбор" Тогда
		БухгалтерскиеОтчетыКлиент.ДобавитьПоляРесурсовВЗапрещенныеПоля(ЭтаФорма, СписокПолей);
	КонецЕсли;

	Возврат Новый ФиксированныйМассив(СписокПолей);

КонецФункции

&НаСервере
Функция СформироватьОтчетНаСервере() Экспорт
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("ЗаданиеВыполнено", Истина);
	РезультатВыполнения.Вставить("ОтказПроверкиЗаполнения", Ложь);
	
	Если Не ПроверитьЗаполнение() Тогда
		
		РезультатВыполнения.ОтказПроверкиЗаполнения = Истина;
		Возврат РезультатВыполнения;
		
	КонецЕсли;
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	Если Не КомпоновщикИнициализирован Тогда
		ИнициализацияКомпоновщикаНастроек();
	КонецЕсли;
	
	Настройки = Отчет.КомпоновщикНастроек.Настройки;
	Настройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
	Настройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
	Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
	
	ПараметрыОтчета = Отчеты.ОборотноСальдоваяВедомость.ПустыеПараметрыКомпоновкиОтчета();
	Отчеты.ОборотноСальдоваяВедомость.ЗаполнитьПараметрыИзФормы(ПараметрыОтчета, ЭтотОбъект);
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		БухгалтерскиеОтчетыВызовСервера.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
		
	Иначе

		РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"БухгалтерскиеОтчетыВызовСервера.СформироватьОтчет",
			ПараметрыОтчета,
			БухгалтерскиеОтчетыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтаФорма));
		
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;

	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	КнопкаДействия = ?(Элементы.Выгрузить.Видимость, Элементы.Выгрузить, Элементы.Сформировать);
	КнопкаДействия.КнопкаПоУмолчанию = Истина;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьНастройкамиПоУмолчанию(ЗаполняемыеНастройки) Экспорт
	
	Перем ЗаполнятьКоллекцию;
	
	Если ЗаполняемыеНастройки.Свойство("Показатели", ЗаполнятьКоллекцию) И ЗаполнятьКоллекцию Тогда
		// Управление показателями.
		Отчет.ПоказательБУ            = Истина;
		Отчет.ПоказательНУ            = Ложь;
		Отчет.ПоказательСверкаНУ      = Ложь;		
		Отчет.ПоказательПР            = Ложь;
		Отчет.ПоказательВР            = Ложь;
		Отчет.ПоказательКонтроль      = Ложь;
		Отчет.ПоказательВалютнаяСумма = Ложь;
	КонецЕсли;
	
	Если ЗаполняемыеНастройки.Свойство("Группировка", ЗаполнятьКоллекцию) И ЗаполнятьКоллекцию Тогда
		
		Отчет.ПоСубсчетам = Ложь;
		
		Отчет.Группировка.Очистить();
		
		// Сч 51 по банковским счетам.
		ЗаполнитьСтрокуНастроек(Отчет.Группировка.Добавить(),
								БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.РасчетныеСчета),
								Ложь,
								Новый Структура("Субконто1, Субконто2, Субконто3", Истина, Ложь, Ложь));
		// Сч 68 по субсчетам.
		ЗаполнитьСтрокуНастроек(Отчет.Группировка.Добавить(),
								БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.РасчетыПоНалогам));
		
		// Сч 76 по субсчетам.
		ЗаполнитьСтрокуНастроек(Отчет.Группировка.Добавить(),
								БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами));
		
		// Сч 90 по субсчетам.
		ЗаполнитьСтрокуНастроек(Отчет.Группировка.Добавить(),
								БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.Продажи));
		
		// Сч 91 по субсчетам.
		ЗаполнитьСтрокуНастроек(Отчет.Группировка.Добавить(),
								БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы));
		
		
		// Сч 91.01 по субконто "Прочие доходы и расходы".
		ЗаполнитьСтрокуНастроек(Отчет.Группировка.Добавить(),
								БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.ПрочиеДоходы),
								Ложь,
								Новый Структура("Субконто1, Субконто2, Субконто3", Истина, Ложь, Ложь));
		
		// Сч 91.02 по субконто "Прочие доходы и расходы".
		ЗаполнитьСтрокуНастроек(Отчет.Группировка.Добавить(),
								БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.ПрочиеРасходы),
								Ложь,
								Новый Структура("Субконто1, Субконто2, Субконто3", Истина, Ложь, Ложь));
		
		// Сч 99 по субсчетам.
		ЗаполнитьСтрокуНастроек(Отчет.Группировка.Добавить(),
							БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.ПрибылиИУбытки));
		
	КонецЕсли;
	
	Если ЗаполняемыеНастройки.Свойство("РазвернутоеСальдо", ЗаполнятьКоллекцию) И ЗаполнятьКоллекцию Тогда
		
		Отчет.РазвернутоеСальдо.Очистить();
		
		// Сч 60 по субконто "Контрагенты и договоры".
		
		ЗаполнитьСтрокуНастроек(Отчет.РазвернутоеСальдо.Добавить(),
								БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками),
								Ложь,
								Новый Структура("Субконто1, Субконто2, Субконто3", Истина, Истина, Ложь));
		
		// Сч 62 по субконто "Контрагенты и договоры".
		ЗаполнитьСтрокуНастроек(Отчет.РазвернутоеСальдо.Добавить(),
								БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками),
								Ложь,
								Новый Структура("Субконто1, Субконто2, Субконто3", Истина, Истина, Ложь));
		
		// Сч 68 по субконто "Виды платежей в бюджет (фонды)".
		ЗаполнитьСтрокуНастроек(Отчет.РазвернутоеСальдо.Добавить(),
								БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.РасчетыПоНалогам),
								Истина,
								Новый Структура("Субконто1, Субконто2, Субконто3", Истина, Ложь, Ложь));
		
		// Сч 68.04.1 по субконто "Виды платежей в бюджет (фонды), Уровни бюджетов".
		ЗаполнитьСтрокуНастроек(Отчет.РазвернутоеСальдо.Добавить(),
								БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.РасчетыСБюджетом),
								Ложь,
								Новый Структура("Субконто1, Субконто2, Субконто3", Истина, Истина, Ложь));
		
		// Сч 68.10 по субконто "Виды платежей в бюджет (фонды), Уровни бюджетов".
		ЗаполнитьСтрокуНастроек(Отчет.РазвернутоеСальдо.Добавить(),
								БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.ПрочиеНалогиИСборы),
								Ложь,
								Новый Структура("Субконто1, Субконто2, Субконто3", Истина, Истина, Ложь));
		
		// Сч 69 по субконто "Виды платежей в бюджет (фонды)".
		ЗаполнитьСтрокуНастроек(Отчет.РазвернутоеСальдо.Добавить(),
								БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию),
								Ложь,
								Новый Структура("Субконто1, Субконто2, Субконто3", Истина, Ложь, Ложь));
		
		Если НЕ БухгалтерскийУчетПереопределяемый.ВедетсяУчетРасчетовПоЗарплатеСводно() Тогда
			// Сч 70 по субконто "Работники организаций".
			ЗаполнитьСтрокуНастроек(Отчет.РазвернутоеСальдо.Добавить(),
									БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда),
									Ложь,
									Новый Структура("Субконто1, Субконто2, Субконто3", Истина, Ложь, Ложь));
		КонецЕсли;
		
		// Сч 71 по субконто "Работники организаций".
		ЗаполнитьСтрокуНастроек(Отчет.РазвернутоеСальдо.Добавить(),
								БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами_),
								Ложь,
								Новый Структура("Субконто1, Субконто2, Субконто3", Истина, Ложь, Ложь));
		
		// Сч 73.03 по субконто "Работники организаций".
		ЗаполнитьСтрокуНастроек(Отчет.РазвернутоеСальдо.Добавить(),
								БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.РасчетыПоПрочимОперациям),
								Ложь,
								Новый Структура("Субконто1, Субконто2, Субконто3", Истина, Ложь, Ложь));
		
		// Сч 76 по субконто "Контрагенты и договоры".
		ЗаполнитьСтрокуНастроек(Отчет.РазвернутоеСальдо.Добавить(),
								БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами),
								Ложь,
								Новый Структура("Субконто1, Субконто2, Субконто3", Истина, Истина, Ложь));
		
		// Сч 76.01.1 по субконто "Контрагенты".
		ЗаполнитьСтрокуНастроек(Отчет.РазвернутоеСальдо.Добавить(),
								БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.РасчетыПоИмущественномуИЛичномуСтрахованию),
								Ложь,
								Новый Структура("Субконто1, Субконто2, Субконто3", Истина, Ложь, Ложь));
		
		// Сч 76.01.2 по субконто "Контрагенты".
		ЗаполнитьСтрокуНастроек(Отчет.РазвернутоеСальдо.Добавить(),
								БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.ПлатежиПоДобровольномуСтрахованиюРаботников),
								Ложь,
								Новый Структура("Субконто1, Субконто2, Субконто3", Истина, Ложь, Ложь));
		
		// Сч 76.01.9 по субконто "Контрагенты".
		ЗаполнитьСтрокуНастроек(Отчет.РазвернутоеСальдо.Добавить(),
								БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.ПлатежиПоПрочимВидамСтрахования),
								Ложь,
								Новый Структура("Субконто1, Субконто2, Субконто3", Истина, Ложь, Ложь));
		
		// Сч 76.03 по субконто "Контрагенты и договоры".
		ЗаполнитьСтрокуНастроек(Отчет.РазвернутоеСальдо.Добавить(),
								БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.РасчетыПоПричитающимсяДивидендам),
								Ложь,
								Новый Структура("Субконто1, Субконто2, Субконто3", Истина, Истина, Ложь));
		
		// Сч 76.05 по субконто "Контрагенты и договоры".
		ЗаполнитьСтрокуНастроек(Отчет.РазвернутоеСальдо.Добавить(),
								БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками),
								Ложь,
								Новый Структура("Субконто1, Субконто2, Субконто3", Истина, Истина, Ложь));
		
		// Сч 76.06 по субконто "Контрагенты и договоры".
		ЗаполнитьСтрокуНастроек(Отчет.РазвернутоеСальдо.Добавить(),
								БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками),
								Ложь,
								Новый Структура("Субконто1, Субконто2, Субконто3", Истина, Истина, Ложь));
		
		// Сч 76.09 по субконто "Контрагенты и договоры".
		ЗаполнитьСтрокуНастроек(Отчет.РазвернутоеСальдо.Добавить(),
								БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами),
								Ложь,
								Новый Структура("Субконто1, Субконто2, Субконто3", Истина, Истина, Ложь));
		
		// Сч 76.21 по субконто "Контрагенты и договоры".
		ЗаполнитьСтрокуНастроек(Отчет.РазвернутоеСальдо.Добавить(),
								БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.РасчетыПоИмущественномуИЛичномуСтрахованиюВал),
								Ложь,
								Новый Структура("Субконто1, Субконто2, Субконто3", Истина, Истина, Ложь));
		
		// Сч 76.25 по субконто "Контрагенты и договоры".
		ЗаполнитьСтрокуНастроек(Отчет.РазвернутоеСальдо.Добавить(),
								БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал),
								Ложь,
								Новый Структура("Субконто1, Субконто2, Субконто3", Истина, Истина, Ложь));
		
		// Сч 76.26 по субконто "Контрагенты и договоры".
		ЗаполнитьСтрокуНастроек(Отчет.РазвернутоеСальдо.Добавить(),
								БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиВал),
								Ложь,
								Новый Структура("Субконто1, Субконто2, Субконто3", Истина, Истина, Ложь));
		
		// Сч 76.29 по субконто "Контрагенты и договоры".
		ЗаполнитьСтрокуНастроек(Отчет.РазвернутоеСальдо.Добавить(),
								БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиВал),
								Ложь,
								Новый Структура("Субконто1, Субконто2, Субконто3", Истина, Истина, Ложь));
		
		// Сч 76.35 по субконто "Контрагенты и договоры".
		ЗаполнитьСтрокуНастроек(Отчет.РазвернутоеСальдо.Добавить(),
								БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиУЕ),
								Ложь,
								Новый Структура("Субконто1, Субконто2, Субконто3", Истина, Истина, Ложь));
		
		// Сч 76.36 по субконто "Контрагенты и договоры".
		ЗаполнитьСтрокуНастроек(Отчет.РазвернутоеСальдо.Добавить(),
								БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиУЕ),
								Ложь,
								Новый Структура("Субконто1, Субконто2, Субконто3", Истина, Истина, Ложь));
		
		// Сч 76.39 по субконто "Контрагенты и договоры".
		ЗаполнитьСтрокуНастроек(Отчет.РазвернутоеСальдо.Добавить(),
								БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиУЕ),
								Ложь,
								Новый Структура("Субконто1, Субконто2, Субконто3", Истина, Истина, Ложь));
		
		// Сч 76.41 по субконто "Контрагенты".
		ЗаполнитьСтрокуНастроек(Отчет.РазвернутоеСальдо.Добавить(),
								БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.РасчетыПоИсполнительнымДокументамРаботников),
								Ложь,
								Новый Структура("Субконто1, Субконто2, Субконто3", Истина, Ложь, Ложь));
		
		// Сч 76.49 по субконто "Контрагенты".
		ЗаполнитьСтрокуНастроек(Отчет.РазвернутоеСальдо.Добавить(),
								БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.РасчетыПоПрочимУдержаниямРаботников),
								Ложь,
								Новый Структура("Субконто1, Субконто2, Субконто3", Истина, Ложь, Ложь));
		
		// Сч 76.К по субконто "Контрагенты".
		ЗаполнитьСтрокуНастроек(Отчет.РазвернутоеСальдо.Добавить(),
								БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.КорректировкаРасчетовПрошлогоПериода),
								Ложь,
								Новый Структура("Субконто1, Субконто2, Субконто3", Истина, Истина, Ложь));
	КонецЕсли;
	
	Если ЗаполняемыеНастройки.Свойство("Отбор", ЗаполнятьКоллекцию) И ЗаполнятьКоллекцию Тогда
		
		Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
		Отчет.ВыводитьЗабалансовыеСчета = Ложь;
		
	КонецЕсли;
	
	Если ЗаполняемыеНастройки.Свойство("УсловноеОформление") Тогда
		
		Схема = Отчеты.ОборотноСальдоваяВедомость.ПолучитьМакет("СхемаКомпоновкиДанных");
		Настройки = Схема.НастройкиПоУмолчанию;
		
		КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(Отчет.КомпоновщикНастроек.Настройки.УсловноеОформление, Настройки.УсловноеОформление);
		
	КонецЕсли;
	
	Если ЗаполняемыеНастройки.Свойство("ДополнительныеПоля", ЗаполнятьКоллекцию) И ЗаполнятьКоллекцию Тогда
		
		Отчет.ДополнительныеПоля.Очистить();
		НоваяСтрока = Отчет.ДополнительныеПоля.Добавить();
		НоваяСтрока.Представление = НСтр("ru = 'Выводить наименование счета'");
		НоваяСтрока.Поле          = "Счет.Наименование";
		НоваяСтрока.Использование = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()

	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Результат = РезультатВыполнения.Результат;	

	ДанныеРасшифровки = РезультатВыполнения.ДанныеРасшифровки;

	БухгалтерскийУчетПереопределяемый.ОбработатьРезультатПроверкиИтогов(ЭтотОбъект, РезультатВыполнения);
	
	ИдентификаторЗадания = Неопределено;

	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	ДополнительныеСвойства = Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()

	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ЗагрузитьПодготовленныеДанные();
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
			ЗафиксироватьДлительностьКлючевойОперации();
					
			БухгалтерскийУчетКлиентПереопределяемый.ПослеФормированияОтчета(ЭтотОбъект);
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

&НаСервере
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	ПолеСумма = БухгалтерскиеОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		Результат, КэшВыделеннойОбласти);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииПодключаемый()
	
	НеобходимоВычислятьНаСервере = Ложь;
	БухгалтерскиеОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		ПолеСумма, Результат, Элементы.Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииПодключаемый");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура ЗафиксироватьДлительностьКлючевойОперации()
	
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамера);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки()
	
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.НастройкиОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьНастройки()
	
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.Отчет;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияКомпоновщикаНастроек()
	
	БухгалтерскиеОтчетыВызовСервера.ИнициализацияКомпоновщикаНастроек(ЭтаФорма, Истина);
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные).
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСтрокуНастроек(СтрокаНастроек, ДанныеСчета, ПоСубсчетам = Истина, ПоСубконто = Неопределено)

	СтрокаПоСубконто = "";
	СтрокаПредставление = "";
	
	Если ПоСубконто <> Неопределено Тогда
		Для НомерСубконто = 1 По 3 Цикл
			
			Если ДанныеСчета["ВидСубконто" + НомерСубконто] = Неопределено Тогда
				
				Прервать;
				
			ИначеЕсли ПоСубконто["Субконто" + НомерСубконто] Тогда
				
				СтрокаПоСубконто = СтрокаПоСубконто + "+" + НомерСубконто;
				СтрокаПредставление = СтрокаПредставление + ДанныеСчета["ВидСубконто" + НомерСубконто + "Наименование"] + ", ";
			Иначе
				
				СтрокаПоСубконто = СтрокаПоСубконто + "-" + НомерСубконто;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	СтрокаНастроек.Использование 	= Истина;
	СтрокаНастроек.Счет 			= ДанныеСчета.Ссылка;
	СтрокаНастроек.ПоСубсчетам 		= ПоСубсчетам;
	СтрокаНастроек.Представление 	= Лев(СтрокаПредставление, СтрДлина(СтрокаПредставление) - 2);
	СтрокаНастроек.ПоСубконто 		= СтрокаПоСубконто;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПростыеНастройки()
	
	Настройки = Новый Структура();
	
	Настройки.Вставить("Показатели",			Истина);
	Настройки.Вставить("Группировка",			Ложь);
	Настройки.Вставить("РазвернутоеСальдо",		Ложь);
	Настройки.Вставить("Отбор",					Истина);
	Настройки.Вставить("ДополнительныеПоля",	Истина);
	Настройки.Вставить("УсловноеОформление",	Истина);
	
	Возврат Настройки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НастройкиСРазвернутымСальдо()
	
	Настройки = Новый Структура();
	
	Настройки.Вставить("Показатели",			Истина);
	Настройки.Вставить("Группировка",			Истина);
	Настройки.Вставить("РазвернутоеСальдо",		Истина);
	Настройки.Вставить("Отбор",					Истина);
	Настройки.Вставить("ДополнительныеПоля",	Истина);
	Настройки.Вставить("УсловноеОформление",	Истина);
	
	Возврат Настройки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭлементыПоказателейНалогНаПрибыль(Форма)
	
	// Свойства элементов могут зависеть от нескольких факторов,
	// поэтому не меняем доступность полей непосредственно, а меняем доступность группы.
	Элементы = Новый Структура;
	Элементы.Вставить("ПоказательНУ",       Форма.Элементы.ПоказателиНУ);
	Элементы.Вставить("ПоказательСверкаНУ", Форма.Элементы.ПоказателиНУ);
	Элементы.Вставить("ПоказательВР",       Форма.Элементы.ПоказателиРазниц);
	Элементы.Вставить("ПоказательПР",       Форма.Элементы.ПоказателиРазниц);
	Элементы.Вставить("ПоказательКонтроль", Форма.Элементы.ПоказателиРазниц);
	
	Возврат Элементы;
	
КонецФункции

#КонецОбласти