#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область РегистрацияЗапросов

// Позволяет при записи чека установить отметку, что требуется запросить его детальное содержимое.
// Непосредственно отметка записывается в транзакции записи документа - для этого в обработчике ПриЗаписи
// должен быть вызван метод ВключитьОбъект
//
// Параметры:
//  КассовыйЧекОбъект - ДокументОбъект.КассовыйЧекПодотчетногоЛица - записываемый чек
//
Процедура УстановитьТребуетсяЗапрос(КассовыйЧекОбъект) Экспорт
	
	КассовыйЧекОбъект.ДополнительныеСвойства.Вставить("ТребуетсяЗапросДетальныхДанных", Истина);
	
КонецПроцедуры

// Включает записываемый чек (объект) в регистр.
// Объект должен быть подготовлен с помощью УстановитьТребуетсяЗапрос
//
// Параметры:
//  КассовыйЧекОбъект - ДокументОбъект.КассовыйЧекПодотчетногоЛица - записываемый чек
//
Процедура ВключитьОбъект(КассовыйЧекОбъект) Экспорт
	
	Если Не КассовыйЧекОбъект.ДополнительныеСвойства.Свойство("ТребуетсяЗапросДетальныхДанных")
		Или КассовыйЧекОбъект.ДополнительныеСвойства.ТребуетсяЗапросДетальныхДанных <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Запись = СоздатьМенеджерЗаписи();
	Запись.КассовыйЧек = КассовыйЧекОбъект.Ссылка;
	Запись.Записать();
	
КонецПроцедуры

// Исключает чек из регистра: удаляет отметку о том, что требуется запросить его детальное содержимое.
// Например, после того, как содержимое было запрошено.
//
// Параметры:
//  КассовыйЧек - ДокументСсылка.КассовыйЧекПодотчетногоЛица
//
Процедура Исключить(КассовыйЧек) Экспорт
	
	Запись = СоздатьМенеджерЗаписи();
	Запись.КассовыйЧек = КассовыйЧек;
	Запись.Удалить();
	
КонецПроцедуры

#КонецОбласти

#Область ЗапросыМенеджераСервиса

// Проверяет менеджер сервиса на готовность принимать запросы содержимого кассовых чеков.
// 
// Возвращаемое значение:
//  Булево - Истина, если менеджер сервиса готов принимать запросы.
//
Функция МенеджерСервисаГотовПриниматьЗапросы() Экспорт
	
	// Идентификатор
	// - произвольный, UUID version 1 - не должен совпасть с реальными запросами данных
	// - одинаковый для всех.
	// Предполагается, что в менеджере сервиса объекта с таким идентификатором нет (и не будет).
	ИдентификаторТестовогоЗапроса = "10aaadaa-8edb-11ea-bc55-0242ac130003";
	
	Данные = НовыйДанныеЗапросаМенеджераСервиса(ИдентификаторТестовогоЗапроса);
	
	Попытка
		РезультатОтправки = УниверсальнаяИнтеграция.ИзменитьДанныеОбъектаПоПравилу(
			ИдентификаторДанныхМенеджераСервиса(),
			ИдентификаторТестовогоЗапроса,
			Данные);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Если РезультатОтправки.КодСостояния = КодНеНайден() Тогда
		// Это свидетельствует о том, что идентификатор данных опознан,
		// то есть, менеджер сервиса готов обрабатывать данные такого вида
		Возврат Истина;
	ИначеЕсли РезультатОтправки.КодСостояния = КодУспешноИзменен() Тогда
		// Маловероятно, но объект с таким идентификатором мог быть создан.
		// Его наличие не является существенной проблемой
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Начинает запрос детального содержимого для всех чеков, указанных в регистре.
// Приоритетные чеки будут запрошены в первую очередь (в отдельном потоке),
// остальные - отложенно, механизмом очереди заданий.
//
// Параметры:
//  ПриоритетныеЧеки - Массив из ДокументСсылка.КассовыйЧекПодотчетногоЛица
//
Процедура НачатьЗапрос(ПриоритетныеЧеки) Экспорт
	
	Если ПривилегированныйРежим() Тогда
		// Возможно только отложенное выполнение.
		// Наличие привилегированного режима может указывать, что код выполняется под служебным пользователем,
		// например, в обработчике оповещения универсальной интеграции.
		// Такой пользователь, как правило, не имеет прав, достаточных для запуска сеанса фонового задания.
		ЗапланироватьОтложенныйЗапрос(Истина);
		Возврат;
	КонецЕсли;
	
	// Запланируем отложенное выполнение на случай, если что-то пойдет не так
	ЗапланироватьОтложенныйЗапрос(Ложь);
	
	// Приоритетные чеки запросим сразу же
	ПараметрыФоновогоВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыФоновогоВыполнения.ОжидатьЗавершение = 0;
	ПараметрыФоновогоВыполнения.ЗапуститьВФоне    = Истина;
	
	ДлительныеОперации.ВыполнитьПроцедуру(
		ПараметрыФоновогоВыполнения,
		"РегистрыСведений.КассовыеЧекиПодотчетныхЛицЗапросыДетальныхДанных.ЗапроситьСразу",
		ПриоритетныеЧеки);
		
КонецПроцедуры

// Запрашивает детальное содержимое чеков из числа указанных в регистре.
//
// Параметры:
//  Ссылки - Массив из ДокументСсылка.КассовыйЧекПодотчетногоЛица - запрашиваемые документы, не более 1000
//
Процедура ЗапроситьСразу(Ссылки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ОчередьЗапросов.КассовыйЧек КАК Ссылка
	|ИЗ
	|	РегистрСведений.КассовыеЧекиПодотчетныхЛицЗапросыДетальныхДанных КАК ОчередьЗапросов
	|ГДЕ
	|	ОчередьЗапросов.КассовыйЧек В(&Ссылки)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗапроситьДетализациюКассовогоЧека(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Регистрирует метод в подсистеме ОчередьЗаданий
// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков
//
// Параметры:
//  МетодыОчередиЗаданий - см. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков
//
Процедура ЗарегистрироватьМетодОчередиЗаданий(МетодыОчередиЗаданий) Экспорт
	
	МетодыОчередиЗаданий.Вставить(ИмяМетодаОтложенногоЗапросаДанных());
	
КонецПроцедуры

// Обработчик очереди запросов детальных данных.
// Отправляет в менеджер сервиса порцию запросов из числа указанных в регистре.
// При необходимости планирует запрос следующей порции либо повторный запрос.
//
Процедура ЗапроситьОтложенно() Экспорт
	
	// Запланируем следующий запрос на случай, если что-то пойдет не так
	ЕстьДанныеЗапросов = ЗапланироватьОтложенныйЗапрос(Ложь);
	Если Не ЕстьДанныеЗапросов Тогда
		Возврат;
	КонецЕсли;
	
	// Обработаем порцию запросов
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ОчередьЗапросов.КассовыйЧек КАК Ссылка
	|ИЗ
	|	РегистрСведений.КассовыеЧекиПодотчетныхЛицЗапросыДетальныхДанных КАК ОчередьЗапросов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗапроситьДетализациюКассовогоЧека(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОтветыМенеджераСервиса

// Сохраняет детальное содержимое чека.
// Обработчик ответа на запрос детальных данных (обратного вызова).
// См. УниверсальнаяИнтеграцияПереопределяемый.ОбработатьОповещениеОбИзменении
//
// Параметры:
//  ИдентификаторДанных - Строка - идентифицирует ответ, как относящийся к запросам детальных данных кассовых чеков
//  ИдентификаторЗапроса - Строка - уникальный идентификатор запроса
//  ОтветСервиса - Структура - данные, полученные из менеджера сервиса
//
Процедура ПринятьДетальныеДанные(ИдентификаторДанных, ИдентификаторЗапроса, ОтветСервиса) Экспорт
	
	Если ИдентификаторДанных <> ИдентификаторДанныхМенеджераСервиса() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОтветСервиса.Свойство("payload") Тогда
		ЗаписатьОшибкуОбработки(
			Документы.КассовыйЧекПодотчетногоЛица.ПустаяСсылка(),
			ЭтапОбработкиПолученОтвет(),
			НСтр("ru = 'Отсутствует обязательное свойство payload'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ОтветСервиса);
		Возврат;
	КонецЕсли;
	
	ДанныеСервиса = ОтветСервиса.payload;
	
	Если Не ДанныеСервиса.Свойство("QRКод") Или Не ДанныеСервиса.Свойство("Статус") Тогда
		ЗаписатьОшибкуОбработки(
			Документы.КассовыйЧекПодотчетногоЛица.ПустаяСсылка(),
			ЭтапОбработкиПолученОтвет(),
			НСтр("ru = 'Отсутствует одно из обязательных свойств QRКод, Статус'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ОтветСервиса);
		Возврат;
	КонецЕсли;
	
	КассовыйЧек = Документы.КассовыйЧекПодотчетногоЛица.НайтиПоРеквизиту("QRКод", ДанныеСервиса.QRКод);
	Если Не ЗначениеЗаполнено(КассовыйЧек) Тогда
		ЗаписатьОшибкуОбработки(
			Документы.КассовыйЧекПодотчетногоЛица.ПустаяСсылка(),
			ЭтапОбработкиПолученОтвет(),
			НСтр("ru = 'Не найден документ с указанным QR-кодом'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ОтветСервиса);
		Возврат;
	КонецЕсли;
	
	ДанныеЧека = Неопределено;
	Если ДанныеСервиса.Свойство("ДанныеЧека") Тогда
		ДанныеЧека = ДанныеСервиса.ДанныеЧека;
	КонецЕсли;
	
	Попытка
		Документы.КассовыйЧекПодотчетногоЛица.ЗаполнитьДанныеЧека(КассовыйЧек, ДанныеСервиса.Статус, ДанныеЧека);
	Исключение
		ЗаписатьОшибкуОбработки(
			КассовыйЧек,
			ЭтапОбработкиПолученОтвет(),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	ЗаписатьЭтапОбработки(КассовыйЧек, ИдентификаторЗапроса, ЭтапОбработкиПолученОтвет());
	
	// Отметим, что объект больше не интересен
	Попытка
		
		УниверсальнаяИнтеграция.ОтписатьсяОтОповещенийНаИзменения(ИдентификаторДанныхМенеджераСервиса(), ИдентификаторЗапроса);
		
	Исключение
		ЗаписатьОшибкуОбработки(
			КассовыйЧек,
			ЭтапОбработкиПолученОтвет(),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Данные = Новый Структура;
	Данные.Вставить("id",           ИдентификаторЗапроса);
	Данные.Вставить("DeletionMark", Истина);
	
	РезультатИзменения = УниверсальнаяИнтеграция.ИзменитьДанныеОбъектаПоПравилу(
		ИдентификаторДанныхМенеджераСервиса(),
		ИдентификаторЗапроса,
		Данные);
		
	Если РезультатИзменения.КодСостояния <> КодУспешноИзменен() Тогда
		ЗаписатьОшибкуОбработки(
			КассовыйЧек,
			ЭтапОбработкиПолученОтвет(),
			РезультатИзменения.ТелоОтвета);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИдентификаторДанныхМенеджераСервиса()
	
	Возврат "TillSlipRequest";
	
КонецФункции

Функция НовыйДанныеЗапросаМенеджераСервиса(ИдентификаторЗапроса)
	
	Данные = Новый Структура;
	Данные.Вставить("id",      ИдентификаторЗапроса);
	Данные.Вставить("payload", Новый Структура);
	
	Возврат Данные;
	
КонецФункции

Функция ИмяМетодаОтложенногоЗапросаДанных()
	
	Возврат "РегистрыСведений.КассовыеЧекиПодотчетныхЛицЗапросыДетальныхДанных.ЗапроситьОтложенно";
	
КонецФункции

Функция Пустой()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОчередьЗапросов.КассовыйЧек КАК Ссылка
	|ИЗ
	|	РегистрСведений.КассовыеЧекиПодотчетныхЛицЗапросыДетальныхДанных КАК ОчередьЗапросов";
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЗапланироватьОтложенныйЗапрос(Оперативно)
	
	Если Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Оперативно Тогда
		ИнтервалОтложенногоЗапроса = 0;
	Иначе
		ИнтервалОтложенногоЗапроса = 180; // секунд
	КонецЕсли;
	
	Попытка
		ОбщегоНазначенияБП.ЗапланироватьВыполнение(ИмяМетодаОтложенногоЗапросаДанных(), ИнтервалОтложенногоЗапроса);
	Исключение
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыСведений.КассовыеЧекиПодотчетныхЛицЗапросыДетальныхДанных,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ЗапроситьДетализациюКассовогоЧека(Ссылка)
	
	ПоляКлюча = Новый Структура("КассовыйЧек", Ссылка);
	КлючЗаписи = СоздатьКлючЗаписи(ПоляКлюча);
	
	ЗаблокироватьДанныеДляРедактирования(КлючЗаписи);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОчередьЗапросов.КассовыйЧек КАК Ссылка,
	|	ОчередьЗапросов.КассовыйЧек.QRКод КАК QRКод
	|ИЗ
	|	РегистрСведений.КассовыеЧекиПодотчетныхЛицЗапросыДетальныхДанных КАК ОчередьЗапросов
	|ГДЕ
	|	ОчередьЗапросов.КассовыйЧек = &Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		// Мог быть запрошен в другом потоке
		РазблокироватьДанныеДляРедактирования(КлючЗаписи);
		Возврат Истина;
	КонецЕсли;
	
	QRКод = Выборка.QRКод;
	ИдентификаторЗапроса = XMLСтрока(Новый УникальныйИдентификатор);
	
	Данные = НовыйДанныеЗапросаМенеджераСервиса(ИдентификаторЗапроса);
	Данные.payload.Вставить("QRКод", QRКод);
	УстановитьИдентификаторыПользователя(Данные.payload, Ссылка); // Пользователь, Аутентификация
	
	ИдентификаторДанныхМенеджераСервиса = ИдентификаторДанныхМенеджераСервиса();
	
	Попытка
		РезультатОтправки = УниверсальнаяИнтеграция.ОтправитьДанныеОбъектаПоПравилу(
			ИдентификаторДанныхМенеджераСервиса,
			Данные);
	Исключение
		ЗаписатьОшибкуОбработки(
			Ссылка,
			ЭтапОбработкиОтправленЗапрос(),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	
	Если РезультатОтправки.КодСостояния <> КодУспешноСоздан() Тогда
		
		ШаблонТекста = НСтр("ru = 'Код состояния: %1
                            |Содержимое ответа:
                            |%2'", ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстОшибки = СтрШаблон(ШаблонТекста, РезультатОтправки.КодСостояния, РезультатОтправки.ТелоОтвета);
		
		ЗаписатьОшибкуОбработки(
			Ссылка,
			ЭтапОбработкиОтправленЗапрос(),
			ТекстОшибки);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Попытка
		УниверсальнаяИнтеграция.ПодписатьсяНаОповещенияОбИзменении(ИдентификаторДанныхМенеджераСервиса, Данные.id);
	Исключение
		ЗаписатьОшибкуОбработки(
			Ссылка,
			ЭтапОбработкиОтправленЗапрос(),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	
	Исключить(Ссылка);
	
	РазблокироватьДанныеДляРедактирования(КлючЗаписи);
	
	ЗаписатьЭтапОбработки(Ссылка, ИдентификаторЗапроса, ЭтапОбработкиОтправленЗапрос());
	
	Возврат Истина;
	
	// Оповещения обрабатываются в ПринятьДетальныеДанные
	
КонецФункции

Процедура УстановитьИдентификаторыПользователя(Запрос, Ссылка)
	
	// идентификатор пользователя
	УстановитьПривилегированныйРежим(Истина);
	ИдентификаторПользователя = Константы.КлючОбластиДанных.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ПустаяСтрока(ИдентификаторПользователя) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ДанныеАутентификации <> Неопределено Тогда
			ИдентификаторПользователя = ДанныеАутентификации.Логин;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Вставить("Пользователь", ИдентификаторПользователя);
	
	// аутентификация ИТС
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		ДанныеАутентификации = ИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки(
			ИдентификаторДанныхМенеджераСервиса());
		УстановитьПривилегированныйРежим(Ложь);
	Исключение
		ЗаписатьОшибкуОбработки(
			Ссылка,
			ЭтапОбработкиОтправленЗапрос(),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	Если Не ПустаяСтрока(ДанныеАутентификации.КодОшибки) Тогда
		ЗаписатьОшибкуОбработки(
			Ссылка,
			ЭтапОбработкиОтправленЗапрос(),
			ДанныеАутентификации.ИнформацияОбОшибке,
			ДанныеАутентификации.КодОшибки);
		Возврат;
	КонецЕсли;
	
	Запрос.Вставить("Аутентификация", ДанныеАутентификации.Тикет);
	
КонецПроцедуры

// В качестве Этап используются имена из словаря в области СловарьЭтаповОбработки
//
Процедура ЗаписатьЭтапОбработки(Ссылка, ИдентификаторЗапроса, Этап)
	
	ИмяСобытия = СтрШаблон(
		НСтр("ru = '%1.%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
		ИмяСобытияЖурналаРегистрации(),
		Этап);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытия,
		УровеньЖурналаРегистрации.Информация,
		Метаданные.Документы.КассовыйЧекПодотчетногоЛица,
		Ссылка,
		XMLСтрока(ИдентификаторЗапроса));
	
КонецПроцедуры

// В качестве Этап используются имена из словаря в области СловарьЭтаповОбработки
//
Процедура ЗаписатьОшибкуОбработки(Ссылка, Этап, Сообщение, ОтветСервиса = Неопределено)
	
	ИмяСобытия = СтрШаблон(
		НСтр("ru = '%1.%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
		ИмяСобытияЖурналаРегистрации(),
		Этап);
	
	Если ОтветСервиса = Неопределено Тогда
		Комментарий = Сообщение;
	Иначе
		ШаблонСообщения = НСтр("ru = '%1
                               |От сервиса получены данные:
                               |%2
                               |'", ОбщегоНазначения.КодОсновногоЯзыка());
		Комментарий = СтрШаблон(ШаблонСообщения, Сообщение, ОбщегоНазначенияБП.ЗначениеВСтрокуJSON(ОтветСервиса));
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытия,
		УровеньЖурналаРегистрации.Предупреждение,
		Метаданные.Документы.КассовыйЧекПодотчетногоЛица,
		Ссылка,
		Комментарий);
	
КонецПроцедуры

Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат НСтр("ru = 'КассовыеЧекиПодотчетныхЛиц.ЗапросыДетальныхДанных'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

#Область СловарьКодовОтветаМенеджераСервиса

// См. описание HTTP-сервиса УниверсальнаяИнтеграция в описании облачной подсистемы Фреш

Функция КодУспешноСоздан()
	Возврат 201;
КонецФункции

Функция КодУспешноИзменен()
	Возврат 200;
КонецФункции

Функция КодНеНайден()
	Возврат 404;
КонецФункции

#КонецОбласти

#Область СловарьЭтаповОбработки

Функция ЭтапОбработкиОтправленЗапрос()
	Возврат НСтр("ru = 'ПолученЗапрос'", ОбщегоНазначения.КодОсновногоЯзыка());
КонецФункции

Функция ЭтапОбработкиПолученОтвет()
	Возврат НСтр("ru = 'ПолученОтвет'", ОбщегоНазначения.КодОсновногоЯзыка());
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
