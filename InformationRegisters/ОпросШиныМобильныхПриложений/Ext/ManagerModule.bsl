#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Записывает необходимость обращения к шине за сообщениями, отправленными мобильным приложением.
// Например, при получении оповещения о наличии сообщений либо при работе пользователя с объектами, где эти сообщения могут быть нужны.
// Основная цель механизма: регулирование нагрузки при работе пользователя,
// чтобы фактические обращения к шине не выполнялись избыточно часто.
// 
// Параметры:
//  ИмяПриложения - Строка - имя мобильного приложения
//  ЭтоОповещение - Булево - Истина, если у вызывающего кода есть уверенность, что сообщение из мобильного отправлено
// 
// Возвращаемое значение:
//  Булево - Истина, если к шине целесообразно обратиться сейчас.
//           В этом случае следует вызвать ШинаМобильныхПриложений.ПроверитьСообщенияПриложения (асинхронно)
//
Функция ЗаписатьПотребность(ИмяПриложения, ЭтоОповещение) Экспорт
	
	Запись = СоздатьМенеджерЗаписи();
	Запись.ИмяПриложения = ИмяПриложения;
	
	УстановитьПривилегированныйРежим(Истина);
	Запись.Прочитать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ЭтоОповещение Тогда
		
		Если Запись.ТребуетсяЗапрос Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если Запись.ДатаСледующегоЗапроса > ТекущаяУниверсальнаяДата() Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Запись.ТребуетсяЗапрос = Истина;
	Запись.ИмяПриложения   = ИмяПриложения;
	Запись.Версия          = Новый УникальныйИдентификатор;
	
	УстановитьПривилегированныйРежим(Истина);
	Запись.Записать(Истина);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Истина;
	
КонецФункции

Функция ТребуетсяЗапрос(ИмяПриложения) Экспорт
	
	Запись = СоздатьМенеджерЗаписи();
	Запись.ИмяПриложения = ИмяПриложения;
	
	УстановитьПривилегированныйРежим(Истина);
	Запись.Прочитать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Запись.ТребуетсяЗапрос;
	
КонецФункции

Процедура ЗаписатьВыполнение(ИмяПриложения, ВерсияНачалаЗапроса, ИнтервалЗапросов) Экспорт
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ОпросШиныМобильныхПриложений");
	ЭлементБлокировкиДанных.УстановитьЗначение("ИмяПриложения", ИмяПриложения);
	
	Запись = СоздатьМенеджерЗаписи();
	Запись.ИмяПриложения = ИмяПриложения;
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных.Заблокировать();
		
		УстановитьПривилегированныйРежим(Истина);
		Запись.Прочитать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Запись.Выбран() И Запись.Версия = ВерсияНачалаЗапроса И Запись.ТребуетсяЗапрос Тогда
			
			Запись.ТребуетсяЗапрос       = Ложь;
			Запись.ДатаСледующегоЗапроса = ТекущаяУниверсальнаяДата() + ИнтервалЗапросов;
			Запись.Версия                = Новый УникальныйИдентификатор;
			
			УстановитьПривилегированныйРежим(Истина);
			Запись.Записать(Истина);
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Позволяет реализовать оптимистическую блокировку в случае,
// когда между началом и окончанием опроса шины записана потребность в очередном опросе.
// 
// Перед началом опроса следует получить версию, которую передать в ЗаписатьВыполнение()
//
Функция ВерсияНачалаЗапроса(Приложение) Экспорт
	
	Запись = СоздатьМенеджерЗаписи();
	Запись.ИмяПриложения = Приложение;
	
	УстановитьПривилегированныйРежим(Истина);
	Запись.Прочитать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Запись.Версия;
	
КонецФункции

#КонецОбласти

#КонецЕсли
