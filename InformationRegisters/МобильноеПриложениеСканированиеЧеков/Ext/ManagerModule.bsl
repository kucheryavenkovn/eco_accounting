#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет, разрешено ли в приложении сканирование чеков
// 
// Возвращаемое значение:
//  Булево - Истина, если приложение поддерживает сканирование чеков
//
Функция ДоступноСканированиеЧеков() Экспорт
	
	Возврат ОбщегоНазначения.РазделениеВключено()
		И Метаданные.Имя = "БухгалтерияПредприятияБазовая1"
		И ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности()
		И РегистрыСведений.КассовыеЧекиПодотчетныхЛицЗапросыДетальныхДанных.МенеджерСервисаГотовПриниматьЗапросы();
	
КонецФункции

// Определяет, включено ли в приложении сканирование чеков
// 
// Возвращаемое значение:
//  Булево - Истина, если в приложении включено сканирование чеков
//
Функция ВключеноСканированиеЧеков() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("УстановкаМобильногоПриложенияСканированиеЧеков")
		Или ПолучитьФункциональнуюОпцию("УстановкаМобильногоПриложенияСканированиеЧековПростойИнтерфейс");
	
КонецФункции

// Вызывается при подключении мобильного приложения 1С:БизнесСтарт. Сканер чеков.
// Устанавливает признак, что у пользователя подключено мобильное приложение.
//
// Параметры:
//  Пользователь - СправочникСсылка.ФизическиеЛица - пользователь мобильного приложения, подключенного через шину
//               - Неопределено - мобильное приложение подключено текущим пользователем (без использования шины)
//
Процедура УстановитьМобильноеПриложениеПодключено(Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Запись = СоздатьМенеджерЗаписи();
	Запись.Пользователь = Пользователь;
	
	Запись.Прочитать();
	
	Если Запись.Выбран() И Запись.Активировано Тогда
		Возврат;
	КонецЕсли;
	
	Запись.Пользователь = Пользователь;
	Запись.Активировано = Истина;
	Запись.Записать();
	
КонецПроцедуры

// Определяет наличие подключения с мобильным приложением 1С:БизнесСтарт. Сканер чеков у текущего пользователя.
// 
// Возвращаемое значение:
//  Булево - признак о том, подключено ли мобильное приложение у текущего пользователя.
//
Функция ПодключеноМобильноеПриложениеТекущемуПользователю() Экспорт
	
	Если Не ВключеноСканированиеЧеков() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Подключено
	|ИЗ
	|	РегистрСведений.МобильноеПриложениеСканированиеЧеков КАК МобильноеПриложениеПользователи
	|ГДЕ
	|	МобильноеПриложениеПользователи.Пользователь = &Пользователь
	|	И МобильноеПриложениеПользователи.Активировано
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.МобильноеПриложениеСканированиеЧеков КАК МобильноеПриложениеФизическиеЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО МобильноеПриложениеФизическиеЛица.Пользователь = Пользователи.ФизическоеЛицо
	|ГДЕ
	|	Пользователи.Ссылка = &Пользователь
	|	И МобильноеПриложениеФизическиеЛица.Активировано";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Определяет наличие подключения с мобильным приложением 1С:БизнесСтарт. Сканер чеков у любого из пользователей.
// 
// Возвращаемое значение:
//  Булево - признак о том, подключено ли мобильное приложение
//
Функция ПодключеноМобильноеПриложение() Экспорт
	
	Если Не ВключеноСканированиеЧеков() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Подключено
	|ИЗ
	|	РегистрСведений.МобильноеПриложениеСканированиеЧеков КАК МобильноеПриложениеСканированиеЧеков
	|ГДЕ
	|	МобильноеПриложениеСканированиеЧеков.Активировано";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

#Область ШинаМобильныхПриложений

// Использование шины мобильных приложений для приложения 1С:БизнесСтарт. Сканер чеков

#Область ПодключениеПодсистемы

// Методы раздела - это обязательный API для подключения к шине

// Имя мобильного приложения 1С:БизнесСтарт. Сканер чеков в шине мобильных приложений
// 
// Возвращаемое значение:
//  Строка
//
Функция ИмяМобильногоПриложения() Экспорт
	
	Возврат "ReceiptScanner";
	
КонецФункции

// Интервал проверки сообщений в шине мобильных приложений.
// Основной (быстрый) способ доставки оповещений - через менеджер сервиса.
// Опрос с заданным здесь интервалом - запасной способ, на случай, если в менеджере сервиса что-то пойдет не так.
// 
// Возвращаемое значение:
//  Число - интервал в секундах
//
Функция ИнтервалПроверкиСообщений() Экспорт
	
	Возврат 300;
	
КонецФункции

// Обрабатывает сообщение шины мобильных приложений - сохраняет содержащийся в нем QR-код кассового чека подотчетного лица
//
// Параметры:
//  Отправитель        - Строка - код доступа пользователя, отсканировавшего QR-код
//  Сообщение          - Структура - содержимое сообщения
//
Процедура ОбработатьСообщениеШиныМобильныхПриложений(Отправитель, Сообщение) Экспорт
	
	Приложение = ИмяМобильногоПриложения();
	
	Пользователь = ПользовательПоКодуДоступа(Отправитель);
	Если Пользователь = Неопределено Тогда
		Ошибка = СтрШаблон(
			НСтр("ru = 'Неизвестный отправитель: %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
			Отправитель);
		ШинаМобильныхПриложений.ЗаписатьОшибкуСодержимогоСообщения(Сообщение, Приложение, Ошибка);
		Возврат;
	КонецЕсли;
	
	УстановитьМобильноеПриложениеПодключено(Пользователь);
	
	Если Не ЗначениеЗаполнено(Сообщение) Тогда
		Возврат;
	КонецЕсли;
	
	СодержитДанные = Ложь;
	
	Если Сообщение.Свойство("QRКод") Тогда
		ЗагрузитьQRКодыИзШиныМобильныхПриложений(Сообщение, Пользователь);
		СодержитДанные = Истина;
	КонецЕсли;
	
	Если Сообщение.Свойство("КассовыйЧек") Тогда
		ЗагрузитьКассовыйЧекИзШиныМобильныхПриложений(Сообщение, Пользователь);
		СодержитДанные = Истина;
	КонецЕсли;
	
	Если Не СодержитДанные Тогда
		ШинаМобильныхПриложений.ЗаписатьОшибкуСодержимогоСообщения(
			Сообщение,
			Приложение,
			НСтр("ru = 'Отсутствует одно из обязательных свойств: QRКод, КассовыйЧек'", ОбщегоНазначения.КодОсновногоЯзыка()));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РегистрацияПользователей

// Предоставляет код доступа в мобильное приложение (выданный ранее или новый).
//
// Параметры:
//  Пользователь - ОпределяемыйТип.ПользовательШиныМобильныхПриложений - лицо,
//                 которому предоставляется доступ.
//               - Неопределено - пользователь программы, под которым выполнен вход
// 
// Возвращаемое значение:
//  Структура - см. ШинаМобильныхПриложений.НовыйКодДоступа
//  Неопределено - не удалось предоставить код
//
Функция КодДоступа(Пользователь = Неопределено) Экспорт
	
	Если Не ВключеноСканированиеЧеков() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	// Доступ может быть предоставлен пользователям и физическому лицу.
	// В регистр пишем преимущественно физическое лицо
	ИдентификаторыПользователя = ИдентификаторыПользователя(Пользователь);
	ОсновнойИдентификатор = ИдентификаторыПользователя[0];
	
	Блокировка = ЗаблокироватьИдентификаторыПользователя(ИдентификаторыПользователя);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторыПользователя", ИдентификаторыПользователя);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	МобильноеПриложение.Пользователь КАК Пользователь,
	|	МобильноеПриложение.КодДоступа КАК Код,
	|	МобильноеПриложение.ПредставлениеКодаДоступа КАК Представление
	|ИЗ
	|	РегистрСведений.МобильноеПриложениеСканированиеЧеков КАК МобильноеПриложение
	|ГДЕ
	|	МобильноеПриложение.Пользователь В(&ИдентификаторыПользователя)
	|	И МобильноеПриложение.КодДоступа <> """"
	|
	|УПОРЯДОЧИТЬ ПО
	|	Пользователь";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		РазблокироватьИдентификаторыПользователя(Блокировка);
		
		КодДоступа = ШинаМобильныхПриложений.НовыйКодДоступа();
		ЗаполнитьЗначенияСвойств(КодДоступа, Выборка);
		
		Возврат КодДоступа;
		
	КонецЕсли;
	
	// Получим новый код
	НачальныеДанные = НовыйНачальныеДанные();
	
	НачальныеДанные.Сотрудник = ПредставлениеПользователя(ОсновнойИдентификатор);
	
	КодДоступа = ШинаМобильныхПриложений.КодДоступа(ИмяМобильногоПриложения(), НачальныеДанные);
	
	Если КодДоступа <> Неопределено Тогда
		
		Запись = СоздатьМенеджерЗаписи();
		Запись.Пользователь = ОсновнойИдентификатор;
		
		УстановитьПривилегированныйРежим(Истина);
		Запись.Прочитать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Запись.Пользователь = ОсновнойИдентификатор;
		Запись.КодДоступа               = КодДоступа.Код;
		Запись.ПредставлениеКодаДоступа = КодДоступа.Представление;
		
		УстановитьПривилегированныйРежим(Истина);
		Запись.Записать(Истина);
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
		
	РазблокироватьИдентификаторыПользователя(Блокировка);
	
	Возврат КодДоступа;
	
КонецФункции

// Удаляет код доступа: делает доступ пользователя по этому коду невозможным.
//
// Параметры:
//  Пользователь - ОпределяемыйТип.ПользовательШиныМобильныхПриложений - лицо,
//                 которому предоставляется доступ.
// 
// Возвращаемое значение:
//  Булево - Истина, если доступ удален
//
Функция УдалитьКодДоступа(Пользователь) Экспорт
	
	Если Не ВключеноСканированиеЧеков() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИдентификаторыПользователя = ИдентификаторыПользователя(Пользователь);
	Блокировка = ЗаблокироватьИдентификаторыПользователя(ИдентификаторыПользователя);
	
	Удалено = Ложь;
	
	Для Каждого Идентификатор Из ИдентификаторыПользователя Цикл
		
		Запись = СоздатьМенеджерЗаписи();
		Запись.Пользователь = Идентификатор;
		
		УстановитьПривилегированныйРежим(Истина);
		Запись.Прочитать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Не Запись.Выбран() Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ШинаМобильныхПриложений.УдалитьКодДоступа(ИмяМобильногоПриложения(), Запись.КодДоступа) Тогда
			Продолжить;
		КонецЕсли;
		
		Запись.Пользователь = Идентификатор;
		
		УстановитьПривилегированныйРежим(Истина);
		Запись.Удалить();
		УстановитьПривилегированныйРежим(Ложь);
		
		Удалено = Истина;
		
	КонецЦикла;
	
	РазблокироватьИдентификаторыПользователя(Блокировка);
	
	Возврат Удалено;
	
КонецФункции

// Представление пользователя мобильного приложения.
//
// Параметры:
//  Пользователь - ОпределяемыйТип.ПользовательШиныМобильныхПриложений - лицо,
//                 которому предоставляется доступ.
// 
// Возвращаемое значение:
//  Строка
//
Функция ПредставлениеПользователя(Пользователь) Экспорт
	
	Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
		ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ФизическоеЛицо");
	Иначе
		ФизическоеЛицо = Пользователь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		Возврат Строка(Пользователь);
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФизическоеЛицо, "ФИО");
	
КонецФункции

// Представление пользователя мобильного приложения:
// - фамилия и инициалы, если он ассоциирован с физическим лицом
// - представление пользователя программы, если нет.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи, СправочникСсылка.ФизическиеЛица - пользователь;
//                 должен быть приведен к справочнику ФизическиеЛица, когда это возможно.
//                 Пример приведения см. в ПредставлениеПользователя()
//  Наименование - Строка - представление пользователя или ФИО физического лица
// 
// Возвращаемое значение:
//  Строка - представление пользователя мобильного приложения
//
Функция ПредставлениеПользователяКраткое(Пользователь, Наименование) Экспорт
	
	Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Возврат ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Наименование);
	Иначе
		Возврат Наименование;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Сообщения

// Инициирует получение сообщений из шины мобильных приложений при активности пользователя, связанной с чеками подотченых лиц.
// Это запасной вариант доставки сообщений.
// Основной вариант реализуется через оповещения менеджера сервиса.
// 
// Возвращаемое значение:
//  Булево - Истина, если регулярная проверка сообщений имеет смысл.
//
Функция НачатьПроверкуСообщений() Экспорт
	
	Если Не ПроверятьСообщения() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ШинаМобильныхПриложений.НачатьПроверкуСообщенийПоАктивностиПользователя(ИмяМобильногоПриложения());
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ФормыСписков

Функция НачатьПроверкуСообщенийИзФормыСписка() Экспорт
	
	Если Не НачатьПроверкуСообщений() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ИнтервалПроверкиСообщений();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыйНачальныеДанные()
	
	НачальныеДанные = Новый Структура;
	
	НачальныеДанные.Вставить("Сотрудник",     "");
	НачальныеДанные.Вставить("ИмяПриложения", "");
	НачальныеДанные.Вставить("КодПриложения", "");
	НачальныеДанные.Вставить("Приложение",    "");
	
	НачальныеДанные.КодПриложения = Метаданные.Имя;
	НачальныеДанные.ИмяПриложения = ОбщегоНазначенияБП.ПредставлениеПрограммы();
	
	НачальныеДанные.Приложение = РаботаВМоделиСервиса.ПолучитьИмяПриложения();
	Если ПустаяСтрока(НачальныеДанные.Приложение) Тогда
		НачальныеДанные.Приложение = СокрЛП(Константы.ЗаголовокСистемы.Получить());
	КонецЕсли;
	Если ПустаяСтрока(НачальныеДанные.Приложение) Тогда
		НачальныеДанные.Приложение = Метаданные.ПодробнаяИнформация;
	КонецЕсли;
	
	Возврат НачальныеДанные;
	
КонецФункции

Функция ЗаблокироватьИдентификаторыПользователя(ИдентификаторыПользователя)
	
	Блокировка = Новый Массив;
	
	Для Каждого Идентификатор Из ИдентификаторыПользователя Цикл
		КлючЗаписи = СоздатьКлючЗаписи(Новый Структура("Пользователь", Идентификатор));
		ЗаблокироватьДанныеДляРедактирования(КлючЗаписи);
		Блокировка.Добавить(КлючЗаписи);
	КонецЦикла;
	
	Возврат Блокировка;
	
КонецФункции

Процедура РазблокироватьИдентификаторыПользователя(Блокировка)
	
	Для Каждого КлючЗаписи Из Блокировка Цикл
		РазблокироватьДанныеДляРедактирования(КлючЗаписи);
	КонецЦикла;
	
КонецПроцедуры

Функция ИдентификаторыПользователя(Пользователь)
	
	// Доступ может быть предоставлен пользователям и физическому лицу.
	//
	// Пользователь может ссылаться на физическое лицо.
	// Таким образом, у одного лица может быть несколько идентификаторов:
	// одна ссылка на справочник ФизическиеЛица + ссылки на справочник Пользователи.
	//
	// В регистр пишем преимущественно физическое лицо - это основной идентификатор.
	// В перечне идентификаторов он - первый.
	
	ИдентификаторыПользователя = Новый Массив;
	ИдентификаторыПользователя.Добавить(Пользователь);
	
	Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ФизическоеЛицо", Пользователь);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.ФизическоеЛицо = &ФизическоеЛицо";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ИдентификаторыПользователя.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
	Иначе // Пользователи
		
		ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ФизическоеЛицо");
		Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
			ИдентификаторыПользователя.Вставить(0, ФизическоеЛицо);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИдентификаторыПользователя;
	
КонецФункции

Функция ПользовательПоКодуДоступа(КодДоступа)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КодДоступа", КодДоступа);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	МобильноеПриложение.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.МобильноеПриложениеСканированиеЧеков КАК МобильноеПриложение
	|ГДЕ
	|	МобильноеПриложение.КодДоступа = &КодДоступа
	|
	|УПОРЯДОЧИТЬ ПО
	|	Пользователь";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Пользователь;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПроверятьСообщения()
	
	// Можем ли ожидать, что получим что-либо из шины
	
	Если Не ВключеноСканированиеЧеков() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	МобильноеПриложение.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.МобильноеПриложениеСканированиеЧеков КАК МобильноеПриложение";
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура ЗагрузитьQRКодыИзШиныМобильныхПриложений(Сообщение, Пользователь)
	
	Приложение = ИмяМобильногоПриложения();
	
	Если ТипЗнч(Сообщение.QRКод) <> Тип("Массив") Тогда
		ШинаМобильныхПриложений.ЗаписатьОшибкуСодержимогоСообщения(
			Сообщение,
			Приложение,
			НСтр("ru = 'Свойство QRКод не содержит массив кодов'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат;
	КонецЕсли;
	
	Команда = "ДобавитьЧек";
	Если Сообщение.Свойство("Команда") Тогда
		Команда = Сообщение.Команда;
	КонецЕсли;
	
	Если Команда = "УдалитьЧек" Тогда
		
		Для Каждого QRКод Из Сообщение.QRКод Цикл
			Попытка
				Документы.КассовыйЧекПодотчетногоЛица.УдалитьЧекПользователя(QRКод, Пользователь);
			Исключение
				ШинаМобильныхПриложений.ЗаписатьИсключение(
					ИнформацияОбОшибке(),
					QRКод,
					Приложение,
					НСтр("ru = 'Удаление кассового чека'", ОбщегоНазначения.КодОсновногоЯзыка()));
			КонецПопытки;
		КонецЦикла;
		
	Иначе
		
		Для Каждого QRКод Из Сообщение.QRКод Цикл
			
			Попытка
				КассовыйЧек = Документы.КассовыйЧекПодотчетногоЛица.ПолучитьПоQRКоду(QRКод, Пользователь);
			Исключение
				ШинаМобильныхПриложений.ЗаписатьИсключение(
					ИнформацияОбОшибке(),
					QRКод,
					Приложение,
					НСтр("ru = 'Добавление кассового чека'", ОбщегоНазначения.КодОсновногоЯзыка()));
				Продолжить;
			КонецПопытки;
			
			Если Не ЗначениеЗаполнено(КассовыйЧек) Тогда
				Ошибка = СтрШаблон(
					НСтр("ru = 'Свойство QRКод содержит некорректный QR-код %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
					QRКод);
				ШинаМобильныхПриложений.ЗаписатьОшибкуСодержимогоСообщения(Сообщение, Приложение, Ошибка);
				Продолжить;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьКассовыйЧекИзШиныМобильныхПриложений(Сообщение, Пользователь)
	
	Приложение = ИмяМобильногоПриложения();
	
	Если ТипЗнч(Сообщение.КассовыйЧек) <> Тип("Структура") Тогда
		ШинаМобильныхПриложений.ЗаписатьОшибкуСодержимогоСообщения(
			Сообщение,
			Приложение,
			НСтр("ru = 'Свойство КассовыйЧек не содержит объект'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат;
	КонецЕсли;
	
	ОбязательныеСвойства = Новый Массив;
	ОбязательныеСвойства.Добавить("QRКод");
	ОбязательныеСвойства.Добавить("Статус");
	
	Для Каждого ИмяСвойства Из ОбязательныеСвойства Цикл
		
		Если Сообщение.КассовыйЧек.Свойство(ИмяСвойства) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Объект КассовыйЧек не содержит свойство %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ИмяСвойства);
		
		ШинаМобильныхПриложений.ЗаписатьОшибкуСодержимогоСообщения(
			Сообщение,
			Приложение,
			ТекстОшибки);
			
		Возврат;
		
	КонецЦикла;
	
	Попытка
		QRКод = Сообщение.КассовыйЧек.QRКод;
		КассовыйЧек = Документы.КассовыйЧекПодотчетногоЛица.ПолучитьПоQRКоду(QRКод, Пользователь);
	Исключение
		ШинаМобильныхПриложений.ЗаписатьИсключение(
			ИнформацияОбОшибке(),
			QRКод,
			Приложение,
			НСтр("ru = 'Добавление кассового чека'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат;
	КонецПопытки;
	
	Если Не ЗначениеЗаполнено(КассовыйЧек) Тогда
		Ошибка = СтрШаблон(
			НСтр("ru = 'Свойство QRКод содержит некорректный QR-код %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
			QRКод);
		ШинаМобильныхПриложений.ЗаписатьОшибкуСодержимогоСообщения(Сообщение, Приложение, Ошибка);
		Возврат;
	КонецЕсли;
	
	ДанныеЧека = Неопределено;
	Если Сообщение.КассовыйЧек.Свойство("ДанныеЧека") Тогда
		ДанныеЧека = Сообщение.КассовыйЧек.ДанныеЧека;
	КонецЕсли;
	
	Попытка
		Документы.КассовыйЧекПодотчетногоЛица.ЗаполнитьДанныеЧека(КассовыйЧек, Сообщение.КассовыйЧек.Статус, ДанныеЧека);
	Исключение
		ШинаМобильныхПриложений.ЗаписатьИсключение(
			ИнформацияОбОшибке(),
			QRКод,
			Приложение,
			НСтр("ru = 'Заполнение детальных данных'", ОбщегоНазначения.КодОсновногоЯзыка()));
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
