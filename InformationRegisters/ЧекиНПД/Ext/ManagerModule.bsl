#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает сведения о чеке документа-основания.
//
// Параметры:
//  ДокументОснование	 - ДокументСсылка - Ссылка на документ-основание.
// 
// Возвращаемое значение:
//   - Структура - Сведения о чеке. См. НовыйСведенияОЧеке().
//
Функция СведенияОЧеке(ДокументОснование) Экспорт
	
	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ДокументОснование", ДокументОснование);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЧекиНПД.ДокументОснование КАК ДокументОснование,
	|	ЧекиНПД.Организация КАК Организация,
	|	ЧекиНПД.Состояние КАК Состояние,
	|	ЧекиНПД.СуммаЧека КАК СуммаЧека,
	|	ЧекиНПД.НомерЧека КАК НомерЧека,
	|	ЧекиНПД.ДатаЧека КАК ДатаЧека,
	|	ЧекиНПД.ДатаАннулированияЧека КАК ДатаАннулированияЧека,
	|	ЧекиНПД.ПричинаОтменыЧека КАК ПричинаОтменыЧека,
	|	ЧекиНПД.АдресЧекаНаСайте КАК АдресЧекаНаСайте,
	|	ЧекиНПД.ПрисоединенныйФайлЧека КАК ПрисоединенныйФайлЧека,
	|	ЧекиНПД.ПроизведенВозвратПоЧеку КАК ПроизведенВозвратПоЧеку
	|ИЗ
	|	РегистрСведений.ЧекиНПД КАК ЧекиНПД
	|ГДЕ
	|	ЧекиНПД.ДокументОснование = &ДокументОснование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		СведенияОЧеке = НовыйСведенияОЧеке();
		ЗаполнитьЗначенияСвойств(СведенияОЧеке, Выборка);
		
		СведенияОЧеке.ПредставлениеПричиныОтменыЧека = 
			Перечисления.ПричиныОтменыЧекаНПД.ПредставлениеПричины(Выборка.ПричинаОтменыЧека);
		
		СведенияОЧеке.ОписаниеЧека = ОписаниеЧека(СведенияОЧеке);
		
		Возврат СведенияОЧеке;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Запускает формирование чека в сервисе Мой налог.
// Нужно использовать в длительной операции.
//
// Параметры:
//  СтруктураПараметров	 - Структура - Структура параметров формирования чека. См. ЧекиНПДКлиентСервер.НовыйПараметрыФормированияЧека().
//  АдресХранилища		 - Строка - Адрес хранилища, в которое будет помещен результат запуска формирования. См. НовыйРезультатОперацииСЧеком().
//
Процедура СформироватьЧекВФоне(СтруктураПараметров, АдресХранилища) Экспорт
	
	Результат = СформироватьЧек(СтруктураПараметров);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Проверяет результат формирование чека в сервисе Мой налог.
// Нужно использовать в длительной операции.
//
// Параметры:
//  СтруктураПараметров	 - Структура - Структура параметров формирования чека. См. ЧекиНПДКлиентСервер.НовыйПараметрыОжиданияФормированияЧека().
//  АдресХранилища		 - Строка - Адрес хранилища, в которое будет помещен результат проверки формирования. См. НовыйРезультатОперацииСЧеком().
//
Процедура ПроверитьРезультатФормированияЧекаВФоне(СтруктураПараметров, АдресХранилища) Экспорт
	
	Результат = ПроверитьРезультатФормированияЧека(СтруктураПараметров);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Запускает аннулирование чека в сервисе Мой налог.
// Нужно использовать в длительной операции.
//
// Параметры:
//  СтруктураПараметров	 - Структура - Структура параметров аннулирования чека. См. ЧекиНПДКлиентСервер.НовыйПараметрыАннулированияЧека().
//  АдресХранилища		 - Строка - Адрес хранилища, в которое будет помещен результат запуска аннулирования. См. НовыйРезультатОперацииСЧеком().
//
Процедура АннулироватьЧекВФоне(СтруктураПараметров, АдресХранилища) Экспорт
	
	Результат = АннулироватьЧек(СтруктураПараметров);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Проверяет результат аннулирования чека в сервисе Мой налог.
// Нужно использовать в длительной операции.
//
// Параметры:
//  СтруктураПараметров	 - Структура - Структура параметров проверки результатов аннулирования чека.
//                                     См. ЧекиНПДКлиентСервер.НовыйПараметрыОжиданияФормированияЧека().
//  АдресХранилища		 - Строка - Адрес хранилища, в которое будет помещен результат проверки аннулирования.
//                                  См. НовыйРезультатОперацииСЧеком().
//
Процедура ПроверитьРезультатАннулированияЧекаВФоне(СтруктураПараметров, АдресХранилища) Экспорт
	
	Результат = ПроверитьРезультатАннулированияЧека(СтруктураПараметров);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Отправляет чек НПД по электронной почте и СМС.
// Нужно использовать в длительной операции.
//
// Параметры:
//  СтруктураПараметров	 - Структура - Параметры отправки, см. ЧекиНПДКлиентСервер.НовыйПараметрыОтправкиЧека().
//  АдресХранилища		 - Строка - Адрес хранилища, в которое будет помещен результат отправки.
//                                  См. НовыйРезультатОтправкиЧека().
//
Процедура ОтправитьЧекВФоне(СтруктураПараметров, АдресХранилища) Экспорт
	
	Результат = ОтправитьЧек(СтруктураПараметров);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Запускает формирование чека в сервисе Мой налог.
//
// Параметры:
//  ПараметрыЧека	 - Структура - Структура параметров формирования чека. См. ЧекиНПДКлиентСервер.НовыйПараметрыФормированияЧека().
// 
// Возвращаемое значение:
//   - Структура - Результат запуска формирования чека. См. НовыйРезультатОперацииСЧеком().
//
Функция СформироватьЧек(ПараметрыЧека) Экспорт
	
	РезультатФормирования = НовыйРезультатОперацииСЧеком();
	
	ДокументОснование = ПараметрыЧека.Ссылка;
	
	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
		РезультатФормирования.Ошибка = Истина;
		РезультатФормирования.ТекстОшибки = НСтр("ru = 'Не указано основание для формирования чека'");
		Возврат РезультатФормирования;
	КонецЕсли;
	
	СведенияОЧеке = СведенияОЧеке(ДокументОснование);
	
	// Проверим, что по чеку не выполнялась регистрация, либо начиналась, но не была
	// завершена. Если регистрация не была завершена, т.е. сервис не вернул пока данных чека,
	// нужно сделать повторную регистрацию дохода. Сервис помнит, что доход уже регистрировался (по Идентификатору)
	// и не выполняет регистрацию, а возвращает данные для запроса результата.
	
	Если СведенияОЧеке <> Неопределено
		И СведенияОЧеке.Состояние <> Перечисления.СостоянияЧековНПД.ВыполняетсяРегистрация
		И СведенияОЧеке.Состояние <> Перечисления.СостоянияЧековНПД.ОшибкаПриРегистрации
		И СведенияОЧеке.Состояние <> Перечисления.СостоянияЧековНПД.ОшибкаПриАннулировании Тогда
		РезультатФормирования.Ошибка = Истина;
		РезультатФормирования.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для документа %1 чек уже сформирован (состояние чека %2)'"),
			ДокументОснование,
			СведенияОЧеке.Состояние);
		Возврат РезультатФормирования;
	КонецЕсли;
	
	ПараметрыРегистрацииДохода = ПараметрыРегистрацииДохода(ПараметрыЧека);
	Ответ = ИнтеграцияСПлатформойСамозанятые.ВыполнитьМетодВзаимодействия(ПараметрыРегистрацииДохода);
	
	Если Ответ.Ошибка Тогда
		
		ЗаписатьОшибкуИКодВЖурналРегистрации(НСтр("ru = 'При формировании чека возникла ошибка:'"), Ответ);
		
		РезультатФормирования.Ошибка = Истина;
		РезультатФормирования.ТекстОшибки = Ответ.Сообщение;
		Возврат РезультатФормирования;
		
	КонецЕсли;
	
	СведенияОЧеке = СведенияОЧекеНачалоФормирования(ПараметрыЧека);
	ЗаписатьСведенияОЧеке(СведенияОЧеке);
	
	РезультатФормирования.СведенияОЧеке = СведенияОЧеке;
	
	СтатусыЗапросов = ИнтеграцияСПлатформойСамозанятыеКлиентСервер.СтатусыЗапросов();
	РезультатФормирования.СтатусЗапроса = СтатусыЗапросов.Выполняется;
	РезультатФормирования.ПараметрыОжиданияРезультата = Ответ;
	РезультатФормирования.ВремяОжидания = Ответ.ВремяОжидания;
	
	Возврат РезультатФормирования;
	
КонецФункции

// Проверяет результат формирование чека в сервисе Мой налог.
//
// Параметры:
//  ПараметрыЧека	 - Структура - Структура параметров формирования чека. См. ЧекиНПДКлиентСервер.НовыйПараметрыОжиданияФормированияЧека().
// 
// Возвращаемое значение:
//   - Структура - Результат проверки результата формирования чека. См. НовыйРезультатОперацииСЧеком().
//
Функция ПроверитьРезультатФормированияЧека(ПараметрыЧека) Экспорт
	
	РезультатФормирования = НовыйРезультатОперацииСЧеком();
	
	ДокументОснование = ПараметрыЧека.Ссылка;
	
	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
		РезультатФормирования.Ошибка = Истина;
		РезультатФормирования.ТекстОшибки = НСтр("ru = 'Не указано основание для проверки результата формирования чека.'");
		Возврат РезультатФормирования;
	КонецЕсли;
	
	СведенияОЧеке = СведенияОЧеке(ДокументОснование);
	РезультатФормирования.СведенияОЧеке = СведенияОЧеке;
	
	// Проверим, что по чеку начата регистрация дохода.
	Если СведенияОЧеке = Неопределено
		Или СведенияОЧеке.Состояние <> Перечисления.СостоянияЧековНПД.ВыполняетсяРегистрация Тогда
		РезультатФормирования.Ошибка = Истина;
		РезультатФормирования.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для документа %1 формирование чека не начиналось (состояние чека %2)'"),
			ДокументОснование,
			СведенияОЧеке.Состояние);
		Возврат РезультатФормирования;
	КонецЕсли;
	
	Ответ = ИнтеграцияСПлатформойСамозанятые.ПолучитьРезультатВыполнения(ПараметрыЧека.ПараметрыОжиданияРезультата);
	
	РезультатФормирования.СтатусЗапроса = Ответ.Статус;
	РезультатФормирования.ВремяОжидания = Ответ.ВремяОжидания;
	
	СтатусыЗапросов = ИнтеграцияСПлатформойСамозанятыеКлиентСервер.СтатусыЗапросов();
	
	Если Ответ.Статус = СтатусыЗапросов.Выполнено Тогда
		
		Если Ответ.Результат.ЧекOffLine = Истина Тогда
			СведенияОЧеке.Состояние = Перечисления.СостоянияЧековНПД.ОжидаетОтправкиВФНС;
		Иначе
			СведенияОЧеке.Состояние = Перечисления.СостоянияЧековНПД.Зарегистрирован;
		КонецЕсли;
		
		СведенияОЧеке.НомерЧека        = Ответ.Результат.ИдентификаторЧека;
		СведенияОЧеке.ОписаниеЧека     = ОписаниеЧека(СведенияОЧеке);
		СведенияОЧеке.АдресЧекаНаСайте = Ответ.Результат.Ссылка;
		
		Если ЗначениеЗаполнено(Ответ.Результат.Base64Строка) Тогда
			ПрисоединитьИзображениеЧекаКДокументуОснованию(СведенияОЧеке,
				ПолучитьДвоичныеДанныеИзBase64Строки(Ответ.Результат.Base64Строка),
				Ответ.Результат.ТипДанных);
		КонецЕсли;
		
		ЗаписатьСведенияОЧеке(СведенияОЧеке);
		
		РезультатФормирования.СведенияОЧеке = СведенияОЧеке;
		
	ИначеЕсли Ответ.Статус = СтатусыЗапросов.Ошибка
		Или Ответ.Статус = СтатусыЗапросов.Отменено Тогда
		
		ЗаписатьОшибкуИКодВЖурналРегистрации(НСтр("ru = 'При проверке формировании чека возникла ошибка:'"), Ответ);
		
		РезультатФормирования.Ошибка = Истина;
		РезультатФормирования.ТекстОшибки = Ответ.Сообщение;
		
		СведенияОЧеке.Состояние = Перечисления.СостоянияЧековНПД.ОшибкаПриРегистрации;
		
		ЗаписатьСведенияОЧеке(СведенияОЧеке);
		
		РезультатФормирования.СведенияОЧеке = СведенияОЧеке;
		
	КонецЕсли;
	
	Возврат РезультатФормирования;
	
КонецФункции

// Запускает аннулирование чека в сервисе Мой налог.
//
// Параметры:
//  ПараметрыЧека	 - Структура - Структура параметров формирования чека. См. ЧекиНПДКлиентСервер.НовыйПараметрыАннулированияЧека().
// 
// Возвращаемое значение:
//   - Структура - Результат запуска аннулирования чека. См. НовыйРезультатОперацииСЧеком().
//
Функция АннулироватьЧек(ПараметрыЧека) Экспорт
	
	РезультатАннулирования = НовыйРезультатОперацииСЧеком();
	
	ДокументОснование = ПараметрыЧека.Ссылка;
	
	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
		РезультатАннулирования.Ошибка = Истина;
		РезультатАннулирования.ТекстОшибки = НСтр("ru = 'Не указано основание для аннулирования чека'");
		Возврат РезультатАннулирования;
	КонецЕсли;
	
	СведенияОЧеке = СведенияОЧеке(ДокументОснование);
	
	// Проверим, что чек зарегистрирован, по чеку не выполнялось аннулирование, либо аннулирование начиналось,
	// но не было завершено. Если аннулирование не было завершено, т.е. сервис не вернул пока данных чека,
	// нужно сделать повторное аннулирование дохода. Сервис помнит, что доход уже аннулирован (по Идентификатору)
	// и не выполняет аннулирование, а вернет данные для запроса результата.
	
	Если ЧекиНПДКлиентСервер.НужноНачатьФормированиеЧека(СведенияОЧеке) Тогда
		РезультатАннулирования.Ошибка = Истина;
		РезультатАннулирования.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для документа %1 чек еще не сформирован (состояние чека %2). Его аннулирование невозможно.'"),
			ДокументОснование,
			СведенияОЧеке.Состояние);
		Возврат РезультатАннулирования;
	КонецЕсли;
	
	Если Не МожноАннулироватьЧек(СведенияОЧеке) Тогда
		РезультатАннулирования.Ошибка = Истина;
		РезультатАннулирования.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Состояние чека (%1) для документа %2 не подходит для аннулирования.'"),
			СведенияОЧеке.Состояние,
			ДокументОснование);
		Возврат РезультатАннулирования;
	КонецЕсли;
	
	ПараметрыАннулированияЧека = ПараметрыАннулированияЧека(ПараметрыЧека);
	Ответ = ИнтеграцияСПлатформойСамозанятые.ВыполнитьМетодВзаимодействия(ПараметрыАннулированияЧека);
	
	Если Ответ.Ошибка Тогда
		ЗаписатьОшибкуИКодВЖурналРегистрации(НСтр("ru = 'При аннулировании чека возникла ошибка:'"), Ответ);
		РезультатАннулирования.Ошибка = Истина;
		РезультатАннулирования.ТекстОшибки = Ответ.Сообщение;
		Возврат РезультатАннулирования;
	КонецЕсли;
	
	СведенияОЧеке.Состояние = Перечисления.СостоянияЧековНПД.ВыполняетсяАннулирование;
	СведенияОЧеке.ПричинаОтменыЧека = ПараметрыЧека.ПричинаОтменыЧека;
	СведенияОЧеке.ПредставлениеПричиныОтменыЧека = 
		Перечисления.ПричиныОтменыЧекаНПД.ПредставлениеПричины(ПараметрыЧека.ПричинаОтменыЧека);
	ЗаписатьСведенияОЧеке(СведенияОЧеке);
	
	РезультатАннулирования.СведенияОЧеке = СведенияОЧеке;
	
	СтатусыЗапросов = ИнтеграцияСПлатформойСамозанятыеКлиентСервер.СтатусыЗапросов();
	РезультатАннулирования.СтатусЗапроса = СтатусыЗапросов.Выполняется;
	РезультатАннулирования.ПараметрыОжиданияРезультата = Ответ;
	РезультатАннулирования.ПараметрыОжиданияРезультата.Вставить("ВозвратПоДокументу", ПараметрыЧека.ДокументОснование);
	РезультатАннулирования.ВремяОжидания = Ответ.ВремяОжидания;
	Возврат РезультатАннулирования;
	
КонецФункции

// Проверяет результат аннулирования чека в сервисе Мой налог.
//
// Параметры:
//  ПараметрыЧека	 - Структура - Структура параметров проверки аннулирования чека. См. ЧекиНПДКлиентСервер.НовыйПараметрыОжиданияАннулированияЧека().
// 
// Возвращаемое значение:
//   - Структура - Результат проверки результата аннулирования чека. См. НовыйРезультатОперацииСЧеком().
//
Функция ПроверитьРезультатАннулированияЧека(ПараметрыЧека) Экспорт
	
	РезультатАннулирования = НовыйРезультатОперацииСЧеком();
	
	ДокументОснование = ПараметрыЧека.Ссылка;
	
	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
		РезультатАннулирования.Ошибка = Истина;
		РезультатАннулирования.ТекстОшибки = НСтр("ru = 'Не указано основание для проверки результата аннулирования чека.'");
		Возврат РезультатАннулирования;
	КонецЕсли;
	
	СведенияОЧеке = СведенияОЧеке(ДокументОснование);
	РезультатАннулирования.СведенияОЧеке = СведенияОЧеке;
	
	// Проверим, что по чеку начата регистрация дохода.
	Если СведенияОЧеке = Неопределено
		Или СведенияОЧеке.Состояние <> Перечисления.СостоянияЧековНПД.ВыполняетсяАннулирование Тогда
		РезультатАннулирования.Ошибка = Истина;
		РезультатАннулирования.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для документа %1 аннулирование чека не начиналось (состояние чека %2)'"),
			ДокументОснование,
			СведенияОЧеке.Состояние);
		Возврат РезультатАннулирования;
	КонецЕсли;
	
	Ответ = ИнтеграцияСПлатформойСамозанятые.ПолучитьРезультатВыполнения(ПараметрыЧека.ПараметрыОжиданияРезультата);
	
	РезультатАннулирования.СтатусЗапроса = Ответ.Статус;
	РезультатАннулирования.ВремяОжидания = Ответ.ВремяОжидания;
	
	СтатусыЗапросов = ИнтеграцияСПлатформойСамозанятыеКлиентСервер.СтатусыЗапросов();
	
	Если Ответ.Статус = СтатусыЗапросов.Выполнено Тогда
		
		СведенияОЧеке.Состояние = Перечисления.СостоянияЧековНПД.Аннулирован;
		СведенияОЧеке.ДатаАннулированияЧека = ТекущаяДатаСеанса();
		СведенияОЧеке.ОписаниеЧека = ОписаниеЧека(СведенияОЧеке);
		
		Если ЗначениеЗаполнено(Ответ.Результат.Base64Строка) Тогда
			ПрисоединитьИзображениеЧекаКДокументуОснованию(СведенияОЧеке,
				ПолучитьДвоичныеДанныеИзBase64Строки(Ответ.Результат.Base64Строка),
				Ответ.Результат.ТипДанных);
		КонецЕсли;
		
		ЗаписатьСведенияОЧеке(СведенияОЧеке);
		
		ВозвратПоДокументу = ПараметрыЧека.ПараметрыОжиданияРезультата.ВозвратПоДокументу;
		Если ЗначениеЗаполнено(ВозвратПоДокументу) Тогда
			СведенияЧекаОснования = СведенияОЧеке(ВозвратПоДокументу);
			СведенияЧекаОснования.ПроизведенВозвратПоЧеку = Истина;
			СведенияЧекаОснования.ДатаАннулированияЧека = ТекущаяДатаСеанса();
			СведенияЧекаОснования.ПричинаОтменыЧека = СведенияОЧеке.ПричинаОтменыЧека;
			СведенияЧекаОснования.ПредставлениеПричиныОтменыЧека = СведенияОЧеке.ПредставлениеПричиныОтменыЧека;
			СведенияЧекаОснования.ОписаниеЧека = ОписаниеЧека(СведенияЧекаОснования);
			Если ЗначениеЗаполнено(Ответ.Результат.Base64Строка) Тогда
				ПрисоединитьИзображениеЧекаКДокументуОснованию(СведенияЧекаОснования,
					ПолучитьДвоичныеДанныеИзBase64Строки(Ответ.Результат.Base64Строка),
					Ответ.Результат.ТипДанных);
			КонецЕсли;
			ЗаписатьСведенияОЧеке(СведенияЧекаОснования);
			Если Не ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВозвратПоДокументу, "Комментарий")) Тогда
				// Если чек НПД аннулируется не из того документа, из которого был пробит изначально, то для исходного документа
				// в комментарий так же добавляется причина аннулирования чека
				Попытка
					ДокументОбъект = ВозвратПоДокументу.ПолучитьОбъект();
					ДокументОбъект.Заблокировать();
					ДокументОбъект.Комментарий = СведенияЧекаОснования.ПредставлениеПричиныОтменыЧека;
					ДокументОбъект.Записать();
					ДокументОбъект.Разблокировать();
				Исключение
					ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось записать причину аннулирования чека НПД в документе %1'"),
						ВозвратПоДокументу);
					ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
		РезультатАннулирования.СведенияОЧеке = СведенияОЧеке;
		
	ИначеЕсли Ответ.Статус = СтатусыЗапросов.Ошибка
		Или Ответ.Статус = СтатусыЗапросов.Отменено Тогда
		
		ЗаписатьОшибкуИКодВЖурналРегистрации(НСтр("ru = 'При проверке аннулирования чека возникла ошибка:'"), Ответ);
		РезультатАннулирования.Ошибка = Истина;
		РезультатАннулирования.ТекстОшибки = Ответ.Сообщение;
		
		СведенияОЧеке.Состояние = Перечисления.СостоянияЧековНПД.ОшибкаПриАннулировании;
		
		ЗаписатьСведенияОЧеке(СведенияОЧеке);
		
		РезультатАннулирования.СведенияОЧеке = СведенияОЧеке;
		
	КонецЕсли;
	
	Возврат РезультатАннулирования;
	
КонецФункции

// Отправляет чек НПД по электронной почте и СМС.
//
// Параметры:
//  ПараметрыОтправки	 - Структура - Параметры отправки, см. ЧекиНПДКлиентСервер.НовыйПараметрыОтправкиЧека().
// 
// Возвращаемое значение:
//   - Структура - Результат отправки. См. НовыйРезультатОтправкиЧека().
//
Функция ОтправитьЧек(ПараметрыОтправки) Экспорт
	
	РезультатОтправки = НовыйРезультатОтправкиЧека();
	
	ДокументОснование = ПараметрыОтправки.Ссылка;
	
	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
		ВызватьИсключение НСтр("ru = 'Не указано основание для отправки чека'");
	КонецЕсли;
	
	СведенияОЧеке = СведенияОЧеке(ДокументОснование);
	
	// Проверим, что чек зарегистрирован или аннулирован.
	
	Если Не МожноРаспечататьЧек(СведенияОЧеке) Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нельзя отправлять чек в статусе %1.'"), СведенияОЧеке.Состояние);
	КонецЕсли;
	
	Если ПараметрыОтправки.ОтправлятьEmail Тогда
		
		РезультатыОтправкиEmail = ОтправитьEmail(ПараметрыОтправки.АдресЭлектроннойПочты,
			СведенияОЧеке, ПараметрыОтправки.УникальныйИдентификатор);
		РезультатОтправки.EmailОтправлен = Не РезультатыОтправкиEmail.Ошибка;
		РезультатОтправки.ОшибкаОтправкиEmail = РезультатыОтправкиEmail.Ошибка;
		РезультатОтправки.ТекстОшибкиОтправкиEmail = РезультатыОтправкиEmail.ТекстОшибки;
		
	КонецЕсли;
	
	Если ПараметрыОтправки.ОтправлятьSMS Тогда
		РезультатОтправкиSMS = ОтправитьSMS(ПараметрыОтправки.НомерТелефона, СведенияОЧеке);
		РезультатОтправки.SMSОтправлен = Не РезультатОтправкиSMS.Ошибка;
		РезультатОтправки.ОшибкаОтправкиSMS = РезультатОтправкиSMS.Ошибка;
		РезультатОтправки.ТекстОшибкиОтправкиSMS = РезультатОтправкиSMS.ТекстОшибки;
	КонецЕсли;
	
	Возврат РезультатОтправки;
	
КонецФункции

// Запускает длительную операцию по аннулированию чека в сервисе Мой налог.
//
// Параметры:
//	ПараметрыАннулированияЧека - Структура - параметры аннулирования чека.
//	Идентификатор - УникальныйИдентификатор - уникальный идентификатор документа.
//
// Возвращаемое значение:
//   ДлительнаяОперация - Структура.
//
Функция ЗапуститьАннулированиеЧекаВФоне(ПараметрыАннулированияЧека, Идентификатор) Экспорт

	СведенияОЧеке = Неопределено;
	Если ЗначениеЗаполнено(ПараметрыАннулированияЧека.ДокументОснование) Тогда
		СведенияОЧеке = РегистрыСведений.ЧекиНПД.СведенияОЧеке(ПараметрыАннулированияЧека.ДокументОснование);
	КонецЕсли;
	
	//Сделаем запись в регистр сведений ЧекиНПД.
	НаборЗаписей = РегистрыСведений.ЧекиНПД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументОснование.Установить(ПараметрыАннулированияЧека.Ссылка);
	
	НоваяСтрока = НаборЗаписей.Добавить();
	
	Если ЗначениеЗаполнено(СведенияОЧеке) Тогда
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СведенияОЧеке);
	КонецЕсли;
	
	НоваяСтрока.ДатаАннулированияЧека = ТекущаяДата();
	НоваяСтрока.ДокументОснование = ПараметрыАннулированияЧека.Ссылка;
	НоваяСтрока.НомерЧека = ПараметрыАннулированияЧека.НомерЧека;
	НоваяСтрока.Организация = ПараметрыАннулированияЧека.Организация;
	НоваяСтрока.Состояние = Перечисления.СостоянияЧековНПД.ВыполняетсяАннулирование;
	НоваяСтрока.ПрисоединенныйФайлЧека = Неопределено;
	
	НаборЗаписей.Записать(Истина);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Идентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Аннулирование чека самозанятых в фоне.'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"РегистрыСведений.ЧекиНПД.АннулироватьЧекВФоне",
		ПараметрыАннулированияЧека,
		ПараметрыВыполнения);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

// Запускает длительную операцию по проверке аннулирования чека в сервисе Мой налог.
//
// Параметры:
//	ПараметрыПроцедуры - Структура - параметры аннулирования.
//	Идентификатор - УникальныйИдентификатор - уникальный идентификатор документа.
//
// Возвращаемое значение:
//   ДлительнаяОперация - Структура.
//
Функция ЗапуститьПроверкуРезультатаАннулированияЧекаВФоне(ПараметрыПроцедуры, Идентификатор) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Идентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Проверка результата аннулирования чека самозанятых в фоне.'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"РегистрыСведений.ЧекиНПД.ПроверитьРезультатАннулированияЧекаВФоне",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
		
	Возврат ДлительнаяОперация;
	
КонецФункции

// Возвращает представление для аннулированного чека НПД
//
// Параметры:
//  Номер - строка - номер чека НПД
//  ДатаАннулирования - дата - дата аннулирования чека НПД
// 
// Возвращаемое значение:
//  Строка - представление аннулированного чека НПД
//
Функция ПредставлениеАннулированногоЧека(Номер, ДатаАннулирования) Экспорт
	
	ШаблонПредставленияЧека = НСтр("ru='%1, аннулирован %2'");
	Возврат СтрШаблон(ШаблонПредставленияЧека, Номер, Формат(ДатаАннулирования, "ДЛФ=D"));
	
КонецФункции

Процедура ПолучитьФайлЧекаВФоне(Параметры, АдресРезультата) Экспорт
	
	Перем СведенияОЧеке;
	
	Если Не Параметры.Свойство("СведенияОЧеке", СведенияОЧеке)
		Или Не МожноПолучитьФайлЧека(СведенияОЧеке) Тогда
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанныеЧека = ПолучитьФайлЧека(СведенияОЧеке.АдресЧекаНаСайте);
	
	Если ДвоичныеДанныеЧека = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ПрисоединитьИзображениеЧекаКДокументуОснованию(СведенияОЧеке, ДвоичныеДанныеЧека, "jpg");
	
	ЗаписатьСведенияОЧеке(СведенияОЧеке);
	
	ПоместитьВоВременноеХранилище(СведенияОЧеке, АдресРезультата);
	
КонецПроцедуры

// Возвращает подходящие данные выбора по номеру чека.
//
// Параметры:
//   СтрокаПоиска - Строка - часть номера чека, введенного пользователем.
//   Организация - СправочникСсылка.Организации - ссылка на организацию.
//   ИмяДокументаОснования - Строка - ограничение поиска чека по имени документа-основания.
//
// Возвращаемое значение:
//   СписокЗначений из Строка - список из номеров чеков и их представлений.
//
Функция ДанныеВыбораЧековДляАннулирования(СтрокаПоиска, Организация, ИмяДокументаОснования) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ЧекиНПД.НомерЧека КАК НомерЧека,
	|	ЧекиНПД.Состояние КАК Состояние,
	|	ЧекиНПД.ДатаЧека КАК ДатаЧека,
	|	ЧекиНПД.ДокументОснование.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	РегистрСведений.ЧекиНПД КАК ЧекиНПД";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	ОператорЗапроса = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	ОператорЗапроса.Отбор.Добавить(СтрШаблон("ЧекиНПД.ДокументОснование ССЫЛКА Документ.%1", ИмяДокументаОснования));
	ОператорЗапроса.Отбор.Добавить("ЧекиНПД.Организация = &Организация");
	ОператорЗапроса.Отбор.Добавить("ЧекиНПД.Состояние В(&СостоянияДляАннулирования)");
	ОператорЗапроса.Отбор.Добавить("НЕ ЧекиНПД.ПроизведенВозвратПоЧеку");
	
	Если Не ПустаяСтрока(СтрокаПоиска) Тогда
		ОператорЗапроса.Отбор.Добавить("ЧекиНПД.НомерЧека ПОДОБНО &ТекстСтроки");
		ОператорЗапроса.КоличествоПолучаемыхЗаписей = 20;
	Иначе
		ОператорЗапроса.КоличествоПолучаемыхЗаписей = 5;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТекстСтроки", СтрокаПоиска + "%");
	Запрос.УстановитьПараметр("Организация", Организация);
	
	СостоянияДляАннулирования = Новый Массив;
	СостоянияДляАннулирования.Добавить(Перечисления.СостоянияЧековНПД.Зарегистрирован);
	СостоянияДляАннулирования.Добавить(Перечисления.СостоянияЧековНПД.ОжидаетОтправкиВФНС);
	
	Запрос.УстановитьПараметр("СостоянияДляАннулирования", СостоянияДляАннулирования);
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	ШрифтВыделения = Новый Шрифт( , , Истина);
	ЦветВыделения  = ЦветаСтиля.ЦветУспешногоПоиска;
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ШаблонСтроки = НСтр("ru='%1 от %2 на сумму %3'");
		СтрокаПредставление = СтрШаблон(ШаблонСтроки, Выборка.НомерЧека,
			Формат(Выборка.ДатаЧека, "ДЛФ=D"), Формат(Выборка.СуммаДокумента, "ЧЦ=15; ЧДЦ=2"));
		
		// Для каждой строки результата формируем представление, аналогично платформенному.
		ПредставлениеСтроки = Новый Массив;
		ИсходнаяСтрока = СокрЛП(СтрокаПредставление);
		ВыделяемаяЧасть = СтрокаПоиска;
		
		// Находим и выделяем цветом часть строки, которая была введена пользователем.
		Поз = СтрНайти(ВРег(ИсходнаяСтрока), ВРег(СтрокаПоиска),, 1);
		ВыделяемаяПодстрока = Сред(ИсходнаяСтрока, Поз, СтрДлина(ВыделяемаяЧасть));
		ФорматВыделяемаяСтрока = Новый ФорматированнаяСтрока(ВыделяемаяПодстрока, ШрифтВыделения, ЦветВыделения);
		
		// Находим оставшуюся часть строки и формируем массив из введенной пользователем строки и оставшейся части.
		Если Поз = 1 Тогда
			// Часть введенной пользователем строки находится в начале, значит оставшуюся строку нужно искать с конца.
			ПредставлениеСтроки.Добавить(ФорматВыделяемаяСтрока);
			ПредставлениеСтроки.Добавить(Новый ФорматированнаяСтрока(Прав(ИсходнаяСтрока, СтрДлина(ИсходнаяСтрока) - СтрДлина(ВыделяемаяЧасть))));
		ИначеЕсли Поз = СтрДлина(ИсходнаяСтрока) Тогда
			// Часть введенной пользователем строки находится в конце, значит оставшуюся строку  искать с начала.
			ПредставлениеСтроки.Добавить(Новый ФорматированнаяСтрока(Лев(ИсходнаяСтрока, Поз-1)));
			ПредставлениеСтроки.Добавить(ФорматВыделяемаяСтрока);
		КонецЕсли;
		
		ДанныеВыбора.Добавить(Выборка.НомерЧека, Новый ФорматированнаяСтрока(ПредставлениеСтроки));
		
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

// Возвращает документ, которым зарегистрирован чек, по номеру чека.
//
// Параметры:
//   НомерЧека - Строка - номер чека.
//   Организация - СправочникСсылка.Организации - ссылка на организацию.
//
// Возвращаемое значение:
//   - ДокументСсылка.ОплатаПлатежнойКартой
//   - ДокументСсылка.ПоступлениеНаРасчетныйСчет
//   - ДокументСсылка.ПриходныйКассовыйОрдер
//   - Неопределено - если документ по номеру чека не найден.
//
Функция НайтиДокументПоНомеруЧека(НомерЧека, Организация) Экспорт
	
	Если ПустаяСтрока(НомерЧека) Или Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЧекиНПД.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	РегистрСведений.ЧекиНПД КАК ЧекиНПД
	|ГДЕ
	|	ЧекиНПД.Организация = &Организация
	|	И ЧекиНПД.НомерЧека = &НомерЧека
	|	И ЧекиНПД.Состояние В(&ДопустимыеСостояния)";
	
	Запрос.УстановитьПараметр("НомерЧека",   НомерЧека);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ДопустимыеСостояния = Новый Массив;
	ДопустимыеСостояния.Добавить(Перечисления.СостоянияЧековНПД.Зарегистрирован);
	ДопустимыеСостояния.Добавить(Перечисления.СостоянияЧековНПД.ОжидаетОтправкиВФНС);
	
	Запрос.УстановитьПараметр("ДопустимыеСостояния", ДопустимыеСостояния);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Следующий() Тогда
		Возврат Результат.ДокументОснование;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Обновляет сведения офлайн чека.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - ссылка на организацию.
//   НовыеСведенияОЧеке - Структура - см. ИнтеграцияСПлатформойСамозанятые.НовыйСтатусыЧеков()
//
Процедура ОбновитьОфлайнЧек(Организация, НовыеСведенияОЧеке) Экспорт
	
	ДокументОснование = НайтиДокументПоНомеруЧека(НовыеСведенияОЧеке.ИдентификаторЧека, Организация);
	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	СведенияОЧеке = СведенияОЧеке(ДокументОснование);
	
	СведенияОЧеке.АдресЧекаНаСайте = НовыеСведенияОЧеке.Ссылка;
	СведенияОЧеке.Состояние = Перечисления.СостоянияЧековНПД.СостояниеЧекаПоСтатусу(НовыеСведенияОЧеке.Статус);
	СведенияОЧеке.ОписаниеЧека = ОписаниеЧека(СведенияОЧеке);
	
	ПрисоединитьИзображениеЧекаКДокументуОснованию(СведенияОЧеке,
		ПолучитьДвоичныеДанныеИзBase64Строки(НовыеСведенияОЧеке.Base64Строка),
		НовыеСведенияОЧеке.ТипДанных);
	
	ЗаписатьСведенияОЧеке(СведенияОЧеке);
	
КонецПроцедуры

// Функция возвращает массив офлайн чеков, ожидающих своей отправки в ФНС.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - ссылка на организацию.
//
// Возвращаемое значение:
//   Массив из Строка - массив номеров чеков.
//
Функция ЧекиОжидающиеОтправкуВФНС(Организация) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ЧекиНПД.НомерЧека КАК НомерЧека
	|ИЗ
	|	РегистрСведений.ЧекиНПД КАК ЧекиНПД
	|ГДЕ
	|	ЧекиНПД.Организация = &Организация
	|	И ЧекиНПД.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЧековНПД.ОжидаетОтправкиВФНС)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("НомерЧека");
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция МакетЧекаДляПечати(СведенияОЧеке) Экспорт
	
	Если Не МожноРаспечататьЧек(СведенияОЧеке) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ДанныеЧека = РаботаСФайлами.ДанныеФайла(СведенияОЧеке.ПрисоединенныйФайлЧека, , Ложь);
	ДвоичныеДанныеЧека = РаботаСФайлами.ДвоичныеДанныеФайла(СведенияОЧеке.ПрисоединенныйФайлЧека);
	
	Если ЧекХранитсяВТаблице(ДанныеЧека.Расширение) Тогда
		ТабличныйДокумент = ТабличныйДокументЧека(ДвоичныеДанныеЧека);
	Иначе
		ТабличныйДокумент = ТабличныйДокументЧекаИзКартинки(ДвоичныеДанныеЧека);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ТабличныйДокументЧека(ДвоичныеДанныеЧека) Экспорт
	
	БуферДанныхЧека = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(ДвоичныеДанныеЧека);
	ПотокВПамяти = Новый ПотокВПамяти(БуферДанныхЧека);
	
	ТаблицаЧека = Новый ТабличныйДокумент;
	ТаблицаЧека.Прочитать(ПотокВПамяти);
	Возврат ТаблицаЧека;
	
КонецФункции

Функция ТабличныйДокументЧекаИзКартинки(ДвоичныеДанныеЧека) Экспорт
	
	ТаблицаЧека = Новый ТабличныйДокумент;
	
	КартинкаЧека = Новый Картинка(ДвоичныеДанныеЧека, Ложь);
	
	РисунокТабличногоДокумента = ТаблицаЧека.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	РисунокТабличногоДокумента.Картинка = КартинкаЧека;
	РисунокТабличногоДокумента.ГраницаСверху = Ложь;
	РисунокТабличногоДокумента.ГраницаСнизу = Ложь;
	РисунокТабличногоДокумента.ГраницаСлева = Ложь;
	РисунокТабличногоДокумента.ГраницаСправа = Ложь;
	
	РисунокТабличногоДокумента.РазмерКартинки = РазмерКартинки.Пропорционально;
	
	РисунокТабличногоДокумента.Ширина = 90;
	РисунокТабличногоДокумента.Высота = 150;
	
	Возврат ТаблицаЧека
	
КонецФункции

Функция ЧекХранитсяВТаблице(Расширение) Экспорт
	
	Возврат НРег(Расширение) = "mxl";
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыйСведенияОЧеке()
	
	СведенияОЧеке = Новый Структура;
	СведенияОЧеке.Вставить("ДокументОснование", Неопределено);
	СведенияОЧеке.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	СведенияОЧеке.Вставить("СуммаЧека", 0);
	СведенияОЧеке.Вставить("Состояние", Неопределено);
	СведенияОЧеке.Вставить("ОписаниеЧека", "");
	СведенияОЧеке.Вставить("НомерЧека", "");
	СведенияОЧеке.Вставить("ДатаЧека", '00010101');
	СведенияОЧеке.Вставить("ДатаАннулированияЧека", '00010101');
	СведенияОЧеке.Вставить("ПричинаОтменыЧека", Перечисления.ПричиныОтменыЧекаНПД.ПустаяСсылка());
	СведенияОЧеке.Вставить("ПредставлениеПричиныОтменыЧека", "");
	СведенияОЧеке.Вставить("АдресЧекаНаСайте", "");
	СведенияОЧеке.Вставить("ПрисоединенныйФайлЧека", Неопределено);
	СведенияОЧеке.Вставить("ПроизведенВозвратПоЧеку", Ложь);
	
	Возврат СведенияОЧеке;
	
КонецФункции

Функция НовыйРезультатОперацииСЧеком()
	
	РезультатФормированияЧека = Новый Структура;
	РезультатФормированияЧека.Вставить("Ошибка", Ложь);
	РезультатФормированияЧека.Вставить("ТекстОшибки", "");
	РезультатФормированияЧека.Вставить("СведенияОЧеке", Неопределено);
	РезультатФормированияЧека.Вставить("СтатусЗапроса", Неопределено);
	РезультатФормированияЧека.Вставить("ПараметрыОжиданияРезультата", Неопределено);
	РезультатФормированияЧека.Вставить("ВремяОжидания", 0);
	Возврат РезультатФормированияЧека;
	
КонецФункции

Функция НовыйРезультатОтправкиЧека()
	
	Результат = Новый Структура;
	Результат.Вставить("EmailОтправлен", Ложь);
	Результат.Вставить("ОшибкаОтправкиEmail", Ложь);
	Результат.Вставить("ТекстОшибкиОтправкиEmail", Ложь);
	Результат.Вставить("SMSОтправлен", Ложь);
	Результат.Вставить("ОшибкаОтправкиSMS", Ложь);
	Результат.Вставить("ТекстОшибкиОтправкиSMS", Ложь);
	Возврат Результат;
	
КонецФункции

Функция ОписаниеЧека(СведенияОЧеке, ВключатьБлокОжидаетОтправки = Истина)
	
	НуженБлокДата = ЗначениеЗаполнено(СведенияОЧеке.ДатаЧека);
	НуженБлокАннулирован = (СведенияОЧеке.Состояние = Перечисления.СостоянияЧековНПД.Аннулирован)
		Или СведенияОЧеке.ПроизведенВозвратПоЧеку;
	НуженБлокОжидаетОтправки = ВключатьБлокОжидаетОтправки
		И (СведенияОЧеке.Состояние = Перечисления.СостоянияЧековНПД.ОжидаетОтправкиВФНС);
	
	Если НуженБлокДата И НуженБлокАннулирован Тогда
		
		ТекстОписания = СтрШаблон(НСтр("ru = 'Чек %1 от %2, аннулирован %3'"),
			СведенияОЧеке.НомерЧека,
			Формат(СведенияОЧеке.ДатаЧека, "ДЛФ=D"),
			Формат(СведенияОЧеке.ДатаАннулированияЧека, "ДЛФ=D"));
		
	ИначеЕсли НуженБлокДата И НуженБлокОжидаетОтправки Тогда
		
		ТекстОписания = СтрШаблон(НСтр("ru = 'Чек %1 от %2, ожидает отправки в ФНС'"),
			СведенияОЧеке.НомерЧека,
			Формат(СведенияОЧеке.ДатаЧека, "ДЛФ=D"));
		
	ИначеЕсли НуженБлокАннулирован Тогда
		
		ТекстОписания = СтрШаблон(НСтр("ru = 'Чек %1, аннулирован %2'"),
			СведенияОЧеке.НомерЧека,
			Формат(СведенияОЧеке.ДатаАннулированияЧека, "ДЛФ=D"));
		
	ИначеЕсли НуженБлокОжидаетОтправки Тогда
		
		ТекстОписания = СтрШаблон(НСтр("ru = 'Чек %1, ожидает отправки в ФНС'"), СведенияОЧеке.НомерЧека);
		
	ИначеЕсли НуженБлокДата Тогда
		
		ТекстОписания = СтрШаблон(НСтр("ru = 'Чек %1 от %2'"),
			СведенияОЧеке.НомерЧека,
			Формат(СведенияОЧеке.ДатаЧека, "ДЛФ=D"));
		
	Иначе
		
		ТекстОписания = СтрШаблон(НСтр("ru = 'Чек %1'"), СведенияОЧеке.НомерЧека);
		
	КонецЕсли;
	
	Возврат ТекстОписания;
	
КонецФункции

Функция ПараметрыРегистрацииДохода(ПараметрыЧека)
	
	ДокументОснование = ПараметрыЧека.Ссылка;
	
	ПараметрыРегистрацииДохода = ИнтеграцияСПлатформойСамозанятыеКлиентСервер.НовыеПараметрыМетодаВзаимодействия(
		"РегистрацияДохода");
	ПараметрыРегистрацииДохода.УИДЧека = Строка(ДокументОснование.УникальныйИдентификатор());
	ПараметрыРегистрацииДохода.Организация = ПараметрыЧека.Организация;
	ПараметрыРегистрацииДохода.ДатаРасчета = ПараметрыЧека.Дата;
	ПараметрыРегистрацииДохода.ДатаФормирования = ТекущаяДатаСеанса();
	Если ЗначениеЗаполнено(ПараметрыЧека.Контрагент) Тогда
		
		ДополнительныеСведенияОКонтрагенте = Новый Структура("ЭтоФизическоеЛицо", Ложь);
		ИнтеграцияСПлатформойСамозанятыеПереопределяемый.ДополнительныеСведенияОКонтрагенте(ПараметрыЧека.Контрагент, ДополнительныеСведенияОКонтрагенте);
		
		Если НЕ ДополнительныеСведенияОКонтрагенте.ЭтоФизическоеЛицо Тогда
			ПараметрыРегистрацииДохода.Контрагент = ПараметрыЧека.Контрагент;
		КонецЕсли;
	КонецЕсли;
	ПараметрыРегистрацииДохода.СуммаДокумента = ПараметрыЧека.СуммаДокумента;
	
	Услуги = Новый ТаблицаЗначений;
	Услуги.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Услуги.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	Услуги.Колонки.Добавить("Цена", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	Услуги.Колонки.Добавить("Всего", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	РеквизитыВсехУслуг = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ПараметрыЧека.Услуги.ВыгрузитьКолонку("Услуга"), "Наименование,НаименованиеПолное");
	
	Для Каждого СтрокаУслуг Из ПараметрыЧека.Услуги Цикл
		
		РеквизитыУслуги = РеквизитыВсехУслуг.Получить(СтрокаУслуг.Услуга);
		Если РеквизитыУслуги = Неопределено Тогда
			Продолжить; // Что-то пошло не так и не смогли прочитать реквизиты номенклатуры.
		КонецЕсли;
		
		НаименованиеУслуги = ?(ЗначениеЗаполнено(РеквизитыУслуги.НаименованиеПолное),
			РеквизитыУслуги.НаименованиеПолное, РеквизитыУслуги.Наименование);
		
		НоваяУслуга = Услуги.Добавить();
		НоваяУслуга.Наименование = НаименованиеУслуги;
		НоваяУслуга.Количество = СтрокаУслуг.Количество;
		НоваяУслуга.Цена = СтрокаУслуг.Цена;
		
	КонецЦикла;
	
	ПараметрыРегистрацииДохода.Услуги = Услуги;
	
	Возврат ПараметрыРегистрацииДохода;
	
КонецФункции

Функция ПараметрыАннулированияЧека(ПараметрыЧека)
	
	ДокументОснование = ПараметрыЧека.Ссылка;
	
	ПараметрыАннулированияЧека = ИнтеграцияСПлатформойСамозанятыеКлиентСервер.НовыеПараметрыМетодаВзаимодействия(
		"СторнированиеДохода");
	ПараметрыАннулированияЧека.Организация = ПараметрыЧека.Организация;
	ПараметрыАннулированияЧека.УИДЧека = Строка(ДокументОснование.УникальныйИдентификатор());
	ПараметрыАннулированияЧека.ИдентификаторЧека = ПараметрыЧека.НомерЧека;
	ПараметрыАннулированияЧека.ПричинаОтменыЧека = ПараметрыЧека.ПричинаОтменыЧека;
	
	Возврат ПараметрыАннулированияЧека;
	
КонецФункции

Функция СведенияОЧекеНачалоФормирования(ПараметрыЧека);
	
	СведенияОЧеке = НовыйСведенияОЧеке();
	СведенияОЧеке.ДокументОснование = ПараметрыЧека.Ссылка;
	СведенияОЧеке.Организация = ПараметрыЧека.Организация;
	СведенияОЧеке.СуммаЧека = ПараметрыЧека.СуммаДокумента;
	СведенияОЧеке.Состояние = Перечисления.СостоянияЧековНПД.ВыполняетсяРегистрация;
	СведенияОЧеке.ДатаЧека = ПараметрыЧека.Дата;
	СведенияОЧеке.ОписаниеЧека = ОписаниеЧека(СведенияОЧеке);
	Возврат СведенияОЧеке;
	
КонецФункции

Процедура ЗаписатьСведенияОЧеке(СведенияОЧеке)
	
	НаборЗаписей = РегистрыСведений.ЧекиНПД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументОснование.Установить(СведенияОЧеке.ДокументОснование);
	Запись = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Запись, СведенияОЧеке);
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ПрисоединитьИзображениеЧекаКДокументуОснованию(СведенияОЧеке, ДвоичныеДанныеИзображенияЧека, РасширениеФайла)
	
	ИмяФайлаЧекаБезТочки = СведенияОЧеке.ОписаниеЧека;
	ИмяФайлаЧека         = ИмяФайлаЧекаБезТочки + "." + РасширениеФайла;
	
	АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеИзображенияЧека);
	
	ПараметрыФайла = Новый Структура();
	ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
	ПараметрыФайла.Вставить("ВладелецФайлов", СведенияОЧеке.ДокументОснование);
	ПараметрыФайла.Вставить("ИмяБезРасширения", ИмяФайлаЧекаБезТочки);
	ПараметрыФайла.Вставить("РасширениеБезТочки", РасширениеФайла);
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
	ПрисоединенныйФайлЧека = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайлаВХранилище);
	
	СведенияОЧеке.ПрисоединенныйФайлЧека = ПрисоединенныйФайлЧека;
	
	УдалитьИзВременногоХранилища(АдресФайлаВХранилище);
	
КонецФункции

Процедура ЗаписатьОшибкуИКодВЖурналРегистрации(КонтекстОшибки, Ответ)
	
	ЧастиСообщенияОбОшибке = Новый Массив;
	ЧастиСообщенияОбОшибке.Добавить(КонтекстОшибки);
	ЧастиСообщенияОбОшибке.Добавить(Ответ.Сообщение);
	Если Ответ.Свойство("Результат") И ЗначениеЗаполнено(Ответ.Результат) И Ответ.Результат.Свойство("Код") Тогда
		ЧастиСообщенияОбОшибке.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Код ошибки: %1'"), Ответ.Результат.Код));
	КонецЕсли;
	ЗаписатьОшибкуВЖурналРегистрации(СтрСоединить(ЧастиСообщенияОбОшибке, Символы.ПС));
	
КонецПроцедуры

Процедура ЗаписатьОшибкуВЖурналРегистрации(ОписаниеОшибки)
	
	ЗаписьЖурналаРегистрации(ЧекиНПДКлиентСервер.ИмяСобытияЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Ошибка, Метаданные.РегистрыСведений.ЧекиНПД, , ОписаниеОшибки);
	
КонецПроцедуры

Функция МожноАннулироватьЧек(СведенияОЧеке)
	
	ВалидныеСостояния = Новый Массив;
	ВалидныеСостояния.Добавить(Перечисления.СостоянияЧековНПД.Зарегистрирован);
	ВалидныеСостояния.Добавить(Перечисления.СостоянияЧековНПД.ОжидаетОтправкиВФНС);
	ВалидныеСостояния.Добавить(Перечисления.СостоянияЧековНПД.ВыполняетсяАннулирование);
	ВалидныеСостояния.Добавить(Перечисления.СостоянияЧековНПД.ОшибкаПриАннулировании);
	
	Возврат ЗначениеЗаполнено(СведенияОЧеке)
		И ВалидныеСостояния.Найти(СведенияОЧеке.Состояние) <> Неопределено;
	
КонецФункции

Функция МожноРаспечататьЧек(СведенияОЧеке)
	
	ВалидныеСостояния = Новый Массив;
	ВалидныеСостояния.Добавить(Перечисления.СостоянияЧековНПД.Зарегистрирован);
	ВалидныеСостояния.Добавить(Перечисления.СостоянияЧековНПД.ОжидаетОтправкиВФНС);
	ВалидныеСостояния.Добавить(Перечисления.СостоянияЧековНПД.Аннулирован);
	
	Возврат ЗначениеЗаполнено(СведенияОЧеке)
		И ВалидныеСостояния.Найти(СведенияОЧеке.Состояние) <> Неопределено;
	
КонецФункции

Функция МожноПолучитьФайлЧека(СведенияОЧеке)
	
	ВалидныеСостояния = Новый Массив;
	ВалидныеСостояния.Добавить(Перечисления.СостоянияЧековНПД.Зарегистрирован);
	ВалидныеСостояния.Добавить(Перечисления.СостоянияЧековНПД.ОжидаетОтправкиВФНС);
	ВалидныеСостояния.Добавить(Перечисления.СостоянияЧековНПД.Аннулирован);
	ВалидныеСостояния.Добавить(Перечисления.СостоянияЧековНПД.ОшибкаПриАннулировании);
	
	Возврат ЗначениеЗаполнено(СведенияОЧеке)
		И ЗначениеЗаполнено(СведенияОЧеке.АдресЧекаНаСайте)
		И ВалидныеСостояния.Найти(СведенияОЧеке.Состояние) <> Неопределено;
	
КонецФункции

#Область ОтправкаЧека

Функция НовыйРезультатОтправки()
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибка", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	Возврат Результат;
	
КонецФункции

Функция ОтправитьEmail(АдресЭлектроннойПочты, СведенияОЧеке, УникальныйИдентификатор)
	
	РезультатОтправки = НовыйРезультатОтправки();
	
	УчетнаяЗапись = УчетнаяЗаписьДляОтправки();
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		РезультатОтправки.Ошибка = Истина;
		РезультатОтправки.ТекстОшибки = НСтр("ru = 'Ошибка при отправке электронной почты: нет доступных учетных записей для отправки.'");
		Возврат РезультатОтправки;
	КонецЕсли;
	
	ПараметрыПисьма = ПараметрыПисьма(СведенияОЧеке, УникальныйИдентификатор);
	
	ПараметрыПисьма = ОтправкаПочтовыхСообщений.ПараметрыПисьмаЧекаНПД(
		АдресЭлектроннойПочты, ПараметрыПисьма.Тело, ПараметрыПисьма.Тема, ПараметрыПисьма.Вложения);
	
	Попытка
		Письмо = РаботаСПочтовымиСообщениями.ПодготовитьПисьмо(УчетнаяЗапись, ПараметрыПисьма);
		РезультатОтправкиПисьма = РаботаСПочтовымиСообщениями.ОтправитьПисьмо(УчетнаяЗапись, Письмо);
		
		ЧастиОписанияОшибки = Новый Массив;
		Для Каждого ОшибочныйПолучатель Из РезультатОтправкиПисьма.ОшибочныеПолучатели Цикл
			
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось отправить письмо по адресу %1 по причине:'"), ОшибочныйПолучатель.Ключ)
				+ Символы.ПС
				+ ОшибочныйПолучатель.Значение;
			
			ЧастиОписанияОшибки.Добавить(ТекстОшибки);
			
		КонецЦикла;
		
		РезультатОтправки.Ошибка = ЧастиОписанияОшибки.Количество() <> 0;
		РезультатОтправки.ТекстОшибки = СтрСоединить(ЧастиОписанияОшибки, Символы.ПС);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		РезультатОтправки.Ошибка = Истина;
		РезультатОтправки.ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецПопытки;
	
	Возврат РезультатОтправки;
	
КонецФункции

Функция ПараметрыПисьма(СведенияОЧеке, УникальныйИдентификатор)
	
	ПараметрыПисьма = НовыйПараметрыПисьма();
	
	ПараметрыПисьма.Тема = СведенияОЧеке.ОписаниеЧека;
	
	ДобавитьЗаголовокПисьма(ПараметрыПисьма.Тело, СведенияОЧеке);
	
	ДобавитьСведенияОЧекеИПрисоединенномФайле(ПараметрыПисьма.Тело, ПараметрыПисьма.Вложения,
		СведенияОЧеке, УникальныйИдентификатор);
	
	ДобавитьСсылкуНаЧек(ПараметрыПисьма.Тело,  СведенияОЧеке.АдресЧекаНаСайте);
	
	Возврат ПараметрыПисьма;
	
КонецФункции

Процедура ДобавитьЗаголовокПисьма(ТелоПисьма, СведенияОЧеке)
	
	ТелоПисьма.Добавить(НСтр("ru = 'Уважаемый покупатель!'"), ТипЭлементаФорматированногоДокумента.Текст);
	ТелоПисьма.Добавить(, ТипЭлементаФорматированногоДокумента.ПереводСтроки);
	ТелоПисьма.Добавить(, ТипЭлементаФорматированногоДокумента.ПереводСтроки);
	
	Если (СведенияОЧеке.Состояние = Перечисления.СостоянияЧековНПД.Зарегистрирован 
		Или СведенияОЧеке.Состояние = Перечисления.СостоянияЧековНПД.ОжидаетОтправкиВФНС)
		И Не СведенияОЧеке.ПроизведенВозвратПоЧеку Тогда
		ТекстПокупка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Вы совершили покупку на сумму %1 руб.'"), Формат(СведенияОЧеке.СуммаЧека, "ЧДЦ=2"));
	Иначе
		ТекстПокупка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Покупка по чеку %1 на сумму %2 руб. аннулирована: %3'"),
			СведенияОЧеке.НомерЧека,
			Формат(СведенияОЧеке.СуммаЧека, "ЧДЦ=2"),
			СведенияОЧеке.ПредставлениеПричиныОтменыЧека);
	КонецЕсли;
	ТелоПисьма.Добавить(ТекстПокупка, ТипЭлементаФорматированногоДокумента.Текст);
	ТелоПисьма.Добавить(, ТипЭлементаФорматированногоДокумента.ПереводСтроки);
	
КонецПроцедуры

Процедура ДобавитьСведенияОЧекеИПрисоединенномФайле(ТелоПисьма, Вложения, СведенияОЧеке, УникальныйИдентификатор)
	
	Если Не ЗначениеЗаполнено(СведенияОЧеке.ПрисоединенныйФайлЧека) Тогда
		Возврат
	КонецЕсли;
	
	ДанныеЧека = РаботаСФайлами.ДанныеФайла(СведенияОЧеке.ПрисоединенныйФайлЧека, , Ложь);
	ДвоичныеДанныеЧека = РаботаСФайлами.ДвоичныеДанныеФайла(СведенияОЧеке.ПрисоединенныйФайлЧека);
	
	Если ЧекХранитсяВТаблице(ДанныеЧека.Расширение) Тогда
		
		ДобавитьВложениеСЧекомВФорматеPDF(ТелоПисьма, Вложения, СведенияОЧеке, ДвоичныеДанныеЧека, УникальныйИдентификатор);
		
	Иначе
		
		ВставитьКартинкуЧекаВТелоПисьма(ТелоПисьма, ДвоичныеДанныеЧека);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьВложениеСЧекомВФорматеPDF(ТелоПисьма, Вложения, СведенияОЧеке, ДвоичныеДанныеЧека, УникальныйИдентификатор)
	
	ТелоПисьма.Добавить(НСтр("ru = 'Чек присоединен к письму.'"), ТипЭлементаФорматированногоДокумента.Текст);
	ТелоПисьма.Добавить(, ТипЭлементаФорматированногоДокумента.ПереводСтроки);
	ТелоПисьма.Добавить(, ТипЭлементаФорматированногоДокумента.ПереводСтроки);
	
	АдресЧекаPDF = ПоместитьВоВременноеХранилище(ТабличныйДокументЧекаВPDF(ДвоичныеДанныеЧека), УникальныйИдентификатор);
	
	ВложениеPDF = Новый Структура;
	ВложениеPDF.Вставить("АдресВоВременномХранилище", АдресЧекаPDF);
	ВложениеPDF.Вставить("Представление", СтрШаблон("%1.pdf", ОписаниеЧека(СведенияОЧеке, Ложь)));
	
	Вложения.Добавить(ВложениеPDF);
	
КонецПроцедуры

Процедура ВставитьКартинкуЧекаВТелоПисьма(ТелоПисьма, ДвоичныеДанныеЧека)
	
	КартинкаЧека = Новый Картинка(ДвоичныеДанныеЧека, Ложь);
	ТелоПисьма.Добавить(КартинкаЧека, ТипЭлементаФорматированногоДокумента.Картинка);
	ТелоПисьма.Добавить(, ТипЭлементаФорматированногоДокумента.ПереводСтроки);
	
КонецПроцедуры

Процедура ДобавитьСсылкуНаЧек(ТелоПисьма, АдресЧекаНаСайте)
	
	Если ЗначениеЗаполнено(АдресЧекаНаСайте) Тогда
		ТекстСсылка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Вы можете посмотреть чек по ссылке %1'"), АдресЧекаНаСайте);
		ТелоПисьма.Добавить(ТекстСсылка, ТипЭлементаФорматированногоДокумента.Текст);
		ТелоПисьма.Добавить(, ТипЭлементаФорматированногоДокумента.ПереводСтроки);
		ТелоПисьма.Добавить(, ТипЭлементаФорматированногоДокумента.ПереводСтроки);
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйПараметрыПисьма()
	
	ПараметрыПисьма = Новый Структура();
	ПараметрыПисьма.Вставить("Тема", "");
	ПараметрыПисьма.Вставить("Тело", Новый ФорматированныйДокумент);
	ПараметрыПисьма.Вставить("Вложения", Новый Массив);
	Возврат ПараметрыПисьма;
	
КонецФункции

Функция ТабличныйДокументЧекаВPDF(ДвоичныеДанныеЧека)
	
	ТабличныйДокументЧека = ТабличныйДокументЧека(ДвоичныеДанныеЧека);
	
	ПотокВПамяти = Новый ПотокВПамяти();
	ТабличныйДокументЧека.Записать(ПотокВПамяти, ТипФайлаТабличногоДокумента.PDF);
	Возврат ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();
	
КонецФункции

Функция УчетнаяЗаписьДляОтправки()
	
	УчетнаяЗаписьИзНастроек = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("УчетнаяЗаписьЭлектроннойПочты");
	
	Если ЗначениеЗаполнено(УчетнаяЗаписьИзНастроек) Тогда
		Возврат УчетнаяЗаписьИзНастроек;
	КонецЕсли;
	
	// Учетная запись не передана - выбираем первую доступную.
	ДоступныеУчетныеЗаписи = РаботаСПочтовымиСообщениями.ДоступныеУчетныеЗаписи(Истина);
	Если ДоступныеУчетныеЗаписи.Количество() > 0 Тогда
		Возврат ДоступныеУчетныеЗаписи[0].Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ОтправитьSMS(НомерТелефона, СведенияОЧеке)
	
	РезультатОтправки = НовыйРезультатОтправки();
	
	Если Не ОтправкаSMS.НастройкаОтправкиSMSВыполнена() Тогда
		РезультатОтправки.Ошибка = Истина;
		РезультатОтправки.ТекстОшибки = НСтр("ru = 'Ошибка при отправке SMS: не выполнена настройка отправки.'");
		Возврат РезультатОтправки;
	КонецЕсли;
	
	ТекстСМС = ТекстSMS(СведенияОЧеке);
	
	НомераПолучателей = Новый Массив;
	НомераПолучателей.Добавить(НомерТелефонаВКаноническийВид(НомерТелефона));
	
	Попытка
		ОтправкаSMS.ОтправитьSMS(НомераПолучателей, ТекстСМС);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		РезультатОтправки.Ошибка = Истина;
		РезультатОтправки.ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецПопытки;
	
	Возврат РезультатОтправки;
	
КонецФункции

Функция ТекстSMS(СведенияОЧеке)
	
	ЧастиТекста = Новый Массив;
	ЧастиТекста.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Чек %1'"), СведенияОЧеке.НомерЧека));
	ЧастиТекста.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'СУММА %1'"), Формат(СведенияОЧеке.СуммаЧека, "ЧДЦ=2")));
	ЧастиТекста.Добавить(Формат(СведенияОЧеке.ДатаЧека, "ДЛФ=DT"));
	Возврат СтрСоединить(ЧастиТекста, ";" + " ");
	
КонецФункции

Функция НомерТелефонаВКаноническийВид(НомерТелефона)
	
	КаноническийНомер = СтрЗаменить(НомерТелефона, "(", "");
	КаноническийНомер = СтрЗаменить(КаноническийНомер, ")", "");
	КаноническийНомер = СтрЗаменить(КаноническийНомер, "-", "");
	КаноническийНомер = СтрЗаменить(КаноническийНомер, " ", "");
	
	ДлинаНомераТелефона = СтрДлина(КаноническийНомер);
	
	Если ДлинаНомераТелефона = 10 Тогда
		КаноническийНомер = "+7" + КаноническийНомер;
	ИначеЕсли ДлинаНомераТелефона = 11
		И Лев(КаноническийНомер, 1) = "8" Тогда
		КаноническийНомер = "+7" + Сред(КаноническийНомер,2);
	КонецЕсли;
	
	Возврат КаноническийНомер;
	
КонецФункции

#КонецОбласти

// Получает файл с изображением чека из сервиса.
//
// Параметры:
//   Чек       - Структура - описание полей чека, см. НовоеОписаниеЧека().
//
// Возвращаемое значение:
//  ДвоичныеДанные - двоичные данные картинки в форме Base64 строки,
//   или Неопределено - если картинка отсутствует.
//
Функция ПолучитьФайлЧека(АдресЧекаНаСайте) Экспорт
	
	Если НЕ ЗначениеЗаполнено(АдресЧекаНаСайте) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	
	Попытка
		
		ПараметрыПолучения = Новый Структура("Таймаут, ПутьДляСохранения", 20, ИмяВременногоФайла);
		РезультатФайлаЧека = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(АдресЧекаНаСайте, ПараметрыПолучения);
		Если РезультатФайлаЧека.Статус Тогда
			ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяВременногоФайла);
			ФайловаяСистема.УдалитьВременныйФайл(ИмяВременногоФайла);
			
			Возврат ДвоичныеДанныеФайла;
			
		Иначе
			ЧастиОписанияОшибки = Новый Массив;
			ЧастиОписанияОшибки.Добавить(НСтр("ru = 'Не удалось получить файл чека.'"));
			ЧастиОписанияОшибки.Добавить(СтрШаблон(НСтр("ru = 'Описание: %1'"), РезультатФайлаЧека.СообщениеОбОшибке));
			ЧастиОписанияОшибки.Добавить(СтрШаблон(НСтр("ru = 'URL: %1'"), АдресЧекаНаСайте));
			Если РезультатФайлаЧека.Свойство("КодСостояния") Тогда
				ЧастиОписанияОшибки.Добавить(СтрШаблон(НСтр("ru = 'Код ошибки: %1'"), РезультатФайлаЧека.КодСостояния));
			КонецЕсли;
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение файла чека'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка, , , СтрСоединить(ЧастиОписанияОшибки));
			
			ФайловаяСистема.УдалитьВременныйФайл(ИмяВременногоФайла);
		КонецЕсли;
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение файла чека'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ФайловаяСистема.УдалитьВременныйФайл(ИмяВременногоФайла);
		
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

#Область ОбработчикиОбновления

// Отложенный обработчик обновления на версию 3.0.82.4.
// Переносит причину аннулирования чека в новый реквизит ПричинаОтменыЧека.
//
Процедура ЗаполнитьПричиныОтменыЧека(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустаяПричинаОтменыЧека", Перечисления.ПричиныОтменыЧекаНПД.ПустаяСсылка());
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ЧекиНПД.ДокументОснование КАК ДокументОснование,
	|	ЧекиНПД.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ЧекиНПД.ДокументОснование ССЫЛКА Документ.ОплатаПлатежнойКартой
	|			ТОГДА ВЫРАЗИТЬ(ЧекиНПД.ДокументОснование КАК Документ.ОплатаПлатежнойКартой).ВидОперации
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидОперации
	|ИЗ
	|	РегистрСведений.ЧекиНПД КАК ЧекиНПД
	|ГДЕ
	|	ЧекиНПД.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЧековНПД.Аннулирован)
	|	И ЧекиНПД.ПричинаОтменыЧека = &ПустаяПричинаОтменыЧека
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ЧекиНПД.ДокументОснование,
	|	ЧекиНПД.Организация,
	|	ВЫБОР
	|		КОГДА ЧекиНПД.ДокументОснование ССЫЛКА Документ.ОплатаПлатежнойКартой
	|			ТОГДА ВЫРАЗИТЬ(ЧекиНПД.ДокументОснование КАК Документ.ОплатаПлатежнойКартой).ВидОперации
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ
	|ИЗ
	|	РегистрСведений.ЧекиНПД КАК ЧекиНПД
	|ГДЕ
	|	ЧекиНПД.ПроизведенВозвратПоЧеку
	|	И ЧекиНПД.ПричинаОтменыЧека = &ПустаяПричинаОтменыЧека";
	
	Результат = Запрос.Выполнить();
	
	Параметры.ОбработкаЗавершена = Ложь;
	Если Результат.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	ИмяПроцедуры = "РегистрыСведений.ЧекиНПД.ЗаполнитьПричиныОтменыЧека()";
	ОбработаноЗаписей = 0;
	ПроблемныхЗаписей = 0;
	
	ТипыДокументовВозврата = Новый Массив;
	ТипыДокументовВозврата.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	ТипыДокументовВозврата.Добавить(Тип("ДокументСсылка.СписаниеСРасчетногоСчета"));
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			ОбработаноЗаписей = ОбработаноЗаписей + 1;
			
			НаборЗаписей = СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ДокументОснование.Установить(Выборка.ДокументОснование);
			НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
			НаборЗаписей.Прочитать();
			
			Для Каждого Запись Из НаборЗаписей Цикл
				
				ПричинаОтмены = Неопределено;
				
				Если ЗначениеЗаполнено(Запись.УдалитьПричинаАннулирования) Тогда
					ПричинаОтмены = Перечисления.ПричиныОтменыЧекаНПД.ПричинаПоПредставлению(Запись.УдалитьПричинаАннулирования);
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ПричинаОтмены) Тогда
					
					Если Запись.ПроизведенВозвратПоЧеку Тогда
						ПричинаОтмены = Перечисления.ПричиныОтменыЧекаНПД.ВозвратСредств;
					ИначеЕсли ЗначениеЗаполнено(Выборка.ВидОперации)
						И Выборка.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ВозвратПокупателю Тогда
						ПричинаОтмены = Перечисления.ПричиныОтменыЧекаНПД.ВозвратСредств;
					ИначеЕсли ТипыДокументовВозврата.Найти(ТипЗнч(Запись.ДокументОснование)) <> Неопределено Тогда
						ПричинаОтмены = Перечисления.ПричиныОтменыЧекаНПД.ВозвратСредств;
					Иначе
						ПричинаОтмены = Перечисления.ПричиныОтменыЧекаНПД.ЧекСформированОшибочно;
					КонецЕсли;
					
				КонецЕсли;
				
				Запись.ПричинаОтменыЧека = ПричинаОтмены;
				
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
		Исключение
			
			// Если не удалось обработать какой-либо документ, повторяем попытку снова
			ПроблемныхЗаписей = ПроблемныхЗаписей + 1;
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Процедуре %1 не удалось обработать чек по документу %2 по причине:
				|%3'"), ИмяПроцедуры, Выборка.ДокументОснование, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.РегистрыСведений.ЧекиНПД,
				,
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если ПроблемныхЗаписей > 0 Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Процедуре %1 не удалось обработать чеки НПД: в %2 из %3 возникли ошибки'"),
			ИмяПроцедуры, ПроблемныхЗаписей, ОбработаноЗаписей);
		ВызватьИсключение ТекстСообщения;
		
	Иначе
		
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,
			Метаданные.РегистрыСведений.ЧекиНПД,,
			СтрШаблон(НСтр("ru = 'Процедура %1 обработала очередную порцию чеков НПД: %2 чеков'"),
				ИмяПроцедуры, ОбработаноЗаписей));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли