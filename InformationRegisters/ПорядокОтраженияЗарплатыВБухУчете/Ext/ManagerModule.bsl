#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет регистр значениями по умолчанию.
//
// Параметры:
//  СпособОтраженияЗарплатыВБухучете - СправочникСсылка.СпособыОтраженияЗарплатыВБухУчете - способ отражения, устанавливаемый в новых записях
//  ЕНВД - Булево - Истина для создания записей для особого порядка налогообложения
//
Процедура СоздатьПоУмолчанию(СпособОтраженияЗарплатыВБухучете, ЕНВД) Экспорт
	
	Если ЕНВД Тогда
		ИмяСтатьи = "ОплатаТрудаЕНВД";
	Иначе
		ИмяСтатьи = "ОплатаТруда";
	КонецЕсли;
	
	СтатьяЗатрат = Справочники.СтатьиЗатрат.СтатьяЗатратПоНазначению(ИмяСтатьи);
	// При отсутствии статьи, запись будет создана с пустой статьей.
	// Статья будет заполнена в записи по мере создания статьи - см. УстановитьСтатьюЗатрат
	
	АналитикаЗатрат = Новый Соответствие;
	АналитикаЗатрат.Вставить(
		Тип("ПланСчетовСсылка.Хозрасчетный"),
		ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
		
	Если ЗначениеЗаполнено(СтатьяЗатрат) Тогда
		АналитикаЗатрат.Вставить(
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат,
			СтатьяЗатрат);
	КонецЕсли;
	
	Запись = СоздатьМенеджерЗаписи();
	
	ЗаполнитьЗначенияСвойств(Запись, УчетЗатрат.АналитикаЗатратНомераСубконто(АналитикаЗатрат));
	
	Запись.СпособОтраженияЗарплатыВБухУчете = СпособОтраженияЗарплатыВБухучете;
	Запись.ЕНВД                             = ЕНВД;
	Если ЕНВД Тогда
		Запись.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются;
	Иначе
		Запись.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
	КонецЕсли;
	
	Запись.Записать();
	
КонецПроцедуры

// В имеющихся записях регистра заполняет значение статьи затрат.
//
// Параметры:
//  СтатьяЗатрат - СправочникСсылка.СтатьиЗатрат - устанавливаемая статья
//  ЕНВД - Булево - Истина для обработки записей для особого порядка налогообложения
//
Процедура УстановитьСтатьюЗатрат(СтатьяЗатрат, ЕНВД) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПорядокОтраженияЗарплатыВБухУчете");
	ЭлементБлокировки.УстановитьЗначение("ЕНВД", ЕНВД);
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЕНВД.Установить(ЕНВД);
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
	
		Блокировка.Заблокировать();
		
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл
			
			УстановитьСтатьюЗатратЗаписи(Запись, СтатьяЗатрат, "");
			УстановитьСтатьюЗатратЗаписи(Запись, СтатьяЗатрат, "НУ");
			
		КонецЦикла;
		
		Если НаборЗаписей.Модифицированность() Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Определяет статью затрат, используемую по-умолчанию для отражения зарплаты в учете.
//
// Параметры:
//  ЕНВД - Булево - Истина для получения статьи, предназначенной для особого порядка налогообложения
// 
// Возвращаемое значение:
//  СправочникСсылка.СтатьиЗатрат - статья, указанная в регистре
//
Функция ОсновнаяСтатьяЗатрат(ЕНВД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЕНВД", ЕНВД);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 1
	|			ТОГДА Настройки.Субконто1
	|		КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 2
	|			ТОГДА Настройки.Субконто2
	|		КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 3
	|			ТОГДА Настройки.Субконто3
	|	КОНЕЦ КАК СтатьяЗатрат,
	|	Настройки.СпособОтраженияЗарплатыВБухУчете КАК СпособОтражения
	|ПОМЕСТИТЬ Настройки
	|ИЗ
	|	РегистрСведений.ПорядокОтраженияЗарплатыВБухУчете КАК Настройки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|		ПО Настройки.Счет = ХозрасчетныйВидыСубконто.Ссылка
	|			И (ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат))
	|ГДЕ
	|	Настройки.ЕНВД = &ЕНВД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Настройки.СтатьяЗатрат КАК СтатьяЗатрат,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Настройки.СпособОтражения) КАК Частотность
	|ИЗ
	|	Настройки КАК Настройки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|		ПО Настройки.СтатьяЗатрат = СтатьиЗатрат.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Настройки.СтатьяЗатрат
	|
	|УПОРЯДОЧИТЬ ПО
	|	Частотность УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СтатьяЗатрат;
	Иначе
		Возврат Справочники.СтатьиЗатрат.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

#КонецОбласти
#Область СлужебныеПроцедурыИФункции

Процедура УстановитьСтатьюЗатратЗаписи(Запись, СтатьяЗатрат, СуффиксПолей)

	СчетИСубконто = Новый Структура;
	
	Счет = Запись["Счет" + СуффиксПолей];
	Если Не ЗначениеЗаполнено(Счет) И ЗначениеЗаполнено(СуффиксПолей) Тогда
		// В регистре принят такой прием: если счет НУ не заполнен, то подразумевается счет без НУ
		Счет = Запись.Счет;
	КонецЕсли;
	
	СчетИСубконто.Вставить("Счет", Счет);
	Для НомерСубконто = 1 По 3 Цикл
		ИдентификаторСубконто = XMLСтрока(НомерСубконто);
		СчетИСубконто.Вставить(
			"Субконто" + ИдентификаторСубконто,
			Запись["Субконто" + СуффиксПолей + ИдентификаторСубконто]);
	КонецЦикла;
	СчетИСубконто.Вставить("Подразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	
	АналитикаЗатрат = УчетЗатрат.АналитикаЗатратПоСчетуИСубконто(СчетИСубконто);
	
	ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат;
	
	Если ЗначениеЗаполнено(АналитикаЗатрат[ВидСубконто]) Тогда
		Возврат;
	КонецЕсли;
	
	АналитикаЗатрат.Вставить(ВидСубконто, СтатьяЗатрат);
	
	НовыеЗначенияСубконто = УчетЗатрат.АналитикаЗатратНомераСубконто(АналитикаЗатрат);
	
	Для НомерСубконто = 1 По 3 Цикл
		
		ИдентификаторСубконто = XMLСтрока(НомерСубконто);
		
		ИмяСубконто = "Субконто" + ИдентификаторСубконто;
		
		Если Не НовыеЗначенияСубконто.Свойство(ИмяСубконто) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеСубконто = НовыеЗначенияСубконто[ИмяСубконто];
		
		ИмяПоляЗаписи = "Субконто" + СуффиксПолей + ИдентификаторСубконто;
		
		Если Запись[ИмяПоляЗаписи] = ЗначениеСубконто Тогда
			// Для предотвращения ненужной модификации и записи набора
			Продолжить;
		КонецЕсли;
		
		Запись[ИмяПоляЗаписи] = ЗначениеСубконто;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли