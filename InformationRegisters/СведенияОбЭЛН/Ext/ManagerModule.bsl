#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(ФизическоеЛицо)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс


#Область ПриДобавленииИсключенийПоискаСсылок

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииИсключенийПоискаСсылок.
Процедура ПриДобавленииИсключенийПоискаСсылок(ИсключенияПоискаСсылок) Экспорт
	ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.СведенияОбЭЛН);
КонецПроцедуры

#КонецОбласти


#Область ПолучениеСведений

Функция ЭтоЭЛН(НомерЛН) Экспорт
	Возврат ЗначениеЗаполнено(НомерЛН) И ЗначениеЗаполнено(ПрочитатьХеш(НомерЛН));
КонецФункции

Функция ПрочитатьХеш(НомерЛН) Экспорт
	Возврат Получить(Новый Структура("НомерЛисткаНетрудоспособности", НомерЛН)).Хеш;
КонецФункции

Процедура ЗаписатьПервичныеСведения(НомерЛН, Хеш, СостояниеЭЛНВФСС, Организация, ФизическоеЛицо) Экспорт
	Если Не ЗначениеЗаполнено(НомерЛН)
		Или (Не ЗначениеЗаполнено(Хеш) И Не ЗначениеЗаполнено(СостояниеЭЛНВФСС)) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = НачатьЗаписьНабора(НомерЛН, Ложь);
	Если НаборЗаписей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Запись = НаборЗаписей.Добавить();
		Запись.НомерЛисткаНетрудоспособности = НомерЛН;
		Запись.Организация = Организация;
		Запись.ФизическоеЛицо = ФизическоеЛицо;
	Иначе
		Запись = НаборЗаписей[0];
	КонецЕсли;
	
	Если Хеш <> Неопределено Тогда
		Запись.Хеш = Хеш;
	КонецЕсли;
	
	Если СостояниеЭЛНВФСС <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(Запись.СостояниеФСС) Тогда
			Запись.СостояниеФСС = СостояниеЭЛНВФСС;
		Иначе
			ПриоритетыСостояний = Перечисления.СостоянияЭЛНВФСС.Приоритеты();
			ТекущийПриоритет = ПриоритетыСостояний[Запись.СостояниеФСС];
			НовыйПриоритет = ПриоритетыСостояний[СостояниеЭЛНВФСС];
			Если ТекущийПриоритет < НовыйПриоритет Тогда
				Запись.СостояниеФСС = СостояниеЭЛНВФСС;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗавершитьЗаписьНабора(НаборЗаписей);
КонецПроцедуры

#КонецОбласти


#Область ЗаполнениеРеестров

Функция ТаблицаОснованийДляРеестраЭЛН(Организация, ИгнорируемыйПодготовленныйКОтправкеРеестр, ВключаемыеЭЛН, ИсключаемыеЭЛН, КоличествоПервых) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПустаяСсылкаРеестра", Документы.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ПустаяСсылка());
	Запрос.УстановитьПараметр("ИгнорируемыйПодготовленныйКОтправкеРеестр", ИгнорируемыйПодготовленныйКОтправкеРеестр);
	Запрос.УстановитьПараметр("ВключаемыеЭЛН", ВключаемыеЭЛН);
	Запрос.УстановитьПараметр("ИсключаемыеЭЛН", ИсключаемыеЭЛН);
	Запрос.УстановитьПараметр("ПустаяПричина", Перечисления.ПричиныНетрудоспособности.ПустаяСсылка());
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1000
	|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	СведенияОбЭЛН.Больничный КАК Больничный,
	|	СведенияОбЭЛН.ПодготовленныйКОтправкеРеестр КАК ПодготовленныйКОтправкеРеестр
	|ИЗ
	|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|ГДЕ
	|	НЕ СведенияОбЭЛН.ИзмененияПринятыФСС
	|	И СведенияОбЭЛН.Организация = &Организация
	|	И СведенияОбЭЛН.ПодготовленныйКОтправкеРеестр В (&ПустаяСсылкаРеестра, &ИгнорируемыйПодготовленныйКОтправкеРеестр)
	|	И СведенияОбЭЛН.НомерЛисткаНетрудоспособности В(&ВключаемыеЭЛН)
	|	И НЕ СведенияОбЭЛН.НомерЛисткаНетрудоспособности В (&ИсключаемыеЭЛН)
	|	И СведенияОбЭЛН.ПричинаНетрудоспособности <> &ПустаяПричина
	|
	|УПОРЯДОЧИТЬ ПО
	|	СведенияОбЭЛН.ДатаБольничного";
	Если ВключаемыеЭЛН = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СведенияОбЭЛН.НомерЛисткаНетрудоспособности В(&ВключаемыеЭЛН)", "");
	КонецЕсли;
	Если ИсключаемыеЭЛН = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ СведенияОбЭЛН.НомерЛисткаНетрудоспособности В (&ИсключаемыеЭЛН)", "");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СведенияОбЭЛН.Организация = &Организация", "");
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000", ?(КоличествоПервых = 0, "", "ПЕРВЫЕ " + Формат(КоличествоПервых, "ЧГ=")));
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

#КонецОбласти



#Область СобытияБольничных

Процедура ПередЗаписьюБольничного(БольничныйОбъект, РежимЗаписи, РежимПроведения) Экспорт
	// Обновление вторичных данных в привилегированном режиме.
	УстановитьПривилегированныйРежим(Истина);
	
	// Обновление поля "Больничный" в случае, если больничный был распроведен.
	ПодобратьДругойБольничный = БольничныйОбъект.ПометкаУдаления
		Или РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
		Или (РежимЗаписи = РежимЗаписиДокумента.Запись И Не БольничныйОбъект.Проведен)
		Или Не ЗначениеЗаполнено(БольничныйОбъект.НомерЛисткаНетрудоспособности)
		Или ИзменилсяНомерЛисткаНетрудоспособности(БольничныйОбъект); // Все предшествующие условия для оптимизации.
	БольничныйОбъект.ДополнительныеСвойства.Вставить("ПодобратьДругойБольничныйДляСведенийОбЭЛН", ПодобратьДругойБольничный);
КонецПроцедуры

Процедура ПриЗаписиБольничного(БольничныйОбъект) Экспорт
	// Обновление вторичных данных в привилегированном режиме.
	УстановитьПривилегированныйРежим(Истина);
	
	ПодобратьДругойБольничный = Не БольничныйОбъект.Проведен
		Или Не ЗначениеЗаполнено(БольничныйОбъект.НомерЛисткаНетрудоспособности)
		Или ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			БольничныйОбъект.ДополнительныеСвойства,
			"ПодобратьДругойБольничныйДляСведенийОбЭЛН",
			Ложь);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаБольничного", БольничныйОбъект.Ссылка);
	Запрос.УстановитьПараметр("НомерЛисткаНетрудоспособности", БольничныйОбъект.НомерЛисткаНетрудоспособности);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности
	|ИЗ
	|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|ГДЕ
	|	(СведенияОбЭЛН.Больничный = &СсылкаБольничного
	|			ИЛИ СведенияОбЭЛН.НомерЛисткаНетрудоспособности = &НомерЛисткаНетрудоспособности)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = НачатьЗаписьНабора(Выборка.НомерЛисткаНетрудоспособности, Истина);
		
		Если НаборЗаписей = Неопределено Тогда
			Продолжить;
		ИначеЕсли НаборЗаписей.Количество() = 0 Тогда
			ОтменитьЗаписьНабора(НаборЗаписей);
			Продолжить;
		КонецЕсли;
		
		Запись = НаборЗаписей[0];
		
		Если ПодобратьДругойБольничный Тогда
			ЗначенияРеквизитов = НайтиБолееПодходящийБольничный(БольничныйОбъект, Запись.НомерЛисткаНетрудоспособности);
		Иначе
			ЗначенияРеквизитов = БольничныйОбъект;
		КонецЕсли;
		
		ОбновитьСведенияОЛисткеНетрудоспособности(Запись, ЗначенияРеквизитов);
		
		ЗавершитьЗаписьНабора(НаборЗаписей);
	КонецЦикла;
КонецПроцедуры

Процедура ПередУдалениемБольничного(БольничныйОбъект) Экспорт
	// Обновление вторичных данных в привилегированном режиме.
	УстановитьПривилегированныйРежим(Истина);
	
	// Обновление поля "Больничный" и связанных с ним полей.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаБольничного", БольничныйОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности
	|ИЗ
	|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|ГДЕ
	|	СведенияОбЭЛН.Больничный = &СсылкаБольничного";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = НачатьЗаписьНабора(Выборка.НомерЛисткаНетрудоспособности, Истина);
		
		Если НаборЗаписей = Неопределено Тогда
			Продолжить;
		ИначеЕсли НаборЗаписей.Количество() = 0 Тогда
			ОтменитьЗаписьНабора(НаборЗаписей);
			Продолжить;
		КонецЕсли;
		
		Запись = НаборЗаписей[0];
		
		ЗначенияРеквизитов = НайтиБолееПодходящийБольничный(БольничныйОбъект, Запись.НомерЛисткаНетрудоспособности);
		Если ЗначенияРеквизитов.Ссылка = БольничныйОбъект.Ссылка Тогда
			// Если удаляется последний больничный в цепочке,
			// то сведения об ЭЛН удаляются вместе с ним.
			НаборЗаписей.Очистить();
		Иначе
			ОбновитьСведенияОЛисткеНетрудоспособности(Запись, ЗначенияРеквизитов);
		КонецЕсли;
		
		ЗавершитьЗаписьНабора(НаборЗаписей);
	КонецЦикла;
КонецПроцедуры

Функция ИзменилсяНомерЛисткаНетрудоспособности(БольничныйОбъект)
	Возврат Не БольничныйОбъект.ЭтоНовый()
		И ЗначениеЗаполнено(БольничныйОбъект.Ссылка)
		И (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БольничныйОбъект.Ссылка, "НомерЛисткаНетрудоспособности")
			<> БольничныйОбъект.НомерЛисткаНетрудоспособности);
КонецФункции

#КонецОбласти


#Область СобытияРеестров

Процедура ПриЗагрузкеОтветаФССПоРеестру(НомерЛН, РеестрОбъект, СтрокаТаблицыЭЛН, Хеш) Экспорт
	
	// Обновление вторичных данных в привилегированном режиме.
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = НачатьЗаписьНабора(НомерЛН, Ложь);
	Если НаборЗаписей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Запись = НаборЗаписей.Добавить();
		Запись.НомерЛисткаНетрудоспособности = НомерЛН;
	Иначе
		Запись = НаборЗаписей[0];
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Хеш) Тогда
		Запись.Хеш = Хеш;
	КонецЕсли;
	
	Если СтрокаТаблицыЭЛН <> Неопределено Тогда
		ОбновитьСведенияОРеестре(Запись, РеестрОбъект, СтрокаТаблицыЭЛН);
	КонецЕсли;
	
	ЗавершитьЗаписьНабора(НаборЗаписей);
	
КонецПроцедуры

Процедура ПередЗаписьюРеестра(РеестрОбъект, РежимЗаписи, РежимПроведения) Экспорт
	// Очистка поля "ПодготовленныйКОтправкеРеестр" в случае, если реестр был распроведен.
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СсылкаРеестра", РеестрОбъект.Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности
		|ИЗ
		|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
		|ГДЕ
		|	СведенияОбЭЛН.ПодготовленныйКОтправкеРеестр = &СсылкаРеестра";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = НачатьЗаписьНабора(Выборка.НомерЛисткаНетрудоспособности, Истина);
			Если НаборЗаписей = Неопределено Тогда
				Продолжить;
			ИначеЕсли НаборЗаписей.Количество() > 0
				И НаборЗаписей[0].ПодготовленныйКОтправкеРеестр = РеестрОбъект.Ссылка Тогда
				НаборЗаписей[0].ПодготовленныйКОтправкеРеестр = Документы.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ПустаяСсылка();
				ЗавершитьЗаписьНабора(НаборЗаписей);
			Иначе
				ОтменитьЗаписьНабора(НаборЗаписей);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПриЗаписиРеестра(РеестрОбъект) Экспорт
	Если Не РеестрОбъект.Проведен Или РеестрОбъект.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	// Обновление вторичных данных в привилегированном режиме.
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТаблицы Из РеестрОбъект.ДанныеЭЛН Цикл
		НаборЗаписей = НачатьЗаписьНабора(СтрокаТаблицы.НомерЛисткаНетрудоспособности, Истина);
		
		Если НаборЗаписей = Неопределено Тогда
			Продолжить;
		ИначеЕсли НаборЗаписей.Количество() = 0 Тогда
			// Нештатная ситуация (ошибка учета) - к отправке зарегистрирован ЭЛН, по которому не загружен хеш.
			Запись = НаборЗаписей.Добавить();
			Запись.НомерЛисткаНетрудоспособности = СтрокаТаблицы.НомерЛисткаНетрудоспособности;
		Иначе
			Запись = НаборЗаписей[0];
		КонецЕсли;
		
		ОбновитьСведенияОРеестре(Запись, РеестрОбъект, СтрокаТаблицы);
		
		ЗавершитьЗаписьНабора(НаборЗаписей);
	КонецЦикла;
	
	ОчиститьСсылкиНаРеестр(РеестрОбъект, Ложь);
	
КонецПроцедуры

Процедура ПередУдалениемРеестра(РеестрОбъект) Экспорт
	
	// Обновление вторичных данных в привилегированном режиме.
	УстановитьПривилегированныйРежим(Истина);
	
	ОчиститьСсылкиНаРеестр(РеестрОбъект, Истина);
	
КонецПроцедуры

#КонецОбласти


#Область НаборЗаписей

Функция НачатьЗаписьНабора(НомерЛН, ПодниматьИсключениеПриОшибке) Экспорт
	Если Не ЗначениеЗаполнено(НомерЛН) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПолныеПраваИлиПривилегированныйРежим = Пользователи.ЭтоПолноправныйПользователь();
	Если Не ПолныеПраваИлиПривилегированныйРежим
		И Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СведенияОбЭЛН) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Недостаточно прав для изменения регистра ""%1"".'"),
			Метаданные.РегистрыСведений.СведенияОбЭЛН.Представление());
	КонецЕсли;
	ЕстьОграниченияДоступа = Не ПолныеПраваИлиПривилегированныйРежим И УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей();
	ЛокальнаяТранзакция = Не ТранзакцияАктивна();
	Если ЛокальнаяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СведенияОбЭЛН");
		ЭлементБлокировки.УстановитьЗначение("НомерЛисткаНетрудоспособности", НомерЛН);
		Блокировка.Заблокировать();
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.НомерЛисткаНетрудоспособности.Установить(НомерЛН);
		Если ЕстьОграниченияДоступа Тогда // Чтение в привилегированном режиме.
			УстановитьОтключениеБезопасногоРежима(Истина);
			УстановитьПривилегированныйРежим(Истина);
			НаборЗаписей.Прочитать();
			УстановитьПривилегированныйРежим(Ложь);
			УстановитьОтключениеБезопасногоРежима(Ложь);
		Иначе
			НаборЗаписей.Прочитать();
		КонецЕсли;
		НаборЗаписей.ДополнительныеСвойства.Вставить("ЛокальнаяТранзакция", ЛокальнаяТранзакция);
	Исключение
		Если ЛокальнаяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось изменить сведения об ЭЛН %1 по причине: %2'"),
			НомерЛН,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.РегистрыСведений.СведенияОбЭЛН,
			НомерЛН,
			ТекстСообщения);
		НаборЗаписей = Неопределено;
		Если ПодниматьИсключениеПриОшибке Тогда
			ВызватьИсключение;
		КонецЕсли;
	КонецПопытки;
	
	Возврат НаборЗаписей;
КонецФункции

Процедура ЗавершитьЗаписьНабора(НаборЗаписей) Экспорт
	НаборЗаписей.Записать(Истина);
	ЛокальнаяТранзакция = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НаборЗаписей.ДополнительныеСвойства, "ЛокальнаяТранзакция");
	Если ЛокальнаяТранзакция = Истина Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
КонецПроцедуры

Процедура ОтменитьЗаписьНабора(НаборЗаписей) Экспорт
	ЛокальнаяТранзакция = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НаборЗаписей.ДополнительныеСвойства, "ЛокальнаяТранзакция");
	Если ЛокальнаяТранзакция = Истина Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбновлениеВторичныхДанных

Процедура ОбновитьСведенияОЛисткеНетрудоспособности(Запись, ЗначенияРеквизитов) Экспорт
	
	// Больничный, Организация и ФизическоеЛицо заполняются из больничного вне зависимости от его проведенности:
	//   - Больничный - используется для удаления записей вместе с больничными и другими механизмами (например, СЭДО ФСС);
	//   - Организация и ФизическоеЛицо - используется в RLS.
	Если ЗначенияРеквизитов.НомерЛисткаНетрудоспособности = Запись.НомерЛисткаНетрудоспособности Тогда
		Запись.Больничный     = ЗначенияРеквизитов.Ссылка;
		Запись.Организация    = ЗначенияРеквизитов.Организация;
		Запись.ФизическоеЛицо = ЗначенияРеквизитов.ФизическоеЛицо;
	КонецЕсли;
	
	Если ЗначенияРеквизитов.НомерЛисткаНетрудоспособности = Запись.НомерЛисткаНетрудоспособности
		И ЗначенияРеквизитов.Проведен Тогда
		Запись.ПричинаНетрудоспособности         = ЗначенияРеквизитов.ПричинаНетрудоспособности;
		Запись.ДатаБольничного                   = ЗначенияРеквизитов.Дата;
		Запись.ПериодНетрудоспособностиНачало    = ЗначенияРеквизитов.ДатаНачала;
		Запись.ПериодНетрудоспособностиОкончание = ЗначенияРеквизитов.ДатаОкончания;
		Запись.Сотрудник                         = ЗначенияРеквизитов.Сотрудник;
	Иначе
		// В эту ветку код попадает в следующих случаях:
		//   1. Больничный не проведен или отмечен к удалению (исправления также отсутствуют);
		//   2. В больничном изменен номер листка нетрудоспособности (введены сведения другого больничного).
		// В обоих случаях запись в регистре остается до тех пор,
		//   пока больничный не будет окончательно удален из программы,
		//   либо пока в программе не появится другой больничный с этим номером ЭЛН.
		// Поэтому поля Больничный, Организация и ФизическоеЛицо остаются заполненными,
		//   а прочие поля очищаются. В частности, очищается поле ПричинаНетрудоспособности,
		//   исключая возможность автоматического подбора этого ЭЛН в реестр ЭЛН.
		Запись.ПричинаНетрудоспособности         = Неопределено;
		Запись.ДатаБольничного                   = Неопределено;
		Запись.ПериодНетрудоспособностиНачало    = Неопределено;
		Запись.ПериодНетрудоспособностиОкончание = Неопределено;
		Запись.Сотрудник                         = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьФлажокИзмененияПринятыФСС(Запись) Экспорт
	Если Не ЗначениеЗаполнено(Запись.Больничный) Тогда
		Возврат; // ЭЛН без больничного (введен вручную).
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Запись.ПринятыйРеестр) Тогда
		
		Запись.ИзмененияПринятыФСС = Ложь; // Еще не принят.
		
	Иначе
		
		// Реестр был принят. Но изменились-ли данные больничного с момента отправки?
		РеестрОбъект = Запись.ПринятыйРеестр.ПолучитьОбъект();
		Найденные = РеестрОбъект.ДанныеЭЛН.НайтиСтроки(Новый Структура("НомерЛисткаНетрудоспособности", Запись.НомерЛисткаНетрудоспособности));
		Если Найденные.Количество() = 0 Тогда
			Запись.ИзмененияПринятыФСС = Ложь; // Нештатная ситуация - строка ЭЛН исчезла из принятого реестра.
			Возврат;
		КонецЕсли;
		
		ЭлементТаблицыЭЛН = Найденные[0];
		ЭлементТаблицыЭЛН.Больничный = Запись.Больничный;
		
		// Удаление прочих строк ЭЛН - для ускорения выявления отличий (нужна только 1 строка).
		ОбратныйИндекс = РеестрОбъект.ДанныеЭЛН.Количество();
		Пока ОбратныйИндекс > 0 Цикл
			ОбратныйИндекс = ОбратныйИндекс - 1;
			Если РеестрОбъект.ДанныеЭЛН[ОбратныйИндекс] <> ЭлементТаблицыЭЛН Тогда
				РеестрОбъект.ДанныеЭЛН.Удалить(ОбратныйИндекс);
			КонецЕсли;
		КонецЦикла;
		
		Найденные = РеестрОбъект.ФиксацияИзменений.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ЭлементТаблицыЭЛН.ИдентификаторСтрокиФикс));
		КоличествоИсправленийДоОбновления = Найденные.Количество();
		
		ПараметрыФиксации = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(РеестрОбъект.Метаданные().ПолноеИмя()).ПараметрыФиксацииВторичныхДанных();
		ПараметрыФиксации.ФиксироватьОтличия = Истина;
		РеестрОбъект.СостояниеРеестра = Неопределено;
		РеестрОбъект.ДатаПолученияОтветаФСС = Неопределено;
		Модифицирован = РеестрОбъект.ОбновитьВторичныеДанные(ПараметрыФиксации);
		
		Найденные = РеестрОбъект.ФиксацияИзменений.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ЭлементТаблицыЭЛН.ИдентификаторСтрокиФикс));
		КоличествоИсправленийПослеОбновления = Найденные.Количество();
		
		Запись.ИзмененияПринятыФСС = (КоличествоИсправленийДоОбновления = КоличествоИсправленийПослеОбновления);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСведенияОРеестре(Запись, РеестрОбъект, СтрокаТаблицыЭЛН) Экспорт
	
	Если ЗначениеЗаполнено(СтрокаТаблицыЭЛН.Состояние) Тогда
		Запись.ОтправленныйРеестр    = РеестрОбъект.Ссылка;
		Запись.ДатаОтправки          = РеестрОбъект.ДатаПолученияОтветаФСС;
		Запись.СостояниеОтправки     = СтрокаТаблицыЭЛН.Состояние;
		Запись.КомментарийКСостоянию = СтрокаТаблицыЭЛН.КомментарийКСостоянию;
		Если Запись.СостояниеОтправки = Перечисления.СостоянияЭЛНВРеестрахЭЛН.ПринятФСС Тогда
			Запись.ПринятыйРеестр = РеестрОбъект.Ссылка;
			Запись.ИзмененияПринятыФСС = Истина;
		КонецЕсли;
		Запись.ПодготовленныйКОтправкеРеестр = Документы.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ПустаяСсылка();
	Иначе
		Запись.ПодготовленныйКОтправкеРеестр = РеестрОбъект.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьСсылкиНаРеестр(РеестрОбъект, ПриУдалении) Экспорт
	// Очистка полей "ПодготовленныйКОтправкеРеестр", "ОтправленныйРеестр" и "ПринятыйРеестр".
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности
	|ИЗ
	|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|ГДЕ
	|	СведенияОбЭЛН.ПодготовленныйКОтправкеРеестр = &СсылкаРеестра
	|	И НЕ СведенияОбЭЛН.НомерЛисткаНетрудоспособности В (&ИспользуемыеНомераЛН)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности
	|ИЗ
	|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|ГДЕ
	|	СведенияОбЭЛН.ОтправленныйРеестр = &СсылкаРеестра
	|	И НЕ СведенияОбЭЛН.НомерЛисткаНетрудоспособности В (&ИспользуемыеНомераЛН)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности
	|ИЗ
	|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|ГДЕ
	|	СведенияОбЭЛН.ПринятыйРеестр = &СсылкаРеестра
	|	И НЕ СведенияОбЭЛН.НомерЛисткаНетрудоспособности В (&ИспользуемыеНомераЛН)";
	
	Запрос.УстановитьПараметр("СсылкаРеестра", РеестрОбъект.Ссылка);
	Если ПриУдалении Тогда // Все ссылки.
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ СведенияОбЭЛН.НомерЛисткаНетрудоспособности В (&ИспользуемыеНомераЛН)", "");
	Иначе // Только неиспользуемые номера ЭЛН.
		Запрос.УстановитьПараметр("ИспользуемыеНомераЛН", РеестрОбъект.ДанныеЭЛН.ВыгрузитьКолонку("НомерЛисткаНетрудоспособности"));
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = НачатьЗаписьНабора(Выборка.НомерЛисткаНетрудоспособности, Истина);
		Если НаборЗаписей = Неопределено Тогда
			Продолжить;
		ИначеЕсли НаборЗаписей.Количество() = 0 Тогда
			ОтменитьЗаписьНабора(НаборЗаписей);
			Продолжить;
		КонецЕсли;
		Запись = НаборЗаписей[0];
		Если Запись.ПодготовленныйКОтправкеРеестр = РеестрОбъект.Ссылка Тогда
			Запись.ПодготовленныйКОтправкеРеестр = Документы.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ПустаяСсылка();
		КонецЕсли;
		Если Запись.ОтправленныйРеестр = РеестрОбъект.Ссылка Тогда
			Запись.ОтправленныйРеестр = Документы.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ПустаяСсылка();
		КонецЕсли;
		Если Запись.ПринятыйРеестр = РеестрОбъект.Ссылка Тогда
			Запись.ПринятыйРеестр = Документы.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ПустаяСсылка();
		КонецЕсли;
		ЗавершитьЗаписьНабора(НаборЗаписей);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти


#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция НайтиБолееПодходящийБольничный(БольничныйОбъект, НомерЛисткаНетрудоспособности)
	ИменаПолей = "Ссылка, НомерЛисткаНетрудоспособности, Дата, ДатаНачала, ДатаОкончания, Организация, ФизическоеЛицо, 
		|Сотрудник, ПричинаНетрудоспособности, Проведен, ПометкаУдаления";
	
	НоваяСсылка = Документы.БольничныйЛист.ПредыдущийПроведенныйДокументИзЦепочкиИсправлений(БольничныйОбъект);
	Если НоваяСсылка = Неопределено Тогда
		// Не найден больничный из текущей цепочки исправлений.
		ЗначенияРеквизитов = Неопределено;
	Иначе
		// Найден больничный из текущей цепочки исправлений.
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НоваяСсылка, ИменаПолей);
	КонецЕсли;
	Если ЗначенияРеквизитов = Неопределено
		Или ЗначенияРеквизитов.НомерЛисткаНетрудоспособности <> НомерЛисткаНетрудоспособности
		Или ЗначенияРеквизитов.ПометкаУдаления Тогда
		// Не найден подходящий больничный.
		НоваяСсылка = Документы.БольничныйЛист.ПоследнийБольничныйПоНомеру(НомерЛисткаНетрудоспособности, БольничныйОбъект.Ссылка);
		Если НоваяСсылка <> Неопределено Тогда
			// Найден больничный из другой цепочки исправлений.
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НоваяСсылка, ИменаПолей);
		Иначе
			// Более подходящий больничный так и не найден.
			ЗначенияРеквизитов = БольничныйОбъект;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначенияРеквизитов;
КонецФункции

#КонецОбласти


#КонецЕсли