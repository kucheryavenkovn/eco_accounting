
#Область ОписаниеПеременных

&НаКлиенте
Перем КонтекстЭДОКлиент;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры, 
		"Организация,Период,РегистрационныйНомерИзФормы,РегистрационныйНомерИзОбъекта,ОбщаяСтоимостьИзДокумента");
	РежимПолучения = "ВыпущенныеДТ";
	
	СкрытьРанееПодобранныеДекларации = Истина;
	ОтбиратьПоОбщейСтоимостиИзДокумента = ОбщаяСтоимостьИзДокумента > 0;
	ОбщаяСтоимостьОт = ОбщаяСтоимостьИзДокумента*0.95;
	ОбщаяСтоимостьДо = ОбщаяСтоимостьИзДокумента*1.05;
	
	СведенияДекларацийНаТовары.Параметры.УстановитьЗначениеПараметра(
		"РегистрационныйНомерИзОбъекта", РегистрационныйНомерИзОбъекта);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СведенияДекларацийНаТовары, "Организация", Организация,
		ВидСравненияКомпоновкиДанных.Равно, ,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
	УстановитьОтборыСписка();
	ОпределитьДатуЗагрузкиСведений();
	СпозиционироватьСписокНаРегНомереИзФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ДанныеЗагружены Тогда
		ПодключитьОбработчикОжидания("ЗагрузитьСведенияДеклараций", 1, Истина);
	ИначеЕсли ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		ПодключитьОбработчикОжидания("ВывестиПредупреждениеОНекорректномНомере", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтбиратьПоОбщейСтоимостиИзДокументаПриИзменении(Элемент)
	
	УстановитьОтборыСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщаяСтоимостьОтПриИзменении(Элемент)
	
	УстановитьОтборыСписка();

КонецПроцедуры

&НаКлиенте
Процедура ОбщаяСтоимостьДоПриИзменении(Элемент)
	
	УстановитьОтборыСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура СкрыватьРанееПодобранныеДекларацииПриИзменении(Элемент)
	
	УстановитьОтборыСписка();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИмяТаблицыФормы

&НаКлиенте
Процедура СведенияДекларацийНаТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОбработкаВыбораЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура СведенияДекларацийНаТоварыВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	ОбработкаВыбораЗначения();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьСведенияИзЛКФТС(Команда)
	
	ПодключитьОбработчикОжидания("ЗагрузитьСведенияДеклараций", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьОтборыСписка()

	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
		СведенияДекларацийНаТовары.КомпоновщикНастроек.Настройки.Отбор,
		"ПодобранаРанее");
		
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
		СведенияДекларацийНаТовары.КомпоновщикНастроек.Настройки.Отбор,
		"ОбщаяСтоимостьЧисло");
		
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
		СведенияДекларацийНаТовары.КомпоновщикНастроек.Настройки.Отбор,
		"ОбщаяСтоимостьЧисло2");

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СведенияДекларацийНаТовары, "ПодобранаРанее", Не СкрытьРанееПодобранныеДекларации,
		ВидСравненияКомпоновкиДанных.Равно, ,
		СкрытьРанееПодобранныеДекларации,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СведенияДекларацийНаТовары, "ОбщаяСтоимостьЧисло", ОбщаяСтоимостьОт,
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно, ,
		ОтбиратьПоОбщейСтоимостиИзДокумента,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СведенияДекларацийНаТовары, "ОбщаяСтоимостьЧисло2", ОбщаяСтоимостьДо,
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, ,
		ОтбиратьПоОбщейСтоимостиИзДокумента,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораЗначения()
	
	ТекущиеДанные = Элементы.СведенияДекларацийНаТовары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВыбора = Новый Структура;
	СтруктураВыбора.Вставить("РегистрационныйНомер", ТекущиеДанные.РегистрационныйНомер);
		
	ОповеститьОВыборе(СтруктураВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСведенияДеклараций()
	
	Элементы.ЗагрузкаСведений.Видимость = Истина;
	Элементы.ЗагрузкаСведений.ТекущаяСтраница = Элементы.ЗагрузкаВПроцессеВыполнения;
	ОповещениеОПолученииНастроек = Новый ОписаниеОповещения("ПолучитьПроцедурыДекларированияПослеПолученияНастроек",
		ЭтотОбъект);
	
	РежимыРаботы = Новый Структура;
	РежимыРаботы.Вставить("ТолькоПолучитьНастройки", 					Истина);
	РежимыРаботы.Вставить("ПовторятьЗапросПароляПриОшибке", 			Истина);
	РежимыРаботы.Вставить("ПоказыватьДиалогПриОшибкеДоступаВИнтернет", 	Ложь);
	ОтборДеклараций = Новый Структура;
	ОтборДеклараций.Вставить("ТипПроцедуры", "ЭК");
	
	ИнтерфейсыВзаимодействияБРОКлиент.ПолучитьПроцедурыДекларированияФТС(
		ОповещениеОПолученииНастроек,
		Организация,
		РежимПолучения,
		ОтборДеклараций,
		РежимыРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиПредупреждениеОНекорректномНомере()
	
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения,,);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПроцедурыДекларированияПослеПолученияНастроек(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Элементы.ЗагрузкаСведений.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметрыПолучения = Результат;
	
	// при успешном обращении на сервер ФТС отправка обновится в ИБ
	ПолучитьПроцедурыДекларированияФТСВФоне(ДополнительныеПараметрыПолучения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПроцедурыДекларированияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Элементы.ЗагрузкаСведений.Видимость = Истина;
		Элементы.ЗагрузкаСведений.ТекущаяСтраница = Элементы.НетДоступаКЛичномуКабинету;
		
	Иначе
 		РезультатПолучения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		ПроцедурыДекларирования = РезультатПолучения.ПроцедурыДекларирования;
		ДополнительныеПараметрыПолучения.ПараметрыСоединения = РезультатПолучения.ПараметрыСоединения;
		
		Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатыПолученияПроцедурДекларированияЗавершение", ЭтотОбъект);
		ОповещениеОПолученииНастроек = Новый ОписаниеОповещения("ПолучитьПроцедурыДекларированияПослеПолученияНастроек",
			ЭтотОбъект);
		ДополнительныеПараметрыОбработки = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ДополнительныеПараметрыПолучения);
		ИнтерфейсыВзаимодействияБРОКлиент.ОбработатьРезультатыПолученияПроцедурДекларированияФТС(
			Оповещение,
			ПроцедурыДекларирования,
			ДополнительныеПараметрыОбработки,
			ОповещениеОПолученииНастроек);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатыПолученияПроцедурДекларированияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Элементы.ЗагрузкаСведений.Видимость = Истина;
		Элементы.ЗагрузкаСведений.ТекущаяСтраница = Элементы.НетДоступаКЛичномуКабинету;
	Иначе
		Элементы.ЗагрузкаСведений.Видимость = Ложь;
		Элементы.СведенияДекларацийНаТовары.Обновить();
	КонецЕсли;
	
	ДанныеЗагружены = Истина;
	СпозиционироватьСписокНаРегНомереИзФормы();
	ВывестиПредупреждениеОНекорректномНомере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПроцедурыДекларированияФТСВФоне(ДополнительныеПараметры)
	
	ДлительнаяОперация = НачатьВыполнениеНаСервере(ДополнительныеПараметры.ПараметрыОтправки, ДополнительныеПараметры.ПараметрыСоединения);
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПолучитьПроцедурыДекларированияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция НачатьВыполнениеНаСервере(ПараметрыОтправки, ПараметрыСоединения)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения,
		"РегистрыСведений.СведенияДекларацийНаТовары.ПолучитьПроцедурыДекларированияФТСССервера",
		ПараметрыОтправки,
		ПараметрыСоединения);
	
КонецФункции

&НаСервере
Процедура ОпределитьДатуЗагрузкиСведений()
	
	ДанныеЗагружены = Ложь;
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаЗагрузкиСведенийИзЛКФТС = ОбщегоНазначенияБП.ПрочитатьДанныеИзХранилища(Организация, "ДатаЗагрузкиСведенийИзЛКФТС");
	Если ДатаЗагрузкиСведенийИзЛКФТС <> Неопределено Тогда
		ДанныеЗагружены = НачалоДня(ДатаЗагрузкиСведенийИзЛКФТС) = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СпозиционироватьСписокНаРегНомереИзФормы()
	
	ТекстПредупреждения = "";

	Если Не ЗначениеЗаполнено(РегистрационныйНомерИзФормы) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДанныеЗагружены Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РегистрационныйНомерИзФормы", РегистрационныйНомерИзФормы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияДекларацийНаТовары.Организация КАК Организация,
	|	СведенияДекларацийНаТовары.РегистрационныйНомер КАК РегистрационныйНомер
	|ИЗ
	|	РегистрСведений.СведенияДекларацийНаТовары КАК СведенияДекларацийНаТовары
	|ГДЕ
	|	СведенияДекларацийНаТовары.РегистрационныйНомер = &РегистрационныйНомерИзФормы";
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	Если ТаблицаРезультата.Количество() > 0 Тогда
		КлючЗаписи = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРезультата[0]);
		Элементы.СведенияДекларацийНаТовары.ТекущаяСтрока = РегистрыСведений.СведенияДекларацийНаТовары.СоздатьКлючЗаписи(КлючЗаписи);
	Иначе
		Элементы.СведенияДекларацийНаТовары.ТекущаяСтрока = Неопределено;
		ШаблонСообщения = НСтр("ru='Декларация на товары с номером %1 не найдена'"); 
		ТекстПредупреждения = СтрШаблон(ШаблонСообщения, РегистрационныйНомерИзФормы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
