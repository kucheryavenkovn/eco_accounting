#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

// Записывает состояние подключения с платформой Самозанятые.
// Параметры:
//   Организация - СправочникСсылка.Организации.
//   Ответ       - Структура, разобранный ответ платформы, см. ИнтеграцияСПлатформойСамозанятые.НовыйРезультатЗапроса.
//
Процедура ЗаписатьСостояниеИнтеграцииСПлатформойСамозанятые(Организация, Ответ) Экспорт
	
	Если Ответ.Результат = Неопределено
		ИЛИ ТипЗнч(Ответ.Результат) <> Тип("Структура") Тогда
		// Возникла исключительная ошибка обработки запроса - текущее состояние не изменяем.
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтатусыЗапросов = ИнтеграцияСПлатформойСамозанятыеКлиентСервер.СтатусыЗапросов();
	
	ИдентификаторЗаявки = "";
	СостояниеИнтеграции = Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.ПустаяСсылка();
	
	Если Ответ.Результат.Свойство("ДатаОтвязки") Тогда
		// Приложение отвязано
		ДатаОтвязки = НачалоДня(Ответ.Результат.ДатаОтвязки);
		Если ЗначениеЗаполнено(ДатаОтвязки) Тогда
			СостояниеИнтеграции = Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.Отключено;
		КонецЕсли;
	КонецЕсли;
	
	Если Ответ.Результат.Свойство("Идентификатор") И ЗначениеЗаполнено(Ответ.Результат.Идентификатор) Тогда
		// Заявка отправлена
		СостояниеИнтеграции = Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.ЗапросОтправлен;
		ИдентификаторЗаявки = Ответ.Результат.Идентификатор;
	Иначе
		ИдентификаторЗаявки = ПолучитьИдентификаторЗаявки(Организация);
	КонецЕсли;
	
	Если Ответ.Результат.Свойство("ДатаРассмотренияЗаявки") Тогда
		// Заявка отправлена, но не подтверждена
		ДатаРассмотренияЗаявки = НачалоДня(Ответ.Результат.ДатаРассмотренияЗаявки);
		Если НЕ ЗначениеЗаполнено(ДатаРассмотренияЗаявки) Тогда
			СостояниеИнтеграции = Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.ЗапросОтправлен;
		Иначе
			ИдентификаторЗаявки = "";
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СостояниеИнтеграции) И Ответ.Результат.Свойство("Разрешения") Тогда
		// Запрос списка разрешений или запрос статуса запроса на подключение
		Если Ответ.Результат.Свойство("Результат")
			И ВРег(Ответ.Результат.Результат) = ВРег("Ошибка") Тогда
			
			СостояниеИнтеграции = Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.ЗапросОтклонен;
			
		ИначеЕсли Ответ.Результат.Свойство("Результат")
			И ВРег(Ответ.Результат.Результат) = ВРег("Выполняется") Тогда
			
			СостояниеИнтеграции = Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.ЗапросОтправлен;
			
		ИначеЕсли Ответ.Результат.Разрешения.ОтражениеДохода
			И Ответ.Результат.Разрешения.ПолучениеCводнойИнформацииОДоходе
			И Ответ.Результат.Разрешения.ПолучениеИнформацииПоДоходам
			И Ответ.Результат.Разрешения.ПолучениеинформацииПоНалоговымНачислениям
			И (Ответ.Результат.Разрешения.КорректировкаСведенийОДоходахПоданныхПартнером
			ИЛИ Ответ.Результат.Разрешения.КорректировкаСведенийОДоходахБезОграничений) Тогда
			// Выданы все разрешения
			
			СостояниеИнтеграции = Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.Подключено;
			
		Иначе
			// Выданы НЕ все разрешения, нужно подключаться заново
			СостояниеИнтеграции = Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.Ошибка;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущееСостояниеПодключения = ПолучитьСостояниеПодключения(Организация);
	
	Если НЕ ЗначениеЗаполнено(СостояниеИнтеграции) И Ответ.Статус = СтатусыЗапросов.Ошибка Тогда
		
		Если ТекущееСостояниеПодключения <> Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.Отключено Тогда
			Если Ответ.Результат.Свойство("Код") Тогда
				Если Ответ.Результат.Код = "НедостаточноПолномочий" Тогда
					// Не подтвержден партнер.
					СостояниеИнтеграции = Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.Отсутствует;
					
				ИначеЕсли Ответ.Результат.Код = "ОшибкаПарсингаЗапроса" Тогда
					// Не ставился на учет.
					СостояниеИнтеграции = Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.Отсутствует;
					
				ИначеЕсли Ответ.Результат.Код = "НалогоплательщикНеЗарегистрирован" Тогда
					// Снят с учета.
					СостояниеИнтеграции = Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.Отключено;
					
				ИначеЕсли Ответ.Результат.Код = "НалогоплательщикНеПривязан" Тогда
					// Не привязан.
					Если ПустаяСтрока(ИдентификаторЗаявки) Тогда
						СостояниеИнтеграции = Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.Отсутствует;
					// Ждем решения по заявке.
					ИначеЕсли ТекущееСостояниеПодключения <> Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.ЗапросОтправлен Тогда
						СостояниеИнтеграции = Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.ЗапросОтправлен;
					КонецЕсли;
				ИначеЕсли Ответ.Результат.Код = "ОтклоненаЗаявка" Тогда
					// Отклонил запрос в личном кабинете.
					СостояниеИнтеграции = Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.ЗапросОтклонен;
					
				ИначеЕсли Ответ.Результат.Код = "НеПодключен" Тогда
					// Не привязан.
					СостояниеИнтеграции = Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.Отсутствует;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СостояниеИнтеграции) Тогда
			Если Ответ.Результат.Код = "НалогоплательщикУжеПривязан" Тогда
				// Уже привязан, но мы не знаем списка разрешений.
				СостояниеИнтеграции = Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.Подключено;
			ИначеЕсли Ответ.Результат.Код = "НалогоплательщикНеПривязан" Тогда
				// Не привязан.
				Если ПустаяСтрока(ИдентификаторЗаявки) Тогда
					СостояниеИнтеграции = Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.Отсутствует;
				Иначе // Ждем решения по заявке.
					СостояниеИнтеграции = Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.ЗапросОтправлен;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СостояниеИнтеграции) Тогда
		СостояниеИнтеграции = ТекущееСостояниеПодключения;
	КонецЕсли;
	
	Если Ответ.Результат.Свойство("ИдентификаторПриложения") Тогда
		ИдентификаторПриложения = Ответ.Результат.ИдентификаторПриложения;
	Иначе
		ИдентификаторПриложения = ИдентификаторПриложения(Организация);
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.СостоянияИнтеграцииСПлатформойСамозанятые.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Организация             = Организация;
	МенеджерЗаписи.ДатаВремяСобытия        = ТекущаяДатаСеанса();
	МенеджерЗаписи.Состояние               = СостояниеИнтеграции;
	МенеджерЗаписи.ИдентификаторПриложения = ИдентификаторПриложения;
	МенеджерЗаписи.ИдентификаторЗаявки     = ИдентификаторЗаявки;
	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Возвращает идентификатор заявки на подключение.
// Параметры:
//   Организация - СправочникСсылка.Организации.
// Возвращаемое значение:
//     Строка - значение идентификатора.
//
Функция ПолучитьИдентификаторЗаявки(Организация) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.СостоянияИнтеграцииСПлатформойСамозанятые.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Организация = Организация;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		Возврат МенеджерЗаписи.ИдентификаторЗаявки;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Возвращает строковое представление состояния подключения.
// Параметры:
//   Организация - СправочникСсылка.Организации.
// Возвращаемое значение:
//     Строка - значение состояния.
//
Функция ПолучитьСостояниеПодключения(Организация) Экспорт
	
	СостояниеПодключения = Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.Отсутствует;
	
	МенеджерЗаписи = РегистрыСведений.СостоянияИнтеграцииСПлатформойСамозанятые.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Организация = Организация;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		Если ЗначениеЗаполнено(МенеджерЗаписи.Состояние) Тогда
			СостояниеПодключения = МенеджерЗаписи.Состояние;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СостояниеПодключения;
	
КонецФункции

// Возвращает информацию об использовании сервиса и состоянии настройки.
// Параметры:
//   Организация - СправочникСсылка.Организации.
// Возвращаемое значение:
//     Структура - см. НовоеСобытие.
//
Функция ИнформацияОСобытияхПлатформыСамозанятые(Организация) Экспорт
	
	Результат = Неопределено;
	
	Если НЕ УчетнаяПолитика.ПрименяетсяНалогНаПрофессиональныйДоход(Организация, ТекущаяДатаСеанса()) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПолучитьНовыеСобытияИзСервиса(Организация);
	
	Возврат РезультатЗапросаТекущееСостояние(Организация);
	
КонецФункции

// Возвращает идентификатор, присвоенный организации в сервисе "Чеки самозанятых".
//
// Параметры:
//   Организация - СправочникСсылка.Организации - организация, подключенная к сервису.
//
// Возвращаемое значение:
//   Строка - Идентификатор приложения в сервисе Чеки самозанятых для указанной организации.
//
Функция ИдентификаторПриложения(Организация) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.СостоянияИнтеграцииСПлатформойСамозанятые.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Организация = Организация;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		Возврат МенеджерЗаписи.ИдентификаторПриложения;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Устанавливает статус "Отсутствует" для настройки интеграции с платформой Самозанятые.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - ссылка на организацию, подключенную к платформе.
//
Процедура ОтключитьИнтеграцию(Организация) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.СостоянияИнтеграцииСПлатформойСамозанятые.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Организация             = Организация;
	МенеджерЗаписи.ДатаВремяСобытия        = ТекущаяДатаСеанса();
	МенеджерЗаписи.Состояние               = Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.Отсутствует;
	МенеджерЗаписи.ИдентификаторПриложения = ИдентификаторПриложения(Организация);
	МенеджерЗаписи.ИдентификаторЗаявки     = "";
	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Возвращает список организаций, подключенных к сервису Мой налог.
//
// Возвращаемое значение:
//   Массив - массив организаций
//
Функция ПодключенныеОрганизации() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СостоянияИнтеграцииСПлатформойСамозанятые.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.СостоянияИнтеграцииСПлатформойСамозанятые КАК СостоянияИнтеграцииСПлатформойСамозанятые
	|ГДЕ
	|	СостоянияИнтеграцииСПлатформойСамозанятые.Состояние = &СостояниеПодключено";
	
	Запрос.УстановитьПараметр("СостояниеПодключено", Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.Подключено);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	
КонецФункции

#КонецОбласти

#Область РаботаСБаннером

Функция НовоеСобытие()

	Результат = Новый Структура;
	Результат.Вставить("Организация",         Справочники.Организации.ПустаяСсылка());
	Результат.Вставить("Состояние",           Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.Отсутствует);
	Результат.Вставить("ДатаВремяСобытия",    ТекущаяДатаСеанса());
	
	Возврат Результат;
	
КонецФункции

Функция ДатаВремяПоследнегоСобытия(Организация)
	
	ДатаВремяСобытия = Дата("00010101");
	
	МенеджерЗаписи = РегистрыСведений.СостоянияИнтеграцииСПлатформойСамозанятые.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Организация = Организация;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		Если ЗначениеЗаполнено(МенеджерЗаписи.Состояние) Тогда
			ДатаВремяСобытия = МенеджерЗаписи.ДатаВремяСобытия;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДатаВремяСобытия;
	
КонецФункции

Процедура ПолучитьНовыеСобытияИзСервиса(Организация)
	
	Если НЕ УчетнаяПолитика.ПрименяетсяНалогНаПрофессиональныйДоход(Организация, ТекущаяДатаСеанса()) Тогда
		Возврат;
	КонецЕсли;
	
	// Чтобы не частить.
	ДатаВремяСобытия = ДатаВремяПоследнегоСобытия(Организация);
	Если ТекущаяДатаСеанса() - ДатаВремяСобытия <= 5 Тогда
		Возврат;
	КонецЕсли;
	
	СтатусыЗапросов = ИнтеграцияСПлатформойСамозанятыеКлиентСервер.СтатусыЗапросов();
	
	ПараметрыВзаимодействия = 
		ИнтеграцияСПлатформойСамозанятыеКлиентСервер.НовыеПараметрыМетодаВзаимодействия("СписокРазрешений");
	ПараметрыВзаимодействия.Организация = Организация;
	ОтветСервиса = ИнтеграцияСПлатформойСамозанятые.ВыполнитьМетодВзаимодействия(ПараметрыВзаимодействия);
	
	Если ОтветСервиса.Ошибка Тогда
		Возврат;
	КонецЕсли;
	
	Для Повтор = 1 По 15 Цикл
		ОтветРезультат = ИнтеграцияСПлатформойСамозанятые.ПолучитьРезультатВыполнения(ОтветСервиса);
		Если ОтветРезультат.Статус = СтатусыЗапросов.Выполняется Тогда
			ОбщегоНазначенияБТС.Пауза(Повтор);
		Иначе
			ЗаписатьСостояниеИнтеграцииСПлатформойСамозанятые(Организация, ОтветРезультат);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция РезультатЗапросаТекущееСостояние(Организация)
	
	ТекущееСостояние = Неопределено;
	
	Если НЕ УчетнаяПолитика.ПрименяетсяНалогНаПрофессиональныйДоход(Организация, ТекущаяДатаСеанса()) Тогда
		Возврат ТекущееСостояние;
	КонецЕсли;
	
	СостояниеПодключения = ПолучитьСостояниеПодключения(Организация);
	Если СостояниеПодключения = Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.Подключено Тогда
		Возврат ТекущееСостояние;
	КонецЕсли;
	
	ТекущееСостояние = НовоеСобытие();
	ТекущееСостояние.Организация = Организация;
	ТекущееСостояние.Состояние   = СостояниеПодключения;
	
	Возврат ТекущееСостояние;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиОбновления

// Обработчик обновления на версию 3.0.73.22
// В записях регистра заменяет в ресурсе "Состояние" значения, помеченные на удаление.
//
Процедура ЗаменитьСсылкиНаНеактуальныеСостояния() Экспорт
	
	ОбрабатываемыеСостояния = Новый Массив;
	ОбрабатываемыеСостояния.Добавить(Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.УдалитьНеНастроено);
	ОбрабатываемыеСостояния.Добавить(Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.НеПривязано);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбрабатываемыеСостояния", ОбрабатываемыеСостояния);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СостоянияИнтеграцииСПлатформойСамозанятые.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.СостоянияИнтеграцииСПлатформойСамозанятые КАК СостоянияИнтеграцииСПлатформойСамозанятые
	|ГДЕ
	|	СостоянияИнтеграцииСПлатформойСамозанятые.Состояние В(&ОбрабатываемыеСостояния)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.СостоянияИнтеграцииСПлатформойСамозанятые.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл
			
			Если Запись.Состояние = Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.УдалитьНеНастроено Тогда
				Запись.Состояние = Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.Отсутствует;
			ИначеЕсли Запись.Состояние = Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.НеПривязано Тогда
				Если ЗначениеЗаполнено(Запись.ИдентификаторЗаявки) Тогда
					Запись.Состояние = Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.ЗапросОтправлен;
				Иначе
					Запись.Состояние = Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.Отсутствует;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НаборЗаписей.Модифицированность() Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли