
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры, "Организация, Период, АвансовыеПлатежи, УплаченныйТорговыйСбор");
	
	Если Параметры.Свойство("СтруктураДоходовВычетов") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры.СтруктураДоходовВычетов);
		ЗаполнятьВручную = Ложь;
	Иначе
		СпособЗаполнения = "Вручную";
		ЗаполнятьВручную = Истина;
	КонецЕсли;
	
	КонецОтчетногоПериода = КонецГода(Период);
	
	ПроцентПрофВычета = Отчеты.РегламентированныйОтчет3НДФЛ.ПроцентПрофессиональногоВычета(Параметры.Декларация3НДФЛВыбраннаяФорма);
	УплачиваетсяТорговыйСбор = ТорговыйСбор.УплачиваетсяТорговыйСбор(Организация, КонецОтчетногоПериода);
	
	Если Не ЗаполнятьВручную Тогда
		СуммаДохода = СуммаДохода - ПрочиеДоходы - АвансыПокупателей;
	КонецЕсли;
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьПараметрыВыбораВидаДеятельности();
	
	УправлениеФормой();
	
	УстановитьКлючСохраненияПоложенияОкна();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ Модифицированность ИЛИ ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
	ПоказатьВопрос(
		ОписаниеОповещения,
		НСтр("ru='Данные были изменены. Сохранить изменения?'"),
		РежимДиалогаВопрос.ДаНетОтмена,
		,
		КодВозвратаДиалога.Да);
	
	Отказ = Истина;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если СпособЗаполнения = "Вручную" Или Не УчетнаяПолитика.ВестиУчетПоВидамДеятельностиИП(Организация, Период) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВидДеятельности");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОК(Команда)
	
	СохранитьРезультатИЗакрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КодОКВЭДПриИзменении(Элемент)
	
	// Исправление возможной опечатки в разделителе
	КодОКВЭД = СтрЗаменить(СокрЛП(КодОКВЭД), ",", ".");
	
	НаименованиеОКВЭД = ОрганизацииФормыДляОтчетностиВызовСервера.НаименованиеПоКлассификатору("ОКВЭД2", КодОКВЭД);
	
КонецПроцедуры

&НаКлиенте
Процедура КодОКВЭДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОрганизацииФормыДляОтчетностиКлиент.ВыбратьКодИзКлассификатора(
		"ОКВЭД2",
		"КодОКВЭД",
		"НаименованиеОКВЭД",
		ЭтотОбъект,
		ЭтотОбъект,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДеятельностиПриИзменении(Элемент)
	
	ВидДеятельностиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособЗаполненияПриИзменении(Элемент)
	
	СпособЗаполненияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДоходаНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РасшифроватьСуммы();
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеДоходыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РасшифроватьСуммы();
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеРасходыВручнуюПриИзменении(Элемент)
	РассчитатьИтогоРасходов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеРасходыНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РасшифроватьСуммы();
КонецПроцедуры

&НаКлиенте
Процедура АмортизацияВручнуюПриИзменении(Элемент)
	РассчитатьИтогоРасходов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура АмортизацияНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РасшифроватьСуммы();
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаВручнуюПриИзменении(Элемент)
	РассчитатьИтогоРасходов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РасшифроватьСуммы();
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыВручнуюПриИзменении(Элемент)
	РассчитатьИтогоРасходов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РасшифроватьСуммы();
КонецПроцедуры

&НаКлиенте
Процедура ИтогоПодтвержденныхРасходовНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РасшифроватьСуммы();
КонецПроцедуры

&НаКлиенте
Процедура АвансовыеПлатежиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НачалоПериода", НачалоГода(Период));
	ПараметрыФормы.Вставить("КонецПериода",  КонецГода(Период));
	ПараметрыФормы.Вставить("Организация",   Организация);
	
	ПредставлениеПериода = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
		НачалоГода(Период), КонецГода(Период), Истина);
	ПараметрыФормы.Вставить("Заголовок",     СтрШаблон(НСтр("ru = 'Авансовые платежи по НДФЛ за %1'"), ПредставлениеПериода));
	
	ОткрытьФорму("Обработка.ПомощникЗаполнения3НДФЛ.Форма.РасшифровкаАвансовыхПлатежей", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыПокупателейНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Период", КонецГода(Период));
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидДеятельности", ВидДеятельности);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("АвансыПокупателейЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.ПомощникЗаполнения3НДФЛ.Форма.АвансыПокупателей",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор, , ,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура УплаченныйТорговыйСборНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НачалоПериода", НачалоГода(Период));
	ПараметрыФормы.Вставить("КонецПериода",  КонецГода(Период));
	ПараметрыФормы.Вставить("Организация",   Организация);
	
	ПредставлениеПериода = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
		НачалоГода(Период), КонецГода(Период), Истина);
	ПараметрыФормы.Вставить("Заголовок",     СтрШаблон(НСтр("ru = 'Торговый сбор, уплаченный в %1'"), ПредставлениеПериода));
	
	ОткрытьФорму("Обработка.ПомощникЗаполнения3НДФЛ.Форма.РасшифровкаУплаченногоТорговогоСбора", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция АвансыПокупателей(Организация, Период, ВидДеятельности)
	
	ПараметрыРасчетаАвансов = УчетДоходовИРасходовПредпринимателя.НовыйПараметрыРасчетаАвансовПокупателей();
	ПараметрыРасчетаАвансов.Организация = Организация;
	ПараметрыРасчетаАвансов.Период = Период;
	ПараметрыРасчетаАвансов.ПоказыватьУдаленныеСтроки = Истина;
	ПараметрыРасчетаАвансов.ВидДеятельности = ВидДеятельности;
	
	ТаблицаАвансов = УчетДоходовИРасходовПредпринимателя.АвансыПокупателей(ПараметрыРасчетаАвансов);
	
	Если ТаблицаАвансов = Неопределено Тогда
		АвансыПокупателей = 0;
	Иначе
		АвансыПокупателей = ТаблицаАвансов.Итог("Сумма");
	КонецЕсли;
	
	Возврат АвансыПокупателей;
	
КонецФункции

&НаКлиенте
Процедура АвансыПокупателейЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Число") Тогда
		
		АвансыПокупателей = ВыбранноеЗначение;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	Если СпособЗаполнения = "ПоДаннымУчета" Тогда
		Элементы.ГруппаСуммыПоДаннымУчета.Видимость = Истина;
		Элементы.ГруппаСуммыВручную.Видимость = Ложь;
		Элементы.ВидДеятельности.Видимость = Истина;
	Иначе
		Элементы.ГруппаСуммыПоДаннымУчета.Видимость = Ложь;
		Элементы.ГруппаСуммыВручную.Видимость = Истина;
		Элементы.ВидДеятельности.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.УплаченныйТорговыйСбор.Видимость = УплачиваетсяТорговыйСбор;
	Элементы.УплаченныйТорговыйСборВручную.Видимость = УплачиваетсяТорговыйСбор;
	
	ВключатьАвансы = УчетДоходовИРасходовПредпринимателя.ВключатьАвансыПокупателейВДоходыПоквартально(
		Организация,
		КонецГода(Период));
	
	Если ВключатьАвансы Тогда
		Элементы.СуммаДохода.Заголовок = НСтр("ru = 'Доходы от реализации'");
		Элементы.ГруппаПрочиеДоходы.Видимость = Истина;
	Иначе
		Элементы.СуммаДохода.Заголовок = НСтр("ru = 'Доходы'");
		Элементы.ГруппаПрочиеДоходы.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКлючСохраненияПоложенияОкна()
	
	ШаблонКлюча = "[СпособЗаполнения][ТорговыйСбор][ВключатьАвансыПоКвартально]";
	СтруктураКлюча = Новый Структура("СпособЗаполнения, ТорговыйСбор, ВключатьАвансыПоКвартально");
	СтруктураКлюча.СпособЗаполнения = СпособЗаполнения;
	СтруктураКлюча.ВключатьАвансыПоКвартально =
		УчетДоходовИРасходовПредпринимателя.ВключатьАвансыПокупателейВДоходыПоквартально(Организация, КонецГода(Период));
	
	КлючСохраненияПоложенияОкна = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонКлюча, СтруктураКлюча);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрОрганизацияФункциональныхОпцийФормы(ЭтотОбъект, Организация, Период);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораВидаДеятельности()
	
	ХарактерыДеятельностиОСН = УчетДоходовИРасходовПредпринимателя.ХарактерыДеятельностиОСН();
	
	ПараметрыВыбора = Новый Массив;
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ХарактерДеятельности", ХарактерыДеятельностиОСН));
	
	Элементы.ВидДеятельности.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		// Если нажали кнопку "Отмена", то ничего не делаем.
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		СохранитьРезультатИЗакрыть();
	Иначе
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьРезультатИЗакрыть()
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	СуммаДоходаВсего = СуммаДохода + АвансыПокупателей + ПрочиеДоходы;
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Вид", ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность"));
	СтруктураОтвета.Вставить("Информация",                  Строка(НаименованиеОКВЭД));
	СтруктураОтвета.Вставить("СуммаДохода",                 СуммаДоходаВсего);
	СтруктураОтвета.Вставить("СуммаВычета",                 ИтогоПодтвержденныхРасходов);
	
	СтруктураОтвета.Вставить("КодОКВЭД",                    КодОКВЭД);
	СтруктураОтвета.Вставить("НаименованиеОКВЭД",           НаименованиеОКВЭД);
	СтруктураОтвета.Вставить("ВидДеятельности",             ВидДеятельности);
	СтруктураОтвета.Вставить("МатериальныеРасходы",         МатериальныеРасходы);
	СтруктураОтвета.Вставить("Амортизация",                 Амортизация);
	СтруктураОтвета.Вставить("Зарплата",                    Зарплата);
	
	// Считаем что вся оплата труда по трудовым договорам.
	СтруктураОтвета.Вставить("ВыплатыПоТрудовымДоговорам",  Зарплата);
	
	СтруктураОтвета.Вставить("АвансыПокупателей",           АвансыПокупателей);
	СтруктураОтвета.Вставить("ПрочиеДоходы",                ПрочиеДоходы);
	СтруктураОтвета.Вставить("ПрочиеРасходы",               ПрочиеРасходы);
	СтруктураОтвета.Вставить("ИтогоПодтвержденныхРасходов", ИтогоПодтвержденныхРасходов);
	СтруктураОтвета.Вставить("ИтогоРасходовНоНормативу",    Окр(СуммаДоходаВсего * ПроцентПрофВычета / 100, 2));
	
	СтруктураОтвета.Вставить("АвансовыеПлатежи",            АвансовыеПлатежи);
	СтруктураОтвета.Вставить("УплаченныйТорговыйСбор",      УплаченныйТорговыйСбор);
	
	СтруктураОтвета.Вставить("СпособЗаполнения",            СпособЗаполнения);
	
	Модифицированность = Ложь;
	Закрыть(СтруктураОтвета);
	
КонецПроцедуры

&НаСервере
Процедура СпособЗаполненияПриИзмененииНаСервере()
	
	Если Не УчетнаяПолитика.ВестиУчетПоВидамДеятельностиИП(Организация, Период) Тогда
		ВидДеятельности = УчетнаяПолитика.ОсновнойВидДеятельности(Организация, Период);
		ЗаполнитьОКВЭД();
	КонецЕсли;
	
	Если СпособЗаполнения = "ПоДаннымУчета" Тогда
		ОбновитьПоказателиНаСервере();
	Иначе
		СуммаДохода = СуммаДохода + АвансыПокупателей + ПрочиеДоходы;
		АвансыПокупателей = 0;
		ПрочиеДоходы = 0;
	КонецЕсли;
	
	УправлениеФормой();
	
	УстановитьКлючСохраненияПоложенияОкна();
	
КонецПроцедуры

&НаСервере
Процедура ВидДеятельностиПриИзмененииНаСервере()
	
	ЗаполнитьОКВЭД();
	
	Если СпособЗаполнения = "ПоДаннымУчета" Тогда
		ОбновитьПоказателиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОКВЭД()
	
	КодОКВЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДеятельности, "КодОКВЭД");
	
	Если Не ЗначениеЗаполнено(КодОКВЭД) И ВидДеятельности = УчетнаяПолитика.ОсновнойВидДеятельности(Организация, Период) Тогда
		КодОКВЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КодОКВЭД2");
	КонецЕсли;
	
	НаименованиеОКВЭД = ОрганизацииФормыДляОтчетностиВызовСервера.НаименованиеПоКлассификатору("ОКВЭД2", КодОКВЭД);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтогоРасходов(Форма)
	
	Форма.ИтогоПодтвержденныхРасходов = Форма.МатериальныеРасходы
		+ Форма.Амортизация
		+ Форма.Зарплата
		+ Форма.ПрочиеРасходы;
		
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьСуммы()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("РежимРасшифровки", Истина);
	СтруктураПараметров.Вставить("Организация",      Организация);
	СтруктураПараметров.Вставить("НачалоПериода",    НачалоГода(Период));
	СтруктураПараметров.Вставить("КонецПериода",     КонецГода(Период));
	
	ОткрытьФорму("Отчет.КнигаУчетаДоходовИРасходовПредпринимателя.Форма", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПоказателиНаСервере()
	
	Показатели = Новый Структура;
	Показатели.Вставить("СуммаДохода", 0);
	Показатели.Вставить("МатериальныеРасходы", 0);
	Показатели.Вставить("Амортизация", 0);
	Показатели.Вставить("Зарплата", 0);
	Показатели.Вставить("ПрочиеРасходы", 0);
	Показатели.Вставить("ПрочиеДоходы", 0);
	Показатели.Вставить("АвансыПокупателей", 0);
	
	КонецОтчетногоПериода = КонецГода(Период);
	
	Если ЗначениеЗаполнено(ВидДеятельности) Тогда
		
		НачалоПериода = НачалоГода(Период);
		
		ДоходыРасходыИП = Обработки.ПомощникЗаполнения3НДФЛ.ТаблицаДоходовОтПредпринимательскойДеятельности(
			Организация,
			НачалоПериода,
			КонецОтчетногоПериода);
		
		ДоходыПоВидуДеятельности = ДоходыРасходыИП.НайтиСтроки(Новый Структура("ВидДеятельности", ВидДеятельности));
		
		Для Каждого СтрокаДоходов Из ДоходыПоВидуДеятельности Цикл
			
			Показатели.СуммаДохода = Показатели.СуммаДохода + СтрокаДоходов.ИтогоДоходов;
			Показатели.МатериальныеРасходы = Показатели.МатериальныеРасходы + СтрокаДоходов.МатериальныеРасходы;
			Показатели.Амортизация = Показатели.Амортизация + СтрокаДоходов.Амортизация;
			Показатели.Зарплата = Показатели.Зарплата + СтрокаДоходов.РасходыНаОплатуТруда;
			Показатели.ПрочиеРасходы = Показатели.ПрочиеРасходы + СтрокаДоходов.ПрочиеРасходы;
			Показатели.ПрочиеДоходы = Показатели.ПрочиеДоходы + СтрокаДоходов.ПрочиеДоходы;
			Показатели.АвансыПокупателей = Показатели.АвансыПокупателей + СтрокаДоходов.АвансыПокупателей;
			
		КонецЦикла;
	КонецЕсли;
	
	Показатели.СуммаДохода = Показатели.СуммаДохода - Показатели.ПрочиеДоходы - Показатели.АвансыПокупателей;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Показатели);
	
	РассчитатьИтогоРасходов(ЭтотОбъект);
	
	АвансовыеПлатежи = Обработки.ПомощникЗаполнения3НДФЛ.АвансовыеПлатежиПоНДФЛЗаПериод(
		Организация, НачалоГода(Период), КонецОтчетногоПериода);
	
	Если ТорговыйСбор.УплачиваетсяТорговыйСбор(Организация, КонецОтчетногоПериода) Тогда
		УплаченныйТорговыйСбор = Обработки.ПомощникЗаполнения3НДФЛ.ТорговыйСборУплаченныйЗаПериод(
			Организация, НачалоГода(Период), КонецОтчетногоПериода);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти
