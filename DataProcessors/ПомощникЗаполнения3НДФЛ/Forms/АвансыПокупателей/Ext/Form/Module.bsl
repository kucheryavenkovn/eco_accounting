
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Организация = Параметры.Организация;
	Период = Параметры.Период;
	ВидДеятельности = Параметры.ВидДеятельности;
	
	ПредставлениеПериода = Формат(Период, "ДЛФ=DD");
	Заголовок = СтрШаблон(НСтр("ru = 'Авансы покупателей на %1'"), ПредставлениеПериода);
	
	Если УчетнаяПолитика.ВестиУчетПоВидамДеятельностиИП(Организация, Период) Тогда
		ВидДеятельностиПоУмолчанию = УчетнаяПолитика.ВидДеятельностиДоходовПоАвансамИП(Организация, Период);
	Иначе
		ВидДеятельностиПоУмолчанию = УчетнаяПолитика.ОсновнойВидДеятельности(Организация, Период);
	КонецЕсли;
	
	СтатьяДоходовПоУмолчанию = Справочники.ПрочиеДоходыИРасходы.ПредопределенныйЭлемент(
		"ДоходыПоАвансамПрошлогоНалоговогоПериодаИП");
	
	ИнициализироватьАвансыПокупателей();
	УстановитьУсловноеОформление();
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Или Не Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, "Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Или ТипЗнч(ИсточникВыбора) <> Тип("ФормаКлиентскогоПриложения") Тогда
		Возврат;
	КонецЕсли;
	
	Если ИсточникВыбора.ИмяФормы = "Документ.ПоступлениеНаРасчетныйСчет.Форма.ФормаВыбора"
		Или ИсточникВыбора.ИмяФормы = "Документ.РасходныйКассовыйОрдер.Форма.ФормаВыбора" Тогда
		
		РеквизитыДокумента = ЗначенияРеквизитовДокумента(ВыбранноеЗначение,
			"Контрагент, СуммаДокумента, НазначениеПлатежа, Дата");
		
		НоваяСтрока = АвансыПокупателей.Добавить();
		НоваяСтрока.НомерСтроки          = АвансыПокупателей.Количество();
		НоваяСтрока.ДокументОплаты       = ВыбранноеЗначение;
		НоваяСтрока.ВидДеятельности      = ВидДеятельностиПоУмолчанию;
		НоваяСтрока.СтатьяДоходов        = СтатьяДоходовПоУмолчанию;
		НоваяСтрока.Контрагент           = РеквизитыДокумента.Контрагент;
		НоваяСтрока.НазначениеПлатежа    = РеквизитыДокумента.НазначениеПлатежа;
		НоваяСтрока.ДатаДокумента        = РеквизитыДокумента.Дата;
		НоваяСтрока.Сумма                = РеквизитыДокумента.СуммаДокумента;
		НоваяСтрока.СуммаПоБУ            = РеквизитыДокумента.СуммаДокумента;
		НоваяСтрока.СтатусРедактирования = СтатусРедактированияАванса(НоваяСтрока,
			ВидДеятельностиПоУмолчанию,
			СтатьяДоходовПоУмолчанию);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	КоличествоСтрок = АвансыПокупателей.Количество();
	ПроверятьВидДеятельности = ПолучитьФункциональнуюОпцию("ВестиУчетПоВидамДеятельности");
	
	Для Каждого ТекущаяСтрока Из АвансыПокупателей Цикл
		
		ИндексСтроки = АвансыПокупателей.Индекс(ТекущаяСтрока);
		РедактируемыеПоля = РедактируемыеПоля();
		
		// Проверка заполнения реквизитов
		Для Каждого ТекущееПоле Из РедактируемыеПоля Цикл
			
			Если ТекущееПоле.Значение = "ВидДеятельности" И Не ПроверятьВидДеятельности Тогда
				СообщитьОбОшибке = Ложь;
			Иначе
				СообщитьОбОшибке = Не ЗначениеЗаполнено(ТекущаяСтрока[ТекущееПоле.Значение]);
			КонецЕсли;
			
			Если СообщитьОбОшибке Тогда
				
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле",
					"Заполнение", ТекущееПоле.Значение, ИндексСтроки + 1, "");
				
				ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("АвансыПокупателей",
					ИндексСтроки + 1, ТекущееПоле.Значение);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ПутьКТабличнойЧасти, , Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Проверка дублей строк по аналитике
		Для ИндексПроверяемойСтроки = ИндексСтроки + 1 По КоличествоСтрок - 1 Цикл
			
			Если АналитикаСтрокСовпадает(ТекущаяСтрока, АвансыПокупателей[ИндексПроверяемойСтроки]) Тогда
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Строка %1 дублирует строку %2. Удалите некорректную строку.'"),
					ИндексПроверяемойСтроки + 1, ИндексСтроки + 1);
				
				ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("АвансыПокупателей",
					ИндексПроверяемойСтроки + 1, "НомерСтроки");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ПутьКТабличнойЧасти, , Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Проверка учтенных авансов покупателей по другим видам деятельности
	Если ЗначениеЗаполнено(ВидДеятельности) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВТ.НомерСтроки КАК НомерСтроки,
		|	ВТ.ДокументОплаты КАК ДокументОплаты,
		|	ВТ.Сумма КАК Сумма,
		|	ВТ.СуммаПоБУ КАК СуммаПоБУ
		|ПОМЕСТИТЬ ВТ_Авансы
		|ИЗ
		|	&АвансыПокупателей КАК ВТ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ВТ_Авансы.НомерСтроки) КАК НомерСтроки,
		|	ВТ_Авансы.ДокументОплаты КАК ДокументОплаты,
		|	СУММА(ВТ_Авансы.Сумма) КАК Сумма,
		|	ВТ_Авансы.СуммаПоБУ КАК СуммаПоБУ
		|ПОМЕСТИТЬ АвансыПокупателей
		|ИЗ
		|	ВТ_Авансы КАК ВТ_Авансы
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Авансы.ДокументОплаты,
		|	ВТ_Авансы.СуммаПоБУ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументОплаты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Авансы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИПАвансыПокупателейСрезПоследних.ДокументОплаты КАК ДокументОплаты,
		|	АвансыПокупателей.СуммаПоБУ + СУММА(ИПАвансыПокупателейСрезПоследних.Сумма) КАК СуммаДругиеВидыДеятельности,
		|	АвансыПокупателей.НомерСтроки КАК НомерСтроки,
		|	АвансыПокупателей.СуммаПоБУ КАК СуммаПоБУ,
		|	АвансыПокупателей.Сумма КАК Сумма
		|ИЗ
		|	РегистрСведений.ИПАвансыПокупателей.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И ВидДеятельности <> &ВидДеятельности) КАК ИПАвансыПокупателейСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АвансыПокупателей КАК АвансыПокупателей
		|		ПО ИПАвансыПокупателейСрезПоследних.ДокументОплаты = АвансыПокупателей.ДокументОплаты
		|ГДЕ
		|	(ИПАвансыПокупателейСрезПоследних.ДействуетДо > &Период
		|			ИЛИ ИПАвансыПокупателейСрезПоследних.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
		|
		|СГРУППИРОВАТЬ ПО
		|	ИПАвансыПокупателейСрезПоследних.ДокументОплаты,
		|	АвансыПокупателей.НомерСтроки,
		|	АвансыПокупателей.СуммаПоБУ,
		|	АвансыПокупателей.Сумма
		|
		|ИМЕЮЩИЕ
		|	АвансыПокупателей.Сумма + СУММА(ИПАвансыПокупателейСрезПоследних.Сумма) > 0");
		
		Запрос.УстановитьПараметр("Период", Период);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ВидДеятельности", ВидДеятельности);
		Запрос.УстановитьПараметр("АвансыПокупателей",
			АвансыПокупателей.Выгрузить(, "НомерСтроки, ДокументОплаты, Сумма, СуммаПоБУ"));
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'По документу %1 уже распределено %2 руб. по другим видам деятельности. Удалите некорректную строку.'"),
					Выборка.ДокументОплаты, Выборка.СуммаДругиеВидыДеятельности);
				
				ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("АвансыПокупателей",
					Выборка.НомерСтроки, "ДокументОплаты");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ПутьКТабличнойЧасти, , Отказ);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвансыПокупателей

&НаКлиенте
Процедура АвансыПокупателейПриИзменении(Элемент)
	
	ОбновитьНумерациюСтрок(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыПокупателейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если РедактируемыеПоля().НайтиПоЗначению(СтрЗаменить(Поле.Имя, "АвансыПокупателей", "")) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Элементы.АвансыПокупателей.ТекущиеДанные.ДокументОплаты);
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыПокупателейПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.АвансыПокупателей.ТекущиеДанные;
	
	ДанныеКУдалению = Новый Структура;
	ДанныеКУдалению.Вставить("Контрагент",      ТекущиеДанные.Контрагент);
	ДанныеКУдалению.Вставить("ДокументОплаты",  ТекущиеДанные.ДокументОплаты);
	ДанныеКУдалению.Вставить("СтатьяДоходов",   ТекущиеДанные.СтатьяДоходов);
	ДанныеКУдалению.Вставить("ВидДеятельности", ТекущиеДанные.ВидДеятельности);
	ДанныеКУдалению.Вставить("Сумма",           ТекущиеДанные.СуммаПоБУ);
	
	АвансыПокупателейПередУдалениемНаСервере(ДанныеКУдалению);
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыПокупателейПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда
		ОбновитьИтоги(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыПокупателейПослеУдаления(Элемент)
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыПокупателейДокументОплатыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбранныеДокументы = Новый СписокЗначений;
	Для Каждого ТекущаяСтрока Из АвансыПокупателей Цикл
		ВыбранныеДокументы.Добавить(ТекущаяСтрока.ДокументОплаты);
	КонецЦикла;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Организация", Организация);
	ПараметрыОткрытия.Вставить("Период", Период);
	ПараметрыОткрытия.Вставить("Документы", ВыбранныеДокументы);
	
	ОткрытьФорму("Обработка.ПомощникЗаполнения3НДФЛ.Форма.ПодборАвансовПокупателей",
		ПараметрыОткрытия,
		Элемент,
		УникальныйИдентификатор, , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыПокупателейДокументОплатыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекущаяСтрока = Элементы.АвансыПокупателей.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ВыбранноеЗначение);
		ТекущаяСтрока.СтатьяДоходов = СтатьяДоходовПоУмолчанию;
		Если ЗначениеЗаполнено(ВидДеятельности) Тогда
			ТекущаяСтрока.ВидДеятельности = ВидДеятельности;
		Иначе
			ТекущаяСтрока.ВидДеятельности = ВидДеятельностиПоУмолчанию;
		КонецЕсли;
		ТекущаяСтрока.СуммаПоБУ = ТекущаяСтрока.Сумма;
		ТекущаяСтрока.СтатусРедактирования = СтатусРедактированияАванса(ТекущаяСтрока,
			ВидДеятельностиПоУмолчанию,
			СтатьяДоходовПоУмолчанию);
		
		ОчиститьДанныеПоАналитикеВУдаляемыхСтроках(ТекущаяСтрока.Контрагент, ТекущаяСтрока.ДокументОплаты);
		ОбновитьИтоги(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыПокупателейВидДеятельностиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.АвансыПокупателей.ТекущиеДанные;
	ТекущиеДанные.СтатусРедактирования = СтатусРедактированияАванса(ТекущиеДанные,
		ВидДеятельностиПоУмолчанию,
		СтатьяДоходовПоУмолчанию);
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыПокупателейСтатьяДоходовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.АвансыПокупателей.ТекущиеДанные;
	ТекущиеДанные.СтатусРедактирования = СтатусРедактированияАванса(ТекущиеДанные,
		ВидДеятельностиПоУмолчанию,
		СтатьяДоходовПоУмолчанию);
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыПокупателейСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.АвансыПокупателей.ТекущиеДанные;
	ТекущиеДанные.Расхождение = ТекущиеДанные.Сумма - ТекущиеДанные.СуммаПоБУ;
	ТекущиеДанные.СтатусРедактирования = СтатусРедактированияАванса(ТекущиеДанные,
		ВидДеятельностиПоУмолчанию,
		СтатьяДоходовПоУмолчанию);
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если АвансыПокупателей.Итог("СтатусРедактирования") <> 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения,
			НСтр("ru = 'Данные в таблице будут очищены. Перезаполнить?'"),
			РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ЗаполнитьПоУмолчанию();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЗакрыть(Команда)
	
	Если ПроверитьЗаполнение() Тогда
		
		ЗаписатьАвансыПокупателейНаСервере();
		Оповестить("ОбновитьЗакрытиеМесяца");
		
		СуммаАвансов = АвансыПокупателей.Итог("Сумма");
		ОповеститьОВыборе(СуммаАвансов);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция АвансыПокупателей(ЗаполнитьПоДаннымУчета)
	
	ПараметрыРасчетаАвансов = УчетДоходовИРасходовПредпринимателя.НовыйПараметрыРасчетаАвансовПокупателей();
	ЗаполнитьЗначенияСвойств(ПараметрыРасчетаАвансов, ЭтотОбъект);
	ПараметрыРасчетаАвансов.ПоказыватьУдаленныеСтроки = Истина;
	ПараметрыРасчетаАвансов.ЗаполнитьПоДаннымУчета = ЗаполнитьПоДаннымУчета;
	
	Если ЗначениеЗаполнено(ВидДеятельности) Тогда
		ПараметрыРасчетаАвансов.ВидДеятельности = ВидДеятельности;
	КонецЕсли;
	
	Возврат УчетДоходовИРасходовПредпринимателя.АвансыПокупателей(ПараметрыРасчетаАвансов);
	
КонецФункции

&НаСервере
Процедура АвансыПокупателейПередУдалениемНаСервере(ТекущаяСтрока)
	
	УдаленныеСтроки = УдаленныеСтроки(АдресХранилищаУдаленныеСтроки);
	
	Если Не ЗначениеЗаполнено(УдаленныеСтроки) Тогда
		УдаленныеСтроки = НовыйТаблицаУдаленныеСтроки();
	КонецЕсли;
	
	НоваяСтрока = УдаленныеСтроки.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
	АдресХранилищаУдаленныеСтроки = ПоместитьВоВременноеХранилище(УдаленныеСтроки, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция АналитикаСтрокСовпадает(Знач ТекущаяСтрока, Знач ПроверяемаяСтрока)
	
	РеквизитыАналитики = Новый Массив;
	РеквизитыАналитики.Добавить("Контрагент");
	РеквизитыАналитики.Добавить("ДокументОплаты");
	РеквизитыАналитики.Добавить("ВидДеятельности");
	РеквизитыАналитики.Добавить("СтатьяДоходов");
	
	Для Каждого ТекущийРеквизит Из РеквизитыАналитики Цикл
		Если ТекущаяСтрока[ТекущийРеквизит] <> ПроверяемаяСтрока[ТекущийРеквизит] Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаписатьАвансыПокупателейНаСервере()
	
	НачалоКвартала = НачалоКвартала(Период);
	
	НаборЗаписей = РегистрыСведений.ИПАвансыПокупателей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Отбор.Период.Установить(НачалоКвартала);
	
	Если ЗначениеЗаполнено(ВидДеятельности) Тогда
		НаборЗаписей.Отбор.ВидДеятельности.Установить(ВидДеятельности);
	КонецЕсли;
	
	ДанныеКЗаписи = НаборЗаписей.Выгрузить();
	
	// Записываем в регистр только измененные значения, если:
	// - вид деятельности не основной
	// - статья доходов не равна "ДоходыПоАвансамПрошлогоНалоговогоПериодаИП"
	// - есть расхождение с данными учета
	
	Для Каждого ТекущаяСтрока Из АвансыПокупателей Цикл
		
		Если ТекущаяСтрока.ВидДеятельности = ВидДеятельностиПоУмолчанию
			И ТекущаяСтрока.СтатьяДоходов = СтатьяДоходовПоУмолчанию
			И ТекущаяСтрока.Расхождение = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НоваяЗапись = ДанныеКЗаписи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ТекущаяСтрока);
		НоваяЗапись.Организация = Организация;
		НоваяЗапись.Период = НачалоКвартала;
		НоваяЗапись.Сумма = ТекущаяСтрока.Расхождение;
		
	КонецЦикла;
	
	// Удаленные строки в регистр записываются с отрицательной суммой
	УдаленныеСтроки = УдаленныеСтроки(АдресХранилищаУдаленныеСтроки);
	Если ЗначениеЗаполнено(УдаленныеСтроки) Тогда
		
		Для Каждого ТекущаяСтрока Из УдаленныеСтроки Цикл
			
			НоваяЗапись = ДанныеКЗаписи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ТекущаяСтрока);
			НоваяЗапись.Организация = Организация;
			НоваяЗапись.Период = НачалоКвартала;
			НоваяЗапись.Сумма = - ТекущаяСтрока.Сумма;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Отменяем действие ранее указанных данных:
	//  - напр., в первом квартале указали для конкретной аналитики отклонение в сумме, принимаемой в прочие доходы.
	//  - во втором квартале решили включить всю сумму полностью по данной аналитике.
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИПАвансыПокупателейСрезПоследних.Период КАК Период,
	|	ИПАвансыПокупателейСрезПоследних.Организация КАК Организация,
	|	ИПАвансыПокупателейСрезПоследних.Контрагент КАК Контрагент,
	|	ИПАвансыПокупателейСрезПоследних.ДокументОплаты КАК ДокументОплаты,
	|	ИПАвансыПокупателейСрезПоследних.ВидДеятельности КАК ВидДеятельности,
	|	ИПАвансыПокупателейСрезПоследних.СтатьяДоходов КАК СтатьяДоходов,
	|	ИПАвансыПокупателейСрезПоследних.Сумма КАК Сумма,
	|	ИПАвансыПокупателейСрезПоследних.ДействуетДо КАК ДействуетДо
	|ИЗ
	|	РегистрСведений.ИПАвансыПокупателей.СрезПоследних(&ПредыдущийКвартал, Организация = &Организация) КАК ИПАвансыПокупателейСрезПоследних
	|ГДЕ
	|	(ИПАвансыПокупателейСрезПоследних.ДействуетДо > &НачалоКвартала
	|			ИЛИ ИПАвансыПокупателейСрезПоследних.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПредыдущийКвартал", НачалоКвартала(НачалоКвартала - 1));
	Запрос.УстановитьПараметр("НачалоКвартала", НачалоКвартала);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ДанныеДоИзменений = РезультатЗапроса.Выбрать();
		Отбор = Новый Структура("Контрагент, ДокументОплаты, ВидДеятельности, СтатьяДоходов");
		
		Пока ДанныеДоИзменений.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(Отбор, ДанныеДоИзменений);
			Если ДанныеКЗаписи.НайтиСтроки(Отбор).Количество() > 0 Тогда
				// По данной аналитике есть изменения в текущем квартале
				Продолжить;
			КонецЕсли;
			
			// По данной аналитике в текущем квартале нет расхождений с данными учета
			НоваяСтрока = ДанныеКЗаписи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДоИзменений);
			НоваяСтрока.Период = НачалоКвартала;
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.Сумма = 0;
			НоваяСтрока.ДействуетДо = НачалоКвартала - 1; // Запись действует до начала текущего квартала
			
		КонецЦикла;
		
	КонецЕсли;
	
	НаборЗаписей.Загрузить(ДанныеКЗаписи);
	НаборЗаписей.Записать(Истина);
	
	// Данные являются первичными для расчета начислений по НДФЛ,
	// поэтому необходимо сделать неактуальнной регламентную операцию "Расчет НДФЛ ИП" за последний месяц
	СдвинутьГраницуАктуальностиРасчетНДФЛДляИП(Организация, Период);
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоУмолчанию()
	
	ИнициализироватьАвансыПокупателей(Истина);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначенияРеквизитовДокумента(Документ, ИменаРеквизитов)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, ИменаРеквизитов);
	
КонецФункции

&НаСервере
Процедура ИнициализироватьАвансыПокупателей(Перезаполнить = Ложь)
	
	АвансыПокупателей.Очистить();
	ТаблицаАвансов = АвансыПокупателей(Перезаполнить);
	
	Если ТаблицаАвансов <> Неопределено Тогда
		АвансыПокупателей.Загрузить(ТаблицаАвансов);
	КонецЕсли;
	
	УдаленныеСтроки = Новый Массив;
	ТекущийДокумент = Неопределено;
	
	Для Каждого ТекущаяСтрока Из АвансыПокупателей Цикл
		
		ТекущаяСтрока.Расхождение = ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаПоБУ;
		ТекущаяСтрока.СтатусРедактирования = СтатусРедактированияАванса(ТекущаяСтрока,
			ВидДеятельностиПоУмолчанию,
			СтатьяДоходовПоУмолчанию);
		
		Если ТекущаяСтрока.Сумма <= 0 Тогда
			УдаленныеСтроки.Добавить(ТекущаяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	УдаленныеСтрокиТаблица = НовыйТаблицаУдаленныеСтроки();
	
	Для Каждого ТекущаяСтрока Из УдаленныеСтроки Цикл
		НоваяСтрока = УдаленныеСтрокиТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		НоваяСтрока.Сумма = ТекущаяСтрока.СуммаПоБУ;
		АвансыПокупателей.Удалить(ТекущаяСтрока);
	КонецЦикла;
	
	ОбновитьНумерациюСтрок(ЭтотОбъект);
	АдресХранилищаУдаленныеСтроки = ПоместитьВоВременноеХранилище(УдаленныеСтрокиТаблица, УникальныйИдентификатор);
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НовыйТаблицаУдаленныеСтроки()
	
	ОписаниеТипаЧисло = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	ТипыДокументаОплаты = Новый Массив;
	ТипыДокументаОплаты.Добавить(Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет"));
	ТипыДокументаОплаты.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	
	УдаленныеСтроки = Новый ТаблицаЗначений;
	УдаленныеСтроки.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	УдаленныеСтроки.Колонки.Добавить("СтатьяДоходов", Новый ОписаниеТипов("СправочникСсылка.ПрочиеДоходыИРасходы"));
	УдаленныеСтроки.Колонки.Добавить("ВидДеятельности", Новый ОписаниеТипов("СправочникСсылка.ВидыДеятельностиПредпринимателей"));
	УдаленныеСтроки.Колонки.Добавить("Сумма", ОписаниеТипаЧисло);
	УдаленныеСтроки.Колонки.Добавить("СуммаПоБУ", ОписаниеТипаЧисло);
	УдаленныеСтроки.Колонки.Добавить("ДатаДокумента", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	УдаленныеСтроки.Колонки.Добавить("НазначениеПлатежа", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	УдаленныеСтроки.Колонки.Добавить("ДокументОплаты", Новый ОписаниеТипов(ТипыДокументаОплаты));
	
	УдаленныеСтроки.Индексы.Добавить("Контрагент");
	УдаленныеСтроки.Индексы.Добавить("ДокументОплаты");
	
	Возврат УдаленныеСтроки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Форма.СуммаВсего = Форма.АвансыПокупателей.Итог("Сумма");
	
	// В итогах выводим сумму всего по различным документам
	// Напр., если аванс покупателя разбит по разным видам деятельности,
	// то в итогах будет взята сумма без дубля.
	
	Форма.СуммаПоБУВсего = 0;
	УчтенныеДокументы = Новый Массив;
	Для Каждого ТекущаяСтрока Из Форма.АвансыПокупателей Цикл
		
		Если УчтенныеДокументы.Найти(ТекущаяСтрока.ДокументОплаты) = Неопределено Тогда
			Форма.СуммаПоБУВсего = Форма.СуммаПоБУВсего + ТекущаяСтрока.СуммаПоБУ;
			УчтенныеДокументы.Добавить(ТекущаяСтрока.ДокументОплаты);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНумерациюСтрок(Форма)
	
	НомерСтроки = 1;
	Количество = Форма.АвансыПокупателей.Количество();
	
	Для Индекс = 0 По Количество - 1 Цикл
		ТекущаяСтрока = Форма.АвансыПокупателей[Индекс];
		ТекущаяСтрока.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если ПроверитьЗаполнение() Тогда
			ЗаписатьАвансыПокупателейНаСервере();
		Иначе
			// Необходимо показать пользователю сообщения об ошибках в ходе проверки
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РедактируемыеПоля()
	
	ПоляРедактирования = Новый СписокЗначений;
	ПоляРедактирования.Добавить("СтатьяДоходов", НСтр("ru = 'Статья доходов'"));
	ПоляРедактирования.Добавить("ВидДеятельности", НСтр("ru = 'Вид деятельности'"));
	ПоляРедактирования.Добавить("Сумма", НСтр("ru = 'Включить в доход'"));
	ПоляРедактирования.Добавить("ДокументОплаты", НСтр("ru = 'Документ оплаты'"));
	
	Возврат ПоляРедактирования;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусРедактированияАванса(ТекущиеДанные, ВидДеятельностиПоУмолчанию, СтатьяДоходовПоУмолчанию)
	
	Если ТекущиеДанные.ВидДеятельности <> ВидДеятельностиПоУмолчанию
		Или ТекущиеДанные.СтатьяДоходов <> СтатьяДоходовПоУмолчанию
		Или ТекущиеДанные.Расхождение <> 0 Тогда
		
		СтатусРедактирования = 2;
		
	Иначе
		
		СтатусРедактирования = 0;
		
	КонецЕсли;
	
	Возврат СтатусРедактирования;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СдвинутьГраницуАктуальностиРасчетНДФЛДляИП(Организация, Период)
	
	УстаревшаяРегламентнаяОперация = Перечисления.ВидыРегламентныхОпераций.ВключениеАвансовВПрочиеДоходыДляИП;
	НомерГруппы = ЗакрытиеМесяца.ГруппаПоВидуОперации(УстаревшаяРегламентнаяОперация);
	
	РегистрыСведений.НеактуальныеРегламентныеОперации.СдвинутьГраницуАктуальностиНазад(
		Организация,
		Период,
		НомерГруппы,
		УстаревшаяРегламентнаяОперация,
		Истина);

КонецПроцедуры

&НаСервере
Процедура ОчиститьДанныеПоАналитикеВУдаляемыхСтроках(Контрагент, ДокументОплаты)
	
	УдаленныеСтроки = УдаленныеСтроки(АдресХранилищаУдаленныеСтроки);
	
	Если Не ЗначениеЗаполнено(УдаленныеСтроки) Тогда
		Возврат;
	КонецЕсли;
	
	// Очистим информацию о ранее удаленных строках
	
	Отбор = Новый Структура;
	Отбор.Вставить("Контрагент", Контрагент);
	Отбор.Вставить("ДокументОплаты", ДокументОплаты);
	
	СтрокиОтбора = УдаленныеСтроки.НайтиСтроки(Отбор);
	Для Каждого ТекущаяСтрока Из СтрокиОтбора Цикл
		УдаленныеСтроки.Удалить(ТекущаяСтрока);
	КонецЦикла;
	
	АдресХранилищаУдаленныеСтроки = ПоместитьВоВременноеХранилище(УдаленныеСтроки, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УдаленныеСтроки(АдресХранилищаУдаленныеСтроки)
	
	УдаленныеСтроки = Неопределено;
	Если Не ЭтоАдресВременногоХранилища(АдресХранилищаУдаленныеСтроки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПолучитьИзВременногоХранилища(АдресХранилищаУдаленныеСтроки);
	
КонецФункции

&НаСервере
Процедура УправлениеФормой()
	
	Элементы.АвансыПокупателейВидДеятельности.Видимость =
		ПолучитьФункциональнуюОпцию("ВестиУчетПоВидамДеятельности")
		И Не ЗначениеЗаполнено(ВидДеятельности);
	
	Если ЗначениеЗаполнено(ВидДеятельности) Тогда
		
		// Кнопка "Заполнить" осуществляет заполнение по умолчанию только по основному виду деятельности
		Элементы.АвансыПокупателейЗаполнить.Видимость = (ВидДеятельности = ВидДеятельностиПоУмолчанию);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	РедактируемыеПоля = РедактируемыеПоля();
	
	Для Каждого ТекущееПоле Из РедактируемыеПоля Цикл
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля,
			СтрШаблон("АвансыПокупателей%1", ТекущееПоле.Значение));
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			СтрШаблон("АвансыПокупателей.%1", ТекущееПоле.Значение),
			ВидСравненияКомпоновкиДанных.НеЗаполнено);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
