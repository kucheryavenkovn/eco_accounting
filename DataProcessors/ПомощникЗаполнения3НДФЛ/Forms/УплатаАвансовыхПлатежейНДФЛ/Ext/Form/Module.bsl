
#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжиданияАктуализации;

#КонецОбласти

#Область ОбработчикиСобытыйФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ПустаяСтрока(Параметры.Описание) Тогда
		Заголовок = Параметры.Описание;
		КонтекстныйВызов = Истина;
	КонецЕсли;
	
	Объект.Организация = Параметры.Организация;
	Объект.Период      = Параметры.ПериодСобытия;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ОрганизацияПоУмолчанию = Справочники.Организации.ОрганизацияПоУмолчанию();
		Если Не ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(ОрганизацияПоУмолчанию) Тогда
			Объект.Организация = ОрганизацияПоУмолчанию;
		КонецЕсли;
		
	КонецЕсли;
	
	ОрганизацияПредставление = Объект.Организация;
	
	Если Не ЗначениеЗаполнено(Объект.Период) Тогда
		ТекущаяДатаПользователя = ОбщегоНазначения.ТекущаяДатаПользователя();
		Объект.Период = НачалоКвартала(ТекущаяДатаПользователя) - 1; // Конец прошлого квартала.
		Период = ВыборПериодаКлиентСервер.ПолучитьПредставлениеПериодаОтчета(
			ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал"),
			НачалоКвартала(Объект.Период),
			КонецКвартала(Объект.Период));
	КонецЕсли;
	
	ЗаполнитьНачальныеПоказатели();
	
	Показатели = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	ТребуетсяПроверятьАктуальность = Не Показатели.ЭтоПериодПрошлыхЛет И ПустаяСтрока(Показатели.СообщениеОбОшибке);
	ОтобразитьРасчетыЗаПредыдущиеПериоды();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПередНачаломДлительнойОперации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Организации" И Объект.Организация = Источник
		Или ИмяСобытия = "Запись_НастройкиСистемыНалогообложения" Тогда
		
		ДанныеУчетаАктуальны = Ложь;
		ОбновитьДанныеФормы();
		
	ИначеЕсли ИмяСобытия = "Запись_ПлатежныйДокумент_УплатаНалогов" Тогда
		
		// Записан документ ПлатежноеПоручение или РасходныйКассовыйОрдер с видом операции "Уплата налога"
		
		Налог = Неопределено;
		
		Если ТипЗнч(Параметр) = Тип("Структура")
			И Параметр.Свойство("Организация") И Параметр.Организация = Объект.Организация
			И Параметр.Свойство("Налог", Налог) И ЗначениеЗаполнено(Налог) И ЭтоУплатаНДФЛ(Налог) Тогда
			
			ЗаполнитьАктуальныеПоказателиИПояснения();
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИзменениеВыписки"
		Или ИмяСобытия = "НалогиПрошлыхПериодов_ИзмененыОстатки" И Объект.Организация = Источник Тогда
		
		ЗаполнитьАктуальныеПоказателиИПояснения();
		
	ИначеЕсли ИмяСобытия = "ОбновитьФормуПомощникаВводаОстатков"
		И Источник = "ВводНачальныхОстатков"
		И Объект.Организация = Параметр Тогда
		
		// Проведение и отмена проведения документа "Ввод остатков"
		ЗаполнитьАктуальныеПоказателиИПояснения();
		
	ИначеЕсли ИмяСобытия = "Запись_НастройкиПродленияСроковНалоговОтчетов"
		И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("Организация")
		И Параметр.Организация = Объект.Организация Тогда
		
		ДанныеУчетаАктуальны = Ложь;
		ОбновитьДанныеФормы();
		
	ИначеЕсли ИмяСобытия = "АктуализацияЗавершенаУспешно"
		И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("Организация")
		И Параметр.Организация = Объект.Организация Тогда
		
		// Актуализация вызвана из помощника заполнения 3-НДФЛ
		ОбновитьДанныеФормы();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура АктуализироватьДанныеУчета(Команда)
	
	АктуализироватьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура УплатитьНалогБанк(Команда)
	
	СоздатьДокументУплатыНалога(ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.БанковскийПеревод"));
	
КонецПроцедуры

&НаКлиенте
Процедура УплатитьНалогКасса(Команда)
	
	СоздатьДокументУплатыНалога(ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.НаличнымиПоКвитанции"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСверку(Команда)
	
	Показатели = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	ОповещениеВыполнениеСверки = Новый ОписаниеОповещения("ОбработатьВыполнениеСверки", ЭтотОбъект);
	ОткрытьФорму(Показатели.ОписаниеДействияСверка.ИмяФормы,
		Показатели.ОписаниеДействияСверка.ПараметрыФормы,
		ЭтотОбъект, , , ,
		ОповещениеВыполнениеСверки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееНаИТС(Команда)
	
	АдресНаИТС = ЗадачиБухгалтераКлиентСервер.СсылкаНаИТС(Объект.Период);
	ПерейтиПоНавигационнойСсылке(АдресНаИТС);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СообщениеОбОшибкеОбработкаНавигационнойСсылки(Элемент, ОписаниеСсылки, СтандартнаяОбработка)
	
	Если ОписаниеСсылки = "УчетнаяПолитикаОрганизации" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		КлючЗаписиУчетнойПолитики = ДанныеУчетнойПолитики("НастройкиСистемыНалогообложения",
			Объект.Организация, Объект.Период);
		
		Если КлючЗаписиУчетнойПолитики <> Неопределено Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Ключ", КлючЗаписиУчетнойПолитики);
			
			ОткрытьФорму("РегистрСведений.НастройкиСистемыНалогообложения.ФормаЗаписи",
				ПараметрыФормы, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Иначе
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец", Объект.Организация));
			
			ОткрытьФорму("РегистрСведений.НастройкиСистемыНалогообложения.ФормаСписка",
				ПараметрыФормы, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ВыборПериодаКлиент.ПериодПриИзменении(Элемент, Период, НачалоКвартала(Объект.Период), КонецКвартала(Объект.Период));
	ДанныеУчетаАктуальны = Ложь;
	ОбновитьДанныеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("НачалоПериода", НачалоКвартала(Объект.Период));
	ПараметрыВыбора.Вставить("КонецПериода",  КонецКвартала(Объект.Период));
	ПараметрыВыбора.Вставить("НарастающимИтогом", Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаКвартал", ПараметрыВыбора, Элементы.Период, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал");
	
	ВыборПериодаКлиент.ПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка,
		ВидПериода, Период, НачалоКвартала(Объект.Период), КонецКвартала(Объект.Период));
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ДанныеУчетаАктуальны = Ложь;
	ОбновитьДанныеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьКУДиР();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеДоходыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьКУДиР();
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыПокупателейНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Период", Объект.Период);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("АвансыПокупателейЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.ПомощникЗаполнения3НДФЛ.Форма.АвансыПокупателей",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор, , ,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрофессиональныйВычетНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьКУДиР();
	
КонецПроцедуры

&НаКлиенте
Процедура АвансовыеПлатежиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачалоПериода = НачалоГода(Объект.Период);
	КонецПериода  = КонецКвартала(ДобавитьМесяц(Объект.Период, -3));
	
	ПараметрыФормы = ПараметрыФормыРасшифровкиПлатежейВБюджет(Объект.Организация, НачалоПериода, КонецПериода);
	
	ОткрытьФорму("Отчет.РасшифровкаПлатежейВБюджет.Форма.ФормаОтчета",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсвобождениеОтНалогаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьСправкуРасчетНДФЛДляИП();
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартныйВычетНаДетейНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Показатели = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",      Объект.Организация);
	ПараметрыФормы.Вставить("Период",           Объект.Период);
	ПараметрыФормы.Вставить("КонтекстныйВызов", Истина);
	ПараметрыФормы.Вставить("ПрименятьВычет",   Истина);
	ПараметрыФормы.Вставить("НачалоПериода",    Показатели.НачалоНалоговогоПериода);
	ПараметрыФормы.Вставить("КонецПериода",     Показатели.КонецПериода);
	ПараметрыФормы.Вставить("Декларация3НДФЛВыбраннаяФорма", Показатели.ИмяФормыОтчета);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СтандартныйВычетНаДетейЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.ПомощникЗаполнения3НДФЛ.Форма.СтандартныйВычетНаДетей",
		ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартныйВычетНаНалогоплательщикаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Показатели = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтекстныйВызов", Истина);
	ПараметрыФормы.Вставить("ПрименятьВычет",   Истина);
	ПараметрыФормы.Вставить("НачалоПериода",    Показатели.НачалоНалоговогоПериода);
	ПараметрыФормы.Вставить("КонецПериода",     Показатели.КонецПериода);
	ПараметрыФормы.Вставить("Организация",      Показатели.Организация);
	ПараметрыФормы.Вставить("Декларация3НДФЛВыбраннаяФорма", Показатели.ИмяФормыОтчета);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СтандартныйВычетНалогоплательщикаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.ПомощникЗаполнения3НДФЛ.Форма.СтандартныйВычетНалогоплательщика",
		ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ЭтапОбработкаНавигационнойСсылки(Элемент, ОписаниеСсылки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ОписаниеСсылки = "РасшифровкаПереплаты" Тогда
		
		ОткрытьРасшифровкуРасчетовПрошлыхЛет();
		
	ИначеЕсли ОписаниеСсылки = "СправкаРасчетНДФЛДляИП" Тогда
		
		ОткрытьСправкуРасчетНДФЛДляИП();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПлатежНДФЛОбработкаНавигационнойСсылки(Элемент, ОписаниеСсылки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеУдаления = Новый ОписаниеОповещения("УдалитьДокументУплатыНаКлиентеЗавершение", ЭтотОбъект);
	
	ПараметрыПлатежныхДокументов = ПомощникиПоУплатеНалоговИВзносовКлиент.ПараметрыОбработкиПлатежныхДокументов(
		ПлатежиНДФЛ, "ПлатежНДФЛ", ОповещениеУдаления);
	
	ПомощникиПоУплатеНалоговИВзносовКлиент.ОбработкаНавигационнойСсылкиПлатежногоДокумента(
		Элемент, ОписаниеСсылки, ПараметрыПлатежныхДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстРасчетыПрошлыхЛетОбработкаНавигационнойСсылки(Элемент, ОписаниеСсылки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Показатели = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Если ОписаниеСсылки = "ОплатитьЗадолженность" Тогда
		
		ОткрытьРасшифровкуРасчетовПрошлыхЛет(Истина);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПериодаПрошлыхЛетОбработкаНавигационнойСсылки(Элемент, ОписаниеСсылки, СтандартнаяОбработка)
	
	Если ОписаниеСсылки = "ОплатаСБанковскогоСчета" Тогда
		
		СтандартнаяОбработка = Ложь;
		СоздатьДокументУплатыНалога(ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.БанковскийПеревод"));
		
	ИначеЕсли ОписаниеСсылки = "ОплатаНаличными" Тогда
		
		СтандартнаяОбработка = Ложь;
		СоздатьДокументУплатыНалога(ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.НаличнымиПоКвитанции"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеТребуютсяРеквизитыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",                   Объект.Организация);
	ПараметрыФормы.Вставить("Назначение",             "ДляОтчетности");
	ПараметрыФормы.Вставить("Контекст",               Новый Структура);
	ПараметрыФормы.Контекст.Вставить("Период",        Объект.Период);
	ПараметрыФормы.Контекст.Вставить("ИмяРеглОтчета", "РегламентированныйОтчет3НДФЛ");
	
	ОткрытьФорму("Справочник.Организации.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстБаннераОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "Антикризис" Тогда
		
		СтандартнаяОбработка = Ложь;
		НастройкиУчетаКлиент.ОткрытьНастройкиАнтикризис(Объект.Организация);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЗакрытьБаннерНажатие(Элемент)
	
	СкрытьБаннерАнтикризис();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура АвансыПокупателейЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Число") Тогда
		
		АвансыПокупателей = ВыбранноеЗначение;
		ДанныеУчетаАктуальны = Ложь;
		ОбновитьДанныеФормы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Период = РезультатВыбора.КонецПериода;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеУчетнойПолитики(ИмяРегистра, Организация, Период)
	
	Возврат НастройкиУчета.КлючЗаписиДействующейУчетнойПолитики(ИмяРегистра, Организация, Период);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьАктуальныеПоказателиИПояснения()
	
	ЗаполнитьНачальныеПоказатели();
	ОтобразитьРасчетыЗаПредыдущиеПериоды();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеПоказатели()
	
	ДатаРегистрацииОрганизации = Справочники.Организации.ДатаРегистрацииОрганизации(Объект.Организация);
	
	МинимальныйПериод = НачалоКвартала(ДатаРегистрацииОрганизации);
	Если Объект.Период < МинимальныйПериод Тогда
		// Если при начальном заполнении по рабочей дате, восстановлении из настроек или при смене организации
		// период оказался в запрещенном интервале, нужно сдвинуть его вперед до ближайшего доступного.
		Объект.Период = МинимальныйПериод;
	КонецЕсли;
	
	Показатели = Обработки.ПомощникЗаполнения3НДФЛ.НачальныеПоказатели(Объект.Организация, Объект.Период);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Показатели, , "Период");
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Показатели, УникальныйИдентификатор);
	
	Период = Показатели.ПредставлениеПериодаПояснение;
	ПроверитьРеквизитыОрганизацииДляОтчетности();
	
	Объект.АвансовыеПлатежиИП = Показатели.АвансовыеПлатежи;
	
	РассчитатьИОтобразитьСуммуНалога(Показатели);
	
	ЗаполнитьОплатуНалогаИОтобразитьНаФорме();
	
	УстановитьВидимостьКнопокОплаты();
	
	ПолучитьСведенияОСверке();
	
	Элементы.СтандартныйВычетНаДетей.Подсказка = СтрШаблон(Нстр(
		"ru='Стандартный вычет на детей предоставляется до месяца, в котором доходы с начала года превысят %1 руб.'"),
		Показатели.ПределВычетаНаДетейДоходы);
	
	УстановитьФорматСтандартныхВычетов(ЭтотОбъект, Показатели);
	
	ТекстБаннера = НалоговыйУчет.ТекстБаннераНастройкиНалоговИОтчетов(Объект.Организация,
		ЗадачиБухгалтераКлиентСервер.КодЗадачиНДФЛПредприниматель());
	
	УстановитьВидимостьБаннераАнтикризис();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОплатуНалогаИОтобразитьНаФорме()
	
	Показатели = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	ПлатежиДляОтображения = Обработки.ПомощникЗаполнения3НДФЛ.ДокументыУплатыНалогов(
		Объект.Организация, Объект.Период, Показатели.Правило);
	ПлатежиНДФЛ.Загрузить(ПлатежиДляОтображения);
	
	ПомощникиПоУплатеНалоговИВзносов.ОтобразитьПлатежи(ЭтотОбъект, ПлатежиДляОтображения, "ПлатежНДФЛ");
	
	ПроверитьПолнотуУплатыНалоговИОтобразитьНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКУДиР()
	
	Показатели = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	ПараметрыФормы.Вставить("Организация",      Объект.Организация);
	ПараметрыФормы.Вставить("НачалоПериода",    Показатели.НачалоНалоговогоПериода);
	ПараметрыФормы.Вставить("КонецПериода",     КонецКвартала(Объект.Период));
	
	ОткрытьФорму("Отчет.КнигаУчетаДоходовИРасходовПредпринимателя.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеФормы()
	
	ЗаполнитьНачальныеПоказатели();
	ПередНачаломДлительнойОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗакрытиеФормы(ПараметрыВычета, ИмяРегистра)
	
	Если ПараметрыВычета = Неопределено
		Или ПараметрыВычета = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяРегистра = "РегистрСведений.ИПСтандартныеВычетыНаДетей" Тогда
		ИмяРеквизита  = "СтандартныйВычетНаДетей";
		ИмяПоказателя = "ЗаполнитьВычетНаДетей";
	Иначе
		ИмяРеквизита  = "СтандартныйВычетНаНалогоплательщика";
		ИмяПоказателя = "ЗаполнитьВычетНаНалогоплательщика";
	КонецЕсли;
	
	ДанныеВычета = ПараметрыВычета.СведенияОВычетах;
	
	Показатели = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	СохранитьСтандартныйВычет(Объект.Организация, Показатели.НачалоНалоговогоПериода,
		Показатели.КонецПериода, ИмяРегистра, ДанныеВычета);
	
	ЭтотОбъект[ИмяРеквизита] = ПараметрыВычета.СуммаВычета;
	
	Если ПараметрыВычета.СуммаВычета = Неопределено Тогда
		Показатели[ИмяРеквизита] = 0;
	Иначе
		Показатели[ИмяРеквизита] = ПараметрыВычета.СуммаВычета;
	КонецЕсли;
	
	Показатели[ИмяПоказателя] = ПараметрыВычета.СуммаВычета = Неопределено;
	
	ПоместитьВоВременноеХранилище(Показатели, АдресВоВременномХранилище);
	
	РассчитатьИОтобразитьСуммуНалога(Показатели);
	
	УстановитьФорматСтандартныхВычетов(ЭтотОбъект, Показатели);
	
	ДанныеУчетаАктуальны = Ложь;
	ОбновитьДанныеФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРасчетыЗаПредыдущиеПериоды()
	
	Показатели = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	СообщениеЗадолженностьЗаПредыдущийПериод = Обработки.ПомощникЗаполнения3НДФЛ.ТекстСообщенияРасчетыПрошлыхЛет(
		Показатели.Задолженность, Показатели.ГраницаОтчетностиПрошлыхПериодов);
	
	Элементы.ТекстРасчетыПрошлыхЛет.Заголовок = СообщениеЗадолженностьЗаПредыдущийПериод;
	
	// Оформление баннера расчетов.
	
	Если Показатели.Задолженность > 0 Тогда
		
		Элементы.ФонРасчетыПрошлыхЛет.ЦветФона = Показатели.ЦветФонаПредупреждения;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеДействияРасшифровкаРасчетовПрошлыхЛет(ПараметрыРасшифровки)
	
	Период = ПараметрыРасшифровки.Период;
	Организация = ПараметрыРасшифровки.Организация;
	ТекущаяДата = ОбщегоНазначения.ТекущаяДатаПользователя();
	НачалоПериода = Макс(НачалоГода(Период) - 1, Справочники.Организации.ДатаНачалаВеденияУчета(Организация));
	СрокУплатыНалогаПоУмолчанию = УчетНДФЛПредпринимателя.СрокУплатыНалогаПоУмолчанию(НачалоПериода);
	
	Если ТекущаяДата > СрокУплатыНалогаПоУмолчанию Или Период > СрокУплатыНалогаПоУмолчанию Тогда
		
		КонецПериода = КонецГода(Период);
		ОтчетныйПериод = НачалоПериода;
		
	Иначе
		// Долг за прошлый год ещё не просрочен
		КонецПериода = НачалоПериода;
		ОтчетныйПериод = Макс(НачалоГода(НачалоПериода) - 1,
			РегистрыСведений.ДатыВводаНачальныхОстатков.ДатаВводаНачальныхОстатков(Организация));
	КонецЕсли;
	
	Если ТребуетсяПоказатьОплатуНалогаЗаПрошлыеПериоды(Организация, Период) Тогда
		
		ИмяФормы = "Обработка.ПомощникУплатыНалоговВзносовПрошлыхЛет.Форма.ФормаОплатыЗаПрошлыеПериоды";
		ПараметрыФормы = ПараметрыФормыРасшифровкиПлатежейВБюджет(Организация,
			НачалоПериода, КонецПериода, ПараметрыРасшифровки.ВключатьНачисления);
		
		ОписаниеДействия = Новый Структура;
		ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
		ОписаниеДействия.Вставить("ИмяФормы", ИмяФормы);
		
	Иначе
		
		Показатели = ПолучитьИзВременногоХранилища(ПараметрыРасшифровки.АдресПоказателей);
		Событие = Новый Структура;
		Событие.Вставить("Организация",   Организация);
		Событие.Вставить("ПериодСобытия", ОтчетныйПериод);
		Событие.Вставить("Правило",       Показатели.Правило);
		
		ОписаниеДействия = ВыполнениеЗадачБухгалтера.ОписаниеДействияПомощникОплатыНДФЛПрошлыхПериодов(Событие);
		
	КонецЕсли;
	
	Возврат ОписаниеДействия;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТребуетсяПоказатьОплатуНалогаЗаПрошлыеПериоды(Организация, НалоговыйПериод)
	
	ГраницаОтчетностиПрошлыхПериодов = ПомощникиПоУплатеНалоговИВзносов.ГраницаОтчетностиПрошлыхПериодов(Организация);
	
	Возврат ЗначениеЗаполнено(ГраницаОтчетностиПрошлыхПериодов)
		И Год(ГраницаОтчетностиПрошлыхПериодов) = Год(НалоговыйПериод)
		И УчетНДФЛПредпринимателя.ОстатокРасчетовПоНалогуЗаПредыдущиеПериоды(Организация, КонецГода(НалоговыйПериод)) <= 0;
	
	КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеДействияДляНовогоДокументаУплатыНалога(Организация, Сумма, СпособУплатыНалога, ПериодСобытия)
	
	Возврат Обработки.ПомощникЗаполнения3НДФЛ.ОписаниеДействияУплатаНалога(Организация, Сумма,
		СпособУплатыНалога, ПериодСобытия, Ложь);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьРасшифровкуРасчетовПрошлыхЛет(ВключатьНачисления = Ложь)
	
	ПараметрыРасшифровки = Новый Структура;
	ПараметрыРасшифровки.Вставить("Организация",        Объект.Организация);
	ПараметрыРасшифровки.Вставить("Период",             Объект.Период);
	ПараметрыРасшифровки.Вставить("АдресПоказателей",   АдресВоВременномХранилище);
	ПараметрыРасшифровки.Вставить("ВключатьНачисления", ВключатьНачисления);
	ПараметрыРасшифровки.Вставить("КонтекстныйВызов",   КонтекстныйВызов);
	
	ОписаниеДействия = ОписаниеДействияРасшифровкаРасчетовПрошлыхЛет(ПараметрыРасшифровки);
	
	ОткрытьФорму(ОписаниеДействия.ИмяФормы, ОписаниеДействия.ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСправкуРасчетНДФЛДляИП()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("ОткрытьВПериодеОсвобожденияОтНалогов", Истина);
	
	ОткрытьФорму("Отчет.СправкаРасчетНДФЛДляИП.Форма.ФормаОтчета",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыФормыРасшифровкиПлатежейВБюджет(Организация, НачалоПериода, КонецПериода, ВключатьНачисления = Ложь)
	
	ПользовательскиеНастройки  = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Организация",   Организация);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоПериода);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  КонецПериода);
	
	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	
	ПараметрыФормы = Новый Структура;
	
	Если ВключатьНачисления Тогда
		ПараметрыФормы.Вставить("ВидОтчета", "НачисленияПлатежиНДФЛ");
	Иначе
		ПараметрыФормы.Вставить("ВидОтчета", "ПлатежиНДФЛ");
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ПользовательскиеНастройки",  ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("ВидРасшифровки",             2);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура ПередНачаломДлительнойОперации()
	
	СтатусФоновогоЗадания = НСтр("ru = 'Выполняется проверка данных...'");
	
	Показатели = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	ТребуетсяПроверятьАктуальность = Не Показатели.ЭтоПериодПрошлыхЛет И ПустаяСтрока(СообщениеОбОшибке);
	
	УправлениеФормой(ЭтотОбъект);
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьАктуальностьДанных", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеПередУплатойНалога()
	
	Если Не РеквизитыОрганизацииЗаполнены Тогда
		
		ОписаниеОбъектаПроверки = НСтр("ru = 'оплаты налога'");
		
		СообщитьОбОшибкеЗаполненияРеквизитовОрганизации(
			АдресХранилищаНезаполненныхРеквизитов,
			Объект.Организация,
			ОписаниеОбъектаПроверки);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ПроверитьПолнотуУплатыНалоговИОтобразитьНаФорме()
	
	Показатели = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	РезультатПроверки = ПомощникиПоУплатеНалоговИВзносов.ПроверитьПолнотуУплаты(Показатели.НалогКУплате, ПлатежиНДФЛ);
	
	Показатели.НалогОплаченПолностью = РезультатПроверки.НалогОплаченПолностью;
	ПоместитьВоВременноеХранилище(АдресВоВременномХранилище);
	
	Элементы.ОшибкаНесоответствиеСуммОплата.Видимость = РезультатПроверки.НалогУплаченНеВерно;
	ОшибкаНесоответствиеСуммОплата = РезультатПроверки.СообщениеОбОшибкеУплатыНалога;
	
	ДоступностьДокументовУплаты = Показатели.МожноСоздаватьДокументыУплаты
		И ПлатежиНДФЛ.Итог("Сумма") < Показатели.НалогКУплате;
	
	Элементы.УплатитьНалогБанк.Доступность  = ДоступностьДокументовУплаты;
	Элементы.УплатитьНалогКасса.Доступность = ДоступностьДокументовУплаты;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьРеквизитыОрганизацииДляОтчетности()
	
	Если ЭтоАдресВременногоХранилища(АдресХранилищаНезаполненныхРеквизитов) Тогда
		УдалитьИзВременногоХранилища(АдресХранилищаНезаполненныхРеквизитов);
		АдресХранилищаНезаполненныхРеквизитов = "";
	КонецЕсли;
	
	Показатели = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Если Показатели.НомерКвартала = 4 Тогда
		// Если декларация уже подготовлена, реквизиты заведомо заполнены и проверять их не требуется.
		РеквизитыОрганизацииЗаполнены = Истина;
		Возврат;
	КонецЕсли;
	
	НезаполненныеРеквизиты = Неопределено;
	
	РеквизитыОрганизацииЗаполнены = ПроверкаРеквизитовОрганизации.РеквизитыДляОтчетностиЗаполнены(
		"РегламентированныйОтчет3НДФЛ",
		Объект.Организация,
		Объект.Период,
		НезаполненныеРеквизиты);
		
	Если Не РеквизитыОрганизацииЗаполнены Тогда
		АдресХранилищаНезаполненныхРеквизитов = ПоместитьВоВременноеХранилище(
			НезаполненныеРеквизиты, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьИОтобразитьСуммуНалога(Показатели)
	
	ФорматПредставления = "ЧДЦ=0; ЧН=0; ЧГ=0";
	ТаблицаРасчеты = Обработки.ПомощникЗаполнения3НДФЛ.ПоясненияКРасчету(Показатели);
	Для Каждого ТекущаяСтрока Из ТаблицаРасчеты Цикл
		
		НомерЭтапа = Формат(ТаблицаРасчеты.Индекс(ТекущаяСтрока) + 1, ФорматПредставления);
		Элементы[СтрШаблон("Этап%1", НомерЭтапа)].Заголовок = ТекущаяСтрока.Пояснение;
		Элементы[СтрШаблон("Этап%1Значение", НомерЭтапа)].Заголовок = ТекущаяСтрока.Значение;
		Элементы[СтрШаблон("ГруппаЭтап%1", НомерЭтапа)].Видимость = Истина;
		
	КонецЦикла;
	
	КоличествоЭтапов = Элементы.ГруппаПояснениеРасчета.ПодчиненныеЭлементы.Количество();
	Для НомерЭтапа = ТаблицаРасчеты.Количество() + 1 По КоличествоЭтапов Цикл
		Элементы[СтрШаблон("ГруппаЭтап%1", Формат(НомерЭтапа, ФорматПредставления))].Видимость = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументУплатыНалога(СпособУплатыНалога)
	
	Если Не ПроверитьЗаполнениеПередУплатойНалога() Тогда
		Возврат;
	КонецЕсли;
	
	Показатели = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	СуммаПлатежа = Показатели.НалогКУплате - ПлатежиНДФЛ.Итог("Сумма");
	
	ОписаниеДействияПлатеж = ОписаниеДействияДляНовогоДокументаУплатыНалога(Объект.Организация, СуммаПлатежа,
		СпособУплатыНалога, Объект.Период);
	
	Если ОписаниеДействияПлатеж <> Неопределено Тогда
		
		ВыполнениеЗадачБухгалтераКлиент.ВыполнитьДействие(ОписаниеДействияПлатеж);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СообщитьОбОшибкеЗаполненияРеквизитовОрганизации(АдресХранилища, Организация, ОписаниеОбъектаПроверки)
	
	Если Не ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		Возврат;
	КонецЕсли;
	
	НезаполненныеРеквизиты = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	ПроверкаРеквизитовОрганизации.СообщитьОбОшибкеЗаполненияРеквизитовДляОтчетности(
		Организация,
		НезаполненныеРеквизиты,
		"СообщениеТребуютсяРеквизиты",
		Истина,
		ОписаниеОбъектаПроверки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьСтандартныйВычет(Знач Организация, НачалоПериода, КонецПериода, ИмяРегистра, Знач СведенияОВычетах)
	
	РеквизитыЗаписи = УчетНДФЛПредпринимателя.НовыйРеквизитыЗаписиВычета(
		Организация, НачалоПериода, КонецПериода, ИмяРегистра);
	
	УчетНДФЛПредпринимателя.СохранитьСтандартныйВычетЗаПериод(СведенияОВычетах, РеквизитыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура СтандартныйВычетНаДетейЗавершение(ПараметрыВычета, ДополнительныеПараметры) Экспорт
	
	ОбработатьЗакрытиеФормы(ПараметрыВычета, "РегистрСведений.ИПСтандартныеВычетыНаДетей");
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартныйВычетНалогоплательщикаЗавершение(ПараметрыВычета, ДополнительныеПараметры) Экспорт
	
	ОбработатьЗакрытиеФормы(ПараметрыВычета, "РегистрСведений.ИПСтандартныеВычетыНаНалогоплательщика");
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДокументУплаты(ДокументУплатыДляУдаления)
	
	ДокументУплатыОбъект = ДокументУплатыДляУдаления.ПолучитьОбъект();
	ДокументУплатыОбъект.УстановитьПометкуУдаления(Истина);
	ЗаполнитьНачальныеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДокументУплатыНаКлиентеЗавершение(ДокументУплатыДляУдаления, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ДокументУплатыДляУдаления) Тогда
		УдалитьДокументУплаты(ДокументУплатыДляУдаления);
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы   = Форма.Элементы;
	Объект     = Форма.Объект;
	Показатели = ПолучитьИзВременногоХранилища(Форма.АдресВоВременномХранилище);
	
	Элементы.ГруппаОсновное.Видимость = Показатели.ПлательщикНДФЛ;
	Элементы.ОрганизацияПредставлениеРасширеннаяПодсказка.Заголовок = Показатели.ПодсказкаПоНалогу;
	Элементы.ОрганизацияРасширеннаяПодсказка.Заголовок = Показатели.ПодсказкаПоНалогу;
	
	ОрганизацияЗаполнена = ЗначениеЗаполнено(Объект.Организация);
	РасчетНалогаВозможен = ПустаяСтрока(Форма.СообщениеОбОшибке);
	
	ЕстьДанныеДляРасчета = РасчетНалогаВозможен
		И Не Показатели.ЭтоПериодПрошлыхЛет
		И Не Показатели.НалоговыйПериодПропущен;
	
	ПроводитьРасчет = ОрганизацияЗаполнена И ЕстьДанныеДляРасчета;
	
	Элементы.СообщениеТребуютсяРеквизиты.Видимость = Не Форма.РеквизитыОрганизацииЗаполнены;
	Элементы.ГруппаШапка.Видимость             = ПроводитьРасчет;
	Элементы.ГруппаПодвал.Видимость            = ПроводитьРасчет;
	Элементы.ГруппаРасчетСуммыНалога.Видимость = ПроводитьРасчет;
	Элементы.ГруппаОтчетностьПрошлыхЛет.Видимость = ОрганизацияЗаполнена И Показатели.ЭтоПериодПрошлыхЛет;
	
	Элементы.ГруппаУплатаНалога.Видимость = ЕстьДанныеДляРасчета И Не Показатели.ДеятельностьОтсутствует;
	Элементы.ГруппаКомандыУплатыНалога.Видимость = Показатели.ПоказыватьКомандыОплаты;
	
	Элементы.ГруппаСверка.Видимость = ПроводитьРасчет И Показатели.Используется1СОтчетность;
	Элементы.ГруппаИТС.Видимость    = ПроводитьРасчет;
	
	Элементы.СообщениеОбОшибке.Видимость = Не РасчетНалогаВозможен;
	Элементы.Период.Видимость = Не Форма.КонтекстныйВызов;
	
	Элементы.Организация.Видимость = Не Форма.КонтекстныйВызов И Показатели.ИспользоватьНесколькоОрганизаций;
	Элементы.ОрганизацияПредставление.Видимость = Форма.КонтекстныйВызов
		Или Не Показатели.ИспользоватьНесколькоОрганизаций;
	
	Элементы.ПояснениеРасширенныйНалоговыйПериод.Видимость = РасчетНалогаВозможен И Показатели.НалоговыйПериодРасширен;
	
	Если Не ОрганизацияЗаполнена Или Показатели.НалоговыйПериодПропущен Тогда
		
		Элементы.ОрганизацияРасширеннаяПодсказка.Заголовок = "";
		СтатусФоновогоЗадания = "";
		
	Иначе
		
		ВыполняетсяФоновоеЗадание = ВыполняетсяФоновоеЗадание(Форма);
		Элементы.ГруппаРасчетыПрошлыхЛет.Видимость = Показатели.Задолженность > 0;
		
		Элементы.АвансовыеПлатежи.Видимость = Показатели.НомерКвартала <> 1;
		
		Если Показатели.НомерКвартала = 2 Тогда
			Элементы.АвансовыеПлатежи.Заголовок = СтрШаблон(НСтр("ru = 'Авансовый платеж за %1'"),
				Показатели.ПредставлениеПериодаАванса);
		Иначе
			Элементы.АвансовыеПлатежи.Заголовок = СтрШаблон(НСтр("ru = 'Авансовые платежи за %1'"),
				Показатели.ПредставлениеПериодаАванса);
		КонецЕсли;
		
		Элементы.ГруппаСтатусФоновогоЗадания.Видимость = ВыполняетсяФоновоеЗадание И ОрганизацияЗаполнена;
		
		Элементы.АктуализироватьДанныеУчета.Видимость  = Форма.ТребуетсяПроверятьАктуальность
			Или Не Форма.ДанныеУчетаАктуальны И ЕстьДанныеДляРасчета;
		
		Элементы.АктуализироватьДанныеУчета.Доступность = ОрганизацияЗаполнена И Не ВыполняетсяФоновоеЗадание;
		
		Элементы.ГруппаПояснениеРасчета.Видимость = Форма.ДанныеУчетаАктуальны;
		УстановитьКнопкуПоУмолчанию(Форма);
		
		Элементы.ГруппаПодвал.Видимость = Показатели.ЭтоПериодПрошлыхЛет Или Форма.ДанныеУчетаАктуальны;
		
		Если Не Показатели.МожноАктуализироватьДанные Тогда
			Элементы.АктуализироватьДанныеУчета.Доступность = Ложь;
		КонецЕсли;
		
		Если Показатели.СверкаВыполнена Тогда
			Элементы.ВыполнитьСверкуСсылка.Заголовок = Показатели.ЗапросНаСверкуНаименование;
			Элементы.ВыполнитьСверкуСсылка.Видимость = Истина;
			Элементы.ВыполнитьСверку.Видимость       = Ложь;
		Иначе
			Элементы.ВыполнитьСверкуСсылка.Видимость = Ложь;
			Элементы.ВыполнитьСверку.Видимость       = Истина;
		КонецЕсли;
		
		ДоступнаСверка = ЗначениеЗаполнено(Показатели.Срок) И ЗначениеЗаполнено(Показатели.Правило);
		Элементы.ВыполнитьСверку.Доступность = ДоступнаСверка;
		Элементы.ПодробнееНаИТС.Видимость = ЗначениеЗаполнено(Объект.Период);
		
	КонецЕсли;
	
	Элементы.ПояснениеРасширенныйНалоговыйПериод.Заголовок = СтрШаблон(
		Нстр("ru = 'Период с даты регистрации %1 по 31.12.%2 включается в отчетность и расчет налога за %3 г.'"),
		Формат(Показатели.ДатаРегистрацииОрганизации, "ДЛФ=D"),
		Формат(Год(Показатели.Период) - 1, "ЧГ=0"),
		Формат(Год(Показатели.Период), "ЧГ=0"));
	
	Элементы.ОсвобождениеОтНалога.Видимость = Не Показатели.ПрименяетсяОсвобождениеВТекущемПериоде
		И Форма.ОсвобождениеОтНалога <> 0;
	
	Если Показатели.ВключатьАвансы Тогда
		Элементы.Доходы.Заголовок = НСтр("ru = 'Доходы от реализации'");
		Элементы.ГруппаПрочиеДоходы.Видимость = Истина;
	Иначе
		Элементы.Доходы.Заголовок = НСтр("ru = 'Доходы'");
		Элементы.ГруппаПрочиеДоходы.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКнопокОплаты()
	
	Показатели = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	СпособОплаты = ВыполнениеЗадачБухгалтера.СпособУплатыНалогаВзноса(Объект.Организация);
	
	НадоВыбратьСпособОплаты = Не ЗначениеЗаполнено(СпособОплаты);
	
	Элементы.УплатитьНалогБанк.Видимость = Не Показатели.ДеятельностьОтсутствует
		И (НадоВыбратьСпособОплаты Или СпособОплаты = Перечисления.СпособыУплатыНалогов.БанковскийПеревод);
	
	Элементы.УплатитьНалогКасса.Видимость = Не Показатели.ДеятельностьОтсутствует
		И (НадоВыбратьСпособОплаты Или СпособОплаты = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидПоУмолчаниюОформлением(Элемент, КнопкаПоУмолчанию, ЦветФона)
	
	ЖирныйШрифт = КнопкаПоУмолчанию;
	Шрифт = Новый Шрифт(Элемент.Шрифт, , , ЖирныйШрифт);
	
	Элемент.Шрифт    = Шрифт;
	
	Если КнопкаПоУмолчанию Тогда
		Элемент.ЦветФона = ЦветФона;
	Иначе
		Элемент.ЦветФона = Новый Цвет;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьКнопкуПоУмолчанию(Форма)
	
	Элементы   = Форма.Элементы;
	Показатели = ПолучитьИзВременногоХранилища(Форма.АдресВоВременномХранилище);
	
	КнопкаПоУмолчаниюАктуализировать = Не Форма.ДанныеУчетаАктуальны И Не Показатели.ЭтоПериодПрошлыхЛет;
	
	КнопкаПоУмолчаниюУплата = Не КнопкаПоУмолчаниюАктуализировать
		И Форма.РеквизитыОрганизацииЗаполнены
		И Не Показатели.ДеятельностьОтсутствует
		И Не Показатели.НалогОплаченПолностью;
	
	Элементы.АктуализироватьДанныеУчета.КнопкаПоУмолчанию = КнопкаПоУмолчаниюАктуализировать;
	Элементы.УплатитьНалогБанк.КнопкаПоУмолчанию          = КнопкаПоУмолчаниюУплата;
	
	УстановитьВидПоУмолчаниюОформлением(Элементы.УплатитьНалогБанк,  КнопкаПоУмолчаниюУплата, Показатели.ЦветФонаКнопки);
	УстановитьВидПоУмолчаниюОформлением(Элементы.УплатитьНалогКасса, КнопкаПоУмолчаниюУплата, Показатели.ЦветФонаКнопки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ФорматПредставленияСтандартногоВычета(ЗаполнитьВычет)
	
	Формат = "";
	Если ЗаполнитьВычет Тогда
		Формат = НСтр("ru = 'ЧН=''Заполнить'''");
	Иначе
		Формат = НСтр("ru = 'ЧН=''Не применяется'''");
	КонецЕсли;
	
	Возврат Формат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоУплатаНДФЛ(Налог)
	
	Возврат Обработки.ПомощникЗаполнения3НДФЛ.ЭтоУплатаНДФЛ(Налог);
	
КонецФункции

#Область ПроверкаАктуальностиДанных

&НаКлиенте
Процедура Подключаемый_ПроверитьАктуальностьДанных()
	
	Показатели = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Если Не ТребуетсяПроверятьАктуальность Или Показатели.ДеятельностьОтсутствует Тогда
		Возврат;
	КонецЕсли;
	
	ЗаданиеАктуализации = ЗакрытиеМесяцаВызовСервера.НайтиФоновоеЗаданиеАктуализацииПоОрганизации(Объект.Организация, УникальныйИдентификатор);
	
	Если ЗаданиеАктуализации = Неопределено Или Не ЗначениеЗаполнено(ЗаданиеАктуализации.УникальныйИдентификатор) Тогда
		ПроверитьАктуальностьДанных();
	Иначе
		
		ДанныеУчетаАктуальны = Ложь;
		
		Если ИдентификаторЗаданияАктуализации <> ЗаданиеАктуализации.УникальныйИдентификатор Тогда
			// Задание запущено в другой форме
			ЗаданиеЗапущеноВДругойФорме = Истина;
			ИдентификаторЗаданияАктуализации = ЗаданиеАктуализации.УникальныйИдентификатор;
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации",
				ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
		Иначе
			ЗаданиеЗапущеноВДругойФорме = Ложь;
		КонецЕсли;
		
		ОбновитьСтатусФоновогоЗадания();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьАктуальностьДанных()
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
	ИдентификаторЗаданияАктуализации = Неопределено;
	
	УИДЗамера = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(
		Ложь, "АктуализацияДанныхТребуетсяАктуализацияЗаПериод");
	
	ПараметрыПроверки = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыПроверкиАктуальности();
	ПараметрыПроверки.Организация                  = Объект.Организация;
	ПараметрыПроверки.Период                       = КонецКвартала(Объект.Период);
	ПараметрыПроверки.УникальныйИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыПроверки.УИДЗамера                    = УИДЗамера;
	ПараметрыПроверки.АктуализироватьВесьПериод    = Истина;
	
	РезультатВыполнения = ЗакрытиеМесяцаВызовСервера.ПроверитьАктуальность(ПараметрыПроверки);
	
	ИдентификаторЗаданияПроверкиАктуализации = РезультатВыполнения.ИдентификаторЗадания;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультатПроверкиАктуальности", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатВыполнения, ОповещениеОЗавершении, ПараметрыОжидания);
	
	ОбновитьСтатусФоновогоЗадания();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатПроверкиАктуальности(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ИдентификаторЗаданияПроверкиАктуализации = Неопределено;
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ИдентификаторЗаданияПроверкиАктуализации = Неопределено;
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	Показатели = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	РезультатПроверки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если РезультатПроверки.УИДЗамера <> Неопределено Тогда
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(РезультатПроверки.УИДЗамера);
	КонецЕсли;
	
	ДанныеУчетаАктуальны = Не РезультатПроверки.ТребуетсяАктуализация;
	
	Если ДанныеУчетаАктуальны Тогда
		
		ИдентификаторЗаданияПроверкиАктуализации = Неопределено;
		ЗаполнитьАктуальныеПоказателиИПояснения();
		
	Иначе
		
		ТребуетсяПроверятьАктуальность = Ложь;
		ИдентификаторЗаданияПроверкиАктуализации = Неопределено;
		
	КонецЕсли;
	
	ОбновитьСтатусФоновогоЗадания();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область АктуализацияДанных

&НаКлиенте
Процедура ОбновитьСтатусФоновогоЗадания()
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияАктуализации) Тогда
		
		Прогресс = ЗакрытиеМесяцаВызовСервера.ПрочитатьПрогресс(ИдентификаторЗаданияАктуализации);
		Если ТипЗнч(Прогресс) = Тип("Структура") И Прогресс.Свойство("Процент") Тогда
			ПроцентВыполнения = Формат(Мин(Прогресс.Процент, 99), "ЧЦ=2; ЧДЦ=; ЧВН=; ЧГ=0") + "%";
		ИначеЕсли Прав(СтатусФоновогоЗадания, 1) = "%" Тогда
			ПроцентВыполнения = Прав(СтатусФоновогоЗадания, 3);
		Иначе
			ПроцентВыполнения = "";
		КонецЕсли;
		
		СтатусФоновогоЗадания = НСтр("ru = 'Выполняется расчет налога...'") + ПроцентВыполнения;
		
	ИначеЕсли ТребуетсяПроверятьАктуальность Или ЗначениеЗаполнено(ИдентификаторЗаданияПроверкиАктуализации) Тогда
		
		СтатусФоновогоЗадания = НСтр("ru = 'Выполняется проверка данных...'");
		
	Иначе
		
		СтатусФоновогоЗадания = "";
		
	КонецЕсли;
	
	ТребуетсяПроверятьАктуальность = Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВыполняетсяФоновоеЗадание(Форма)
	
	Возврат Форма.ТребуетсяПроверятьАктуальность
		Или ЗначениеЗаполнено(Форма.ИдентификаторЗаданияАктуализации)
		Или ЗначениеЗаполнено(Форма.ИдентификаторЗаданияПроверкиАктуализации);
	
КонецФункции

&НаКлиенте
Процедура АктуализироватьДанные()
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеПроверкиАктуальности");
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
	ИдентификаторЗаданияАктуализации = Неопределено;
	
	ПараметрыАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыАктуализации();
	ПараметрыАктуализации.Организация                  = Объект.Организация;
	ПараметрыАктуализации.Период                       = КонецКвартала(Объект.Период);
	ПараметрыАктуализации.ИдентификаторЗадания         = ИдентификаторЗаданияАктуализации;
	ПараметрыАктуализации.УникальныйИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыАктуализации.АктуализироватьВесьПериод    = Истина;
	
	РезультатВыполнения = ЗакрытиеМесяцаВызовСервера.АктуализироватьДанные(ПараметрыАктуализации);
	
	АдресХранилищаАктуализации = РезультатВыполнения.АдресХранилища;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ОбработатьРезультатАктуализации();
	Иначе
		ИдентификаторЗаданияАктуализации = РезультатВыполнения.ИдентификаторЗадания;
		ИдентификаторЗаданияПроверкиАктуализации = Неопределено;
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации",
			ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
	КонецЕсли;
	
	ОбновитьСтатусФоновогоЗадания();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеАктуализации()
	
	Если ЗакрытиеМесяцаВызовСервера.ЗаданиеВыполнено(ИдентификаторЗаданияАктуализации) Тогда
		ОбработатьРезультатАктуализации();
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации",
			ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
	КонецЕсли;
	
	ОбновитьСтатусФоновогоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатАктуализации()
	
	ИдентификаторЗаданияПроверкиАктуализации = Неопределено;
	ИдентификаторЗаданияАктуализации = Неопределено;
	
	Показатели = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Если ЗаданиеЗапущеноВДругойФорме Тогда
		
		ПроверитьАктуальностьДанных();
		Возврат;
		
	КонецЕсли;
	
	РезультатАктуализации = ПолучитьИзВременногоХранилища(АдресХранилищаАктуализации);
	
	Если ТипЗнч(РезультатАктуализации) <> Тип("Структура") Или Не РезультатАктуализации.Свойство("Выполнено") Тогда
		РезультатАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыйРезультатАктуализации();
	КонецЕсли;
	
	ДанныеУчетаАктуальны = РезультатАктуализации.Выполнено;
	
	Если ДанныеУчетаАктуальны Тогда
		
		ЗаполнитьАктуальныеПоказателиИПояснения();
		Оповестить("АктуализацияЗавершенаУспешно", Новый Структура("Организация", Объект.Организация));
		
	Иначе
		
		ОтобразитьРасчетыЗаПредыдущиеПериоды();
		ТребуетсяПроверятьАктуальность = Ложь;
		
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сверка

&НаКлиенте
Процедура ОбработатьВыполнениеСверки(РезультатЗакрытия = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПолучитьСведенияОСверке();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСведенияОСверке()
	
	Показатели = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Если Не ЗначениеЗаполнено(Объект.Организация)
		Или Не ЗначениеЗаполнено(Показатели.Правило)
		Или Не ЗначениеЗаполнено(Показатели.Срок) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДляСверки = ПараметрыДляСверки(Показатели, Объект.Период);
	СтруктураСведенийОСверке = ВыполнениеЗадачБухгалтера.СведенияОСверке(ПараметрыДляСверки);
	
	Показатели.СверкаВыполнена = СтруктураСведенийОСверке.СверкаВыполнена;
	Показатели.Вставить("ОписаниеДействияСверка", СтруктураСведенийОСверке.ОписаниеДействияСверка);
	Показатели.Вставить("ЗапросНаСверкуНаименование", СтруктураСведенийОСверке.ЗапросНаСверкуНаименование);
	ПоместитьВоВременноеХранилище(Показатели, АдресВоВременномХранилище);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыДляСверки(Показатели, Период)
	
	ПараметрыДляСверки = ВыполнениеЗадачБухгалтера.НовыйПараметрыЗадачиДляСверки();
	ПараметрыДляСверки.Организация = Показатели.Организация;
	ПараметрыДляСверки.РегистрацияВНалоговомОргане = Показатели.РегистрацияВНалоговомОргане;
	ПараметрыДляСверки.Правило = Показатели.Правило;
	ПараметрыДляСверки.ИдентификаторЗадачи = Показатели.ИдентификаторЗадачи;
	ПараметрыДляСверки.ПериодСобытия = Период;
	ПараметрыДляСверки.Срок = Показатели.Срок;
	
	Возврат ПараметрыДляСверки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматСтандартныхВычетов(Форма, Показатели)
	
	Элементы = Форма.Элементы;
	
	Элементы.СтандартныйВычетНаДетей.Формат = ФорматПредставленияСтандартногоВычета(Показатели.ЗаполнитьВычетНаДетей);
	Элементы.СтандартныйВычетНаНалогоплательщика.Формат = ФорматПредставленияСтандартногоВычета(
		Показатели.ЗаполнитьВычетНаНалогоплательщика);
	
КонецПроцедуры

#КонецОбласти

#Область БаннерАнтикризисНастройкиНалоговИОтчетов

&НаСервере
Процедура СкрытьБаннерАнтикризис()
	
	НалоговыйУчет.СохранитьНастройкуБаннераАнтикризис(
		Объект.Организация,
		ЗадачиБухгалтераКлиентСервер.КодЗадачиНДФЛПредприниматель(),
		Ложь);
	
	УстановитьВидимостьБаннераАнтикризис();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьБаннераАнтикризис()
	
	ВидимостьБаннера = НалоговыйУчет.ВидимостьБаннераАнтикризис(
		Объект.Организация,
		ЗадачиБухгалтераКлиентСервер.КодЗадачиНДФЛПредприниматель(),
		Объект.Период);
	
	Элементы.ГруппаБаннерНастройкаНалоговИОтчетов.Видимость = ВидимостьБаннера;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти