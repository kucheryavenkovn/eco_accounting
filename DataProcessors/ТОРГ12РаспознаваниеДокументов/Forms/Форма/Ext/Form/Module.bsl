#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРаспознаваниеДокументов") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ПолеПросмотра = ПолучитьОбщийМакет("МакетОтображенияКартинкиДокумента").ПолучитьТекст();
	АдресКартинки = ПоместитьВоВременноеХранилище(Объект.Ссылка.ИсходноеИзображение.Получить(), УникальныйИдентификатор);
	
	ЮрФизЛицоПоОрганизационнойФорме = РаспознаваниеДокументовСлужебный.ЮрФизЛицоПоОрганизационнойФорме();
	
	РезультатОбратнойСвязи = Новый Структура;
	СопоставлениеРеквизитов = Новый Структура("Шапка, Таблица");
	РаспознаваниеДокументов.ЗаполнитьТаблицуРеквизитовПоТипам(Объект.ТипДокумента, СопоставлениеРеквизитов.Шапка, СопоставлениеРеквизитов.Таблица);
	АдресСопоставленияРеквизитов = ПоместитьВоВременноеХранилище(СопоставлениеРеквизитов, УникальныйИдентификатор);
	
	Заголовок = Объект.Наименование;
	
	ЗаполнитьАдресаКартинок();
	СохранитьСоответствиеРеквизитовЭлементам();
	ЗаполнитьЭлементыИтогов();
	НастроитьЭлементыПоРеквизитам();
	
	НастроитьКолонкиТаблицы();
	ЗаполнитьВариантыВыбораДляЗначенийТаблицы();
	ЗаполнитьТаблицуДокумента();
	
	Если Не УправлениеДоступом.ЧтениеРазрешено(Объект.РеквизитыДокумента[9].Значение) Тогда
		// Организация покупатель
		Объект.РеквизитыДокумента[9].Значение = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	Если Не УправлениеДоступом.ЧтениеРазрешено(Объект.РеквизитыДокумента[8].Значение) Тогда
		// Организация продавец
		Объект.РеквизитыДокумента[8].Значение = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	Если Не УправлениеДоступом.ЧтениеРазрешено(Объект.РеквизитыДокумента[6].Значение) Тогда
		// Договор
		Объект.РеквизитыДокумента[6].Значение = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	ИнициализироватьСтруктуруСозданныеДокументы();
	
	Настройки = РегистрыСведений.ОбщиеНастройкиРаспознаваниеДокументов.ТекущиеНастройки();
	Если Настройки.ФормаОбработчикаПоказыватьИзображенияВШапке Тогда
		ДобавитьИзображенияРеквизитов(Настройки);
	КонецЕсли;
	ВариантСохраненияСоответствий = Настройки.ВариантСохраненияСоответствий;
	СоздатьСчетФактуру =  Настройки.СоздаватьСчетФактуруПриСозданииОснования;
	
	Если Объект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг Тогда
		Элементы.СуммаВключаетНДС.Видимость = Истина;
		Элементы.СтранаПроисхождения.Видимость = Ложь;
		Элементы.НомерГТД.Видимость = Ложь;
		
		Элементы.ФормаСоздатьПоступлениеТовары.Доступность = Ложь;
		Элементы.СоздатьРеализацияТовары.Доступность = Ложь;
		Элементы.СоздатьСчетФактуру.Видимость = Ложь;
		Элементы.КнопкаСоздатьСчетФактуру.Видимость = Ложь;
	Иначе
		Элементы.СуммаВключаетНДС.Видимость = Ложь;
		Если Объект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.ТОРГ12 Тогда
			Элементы.СтранаПроисхождения.Видимость = Ложь;
			Элементы.НомерГТД.Видимость = Ложь;
			Элементы.СоздатьСчетФактуру.Видимость = Ложь;
			Элементы.КнопкаСоздатьСчетФактуру.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	НастроитьВидимостьПоФункциональнымОпциям();
	ИзменитьИсточникиДляВыбораДоговора(Ложь);
	РаспознаваниеДокументовСлужебный.ПересчитатьПроблемныеЭлементы(ЭтотОбъект);
	
	СвойстваОбработки = Новый Структура();
	СвойстваОбработки.Вставить("ИмяЭлементаТаблицы", "СписокНераспознаннойНоменклатуры");
	СвойстваОбработки.Вставить("ИмяЭлементаРеквизитовОбъекта", "ГруппаРеквизитыОбъекта");
	СвойстваОбработки.Вставить("ИмяПроцедурыПриИзменении", "Подключаемый_УстановитьЗначениеТаблицыСозданияНоменклатуры");
	СвойстваОбработки.Вставить("ИмяПроцедурыИзменениеФлажка", "Подключаемый_ПриИзмененииВыбораПоляНераспознаннойНоменклатуры");
	РаспознаваниеДокументовСлужебный.ДобавитьРеквизитыДляСозданияНоменклатуры(ЭтотОбъект, СвойстваОбработки);
	
	Для Каждого Колонка Из СписокНераспознаннойНоменклатуры.Выгрузить().Колонки Цикл
		ИменаКолонокНераспознаннойНоменклатуры.Добавить(Колонка.Имя);
	КонецЦикла;
	
	НайтиИЗаполнитьСозданныеДокументы();
	
	РаспознаваниеДокументовПереопределяемый.ПриСозданииФормыРаспознаванияНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Не востребована т.к. права на изменение не отличаются от прав на чтение
	// СтандартныеПодсистемы.УправлениеДоступом
	// УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	МаксимальныйНомерСтроки = 0;
	Для Каждого СтрокаТЧ Из ТекущийОбъект.РеквизитыТабличныхЧастей Цикл
		Если СтрокаТЧ.НомерСтрокиТЧ > МаксимальныйНомерСтроки Тогда
			МаксимальныйНомерСтроки = СтрокаТЧ.НомерСтрокиТЧ;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИспользуетсяВстроенныйIE = РаспознаваниеДокументовСлужебныйКлиент.ИспользуетсяВстроенныйIE();
	Если ИспользуетсяВстроенныйIE Тогда
		Элементы.ПолеПросмотра.Видимость = Ложь;
		Элементы.АдресКартинки.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ПослеПодтвержденияЗакрытия", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.РаспознанныйДокумент.Форма.ФормаОбратнойСвязи" Тогда
		РаспознаваниеДокументовСлужебныйКлиент.ОбработкаВыбораОбратнойСвязи(ЭтотОбъект, ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыбранРеквизитФормыСоздания" Тогда
		ПриблизитьПоКоординатам(Параметр.Координаты, Параметр.ВысотаКартинки);
	ИначеЕсли ИмяСобытия = "ПрикрепленСканДокумента" Тогда
		НайтиИЗаполнитьСозданныеДокументы();
		ОбновитьОтображениеДанных();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СохранитьЗначенияПередЗаписью();
	РаспознаваниеДокументовСлужебный.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Пакет = Новый Структура;
	Пакет.Вставить("diff", РезультатОбратнойСвязи);
	
	РаспознаваниеДокументовКоннекторСлужебный.ПередатьОбратнуюСвязь(Объект.ИдентификаторРезультата, Пакет);
	
	РезультатОбратнойСвязи = Новый Структура;
	
	СохранитьСоответствиеРеквизитовЭлементам();
	
	РаспознаваниеДокументовПереопределяемый.ПослеЗаписиФормыРаспознаванияНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("РаспознанныйДокумент_ОбновитьОтборФормыСписка");
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначенияПередЗаписью()
	
	СохранитьИтоговыеЗначения();
	СохранитьЗначенияИзТаблицыДокумента();
	РаспознаваниеДокументовПереопределяемый.ПередЗаписьюРаспознанногоДокумента(Объект);
	ЗаписатьСоответствияРаспознанныхСтрок();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСоответствияРаспознанныхСтрок()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СоответствияСтрок", НаборСоответствийРаспознанныхСтрок.Выгрузить(,"ТипЗначения,РаспознаннаяСтрока,СоответствующееЗначение,КоличествоПовторений"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоответствияСтрок.ТипЗначения КАК ТипЗначения,
	|	СоответствияСтрок.РаспознаннаяСтрока КАК РаспознаннаяСтрока,
	|	СоответствияСтрок.СоответствующееЗначение КАК СоответствующееЗначение,
	|	СоответствияСтрок.КоличествоПовторений КАК КоличествоПовторений
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	&СоответствияСтрок КАК СоответствияСтрок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.ТипЗначения КАК ТипЗначения,
	|	ДанныеДокумента.РаспознаннаяСтрока КАК РаспознаннаяСтрока,
	|	ДанныеДокумента.СоответствующееЗначение КАК СоответствующееЗначение,
	|	ДанныеДокумента.КоличествоПовторений + ЕСТЬNULL(ДанныеРегистра.КоличествоПовторений, 0) КАК КоличествоПовторений
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРаспознанныхСтрокРаспознаваниеДокументов КАК ДанныеРегистра
	|		ПО ДанныеДокумента.ТипЗначения = ДанныеРегистра.ТипЗначения
	|			И ДанныеДокумента.РаспознаннаяСтрока = ДанныеРегистра.РаспознаннаяСтрока
	|			И ДанныеДокумента.СоответствующееЗначение = ДанныеРегистра.СоответствующееЗначение
	|ГДЕ
	|	НЕ ЕСТЬNULL(ДанныеРегистра.ИзмененоВручную, ЛОЖЬ)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	АвторЗаписи = Пользователи.ТекущийПользователь();
	ДатаЗаписи = ТекущаяДатаСеанса();
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.СоответствиеРаспознанныхСтрокРаспознаваниеДокументов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Автор = АвторЗаписи;
		Запись.ДатаСоздания = ДатаЗаписи;
		Запись.Записать();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	СохранитьПривязкуДокумента(НовыйОбъект);
	Записать();
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПолеПросмотраДокументСформирован(Элемент)
	
	РаспознаваниеДокументовСлужебныйКлиент.ЗагрузитьКартинкуПоАдресу(Элементы.ПолеПросмотра, АдресКартинки);
	HTMLДокументСформирован = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуетсяВстроенныйIEПриИзменении(Элемент)
	Элементы.ПолеПросмотра.Видимость = НЕ ИспользуетсяВстроенныйIE;
	Элементы.АдресКартинки.Видимость = ИспользуетсяВстроенныйIE;
КонецПроцедуры

&НаКлиенте
Процедура ПолеКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяФайла = Объект.ИмяФайла + ".jpeg";
	ФайловаяСистемаКлиент.ОткрытьФайл(АдресКартинки,, ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеПриИзменении(Элемент)
	
	НаправлениеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачалоВыбораПоля(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИмяЭлемента = Элемент.Имя;
	Отбор = Новый Структура("ИмяЭлемента", ИмяЭлемента);
	НайденныеСтроки = Объект.РеквизитыДокумента.НайтиСтроки(Отбор);
	
	Если НЕ НайденныеСтроки.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	КоординатыКартинки = РаспознаваниеДокументовСлужебныйКлиент.ПолучитьНаборКоординат(НайденныеСтроки[0]);
	ПриблизитьПоКоординатам(КоординатыКартинки, НайденныеСтроки[0].СтрокВИзображении);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорСоздание(Элемент, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ИсточникПоляДоговорКонтрагент) ИЛИ
		НЕ ЗначениеЗаполнено(ИсточникПоляДоговорОрганизация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Перед созданием договора необходимо заполнить поля ""Контрагент"" и ""Организация""'");
		Сообщение.Сообщить();
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательОнЖеПриИзменении(Элемент)
	
	Подключаемый_НачалоВыбораПоля(Элементы.Грузополучатель, Неопределено, Истина);
	Элементы.Грузополучатель.Доступность = (ГрузополучательОнЖе = 0);
	Если ГрузополучательОнЖе Тогда
		Объект.РеквизитыДокумента[5].Значение = Новый(ТипЗнч(Объект.РеквизитыДокумента[5].Значение));
	КонецЕсли;
	
	ПриИзмененииПоляНаКлиенте(Элементы.Грузополучатель);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузоотправительОнЖеПриИзменении(Элемент)
	
	Подключаемый_НачалоВыбораПоля(Элементы.Грузоотправитель, Неопределено, Истина);
	Элементы.Грузоотправитель.Доступность = (ГрузоотправительОнЖе = 0);
	Если ГрузоотправительОнЖе Тогда
		Объект.РеквизитыДокумента[4].Значение = Новый(ТипЗнч(Объект.РеквизитыДокумента[4].Значение));
	КонецЕсли;
	
	ПриИзмененииПоляНаКлиенте(Элементы.Грузоотправитель);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииПоля(Элемент)
	
	ПриИзмененииПоляНаКлиенте(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПоляНаКлиенте(Элемент)
	
	ПриИзмененииПоляНаСервере(Элемент.Имя);
	РаспознаваниеДокументовСлужебныйКлиент.ДобавитьСоответствиеРаспознаваемыхСтрок(
		Объект,
		ВариантСохраненияСоответствий,
		НаборСоответствийРаспознанныхСтрок,
		Элемент.Имя
	);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПоляНаСервере(ИмяПоля)
	
	Отбор = Новый Структура("ИмяЭлемента", ИмяПоля);
	НайденныеСтроки = Объект.РеквизитыДокумента.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() Тогда
		ДополнитьРезультатОбратнойСвязи(ИмяПоля, НайденныеСтроки[0]);
		Если НЕ НайденныеСтроки[0].ЗаполненоВручную Тогда
			НайденныеСтроки[0].ЗаполненоВручную = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоля = "ИтогоВсего" ИЛИ ИмяПоля = "НомерДокумента" ИЛИ ИмяПоля = "ДатаДокумента" Тогда
		ВыполнитьПоискСозданныхДокументов(ИмяПоля);
	ИначеЕсли ИмяПоля = "СуммаВключаетНДС" Тогда
		// Поле СуммаВключаетНДС на форме видно только у актов, а в них есть реквизит для хранения значения
		СуммаВключаетНДС = Объект.РеквизитыДокумента[17].Значение;
		Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
			РаспознаваниеДокументовСлужебный.ПриИзмененииСтавкаНДС(СтрокаТаблицы, СуммаВключаетНДС);
		КонецЦикла;
	ИначеЕсли ИмяПоля = "Продавец" ИЛИ ИмяПоля = "ПокупательОрганизация" Тогда
		// Поступление
		Если НЕ СозданныеДокументы.Поступление.СозданПоРаспознанномуДокументу Тогда
			СозданныеДокументы.Поступление.Ссылка = Неопределено;
			СозданныеДокументы.СчетФактураПолученный.Ссылка = Неопределено;
		КонецЕсли;
		ВыполнитьПоискСозданныхДокументов(ИмяПоля);
		ИзменитьИсточникиДляВыбораДоговора();
	ИначеЕсли ИмяПоля = "Покупатель" ИЛИ ИмяПоля = "ПродавецОрганизация" Тогда
		// Реализация
		Если НЕ СозданныеДокументы.Реализация.СозданПоРаспознанномуДокументу Тогда
			СозданныеДокументы.Реализация.Ссылка = Неопределено;
			СозданныеДокументы.СчетФактураВыданный.Ссылка = Неопределено;
		КонецЕсли;
		ВыполнитьПоискСозданныхДокументов(ИмяПоля);
		ИзменитьИсточникиДляВыбораДоговора();
	КонецЕсли;
	
	СохранитьИтоговыеЗначения();
	СохранитьЗначенияИзТаблицыДокумента();
	РаспознаваниеДокументовСлужебный.ПересчитатьПроблемныеЭлементы(ЭтотОбъект);
	
	НайтиИЗаполнитьСозданныеДокументы();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДокументаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#Область ОбратнаяСвязь

&НаСервере
Процедура ДополнитьРезультатОбратнойСвязи(ИмяПоля, НайденнаяСтрока, НомерСтрокиТаблицы = Неопределено, ВыбранноеЗначение = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НомерСтрокиТаблицы = Неопределено Тогда
		СопоставлениеРеквизитов = ПолучитьИзВременногоХранилища(АдресСопоставленияРеквизитов).Шапка;
		ДанныеДляВыбораРеквизитов = ПолучитьИзВременногоХранилища(АдресЗначенияВыбораДляШапки);
		
		ОбластьДобавления = РезультатОбратнойСвязи;
	Иначе
		Если НЕ РезультатОбратнойСвязи.Свойство("Таблица") Тогда
			РезультатОбратнойСвязи.Вставить("Таблица", Новый Соответствие);
		КонецЕсли;
		СопоставлениеРеквизитов = ПолучитьИзВременногоХранилища(АдресСопоставленияРеквизитов).Таблица;
		ДанныеДляВыбораРеквизитов = ЗначенияВыбораДляЯчеекТаблицыДокумента;
		
		НомерСтрокиТекст = Формат(НомерСтрокиТаблицы, "ЧН=; ЧГ=");
		ОбластьДобавления = РезультатОбратнойСвязи.Таблица.Получить(НомерСтрокиТекст);
		Если ОбластьДобавления = Неопределено Тогда
			РезультатОбратнойСвязи.Таблица.Вставить(НомерСтрокиТекст, Новый Структура);
			ОбластьДобавления = РезультатОбратнойСвязи.Таблица.Получить(НомерСтрокиТекст);
		КонецЕсли;
	КонецЕсли;
	
	Если НомерСтрокиТаблицы = Неопределено Тогда
		Если ИмяПоля = "ИтогоВсего" ИЛИ ИмяПоля = "ИтогоСуммаНДС" ИЛИ ИмяПоля = "ИтогоСумма" Тогда
			// На форму вынесены отдельными реквизитами формы. Измененное значение - на форме, найденное значение - в объекте
			НайденноеЗначение = НайденнаяСтрока.Значение;
			ВыбранноеЗначение = ЭтаФорма[ИмяПоля];
		Иначе
			НайденноеЗначение = РаспознаваниеДокументов.ЗначениеРеквизитаТабличнойЧасти(Объект.Ссылка, СтрЗаменить(Элементы[ИмяПоля].ПутьКДанным, "Объект.", ""));
			ВыбранноеЗначение = НайденнаяСтрока.Значение;
		КонецЕсли;
	КонецЕсли;
	
	ЭтоПримитивныйТип = РаспознаваниеДокументовКлиентСервер.ЭтоПримитивныйТип(ТипЗнч(НайденнаяСтрока.Значение));
	Если ЭтоПримитивныйТип Тогда
		
		Если ОбластьДобавления.Свойство(ИмяПоля) Тогда
			ОбластьДобавления[ИмяПоля].Вставить("SelectedValue", ВыбранноеЗначение);
		Иначе
			ДанныеПоля = РаспознаваниеДокументов.СтруктураОбратнойСвязиИзмененногоПоля(Ложь);
			СтрокаСопоставления = СопоставлениеРеквизитов.Найти(ИмяПоля, "ИмяРеквизита");
			ДанныеПоля.RecognizedValue = НайденнаяСтрока.РаспознанныйТекст;
			
			Если НомерСтрокиТаблицы = Неопределено Тогда
				ДанныеПоля.FoundValue = НайденноеЗначение;
			Иначе
				ДанныеПоля.FoundValue = НайденнаяСтрока.Значение;
			КонецЕсли;
			ДанныеПоля.SelectedValue = ВыбранноеЗначение;
			ОбластьДобавления.Вставить(ИмяПоля, ДанныеПоля);
		КонецЕсли;
		
	Иначе
		
		Если ИмяПоля = "Склад" Тогда
			Возврат;
		КонецЕсли;
		
		СвязанныеКолонки = РаспознаваниеДокументовСлужебныйВызовСервера.ПараметрыСозданияНовогоЭлемента(ИмяПоля, Объект.ТипДокумента, Объект.Направление);
		СвязанныхКолонокНет = (СвязанныеКолонки.Количество() = 0);
		Если СвязанныхКолонокНет Тогда
			СвязанныеКолонки.Добавить(Новый Структура("ИмяРеквизита, Реквизит", ИмяПоля, ИмяПоля));
		КонецЕсли;
		
		ДобавитьНаименованиеПолное = Ложь;
		КлючиСтруктуры = Новый Массив;
		ДанныеПоля = РаспознаваниеДокументов.СтруктураОбратнойСвязиИзмененногоПоля();
		ДанныеПоля.RecognizedValue = Новый Массив;
		
		Для Каждого Колонка Из СвязанныеКолонки Цикл
			Если Колонка.Свойство("ИмяРеквизита") И ЗначениеЗаполнено(Колонка.ИмяРеквизита) Тогда
				Если НЕ ДобавитьНаименованиеПолное И Колонка.Реквизит = "Наименование" Тогда
					ДобавитьНаименованиеПолное = ВыбранноеЗначение.Метаданные().Реквизиты.Найти("НаименованиеПолное") <> Неопределено;
				КонецЕсли;
				
				СтрокаСопоставления = СопоставлениеРеквизитов.Найти(Колонка.ИмяРеквизита, "ИмяРеквизита");
				Если СтрокаСопоставления = Неопределено Тогда
					Продолжить;
				Иначе
					Если НомерСтрокиТаблицы = Неопределено Тогда
						Отбор = Новый Структура("ИмяРеквизита", Колонка.ИмяРеквизита);
						НайденныеСтроки = Объект.РеквизитыДокумента.НайтиСтроки(Отбор);
					Иначе
						Отбор = Новый Структура("ИмяРеквизита, НомерСтрокиТЧ", Колонка.ИмяРеквизита, НомерСтрокиТаблицы);
						НайденныеСтроки = Объект.РеквизитыТабличныхЧастей.НайтиСтроки(Отбор);
					КонецЕсли;
					Если НайденныеСтроки.Количество() <> 0 Тогда
						ДанныеПоля.RecognizedValue.Добавить(Новый Структура(Колонка.Реквизит, НайденныеСтроки[0].РаспознанныйТекст));
					Иначе
						ДанныеПоля.RecognizedValue.Добавить(Новый Структура(Колонка.Реквизит, Неопределено));
					КонецЕсли;
				КонецЕсли;
				КлючиСтруктуры.Добавить(Колонка.Реквизит);
			КонецЕсли;
		КонецЦикла;
		
		ЗаполнитьДанныеСтруктурыПоСсылке(ДанныеПоля.SelectedValue, ВыбранноеЗначение, КлючиСтруктуры, ДобавитьНаименованиеПолное, СвязанныхКолонокНет);
		
		Если НомерСтрокиТаблицы = Неопределено Тогда
			ПодходящиеЗначения = ДанныеДляВыбораРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", ИмяПоля));
		Иначе
			ПодходящиеЗначения = ЗначенияВыбораДляЯчеекТаблицыДокумента.НайтиСтроки(Новый Структура("ИмяРеквизита, НомерСтроки", ИмяПоля, НомерСтрокиТаблицы));
			Если ПодходящиеЗначения.Количество() <> 0 Тогда
				ПодходящиеЗначения = ПодходящиеЗначения[0].ЗначенияВыбора;
			КонецЕсли;
		КонецЕсли;
		Если ПодходящиеЗначения.Количество() <> 0 И ПодходящиеЗначения[0].Уверенность >= РаспознаваниеДокументовСлужебный.ГраницаПроблемныхЗначений() Тогда
			ЗаполнитьДанныеСтруктурыПоСсылке(ДанныеПоля.FoundValue, ПодходящиеЗначения[0].Значение, КлючиСтруктуры, ДобавитьНаименованиеПолное, СвязанныхКолонокНет);
			ДанныеПоля.Confidence = ПодходящиеЗначения[0].Уверенность;
		Иначе
			ДанныеПоля.FoundValue = Новый Массив;
			ДанныеПоля.Confidence = 0;
		КонецЕсли;
		
		ОбластьДобавления.Вставить(ИмяПоля, ДанныеПоля);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСтруктурыПоСсылке(ДанныеСтруктуры, Ссылка, КлючиСтруктуры, ДобавитьНаименованиеПолное, СвязанныхКолонокНет)
	
	ДанныеСтруктуры = Новый Массив;
	Если ДобавитьНаименованиеПолное Тогда
		КлючиСтруктуры.Добавить("НаименованиеПолное");
	КонецЕсли;
	
	Если СвязанныхКолонокНет Тогда
		ЗначенияСтруктуры = Новый Структура;
		Для Каждого КлючСтруктуры Из КлючиСтруктуры Цикл
			ЗначенияСтруктуры.Вставить(КлючСтруктуры, Ссылка);
		КонецЦикла;
	Иначе
		ЗначенияСтруктуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, КлючиСтруктуры);
	КонецЕсли;
	
	Если ДобавитьНаименованиеПолное Тогда
		ОбъединитьНаименованиеПолное(ЗначенияСтруктуры);
	КонецЕсли;
	Для Каждого КлючСтруктуры Из КлючиСтруктуры Цикл
		Если КлючСтруктуры <> "НаименованиеПолное" И ЗначенияСтруктуры.Свойство(КлючСтруктуры) Тогда 
			Если КлючСтруктуры = "ВидСтавкиНДС" Тогда
				ДобавляемоеЗначение = Перечисления.СтавкиНДС.СтавкаНДС(ЗначенияСтруктуры[КлючСтруктуры], Объект.РеквизитыДокумента[1].Значение);
			Иначе
				ДобавляемоеЗначение = ЗначенияСтруктуры[КлючСтруктуры];
			КонецЕсли;
			
			ТипЭтогоЗначения = ТипЗнч(ДобавляемоеЗначение);
			Если НЕ РаспознаваниеДокументовКлиентСервер.ЭтоПримитивныйТип(ТипЭтогоЗначения) И ТипЭтогоЗначения <> Тип("Массив") Тогда
				ДобавляемоеЗначение = Строка(ДобавляемоеЗначение);
			КонецЕсли;
			
			ДанныеСтруктуры.Добавить(Новый Структура(КлючСтруктуры, ДобавляемоеЗначение));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбъединитьНаименованиеПолное(СтруктураДанных)
	
	МассивЗначений = Новый Массив;
	МассивЗначений.Добавить(СтруктураДанных.Наименование);
	МассивЗначений.Добавить(СтруктураДанных.НаименованиеПолное);
	СтруктураДанных.Вставить("Наименование", МассивЗначений);
	СтруктураДанных.Удалить("НаименованиеПолное");
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ВыполнитьПоискСозданныхДокументов(ИмяПоля)
	
	Если ИмяПоля = "ИтогоВсего" ИЛИ ИмяПоля = "НомерДокумента" ИЛИ ИмяПоля = "ДатаДокумента" Тогда
		Если НЕ СозданныеДокументы.Поступление.СозданПоРаспознанномуДокументу Тогда
			СозданныеДокументы.Поступление.Ссылка = Неопределено;
			СозданныеДокументы.СчетФактураПолученный.Ссылка = Неопределено;
		КонецЕсли;
		Если НЕ СозданныеДокументы.Реализация.СозданПоРаспознанномуДокументу Тогда
			СозданныеДокументы.Реализация.Ссылка = Неопределено;
			СозданныеДокументы.СчетФактураВыданный.Ссылка = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ИзменитьОтображениеПоТипуДокумента();
	
	НайтиИЗаполнитьСозданныеДокументы();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АвтоПодборПоля(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Реквизит = РаспознаваниеДокументовСлужебныйКлиентСервер.РеквизитДокумента(Объект, Элемент.Имя, Ложь);
	Если Реквизит = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоординатыКартинки = РаспознаваниеДокументовСлужебныйКлиент.ПолучитьНаборКоординат(Реквизит);
	ПриблизитьПоКоординатам(КоординатыКартинки, Реквизит.СтрокВИзображении);
	
	Если Элемент.Имя = "Договор" Тогда
		СтандартнаяОбработка = Ложь;
		Тип = Новый(ТипЗнч(Реквизит.Значение));
		ЗаполнитьСписокВыбораПоляНаСервере(Реквизит.РаспознанныйТекст, Тип, ДанныеВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораПоляНаСервере(РаспознанныйТекст, Тип, ДанныеВыбора)
	РаспознаваниеДокументовСлужебный.ЗаполнитьСписокВыбораПоля(ЭтотОбъект, РаспознанныйТекст, Тип, ДанныеВыбора);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбораПоля(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		
		// По жалобам пользователей отключено, хочется, чтобы при выборе существующей номенклатуры 
		// в содержании сохранялся распознанный текст
		//
		//Если Элемент.Имя = "Номенклатура" Тогда
		//	Элементы.ТаблицаДокумента.ТекущиеДанные.Содержание = Строка(ВыбранноеЗначение);
		//КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ИмяЭлемента = Элемент.Имя;
	Если ИмяЭлемента = "ПродавецОрганизация" ИЛИ ИмяЭлемента = "ПокупательОрганизация"
		ИЛИ РаспознаваниеДокументовКлиентСервер.РаспознанныйТекстСодержитПустоеЗначениеПоля(ИмяЭлемента, ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущийЭлемент = Элементы.ТаблицаДокумента Тогда
		НомерСтроки = Элементы.ТаблицаДокумента.ТекущиеДанные.НомерСтроки;
		Отбор = Новый Структура("НомерСтрокиТЧ", НомерСтроки);
		НаборДанных = Объект.РеквизитыТабличныхЧастей.НайтиСтроки(Отбор);
		Значение = Элементы.ТаблицаДокумента.ТекущиеДанные[ИмяЭлемента];
	Иначе
		НаборДанных = Объект.РеквизитыДокумента;
		Отбор = Новый Структура("ИмяЭлемента", ИмяЭлемента);
		ПодходящиеСтроки = Объект.РеквизитыДокумента.НайтиСтроки(Отбор);
		Если ПодходящиеСтроки.Количество() > 0 Тогда
			Значение = ПодходящиеСтроки[0].Значение;
		Иначе
			Значение = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеДанные = Новый Структура;
	ДополнительныеДанные.Вставить("ЮрФизЛицоПоОрганизационнойФорме", ЮрФизЛицоПоОрганизационнойФорме);
	ДополнительныеДанные.Вставить("ВидДоговора", ИсточникПоляДоговорВидДоговора);
	
	РаспознаваниеДокументовСлужебныйКлиент.ОткрытьФормуСозданияДокумента(
		ИмяЭлемента,
		НаборДанных,
		ДополнительныеДанные,
		Объект,
		ТаблицаДокумента,
		Элемент,
		Значение
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьЗначениеТаблицыСозданияНоменклатуры(Элемент) Экспорт
	
	ИмяРеквизита = СтрЗаменить(Элемент.Имя, "ПолеСписокНераспознаннойНоменклатуры" , "");
	
	РедактируемаяСтрока = СтрокаПолейНераспознаннойНоменклатурыПоИмениРеквизита(ИмяРеквизита);
	Если РедактируемаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РедактируемаяСтрока.Выбран = Истина;
	ИзменитьДоступностьКнопкиУстановкиРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииВыбораПоляНераспознаннойНоменклатуры(Элемент) Экспорт
	
	ИзменитьДоступностьКнопкиУстановкиРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница.Имя = "СтраницаГрупповоеСоздание" Тогда
		ОбновитьСтрокиНераспознаннойНоменклатуры();
	КонецЕсли;
	
	// Выделяем все строки
	Для Каждого СтрокаДобавления Из СписокНераспознаннойНоменклатуры Цикл
		Элементы.СписокНераспознаннойНоменклатуры.ВыделенныеСтроки.Добавить(СтрокаДобавления.ПолучитьИдентификатор());
	КонецЦикла;
	
	// Фокусируемся на первой строке
	Если СписокНераспознаннойНоменклатуры.Количество() Тогда
		ИдентификаторПервойСтроки = СписокНераспознаннойНоменклатуры[0].ПолучитьИдентификатор();
		Элементы.СписокНераспознаннойНоменклатуры.ТекущаяСтрока = ИдентификаторПервойСтроки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДокументаПриИзменении(Элемент)
	
	РаспознаваниеДокументовСлужебныйКлиент.ИзменитьТипДокумента(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаДокумента

&НаКлиенте
Процедура ТаблицаДокументаПриИзменении(Элемент)
	
	ПорядокСтроки = 0;
	Для Каждого Строка Из ТаблицаДокумента Цикл
		ПорядокСтроки = ПорядокСтроки + 1;
		Если Строка.ПорядокСтроки <> ПорядокСтроки Тогда
			Строка.ПорядокСтроки = ПорядокСтроки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументаПриАктивизацииЯчейки(Элемент)
	
	ПриАктивизацииЯчейкиТаблицы(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриАктивизацииЯчейкиТаблицы(Элемент)
	
	Если ТипЗнч(ТекущийЭлемент) <> Тип("ТаблицаФормы") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийВыбранныйЭлемент = Элемент.ТекущийЭлемент;
	Если ТекущийВыбранныйЭлемент = Неопределено Или Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементКолонка = Элементы[ТекущийВыбранныйЭлемент.Имя];
	ЭлементКолонка.СписокВыбора.Очистить();
	
	Отбор = Новый Структура("ИмяРеквизита, НомерСтрокиТЧ", ТекущийВыбранныйЭлемент.Имя, Элемент.ТекущиеДанные.НомерСтроки);
	НайденныеДанныеТаблицыДокумента = Объект.РеквизитыТабличныхЧастей.НайтиСтроки(Отбор);
	Если НЕ НайденныеДанныеТаблицыДокумента.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеТаблицыДокумента = НайденныеДанныеТаблицыДокумента[0];
	
	Координаты = РаспознаваниеДокументовСлужебныйКлиент.ПолучитьНаборКоординат(ДанныеТаблицыДокумента);
	ДанныеПриближения = Новый Структура("Координаты, СтрокВИзображении", Координаты, ДанныеТаблицыДокумента.СтрокВИзображении);
	ПодключитьОбработчикОжидания("Подключаемый_ПриблизитьПоКоординатам", 0.2, Истина);
	
	Отбор = Новый Структура("ИмяРеквизита, НомерСтроки", ТекущийВыбранныйЭлемент.Имя, Элемент.ТекущиеДанные.НомерСтроки);
	НайденныеСтроки = ПроблемныеЭлементы.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() Тогда
		НадписьОшибкаТЧ = Элемент.ТекущиеДанные[ТекущийВыбранныйЭлемент.Имя + "ТекстОшибки"];
	Иначе
		НадписьОшибкаТЧ = "";
	КонецЕсли;
	
	Элементы.НадписьОшибкаТЧ.Видимость = НЕ ПустаяСтрока(НадписьОшибкаТЧ);
	
	ТипЗначения = ТипЗнч(ДанныеТаблицыДокумента.Значение);
	
	ВозможныеВарианты = ЗначенияВыбораДляЯчеекТаблицыДокумента.НайтиСтроки(Отбор);
	Если ВозможныеВарианты.Количество() Тогда
		СписокДляВыбора = РаспознаваниеДокументовСлужебныйКлиент.ПолучитьЗначенияСпискаВыбора(
			ДанныеТаблицыДокумента.РаспознанныйТекст, ТипЗначения, ВозможныеВарианты[0]);
	Иначе
		СписокДляВыбора = РаспознаваниеДокументовСлужебныйКлиент.ПолучитьЗначенияСпискаВыбора(
			ДанныеТаблицыДокумента.РаспознанныйТекст, ТипЗначения, Неопределено);
	КонецЕсли;
	
	Для Каждого ДанныеВыбора Из СписокДляВыбора Цикл
		ЭлементКолонка.СписокВыбора.Добавить(ДанныеВыбора.Значение, ДанныеВыбора.Представление, , ДанныеВыбора.Картинка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриблизитьПоКоординатам()
	ПриблизитьПоКоординатам(ДанныеПриближения.Координаты, ДанныеПриближения.СтрокВИзображении);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииКолонки(Элемент)
	
	ИдентификаторСтроки = Элементы["ТаблицаДокумента"].ТекущаяСтрока;
	
	ИмяЭлемента = Элемент.Имя;
	ТекущиеДанные = Элементы["ТаблицаДокумента"].ТекущиеДанные;
	
	ПриИзмененииКолонкиНаСервере(ИмяЭлемента, ТекущиеДанные.НомерСтроки, ИдентификаторСтроки, ТекущиеДанные[ИмяЭлемента]);
	РаспознаваниеДокументовСлужебныйКлиент.ДобавитьСоответствиеРаспознаваемыхСтрок(
		Объект,
		ВариантСохраненияСоответствий,
		НаборСоответствийРаспознанныхСтрок,
		ИмяЭлемента,
		ТекущиеДанные.НомерСтроки,
		ТекущиеДанные[ИмяЭлемента]
	);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКолонкиНаСервере(ТекИмя, НомерСтрокиТаблицы, ИдентификаторСтроки, ВыбранноеЗначение)
	
	СтрокаТаблицы = ТаблицаДокумента.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Отбор = Новый Структура("ИмяРеквизита, НомерСтрокиТЧ", ТекИмя, НомерСтрокиТаблицы);
	НайденныеСтроки = Объект.РеквизитыТабличныхЧастей.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		ДополнитьРезультатОбратнойСвязи(ТекИмя, НайденныеСтроки[0], НомерСтрокиТаблицы, ВыбранноеЗначение);
		Если НЕ НайденныеСтроки[0].ЗаполненоВручную Тогда
			НайденныеСтроки[0].ЗаполненоВручную = Истина;
		КонецЕсли;
	КонецЕсли;
	
	РаспознаваниеДокументовПереопределяемый.ПриИзмененииКолонкиНаСервере(
		Объект,
		СтрокаТаблицы,
		ТекИмя,
		НомерСтрокиТаблицы,
		ВыбранноеЗначение);
	
	СохранитьИтоговыеЗначения();
	СохранитьЗначенияИзТаблицыДокумента();
	РаспознаваниеДокументовСлужебный.ПересчитатьПроблемныеЭлементы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументаПередУдалением(Элемент, Отказ)
	
	ТекущийНомерСтроки = Элемент.ТекущиеДанные.НомерСтроки;
	Отбор = Новый Структура("НомерСтроки", ТекущийНомерСтроки);
	НайденныеСтроки = ПроблемныеЭлементы.НайтиСтроки(Отбор);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ПроблемныеЭлементы.Удалить(НайденнаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументаПослеУдаления(Элемент)
	ТаблицаДокументаПослеУдаленияНаСервере();
КонецПроцедуры

&НаСервере
Процедура ТаблицаДокументаПослеУдаленияНаСервере()
	
	СохранитьИтоговыеЗначения();
	СохранитьЗначенияИзТаблицыДокумента();
	РаспознаваниеДокументовСлужебный.ПересчитатьПроблемныеЭлементы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока ИЛИ Копирование Тогда
		НоваяСтрока = Элемент.ТекущиеДанные;
		НоваяСтрока.ПорядокСтроки = ТаблицаДокумента.Количество();
		
		ЗаполнитьКлючиНовойСтроки(НоваяСтрока, МаксимальныйНомерСтроки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокНераспознаннойНоменклатуры

&НаКлиенте
Процедура СписокНераспознаннойНоменклатурыПриАктивизацииЯчейки(Элемент)
	
	Если Элементы.СписокНераспознаннойНоменклатуры.ТекущиеДанные = Неопределено
		Или Элемент.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторИсходнойСтроки = Элемент.ТекущиеДанные.ИдентификаторИсходнойСтроки;
	СтрокаТаблицыДокумента = ТаблицаДокумента.НайтиПоИдентификатору(ИдентификаторИсходнойСтроки);
	Если СтрокаТаблицыДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЭлемента = СтрЗаменить(Элемент.ТекущийЭлемент.Имя, "СписокНераспознаннойНоменклатуры", "");
	НомерСтроки = СтрокаТаблицыДокумента.НомерСтроки;
	
	ОбновлениеВыделенияРамкойПоляДокумента(ИмяЭлемента, НомерСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНераспознаннойНоменклатурыПриАктивизацииСтроки(Элемент)
	
	Для Каждого Реквизит Из ИменаКолонокНераспознаннойНоменклатуры Цикл
		Если Элементы.СписокНераспознаннойНоменклатуры.ТекущиеДанные = Неопределено Тогда
			УстановитьЗначениеДляРеквизитовБыстрогоРедактирования(Реквизит.Значение);
		Иначе
			ЗначениеЯчейки = Элементы.СписокНераспознаннойНоменклатуры.ТекущиеДанные[Реквизит.Значение];
			УстановитьЗначениеДляРеквизитовБыстрогоРедактирования(Реквизит.Значение, ЗначениеЯчейки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПожаловатьсяНаКачество(Команда)
	
	РаспознаваниеДокументовСлужебныйКлиент.ОткрытьФормуОбратнойСвязи(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРеализацияОборудование(Команда)
	ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Оборудование");
	ОткрытиеФормыДокумента("РеализацияТоваровУслуг", ВидОперации);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРеализацияОтгрузкаБезПереходаПраваСобственности(Команда)
	ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности");
	ОткрытиеФормыДокумента("РеализацияТоваровУслуг", ВидОперации);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРеализацияПродажаКомиссия(Команда)
	ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.ПродажаКомиссия");
	ОткрытиеФормыДокумента("РеализацияТоваровУслуг", ВидОперации);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРеализацияТовары(Команда)
	ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Товары");
	ОткрытиеФормыДокумента("РеализацияТоваровУслуг", ВидОперации);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРеализацияУслуги(Команда)
	ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Услуги");
	ОткрытиеФормыДокумента("РеализацияТоваровУслуг", ВидОперации);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеВПереработку(Команда)
	ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку");
	ОткрытиеФормыДокумента("ПоступлениеТоваровУслуг", ВидОперации);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеОборудование(Команда)
	ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Оборудование");
	ОткрытиеФормыДокумента("ПоступлениеТоваровУслуг", ВидОперации);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеОбъектыСтроительства(Команда)
	ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства");
	ОткрытиеФормыДокумента("ПоступлениеТоваровУслуг", ВидОперации);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеОсновныеСредства(Команда)
	ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОсновныеСредства");
	ОткрытиеФормыДокумента("ПоступлениеТоваровУслуг", ВидОперации);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеПокупкаКомиссия(Команда)
	ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия");
	ОткрытиеФормыДокумента("ПоступлениеТоваровУслуг", ВидОперации);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеТовары(Команда)
	ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Товары");
	ОткрытиеФормыДокумента("ПоступлениеТоваровУслуг", ВидОперации);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеУслуги(Команда)
	ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Услуги");
	ОткрытиеФормыДокумента("ПоступлениеТоваровУслуг", ВидОперации);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеУслугиЛизинга(Команда)
	ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.УслугиЛизинга");
	ОткрытиеФормыДокумента("ПоступлениеТоваровУслуг", ВидОперации);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеУслугиФакторинга(Команда)
	ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.УслугиФакторинга");
	ОткрытиеФормыДокумента("ПоступлениеТоваровУслуг", ВидОперации);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПриобретениеЗемельныхУчастков(Команда)
	ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОсновныеСредства");
	ОткрытиеФормыДокумента("ПоступлениеТоваровУслуг", ВидОперации);
КонецПроцедуры

&НаКлиенте
Процедура Перепроверить(Команда)
	
	КлючеваяОперация = "РаспознаваниеДокументов.Перепроверить";
	Замер = ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация);
	
	Комментарий = Новый Структура;
	Комментарий.Вставить("ИдентификаторРезультата", Объект.ИдентификаторРезультата);
	
	ОценкаПроизводительностиКлиент.УстановитьКомментарийЗамера(Замер, Комментарий);
	
	ПерепроверитьНаСервере();
	
	ОбновитьСтрокиНераспознаннойНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНоменклатуру(Команда)
	
	ПараметрыСоздаваемойНоменклатуры = Новый Массив;
	
	Для Каждого ВыбраннаяСтрока Из Элементы.СписокНераспознаннойНоменклатуры.ВыделенныеСтроки Цикл
		
		Данные = СписокНераспознаннойНоменклатуры.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
		ПараметрыСоздания = Новый Структура();
		
		Для Каждого Колонка Из ИменаКолонокНераспознаннойНоменклатуры Цикл
			ИмяКолонки = Колонка.Значение;
			ПараметрыСоздания.Вставить(ИмяКолонки, Данные[ИмяКолонки]);
		КонецЦикла;
		
		ПараметрыСоздания.Вставить("Ссылка");
		
		ПараметрыСоздаваемойНоменклатуры.Добавить(ПараметрыСоздания);
		
	КонецЦикла;
	
	ВыполнитьСозданиеНоменклатуры(ПараметрыСоздаваемойНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗначенияСтрокНераспознаннойНоменклатуры(Команда)
	
	Для Каждого РеквизитТекущихСтрок Из ПоляНераспознаннойНоменклатуры Цикл
		Если РеквизитТекущихСтрок.Выбран = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		УстановитьЗначениеДляВыделенныхСтрок(РеквизитТекущихСтрок.Значение, РеквизитТекущихСтрок.ИмяРеквизита);
		
		РеквизитТекущихСтрок.Выбран = Ложь;
	КонецЦикла;
	
	ИзменитьДоступностьКнопкиУстановкиРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВсегоНайденные(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РаспознанныйДокумент", Объект.Ссылка);
	
	ОткрытьФорму(
		"Документ.РаспознанныйДокумент.Форма.ПрикрепитьИзображениеКНайденомуДокументу",
		ПараметрыОткрытия,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаСозданныйДокументСчетФактура(Команда)
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Исходящий") Тогда
		ОткрытьСозданныйДокумент(СозданныеДокументы.СчетФактураВыданный.Ссылка);
	Иначе
		ОткрытьСозданныйДокумент(СозданныеДокументы.СчетФактураПолученный.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьСкан(Команда)
	
	ПрикрепитьСканНаСервере();
	
	СледующийДокумент();
	
КонецПроцедуры

&НаСервере
Процедура ПрикрепитьСканНаСервере()
	
	Если Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий Тогда
		Кандидат = СозданныеДокументы.Поступление.Ссылка;
		Кандидат2 = СозданныеДокументы.СчетФактураПолученный.Ссылка;
	Иначе
		Кандидат = СозданныеДокументы.Реализация.Ссылка;
		Кандидат2 = СозданныеДокументы.СчетФактураВыданный.Ссылка;
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	АдресКартинки = ПоместитьВоВременноеХранилище(ДокументОбъект.ИсходноеИзображение.Получить());
	Если ЗначениеЗаполнено(Кандидат) Тогда
		РаспознаваниеДокументовСлужебный.ДобавитьПрисоединенныйФайл(Объект, Кандидат, АдресКартинки);
		РегистрыСведений.СвязанныеОбъектыРаспознаниеДокументов.ЗаписатьЗначения(Кандидат, Объект.Ссылка, Ложь);
	КонецЕсли;
	Если ЗначениеЗаполнено(Кандидат2) Тогда
		РаспознаваниеДокументовСлужебный.ДобавитьПрисоединенныйФайл(Объект, Кандидат2, АдресКартинки);
		РегистрыСведений.СвязанныеОбъектыРаспознаниеДокументов.ЗаписатьЗначения(Кандидат2, Объект.Ссылка, Ложь);
	КонецЕсли;
	УдалитьИзВременногоХранилища(АдресКартинки);
	
	ТекущиеНастройки = РегистрыСведений.ОбщиеНастройкиРаспознаваниеДокументов.ТекущиеНастройки();
	
	РезультатОбратнойСвязи = РаспознаваниеДокументов.ОписаниеОбратнойСвязи("ПрикрепилСкан");
	Пакет = Новый Структура("created", РезультатОбратнойСвязи);
	РаспознаваниеДокументовКоннекторСлужебный.ПередатьОбратнуюСвязь(Объект.ИдентификаторРезультата, Пакет);
	
	Если ТекущиеНастройки.ПомечатьДокументОбработаннымПриПрикреаленииИзображения Тогда
		Объект.Статус = Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Обработан;
		Записать();
		
		РезультатОбратнойСвязи = РаспознаваниеДокументов.ОписаниеОбратнойСвязи("Проведен");
		Пакет = Новый Структура("created", РезультатОбратнойСвязи);
		РаспознаваниеДокументовКоннекторСлужебный.ПередатьОбратнуюСвязь(Объект.ИдентификаторРезультата, Пакет);
		
	КонецЕсли;
	
	НайтиИЗаполнитьСозданныеДокументы();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НаправлениеПриИзмененииНаСервере()
	
	ИзменитьИсточникиДляВыбораДоговора();
	СохранитьИтоговыеЗначения();
	СохранитьЗначенияИзТаблицыДокумента();
	РаспознаваниеДокументовСлужебный.ПересчитатьПроблемныеЭлементы(ЭтотОбъект);
	НайтиИЗаполнитьСозданныеДокументы();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьПоФункциональнымОпциям()
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
		Элементы.ГруппаДоговор.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладовБухгалтерскийУчет") Тогда
		Элементы.ГруппаСклад.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросОСозданииДокумента(ТипДокументаСтрокой, ВидОперации)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ТипДокументаСтрокой", ТипДокументаСтрокой);
	ДополнительныеПараметры.Вставить("ВидОперации", ВидОперации);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолученРезультатОтветаНаВопрос", ЭтаФорма, ДополнительныеПараметры);
	
	СписокОбъектов = Новый СписокЗначений();
	СписокОбъектов.ЗагрузитьЗначения(ПолучитьСозданныеДокументыИзТекущего());
	
	ПараметрыФормы = Новый Структура("СписокОбъектов", СписокОбъектов);
	
	ОткрытьФорму("ОбщаяФорма.ВопросПриНаличииИмеющихсяДокументовБРД", ПараметрыФормы, ЭтаФорма,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСозданныеДокументыИзТекущего()
	
	СвязанныеДокументы = РегистрыСведений.СвязанныеОбъектыРаспознаниеДокументов.ВсеСвязанныеДокументы(Объект.Ссылка);
	Возврат СвязанныеДокументы.ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаКлиенте
Процедура СледующийДокумент()
	
	Результат = НайтиДокумент(Истина);
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Результат = НайтиДокумент(Ложь);
	КонецЕсли;
	
	ПерейтиНаДокумент(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаДокумент(Результат)
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ИмяФормыОбработчика = РаспознаваниеДокументовСлужебныйКлиентПовтИсп.ПолучитьИмяОткрываемойФормыПоТипу(Результат.ТипДокумента);
		Если НЕ ПустаяСтрока(ИмяФормыОбработчика) Тогда
			ПараметрыФормы = Новый Структура("Ключ", Результат.Ссылка);
			ОткрытьФорму(ИмяФормыОбработчика, ПараметрыФормы);
		КонецЕсли;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Функция НайтиДокумент(Следующий)
	
	ОтборДата = Ложь;
	ОтборОрганизация = Ложь;
	ОтборКонтрагент = Ложь;
	
	Если ЗначениеЗаполнено(Параметры.ОтборИзСписка) Тогда 
		
		Если ЗначениеЗаполнено(Параметры.ОтборИзСписка.ТекущаяДата) Тогда 
			
			ОтборДата = Истина;
			
			Если Параметры.ОтборИзСписка.ТекущаяДатаПериод = "День" Тогда
				НачалоПериода = НачалоДня(Параметры.ОтборИзСписка.ТекущаяДата);
				КонецПериода = КонецДня(Параметры.ОтборИзСписка.ТекущаяДата);
			ИначеЕсли Параметры.ОтборИзСписка.ТекущаяДатаПериод = "Месяц" Тогда
				НачалоПериода = НачалоМесяца(Параметры.ОтборИзСписка.ТекущаяДата);
				КонецПериода = КонецМесяца(Параметры.ОтборИзСписка.ТекущаяДата);
			КонецЕсли;
			
		КонецЕсли;
		
		ОтборОрганизация = ЗначениеЗаполнено(Параметры.ОтборИзСписка.ТекущаяОрганизация);
		ОтборКонтрагент = ЗначениеЗаполнено(Параметры.ОтборИзСписка.ТекущийКонтрагент);
		
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	РаспознанныйДокумент.Ссылка КАК Ссылка,
		|	РаспознанныйДокумент.ТипДокумента КАК ТипДокумента
		|ИЗ
		|	Документ.РаспознанныйДокумент КАК РаспознанныйДокумент
		|ГДЕ
		|	(РаспознанныйДокумент.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Новый)
		|			ИЛИ РаспознанныйДокумент.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Изменен))
		|	И НЕ РаспознанныйДокумент.ПометкаУдаления
		|	И РаспознанныйДокумент.Дата < &Дата
		|	И РаспознанныйДокумент.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И РаспознанныйДокумент.Контрагент = &Контрагент
		|	И РаспознанныйДокумент.Организация = &Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	РаспознанныйДокумент.МоментВремени УБЫВ";
	
	Если Следующий Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " УБЫВ", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "<", ">=");
	КонецЕсли;
	
	Если ОтборДата Тогда
		Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
		Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РаспознанныйДокумент.Дата МЕЖДУ &НачалоПериода И &КонецПериода", "");
	КонецЕсли;
	
	Если ОтборОрганизация Тогда
		Запрос.УстановитьПараметр("Организация", Параметры.ОтборИзСписка.ТекущаяОрганизация);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РаспознанныйДокумент.Организация = &Организация", "");
	КонецЕсли;
	
	Если ОтборКонтрагент Тогда
		Запрос.УстановитьПараметр("Контрагент", Параметры.ОтборИзСписка.ТекущийКонтрагент);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РаспознанныйДокумент.Контрагент = &Контрагент", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Новый Структура("Ссылка, ТипДокумента");
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		Возврат Результат;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПолученРезультатОтветаНаВопрос(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбработатьСозданиеНовогоДокумента(ДополнительныеПараметры.ВидОперации, ДополнительныеПараметры.ТипДокументаСтрокой);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриблизитьПоКоординатам(Координаты, СтрокВИзображении)
	
	Если НЕ ИспользуетсяВстроенныйIE И HTMLДокументСформирован Тогда
		Если РаспознаваниеДокументовКлиентСервер.ВсеКоординатыНулевые(Координаты) Тогда
			Элементы.ПолеПросмотра.Документ.defaultView.clean_bbox();
		Иначе
			Элементы.ПолеПросмотра.Документ.defaultView.zoom_to_bbox(Координаты[0], Координаты[1], Координаты[2], Координаты[3], СтрокВИзображении);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАдресаКартинок()
	
	Для Каждого ДанныеРеквизита Из Объект.РеквизитыДокумента Цикл
		Если РаспознаваниеДокументовКлиентСервер.ВсеКоординатыНулевые(ДанныеРеквизита) Тогда
			Картинка = Неопределено;
		Иначе
			ИдентификаторРеквизита = ДанныеРеквизита.ИсходныйНомерСтроки - 1;
			Картинка = Объект.Ссылка.РеквизитыДокумента.Получить(ИдентификаторРеквизита).ОбластьИзображения.Получить();
		КонецЕсли;
		АдресТекущейКартинки = ПоместитьВоВременноеХранилище(Картинка, УникальныйИдентификатор);
		ДанныеРеквизита.АдресКартинки = АдресТекущейКартинки;
	КонецЦикла;
	
	Для Каждого ДанныеРеквизита Из Объект.РеквизитыТабличныхЧастей Цикл
		Если РаспознаваниеДокументовКлиентСервер.ВсеКоординатыНулевые(ДанныеРеквизита) Тогда
			Картинка = Неопределено;
		Иначе
			ИдентификаторРеквизита = ДанныеРеквизита.ИсходныйНомерСтроки - 1;
			Картинка = Объект.Ссылка.РеквизитыТабличныхЧастей.Получить(ИдентификаторРеквизита).ОбластьИзображения.Получить();
		КонецЕсли;
		АдресТекущейКартинки = ПоместитьВоВременноеХранилище(Картинка, УникальныйИдентификатор);
		ДанныеРеквизита.АдресКартинки = АдресТекущейКартинки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьИзображенияРеквизитов(Настройки, Родитель = Неопределено, ГруппаРеквизита = Неопределено)
	
	Если Родитель = Неопределено Тогда
		Родитель = Элементы.ГруппаРеквизиты;
	КонецЕсли;
	
	СоответствиеПолейИГрупп = Новый Соответствие;
	
	Для Каждого Поле Из Родитель.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Поле) = Тип("ГруппаФормы") Тогда
			ДобавитьИзображенияРеквизитов(Поле, ГруппаРеквизита);
			Продолжить;
		ИначеЕсли НЕ ТипЗнч(Поле) = Тип("ПолеФормы") Тогда
			Продолжить;
		КонецЕсли;
		
		ГруппаРеквизита = Элементы.Добавить("Группа" + Поле.Имя, Тип("ГруппаФормы"), Поле.Родитель);
		ГруппаРеквизита.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаРеквизита.ОтображатьЗаголовок = Ложь;
		СоответствиеПолейИГрупп.Вставить(Поле, ГруппаРеквизита);
		
	КонецЦикла;
	
	Для Каждого ДанныеСоответствия Из СоответствиеПолейИГрупп Цикл
		Элементы.Переместить(ДанныеСоответствия.Ключ, ДанныеСоответствия.Значение);
		ОтобразитьСвязаннуюКартинку(ДанныеСоответствия);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСвязаннуюКартинку(ДанныеСоответствия)
	
	Путь = ДанныеСоответствия.Ключ.ПутьКДанным;
	НачалоИдентификатора = СтрНайти(Путь, "[") ;
	Если НЕ НачалоИдентификатора Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторРеквизита = Сред(Путь, НачалоИдентификатора + 1, СтрНайти(Путь, "]") - НачалоИдентификатора + 1);
	ОписаниеЧисла = Новый ОписаниеТипов("Число");
	ИдентификаторРеквизита = ОписаниеЧисла.ПривестиЗначение(ИдентификаторРеквизита);
	
	ПолеКартинки = Элементы.Добавить("КартинкаРеквизита" + ИдентификаторРеквизита, Тип("ПолеФормы"), ДанныеСоответствия.Значение);
	ПолеКартинки.Вид = ВидПоляФормы.ПолеКартинки;
	ПолеКартинки.Высота = Объект.РеквизитыДокумента[ИдентификаторРеквизита].СтрокВИзображении;
	ПолеКартинки.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеКартинки.РазмерКартинки = РазмерКартинки.Пропорционально;
	ПолеКартинки.РастягиватьПоВертикали = Ложь;
	ПолеКартинки.АвтоМаксимальнаяВысота = Ложь;
	ПолеКартинки.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
	ПолеКартинки.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
	ПолеКартинки.ПутьКДанным = "Объект.РеквизитыДокумента[" + ИдентификаторРеквизита + "].АдресКартинки";
	
КонецПроцедуры

&НаСервере
Процедура НастроитьКолонкиТаблицы()
	
	ДобавляемыеРеквизиты = Новый Массив;
	НастроитьКолонкиРекурсивно(ДобавляемыеРеквизиты, Элементы.ТаблицаДокумента);
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьКолонкиРекурсивно(ДобавляемыеРеквизиты, ЭлементыОбхода)
	
	Для Каждого ЭлементКолонка Из ЭлементыОбхода.ПодчиненныеЭлементы Цикл
		Если ЭлементКолонка.Вид = ВидГруппыФормы.ГруппаКолонок Тогда
			НастроитьКолонкиРекурсивно(ДобавляемыеРеквизиты, ЭлементКолонка);
		ИначеЕсли ЭлементКолонка.Вид = ВидПоляФормы.ПолеВвода Тогда
			ЭлементКолонка.ВыбиратьТип = Ложь;
			ЭлементКолонка.БыстрыйВыбор = Ложь;
			ЭлементКолонка.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
			ЭлементКолонка.УстановитьДействие("ОбработкаВыбора", "Подключаемый_ОбработкаВыбораПоля");
			ЭлементКолонка.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииКолонки");
			
			Если ЭлементКолонка.Имя <> "ТаблицаДокументаПорядокСтроки" Тогда
				НовыйРеквизит = Новый РеквизитФормы(ЭлементКолонка.Имя+"ТекстОшибки", Новый ОписаниеТипов("Строка"));
				НовыйРеквизит.Путь = "ТаблицаДокумента";
				ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуДокумента()
	
	ТаблицаДокументаТЗ = РаспознаваниеДокументовСлужебный.ЗаполненнаяТаблицаДокумента(Объект);
	ТаблицаДокумента.Загрузить(ТаблицаДокументаТЗ);
	Если Объект.РеквизитыТабличныхЧастей.Количество() = 0 Тогда
		// РеквизитыТабличныхЧастей.Количество() = 0 - значит таблицы никогда не было, в ней нет колонок и
		// РаспознаваниеДокументовСлужебный.ЗаполненнаяТаблицаДокумента не сможет создать колонки
		НоваяСтрока = ТаблицаДокумента.Добавить();
		НоваяСтрока.ПорядокСтроки = 1;
		
		ЗаполнитьКлючиНовойСтроки(НоваяСтрока, МаксимальныйНомерСтроки);
		РаспознаваниеДокументовСлужебный.СохранитьТаблицуДокумента(Объект, ТаблицаДокумента.Выгрузить());
	КонецЕсли;
	
	Для Каждого Запись Из Объект.РеквизитыТабличныхЧастей Цикл
		Если Запись.СтрокаУдалена Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура("НомерСтроки", Запись.НомерСтрокиТЧ);
		ИзменяемыеСтроки = ТаблицаДокумента.НайтиСтроки(Отбор);
		
		Если НЕ ИзменяемыеСтроки.Количество() Тогда
			// FIXME: строки должны быть заполнены в РаспознаваниеДокументовСлужебный.ЗаполнитьТаблицуДокумента
			// и эта ветка больше не используется. Удалить
			ИзменяемаяСтрока = ТаблицаДокумента.Добавить();
			ИзменяемаяСтрока.НомерСтроки = Запись.НомерСтрокиТЧ;
		Иначе
			ИзменяемаяСтрока = ИзменяемыеСтроки[0];
		КонецЕсли;
		
		Если Запись.ИмяРеквизита = "Номенклатура" Тогда
			НомерСтрокиТаблицы = Запись.НомерСтрокиТЧ;
			ВыбранноеЗначение = ИзменяемаяСтрока[Запись.ИмяРеквизита];
			
			РаспознаваниеДокументовПереопределяемый.ПриИзмененииКолонкиНаСервере(
				Объект,
				ИзменяемаяСтрока,
				Запись.ИмяРеквизита,
				НомерСтрокиТаблицы,
				ВыбранноеЗначение);
			
			Элемент = УсловноеОформление.Элементы.Добавить();
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Номенклатура");
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДокумента.НомерСтроки");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = ИзменяемаяСтрока.НомерСтроки;
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДокумента.Номенклатура");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(255, 0, 0));
			Элемент.Оформление.УстановитьЗначениеПараметра("Текст", СтрШаблон(НСтр("ru = 'Не сопоставлен: %1'"), Запись.РаспознанныйТекст));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьКлючиНовойСтроки(НоваяСтрока, МаксимальныйНомерСтроки)
	
	МаксимальныйНомерСтроки = МаксимальныйНомерСтроки + 1;
	НоваяСтрока.НомерСтроки = МаксимальныйНомерСтроки;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыПоРеквизитам()
	
	ДанныеДляВыбораРеквизитов = РаспознаваниеДокументовСлужебный.ПолучитьДанныеДляСпискаВыбора(Объект.Ссылка);
	АдресЗначенияВыбораДляШапки = ПоместитьВоВременноеХранилище(ДанныеДляВыбораРеквизитов, УникальныйИдентификатор);
	
	Для Каждого РеквизитШапки Из Объект.РеквизитыДокумента Цикл
		
		Если ПустаяСтрока(РеквизитШапки.ИмяЭлемента) Тогда // Реквизит не отображается на форме
			Продолжить;
		КонецЕсли;
		
		Если Объект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг Тогда
			Если РеквизитШапки.ИмяЭлемента = "Склад" Тогда
				Элементы["Группа"+РеквизитШапки.ИмяЭлемента].Видимость = Ложь;
				Продолжить;
			ИначеЕсли РеквизитШапки.ИмяЭлемента = "Грузоотправитель"
				ИЛИ РеквизитШапки.ИмяЭлемента = "Грузополучатель" Тогда
				
				Элементы.ГруппаГрузоотправительИГрузополучатель.Видимость = Ложь;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ИзменяемыйЭлемент = Элементы[РеквизитШапки.ИмяЭлемента];
		Если РеквизитШапки.ИмяЭлемента = "Склад" Тогда
			НастроитьСвойстваЭлементаРеквизита(ИзменяемыйЭлемент, Истина);
		Иначе
			НастроитьСвойстваЭлементаРеквизита(ИзменяемыйЭлемент);
		КонецЕсли;
		
		ИзменяемыйЭлемент.Подсказка = Неопределено;
		РаспознанныйТекст = РеквизитШапки.РаспознанныйТекст;
		
		Если РеквизитШапки.ИмяЭлемента = "СуммаВключаетНДС" Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоПримитивныйТип = РаспознаваниеДокументовКлиентСервер.ЭтоПримитивныйТип(ТипЗнч(РеквизитШапки.Значение));
		Если НЕ РеквизитШапки.ИмяЭлемента = "Склад" И НЕ РеквизитШапки.ИмяЭлемента = "Договор" Тогда
			Отбор = Новый Структура("ИмяРеквизита", РеквизитШапки.ИмяРеквизита);
			ПодходящиеЗначения = ДанныеДляВыбораРеквизитов.НайтиСтроки(Отбор);
			
			Если РеквизитШапки.ИмяЭлемента = "ПродавецОрганизация"
				Или РеквизитШапки.ИмяЭлемента = "ПокупательОрганизация"
				Или РеквизитШапки.ИмяЭлемента = "Исполнитель"
				Или ЭтоПримитивныйТип Тогда
				
				КартинкаСоздание = 2;
			Иначе
				КартинкаСоздание = 1;
			КонецЕсли;
			
			Если Не РаспознаваниеДокументовКлиентСервер.РаспознанныйТекстСодержитПустоеЗначениеПоля(РеквизитШапки.ИмяЭлемента, РаспознанныйТекст) Тогда
				СписокДляВыбора = РаспознаваниеДокументовСлужебныйКлиентСервер.ПолучитьСписокДляВыбораПользователем(РаспознанныйТекст, ПодходящиеЗначения, КартинкаСоздание);
				ИзменяемыйЭлемент.СписокВыбора.Очистить();
				Для Каждого ДанныеВыбора Из СписокДляВыбора Цикл
					Если ТипЗнч(ДанныеВыбора.Значение) = Тип("Структура") Тогда
						ИзменяемыйЭлемент.СписокВыбора.Добавить(ДанныеВыбора.Значение.Значение, ДанныеВыбора.Представление, , ДанныеВыбора.Картинка);
					Иначе
						Если ЭтоПримитивныйТип Тогда
							ИзменяемыйЭлемент.СписокВыбора.Добавить(ДанныеВыбора.Значение, ДанныеВыбора.Представление);
						Иначе
							ИзменяемыйЭлемент.СписокВыбора.Добавить(ДанныеВыбора.Значение, ДанныеВыбора.Представление, , ДанныеВыбора.Картинка);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(РеквизитШапки.Значение) Тогда
			Если РеквизитШапки.ИмяЭлемента = "Грузоотправитель" Тогда
				// Устанавливаем "Он же" и блокируем "Другой"
				ГрузоотправительОнЖе = 1;
				Элементы.Грузоотправитель.Доступность = Ложь;
				Продолжить;
			ИначеЕсли РеквизитШапки.ИмяЭлемента = "Грузополучатель" Тогда
				// Устанавливаем "Он же" и блокируем "Другой"
				ГрузополучательОнЖе = 1;
				Элементы.Грузополучатель.Доступность = Ложь;
				Продолжить;
			КонецЕсли;
			
			Если РеквизитШапки.ИмяЭлемента <> "ИтогоСумма" И РеквизитШапки.ИмяЭлемента <> "ИтогоСуммаНДС"
				И РеквизитШапки.ИмяЭлемента <> "ИтогоВсего" И РеквизитШапки.ИмяЭлемента <> "Склад" Тогда
				
				ИзменяемыйЭлемент.ПодсказкаВвода = СтрШаблон(НСтр("ru = 'Не сопоставлен: %1'"), РаспознанныйТекст);
			ИначеЕсли РеквизитШапки.ИмяЭлемента = "Склад" Тогда
				// Склад пользователя
				Если Не ЗначениеЗаполнено(РеквизитШапки.Значение) Тогда
					СкладПоУмолчанию = РаспознаваниеДокументовПереопределяемый.ПолучитьСкладПоУмолчанию();
					Если Не СкладПоУмолчанию = Неопределено Тогда
						РеквизитШапки.Значение = СкладПоУмолчанию;
						Модифицированность = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСвойстваЭлементаРеквизита(ИзменяемыйЭлемент, РазрешитьБыстрыйВыбор = Ложь)
	
	ИзменяемыйЭлемент.БыстрыйВыбор = РазрешитьБыстрыйВыбор;
	ИзменяемыйЭлемент.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	ИзменяемыйЭлемент.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
	ИзменяемыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииПоля");
	ИзменяемыйЭлемент.УстановитьДействие("АвтоПодбор", "Подключаемый_АвтоПодборПоля");
	ИзменяемыйЭлемент.УстановитьДействие("ОбработкаВыбора", "Подключаемый_ОбработкаВыбораПоля");
	Если РазрешитьБыстрыйВыбор Тогда
		ИзменяемыйЭлемент.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбораПоля");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьСоответствиеРеквизитовЭлементам()
	
	Для Каждого РеквизитДокумента Из Объект.РеквизитыДокумента Цикл
		Идентификатор = РеквизитДокумента.ПолучитьИдентификатор();
		ПутьКДанным = "Объект.РеквизитыДокумента[" + Идентификатор + "].Значение";
		
		Для Каждого ПроверяемыйЭлемент Из Элементы Цикл
			Если ТипЗнч(ПроверяемыйЭлемент) = Тип("ПолеФормы") И ПроверяемыйЭлемент.ПутьКДанным = ПутьКДанным Тогда
				РеквизитДокумента.ИмяЭлемента = ПроверяемыйЭлемент.Имя;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОтображениеПоТипуДокумента()
	
	Элементы.Продавец.Видимость = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий);
	Элементы.Покупатель.Видимость = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий);
	
	Элементы.ПродавецОрганизация.Видимость = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий);
	Элементы.ПокупательОрганизация.Видимость = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий);
	
	Если Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий Тогда
		ИмяСтруктурыСФ = "СчетФактураВыданный";
		ИмяСтруктурыДок = "Реализация";
	Иначе
		ИмяСтруктурыСФ = "СчетФактураПолученный";
		ИмяСтруктурыДок = "Поступление";
	КонецЕсли;
	
	Если Объект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
		ИЛИ Объект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура Тогда
		
		Элементы.ГруппаКнопкиПоступление.Видимость = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий);
		Элементы.ГруппаКнопкиРеализация.Видимость = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий);
		
		// FIXME: Временно разрешаем создавать счет-фактуру командой для любого документа.
		//Если (НЕ ЗначениеЗаполнено(СозданныеДокументы[ИмяСтруктурыСФ].Ссылка)
		//	И ЗначениеЗаполнено(СозданныеДокументы[ИмяСтруктурыДок].Ссылка)) Или
		//		Объект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура Тогда
		//	Элементы.КнопкаСоздатьСчетФактуру.Видимость = Истина;
		//Иначе
		//	Элементы.КнопкаСоздатьСчетФактуру.Видимость = Ложь;
		//КонецЕсли;
	ИначеЕсли Объект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.ТОРГ12
		ИЛИ Объект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг Тогда
		
		Элементы.ГруппаКнопкиПоступление.Видимость = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий);
		Элементы.ГруппаКнопкиРеализация.Видимость = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьИсточникиДляВыбораДоговора(ПерезаполнитьДоговор = Истина)
	
	ЗаполнитьИсточникиДляВыбораДоговора();
	Элементы.Договор.Доступность = ЗначениеЗаполнено(ИсточникПоляДоговорОрганизация) И ЗначениеЗаполнено(ИсточникПоляДоговорКонтрагент);
	Если ПерезаполнитьДоговор Тогда
		РаспознаваниеДокументовСлужебный.ЗаполнитьДоговорКонтрагента(Объект);
	КонецЕсли;
	
	ИзменитьОтображениеПоТипуДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсточникиДляВыбораДоговора()
	
	ПараметрыВыбораДоговора = РаспознаваниеДокументовСлужебный.ПараметрыВыбораДоговора(Объект);
	ИсточникПоляДоговорВидДоговора = ПараметрыВыбораДоговора.ВидыДоговоров[0];
	ИсточникПоляДоговорКонтрагент = ПараметрыВыбораДоговора.Контрагент;
	ИсточникПоляДоговорОрганизация = ПараметрыВыбораДоговора.Организация;
	
	Элементы.ГрузополучательКонтрагент.Видимость = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий);
	Элементы.ГрузополучательОрганизация.Видимость = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий);
	Элементы.ГрузоотправительКонтрагент.Видимость = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий);
	Элементы.ГрузоотправительОрганизация.Видимость = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВариантыВыбораДляЗначенийТаблицы()
	
	Результат = РаспознаваниеДокументовСлужебный.ЗначенияВыбораЗначенийТаблицыДокумента(Объект.Ссылка);
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ДанныеВыбора Из Результат Цикл
		Отбор = Новый Структура("ИмяРеквизита, НомерСтроки", ДанныеВыбора.ИмяРеквизита, ДанныеВыбора.НомерСтроки);
		
		НайденныеСтроки = ЗначенияВыбораДляЯчеекТаблицыДокумента.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() Тогда
			ИзменяемаяСтрока = НайденныеСтроки[0];
		Иначе
			ИзменяемаяСтрока = ЗначенияВыбораДляЯчеекТаблицыДокумента.Добавить();
			ИзменяемаяСтрока.ИмяРеквизита = ДанныеВыбора.ИмяРеквизита;
			ИзменяемаяСтрока.НомерСтроки = ДанныеВыбора.НомерСтроки;
		КонецЕсли;
		
		ВариантВыбора = ИзменяемаяСтрока.ЗначенияВыбора.Добавить();
		ВариантВыбора.Значение = ДанныеВыбора.Значение;
		ВариантВыбора.ДополнительноеЗначение = ДанныеВыбора.ДополнительноеЗначение;
		ВариантВыбора.Уверенность = ДанныеВыбора.Уверенность;
		ВариантВыбора.НайденВТаблицеСоответствий = ДанныеВыбора.НайденВТаблицеСоответствий;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытиеФормыДокумента(ТипДокументаСтрокой, ВидОперации)
	
	Если ТипДокументаСтрокой = "РеализацияТоваровУслуг" Тогда
		СвязанныйДокумент = СозданныеДокументы.Реализация.Ссылка;
	ИначеЕсли ТипДокументаСтрокой = "ПоступлениеТоваровУслуг" Тогда
		СвязанныйДокумент = СозданныеДокументы.Поступление.Ссылка;
	КонецЕсли;
	
	Если ПолучитьСозданныеДокументыИзТекущего().Количество() Тогда
		ЗадатьВопросОСозданииДокумента(ТипДокументаСтрокой, ВидОперации);
		Возврат;
	КонецЕсли;
	
	ОбработатьСозданиеНовогоДокумента(ВидОперации, ТипДокументаСтрокой);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСозданиеНовогоДокумента(ВидОперации, ТипДокументаСтрокой)
	
	ПараметрыЗаполнения = ПолучитьПараметрыОткрытияФормы(ВидОперации, ТипДокументаСтрокой);
	
	// Запрет редактирования
	ДатаДокумента = Объект.РеквизитыДокумента[1].Значение;
	РедактированиеЗапрещено = ЗапрещеноСозданиеДокументаВЗакрытомПериоде(ТипДокументаСтрокой, ДатаДокумента);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ТипДокументаСтрокой", ТипДокументаСтрокой);
	ДополнительныеПараметры.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВопросаСменыДаты", ЭтотОбъект, ДополнительныеПараметры);
	
	Если РедактированиеЗапрещено Тогда
		ТекстВопроса = НСтр("ru = 'Дата документа находится в закрытом периоде.
		|Изменить дату документа на текущую?'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	Иначе
		СоздатьДокументПоПараметрам(ТипДокументаСтрокой, ПараметрыЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапрещеноСозданиеДокументаВЗакрытомПериоде(Знач ТипДокументаСтрокой, Знач ДатаДокумента)
	
	ПроверяемыйДокумент = Документы[ТипДокументаСтрокой].СоздатьДокумент();
	ПроверяемыйДокумент.Дата = ДатаДокумента;
	РедактированиеЗапрещено = ДатыЗапретаИзменения.ИзменениеЗапрещено(ПроверяемыйДокумент);
	
	Возврат РедактированиеЗапрещено;
	
КонецФункции

&НаКлиенте
Процедура ЗавершениеВопросаСменыДаты(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = ДополнительныеПараметры.ПараметрыЗаполнения;
	ПараметрыЗаполнения.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	СоздатьДокументПоПараметрам(ДополнительныеПараметры.ТипДокументаСтрокой, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументПоПараметрам(ТипДокументаСтрокой, ПараметрыЗаполнения)
	
	Результат = СоздатьДокумент(ТипДокументаСтрокой, ПараметрыЗаполнения);
	СозданныйДокумент = Результат.СоздаваемыйДокумент;
	
	Если СозданныйДокумент <> Неопределено Тогда
		ОповеститьОбИзменении(Объект.Ссылка);
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(СозданныйДокумент);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Создан документ'"), НавигационнаяСсылка, Строка(СозданныйДокумент));
		Оповестить("РаспознанныйДокумент_СтатусОбработан", , СозданныйДокумент);
		
		Если Результат.УдалосьПровести Тогда
			СледующийДокумент();
		Иначе
			ПоказатьЗначение(, СозданныйДокумент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьДокумент(ТипДокументаСтрокой, ПараметрыЗаполнения)
	
	КлючеваяОперация = "РаспознаваниеДокументов.СоздатьДокумент";
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	
	УдалосьПровести = Ложь;
	
	СохранитьЗначенияПередЗаписью();
	ОбъектИзФормы = РеквизитФормыВЗначение("Объект");
	
	НачатьТранзакцию();
	Попытка
		// Изменения в документе "Распознанный документ"
		Модифицированность = Ложь;
		ОбъектИзФормы.Статус = Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Обработан;
		ОбъектИзФормы.Записать();
		
		СоздаваемыйДокумент = РаспознаваниеДокументовСлужебный.СоздатьДокументНаОснованииРаспознанного(Объект.Ссылка, ТипДокументаСтрокой, ПараметрыЗаполнения);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Ошибка создания документа:'") + Символы.ПС
			+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Сообщение.Сообщить();
		
		Результат = Новый Структура;
		Результат.Вставить("СоздаваемыйДокумент", СоздаваемыйДокумент);
		Результат.Вставить("УдалосьПровести", УдалосьПровести);
		
		Возврат Результат;
		
	КонецПопытки;
	
	ЗначениеВРеквизитФормы(ОбъектИзФормы, "Объект");
	
	Попытка
		СоздаваемыйДокументОбъект = СоздаваемыйДокумент.ПолучитьОбъект();
		
		Если Не СоздаваемыйДокументОбъект.ПроверитьЗаполнение() Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка проверки заполнения основного документа.'");
		КонецЕсли;
		
		РаспознаваниеДокументовПереопределяемый.ПриПроведенииДокументаНаОснованииРаспознанного(СоздаваемыйДокументОбъект);
		
		СоздаваемыйДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		УдалосьПровести = Истина;
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Ошибка проведения основного документа:'") + Символы.ПС
			+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Сообщение.Сообщить();
	КонецПопытки;
	
	СохранитьСоответствиеРеквизитовЭлементам();
	
	РаспознаваниеДокументовСлужебный.ДобавитьПрисоединенныйФайл(Объект, СоздаваемыйДокумент, АдресКартинки);
	
	Если СоздатьСчетФактуру Тогда
		СчетФактураСсылка = СоздатьСчетФактуруПоПараметрам(СоздаваемыйДокумент, ТипДокументаСтрокой, ПараметрыЗаполнения);
		Если СчетФактураСсылка = Неопределено Тогда 
			УдалосьПровести = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	НайтиИЗаполнитьСозданныеДокументы();
	
	ДанныеСозданногоДокумента = ПолучитьОбратнуюСвязьДляСозданногоДокумента(СоздаваемыйДокумент);
	
	Пакет = Новый Структура;
	Пакет.Вставить("created", ДанныеСозданногоДокумента);
	
	РаспознаваниеДокументовКоннекторСлужебный.ПередатьОбратнуюСвязь(Объект.ИдентификаторРезультата, Пакет);
	
	Пакет = Новый Структура;
	Пакет.Вставить("diff", РезультатОбратнойСвязи);
	
	РаспознаваниеДокументовКоннекторСлужебный.ПередатьОбратнуюСвязь(Объект.ИдентификаторРезультата, Пакет);
	
	РезультатОбратнойСвязи = Новый Структура;
	
	Комментарий = Новый Структура;
	Комментарий.Вставить("ИдентификаторРезультата", Объект.ИдентификаторРезультата);
	Комментарий.Вставить("УдалосьПровести", УдалосьПровести);
	Комментарий.Вставить("ТипДокумента", ТипДокументаСтрокой);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала, , Комментарий);
	
	Результат = Новый Структура;
	Результат.Вставить("СоздаваемыйДокумент", СоздаваемыйДокумент);
	Результат.Вставить("УдалосьПровести", УдалосьПровести);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьОбратнуюСвязьДляСозданногоДокумента(СоздаваемыйДокумент)
	
	Результат = РаспознаваниеДокументов.ОписаниеОбратнойСвязи("Проведен");
	Результат.IdСозданногоДокумента = Строка(СоздаваемыйДокумент.УникальныйИдентификатор());
	Результат.НомерРаспознанногоДокумента = Объект.Номер;
	Результат.ЭтоВходящийДокумент = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий);
	Результат.НомерДокумента = Объект.РеквизитыДокумента[0].Значение;
	Результат.ДатаДокумента = Объект.РеквизитыДокумента[1].Значение;
	Результат.СуммаДокумента = ИтогоВсего;
	Результат.Контрагент = РаспознаваниеДокументов.УбратьОрганизационнуюФорму(ИсточникПоляДоговорКонтрагент);
	Результат.Организация = РаспознаваниеДокументов.УбратьОрганизационнуюФорму(ИсточникПоляДоговорОрганизация);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СоздатьСчетФактуруПоПараметрам(ОснованиеСчетаФактуры, ТипДокументаСтрокой, ПараметрыЗаполнения)
	
	СчетФактураСсылка = Неопределено;
	
	НачатьТранзакцию();
	Попытка
		
		ПараметрыСоздания = Новый Структура;
		ПараметрыСоздания.Вставить("ТипДокументаСтрокой", ТипДокументаСтрокой);
		ПараметрыСоздания.Вставить("Основание", ОснованиеСчетаФактуры);
		ПараметрыСоздания.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения);
		
		РаспознаваниеДокументовПереопределяемый.ПриСозданииСчетФактуры(ПараметрыСоздания, СчетФактураСсылка);
		
		Если СчетФактураСсылка <> Неопределено Тогда
			РегистрыСведений.СвязанныеОбъектыРаспознаниеДокументов.ЗаписатьЗначения(СчетФактураСсылка, Объект.Ссылка, Ложь);
			РаспознаваниеДокументовСлужебный.ДобавитьПрисоединенныйФайл(Объект, СчетФактураСсылка, АдресКартинки)
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Ошибка создания счета-фактуры:'") + Символы.ПС
			+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Сообщение.Сообщить();
		
		Возврат Неопределено;
	КонецПопытки;
	
	НайтиИЗаполнитьСозданныеДокументы();
	
	Возврат СчетФактураСсылка;
	
КонецФункции

&НаКлиенте
Процедура СоздатьСчетФактуру(Команда)
	
	Покупатель = Объект.РеквизитыДокумента[3].Значение;
	Продавец = Объект.РеквизитыДокумента[2].Значение;
	
	ОрганизацияПокупатель = Объект.РеквизитыДокумента[9].Значение;
	ОрганизацияПродавец = Объект.РеквизитыДокумента[8].Значение;
	
	ПараметрыЗаполнения = Новый Структура;
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Исходящий") Тогда
		ПараметрыЗаполнения.Вставить("Контрагент", Покупатель);
		ПараметрыЗаполнения.Вставить("Организация", ОрганизацияПродавец);
		
		ОснованиеСчетаФактуры = СозданныеДокументы.Реализация.Ссылка;
		ТипДокументаСтрокой = "РеализацияТоваровУслуг";
	Иначе
		ПараметрыЗаполнения.Вставить("Контрагент", Продавец);
		ПараметрыЗаполнения.Вставить("Организация", ОрганизацияПокупатель);
		
		ОснованиеСчетаФактуры = СозданныеДокументы.Поступление.Ссылка;
		ТипДокументаСтрокой = "ПоступлениеТоваровУслуг";
	КонецЕсли;
	
	ИмяРеквизитаНомерДокумента = ?(ОснованиеСчетаФактуры = Неопределено, "Номер", "НомерВходящегоДокумента");
	ИмяРеквизитаДатаДокумента = ?(ОснованиеСчетаФактуры = Неопределено, "Дата", "ДатаВходящегоДокумента");
	
	ПараметрыЗаполнения.Вставить(ИмяРеквизитаНомерДокумента, Объект.РеквизитыДокумента[0].Значение);
	ПараметрыЗаполнения.Вставить(ИмяРеквизитаДатаДокумента, Объект.РеквизитыДокумента[1].Значение);
	
	ОпределениеДействияДляСоздаваемойСчетФактуры(ОснованиеСчетаФактуры, ТипДокументаСтрокой, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСтруктуруСозданныеДокументы()
	
	СозданныеДокументы = Новый Структура;
	СозданныеДокументы.Вставить("Поступление", Новый Структура("Ссылка, СозданПоРаспознанномуДокументу", Неопределено, Ложь));
	СозданныеДокументы.Вставить("Реализация", Новый Структура("Ссылка, СозданПоРаспознанномуДокументу", Неопределено, Ложь));
	СозданныеДокументы.Вставить("СчетФактураПолученный", Новый Структура("Ссылка, СозданПоРаспознанномуДокументу", Неопределено, Ложь));
	СозданныеДокументы.Вставить("СчетФактураВыданный", Новый Структура("Ссылка, СозданПоРаспознанномуДокументу", Неопределено, Ложь));
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокКнопкиСозданныйДокумент()
	
	СканПрикрепленРеализация = Ложь;
	СканПрикрепленПоступление = Ложь;
	
	Если Не ЗначениеЗаполнено(СозданныеДокументы.Поступление.Ссылка)
		И ЗначениеЗаполнено(СозданныеДокументы.СчетФактураПолученный.Ссылка) Тогда
			Элементы.КнопкаСозданныйДокументПоступление.Заголовок = Строка(СозданныеДокументы.СчетФактураПолученный.Ссылка);
			СканПрикрепленРеализация = СозданныеДокументы.СчетФактураПолученный.СозданПоРаспознанномуДокументу;
	Иначе
		Элементы.КнопкаСозданныйДокументПоступление.Заголовок = Строка(СозданныеДокументы.Поступление.Ссылка);
		СканПрикрепленРеализация = ЗначениеЗаполнено(СозданныеДокументы.Поступление.Ссылка) И СозданныеДокументы.Поступление.СозданПоРаспознанномуДокументу;
		Если ЗначениеЗаполнено(СозданныеДокументы.СчетФактураПолученный.Ссылка) Тогда
			Элементы.КнопкаСозданныйДокументСчетФактура.Заголовок = Строка(СозданныеДокументы.СчетФактураПолученный.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СозданныеДокументы.Реализация.Ссылка)
		И ЗначениеЗаполнено(СозданныеДокументы.СчетФактураВыданный) Тогда
			Элементы.КнопкаСозданныйДокументРеализация.Заголовок = Строка(СозданныеДокументы.СчетФактураВыданный.Ссылка);
			СканПрикрепленПоступление = СозданныеДокументы.СчетФактураВыданный.СозданПоРаспознанномуДокументу;
	Иначе
		Элементы.КнопкаСозданныйДокументРеализация.Заголовок = Строка(СозданныеДокументы.Реализация.Ссылка);
		СканПрикрепленПоступление = ЗначениеЗаполнено(СозданныеДокументы.Реализация.Ссылка) И СозданныеДокументы.Реализация.СозданПоРаспознанномуДокументу;
		Если ЗначениеЗаполнено(СозданныеДокументы.СчетФактураВыданный.Ссылка) Тогда
			Элементы.КнопкаСозданныйДокументСчетФактура.Заголовок = Строка(СозданныеДокументы.СчетФактураВыданный.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ВсегоНайденные.Заголовок = СтрШаблон(НСтр("ru = 'Всего (%1)'"), КоличествоЕщеНайденные);
	
	Элементы.КнопкаСозданныйДокументПоступление.Видимость =
		(ЗначениеЗаполнено(СозданныеДокументы.Поступление.Ссылка)
		ИЛИ ЗначениеЗаполнено(СозданныеДокументы.СчетФактураПолученный.Ссылка))
		И Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий;
	Элементы.КнопкаСозданныйДокументРеализация.Видимость =
		(ЗначениеЗаполнено(СозданныеДокументы.Реализация.Ссылка)
		ИЛИ ЗначениеЗаполнено(СозданныеДокументы.СчетФактураВыданный.Ссылка))
		И Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий;
	
	Элементы.ДекорацияНайден.Видимость = Элементы.КнопкаСозданныйДокументПоступление.Видимость ИЛИ Элементы.КнопкаСозданныйДокументРеализация.Видимость;
	
	Элементы.ВсегоНайденные.Видимость = Элементы.ДекорацияНайден.Видимость И КоличествоЕщеНайденные > 1;
	
	Элементы.КнопкаСозданныйДокументСчетФактура.Видимость = Элементы.ДекорацияНайден.Видимость
		И (ЗначениеЗаполнено(СозданныеДокументы.СчетФактураВыданный.Ссылка) ИЛИ ЗначениеЗаполнено(СозданныеДокументы.СчетФактураПолученный.Ссылка));
	
	
	СканПрикреплен = СканПрикрепленРеализация И Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий
		ИЛИ СканПрикрепленПоступление И Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий;
	
	Элементы.ДекорацияСканПрикреплен.Видимость = СканПрикреплен И Элементы.ДекорацияНайден.Видимость;
	Элементы.ПрикрепитьСкан.Видимость = Не СканПрикреплен И Элементы.ДекорацияНайден.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСозданиеНоменклатуры(ПараметрыСоздаваемойНоменклатуры)
	
	ФоновоеЗадание = ЗапуститьФоновоеСозданиеНоменклатуры(ПараметрыСоздаваемойНоменклатуры, УникальныйИдентификатор);
	
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ВыводитьОкноОжидания = Истина;
	НастройкиОжидания.ВыводитьПрогрессВыполнения = Истина;
	НастройкиОжидания.ВыводитьСообщения = Истина;
	НастройкиОжидания.ТекстСообщения = НСтр("ru = 'Создание номенклатуры для заполнения...'");
	
	Обработчик = Новый ОписаниеОповещения("ЗаполнитьТаблицуСозданнойНоменклатурой", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, Обработчик, НастройкиОжидания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапуститьФоновоеСозданиеНоменклатуры(ПараметрыСоздаваемойНоменклатуры, УникальныйИдентификатор)
	
	ПараметрыВызоваСервера = Новый Массив;
	ПараметрыВызоваСервера.Добавить(ПараметрыСоздаваемойНоменклатуры);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Фоновое создание номенклатуры'");
	
	Обработчик = "РаспознаваниеДокументовСлужебный.ФоновоеСозданиеНоменклатуры";
	ФоновоеЗадание = ДлительныеОперации.ВыполнитьВФоне(Обработчик, ПараметрыВызоваСервера, ПараметрыВыполнения);
	
	Возврат ФоновоеЗадание;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьТаблицуСозданнойНоменклатурой(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьТаблицуСозданнойНоменклатуройНаСервере(Результат, ДополнительныеПараметры);
	
	КнопкаСозданияНоменклатуры = Элементы.СписокНераспознаннойНоменклатурыСоздатьНоменклатуру;
	КнопкаСозданияНоменклатуры.Доступность = СписокНераспознаннойНоменклатуры.Количество();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСозданнойНоменклатуройНаСервере(Результат, ДополнительныеПараметры) Экспорт
	
	ИнформацияОНоменклатуре = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	ПолучитьСообщенияПользователю(Истина);
	Для Каждого Сообщение Из Результат.Сообщения Цикл
		Сообщение.Сообщить();
	КонецЦикла;
	
	Для Каждого Данные Из ИнформацияОНоменклатуре Цикл
		СтрокаЗаполнения = ТаблицаДокумента.НайтиПоИдентификатору(Данные.ИдентификаторИсходнойСтроки);
		СтрокаЗаполнения.Номенклатура = Данные.Номенклатура;
		
		РаспознаваниеДокументовПереопределяемый.ПриИзмененииКолонкиНаСервере(
			ЭтотОбъект,
			СтрокаЗаполнения,
			"Номенклатура",
			СтрокаЗаполнения.НомерСтроки,
			Данные.Номенклатура);
		
		Отбор = Новый Структура("ИдентификаторИсходнойСтроки", Данные.ИдентификаторИсходнойСтроки);
		НайденныеСтроки = СписокНераспознаннойНоменклатуры.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() Тогда
			УдаляемаяСтрока = НайденныеСтроки[0];
			СписокНераспознаннойНоменклатуры.Удалить(УдаляемаяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	СохранитьЗначенияИзТаблицыДокумента();
	РаспознаваниеДокументовСлужебный.ПересчитатьПроблемныеЭлементы(ЭтотОбъект);
	
	Если Не СписокНераспознаннойНоменклатуры.Количество() Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаТабличнаяЧасть;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НайтиИЗаполнитьСозданныеДокументы()
	
	РаспознаваниеДокументовСлужебный.АктуализироватьОбъектыСвязанныеСРаспознаннымДокументом(Объект);
	
	Связанные = РегистрыСведений.СвязанныеОбъектыРаспознаниеДокументов.ВсеСвязанныеДокументы(Объект.Ссылка);
	
	Для Каждого Связанный Из Связанные Цикл
		
		Если ТипЗнч(Связанный.Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			СозданныеДокументы.СчетФактураПолученный.Ссылка = Связанный.Ссылка;
			СозданныеДокументы.СчетФактураПолученный.СозданПоРаспознанномуДокументу = Не Связанный.ПотенциальныйКандидат;
		КонецЕсли;
		
		Если ТипЗнч(Связанный.Ссылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			СозданныеДокументы.Поступление.Ссылка = Связанный.Ссылка;
			СозданныеДокументы.Поступление.СозданПоРаспознанномуДокументу = Не Связанный.ПотенциальныйКандидат;
		КонецЕсли;
		
		Если ТипЗнч(Связанный.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			СозданныеДокументы.СчетФактураВыданный.Ссылка = Связанный.Ссылка;
			СозданныеДокументы.СчетФактураВыданный.СозданПоРаспознанномуДокументу = Не Связанный.ПотенциальныйКандидат;
		КонецЕсли;
		
		Если ТипЗнч(Связанный.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			СозданныеДокументы.Реализация.Ссылка = Связанный.Ссылка;
			СозданныеДокументы.Реализация.СозданПоРаспознанномуДокументу = Не Связанный.ПотенциальныйКандидат;
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоЕщеНайденные = Связанные.Количество();
	
	ОбновитьЗаголовокКнопкиСозданныйДокумент();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОткрытияФормы(Знач ВидОперации, Знач ТипДокументаСтрокой)
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("Основание", Объект.Ссылка);
	ПараметрыЗаполнения.Вставить("ВидОперации", ВидОперации);
	ПараметрыЗаполнения.Вставить("НомерВходящегоДокумента", Объект.РеквизитыДокумента[0].Значение);
	ПараметрыЗаполнения.Вставить("ДатаВходящегоДокумента", Объект.РеквизитыДокумента[1].Значение);
	
	Если Объект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура
		ИЛИ Объект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД Тогда
		
		ПараметрыЗаполнения.Вставить("НомерВходящегоДокументаСчетаФактуры", Объект.РеквизитыДокумента[0].Значение);
		ПараметрыЗаполнения.Вставить("ДатаВходящегоДокументаСчетаФактуры", Объект.РеквизитыДокумента[1].Значение);
		
	КонецЕсли;
	
	ПараметрыЗаполнения.Вставить("Дата", Объект.РеквизитыДокумента[1].Значение);
	ПараметрыЗаполнения.Вставить("ДоговорКонтрагента", Объект.РеквизитыДокумента[6].Значение);
	
	Для Каждого ДанныеРеквизита Из Объект.РеквизитыДокумента Цикл
		ПараметрыЗаполнения.Вставить(ДанныеРеквизита.ИмяРеквизита, ДанныеРеквизита.Значение);
	КонецЦикла;
	
	Если ТипДокументаСтрокой = "ПоступлениеТоваровУслуг" Тогда
		ПараметрыЗаполнения.Вставить("Организация", ПараметрыЗаполнения.ПокупательОрганизация);
		ПараметрыЗаполнения.Вставить("Контрагент", ПараметрыЗаполнения.Продавец);
		
		ОтражениеВУСН = ПоступлениеТоваровУслугФормыКлиентСервер.ОтражениеВУСН(ВидОперации, Ложь);
	Иначе
		ПараметрыЗаполнения.Вставить("Организация", ПараметрыЗаполнения.ПродавецОрганизация);
		ПараметрыЗаполнения.Вставить("Контрагент", ПараметрыЗаполнения.Покупатель);
		
		ПараметрыЗаполнения.Вставить("Номер", Объект.РеквизитыДокумента[0].Значение);
	КонецЕсли;
	
	СтрокиТаблицыТовары = Новый Массив;
	СтрокиТаблицыУслуги = Новый Массив;
	
	КолонкиТаблицы = ПолучитьРеквизиты("ТаблицаДокумента");
	Для Каждого СтрокаТаблицыДокумента Из ТаблицаДокумента Цикл
		ДанныеСтрокиТаблицы = Новый Структура();
		Для Каждого Колонка Из КолонкиТаблицы Цикл
			Если Колонка.Имя = "ЕдиницаИзмерения" Тогда
				ДанныеСтрокиТаблицы.Вставить(Колонка.Имя,
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицыДокумента.Номенклатура, "ЕдиницаИзмерения"));
			Иначе
				ДанныеСтрокиТаблицы.Вставить(Колонка.Имя, СтрокаТаблицыДокумента[Колонка.Имя]);
			КонецЕсли;
		КонецЦикла;
		
		Если ТипДокументаСтрокой = "ПоступлениеТоваровУслуг" Тогда
			ДанныеСтрокиТаблицы.Вставить("ОтражениеВУСН", ОтражениеВУСН);
		КонецЕсли;
		
		Если СтрокаТаблицыДокумента.Номенклатура.Услуга Тогда
			СтрокиТаблицыУслуги.Добавить(ДанныеСтрокиТаблицы);
		Иначе
			ДанныеСтрокиТаблицы.Вставить("Коэффициент", 1);
			СтрокиТаблицыТовары.Добавить(ДанныеСтрокиТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыЗаполнения.Вставить("Товары", СтрокиТаблицыТовары);
	ПараметрыЗаполнения.Вставить("Услуги", СтрокиТаблицыУслуги);
	
	Если ПараметрыЗаполнения.Основание.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура
		ИЛИ ПараметрыЗаполнения.Основание.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД Тогда
		
		ПараметрыЗаполнения.Вставить("СуммаВключаетНДС", Ложь);
		
	ИначеЕсли ПараметрыЗаполнения.Свойство("ИтогоВсего")
		И ПараметрыЗаполнения.Свойство("ИтогоСумма") Тогда
		
		Если ПараметрыЗаполнения.ИтогоВсего <> 0
			И ПараметрыЗаполнения.ИтогоСумма <> 0 Тогда
			
			ПараметрыЗаполнения.Вставить("СуммаВключаетНДС", (ПараметрыЗаполнения.ИтогоВсего = ПараметрыЗаполнения.ИтогоСумма));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

&НаСервере
Процедура ПерепроверитьНаСервере()
	
	СохранитьЗначенияПередЗаписью();
	
	ЗначенияВыбораДляЯчеекТаблицыДокумента.Очистить();
	ТаблицаДокумента.Очистить();
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	РаспознаваниеДокументов.ЗаполнитьСпискиВыбораНаСервере(ДокументОбъект, Объект.Ссылка, Истина);
	Документы.РаспознанныйДокумент.ЗаполнитьЗначенияРаспознанногоДокумента(ДокументОбъект, ДокументОбъект.Ссылка);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	ЗаполнитьАдресаКартинок();
	СохранитьСоответствиеРеквизитовЭлементам();
	
	НастроитьЭлементыПоРеквизитам();
	ЗаполнитьВариантыВыбораДляЗначенийТаблицы();
	ЗаполнитьТаблицуДокумента();
	
	Если Не УправлениеДоступом.ЧтениеРазрешено(Объект.РеквизитыДокумента[9].Значение) Тогда
		// Организация покупатель
		Объект.РеквизитыДокумента[9].Значение = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	Если Не УправлениеДоступом.ЧтениеРазрешено(Объект.РеквизитыДокумента[8].Значение) Тогда
		// Организация продавец
		Объект.РеквизитыДокумента[8].Значение = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	Если Не УправлениеДоступом.ЧтениеРазрешено(Объект.РеквизитыДокумента[6].Значение) Тогда
		// Договор
		Объект.РеквизитыДокумента[6].Значение = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	ИзменитьИсточникиДляВыбораДоговора(Ложь);
	РаспознаваниеДокументовСлужебный.ПересчитатьПроблемныеЭлементы(ЭтотОбъект);
	
	НайтиИЗаполнитьСозданныеДокументы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПоступление(Команда)
	Если ЗначениеЗаполнено(СозданныеДокументы.Поступление.Ссылка) Тогда
		ОткрытьСозданныйДокумент(СозданныеДокументы.Поступление.Ссылка);
	Иначе
		ОткрытьСозданныйДокумент(СозданныеДокументы.СчетФактураПолученный.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРеализацию(Команда)
	Если ЗначениеЗаполнено(СозданныеДокументы.Реализация.Ссылка) Тогда
		ОткрытьСозданныйДокумент(СозданныеДокументы.Реализация.Ссылка);
	Иначе
		ОткрытьСозданныйДокумент(СозданныеДокументы.СчетФактураВыданный.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСозданныйДокумент(ДокументСсылка)
	ПерейтиПоНавигационнойСсылке(ПолучитьНавигационнуюСсылку(ДокументСсылка));
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначенияИзТаблицыДокумента()
	
	ТаблицаДокументаТЗ = РеквизитФормыВЗначение("ТаблицаДокумента");
	
	// Удаляем колонки, которые не нужно сохранять
	ТаблицаДокументаТЗ.Колонки.Удалить("Отступ");
	ТаблицаДокументаТЗ.Колонки.Удалить("Услуга");
	ИдКолонки = ТаблицаДокументаТЗ.Колонки.Количество();
	Пока ИдКолонки > 0 Цикл
		ИдКолонки = ИдКолонки - 1;
		Если Прав(ТаблицаДокументаТЗ.Колонки[ИдКолонки].Имя, 11) = "ТекстОшибки" Тогда
			ТаблицаДокументаТЗ.Колонки.Удалить(ИдКолонки);
		КонецЕсли;
	КонецЦикла;
	
	РаспознаваниеДокументовСлужебный.СохранитьТаблицуДокумента(Объект, ТаблицаДокументаТЗ);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьИтоговыеЗначения()
	
	Объект.РеквизитыДокумента[10].Значение = ИтогоСумма;
	Объект.РеквизитыДокумента[11].Значение = ИтогоСуммаНДС;
	Объект.РеквизитыДокумента[12].Значение = ИтогоВсего;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭлементыИтогов()
	
	ИтогоСумма = Объект.РеквизитыДокумента[10].Значение;
	ИтогоСуммаНДС = Объект.РеквизитыДокумента[11].Значение;
	ИтогоВсего = Объект.РеквизитыДокумента[12].Значение;
	
	Объект.РеквизитыДокумента[10].ИмяЭлемента = "ИтогоСумма";
	Объект.РеквизитыДокумента[11].ИмяЭлемента = "ИтогоСуммаНДС";
	Объект.РеквизитыДокумента[12].ИмяЭлемента = "ИтогоВсего";
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределениеДействияДляСоздаваемойСчетФактуры(ОснованиеСчетаФактуры, ТипДокументаСтрокой, ПараметрыЗаполнения)
	
	Если ОснованиеСчетаФактуры = Неопределено Тогда
		
		Если ТипДокументаСтрокой = "РеализацияТоваровУслуг" Тогда
			ТипДокумента = Тип("ДокументСсылка.СчетФактураВыданный");
		Иначе
			ТипДокумента = Тип("ДокументСсылка.СчетФактураПолученный");
		КонецЕсли;
		
		МодульПереопределения = РаспознаваниеДокументовКлиентПереопределяемый;
		МодульПереопределения.ОткрытиеФормыСоздаваемогоДокумента(ТипДокумента, ПараметрыЗаполнения, ЭтотОбъект);
		
		Возврат;
	КонецЕсли;
	
	СчетФактураСсылка = СоздатьСчетФактуруПоПараметрам(ОснованиеСчетаФактуры, ТипДокументаСтрокой, ПараметрыЗаполнения);
	
	Если СчетФактураСсылка <> Неопределено Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Создан документ'"), ПолучитьНавигационнуюСсылку(СчетФактураСсылка), Строка(СчетФактураСсылка));
		СледующийДокумент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеВыделенияРамкойПоляДокумента(ИмяРеквизита, НомерСтроки)
	
	ДанныеТаблицы = СтрокаТаблицыДокументаПоПараметрам(НомерСтроки, ИмяРеквизита);
	Если ДанныеТаблицы = Неопределено Тогда
		ДанныеТаблицы = СтрокаТаблицыДокументаПоПараметрам(НомерСтроки, "Номенклатура");
		Если ДанныеТаблицы = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Координаты = РаспознаваниеДокументовСлужебныйКлиент.ПолучитьНаборКоординат(ДанныеТаблицы);
	ДанныеПриближения = Новый Структура("Координаты, СтрокВИзображении", Координаты, ДанныеТаблицы.СтрокВИзображении);
	ПодключитьОбработчикОжидания("Подключаемый_ПриблизитьПоКоординатам", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеДляВыделенныхСтрок(Значение, ИмяКолонки)
	
	ИдентификаторыВыделенныхСтрок = Элементы.СписокНераспознаннойНоменклатуры.ВыделенныеСтроки;
	Для Каждого ИдентификаторСтроки Из ИдентификаторыВыделенныхСтрок Цикл
		ИзменяемаяСтрока = СписокНераспознаннойНоменклатуры.НайтиПоИдентификатору(ИдентификаторСтроки);
		ИзменяемаяСтрока[ИмяКолонки] = Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтрокиНераспознаннойНоменклатуры()
	
	СтрокиПустойНоменклатуры = Новый Массив;
	
	ПорогДобавления = РаспознаваниеДокументовСлужебныйВызовСервера.ПорогНоменклатурыДляГрупповогоСоздания();
	Для Каждого СтрокаНоменклатуры Из ТаблицаДокумента Цикл
		Если СтрокаНоменклатуры.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка") Тогда
			СтрокиПустойНоменклатуры.Добавить(СтрокаНоменклатуры);
			Продолжить;
		КонецЕсли;
		
		ИмеющиесяДанные = СтрокаТаблицыДокументаПоПараметрам(СтрокаНоменклатуры.НомерСтроки, "Номенклатура");
		Если ИмеющиесяДанные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ИмеющиесяДанные.ЗаполненоВручную
			И СтрокаНоменклатуры.Номенклатура = ИмеющиесяДанные.НайденноеЗначение
			И ИмеющиесяДанные.УверенностьНайденногоЗначения <= ПорогДобавления Тогда
			
			СтрокиПустойНоменклатуры.Добавить(СтрокаНоменклатуры);
		КонецЕсли;
	КонецЦикла;
	
	ИдентификаторыИсходныхСтрок = Новый Соответствие();
	Для Каждого СтрокаПустойНоменклатуры Из СтрокиПустойНоменклатуры Цикл
		ИдентификаторыИсходныхСтрок.Вставить(СтрокаПустойНоменклатуры.ПолучитьИдентификатор(), СтрокаПустойНоменклатуры);
	КонецЦикла;
	
	// Удаление исправленных значений
	Индекс = СписокНераспознаннойНоменклатуры.Количество();
	Пока Индекс > 0 Цикл
		Индекс = Индекс - 1;
		ИдентификаторТекущейСтроки = СписокНераспознаннойНоменклатуры[Индекс].ИдентификаторИсходнойСтроки;
		НайденноеЗначение = ИдентификаторыИсходныхСтрок.Получить(ИдентификаторТекущейСтроки);
		Если НайденноеЗначение = Неопределено Тогда
			СписокНераспознаннойНоменклатуры.Удалить(Индекс);
		Иначе // Отключение ранее добавленных строк
			ИндексУдаляемойСтроки = СтрокиПустойНоменклатуры.Найти(НайденноеЗначение);
			Если Не ИндексУдаляемойСтроки = Неопределено Тогда
				СтрокиПустойНоменклатуры.Удалить(ИндексУдаляемойСтроки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	// Добавление новых
	Для Каждого СтрокаПустойНоменклатуры Из СтрокиПустойНоменклатуры Цикл
		СвойстваНераспознаннойНоменклатуры = СписокНераспознаннойНоменклатуры.Добавить();
		СвойстваНераспознаннойНоменклатуры.ИдентификаторИсходнойСтроки = СтрокаПустойНоменклатуры.ПолучитьИдентификатор();
		
		Отбор = Новый Структура("НомерСтрокиТЧ", СтрокаПустойНоменклатуры.НомерСтроки);
		СвязанныеСтрокиОбъекта = Объект.РеквизитыТабличныхЧастей.НайтиСтроки(Отбор);
		
		ДанныеЗаполнения = РаспознаваниеДокументовСлужебныйКлиент.ДанныеЗаполненияДляНовогоЭлемента(СвязанныеСтрокиОбъекта);
		ЗаполнитьЗначенияСвойств(СвойстваНераспознаннойНоменклатуры, ДанныеЗаполнения);
	КонецЦикла;
	
	КнопкаСозданияНоменклатуры = Элементы.СписокНераспознаннойНоменклатурыСоздатьНоменклатуру;
	КнопкаСозданияНоменклатуры.Доступность = СписокНераспознаннойНоменклатуры.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеДляРеквизитовБыстрогоРедактирования(ИмяРеквизита, Значение = Неопределено)
	
	РедактируемаяСтрока = СтрокаПолейНераспознаннойНоменклатурыПоИмениРеквизита(ИмяРеквизита);
	Если РедактируемаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Значение = Неопределено Тогда
		Тип = ТипЗнч(РедактируемаяСтрока.Значение);
		МассивТипов = Новый Массив();
		МассивТипов.Добавить(Тип);
		ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
		Значение = ОписаниеТипа.ПривестиЗначение();
	КонецЕсли;
	
	РедактируемаяСтрока.Значение = Значение;
	
КонецПроцедуры

&НаКлиенте
Функция СтрокаПолейНераспознаннойНоменклатурыПоИмениРеквизита(ИмяРеквизита)
	
	Отбор = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	НайденныеСтроки = ПоляНераспознаннойНоменклатуры.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() Тогда
		Возврат НайденныеСтроки[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция СтрокаТаблицыДокументаПоПараметрам(НомерСтроки, ИмяРеквизита)
	
	Отбор = Новый Структура("НомерСтрокиТЧ, ИмяРеквизита", НомерСтроки, ИмяРеквизита);
	НайденныеСтроки = Объект.РеквизитыТабличныхЧастей.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() Тогда
		Возврат НайденныеСтроки[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура СохранитьПривязкуДокумента(СсылкаСоздаваемого)
	
	РегистрыСведений.СвязанныеОбъектыРаспознаниеДокументов.ЗаписатьЗначения(СсылкаСоздаваемого, Объект.Ссылка, Ложь);
	Объект.Статус = Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Обработан;
	
	НайтиИЗаполнитьСозданныеДокументы();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДоступностьКнопкиУстановкиРеквизитов()
	
	Отбор = Новый Структура("Выбран", Истина);
	ВыбранныеЭлементы = ПоляНераспознаннойНоменклатуры.НайтиСтроки(Отбор);
	
	Элементы.ИзменитьЗначенияСтрокНераспознаннойНоменклатуры.Доступность = ВыбранныеЭлементы.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодтвержденияЗакрытия(Результат, Контекст) Экспорт
	
	Записать();
	
	КлючеваяОперация = "РаспознаваниеДокументов.ЗакрытиеФормы." + ИмяФормы;
	Замер = ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация);
	
	Комментарий = Новый Структура;
	Комментарий.Вставить("ИдентификаторРезультата", Объект.ИдентификаторРезультата);
	
	ОценкаПроизводительностиКлиент.УстановитьКомментарийЗамера(Замер, Комментарий);
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

#КонецОбласти
