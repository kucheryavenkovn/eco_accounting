#Область ОбъявлениеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжиданияАктуализации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация = Параметры.Организация;
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СообщениеТребуютсяРеквизиты = ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненыРеквизитыДляОтчетности(Объект.Организация);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры,
		"ПериодСобытия, РегистрацияВНалоговомОргане, Описание, Срок, ЕстьИнформацияНаИТС, ИдентификаторЗадачи");
	
	ПравилоУплаты = Параметры.Правило; // Ниже может быть уточнено
	
	Если ТипЗнч(Параметры.Правило) = Тип("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов") Тогда
		
		Если Параметры.Правило.Действие = Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога Тогда
		
			ПравилоУплаты = Параметры.Правило;
			ПериодОтчета  = Обработки.ПомощникУплатыНалога.ПериодОтчетаПоПравилуУплаты(ПравилоУплаты, ПериодСобытия);
			ПравилоОтчета = Обработки.ПомощникУплатыНалога.ПравилоОтчетаПоПравилуУплаты(ПравилоУплаты, Объект.Организация, ПериодОтчета);
		
		ИначеЕсли Параметры.Правило.Действие = Перечисления.ВидыДействийКалендаряБухгалтера.Отчет Тогда
		
			ПравилоОтчета = Параметры.Правило;
			ПериодОтчета  = ПериодСобытия;
			ПравилоУплаты = Обработки.ПомощникУплатыНалога.ПравилоУплатыПоПравилуОтчета(ПравилоОтчета, Объект.Организация, ПериодСобытия);
		
		КонецЕсли;
		
	КонецЕсли;
	
	НастроитьБаннерАнтикризис();
	
	СпособОплаты = ВыполнениеЗадачБухгалтера.СпособУплатыНалогаВзноса(Объект.Организация);
	
	Используется1СОтчетность = РегламентированнаяОтчетностьБП.Используется1СОтчетность();
	ЕстьПравоНаДОсКО     = ДокументооборотСКОВызовСервера.ЕстьПравоНаДОсКО(Ложь);
	АктуализацияВозможна = Обработки.ЗакрытиеМесяца.АктуализацияВозможна();
	ЭтоНулеваяОтчетность = НЕ ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности()
		И (ИдентификаторЗадачи = "НалогНаПрибыль" ИЛИ ИдентификаторЗадачи = "НДФЛ_Предприниматель");
	ЦветПодсветкиБлока = ЦветаСтиля.БыстрыеОтборыФонГруппы;	
	
	// Разместим информацию об особенностях налогового периода
	Если ЗначениеЗаполнено(ПравилоОтчета) Тогда
		
		РеквизитыПравил = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ПравилоОтчета,
			"РасширенныйПервыйНалоговыйПериод, ФинансовыйПериод, Периодичность");
			
		ИнформацияНалоговыйПериод = ИнформированиеНалоговыйПериод.ИнформацияНалоговыйПериод(
			РеквизитыПравил.РасширенныйПервыйНалоговыйПериод,
			ПериодСобытия,
			Объект.Организация,
			НСтр("ru = 'расчет'"),
			РеквизитыПравил.ФинансовыйПериод,
			РеквизитыПравил.Периодичность);
	КонецЕсли;
	
	ИнформированиеНалоговыйПериод.НастроитьЭлементИнформирования(
		Элементы,
		ИнформацияНалоговыйПериод,
		Элементы.СтраницыСобытий);
	
	УстановитьЗаголовокФормы();
	
	Элементы.СтраницыСобытий.ТекущаяСтраница = Элементы.СтраницаСобытийПустая;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.СтраницыСобытий.ТекущаяСтраница = Элементы.СтраницаСобытийПустая;
	
	СоставРазделов = Новый Структура("РасчетУплата, Сверка", Истина, ЕстьПравоНаДОсКО);
	ЗапуститьПолучениеДанныхЗадачи(СоставРазделов);
			
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если (ИмяСобытия = "АктуализацияЗавершенаУспешно"
		ИЛИ ИмяСобытия = "АктуализацияОтменена") 
		И Параметр.Свойство("Организация")
		И Объект.Организация = Параметр.Организация Тогда
		
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
		УправлениеФормойГруппаАктуализация(ЭтотОбъект, ИмяСобытия); 
		УстановитьПодсветкуТекущегоБлока(ЭтотОбъект);
		
	ИначеЕсли ИмяСобытия = "ТребуетсяАктуализация"
		И Параметр.Свойство("Организация")
		И Объект.Организация = Параметр.Организация 
		И Параметр.Свойство("ДатаАктуальности") Тогда
		
		ДатаАктуальности = Параметр.ДатаАктуальности;
		УправлениеФормойГруппаАктуализация(ЭтотОбъект, ИмяСобытия, ДатаАктуальности); 
		УстановитьПодсветкуТекущегоБлока(ЭтотОбъект);
		
	ИначеЕсли ИмяСобытия = "Запись_Организации"
		И Объект.Организация = Источник Тогда
		
		ПроверитьРеквизитыОрганизацииДляОтчетности();
		
	ИначеЕсли ИмяСобытия = "Запись_РегламентированныйОтчет" 
		И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("Ссылка") 
		И Параметр.Ссылка = Декларация Тогда
		
		Элементы.ДекорацияСсылкаНаДекларацию.Заголовок = ПредставлениеДекларации(Декларация);
		
	ИначеЕсли ИмяСобытия = "ИзменениеВыписки"
		Или ИмяСобытия = "Запись_ПлатежныйДокумент_УплатаНалогов"
		Или ИмяСобытия = "Запись_ПлатежныйДокумент_ВыплатаЗарплаты" Тогда
		
		ОбработатьУплату();
		
	ИначеЕсли ИмяСобытия = "Запись_НастройкиПродленияСроковНалоговОтчетов" Тогда
		
		// Это же событие вызывается при включении (выключении) освобождения от налогов во 2 квартале 2020 года
		
		НастроитьАнтикризис();
		ПроверитьАктуальностьДанных();// после включения/выключения может требоваться повторно закрыть месяц
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СообщениеТребуютсяРеквизитыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",                 Объект.Организация);
	ПараметрыФормы.Вставить("Назначение",           "ДляОтчетности");
	ПараметрыФормы.Вставить("Контекст",    Новый Структура);
	ПараметрыФормы.Контекст.Вставить("Период",  ПериодСобытия);
	ПараметрыФормы.Контекст.Вставить("Правило", ПравилоОтчета);
	
	ОткрытьФорму("Справочник.Организации.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИнформацияУплатаНалогаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОткрытьНастройкиАнтикризис(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстБаннераОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОткрытьНастройкиАнтикризис(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьДействиеРасчетСуммы(Команда)
	
	Если Не ПроверитьЗаполнениеПередВыполнениемРасчета() Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеВыполнениеРасчета = Новый ОписаниеОповещения("ОбработатьВыполнениеРасчета", ЭтотОбъект, Истина); // требуется проверка актуальности после загрузки расчета
	ОткрытьФорму(ОписаниеДействияРасчет.ИмяФормы, ОписаниеДействияРасчет.ПараметрыФормы, ЭтотОбъект,,,,ОповещениеВыполнениеРасчета);
	
	ВыполнениеЗадачБухгалтераКлиент.ЗарегистрироватьВЖурналеОткрытиеФормы(ОписаниеДействияРасчет.ИмяФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСсылкаНаСправкуРасчетНажатие(Элемент)
		
	Если ПустаяСтрока(СправкаРасчет) Тогда
		Возврат;
	КонецЕсли;	
	
	ОткрытьФорму("Отчет." + СправкаРасчет + ".Форма", ПараметрыФормыРасшифровки, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеСверка(Команда)
	
	ОповещениеВыполнениеСверки = Новый ОписаниеОповещения("ОбработатьВыполнениеСверки", ЭтотОбъект);
	ОткрытьФорму(ОписаниеДействияСверка.ИмяФормы, ОписаниеДействияСверка.ПараметрыФормы, ЭтотОбъект,,,,ОповещениеВыполнениеСверки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеУплатаБанк(Команда)
	
	СпособОплаты = ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.БанковскийПеревод");
	Уплатить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеУплатаКасса(Команда)
	
	СпособОплаты = ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.НаличнымиПоКвитанции");
	Уплатить();
	
КонецПроцедуры

&НаКлиенте
Процедура Актуализировать(Команда)
	
	АктуализироватьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныйДокументНажатие(Команда)
	
	// Команды генерируются в КопироватьЭлементСПодчиненными() и содержат числовой идентификатор,
	// совпадающий с идентификаторами строк в списке Платежи
	Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Команда.Имя);
	Если Идентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СпособОплаты) Тогда
		ОткрытьПлатежныйДокумент(Идентификатор);
	Иначе
		СтрокаПлатежа = Платежи.НайтиПоИдентификатору(Идентификатор);
		Если СтрокаПлатежа <> Неопределено
			И ЗначениеЗаполнено(СтрокаПлатежа.ПлатежноеПоручение) Тогда
			// Определим способ оплаты по платежному документу
			СпособОплаты = ?(ТипЗнч(СтрокаПлатежа.ПлатежноеПоручение) = Тип("ДокументСсылка.РасходныйКассовыйОрдер"),
				ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.НаличнымиПоКвитанции"),
				ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.БанковскийПеревод"));
			ОткрытьПлатежныйДокумент(Идентификатор);
		Иначе
			// Предложим выбрать способ оплаты
			СписокВыбора = Новый СписокЗначений;
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.БанковскийПеревод"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.НаличнымиПоКвитанции"));
			ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВыборСпособаОплатыЗавершение",
				ЭтотОбъект, Новый Структура("Идентификатор", Идентификатор));
			НомерКонтейнера = ЗадачиБухгалтераКлиентСервер.НомерКонтейнера(Идентификатор);
			ИмяЭлемента = "ОткрытьПлатежныйДокумент" + НомерКонтейнера;
			ПоказатьВыборИзМеню(ОписаниеОповещенияОЗавершении, СписокВыбора, Элементы[ИмяЭлемента]);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееНаИТС(Команда)
	
	АдресНаИТС = ЗадачиБухгалтераКлиентСервер.СсылкаНаИТС(Срок);
	ПерейтиПоНавигационнойСсылке(АдресНаИТС);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВспомогательныеПроцедурыИФункции

&НаКлиенте
Процедура ОткрытьПлатежныйДокумент(Идентификатор)
	
	ПараметрыФормыПлатежногоДокумента = ПараметрыФормыПлатежногоДокумента(Идентификатор);
	
	СсылкаНаДокумент = Неопределено;
	Если ПараметрыФормыПлатежногоДокумента.Свойство("Ключ", СсылкаНаДокумент)
		И ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
		
		ТипДокумента = ?(ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.РасходныйКассовыйОрдер"),
			"РасходныйКассовыйОрдер", "ПлатежноеПоручение");
		
	Иначе
		
		ТипДокумента = ?(СпособОплаты = ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.НаличнымиПоКвитанции"),
			"РасходныйКассовыйОрдер", "ПлатежноеПоручение");
		
	КонецЕсли;
	
	ИмяФормыПлатежногоДокумента = СтрШаблон("Документ.%1.ФормаОбъекта", ТипДокумента);
	
	ОткрытьФорму(ИмяФормыПлатежногоДокумента, ПараметрыФормыПлатежногоДокумента, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборСпособаОплатыЗавершение(ЭлементСписка, ДополнительныеПараметры) Экспорт
	
	Если ЭлементСписка <> Неопределено Тогда
		СпособОплаты = ЭлементСписка.Значение;
		ОткрытьПлатежныйДокумент(ДополнительныеПараметры.Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РеквизитыПлатежногоДокумента(ДокументСсылка, Оплачено)
	
	РеквизитыПлатежногоДокумента = Новый Структура("Наименование, Сумма");
	
	НаименованиеДокумента = ДокументСсылка.Метаданные().Синоним;
	РеквизитыДокумента    = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Номер, Дата, СуммаДокумента");
	НомерДокумента        = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыДокумента.Номер, Истина, Истина);
	ДатаДокумента         = Формат(РеквизитыДокумента.Дата,"ДЛФ=D");
	СтатусОплаты          = ?(Оплачено, НСтр("ru = 'Оплачено'"), НСтр("ru = 'Подготовлено'"));
	
	ШаблонПредставления = НСтр("ru = '%1 %2 от %3 (%4)'");
	
	РеквизитыПлатежногоДокумента.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления,
		НаименованиеДокумента, НомерДокумента, ДатаДокумента, СтатусОплаты);;
	РеквизитыПлатежногоДокумента.Сумма = РеквизитыДокумента.СуммаДокумента;
	
	Возврат РеквизитыПлатежногоДокумента;
	
КонецФункции

&НаСервере
Процедура УдалитьНеиспользуемыеЭлементы(ЭлементыКУдалению)
	
	Для Каждого Элемент Из ЭлементыКУдалению Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура КопироватьЭлементСПодчиненными(Форма, Источник, Владелец, Номер)
	
	ТипИсточника = ТипЗнч(Источник);
	Приемник = Форма.Элементы.Добавить(Источник.Имя + Номер, ТипИсточника, Владелец);
	
	Если ТипИсточника = Тип("ГруппаФормы") Тогда
		Приемник.Вид = Источник.Вид;
		ЗаполнитьЗначенияСвойств(Приемник, Источник, , "Имя,ПутьКДаннымЗаголовка,ПодчиненныеЭлементы");
		Для Каждого ПодчиненныйЭлемент Из Источник.ПодчиненныеЭлементы Цикл
			КопироватьЭлементСПодчиненными(Форма, ПодчиненныйЭлемент, Приемник, Номер);
		КонецЦикла;
	ИначеЕсли ТипИсточника = Тип("КнопкаФормы") Тогда
		ИмяКоманды = Источник.ИмяКоманды + Номер;
		Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
			НоваяКоманда = Форма.Команды.Добавить(ИмяКоманды);
			ЗаполнитьЗначенияСвойств(НоваяКоманда, Форма.Команды[Источник.ИмяКоманды]);
		КонецЕсли;
		Приемник.ИмяКоманды = ИмяКоманды;
		ЗаполнитьЗначенияСвойств(Приемник, Источник, , "Имя, ИмяКоманды");
	Иначе
		Приемник.Вид = Источник.Вид;
		ЗаполнитьЗначенияСвойств(Приемник, Источник, , "Имя");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыводитьОКТМО()
	
	//Удалим строки с пустым ОКТМО
	ТаблицаРасчетов = РеквизитФормыВЗначение("Расчет").Скопировать();
	Отбор = Новый Структура("ОКТМО", "");
	СтрокиКУдалению = ТаблицаРасчетов.НайтиСтроки(Отбор);
	
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаРасчетов.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	МассивОКТМО = ТаблицаРасчетов.ВыгрузитьКолонку("ОКТМО");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивОКТМО);
	
	Возврат МассивОКТМО.Количество() > 1;
	
КонецФункции

&НаСервере
Функция НовыйШрифтКурсив()
	
	Возврат Новый Шрифт(,,,Истина);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеОтправкаОтчетаОграничена(ПравилоОтчета)
	
	ШаблонТекста = НСтр("ru = 'Отправка отчета в электронном виде не предусмотрена законодательством.
                        |Сформируйте отчет, распечатайте и отправьте по почте или отнесите в %1'");
	
	ГосударственныйОрган = НСтр("ru = 'государственный орган'"); // Значение для %1. Если БРО предоставит более подходящее название органа, то будет выведено оно.
	
	ИмяОтчета = ИмяОтчета(ПравилоОтчета);
	Если ЗначениеЗаполнено(ИмяОтчета) Тогда
		ОсобыйГосударственныйОрган = ИнтерфейсыВзаимодействияБРОКлиентСервер.ПредставлениеПолучателяБумажногоДокумента(ИмяОтчета);
		Если ЗначениеЗаполнено(ОсобыйГосударственныйОрган) Тогда
			ГосударственныйОрган = ОсобыйГосударственныйОрган;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(СтрШаблон(ШаблонТекста, ГосударственныйОрган));
	
КонецФункции	

&НаСервереБезКонтекста
Функция ИмяОтчета(ПравилоОтчета)
	
	ОписаниеПолейПравила = Новый Структура;
	ОписаниеПолейПравила.Вставить("КодЗадачи",  "Владелец.Код");
	ОписаниеПолейПравила.Вставить("КодПравила", "Код");
	
	СвойстваПравила = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПравилоОтчета, ОписаниеПолейПравила);
	Если Не ЗначениеЗаполнено(СвойстваПравила.КодЗадачи)
		Или Не ЗначениеЗаполнено(СвойстваПравила.КодПравила) Тогда
		Возврат "";
	КонецЕсли;
	
	Требование = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.СкомпоноватьПолноеИмяПравила(
		СвойстваПравила.КодЗадачи,
		СвойстваПравила.КодПравила);
		
	Возврат ИнтерфейсыВзаимодействияБРО.ИмяРеглОтчета(Требование);
	
КонецФункции

#КонецОбласти

#Область ПроверкаЗаполненияРеквизитов

&НаСервере
Процедура ПроверитьРеквизитыОрганизацииДляОтчетности()
	
	Если ЭтоАдресВременногоХранилища(АдресХранилищаНезаполненныхРеквизитов) Тогда
		УдалитьИзВременногоХранилища(АдресХранилищаНезаполненныхРеквизитов);
		АдресХранилищаНезаполненныхРеквизитов = "";
	КонецЕсли;
	
	РеквизитыОрганизацииЗаполнены = Истина;
	НезаполненныеРеквизиты        = Неопределено;
	
	Если НЕ РасчетСуммыВыполнен Тогда // Если отчет уже подготовлен или не предусмотрен, проверять реквизиты не требуется.
		
		ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(ПравилоОтчета);
		ИмяРеглОтчета    = ИнтерфейсыВзаимодействияБРО.ИмяРеглОтчета(ПолноеИмяПравила);
		
		РеквизитыОрганизацииЗаполнены = ПроверкаРеквизитовОрганизации.РеквизитыДляОтчетностиЗаполнены(
			ИмяРеглОтчета, Объект.Организация, ПериодСобытия, НезаполненныеРеквизиты);
			
		Если НЕ РеквизитыОрганизацииЗаполнены Тогда
			АдресХранилищаНезаполненныхРеквизитов = ПоместитьВоВременноеХранилище(НезаполненныеРеквизиты, УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.СообщениеТребуютсяРеквизиты.Видимость = НЕ РеквизитыОрганизацииЗаполнены;
	
	УстановитьПодсветкуТекущегоБлока(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеПередВыполнениемРасчета()
	
	Если НЕ РеквизитыОрганизацииЗаполнены Тогда
		СообщитьОбОшибкеЗаполненияРеквизитовОрганизации(АдресХранилищаНезаполненныхРеквизитов, Объект.Организация);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СообщитьОбОшибкеЗаполненияРеквизитовОрганизации(АдресХранилищаНезаполненныхРеквизитов, Организация)
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресХранилищаНезаполненныхРеквизитов) Тогда
		Возврат;
	КонецЕсли;
	
	НезаполненныеРеквизиты = ПолучитьИзВременногоХранилища(АдресХранилищаНезаполненныхРеквизитов);
	
	ПроверкаРеквизитовОрганизации.СообщитьОбОшибкеЗаполненияРеквизитовДляОтчетности(
		Организация,
		НезаполненныеРеквизиты,
		"СообщениеТребуютсяРеквизиты",
		Истина);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеФормой

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	ПараметрыТекста = Новый Структура;
	ПараметрыТекста.Вставить("Описание", Описание);
	
	ИспользоватьНесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	Если ИспользоватьНесколькоОрганизаций Тогда 
		ШаблонТекста = НСтр("ru = '[Описание] ([Организация])'");
		НаименованиеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "НаименованиеСокращенное");
		ПараметрыТекста.Вставить("Организация", НаименованиеОрганизации);
	Иначе
		ШаблонТекста = НСтр("ru = '[Описание]'");
	КонецЕсли;
	
	Заголовок = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонТекста, ПараметрыТекста);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	Если Элементы.СтраницыСобытий.ТекущаяСтраница = Элементы.СтраницаСобытийПустая Тогда
		Элементы.СтраницыСобытий.ТекущаяСтраница  = Элементы.СтраницаСобытийРабочая;
	КонецЕсли;
	
	//Расчет
	УправлениеФормойБлокРасчет();
	//Уплата
	УправлениеФормойБлокУплата();
	//Сверка
	УправлениеФормойБлокСверка();
	//ИТС
	УправлениеФормойБлокИТС();
	
	УстановитьПодсветкуТекущегоБлока(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойБлокРасчет()
	
	КУдалению = Новый Массив;
		
	Если НЕ ТребуетсяУплата Тогда
		Элементы.ДекорацияИнформацияРасчетСуммы.Видимость = Ложь;
		Элементы.ОписаниеРасчет.Видимость                 = Ложь;
		Элементы.ОписаниеРасчетИтог.Видимость             = Ложь;
		Элементы.ДекорацияРасчетСуммы.Заголовок = НСтр("ru = 'Подготовка отчета'");
	Иначе
		Элементы.ДекорацияИнформацияРасчетСуммы.Видимость = ЗначениеЗаполнено(ИнформацияРасчетСуммы);
		Элементы.ДекорацияИнформацияРасчетСуммы.Заголовок = Новый ФорматированнаяСтрока(ИнформацияРасчетСуммы, НовыйШрифтКурсив());
		Элементы.ДекорацияНетДанныхДляРасчета.Видимость = ТребуетсяРасчет И Расчет.Количество() = 0 И НЕ ЭтоНулеваяОтчетность;
		Элементы.ДекорацияНетДанныхДляРасчета.Заголовок = ИнформацияНетДанныхДляРасчета;
	КонецЕсли;
	
	// Информация об ограничении отправки
	ОтправкаОтчетаОграничена = Ложь;
	Если ЗначениеЗаполнено(ПравилоОтчета) Тогда
		ОтправкаОтчетаОграничена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПравилоОтчета, "ОтправкаОтчетаОграничена");
		Если ОтправкаОтчетаОграничена = Истина Тогда
			ОтправкаОтчетаОграничена = ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом();
		КонецЕсли;
	КонецЕсли;
	
	Если Не ОтправкаОтчетаОграничена Тогда
		Элементы.СообщениеОтправкаОтчетаОграничена.Видимость = Ложь;
	Иначе
		Элементы.СообщениеОтправкаОтчетаОграничена.Видимость = Истина;
		Элементы.СообщениеОтправкаОтчетаОграничена.Заголовок = ПредставлениеОтправкаОтчетаОграничена(ПравилоОтчета);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ДопИнформацияРасчетСуммы) Тогда
		Элементы.ДекорацияДопИнформацияРасчетСуммы.Заголовок = Новый ФорматированнаяСтрока(ДопИнформацияРасчетСуммы, НовыйШрифтКурсив());
		Элементы.ДекорацияДопИнформацияРасчетСуммы.Видимость = Истина;
	Иначе
		Элементы.ДекорацияДопИнформацияРасчетСуммы.Видимость = Ложь;
	КонецЕсли;
		
	Если РасчетСуммыВыполнен Тогда
		
		Элементы.СтраницаРезультатВыполненияРасчет.Видимость = Истина;
		Элементы.СтраницаВыполнитьДействиеРасчет.Видимость   = Ложь;
		Элементы.ДекорацияСсылкаНаДекларацию.Видимость       = УплатаПоДекларации;
		Элементы.ДекорацияСсылкаНаДекларацию.Заголовок       = ДекларацияНаименование;
		Элементы.ДекорацияСсылкаНаСправкуРасчет.Видимость    = ЗначениеЗаполнено(ИнформацияСправкаРасчет) И ТребуетсяРасчет И Расчет.Количество() > 0 И НЕ ЭтоНулеваяОтчетность;
		Элементы.ДекорацияСсылкаНаСправкуРасчет.Заголовок    = ИнформацияСправкаРасчет;
		
		ВыводитьОКТМО = ВыводитьОКТМО();
		
		Для Каждого СтрокаРасчета Из Расчет Цикл
			НомерКонтейнера = ЗадачиБухгалтераКлиентСервер.НомерКонтейнера(СтрокаРасчета.ПолучитьИдентификатор());
			ИмяЭлемента = "ОписаниеРасчет" + ?(СтрокаРасчета.ЭтоИтоговаяСтрока,"Итог", "");
			Если Элементы.Найти(ИмяЭлемента + НомерКонтейнера) = Неопределено Тогда
				КопироватьЭлементСПодчиненными(ЭтотОбъект, Элементы[ИмяЭлемента], Элементы.СтраницаРезультатВыполненияРасчет, НомерКонтейнера);
			КонецЕсли;
			ОформитьСобытиеРасчетСуммы(СтрокаРасчета, НомерКонтейнера, ВыводитьОКТМО);
			Элементы[ИмяЭлемента + НомерКонтейнера].Видимость = Истина;
		КонецЦикла;
				
	Иначе
		Элементы.СтраницаРезультатВыполненияРасчет.Видимость = Ложь;
		Элементы.СтраницаВыполнитьДействиеРасчет.Видимость   = Истина;
		Элементы.ВыполнитьДействиеРасчетСуммы.Заголовок      = ОписаниеДействияРасчет.Наименование;
	КонецЕсли;
	
	//Удалим лишние контейнеры
	Для Каждого Контейнер Из Элементы.СтраницаРезультатВыполненияРасчет.ПодчиненныеЭлементы Цикл
		Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Контейнер.Имя);
		Если Идентификатор = Неопределено Тогда
			// Это шаблон
			Продолжить;
		КонецЕсли;
		Если Расчет.НайтиПоИдентификатору(Идентификатор) = Неопределено Тогда
			КУдалению.Добавить(Контейнер);
		КонецЕсли;
	КонецЦикла;
	УдалитьНеиспользуемыеЭлементы(КУдалению);
	
	// Уберем шаблоны
	Элементы.ОписаниеРасчет.Видимость     = Ложь;
	Элементы.ОписаниеРасчетИтог.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормойГруппаАктуализация(Форма, Событие, ДатаАктуальностиДанных = '00010101')
	
	Элементы = Форма.Элементы;
	
	// Если автоматическая актуализация невозможна, то вся группа актуализации скрыта.
	// В ином случае:
	// - если налог рассчитывается непосредственно по данным закрытия месяца, то всегда доступна актуализация (если возможна)
	// - если сумма налога берется из декларации и декларация еще не создана (НЕ РасчетСуммыВыполнен);
	ОтображатьАктуализицию = Форма.АктуализацияВозможна 
		И (Форма.РасчетПоДаннымЗакрытияМесяца ИЛИ Форма.УплатаПоДекларации И НЕ Форма.РасчетСуммыВыполнен И Событие = "ТребуетсяАктуализация");
		
	Элементы.Актуализация.Видимость = ОтображатьАктуализицию;
	
	Если НЕ ОтображатьАктуализицию Тогда
		Возврат;
	КонецЕсли;	
		
	Элементы.ИдетАктуализация.Видимость         = (Событие = "ЗапущенаАктуализация");
	Элементы.ИдетПроверкаАктуальности.Видимость = (Событие = "ЗапущенаПроверкаАктуальности");
	
	Если Событие = "ТребуетсяАктуализация" 
		 И (НЕ Форма.РасчетПоДаннымЗакрытияМесяца ИЛИ Форма.Расчет.Количество() > 0) Тогда
		Элементы.ТребуетсяАктуализация.Видимость    = Истина;
		Элементы.ДекорацияАктуальность.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Данные учета неактуальны с %1.'"), Формат(ДатаАктуальностиДанных, "ДФ=dd.MM.yyyy"));
		Элементы.ТребуетсяРасчет.Видимость = Ложь;
	ИначеЕсли Форма.РасчетПоДаннымЗакрытияМесяца 
		 И Событие <> "ЗапущенаАктуализация" И Событие <> "ЗапущенаПроверкаАктуальности" Тогда
		Элементы.ТребуетсяАктуализация.Видимость = Ложь;
		Элементы.ТребуетсяРасчет.Видимость = Истина;
		Если Событие = "ТребуетсяАктуализация" Тогда
			Элементы.Рассчитать.Заголовок = НСтр("ru = 'Рассчитать'");
		Иначе
			Элементы.Рассчитать.Заголовок = НСтр("ru = 'Обновить'");
		КонецЕсли;	
	Иначе
		Элементы.ТребуетсяАктуализация.Видимость = Ложь;
		Элементы.ТребуетсяРасчет.Видимость = Ложь;
	КонецЕсли;		
				
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойБлокУплата()
	
	КУдалению    = Новый Массив;
	ИтогПоУплате = 0;
	
	ТекстИнформацияУплатаНалога = ИнформацияУплатаНалога;
	ШрифтИнформацияУплатаНалога = НовыйШрифтКурсив();
	
	ОсвобождениеОтУплатыНалога = НалоговыйУчет.ВозможноОсвобождениеОтНалога(КодЗадачиУплатыНалога(), ПериодСобытия)
		И НалоговыйУчет.ДеятельностьОтнесенаКПострадавшимОтКоронавируса(Объект.Организация);
		
	Если ОсвобождениеОтУплатыНалога Тогда
		
		Если Справочники.Организации.ЭтоЮрЛицо(Объект.Организация) Тогда
			ШаблонHTML = НСтр("ru = 'Организация освобождена от уплаты %1 за 2 квартал 2020 года
                               |<a href=''Антикризис''>Настройки налогов и отчетов</a>'");
		Иначе
			ШаблонHTML = НСтр("ru = 'Предприниматель освобожден от уплаты %1 за 2 квартал 2020 года
                               |<a href=''Антикризис''>Настройки налогов и отчетов</a>'");
		КонецЕсли;
		// Переход по гиперссылке - в ДекорацияИнформацияУплатаНалогаОбработкаНавигационнойСсылки
		
		ПредставлениеНалогаРодительныйПадеж = ВыполнениеЗадачБухгалтера.ПредставлениеНалогаРодительныйПадеж(КодЗадачиУплатыНалога());
		ТекстИнформацияУплатаНалога = СтроковыеФункции.ФорматированнаяСтрока(СтрШаблон(ШаблонHTML, ПредставлениеНалогаРодительныйПадеж));
		ШрифтИнформацияУплатаНалога = Новый Шрифт;
		
	КонецЕсли;
		
	Элементы.ДекорацияИнформацияУплатаНалога.Заголовок = Новый ФорматированнаяСтрока(
		ТекстИнформацияУплатаНалога,
		ШрифтИнформацияУплатаНалога);
	
	Если НЕ ТребуетсяУплата Или ОсвобождениеОтУплатыНалога Тогда
		Элементы.СтраницыУплата.Видимость = Ложь;
	Иначе
		
		Элементы.СтраницыУплата.Видимость = Истина;
		
		Если ЕстьОплата Тогда
			
			Элементы.СтраницаРезультатВыполненияУплата.Видимость = Истина;
			Элементы.СтраницаВыполнитьДействиеУплата.Видимость   = Ложь;
			
			Для Каждого Платеж Из Платежи Цикл 
				НомерКонтейнера = ЗадачиБухгалтераКлиентСервер.НомерКонтейнера(Платеж.ПолучитьИдентификатор());
				Если Элементы.Найти("ОписаниеПлатеж" + НомерКонтейнера) = Неопределено Тогда
					КопироватьЭлементСПодчиненными(ЭтотОбъект, Элементы.ОписаниеПлатеж, Элементы.СтраницаРезультатВыполненияУплата, НомерКонтейнера);
				КонецЕсли;
				ОформитьСобытиеУплатаНалога(Платеж, НомерКонтейнера);
				Элементы["ОписаниеПлатеж" + НомерКонтейнера].Видимость = Истина;
			КонецЦикла;
			
		Иначе
			
			Элементы.СтраницаРезультатВыполненияУплата.Видимость = Ложь;
			Элементы.СтраницаВыполнитьДействиеУплата.Видимость   = Истина;
			
			СпособОплатыПоУмолчанию = ВыполнениеЗадачБухгалтера.СпособУплатыНалогаВзноса(Объект.Организация);
			Если Не ЗначениеЗаполнено(СпособОплатыПоУмолчанию) Тогда
				
				Элементы.ВыполнитьДействиеУплатаБанк.Видимость  = Истина;
				Элементы.ВыполнитьДействиеУплатаБанк.Заголовок  = НСтр("ru = 'Оплатить через банк'");
				
				Элементы.ВыполнитьДействиеУплатаКасса.Видимость = Истина;
				Элементы.ВыполнитьДействиеУплатаКасса.Заголовок = НСтр("ru = 'Оплатить через кассу'");
				
			ИначеЕсли СпособОплатыПоУмолчанию = Перечисления.СпособыУплатыНалогов.БанковскийПеревод Тогда
				
				//Оплата только через банк
				Элементы.ВыполнитьДействиеУплатаБанк.Видимость  = Истина;
				Элементы.ВыполнитьДействиеУплатаБанк.Заголовок  = НСтр("ru = 'Оплатить'");
				
				Элементы.ВыполнитьДействиеУплатаКасса.Видимость = Ложь;
				
			ИначеЕсли СпособОплатыПоУмолчанию = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции Тогда
				
				//Оплата только через кассу
				Элементы.ВыполнитьДействиеУплатаКасса.Видимость = Истина;
				Элементы.ВыполнитьДействиеУплатаКасса.Заголовок = НСтр("ru = 'Оплатить'");
				
				Элементы.ВыполнитьДействиеУплатаБанк.Видимость  = Ложь;
				
			КонецЕсли;
			
			Элементы.ПредупреждениеНулеваяОтчетность.Видимость = ЭтоНулеваяОтчетность;
			
		КонецЕсли;
	КонецЕсли;
	
	//Удалим лишние контейнеры
	Для Каждого Контейнер Из Элементы.СтраницаРезультатВыполненияУплата.ПодчиненныеЭлементы Цикл
		Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Контейнер.Имя);
		Если Идентификатор = Неопределено Тогда
			// Это шаблон
			Продолжить;
		КонецЕсли;
		Если Платежи.НайтиПоИдентификатору(Идентификатор) = Неопределено Тогда
			КУдалению.Добавить(Контейнер);
		КонецЕсли;
	КонецЦикла;
	УдалитьНеиспользуемыеЭлементы(КУдалению);
	
	//Итог по уплате
	Если Платежи.Количество() > 1 Тогда
		// Обеспечим контейнер для вывода итога, для которго установим числовой идентификатор контейнера "0"
		Если Элементы.Найти("ОписаниеПлатежИтог0") = Неопределено Тогда
			КопироватьЭлементСПодчиненными(ЭтотОбъект, Элементы.ОписаниеПлатежИтог, Элементы.СтраницаРезультатВыполненияУплата, 0);
		КонецЕсли;
		Элементы.ЗначениеПлатежИтог0.Заголовок = Формат(ИтогПоУплате, "ЧЦ=15");
		Элементы.ОписаниеПлатежИтог0.Видимость = Истина;
	КонецЕсли;
	
	// Уберем шаблоны
	Элементы.ОписаниеПлатеж.Видимость     = Ложь;
	Элементы.ОписаниеПлатежИтог.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойБлокСверка()
	
	Если ЕстьПравоНаДОсКО И МожноВыполнятьСверку И Используется1СОтчетность Тогда
		
		Элементы.ГруппаСверка.Видимость = Истина;
		
		Если НЕ ТребуетсяСверка Тогда
			
			Элементы.СтраницыСверка.Видимость  = Ложь;
			Элементы.ДекорацияИнформацияСверка.Заголовок = Новый ФорматированнаяСтрока(НСтр("ru = 'Сверка не требуется'"), НовыйШрифтКурсив());
			ЗаголовокСверки = НСтр("ru = 'Сверка'");
			
		Иначе
			
			Если СверкаВыполнена Тогда
				Элементы.ВыполнитьДействиеСверка.Видимость = Ложь;
				Элементы.СсылкаНаСверку.Видимость = Истина;
				Элементы.СсылкаНаСверку.Заголовок = ЗапросНаСверкуНаименование;
			Иначе
				Элементы.ВыполнитьДействиеСверка.Видимость = Истина;
				Элементы.ВыполнитьДействиеСверка.Заголовок = ОписаниеДействияСверка.Наименование;
				Элементы.СсылкаНаСверку.Видимость = Ложь;
			КонецЕсли;
			
			Если ВыполнениеЗадачБухгалтера.ЭтоСтраховыеВзносы(ПравилоУплаты)
				И НЕ ПлатежиВБюджетКлиентСервер.ДействуетПриказ2017_90н(ТекущаяДатаСеанса()) Тогда
				ЗаголовокСверки = НСтр("ru = 'Сверка с ПФР'");
				Элементы.ДекорацияИнформацияСверка.Заголовок = Новый ФорматированнаяСтрока(
					НСтр("ru = 'Рекомендуется провести сверку, чтобы убедиться в правильности расчетов с фондом 
						|Обычно ответ на запрос сверки приходит в течение 3-6 рабочих дней'"), НовыйШрифтКурсив());
			Иначе
				ЗаголовокСверки = НСтр("ru = 'Сверка с ФНС'");
				Элементы.ДекорацияИнформацияСверка.Заголовок = Новый ФорматированнаяСтрока(
					НСтр("ru = 'Рекомендуется провести сверку, чтобы убедиться в правильности расчетов с бюджетом 
						|Обычно ответ на запрос сверки приходит в течение 3-6 рабочих дней'"), НовыйШрифтКурсив());
			КонецЕсли;
			
		КонецЕсли;
		
		Элементы.ДекорацияСверка.Заголовок = ЗаголовокСверки;
		
	Иначе
		Элементы.ГруппаСверка.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойБлокИТС()
	
	Элементы.ГруппаИТС.Видимость = ЕстьИнформацияНаИТС;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПодсветкуТекущегоБлока(Форма)
	
	Элементы = Форма.Элементы;
	
	Если НЕ Форма.РасчетСуммыВыполнен Тогда
		Элементы.ТребуетсяРасчет.ЦветФона = Новый Цвет;
		Элементы.ВыполнениеДействияУплата.ЦветФона = Новый Цвет;
		Если Форма.РеквизитыОрганизацииЗаполнены Тогда
			Элементы.ВыполнениеДействияРасчет.ЦветФона = Форма.ЦветПодсветкиБлока;
		Иначе
			Элементы.ВыполнениеДействияРасчет.ЦветФона = Новый Цвет;
		КонецЕсли;
	ИначеЕсли Форма.РасчетПоДаннымЗакрытияМесяца И (Форма.ТребуетсяАктуализация И Форма.АктуализацияВозможна ИЛИ Форма.Расчет.Количество() = 0) Тогда
		Элементы.ТребуетсяРасчет.ЦветФона = Форма.ЦветПодсветкиБлока;
		Элементы.ВыполнениеДействияРасчет.ЦветФона = Новый Цвет;
		Элементы.ВыполнениеДействияУплата.ЦветФона = Новый Цвет;
	ИначеЕсли НЕ Форма.ЕстьОплата Тогда
		Элементы.ТребуетсяРасчет.ЦветФона = Новый Цвет;
		Элементы.ВыполнениеДействияРасчет.ЦветФона = Новый Цвет;
		Элементы.ВыполнениеДействияУплата.ЦветФона = Форма.ЦветПодсветкиБлока;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОформитьСобытиеРасчетСуммы(Событие, Номер, ВыводитьОКТМО)
	
	//Налог
	ИмяЭлемента = "НаименованиеПоказателя" + ?(Событие.ЭтоИтоговаяСтрока, "Итог", "") + Номер;
	Элемент = Элементы[ИмяЭлемента];
	Элемент.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Нстр("ru = '%1:'"), Событие.НаименованиеПоказателя);
		
	//ОКТМО
	Если ВыводитьОКТМО Тогда
		Элементы[ИмяЭлемента].РасширеннаяПодсказка.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1: %2'"),
			ПлатежиВБюджетКлиентСервер.ЗаголовокКодаТерритории(),
			Событие.ОКТМО);
	Иначе
		Элементы.НаименованиеПоказателя.РасширеннаяПодсказка.Заголовок = "";
	КонецЕсли;
	
	//Сумма налога
	ИмяЭлемента = "ЗначениеПоказателя" + ?(Событие.ЭтоИтоговаяСтрока, "Итог", "") + Номер;
	Элемент = Элементы[ИмяЭлемента];
	Элемент.Заголовок = Формат(Событие.ЗначениеПоказателя, "ЧЦ=15;ЧН=");
	
КонецПроцедуры

&НаСервере
Процедура ОформитьСобытиеУплатаНалога(Событие, Номер)
	
	Если ЗначениеЗаполнено(Событие.ПлатежноеПоручение) Тогда
		ПредставлениеПлатежногоДокумента = РеквизитыПлатежногоДокумента(Событие.ПлатежноеПоручение, Событие.Оплачено);
		ЗаголовокПлатежа = ПредставлениеПлатежногоДокумента.Наименование;
		СуммаПлатежа     = ПредставлениеПлатежногоДокумента.Сумма;
	Иначе
		ЗаголовокПлатежа = Событие.Наименование;
		СуммаПлатежа     = Событие.Сумма;
	КонецЕсли;
	
	ИтогПоУплате = ИтогПоУплате + СуммаПлатежа;
	// Платежный документ
	Элемент = Элементы["ОткрытьПлатежныйДокумент" + Номер];
	Элемент.Заголовок = ЗаголовокПлатежа;
	
	// Сумма
	Элемент = Элементы["СуммаПлатежногоДокумента" + Номер];
	Элемент.Заголовок = Формат(СуммаПлатежа, "ЧЦ=15");
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанных

&НаКлиенте
Процедура ЗапуститьПолучениеДанныхЗадачи(СоставРазделов, ЗапуститьПроверкуАктуальности = Истина, ВыводитьОкноОжидания = Ложь)

	ДлительнаяОперация = ЗапуститьПолучениеДанныхЗадачиНаСервере(СоставРазделов);
			
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ЗагрузитьРезультат(ДлительнаяОперация.АдресРезультата);
		Если ЗапуститьПроверкуАктуальности Тогда
			ПодключитьПроверкуАктуальности();
		Иначе
			// Даже если не требуется актуализация, то может потребоваться обновить элементы формы, связанные с актуализацией
			УправлениеФормойГруппаАктуализация(ЭтотОбъект, ?(ТребуетсяАктуализация, "ТребуетсяАктуализация", "АктуализацияЗавершенаУспешно"), ДатаАктуальности);
			УстановитьПодсветкуТекущегоБлока(ЭтотОбъект);
		КонецЕсли;	
	Иначе
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = ВыводитьОкноОжидания;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПриПолученииДанныхЗадачи", ЭтотОбъект, ЗапуститьПроверкуАктуальности);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;	
		
КонецПроцедуры
 
&НаСервере
Функция ЗапуститьПолучениеДанныхЗадачиНаСервере(СоставРазделов)
	
	ПараметрыЗадачи = Обработки.ПомощникУплатыНалога.НовыеПараметрыЗадачи();
	ЗаполнитьЗначенияСвойств(ПараметрыЗадачи, ЭтотОбъект);
	ПараметрыЗадачи.Организация = Объект.Организация;
	ЗаполнитьЗначенияСвойств(ПараметрыЗадачи.СоставРазделов, СоставРазделов);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Помощник уплаты налога: получение данных'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ПомощникУплатыНалога.СведенияПоЗадаче",
		ПараметрыЗадачи,
		ПараметрыВыполнения);
				
КонецФункции

&НаКлиенте
Процедура ПриПолученииДанныхЗадачи(Результат, ЗапуститьПроверкуАктуальности) Экспорт 

	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	ЗагрузитьРезультат(Результат.АдресРезультата);
	
	Если ЗапуститьПроверкуАктуальности Тогда
		ПодключитьПроверкуАктуальности();
	Иначе
		// Даже если не требуется актуализация, то может потребоваться обновить элементы формы, связанные с актуализацией
		УправлениеФормойГруппаАктуализация(ЭтотОбъект, ?(ТребуетсяАктуализация, "ТребуетсяАктуализация", "АктуализацияЗавершенаУспешно"), ДатаАктуальности);
		УстановитьПодсветкуТекущегоБлока(ЭтотОбъект);
	КонецЕсли;	
		
КонецПроцедуры
 
&НаКлиенте
Процедура ОбработатьВыполнениеРасчета(РезультатЗакрытия = Неопределено, ЗапуститьПроверкуАктуальности) Экспорт
	
	СоставРазделов = Новый Структура("РасчетУплата, Сверка", Истина, ЕстьПравоНаДОсКО);
	ЗапуститьПолучениеДанныхЗадачи(СоставРазделов, ЗапуститьПроверкуАктуальности, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыполнениеСверки(РезультатЗакрытия = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	СоставРазделов = Новый Структура("РасчетУплата, Сверка", Ложь, Истина);
	ЗапуститьПолучениеДанныхЗадачи(СоставРазделов,, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУплату()
	
	СоставРазделов = Новый Структура("РасчетУплата, Сверка", Истина, Ложь);
	ЗапуститьПолучениеДанныхЗадачи(СоставРазделов,, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультат(АдресРезультата)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
		
	СоставРазделов = Результат.СоставРазделов;
	
	//Расчет, уплата
	Если СоставРазделов.РасчетУплата Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат.СведенияОРасчетеСуммы);
				
		Расчет.Очистить();
		ТаблицаРасчета = Результат.СведенияОРасчетеСуммы.ТаблицаРасчета;
		Если ТаблицаРасчета <> Неопределено Тогда
			Расчет.Загрузить(ТаблицаРасчета);
		КонецЕсли;
		
		Платежи.Очистить();
		ТаблицаПлатежей = Результат.СведенияОРасчетеСуммы.ТаблицаПлатежей;
		Если ТаблицаПлатежей <> Неопределено Тогда
			Платежи.Загрузить(ТаблицаПлатежей);
		КонецЕсли;
		
		СпособОплаты = ВыполнениеЗадачБухгалтера.СпособУплатыНалогаВзноса(Объект.Организация);
		
		ПроверитьРеквизитыОрганизацииДляОтчетности();
		
	КонецЕсли;
	
	//Сверка
	Если СоставРазделов.Сверка Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат.СведенияОСверке);
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеДекларации(Декларация)
	Возврат Обработки.ПомощникУплатыНалога.ПредставлениеДекларации(Декларация);
КонецФункции

#КонецОбласти

#Область ПроверкаАктуальности 

&НаКлиенте
Процедура ПодключитьПроверкуАктуальности()
	
	Если НЕ РасчетПоДаннымЗакрытияМесяца 
		И (РасчетСуммыВыполнен ИЛИ НЕ УплатаПоДекларации ИЛИ НЕ АктуализацияВозможна) Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьАктуальность", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьАктуальность()
	
	ЗаданиеАктуализации = ЗакрытиеМесяцаВызовСервера.НайтиФоновоеЗаданиеАктуализацииПоОрганизации(Объект.Организация, УникальныйИдентификатор);
	
	Если ЗаданиеАктуализации = Неопределено Или Не ЗначениеЗаполнено(ЗаданиеАктуализации.УникальныйИдентификатор) Тогда
		ПроверитьАктуальностьДанных();
	Иначе
		
		Если ИдентификаторЗаданияАктуализации <> ЗаданиеАктуализации.УникальныйИдентификатор Тогда
			// Задание запущено в другой форме
			ИдентификаторЗаданияАктуализации = ЗаданиеАктуализации.УникальныйИдентификатор;
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеАктуализации",
				ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал,
				Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьАктуальностьДанных()
	
	УправлениеФормойГруппаАктуализация(ЭтотОбъект, "ЗапущенаПроверкаАктуальности");
		
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
	ИдентификаторЗаданияАктуализации = Неопределено;
	
	УИДЗамера = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь, "АктуализацияДанныхТребуетсяАктуализацияЗаПериод");
	
	ПараметрыПроверки = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыПроверкиАктуальности();
	ПараметрыПроверки.Организация                  = Объект.Организация;
	ПараметрыПроверки.Период                       = ПериодСобытия;
	ПараметрыПроверки.УникальныйИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыПроверки.УИДЗамера                    = УИДЗамера;
	ПараметрыПроверки.АктуализироватьВесьПериод    = РасчетПоДаннымЗакрытияМесяца;
	
	РезультатВыполнения = ЗакрытиеМесяцаВызовСервера.ПроверитьАктуальность(ПараметрыПроверки);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультатПроверкиАктуальности", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатВыполнения, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеАктуализации()
	
	Если ЗакрытиеМесяцаВызовСервера.ЗаданиеВыполнено(ИдентификаторЗаданияАктуализации) Тогда
		ОбработатьРезультатАктуализации();
		ИдентификаторЗаданияАктуализации = Неопределено;
	Иначе
		ОбновитьПроцентПрогресса();
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации",
			ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатПроверкиАктуальности(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	РезультатПроверки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если РезультатПроверки.УИДЗамера <> Неопределено Тогда
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(РезультатПроверки.УИДЗамера);
	КонецЕсли;
	
	Если НЕ РезультатПроверки.ТребуетсяАктуализация Тогда
		ТребуетсяАктуализация = Ложь;
		Оповестить("АктуализацияЗавершенаУспешно", Новый Структура("Организация", Объект.Организация));
	Иначе
		ДатаАктуальности = РезультатПроверки.ДатаАктуальности;
		ПараметрыОповещения = Новый Структура("Организация, ДатаАктуальности", 
			Объект.Организация, ДатаАктуальности);
		ТребуетсяАктуализация = Истина;
		Оповестить("ТребуетсяАктуализация", ПараметрыОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатАктуализации()
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
	РезультатАктуализации = ПолучитьИзВременногоХранилища(АдресХранилищаАктуализации);
	
	ПараметрыОповещения = Новый Структура("Организация", Объект.Организация);
	Если РезультатАктуализации.Выполнено Тогда
		ТребуетсяАктуализация = Ложь;
		Оповестить("АктуализацияЗавершенаУспешно", ПараметрыОповещения);
		Если РасчетПоДаннымЗакрытияМесяца Тогда
			// Запускаем загрузку обновленных данных расчета
			ОбработатьВыполнениеРасчета(, Ложь);
		КонецЕсли;	
	Иначе
		ЗакрытиеМесяцаКлиент.ПоказатьОшибкиАктуализации(ЭтотОбъект, РезультатАктуализации);
		Оповестить("АктуализацияОтменена", ПараметрыОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьДанные()
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
	ОтобразитьСостояниеАктуализации();
	
	ПараметрыАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыАктуализации();
	ПараметрыАктуализации.Организация                  = Объект.Организация;
	ПараметрыАктуализации.Период                       = ПериодСобытия;
	ПараметрыАктуализации.ИдентификаторЗадания         = ИдентификаторЗаданияАктуализации;
	ПараметрыАктуализации.УникальныйИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыАктуализации.АктуализироватьВесьПериод	   = РасчетПоДаннымЗакрытияМесяца; // актуализация до даты события
	
	РезультатВыполнения = ЗакрытиеМесяцаВызовСервера.АктуализироватьДанные(ПараметрыАктуализации);
	
	АдресХранилищаАктуализации = РезультатВыполнения.АдресХранилища;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ОбработатьРезультатАктуализации();
		ИдентификаторЗаданияАктуализации = Неопределено;
	Иначе
		ИдентификаторЗаданияАктуализации = РезультатВыполнения.ИдентификаторЗадания;
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
		ПодключитьОбработчикОжидания(
			"Подключаемый_ПроверитьВыполнениеАктуализации",
			ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал,
			Истина);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСостояниеАктуализации(ВыполняемоеЗаданиеАктуализации = Неопределено) 
	
	ИдетАктуализация = ВыполняемоеЗаданиеАктуализации = Неопределено;
	
	Если НЕ ИдетАктуализация Тогда
		
		// Актуализация выполняется в другом отчете или другим пользователем.
		Если ПустаяСтрока(ВыполняемоеЗаданиеАктуализации.УникальныйИдентификатор) Тогда
			// Актуализация выполняется другим пользователем в файловом режиме.
			ТекстПриАктуализации = НСтр("ru = 'Актуализация данных, запущенная другим пользователем, еще не закончилась. Данные для расчета могут быть неактуальны.'");
		ИначеЕсли ВыполняемоеЗаданиеАктуализации.Пользователь <> ПользователиКлиентСервер.ТекущийПользователь() Тогда 
			// Актуализация выполняется другим пользователем в клиент-серверном режиме.
			ТекстПриАктуализации = СтрШаблон(НСтр("ru = 'Идет актуализация данных пользователем %1. Данные для расчета могут быть неактуальны.'"),
				ВыполняемоеЗаданиеАктуализации.Пользователь);
		Иначе
			// Актуализация выполняется текущим пользователем в другом отчете.
			ТекстПриАктуализации = НСтр("ru = 'Актуализация данных, запущенная в другом отчете, еще не закончилась. Данные для расчета могут быть неактуальны.'");
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормойГруппаАктуализация(ЭтотОбъект, "ЗапущенаАктуализация");
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьПроцентПрогресса()
	
	Прогресс = ЗакрытиеМесяцаВызовСервера.ПрочитатьПрогресс(ИдентификаторЗаданияАктуализации);
	
	Если ТипЗнч(Прогресс) = Тип("Структура") И Прогресс.Свойство("Процент") Тогда
		Процент = Мин(Прогресс.Процент, 99);
		ПрогрессорАктуализации = Строка(Процент) + "%.";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеДокументовУплаты

&НаКлиенте
Процедура Уплатить()
	
	// Если платежей несколько, то создаем и проводим документы.
	Если Платежи.Количество() > 1 Тогда
		СформироватьДокументы();
		ОбработатьУплату();
		Возврат;
	Иначе
		
		ИмяФормыПлатежногоДокумента = 
		?(СпособОплаты = ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.НаличнымиПоКвитанции"),
		"Документ.РасходныйКассовыйОрдер.ФормаОбъекта", "Документ.ПлатежноеПоручение.ФормаОбъекта");
		
		Если Платежи.Количество() = 0 Тогда
			ПараметрыФормыПлатежногоДокумента = ПараметрыФормыПлатежногоДокумента(Неопределено);
		Иначе
			ПараметрыФормыПлатежногоДокумента =  ПараметрыФормыПлатежногоДокумента(Платежи[0].ПолучитьИдентификатор());
		КонецЕсли;
		
		ОткрытьФорму(ИмяФормыПлатежногоДокумента, ПараметрыФормыПлатежногоДокумента, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДокументы()
	
	СозданныеПлатежныеПоручения = Новый Массив;
	
	Для каждого СтрокаПлатежа Из Платежи Цикл
		
		Если ЗначениеЗаполнено(СтрокаПлатежа.ПлатежноеПоручение) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = Неопределено;
		
		ПараметрыФормы = ПараметрыФормыПлатежногоДокументаПоСтроке(СтрокаПлатежа);
		Если СпособОплаты = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции Тогда
			
			ДокументОбъект = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
			ДокументОбъект.Заполнить(ПараметрыФормы.ЗначенияЗаполнения);
			
			Результат = ЗаписатьПлатежныйДокумент(ДокументОбъект, СтрокаПлатежа);
			
		Иначе
			
			ДокументОбъект = Документы.ПлатежноеПоручение.СоздатьДокумент();
			ДокументОбъект.Заполнить(ПараметрыФормы.ЗначенияЗаполнения);
			
			Результат = ЗаписатьПлатежныйДокумент(ДокументОбъект, СтрокаПлатежа);
			СозданныеПлатежныеПоручения.Добавить(ДокументОбъект.Ссылка);
			
		КонецЕсли;
			
		Если ЗначениеЗаполнено(Результат) Тогда
			СтрокаПлатежа.ПлатежноеПоручение = Результат;
		КонецЕсли;
		
	КонецЦикла;
	
	РегистрыСведений.ДокументыИнтеграцииСБанком.ОтправитьОповещениеОбИзмененииПоДокументамВФоне(СозданныеПлатежныеПоручения);
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьПлатежныйДокумент(ДокументОбъект, СтрокаПлатежа)
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	Попытка
		
		// Если документ заполнен без ошибок, то проводим, предварительно записываем для привязки сообщений об ошибках
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		БезОшибок = ДокументОбъект.ПроверитьЗаполнение();
		Если БезОшибок Тогда
			ВыполнениеЗадачБухгалтера.УстановитьСвойстваПлатежаПриРегистрации(ДокументОбъект, ПравилоУплаты, ПериодСобытия);
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		
		Возврат ДокументОбъект.Ссылка;
	Исключение
		ТекстСообщения = НСтр("ru = 'Не сформирован документ ""%1"" на %2 руб.%3'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, МетаданныеДокумента.Синоним, СтрокаПлатежа.Сумма, Описание);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ТекстОшибки = НСтр("ru = 'Не удалось создать документ.
			|%1'");
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Помощник уплаты налога'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,
			МетаданныеДокумента,
			,
			ОписаниеОшибки);
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ПараметрыФормыПлатежногоДокументаПоСтроке(СтрокаПлатежа)
	
	Если ЗначениеЗаполнено(СтрокаПлатежа.ПлатежноеПоручение) Тогда
		Возврат Новый Структура("Ключ", СтрокаПлатежа.ПлатежноеПоручение);
	КонецЕсли;
	
	ОписаниеПлатежа = ВыполнениеЗадачБухгалтера.НовыйОписаниеПлатежа();
	ОписаниеПлатежа.Период                     = ПериодСобытия;
	ОписаниеПлатежа.Налог                      = СтрокаПлатежа.Налог;
	ОписаниеПлатежа.ВидНалоговогоОбязательства = ?(ЗначениеЗаполнено(СтрокаПлатежа.ВидНалоговогоОбязательства),
		СтрокаПлатежа.ВидНалоговогоОбязательства,
		Перечисления.ВидыПлатежейВГосБюджет.Налог);
	ОписаниеПлатежа.Организация                = Объект.Организация;
	ОписаниеПлатежа.СпособОплаты               = СпособОплаты;
	ОписаниеПлатежа.ПоказательПериода          = ?(ЗначениеЗаполнено(СтрокаПлатежа.НалоговыйПериод), СтрокаПлатежа.НалоговыйПериод, ПоказательПериода);
	ОписаниеПлатежа.Аванс                      = СтрокаПлатежа.Аванс;
	ОписаниеПлатежа.КБК                        = СтрокаПлатежа.КБК;
	ОписаниеПлатежа.ОКАТО                      = СтрокаПлатежа.ОКАТО;
	ОписаниеПлатежа.КодНалоговогоОргана        = СтрокаПлатежа.КодНалоговогоОргана;
	ОписаниеПлатежа.Сумма                      = СтрокаПлатежа.Сумма;
	ОписаниеПлатежа.Описание                   = Описание;
	ОписаниеПлатежа.Декларация                 = Декларация;
	ОписаниеПлатежа.ДатаДекларации             = ДатаДекларации;
	
	КПППлательщика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНалоговомОргане, "КПП");
	Если УплатаПоМестуПостановкиНаУчет И ЗначениеЗаполнено(КПППлательщика) Тогда
		ОписаниеПлатежа.КПППлательщика = КПППлательщика;
	КонецЕсли;	
	
	ЗначенияЗаполнения = ВыполнениеЗадачБухгалтера.ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа);
	
	Возврат Новый Структура("ЗначенияЗаполнения, ПериодСобытия, Правило", ЗначенияЗаполнения, ПериодСобытия, ПравилоУплаты);
	
КонецФункции

&НаСервере
Функция ПараметрыФормыПустогоПлатежногоДокумента()
	
	ОписаниеПлатежа = ВыполнениеЗадачБухгалтера.НовыйОписаниеПлатежа();
	ОписаниеПлатежа.Период                     = ПериодСобытия;
	ОписаниеПлатежа.Налог                      = Налог;
	ОписаниеПлатежа.Организация                = Объект.Организация;
	ОписаниеПлатежа.СпособОплаты               = СпособОплаты;
	ОписаниеПлатежа.ПоказательПериода          = ПоказательПериода;
	ОписаниеПлатежа.КБК                        = КБК;
	ОписаниеПлатежа.КодНалоговогоОргана        = КодНалоговогоОргана;
	ОписаниеПлатежа.Описание                   = Описание;
	ОписаниеПлатежа.Декларация                 = Декларация;
	ОписаниеПлатежа.ДатаДекларации             = ДатаДекларации;
	
	КПППлательщика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНалоговомОргане, "КПП");
	Если УплатаПоМестуПостановкиНаУчет И ЗначениеЗаполнено(КПППлательщика) Тогда
		ОписаниеПлатежа.КПППлательщика = КПППлательщика;
	КонецЕсли;	
	
	ЗначенияЗаполнения = ВыполнениеЗадачБухгалтера.ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа);
	
	Возврат Новый Структура("ЗначенияЗаполнения, ПериодСобытия, Правило", ЗначенияЗаполнения, ПериодСобытия, ПравилоУплаты);
	
КонецФункции

&НаСервере
Функция ПараметрыФормыПлатежногоДокумента(Идентификатор)
	
	Если Идентификатор = Неопределено Тогда 
		//Получим параметры формы для пустого документа
		Возврат ПараметрыФормыПустогоПлатежногоДокумента();
	КонецЕсли;
	
	СтрокаПлатежа = Платежи.НайтиПоИдентификатору(Идентификатор);
	Если СтрокаПлатежа = Неопределено Тогда
		Возврат ПараметрыФормыПустогоПлатежногоДокумента();
	КонецЕсли;
	
	Возврат ПараметрыФормыПлатежногоДокументаПоСтроке(СтрокаПлатежа);
	
КонецФункции

#КонецОбласти

#Область Антикризис

&НаСервере
Процедура НастроитьАнтикризис()
	
	НастроитьБаннерАнтикризис();
	
	УправлениеФормойБлокУплата();
	
КонецПроцедуры

&НаСервере
Функция КодЗадачиУплатыНалога()
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПравилоУплаты, "Владелец.Код");
КонецФункции

&НаКлиенте
Процедура ОткрытьНастройкиАнтикризис(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "Антикризис" Тогда
		СтандартнаяОбработка = Ложь;
		НастройкиУчетаКлиент.ОткрытьНастройкиАнтикризис(Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры

#Область БаннерАнтикризисНастройкиНалоговИОтчетов

&НаСервере
Процедура НастроитьБаннерАнтикризис()
	
	ТекстБаннера = НалоговыйУчет.ТекстБаннераНастройкиНалоговИОтчетов(Объект.Организация, КодЗадачиУплатыНалога());
	УстановитьВидимостьБаннераАнтикризис();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЗакрытьБаннерНажатие(Элемент)
	
	СкрытьБаннерАнтикризис();
	
КонецПроцедуры

&НаСервере
Процедура СкрытьБаннерАнтикризис()
	
	НалоговыйУчет.СохранитьНастройкуБаннераАнтикризис(Объект.Организация, КодЗадачиУплатыНалога(), Ложь);
	
	УстановитьВидимостьБаннераАнтикризис();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьБаннераАнтикризис()
	
	Элементы.ГруппаБаннерНастройкаНалоговИОтчетов.Видимость = НалоговыйУчет.ВидимостьБаннераАнтикризис(
		Объект.Организация,
		КодЗадачиУплатыНалога(),
		ПериодСобытия);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти
