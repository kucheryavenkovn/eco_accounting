#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Ценник") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"Ценник", "Ценник", 
			СформироватьПечатнуюФорму(МассивОбъектов, ПараметрыПечати, ОбъектыПечати));
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Этикетка") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"Этикетка", "Этикетка", 
			СформироватьПечатнуюФорму(МассивОбъектов, ПараметрыПечати, ОбъектыПечати));
	КонецЕсли;
КонецПроцедуры

Функция НовыйШтрихкодыМаркируемойПродукции() Экспорт
	ШтрихкодыМаркируемойПродукции = Новый ТаблицаЗначений;
	
	// ИдентификаторСтроки - ключ который связывает конкретную этикетку с кодом маркировки. Имеет смысл только для маркированных товаров.
	ШтрихкодыМаркируемойПродукции.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Строка"));
	
	ШтрихкодыМаркируемойПродукции.Колонки.Добавить("Организация",         Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ШтрихкодыМаркируемойПродукции.Колонки.Добавить("Номенклатура",        Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ШтрихкодыМаркируемойПродукции.Колонки.Добавить("Количество",          Новый ОписаниеТипов("Число"));
	
	ШтрихкодыМаркируемойПродукции.Колонки.Добавить("ТипШтрихкода",        Новый ОписаниеТипов("ПеречислениеСсылка.ТипыШтрихкодов"));
	ШтрихкодыМаркируемойПродукции.Колонки.Добавить("Штрихкод",            Новый ОписаниеТипов("Строка"));
	ШтрихкодыМаркируемойПродукции.Колонки.Добавить("ШтрихкодУпаковки",    Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	
	ШтрихкодыМаркируемойПродукции.Колонки.Добавить("СерийныйНомер",       Новый ОписаниеТипов("Строка"));
	ШтрихкодыМаркируемойПродукции.Колонки.Добавить("GTIN",                Новый ОписаниеТипов("Строка"));
	
	Возврат ШтрихкодыМаркируемойПродукции;
КонецФункции

Функция ТабличныйДокументЭтикетка(МассивОбъектов, ШаблонЭтикетки, ШтрихкодыМаркируемойПродукции, КаждаяЭтикеткаНаНовомЛисте) Экспорт

	ПараметрыШаблонаЭтикеток = Справочники.ХранилищеШаблонов.ПараметрыШаблонаЭтикеток(ШаблонЭтикетки);
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("XMLОписаниеМакета",             ПараметрыШаблонаЭтикеток.XMLОписаниеМакета);
	ПараметрыПечати.Вставить("АдресХранилищаСКД",             ПараметрыШаблонаЭтикеток.АдресХранилищаСКД);
	ПараметрыПечати.Вставить("ШтрихкодыМаркируемойПродукции", ШтрихкодыМаркируемойПродукции);
	ПараметрыПечати.Вставить("Количество",                    1);
	ПараметрыПечати.Вставить("ТипЦен",                        Справочники.ТипыЦенНоменклатуры.ЗначениеПоУмолчанию());
	ПараметрыПечати.Вставить("Разрешение",                    РазрешениеТабличногоДокумента());
	ПараметрыПечати.Вставить("КаждаяЭтикеткаНаНовомЛисте",    КаждаяЭтикеткаНаНовомЛисте);
	
	Возврат СформироватьПечатнуюФорму(МассивОбъектов, ПараметрыПечати, Новый СписокЗначений);
КонецФункции

Функция РазрешениеТабличногоДокумента() Экспорт

	Разрешение = Новый Структура;
	
	Эталон = Справочники.ПодключаемоеОборудование.ПолучитьМакет("МакетДляОпределенияКоэффициентовЕдиницИзмерения");
	Рисунок = Эталон.Рисунки[0];
	
	ВысотаСтрокиВМиллиметрах = Рисунок.Верх;
	ШиринаСтолбцаВМиллиметрах = Рисунок.Лево;
	
	ВысотаСтроки	= Эталон.Область("R1").ВысотаСтроки;
	ШиринаСтолбца	= Эталон.Область("C1").ШиринаКолонки;
		
	Разрешение.Вставить("КоличествоМиллиметровВПикселеВысота", Рисунок.Высота/200);
	Разрешение.Вставить("КоличествоМиллиметровВПикселеШирина", Рисунок.Ширина/200);
	Разрешение.Вставить("ОдинМиллиметрШирины",                 ШиринаСтолбца / ШиринаСтолбцаВМиллиметрах);
	Разрешение.Вставить("ОдинМиллиметрВысоты",                 ВысотаСтроки / ВысотаСтрокиВМиллиметрах);
	
	Возврат Разрешение;
КонецФункции 

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция СформироватьПечатнуюФорму(МассивОбъектов, ПараметрыПечати, ОбъектыПечати)
	Перем СодержимоеXMLФайла, СообщениеОбОшибке, ШтрихкодыМаркируемойПродукции, КаждаяЭтикеткаНаНовомЛисте;
	
	Если НЕ ПараметрыПечати.Свойство("КаждаяЭтикеткаНаНовомЛисте", КаждаяЭтикеткаНаНовомЛисте) Тогда
		КаждаяЭтикеткаНаНовомЛисте = Ложь;
	КонецЕсли; 
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПечатьЭтикеток";
	АвтоМасштаб = ТабличныйДокумент.АвтоМасштаб;
	
	ТабличныйДокумент.АвтоМасштаб = Ложь;
	
	ПервыйМакет = Истина;
	
	Разрешение = ПараметрыПечати.Разрешение;
	
	XMLОписаниеМакета = Неопределено;
	Если ЗначениеЗаполнено(ПараметрыПечати.XMLОписаниеМакета) Тогда
		XMLОписаниеМакета = ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(ПараметрыПечати.XMLОписаниеМакета);
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(XMLОписаниеМакета) Тогда
		СообщениеОбОшибке = НСтр("ru = 'Необходимо настроить шаблон этикетки.'");
	ИначеЕсли МенеджерОборудованияВызовСервера.ПолучитьОписаниеМакета(XMLОписаниеМакета, СообщениеОбОшибке, СодержимоеXMLФайла) Тогда
		
		ШиринаЭтикетки = СодержимоеXMLФайла.Ширина;
		ВысотаЭтикетки = СодержимоеXMLФайла.Высота;
		
		Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1); 
		
		Если ПараметрыПечати.Свойство("ШтрихкодыМаркируемойПродукции", ШтрихкодыМаркируемойПродукции) Тогда
			ТаблицаНоменклатуры = НоменклатураДляЭтикетокМаркируемойПродукции(ШтрихкодыМаркируемойПродукции);
		Иначе
			ШтрихкодыМаркируемойПродукции = НовыйШтрихкодыМаркируемойПродукции();
			
			ТаблицаНоменклатуры = НоменклатураДляПечатиЦенников(МассивОбъектов);
		КонецЕсли;
		
		СписокНоменклатуры  = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаНоменклатуры,"НоменклатураСсылка", Истина);
		
		ДанныеЭтикеток = ДанныеДляПечатиЭтикеток(ТаблицаНоменклатуры, ПараметрыПечати.АдресХранилищаСКД, XMLОписаниеМакета, ПараметрыПечати.ТипЦен, ШтрихкодыМаркируемойПродукции);
		
		Для каждого ДанныеЭтикетки Из ДанныеЭтикеток.ДанныеДляПечатиЭтикеток Цикл
			
			МакетЭтикетки = ЗаполнитьТабличныйДокумент(Разрешение, ДанныеЭтикетки, СообщениеОбОшибке).ПолучитьОбласть(1, 1, ВысотаЭтикетки+1, ШиринаЭтикетки+1);
			
			МакетЭтикетки.Область().АвтоВысотаСтроки = Ложь;
			МакетЭтикетки.Область().ВысотаСтроки =  Разрешение.ОдинМиллиметрВысоты;
			МакетЭтикетки.Область().ШиринаКолонки = Разрешение.ОдинМиллиметрШирины;
			
			МакетЭтикетки.Область(2,2,ВысотаЭтикетки, ШиринаЭтикетки).Обвести(Линия, Линия, Линия, Линия);
			
			Для Счетчик = 1 По ПараметрыПечати.Количество * ДанныеЭтикетки.Количество Цикл
				
				Попытка
					МожноПрисоединить = НЕ КаждаяЭтикеткаНаНовомЛисте 
						И ТабличныйДокумент.ПроверитьПрисоединение(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(МакетЭтикетки));
				Исключение
					// Если принтер не установлен, или пользователь выбрал каждую этикетку отдельно печатаем все в столбец
					МожноПрисоединить = НЕ КаждаяЭтикеткаНаНовомЛисте;
				КонецПопытки;
				
				Если МожноПрисоединить Тогда
					ТабличныйДокумент.Присоединить(МакетЭтикетки);
				Иначе
					МожноВывести = НЕ КаждаяЭтикеткаНаНовомЛисте 
						И ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(МакетЭтикетки), Ложь);
					
					Если НЕ МожноВывести И НЕ ПервыйМакет Тогда
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					
					ПервыйМакет = Ложь;
					
					ТабличныйДокумент.Вывести(МакетЭтикетки);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 1, ОбъектыПечати, МассивОбъектов[0]);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
	КонецЕсли; 
	
	ТабличныйДокумент.АвтоМасштаб = АвтоМасштаб;
	
	Возврат ТабличныйДокумент;
КонецФункции

Функция ДанныеДляПечатиЭтикеток(СписокНоменклатуры, АдресХранилищаСКД, Знач XMLОписаниеМакета, ТипЦен, ШтрихкодыМаркировки = Неопределено) Экспорт
	Перем СодержимоеXMLФайла, СообщениеОбОшибке, ЗначениеРеквизита;
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("Успешно", Истина);
	РезультатВыполнения.Вставить("СообщениеОбОшибке");
	РезультатВыполнения.Вставить("ДанныеДляПечатиЭтикеток", Новый Массив);
	
	XMLОписаниеМакета = ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(XMLОписаниеМакета);
	
	Если НЕ ЗначениеЗаполнено(АдресХранилищаСКД) ИЛИ НЕ ЗначениеЗаполнено(XMLОписаниеМакета) Тогда
		РезультатВыполнения.Вставить("Успешно", Ложь);
		РезультатВыполнения.Вставить("СообщениеОбОшибке", НСтр("ru = 'Необходимо настроить шаблон этикетки.'"));
		Возврат РезультатВыполнения;
	КонецЕсли; 
	
	Если НЕ МенеджерОборудованияВызовСервера.ПолучитьОписаниеМакета(XMLОписаниеМакета, СообщениеОбОшибке, СодержимоеXMLФайла) Тогда
		РезультатВыполнения.Вставить("Успешно", Ложь);
		РезультатВыполнения.Вставить("СообщениеОбОшибке", СообщениеОбОшибке);
		Возврат РезультатВыполнения;
	КонецЕсли; 
	
	СписокПолейМакета = Обработки.ПечатьЭтикеток.СписокПолейМакета(СодержимоеXMLФайла);
	
	РезультатВыполненияЗапроса = ПолучитьРезультатВыполненияЗапроса(АдресХранилищаСКД, СписокНоменклатуры,  ШтрихкодыМаркировки, СписокПолейМакета, ТипЦен);
	
	Если РезультатВыполненияЗапроса.Количество() = 0 Тогда
		РезультатВыполнения.Вставить("Успешно", Ложь);
		РезультатВыполнения.Вставить("СообщениеОбОшибке", НСТр("ru = 'Не удалось получить данные для печати этикетки.'"));
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	// Типы кодов маркировки которые нуждаются в преобразовании перед передачей в компоненту.
	СоответствиеТиповКодовМаркировки = Новый Соответствие;
	
	СоответствиеТиповКодовМаркировки.Вставить("GS1-DataMatrix",            24);
	СоответствиеТиповКодовМаркировки.Вставить("GS1DataBarExpandedStacked", 17);
	СоответствиеТиповКодовМаркировки.Вставить("EAN128",                    2);
	
	СтруктураОтбора = Новый Структура("НоменклатураСсылка,ИдентификаторСтроки");
	
	Для каждого ЭлементНоменклатуры Из СписокНоменклатуры Цикл
		ДанныеЭтикетки = НовыйДанныеЭтикетки();
		ДанныеЭтикетки.Количество = ЭлементНоменклатуры.Количество;
		Для каждого ПолеМакета Из СписокПолейМакета Цикл
			Если ПолеМакета.Тип = "UserData" Тогда
				Продолжить;
			КонецЕсли;
			
			// Для каждой номенклатуры будет несколько записей результата запроса, отличающихся кодом маркировки.
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, ЭлементНоменклатуры);
			НайденныеСтроки = РезультатВыполненияЗапроса.НайтиСтроки(СтруктураОтбора);
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			ЗначенияРеквизитов = НайденныеСтроки[0].ЗначенияРеквизитов;
			
			ЗначенияПолей = Новый Структура;
			ЗначенияПолей.Вставить("ИмяПоля",          ПолеМакета.Наименование);
			ЗначенияПолей.Вставить("ОписаниеПоля",     ПолеМакета);
			
			КлючЗначенияРеквизита = "_"+СтрЗаменить(ПолеМакета.Наименование, "-", "");
			
			Если НЕ (ПолеМакета.Тип = "Barcode" ИЛИ ПолеМакета.ТипЗаполнения = "Parameter")
				ИЛИ НЕ ЗначениеЗаполнено(ПолеМакета.Значение) 
				ИЛИ НЕ ЗначенияРеквизитов.Свойство(КлючЗначенияРеквизита, ЗначениеРеквизита) Тогда
				
				ЗначениеРеквизита = "";
			КонецЕсли;
			
			Если ПолеМакета.Тип = "Barcode" Тогда
				ПараметрыШтрихкода = Новый Структура;
				ПараметрыШтрихкода.Вставить("ТипВходныхДанных", 0);
				
				// Если это штрихкод из регистра и он не задан - то сгенерируем его "на лету"
				Если ПолеМакета.Значение = "Штрихкод" 
					И НЕ ЗначениеЗаполнено(ЗначениеРеквизита)  Тогда
					
					ПараметрыШтрихкода.Вставить("Штрихкод", 
						РегистрыСведений.ШтрихкодыНоменклатуры.СформироватьШтрихкодEAN13(ЭлементНоменклатуры.НоменклатураСсылка));
						
				ИначеЕсли ПолеМакета.Значение = "ШтрихкодМаркировки" 
					И ТипЗнч(ДанныеИзСтрокиJSON(ЗначениеРеквизита)) = Тип("Структура")
					И СоответствиеТиповКодовМаркировки[ПолеМакета.ТипШтрихкода] <> Неопределено Тогда
					
					СтруктураШтрихкода = ДанныеИзСтрокиJSON(ЗначениеРеквизита);
					
					Если СтруктураШтрихкода.Свойство("ШтрихкодВBase64") 
						И СтруктураШтрихкода.ШтрихкодВBase64 Тогда
						
						ПараметрыШтрихкода.Вставить("ТипВходныхДанных", 1);
						ПараметрыШтрихкода.Вставить("Штрихкод",         СтруктураШтрихкода.Штрихкод);
						
					Иначе
						ПараметрыШтрихкода.Вставить("Штрихкод", 
							ШтрихкодированиеИС.КодGS1ДляКомпонентыПечати(
								СтруктураШтрихкода.Штрихкод, 
								СоответствиеТиповКодовМаркировки[ПолеМакета.ТипШтрихкода]));
					КонецЕсли;
				Иначе
					ПараметрыШтрихкода.Вставить("Штрихкод", СокрЛП(Строка(ЗначениеРеквизита)));
				КонецЕсли;
				
				ЗначенияПолей.Вставить("Значение", ПараметрыШтрихкода);
			ИначеЕсли ПолеМакета.ТипЗаполнения = "Parameter" Тогда
				Если ТипЗнч(ЗначениеРеквизита) = Тип("ХранилищеЗначения") Тогда
					ЗначениеРеквизита = ЗначениеРеквизита.Получить();
					
					Если ТипЗнч(ЗначениеРеквизита) = Тип("ДвоичныеДанные") Тогда
						ЗначениеРеквизита = Base64Строка(ЗначениеРеквизита);
					Иначе
						ЗначениеРеквизита = Строка(ЗначениеРеквизита);
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
					ЗначенияПолей.Вставить("Значение", ?(ЗначениеЗаполнено(ПолеМакета.Формат), Формат(ЗначениеРеквизита, ПолеМакета.Формат), ЗначениеРеквизита));
				Иначе
					Если ЗначениеЗаполнено(ПолеМакета.ЗначениеПоУмолчанию) Тогда
						ЗначенияПолей.Вставить("Значение", ?(ЗначениеЗаполнено(ПолеМакета.Формат), Формат(ПолеМакета.ЗначениеПоУмолчанию, ПолеМакета.Формат), ПолеМакета.ЗначениеПоУмолчанию));
					Иначе
						ЗначенияПолей.Вставить("Значение", ?(ЗначениеЗаполнено(ПолеМакета.Формат), Формат("", ПолеМакета.Формат), ""));
					КонецЕсли;
				КонецЕсли;
			Иначе
				ЗначенияПолей.Вставить("Значение", ПолеМакета.Значение);
			КонецЕсли;
			
			ДанныеЭтикетки.Поля.Добавить(ЗначенияПолей);
		КонецЦикла;
		РезультатВыполнения.ДанныеДляПечатиЭтикеток.Добавить(ДанныеЭтикетки);
	КонецЦикла;
	
	Возврат РезультатВыполнения;
КонецФункции 

Функция НовыйДанныеЭтикетки()

	ДанныеЭтикетки = Новый Структура;
	ДанныеЭтикетки.Вставить("Количество", 1);
	ДанныеЭтикетки.Вставить("Поля", Новый Массив);
	
	Возврат ДанныеЭтикетки;

КонецФункции 

Функция ПараметрыШтрихкода(Штрихкод, ТипКодаСтрокой) 
	ПараметрыШтрихкода = Новый Структура;
	
	Если ТипКодаСтрокой = "EAN8" Тогда
		ПараметрыШтрихкода.Вставить("ТипКода", 0);
	ИначеЕсли ТипКодаСтрокой = "EAN13" Тогда
		ПараметрыШтрихкода.Вставить("ТипКода", 1);
		// Если код содержит контрольный символ, обязательно указываем.
		ПараметрыШтрихкода.Вставить("СодержитКС", СтрДлина(Штрихкод) = 13);
	ИначеЕсли ТипКодаСтрокой = "EAN128" Тогда
		ПараметрыШтрихкода.Вставить("ТипКода", 2);
	ИначеЕсли ТипКодаСтрокой = "CODE39" Тогда
		ПараметрыШтрихкода.Вставить("ТипКода", 3);
	ИначеЕсли ТипКодаСтрокой = "CODE128" Тогда
		ПараметрыШтрихкода.Вставить("ТипКода", 4);
	ИначеЕсли ТипКодаСтрокой = "ITF14" Тогда
		ПараметрыШтрихкода.Вставить("ТипКода", 11);
	ИначеЕсли ТипКодаСтрокой = "EAN13Addon2" Тогда
		ПараметрыШтрихкода.Вставить("ТипКода", 14);
	ИначеЕсли ТипКодаСтрокой = "EAN13Addon5" Тогда
		ПараметрыШтрихкода.Вставить("ТипКода", 15);
	ИначеЕсли ТипКодаСтрокой = "QR" Тогда
		ПараметрыШтрихкода.Вставить("ТипКода", 16);
	ИначеЕсли ТипКодаСтрокой = "GS1DataBarExpandedStacked" Тогда
		ПараметрыШтрихкода.Вставить("ТипКода", 17);
	ИначеЕсли ТипКодаСтрокой = "DataMatrix" Тогда
		ПараметрыШтрихкода.Вставить("ТипКода", 18);
	ИначеЕсли ТипКодаСтрокой = "GS1-DataMatrix" Тогда
		ПараметрыШтрихкода.Вставить("ТипКода", 24);
	КонецЕсли;
	
	Возврат ПараметрыШтрихкода;
КонецФункции

Функция ЗаполнитьТабличныйДокумент(Разрешение, ДанныеЭтикетки, СообщениеОбОшибке) Экспорт
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если ДанныеЭтикетки.Количество()>0 Тогда
		ЗначенияПолей = Новый Структура;
		
		Для Каждого Поле Из ДанныеЭтикетки.Поля Цикл
			
			ИмяПоля      = "П"+СтрЗаменить(Поле.ИмяПоля, "-", "");
			ОписаниеПоля = Поле.ОписаниеПоля;
			ЗначениеПоля = Поле.Значение;
			
			Если ОписаниеПоля.Тип = "UserData" Тогда
				Продолжить;
			КонецЕсли;
			
			ОбластьТабличногоДокумента = СохранитьОформлениеПоля(ИмяПоля, ОписаниеПоля, ТабличныйДокумент);
			
			Если ОписаниеПоля.Тип = "Barcode" 
				И ТипЗнч(ЗначениеПоля) = Тип("Структура") Тогда
				
				ПараметрыШтрихкода = ГенерацияШтрихкодаКлиентСервер.ПараметрыГенерацииШтрихкода();
				
				ЗаполнитьЗначенияСвойств(ПараметрыШтрихкода, ЗначениеПоля);
				
				ШиринаОбласти = ?(Разрешение.КоличествоМиллиметровВПикселеШирина = 0, 0, 
					(ОписаниеПоля.Право - ОписаниеПоля.Лево)/Разрешение.КоличествоМиллиметровВПикселеШирина);
					
				ВысотаОбласти = ?(Разрешение.КоличествоМиллиметровВПикселеВысота = 0, 0, 
					(ОписаниеПоля.Низ - ОписаниеПоля.Верх)/Разрешение.КоличествоМиллиметровВПикселеВысота);
				
				ПараметрыШтрихкода.Вставить("Ширина",          ШиринаОбласти);
				ПараметрыШтрихкода.Вставить("Высота",          ВысотаОбласти);
				
				// Значение по умолчанию переопределяется функцией ПараметрыШтрихкода()
				ПараметрыШтрихкода.Вставить("ТипКода",         99);
				
				ЗаполнитьЗначенияСвойств(ПараметрыШтрихкода, ПараметрыШтрихкода(ПараметрыШтрихкода.Штрихкод, ОписаниеПоля.ТипШтрихкода));
				
				ПараметрыШтрихкода.Вставить("ОтображатьТекст", ОписаниеПоля.ПодписьШтрихкода = "true");
				Если ОписаниеПоля.ПодписьШтрихкода = "true" И ЗначениеЗаполнено(ОписаниеПоля.РазмерШрифтаПодписи) Тогда
					ПараметрыШтрихкода.Вставить("РазмерШрифта" , ОписаниеПоля.РазмерШрифтаПодписи);
				КонецЕсли; 
				Если ЗначениеЗаполнено(ОписаниеПоля.Ориентация) Тогда
					ПараметрыШтрихкода.Вставить("УголПоворота" , ОписаниеПоля.Ориентация);// Одно из следующих значений: 0, 90, 180, 270.
				Иначе
					ПараметрыШтрихкода.Вставить("УголПоворота" , 0);
				КонецЕсли; 
				ПараметрыШтрихкода.Вставить("ПрозрачныйФон", Истина);
				
				Если ОписаниеПоля.Свойство("УровеньКоррекцииQR") Тогда
					ПараметрыШтрихкода.Вставить("УровеньКоррекцииQR", ОписаниеПоля.УровеньКоррекцииQR);
				Иначе
					ПараметрыШтрихкода.Вставить("УровеньКоррекцииQR", 0);
				КонецЕсли;
				
				Попытка
					РезультатОперации = ГенерацияШтрихкодаВызовСервера.ИзображениеШтрихкода(ПараметрыШтрихкода);
					
					Если РезультатОперации.Результат Тогда
						ОбластьТабличногоДокумента.Картинка = РезультатОперации.Картинка;
					Иначе
						СообщениеОбОшибке = НСтр("ru = 'Не удалось сформировать штрихкод'");
					КонецЕсли;
				Исключение
					ТекстОшибки = НСтр("ru = 'Не удалось сформировать штрихкод.
										|%1'");
					ОписаниеОшибки = СтрШаблон(ТекстОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ЗаписьЖурналаРегистрации(
						НСтр("ru = 'Печать этикеток'"), 
						УровеньЖурналаРегистрации.Ошибка,
						Метаданные.Обработки.ПечатьЭтикеток,
						, 
						ОписаниеОшибки);
						
					СообщениеОбОшибке = НСтр("ru = 'Не удалось сформировать штрихкод'");
				КонецПопытки;
				
			ИначеЕсли ОписаниеПоля.Тип = "Image" Тогда 
				ДвоичныеДанные = Base64Значение(ОписаниеПоля.Значение);
				
				ОбластьТабличногоДокумента.Картинка = Новый Картинка(ДвоичныеДанные, Истина);
			ИначеЕсли ОписаниеПоля.ТипЗаполнения = "Parameter" Тогда
				Если ТипЗнч(ЗначениеПоля) = Тип("ХранилищеЗначения") Тогда
					ЗначениеПоля = ЗначениеПоля.Получить();
					
					Если ТипЗнч(ЗначениеПоля) = Тип("ДвоичныеДанные") Тогда
						ЗначениеПоля = Base64Строка(ЗначениеПоля);
					Иначе
						ЗначениеПоля = Строка(ЗначениеПоля);
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
					ЗначенияПолей.Вставить(ИмяПоля, ?(ЗначениеЗаполнено(ОписаниеПоля.Формат), Формат(ЗначениеПоля, ОписаниеПоля.Формат), ЗначениеПоля));
				Иначе
					Если ЗначениеЗаполнено(ОписаниеПоля.ЗначениеПоУмолчанию) Тогда
						ЗначенияПолей.Вставить(ИмяПоля, ?(ЗначениеЗаполнено(ОписаниеПоля.Формат), Формат(ОписаниеПоля.ЗначениеПоУмолчанию, ОписаниеПоля.Формат), ОписаниеПоля.ЗначениеПоУмолчанию));
					Иначе
						ЗначенияПолей.Вставить(ИмяПоля, ?(ЗначениеЗаполнено(ОписаниеПоля.Формат), Формат("", ОписаниеПоля.Формат), ""));
					КонецЕсли;
				КонецЕсли;
			Иначе
				ЗначенияПолей.Вставить(ИмяПоля, ОписаниеПоля.Значение);
			КонецЕсли;
		КонецЦикла;
		
		ТабличныйДокумент.Параметры.Заполнить(ЗначенияПолей);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
КонецФункции

Функция СохранитьОформлениеПоля(ИмяПоля, ОписаниеПоля, ТабличныйДокумент) Экспорт
	
	Если ОписаниеПоля.Тип = "Text" ИЛИ  ОписаниеПоля.Тип = "Image" Тогда
		
		Область = ТабличныйДокумент.Область(ОписаниеПоля.Верх+1,ОписаниеПоля.Лево+1, ОписаниеПоля.Низ+1, ОписаниеПоля.Право+1);
		Область.Объединить();
		
		Область.Имя = ИмяПоля;
		
		Если ОписаниеПоля.ТипЗаполнения = "Constant" Тогда
			Область.Заполнение=ТипЗаполненияОбластиТабличногоДокумента.Текст;
			Область.Текст = ОписаниеПоля.Значение;
		Иначе
			Область.Заполнение=ТипЗаполненияОбластиТабличногоДокумента.Параметр;
			Область.Параметр = ИмяПоля;
		КонецЕсли;
		
		Если ОписаниеПоля.Многострочность Тогда
			Область.РазмещениеТекста=ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		Иначе
			Область.РазмещениеТекста=ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
		КонецЕсли;
		
		Область.ОриентацияТекста = ОписаниеПоля.Ориентация;
		
		Если ОписаниеПоля.ПоложениеПоГоризонтали = "Left" Тогда
			Область.ГоризонтальноеПоложение=ГоризонтальноеПоложение.Лево;
		ИначеЕсли ОписаниеПоля.ПоложениеПоГоризонтали = "Center" Тогда
			Область.ГоризонтальноеПоложение=ГоризонтальноеПоложение.Центр;
		ИначеЕсли ОписаниеПоля.ПоложениеПоГоризонтали = "Right" Тогда
			Область.ГоризонтальноеПоложение=ГоризонтальноеПоложение.Право;
		Иначе
			Область.ГоризонтальноеПоложение=ГоризонтальноеПоложение.Лево;
		КонецЕсли;
		
		Если ОписаниеПоля.ПоложениеПоВертикали = "Top" Тогда
			Область.ВертикальноеПоложение=ВертикальноеПоложение.Верх;
		ИначеЕсли ОписаниеПоля.ПоложениеПоВертикали = "Center" Тогда
			Область.ВертикальноеПоложение=ВертикальноеПоложение.Центр;
		ИначеЕсли ОписаниеПоля.ПоложениеПоВертикали = "Bottom" Тогда
			Область.ВертикальноеПоложение=ВертикальноеПоложение.Низ;
		Иначе
			Область.ВертикальноеПоложение=ВертикальноеПоложение.Верх;
		КонецЕсли;
		
		Область.Шрифт = Новый Шрифт(ОписаниеПоля.ИмяШрифта,ОписаниеПоля.РазмерШрифта, ОписаниеПоля.Жирный, ОписаниеПоля.Наклонный, ОписаниеПоля.Подчеркивание, ОписаниеПоля.Зачеркивание);
		
		Если ОписаниеПоля.ТипРамки = "Solid" Тогда
			ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.Сплошная;
		ИначеЕсли ОписаниеПоля.ТипРамки = "Double" Тогда
			ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.Двойная;
		ИначеЕсли ОписаниеПоля.ТипРамки = "Dotted" Тогда
			ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.Точечная;
		ИначеЕсли ОписаниеПоля.ТипРамки = "Dashed" Тогда
			ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.БольшойПунктир;
		Иначе
			ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.НетЛинии;
		КонецЕсли;
		
		Рамка = Новый Линия(ТипЛинии, ОписаниеПоля.ТолщинаРамки);
		
		Если ОписаниеПоля.РамкаСлева Тогда
			Область.ГраницаСлева=Рамка;
		Иначе
			Область.ГраницаСлева=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 0);
		КонецЕсли;
		
		Если ОписаниеПоля.РамкаСправа Тогда
			Область.ГраницаСправа=Рамка;
		Иначе
			Область.ГраницаСправа=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 0);
		КонецЕсли;
		
		Если ОписаниеПоля.РамкаСверху Тогда
			Область.ГраницаСверху=Рамка;
		Иначе
			Область.ГраницаСверху=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 0);
		КонецЕсли;
		
		Если ОписаниеПоля.РамкаСнизу Тогда
			Область.ГраницаСнизу=Рамка;
		Иначе
			Область.ГраницаСнизу=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 0);
		КонецЕсли;
		
	ИначеЕсли ОписаниеПоля.Тип = "Barcode" Тогда
		РасположениеКартинки = ТабличныйДокумент.Область(ОписаниеПоля.Верх + 1, ОписаниеПоля.Лево + 1, ОписаниеПоля.Низ+1, ОписаниеПоля.Право+1);
		
		Область = ТабличныйДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
		
		Область.Расположить(РасположениеКартинки);
		Область.РазмерКартинки = РазмерКартинки.Пропорционально;
		Область.ГраницаСлева   = ОписаниеПоля.РамкаСлева;
		Область.ГраницаСправа  = ОписаниеПоля.РамкаСправа;
		Область.ГраницаСверху  = ОписаниеПоля.РамкаСверху;
		Область.ГраницаСнизу   = ОписаниеПоля.РамкаСнизу;
		
	КонецЕсли;
	
	Возврат Область;
КонецФункции

Функция ПолеДоступно(Структура, ПолноеИмяПоля, ИмяПоля = Неопределено)
	ИмяПоля = ?(ИмяПоля = Неопределено, ПолноеИмяПоля, ИмяПоля);
	
	ПоложениеТочки = Найти(ИмяПоля, ".");
	Если Структура.Элементы.Найти(ПолноеИмяПоля) <> Неопределено Тогда
		Возврат Истина;
	ИначеЕсли ПоложениеТочки > 0 Тогда
		// Возможно поле находится на уровень ниже
		Родитель = Лев(ПолноеИмяПоля, (СтрДлина(ПолноеИмяПоля) - СтрДлина(ИмяПоля)) + ПоложениеТочки - 1);
		ЭлементСписка = Структура.Элементы.Найти(Родитель);
		Если ЭлементСписка <> Неопределено Тогда
			Возврат ПолеДоступно(ЭлементСписка, ПолноеИмяПоля, Сред(ИмяПоля, ПоложениеТочки +1));
		Иначе
			Возврат Ложь;
		КонецЕсли; 
	Иначе
		Возврат Ложь;
	КонецЕсли; 
КонецФункции

Функция СведенияОбОрганизациях(ТаблицаОрганизации)
	ТаблицаСведений = Новый ТаблицаЗначений;
	ТаблицаСведений.Колонки.Добавить("Организация");
	ТаблицаСведений.Колонки.Добавить("ДатаПолученияДанных");
	ТаблицаСведений.Колонки.Добавить("СокращенноеНаименование");
	ТаблицаСведений.Колонки.Добавить("ПолноеНаименование");
	ТаблицаСведений.Колонки.Добавить("НаименованиеДляПечатныхФорм");
	
	ОбщегоНазначенияКлиентСервер.ЗаполнитьКоллекциюСвойств(ТаблицаОрганизации, ТаблицаСведений);
	
	Для каждого СтрокаТаблицы Из ТаблицаСведений Цикл
		НаименованияНаДату = Справочники.Организации.НаименованияНаДату(СтрокаТаблицы.Организация, СтрокаТаблицы.ДатаПолученияДанных);
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, НаименованияНаДату);
	КонецЦикла;
	
	Возврат ТаблицаСведений;
КонецФункции

Функция ПолучитьРезультатВыполненияЗапроса(АдресХранилищаСКД, ТаблицаНоменклатура, ШтрихкодыМаркировки, СписокПолей, ТипЦен)
	СКД = ПолучитьИзВременногоХранилища(АдресХранилищаСКД);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
	Компоновщик.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	
	Настройки = Компоновщик.Настройки;
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Настройки, "ТипЦен", ТипЦен);
	
	// Каждой колонке таблицы результата СКД могут соответствовать много полей в макете этикетки
	// Для того чтобы их связать используем два соответствия которые свяжут поля макета с именами колонок
	
	// Псевдонимы полей связывают поля макета и пути к данными СКД
	// Ключ     - имя поля из макета этикетки
	// Значение - путь к данным в схеме СКД (см. ключ в ПсевдонимыПутей)
	ПсевдонимыПолей = Новый Соответствие;
	
	// Псевдонимы путей связывают пути к данным СКД и заголовки колонок таблицы результата
	// Ключ     - путь к данным в схеме СКД (см. значение в ПсевдонимыПолей) 
	// Значение - заголовок колонки таблицы результата СКД
	ПсевдонимыПутей = Новый Соответствие;
	
	Для каждого Поле Из СписокПолей Цикл
		ПутьКДаннымСКД = Поле.Значение;
		Если ЗначениеЗаполнено(ПутьКДаннымСКД) Тогда
			Если ПолеДоступно(Настройки.Структура[0].Выбор.ДоступныеПоляВыбора, ПутьКДаннымСКД) Тогда
				// НаименованиеПоля - ключ который связывает имя поля макета этикетки и имя поля макета СКД
				НаименованиеПоля = "_"+СтрЗаменить(Поле.Наименование, "-", "");
				ПсевдонимыПолей.Вставить(НаименованиеПоля, ПутьКДаннымСКД);
				
				ПсевдонимПути = ПсевдонимыПутей[ПутьКДаннымСКД];
				Если ПсевдонимПути = Неопределено Тогда
					ПсевдонимыПутей.Вставить(ПутьКДаннымСКД, НаименованиеПоля);
					
					ПсевдонимПути = НаименованиеПоля;
				КонецЕсли; 
				
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Настройки.Структура[0].Выбор, ПутьКДаннымСКД, ПсевдонимПути);
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
	
	ТаблицаОрганизации = ТаблицаНоменклатура.Скопировать(,"Организация, ДатаПолученияДанных");
	ТаблицаОрганизации.Свернуть("Организация, ДатаПолученияДанных");
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаНоменклатура", ТаблицаНоменклатура);
	ВнешниеНаборыДанных.Вставить("ТаблицаОрганизации",  СведенияОбОрганизациях(ТаблицаОрганизации));
	
	Если ШтрихкодыМаркировки = Неопределено Тогда
		ВнешниеНаборыДанных.Вставить("ТаблицаШтрихкоды", НовыйШтрихкодыМаркируемойПродукции());
	Иначе
		ВнешниеНаборыДанных.Вставить("ТаблицаШтрихкоды", ШтрихкодыМаркировки);
	КонецЕсли; 
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ПКД = Новый ПроцессорКомпоновкиДанных;
	ПКД.Инициализировать(КомпоновщикМакета.Выполнить(СКД, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")), ВнешниеНаборыДанных);
	
	ТаблицаРезультата = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультата);
	ПроцессорВывода.Вывести(ПКД);
	
	// Свяжем заголовки колонок с именами колонок чтобы заполнить ПсевдонимыПолей через ПсевдонимыПутей
	// Ключ     - заголовок колонки таблицы результата СКД (см. ПсевдонимыПутей)
	// Значение - имя колонки таблицы результата (для подстановки в ПсевдонимыПолей)
	ЗаголовкиКолонок = Новый Соответствие;
	Для каждого Колонка Из ТаблицаРезультата.Колонки Цикл
		ЗаголовкиКолонок.Вставить(Колонка.Заголовок, Колонка.Имя);
	КонецЦикла; 
	
	// Заменим пути к данным в ПсевдонимахПолей на имена колонок таблицы результата СКД
	Для каждого ПсевдонимПоля Из ПсевдонимыПолей Цикл
		ПутьКДаннымСКД = ПсевдонимПоля.Значение;
		
		// Находим для пути данных его псевдоним (который является заголовком колонки)
		// и через него получаем имя колонки в результатах исполнения СКД
		ПсевдонимПути = ПсевдонимыПутей[ПутьКДаннымСКД];
		Если ПсевдонимПути <> Неопределено 
			И ЗаголовкиКолонок[ПсевдонимПути] <> Неопределено Тогда
			
			ПсевдонимыПолей[ПсевдонимПоля.Ключ] = ЗаголовкиКолонок[ПсевдонимПути];
		Иначе
			
			// Если в результатах нет колонки для этого пути к данным
			ПсевдонимыПолей[ПсевдонимПоля.Ключ] = "";
		КонецЕсли; 
		
	КонецЦикла; 
	
	РеквизитыНоменклатуры = Новый ТаблицаЗначений;
	РеквизитыНоменклатуры.Колонки.Добавить("НоменклатураСсылка",  Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	РеквизитыНоменклатуры.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Строка"));
	РеквизитыНоменклатуры.Колонки.Добавить("ЗначенияРеквизитов");
	
	Для каждого СтрокаРезультата Из ТаблицаРезультата Цикл
		
		ЗначенияРеквизитов = Новый Структура;
		Для каждого ОписаниеПоля Из ПсевдонимыПолей Цикл
			Если ЗначениеЗаполнено(ОписаниеПоля.Значение) Тогда
				ЗначенияРеквизитов.Вставить(ОписаниеПоля.Ключ, СтрокаРезультата[ОписаниеПоля.Значение]);
			КонецЕсли; 
		КонецЦикла; 
		
		НоваяСтрока = РеквизитыНоменклатуры.Добавить();
		НоваяСтрока.НоменклатураСсылка   = СтрокаРезультата.НоменклатураСсылка;
		НоваяСтрока.ИдентификаторСтроки  = СтрокаРезультата.ИдентификаторСтроки;
		НоваяСтрока.ЗначенияРеквизитов   = ЗначенияРеквизитов;
		
	КонецЦикла; 

	Возврат РеквизитыНоменклатуры;
КонецФункции

Функция НовыйСписокНоменклатуры()
	СписокНоменклатуры = Новый ТаблицаЗначений;
	СписокНоменклатуры.Колонки.Добавить("Организация",         Новый ОписаниеТипов("СправочникСсылка.Организации"));
	СписокНоменклатуры.Колонки.Добавить("ДатаПолученияДанных", Новый ОписаниеТипов("Дата"));
	СписокНоменклатуры.Колонки.Добавить("НоменклатураСсылка",  Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	СписокНоменклатуры.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Строка"));
	СписокНоменклатуры.Колонки.Добавить("Валюта",              Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	СписокНоменклатуры.Колонки.Добавить("Количество",          Новый ОписаниеТипов("Число"));
	
	Возврат СписокНоменклатуры;
КонецФункции

Функция НоменклатураДляЭтикетокМаркируемойПродукции(ТаблицаМаркируемойПродукции) Экспорт
	
	ДатаПолученияДанных = ОбщегоНазначения.ТекущаяДатаПользователя();
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

	СписокНоменклатуры = НовыйСписокНоменклатуры();
	
	Для каждого ЭлементМаркируемойПродукции Из ТаблицаМаркируемойПродукции Цикл
	
		НоваяСтрока = СписокНоменклатуры.Добавить();
		
		НоваяСтрока.ИдентификаторСтроки   = ЭлементМаркируемойПродукции.ИдентификаторСтроки;
		НоваяСтрока.Организация           = ЭлементМаркируемойПродукции.Организация;
		НоваяСтрока.ДатаПолученияДанных   = ДатаПолученияДанных;
		НоваяСтрока.НоменклатураСсылка    = ЭлементМаркируемойПродукции.Номенклатура;
		НоваяСтрока.Количество            = ЭлементМаркируемойПродукции.Количество;
		НоваяСтрока.Валюта                = ВалютаРегламентированногоУчета;
	
	КонецЦикла; 
	
	Возврат СписокНоменклатуры;
КонецФункции

Функция НоменклатураДляПечатиЦенников(СписокОбъектов, КоличествоПоУмолчанию = 1) Экспорт
	Запрос = Новый Запрос;
	
	ЧастиЗапроса = Новый Массив;
	
	Для каждого СписокОбъектовПоТипу Из ОбщегоНазначенияБП.РазложитьСписокПоТипамОбъектов(СписокОбъектов) Цикл
		Если СписокОбъектовПоТипу.Ключ = Метаданные.Справочники.Номенклатура Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	&ТекущаяОрганизация КАК Организация,
			|	&РабочаяДата КАК ДатаПолученияДанных,
			|	Номенклатура.Ссылка КАК НоменклатураСсылка,
			|	&ВалютаРегламентированногоУчета КАК Валюта,
			|	&КоличествоПоУмолчанию КАК Количество,
			|	Номенклатура.Наименование КАК НаименованиеНоменклатуры
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Ссылка В(&СписокОбъектов)
			|
			|УПОРЯДОЧИТЬ ПО
			|	НаименованиеНоменклатуры";
		ИначеЕсли СписокОбъектовПоТипу.Ключ = Метаданные.Документы.УстановкаЦенНоменклатуры Тогда 
			
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	&ТекущаяОрганизация КАК Организация,
			|	УстановкаЦенНоменклатурыТовары.Ссылка.Дата КАК ДатаПолученияДанных,
			|	УстановкаЦенНоменклатурыТовары.Номенклатура КАК НоменклатураСсылка,
			|	УстановкаЦенНоменклатурыТовары.Валюта КАК Валюта,
			|	&КоличествоПоУмолчанию КАК Количество,
			|	УстановкаЦенНоменклатурыТовары.НомерСтроки КАК НомерСтрокиДокумента,
			|	УстановкаЦенНоменклатурыТовары.Ссылка КАК ДокументСсылка
			|ИЗ
			|	Документ.УстановкаЦенНоменклатуры.Товары КАК УстановкаЦенНоменклатурыТовары
			|ГДЕ
			|	УстановкаЦенНоменклатурыТовары.Ссылка В(&СписокОбъектов)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДокументСсылка,
			|	НомерСтрокиДокумента";
		ИначеЕсли СписокОбъектовПоТипу.Ключ = Метаданные.Документы.ПоступлениеТоваровУслуг Тогда 
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ПоступлениеТоваровУслугТовары.Ссылка.Организация КАК Организация,
			|	ПоступлениеТоваровУслугТовары.Ссылка.Дата КАК ДатаПолученияДанных,
			|	ПоступлениеТоваровУслугТовары.Номенклатура КАК НоменклатураСсылка,
			|	ПоступлениеТоваровУслугТовары.Ссылка.ВалютаДокумента КАК Валюта,
			|	СУММА(ПоступлениеТоваровУслугТовары.Количество) КАК Количество,
			|	ПоступлениеТоваровУслугТовары.НомерСтроки КАК НомерСтрокиДокумента,
			|	ПоступлениеТоваровУслугТовары.Ссылка КАК ДокументСсылка
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
			|ГДЕ
			|	ПоступлениеТоваровУслугТовары.Ссылка В(&СписокОбъектов)
			|
			|СГРУППИРОВАТЬ ПО
			|	ПоступлениеТоваровУслугТовары.Ссылка.Организация,
			|	ПоступлениеТоваровУслугТовары.Ссылка.Дата,
			|	ПоступлениеТоваровУслугТовары.Номенклатура,
			|	ПоступлениеТоваровУслугТовары.Ссылка.ВалютаДокумента,
			|	ПоступлениеТоваровУслугТовары.НомерСтроки,
			|	ПоступлениеТоваровУслугТовары.Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДокументСсылка,
			|	НомерСтрокиДокумента";
		Иначе
			Продолжить;
		КонецЕсли;
		
		ИмяПеременной = "СписокОбъектов"+Формат(ЧастиЗапроса.Количество(), "ЧГ=0");
		
		Запрос.УстановитьПараметр(ИмяПеременной, СписокОбъектовПоТипу.Значение);
		ЧастиЗапроса.Добавить(СтрЗаменить(ТекстЗапроса, "СписокОбъектов", ИмяПеременной));
	КонецЦикла; 
	
	ТаблицаРезультата = НовыйСписокНоменклатуры();
	Если ЧастиЗапроса.Количество() = 0 Тогда
		Возврат ТаблицаРезультата;
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("РабочаяДата",                    ОбщегоНазначения.ТекущаяДатаПользователя());
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	Запрос.УстановитьПараметр("ТекущаяОрганизация",             Справочники.Организации.ОрганизацияПоУмолчанию());
	Запрос.УстановитьПараметр("КоличествоПоУмолчанию",          КоличествоПоУмолчанию);
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС+"ОБЪЕДИНИТЬ"+Символы.ПС);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Запрос.Выполнить().Выгрузить(), ТаблицаРезультата);
	
	Возврат ТаблицаРезультата;
КонецФункции 

Функция НовыйОписаниеПоля()
	Результат = Новый Структура;
	
	Результат.Вставить("Наименование",           "");
	Результат.Вставить("Представление",          "");
	Результат.Вставить("Тип",                    "");
	Результат.Вставить("ТипЗаполнения");
	Результат.Вставить("ЗначениеПоУмолчанию");
	Результат.Вставить("Значение");
	Результат.Вставить("Верх",                   0);
	Результат.Вставить("Лево",                   0);
	Результат.Вставить("Низ",                    0);
	Результат.Вставить("Право",                  0);
	Результат.Вставить("Ориентация");
	Результат.Вставить("ИмяШрифта");
	Результат.Вставить("РазмерШрифта");
	Результат.Вставить("Жирный",                 Ложь);
	Результат.Вставить("Наклонный",              Ложь);
	Результат.Вставить("Подчеркивание",          Ложь);
	Результат.Вставить("Зачеркивание",           Ложь);
	Результат.Вставить("РамкаСлева",             Ложь);
	Результат.Вставить("РамкаСверху",            Ложь);
	Результат.Вставить("РамкаСправа",            Ложь);
	Результат.Вставить("РамкаСнизу",             Ложь);
	Результат.Вставить("ТипРамки");
	Результат.Вставить("ТолщинаРамки");
	Результат.Вставить("ТипШтрихкода");
	Результат.Вставить("РазмерШрифтаПодписи");
	Результат.Вставить("ПодписьШтрихкода");
	Результат.Вставить("КонтрольныйСимвол");
	Результат.Вставить("ПоложениеПоГоризонтали", "Left");
	Результат.Вставить("ПоложениеПоВертикали",   "Top");
	Результат.Вставить("Многострочность",        Ложь);
	Результат.Вставить("Формат");
	
	Возврат Результат;
КонецФункции 

Функция СписокПолейМакета(СодержимоеXMLФайла) Экспорт
	ОписаниеПолей = Новый Массив;
	
	Для Каждого ОписаниеПоляXML Из СодержимоеXMLФайла.Поля Цикл
		ОписаниеПоля = НовыйОписаниеПоля();
		
		ЗаполнитьЗначенияСвойств(ОписаниеПоля, ОписаниеПоляXML);
		
		ОписаниеПолей.Добавить(ОписаниеПоля);
	КонецЦикла;
	
	Возврат ОписаниеПолей;
КонецФункции 

Функция ДанныеИзСтрокиJSON(Строка)
	Если ТипЗнч(Строка) <> Тип("Строка") Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Строка);
	Ответ = ПрочитатьJSON(ЧтениеJSON);
	
	Возврат Ответ;
КонецФункции

#КонецОбласти 

#КонецЕсли