
&НаКлиенте
Перем VB;

&НаКлиенте
Перем WordDoc;

///////////////////////////////
// Вспомогательные процедуры и функции

&НаСервере
Функция ПолучитьИмяДокументаПоТипу()
	
	Если ЗначениеЗаполнено(Объект.ТипДокумента) Тогда
		Возврат Метаданные.Перечисления.АР_ТипыДокументовПечатныхФорм.ЗначенияПеречисления.Получить(Перечисления.АР_ТипыДокументовПечатныхФорм.Индекс(Объект.ТипДокумента)).Имя;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьИмяРеквизитаПоСинониму(СинонимРеквизита)
	
	ИмяДокумента = ПолучитьИмяДокументаПоТипу();
	ИмяРеквита = "";
	Если ЗначениеЗаполнено(ИмяДокумента) Тогда
		Для Каждого Реквизит Из Метаданные.Документы[ИмяДокумента].Реквизиты Цикл
			Если Реквизит.Синоним = СинонимРеквизита Тогда
				ИмяРеквита = Реквизит.Имя;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ИмяРеквита;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДополнитьТекстЗапросаПолем(ТекстЗапроса, Назначение, Поле, Условие = "", ТипЗначения = "NULL")
		
	Если Поле = "КонтактнаяИнформация" Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	{ХАРАКТЕРИСТИКИ
		|	ТИП(" + Назначение + ")
		|	ВИДЫХАРАКТЕРИСТИК (ВЫБРАТЬ
		|			ВидыКонтактнойИнформации.Ссылка,
		|			ВидыКонтактнойИнформации.Наименование,
		|			ВидыКонтактнойИнформации.Тип
		|		ИЗ
		|			Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|		ГДЕ
		|			ВидыКонтактнойИнформации.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации." + СтрЗаменить(Назначение, ".", "") + "))
		|	ПОЛЕКЛЮЧА Ссылка
		|	ПОЛЕИМЕНИ Наименование
		|	ПОЛЕТИПАЗНАЧЕНИЯ Тип
		|	ЗНАЧЕНИЯХАРАКТЕРИСТИК (ВЫБРАТЬ
		|			КонтактнаяИнформация.Ссылка,
		|			КонтактнаяИнформация.Вид КАК ВидКИ,
		|			КонтактнаяИнформация.Представление
		|		ИЗ
		|			" + Назначение + ".КонтактнаяИнформация КАК КонтактнаяИнформация)
		|	ПОЛЕОБЪЕКТА Ссылка
		|	ПОЛЕВИДА ВидКИ
		|	ПОЛЕЗНАЧЕНИЯ Представление }";
	ИначеЕсли Поле = "ДополнительныеРеквизиты" Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	{ХАРАКТЕРИСТИКИ
		|	ТИП(" + Назначение + ")
		|	ВИДЫХАРАКТЕРИСТИК (ВЫБРАТЬ
		|			ДополнительныеРеквизиты.Свойство.Наименование КАК Наименование,
		|			ДополнительныеРеквизиты.Свойство.ТипЗначения КАК ТипЗначения,
		|			ДополнительныеРеквизиты.Свойство
		|		ИЗ
		|			Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
		|		ГДЕ
		|			ДополнительныеРеквизиты.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений." + СтрЗаменить(Назначение, ".", "_") + "))
		|	ПОЛЕКЛЮЧА Свойство
		|	ПОЛЕИМЕНИ Наименование
		|	ПОЛЕТИПАЗНАЧЕНИЯ ТипЗначения
		|	ЗНАЧЕНИЯХАРАКТЕРИСТИК (ВЫБРАТЬ
		|			ДополнительныеРеквизиты.Ссылка,
		|			ДополнительныеРеквизиты.Свойство,
		|			ДополнительныеРеквизиты.Значение
		|		ИЗ
		|			" + Назначение + ".ДополнительныеРеквизиты КАК ДополнительныеРеквизиты)
		|	ПОЛЕОБЪЕКТА Ссылка
		|	ПОЛЕВИДА Свойство
		|	ПОЛЕЗНАЧЕНИЯ Значение }";
	ИначеЕсли Поле = "ДополнительныеСведения" Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	{ХАРАКТЕРИСТИКИ
		|	ТИП(" + Назначение + ")
		|	ВИДЫХАРАКТЕРИСТИК (ВЫБРАТЬ
		|			ДополнительныеРеквизиты.Свойство.Наименование КАК Наименование,
		|			ДополнительныеРеквизиты.Свойство.ТипЗначения КАК ТипЗначения,
		|			ДополнительныеРеквизиты.Свойство
		|		ИЗ
		|			Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК ДополнительныеРеквизиты
		|		ГДЕ
		|			ДополнительныеРеквизиты.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений." + СтрЗаменить(Назначение, ".", "_") + "))
		|	ПОЛЕКЛЮЧА Свойство
		|	ПОЛЕИМЕНИ Наименование
		|	ПОЛЕТИПАЗНАЧЕНИЯ ТипЗначения
		|	ЗНАЧЕНИЯХАРАКТЕРИСТИК РегистрСведений.ДополнительныеСведения
		|	ПОЛЕОБЪЕКТА Объект
		|	ПОЛЕВИДА Свойство
		|	ПОЛЕЗНАЧЕНИЯ Значение }";
	ИначеЕсли Поле = "ОтветственныеЛицаОрганизаций" Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	{ХАРАКТЕРИСТИКИ
		|	ТИП(" + Назначение + ")
		|	ВИДЫХАРАКТЕРИСТИК (ВЫБРАТЬ
		|			ОтветственныеЛицаОрганизаций.Ссылка,
		|			ПРЕДСТАВЛЕНИЕ(ОтветственныеЛицаОрганизаций.Ссылка) КАК Наименование,
		|			ОтветственныеЛицаОрганизаций.Ссылка КАК Тип
		|		ИЗ
		|			Перечисление.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаОрганизаций)
		|	ПОЛЕКЛЮЧА Ссылка
		|	ПОЛЕИМЕНИ Наименование
		|	ПОЛЕТИПАЗНАЧЕНИЯ Тип
		|	ЗНАЧЕНИЯХАРАКТЕРИСТИК Справочник.ОтветственныеЛицаОрганизаций
		|	ПОЛЕОБЪЕКТА Владелец
		|	ПОЛЕВИДА ОтветственноеЛицо
		|	ПОЛЕЗНАЧЕНИЯ ФизическоеЛицо }";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|	{ХАРАКТЕРИСТИКИ
		|	ТИП(" + Назначение + ")
		|	ВИДЫХАРАКТЕРИСТИК (ВЫБРАТЬ
		|			NULL КАК Ссылка,
		|			""" + Поле +  """ КАК Наименование,
		|			" + ТипЗначения + " КАК ТипЗначения
		|	" + ?(ЗначениеЗаполнено(Условие), "ГДЕ " + Условие, "") + ")
		|	ПОЛЕКЛЮЧА Ссылка
		|	ПОЛЕИМЕНИ Наименование
		|	ПОЛЕТИПАЗНАЧЕНИЯ ТипЗначения
		|	ЗНАЧЕНИЯХАРАКТЕРИСТИК (ВЫБРАТЬ
		|			НЕОПРЕДЕЛЕНО КАК Объект,
		|			НЕОПРЕДЕЛЕНО КАК Свойство,
		|			НЕОПРЕДЕЛЕНО КАК Значение)
		|	ПОЛЕОБЪЕКТА Объект
		|	ПОЛЕВИДА Свойство
		|	ПОЛЕЗНАЧЕНИЯ Значение }";	
	КонецЕсли;
	
КонецПроцедуры          

&НаСервереБезКонтекста
Процедура ДополнитьТекстЗапросаДаннымиРегистра(ТекстЗапроса, Назначение, ИмяРегистра)
	
	Ресурсы = Метаданные.РегистрыСведений[ИмяРегистра].Ресурсы;
	Для Каждого Ресурс Из Ресурсы Цикл
		ДополнитьТекстЗапросаПолем(ТекстЗапроса, Назначение, Ресурс.Синоним);		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДополнитьТекстЗапросаДаннымиХарактеристик(ТекстЗапроса, Назначение)
	
	ПустаяСсылка = ПредопределенноеЗначение(Назначение + ".ПустаяСсылка");
	Характеристики = ПустаяСсылка.Метаданные().Характеристики;
	Для Каждого Характеристика Из Характеристики Цикл
		
		ВидыХарактеристик = Характеристика.ВидыХарактеристик.ПолноеИмя();
		ВидыХарактеристик = СтрЗаменить(ВидыХарактеристик, "ТабличнаяЧасть.", "");
		
		ЗначенияХарактеристик = Характеристика.ЗначенияХарактеристик.ПолноеИмя();
		ЗначенияХарактеристик = СтрЗаменить(ЗначенияХарактеристик, "ТабличнаяЧасть.", "");		
		
		Если Характеристика.ПолеОтбораВидов.Имя = "ИмяПредопределенногоНабора" Тогда
			ЗначениеОтбораВидов = """" + Характеристика.ЗначениеОтбораВидов + """";
		Иначе
			ЗначениеОтбораВидов = "ЗНАЧЕНИЕ(" + Характеристика.ЗначениеОтбораВидов.Метаданные().ПолноеИмя() + "." + Характеристика.ЗначениеОтбораВидов.ИмяПредопределенныхДанных + ")";
		КонецЕсли;
		
		ТипЗначения = "NULL";
		Если ВидыХарактеристик = "Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты"
			ИЛИ ВидыХарактеристик = "Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты" Тогда
			ТипЗначения = "ВидыХарактеристик.Свойство.ТипЗначения";
		Иначе	
			Тип = Неопределено;
			Если СтрНачинаетсяС(ЗначенияХарактеристик, "РегистрСведений") Тогда
				Для каждого Ресурс Из Характеристика.ЗначенияХарактеристик.Ресурсы Цикл
					Если Ресурс.Имя = Характеристика.ПолеЗначения.Имя Тогда
						Тип = Ресурс.Тип.Типы()[0];
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если Тип <> Неопределено Тогда
				ПредставлениеТипа = ОбщегоНазначения.СтроковоеПредставлениеТипа(Тип);
				Если Найти(ПредставлениеТипа, "Ссылка") > 0 Тогда
					ТипЗначения = "ЗНАЧЕНИЕ(" + СтрЗаменить(ПредставлениеТипа, "Ссылка", "") + ".ПустаяСсылка)";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|	{ХАРАКТЕРИСТИКИ
		|	ТИП(" + Назначение + ")
		|	ВИДЫХАРАКТЕРИСТИК (ВЫБРАТЬ
		|			ВидыХарактеристик." + Характеристика.ПолеКлюча.Имя + ".Представление КАК Наименование,
		|			" + ТипЗначения + " КАК ТипЗначения,
		|			ВидыХарактеристик." + Характеристика.ПолеКлюча.Имя + " КАК Свойство
		|		ИЗ
		|			" + ВидыХарактеристик + " КАК ВидыХарактеристик
		|		ГДЕ
		|			ВидыХарактеристик." + Характеристика.ПолеОтбораВидов.Имя + " = " + ЗначениеОтбораВидов + ")
		|	ПОЛЕКЛЮЧА Свойство
		|	ПОЛЕИМЕНИ Наименование
		|	ПОЛЕТИПАЗНАЧЕНИЯ ТипЗначения
		|	ЗНАЧЕНИЯХАРАКТЕРИСТИК (ВЫБРАТЬ
		|			ЗначенияХарактеристик." + Характеристика.ПолеОбъекта.Имя + " КАК Объект,
		|			ЗначенияХарактеристик." + Характеристика.ПолеВида.Имя + " КАК Свойство,
		|			ЗначенияХарактеристик." + Характеристика.ПолеЗначения.Имя + " КАК Значение
		|		ИЗ
		|			" + ЗначенияХарактеристик + " КАК ЗначенияХарактеристик)
		|	ПОЛЕОБЪЕКТА Объект
		|	ПОЛЕВИДА Свойство
		|	ПОЛЕЗНАЧЕНИЯ Значение }";
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДополнитьТекстЗапросаДополнительнымиПолями(СхемаКомпоновкиДанных)
	
	ТекстДополнительныхПолей = "";
	
	ДополнитьТекстЗапросаДаннымиХарактеристик(ТекстДополнительныхПолей, "Справочник.АР_ОбъектыАренды");
	ДополнитьТекстЗапросаПолем(ТекстДополнительныхПолей, "Справочник.АР_ОбъектыАренды", "Собственник",, "ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)");
	ДополнитьТекстЗапросаПолем(ТекстДополнительныхПолей, "Справочник.АР_ОбъектыАренды", "Договор собственника",, "ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)");
	
	СхемаКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос = СхемаКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос + ТекстДополнительныхПолей;
	
КонецПроцедуры

// Процедура выполняет загрузку настроек отбора из настроек по умолчанию.
//
&НаСервере
Процедура ЗагрузитьНастройкиОтбораПоУмолчанию()
	
	Если Не ЗначениеЗаполнено(Объект.ТипДокумента) Тогда
		Возврат;
	КонецЕсли;
	ИмяДокумента = ПолучитьИмяДокументаПоТипу();
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	СхемаКомпоновкиДанных = ОбработкаОбъект.ПолучитьМакет(ИмяДокумента);	
	ДополнитьТекстЗапросаДополнительнымиПолями(СхемаКомпоновкиДанных);
	КомпоновщикНастроек.Инициализировать(
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, ЭтаФорма.УникальныйИдентификатор))
	);
	
КонецПроцедуры // ЗагрузитьНастройкиОтбораПоУмолчанию()

&НаСервере
Функция СоздатьШаблонПечатнойФормы(ИмяФайла, АдресФайлаВоВременномХранилище)
	
	СправочникШаблонов = Справочники.АР_ШаблоныДокументов.СоздатьЭлемент();
	СправочникШаблонов.Наименование = Объект.НазваниеШаблона;
	СправочникШаблонов.ТипДокумента = Объект.ТипДокумента;
	СправочникШаблонов.ИмяФайла = ИмяФайла;
	Если ЗначениеЗаполнено(Родитель) Тогда
		СправочникШаблонов.Родитель = Родитель;
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
	СправочникШаблонов.Хранилище = Новый ХранилищеЗначения(ДвоичныеДанные);
	СправочникШаблонов.Записать();
	
	Возврат СправочникШаблонов.Ссылка;
	
КонецФункции

&НаСервере
Процедура ПерезаписатьШаблон(АдресФайлаВоВременномХранилище = Неопределено)
	
	СправочникШаблонов = Объект.ФайлШаблона.ПолучитьОбъект();
	СправочникШаблонов.Наименование = Объект.НазваниеШаблона;
	СправочникШаблонов.ТипДокумента = Объект.ТипДокумента;
	Если ЗначениеЗаполнено(Родитель) Тогда
		СправочникШаблонов.Родитель = Родитель;
	КонецЕсли;
	
	Если Не АдресФайлаВоВременномХранилище = Неопределено Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
		СправочникШаблонов.Хранилище = Новый ХранилищеЗначения(ДвоичныеДанные);
	КонецЕсли;
	СправочникШаблонов.Записать();

КонецПроцедуры

&НаСервере
Функция ПроставитьКвСкобки(Поле, НомерСтроки, ИмяПоля = "")
		
	Индекс = Перечисления.АР_ТипыДокументовПечатныхФорм.Индекс(Объект.ТипДокумента);
	ИмяПеречисления = Метаданные.Перечисления.АР_ТипыДокументовПечатныхФорм.ЗначенияПеречисления[Индекс].Имя;
	МетаданныеДокумента = Метаданные.Документы[ИмяПеречисления];
	
	ПозицияТочки = Найти(Поле, ".");
	Если ПозицияТочки > 0 Тогда
		ИмяТЧ = Лев(Поле, ПозицияТочки - 1);
		Если ИмяТЧ = "ПостояннаяЧасть" ИЛИ ИмяТЧ = "ПеременнаяЧасть" Тогда
			ИмяТЧПроверка = ИмяТЧ + "АренднойПлаты";
		Иначе
			ИмяТЧПроверка = ИмяТЧ;
		КонецЕсли;
		Если МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТЧПроверка) <> Неопределено Тогда
			Возврат ИмяПоля + ИмяТЧ + "[" + Формат(НомерСтроки, "ЧГ=0") + "]." + Сред(Поле, ПозицияТочки + 1);	
		ИначеЕсли МетаданныеДокумента.Реквизиты.Найти(ИмяТЧПроверка) <> Неопределено Тогда
			ИмяПоля = ИмяТЧ + ".";
			Возврат ПроставитьКвСкобки(Сред(Поле, ПозицияТочки + 1), НомерСтроки, ИмяПоля);
		Иначе
			Возврат ИмяПоля + Сред(Поле, ПозицияТочки + 1);
		КонецЕсли;
	Иначе
		Возврат ИмяПоля + Поле;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЗаполнениеМассиваСтрокМодуля()
	
	ТекстМакроса = "";
	ТекстПроцедурЗаполнения = "";
	ТекстДобавленияМеню = "";
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Макросы = ОбработкаОбъект.ПолучитьМакет("МодульШаблона2007");
	Кв = Символ(34);
	Пс = Символ(10);
	
	ШаблонПроцедуры = ПолучитьТекстМакроса(Макросы, "ВставкаПоле");
	ШаблонДобавленияМеню = ПолучитьТекстМакроса(Макросы, "СформироватьМенюСтрока");
	
	Номер = 1;
	Для Каждого СтрокаТаб Из Объект.ВыбранныеПоля Цикл  
		Индекс = СокрЛП(Формат(Номер, "ЧЦ=10"));
		ИмяПоля = СтрокаТаб.Поле;
		Если ЗначениеЗаполнено(СтрокаТаб.НомерСтрокиТЧ) Тогда
			ИмяПоля = ПроставитьКвСкобки(СтрокаТаб.Поле, СтрокаТаб.НомерСтрокиТЧ);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаб.Формат) Тогда
			ИмяПоля = ИмяПоля + "(" + СтрокаТаб.Формат + ")";
		КонецЕсли;
		ТекстПроцедуры = ШаблонПроцедуры;
		ТекстПроцедуры = СтрЗаменить(ТекстПроцедуры, "[Поле]", ИмяПоля);
		ТекстПроцедуры = СтрЗаменить(ТекстПроцедуры, "[Номер]", Индекс);
		ТекстДобавленияПунктаМеню = ШаблонДобавленияМеню;
		ТекстДобавленияПунктаМеню = СтрЗаменить(ТекстДобавленияПунктаМеню, "[Поле]", ИмяПоля);
		ТекстДобавленияПунктаМеню = СтрЗаменить(ТекстДобавленияПунктаМеню, "[Номер]", Индекс);
		ТекстДобавленияПунктаМеню = СтрЗаменить(ТекстДобавленияПунктаМеню, "[Группа]", "False");
		Номер = Номер + 1;
		ТекстПроцедурЗаполнения = ТекстПроцедурЗаполнения + ТекстПроцедуры;
		ТекстДобавленияМеню = ТекстДобавленияМеню + ТекстДобавленияПунктаМеню;
	КонецЦикла;	
	
	ТекстМакроса = "";
	ТекстМакроса = ТекстМакроса + ПолучитьТекстМакроса(Макросы, "Переменные");
	ТекстМакроса = ТекстМакроса + ПолучитьТекстМакроса(Макросы, "ДобавитьПунктМеню");
	ТекстМакроса = ТекстМакроса + ТекстПроцедурЗаполнения;
	ТекстМакроса = ТекстМакроса + ПолучитьТекстМакроса(Макросы, "СформироватьМенюНачало");
	ТекстМакроса = ТекстМакроса + ТекстДобавленияМеню;
	ТекстМакроса = ТекстМакроса + ПолучитьТекстМакроса(Макросы, "СформироватьМенюКонец");
	ТекстМакроса = ТекстМакроса + ПолучитьТекстМакроса(Макросы, "УдалитьМеню");
	
	Возврат ТекстМакроса;
	
КонецФункции

&НаСервере
Функция ПолучитьТекстМакроса(Макросы, ИмяОбласти)
	
	ТекстОбласти = "";
	Область = Макросы.ПолучитьОбласть(ИмяОбласти);
	Для Сч = 1 По Область.ВысотаТаблицы Цикл
		ТекстОбласти = ТекстОбласти + Область.ПолучитьОбласть(Сч, 1).ТекущаяОбласть.Текст + Символ(10);
	КонецЦикла;
	Возврат ТекстОбласти;
	
КонецФункции

&НаКлиенте
Процедура ОткрытиеШаблона(ТекстМакроса)
	
	vbext_ct_StdModule=1; 
	Если ТипЗнч(Объект.ФайлШаблона) = Тип("Строка") Тогда
		Если Не ЗначениеЗаполнено(ПолноеИмяФайла) Тогда
			Возврат;
		КонецЕсли;
		Файл = Новый Файл(ПолноеИмяФайла);
		Если Не Файл.Существует() Тогда
			Возврат; 
		КонецЕсли;
	Иначе
		Если Не СохранитьФайл() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	VB = Новый COMOBject("Word.Application");
	Попытка
		WordDoc = VB.Documents.Open(ПолноеИмяФайла,,0);
	Исключение
		Сообщить("Не удалось открыть файл");
		Возврат;
	КонецПопытки;
	VB.Visible = 1;
	
	Попытка 
		
		ОчиститьМакросы();
		ОчиститьКомпоненты();
		
		Если Объект.ВыбранныеПоля.Количество() > 0 Тогда
			ПутьКМакросу = "";
			#Если НЕ ВебКлиент	Тогда
			ПутьКМакросу = ПолучитьИмяВременногоФайла("txt");
			#КонецЕсли
			ТекстДокумент = Новый ТекстовыйДокумент;
			ТекстДокумент.УстановитьТекст(ТекстМакроса);
			ТекстДокумент.Записать(ПутьКМакросу, "windows-1251");
			WordDoc.VBProject.VBComponents.Import(ПутьКМакросу);
			
			Vb.Application.Run("BuildControls");
		КонецЕсли;
		
		wdWindowStateMaximize = 1;
		Vb.Visible=-1; 
		Vb.Activate();        
		Vb.WindowState=wdWindowStateMaximize;
	Исключение          
		ТекстСообщения = "В файле шаблона установите <<Флажок>> : Сервис  -- Параметры -- Безопасность -- Защита от Макросов -- Надежные источники -- Доверять доступ к Visual Basic Project";
		ПоказатьПредупреждение(, ТекстСообщения);
		ЗакрытьШаблон();
		Возврат; 
	КонецПопытки;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытиеШаблонаЗавершение", ЭтаФорма);
	ТекстВопроса = "Для работы с файлом шаблона, перейдите в окно 
                  |     MS Word. После окончания работы с 
                  |          шаблоном нажмите ОК";
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОК);
	
КонецПроцедуры	

&НаКлиенте
Процедура ОткрытиеШаблонаЗавершение(Ответ, ПараметрыОповещения) Экспорт
	
	ЗакрытьШаблон();

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьШаблон()
	
	ОчиститьМакросы();
	ОчиститьКомпоненты();
	
	Попытка
		WordDoc.Save();
		WordDoc.Close();
		Если VB.Documents.Count = 0 Тогда 
			VB.Quit(0);
		КонецЕсли;
		WordDoc = Неопределено;
	Исключение
	КонецПопытки;
	VB = "";
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОчиститьМакросы()

	Попытка 
		КоличествоКомпонент = WordDoc.VBProject.VBComponents.Count;
		Для Сч = 1 По КоличествоКомпонент Цикл
			Ном = КоличествоКомпонент - Сч + 1;
			Если WordDoc.VBProject.VBComponents(Ном).Type = 1 Тогда
				WordDoc.VBProject.VBComponents.Remove(VB.Application.ActiveDocument.VBProject.VBComponents(Ном));
			КонецЕсли; 
		КонецЦикла;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКомпоненты()
	
	Попытка
		КоличествоКонтролов = Vb.Application.CommandBars("Text").Controls.Count;
		Для К = 1 По КоличествоКонтролов Цикл
			Контрол = Vb.Application.CommandBars("Text").Controls(КоличествоКонтролов - К + 1);
			Если Контрол.Tag = "Arenda" Тогда
				Контрол.Delete();	
			КонецЕсли;
		КонецЦикла;
			
		КоличествоКонтролов = Vb.Application.CommandBars("Table Text").Controls.Count;
		Для К = 1 По КоличествоКонтролов Цикл
			Контрол = Vb.Application.CommandBars("Table Text").Controls(КоличествоКонтролов - К + 1);
			Если Контрол.Tag = "ArendaTab" Тогда
				Контрол.Delete();	
			КонецЕсли;
		КонецЦикла;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРеквизитНаСервере(Источник, Реквизит)
	
	Возврат Источник[Реквизит];
	
КонецФункции

&НаКлиенте
// Процедура сохраняет значение реквизита Хранилище (двоичные данные) на диск.
// При необходимости открывает файл с использованием ассоциированного с ним приложения.
//
// Параметры:
//  ИмяВнешнегоФайла - путь, имя файла дле сохранения на диске
//  Запустить - булево, признак запускать ассоциированное с файлом приложение.
//
Функция СохранитьФайл()
	
	ИмяФайла = ПолучитьРеквизитНаСервере(Объект.ФайлШаблона, "ИмяФайла");
	
	// Получить расширение файла.
	РасширениеВременногоФайла = Прав(ИмяФайла, 4);
	
	Если Лев(РасширениеВременногоФайла, 1) = "." Тогда
		// Получить имя временного файла. Установить расширение временного файла.
		РасширениеВременногоФайла = Прав(ИмяФайла, 3);
	КонецЕсли;
	
	Если ВРег(РасширениеВременногоФайла) <> "DOC" И  ВРег(РасширениеВременногоФайла) <> "DOCX" Тогда // Файл не является word-овским
		Сообщить("Файл шаблона не является файлом Word", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
		
	// Сохранить файл на диске
	ДанныеФайла = ПолучитьДанныеФайла();
	ПолноеИмяФайла = "";
	#Если НЕ ВебКлиент	Тогда
	ПолноеИмяФайла = ПолучитьИмяВременногоФайла(РасширениеВременногоФайла);
	#КонецЕсли
	ФайлМожноОткрывать = ПолучитьФайлВРабочийКаталог(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);

	Возврат ФайлМожноОткрывать;
		
КонецФункции // СохранитьЗапуститьФайл()

&НаКлиенте
Процедура ДобавитьСлешЕслиНужно(НовыйПуть, ТипПлатформыТекущий)
	
	Если СтрДлина(НовыйПуть) = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Если Прав(НовыйПуть, 1) <> "\" И Прав(НовыйПуть,1) <> "/" Тогда
		
		Если ТипПлатформыТекущий = ТипПлатформы.Windows_x86 ИЛИ ТипПлатформыТекущий = ТипПлатформы.Windows_x86_64 Тогда
			НовыйПуть = НовыйПуть + "\";
		Иначе	
			НовыйПуть = НовыйПуть + "/";
		КонецЕсли;			
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьДанныеФайла()
	
	ДвоичныеДанные = Объект.ФайлШаблона.Хранилище.Получить();
	СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("СсылкаНаДвоичныеДанныеФайла", СсылкаНаДвоичныеДанныеФайла);
	
	Возврат СтруктураДанных;
	
КонецФункции

&НаКлиенте
// Получает данные файла с сервера и записывает их в каталог на диске
// Параметры:
//  СсылкаНаДвоичныеДанныеФайла - адрес во временном хранилище с двоичными данными, либо навигационная ссылка на данные файла в ИБ
//  ОтносительныйПуть - путь к файлу относительно рабочего каталога
//  ДатаМодификацииУниверсальная - Дата - универсальная дата модификации файла
//  ИмяФайла - Строка - имя файла (с расширением)
//
// Возвращаемое значение: булево
// Истина - файл получен и сохранен успешно, иначе Ложь
//
// ОСОБЫЕ УСЛОВИЯ
// Требуется наличие подключенного расширения для работы с файлами.
//
Функция ПолучитьФайлВРабочийКаталог(СсылкаНаДвоичныеДанныеФайла) Экспорт
	
	Файл = Новый Файл(ПолноеИмяФайла);
	Если Файл.Существует() Тогда
		Файл.УстановитьТолькоЧтение(Ложь);
		УдалитьФайлы(ПолноеИмяФайла);
	КонецЕсли;
	
	ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, СсылкаНаДвоичныеДанныеФайла);
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
	
	ПолученныеФайлы = Новый Массив;
	
	Если ПолучитьФайлы(ПолучаемыеФайлы, ПолученныеФайлы, , Ложь) Тогда
		ПолноеИмяФайла = ПолученныеФайлы[0].ПолноеИмя;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
// Процедура подключаемая в качестве обработчика при закрытии документа Microsoft Word
// Подключается в процедуре динамически "ОткрытиеШаблона"
Процедура ЗакрытиеДокумента()
	
	ПолноеИмяФайла = WordDoc.FullName;
	Попытка
		Vb.Application.Run("RemoveContentMenuItem");
	Исключение
	    //ОписаниеОшибки()
	КонецПопытки;
	УдалитьОбработчик WordDoc.Close, ЗакрытиеДокумента;
	WordDoc = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайла() 
	
	ДиалогФыбораФайла								=	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогФыбораФайла.Фильтр						=	"Файл шаблона MS Word(*.doc; *.docx)|*.doc; *.docx";
	ДиалогФыбораФайла.Расширение					=	"doc";
	ДиалогФыбораФайла.Заголовок						=	"Выберите файл";
	ДиалогФыбораФайла.ПредварительныйПросмотр		=	Ложь;
	ДиалогФыбораФайла.ИндексФильтра					=	0;
	ДиалогФыбораФайла.ПолноеИмяФайла				=	ПолноеИмяФайла;
	ДиалогФыбораФайла.ПроверятьСуществованиеФайла	=	Истина;
	Если ДиалогФыбораФайла.Выбрать() Тогда
		ПолноеИмяФайла = ДиалогФыбораФайла.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОбработатьТекстПоля(ТекстСтроки)
	
	ПозицияТочки = Найти(ТекстСтроки, ".");
	Если ПозицияТочки > 0 Тогда
		Группа = Лев(ТекстСтроки, ПозицияТочки - 1);
		Если Не (Группа = "ПостояннаяЧастьАренднойПлаты" 
			ИЛИ Группа = "ПеременнаяЧастьАренднойПлаты"
			ИЛИ Группа = "Показания") Тогда
			ТекстСтроки = Сред(ТекстСтроки, ПозицияТочки + 1);
		КонецЕсли;
	КонецЕсли;
	ТекстСтроки = СтрЗаменить(ТекстСтроки, "ПостояннаяЧастьАренднойПлаты", "ПостояннаяЧасть");
	ТекстСтроки = СтрЗаменить(ТекстСтроки, "ПеременнаяЧастьАренднойПлаты", "ПеременнаяЧасть");
	ТекстСтроки = СтрЗаменить(ТекстСтроки, "[Договор собственника]", "ДоговорСобственника");
	Возврат ТекстСтроки;
		
КонецФункции

&НаКлиенте
Процедура ДобавитьПоле(ИмяПоля)
	
	// Проверим, если это строка ТЧ, то возможно уже выбрана конкретная строка
	ЕстьПоле = Ложь;
	Для Каждого СтрокаТаб Из Объект.ВыбранныеПоля Цикл
		Если СтрокаТаб.Поле = ИмяПоля И Не ЗначениеЗаполнено(СтрокаТаб.НомерСтрокиТЧ) И Не ЗначениеЗаполнено(СтрокаТаб.Формат) Тогда
			ЕстьПоле = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Не ЕстьПоле Тогда
		НоваяСтрока = Объект.ВыбранныеПоля.Добавить();
		НоваяСтрока.Поле = ИмяПоля;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Шаблон") Тогда
		Элементы.ФайлШаблона.Заголовок = "Шаблон";
		Объект.ФайлШаблона = Параметры.Шаблон;
		Объект.ТипДокумента = Параметры.Шаблон.ТипДокумента;
		Объект.НазваниеШаблона = Параметры.Шаблон.Наименование;
		Элементы.ТипДокумента.Видимость = НЕ ЗначениеЗаполнено(Объект.ТипДокумента);
		Элементы.ФайлШаблона.Видимость = Ложь;
	Иначе
		Элементы.ФайлШаблона.Заголовок = "Файл шаблона";
		Объект.ФайлШаблона = "";
	КонецЕсли;
	
	Параметры.Свойство("Родитель", Родитель);
	
	Если ТипЗнч(Объект.ФайлШаблона) = Тип("Строка") Тогда
		ПолноеИмяФайла = Объект.ФайлШаблона;
	Иначе
		ПолноеИмяФайла = "";
	КонецЕсли;
	
	Элементы.КомпоновщикНастроекГруппаКолонокДоступноеПоле.Заголовок = "Поле";
	Элементы.КомпоновщикНастроекГруппаКолонокДоступноеПоле.ПодчиненныеЭлементы[1].Заголовок = "Поле";
	ЗагрузитьНастройкиОтбораПоУмолчанию();
			
КонецПроцедуры

////////////////////////////////
// Обработчики нажатий кнопок

&НаКлиенте
Процедура Сохранить(Команда)
	
	Отказ = Не ЭтаФорма.ПроверитьЗаполнение();
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолноеИмяФайла) Тогда
		Если ТипЗнч(Объект.ФайлШаблона) = Тип("СправочникСсылка.АР_ШаблоныДокументов") Тогда
			ПерезаписатьШаблон();
			Оповестить("Запись_ШаблонВорд");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если WordDoc <> Неопределено Тогда
		Попытка
			WordDoc.Save();
			WordDoc.Close();
			WordDoc = Неопределено;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ПомещаемыеФайлы = Новый Массив;
	Описание = Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, "");
	ПомещаемыеФайлы.Добавить(Описание);
	
	ПомещенныеФайлы = Новый Массив;
	
	Если НЕ ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь) Тогда
		Сообщить("Ошибка при помещении файла в хранилище: " + ПолноеИмяФайла, СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	АдресВременногоХранилищаФайла = ПомещенныеФайлы[0].Хранение;
	Файл = Новый Файл(ПолноеИмяФайла);
	
	Если ТипЗнч(Объект.ФайлШаблона) = Тип("Строка") Тогда
		
		Объект.ФайлШаблона = СоздатьШаблонПечатнойФормы(Файл.Имя, АдресВременногоХранилищаФайла);
		Элементы.ФайлШаблона.Заголовок = "Шаблон";
		Элементы.ТипДокумента.Видимость = Ложь;
		
	Иначе
		
		ПерезаписатьШаблон(АдресВременногоХранилищаФайла);
		Сообщить("Файл шаблона - " + Объект.НазваниеШаблона + " перезаписан!");
		
	КонецЕсли;	
	
	Оповестить("Запись_ШаблонВорд");
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	ТекстМакроса = ЗаполнениеМассиваСтрокМодуля();	
	ОткрытиеШаблона(ТекстМакроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлШаблонаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(Объект.ФайлШаблона) = Тип("Строка") Тогда
		ВыборФайла();
		Объект.ФайлШаблона = ПолноеИмяФайла;
	Иначе
		ПараметрыОтбора = Новый Структура();
		Отбор = Новый Структура("ТипДокумента", Объект.ТипДокумента);
		ПараметрыОтбора.Вставить("Отбор", Отбор);
		Форма = ПолучитьФорму("Справочник.АР_ШаблоныДокументов.Форма.ФормаВыбора", ПараметрыОтбора, Элемент);
		Форма.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДокументаПриИзменении(Элемент)
	
	ЗагрузитьНастройкиОтбораПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекстСтроки = Строка(КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка.ПолучитьОбъектПоИдентификатору(ВыбраннаяСтрока).Поле);
	ДобавитьПоле(ОбработатьТекстПоля(ТекстСтроки));
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ТекстСтроки = Строка(КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка.ПолучитьОбъектПоИдентификатору(Элементы.КомпоновщикНастроек.ТекущаяСтрока).Поле);
	ДобавитьПоле(ОбработатьТекстПоля(ТекстСтроки));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводимыеПоляФорматОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = "Произвольный формат" Тогда
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.ВыбранныеПоля.ТекущиеДанные;
		ТекстФормата = "";
		ТекущиеДанные.Формат = "";
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборФорматаЗавершение", ЭтаФорма);
		ФорматСтроки = Новый КонструкторФорматнойСтроки;
		ФорматСтроки.Показать(ОписаниеОповещения);
	ИначеЕсли ВыбранноеЗначение = "Выбрать падеж" Тогда
		СписокПадежей = Новый СписокЗначений;
		СписокПадежей.Добавить("Именительный");
		СписокПадежей.Добавить("Родительный");
		СписокПадежей.Добавить("Дательный");
		СписокПадежей.Добавить("Винительный");
		СписокПадежей.Добавить("Творительный");
		СписокПадежей.Добавить("Предложный");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборПадежаЗавершение", ЭтаФорма);
		ПоказатьВыборИзСписка(ОписаниеОповещения, СписокПадежей);  	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФорматаЗавершение(Текст, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = Элементы.ВыбранныеПоля.ТекущиеДанные;
	ТекущиеДанные.Формат = Текст;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПадежаЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = Элементы.ВыбранныеПоля.ТекущиеДанные;
	Если ВыбранныйЭлемент = Неопределено Тогда
		ТекущиеДанные.Формат = "";
	Иначе
		ТекущиеДанные.Формат = ВыбранныйЭлемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПоле(Команда)
	
	ТекстСтроки = Строка(КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка.ПолучитьОбъектПоИдентификатору(Элементы.КомпоновщикНастроек.ТекущаяСтрока).Поле);
	ДобавитьПоле(ОбработатьТекстПоля(ТекстСтроки));
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ЗаменяемыеСимволы = "\/:*?<>|""";
	Для Индекс = 1 По СтрДлина(ЗаменяемыеСимволы) Цикл
		Если СтрНайти(Объект.НазваниеШаблона, Сред(ЗаменяемыеСимволы, Индекс, 1)) > 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Название шаблона не может содержать символы " + ЗаменяемыеСимволы, , "НазваниеШаблона", , Отказ);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
