
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура СформироватьДокументыНаСервере()
	
	СхемаКомпоновкиДанных = Обработки.АР_ГрупповоеВыставлениеСФ.ПолучитьМакет("Макет");;
	НастройкиКомпоновки = КомпоновщикНастроек.Настройки;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Попытка 
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		
		ТаблицаЗначений =  Новый ТаблицаЗначений;
		
		ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	Исключение
		Возврат;
	КонецПопытки;
	
	СписокКонтрагентов = Новый СписокЗначений;
	СписокДоговоров = Новый СписокЗначений;
	
	СписокКонтрагентов.ЗагрузитьЗначения(ТаблицаЗначений.ВыгрузитьКолонку("КонтрагентСсылка"));
	СписокДоговоров.ЗагрузитьЗначения(ТаблицаЗначений.ВыгрузитьКолонку("ДоговорСсылка"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	АР_НачислениеАренднойПлаты.Ссылка КАК Начисление
	|ИЗ
	|	Документ.АР_НачислениеАренднойПлаты.Состав КАК АР_НачислениеАренднойПлаты
	|ГДЕ
	|	АР_НачислениеАренднойПлаты.Ссылка.НачалоПериода >= &НачалоПериода
	|	И АР_НачислениеАренднойПлаты.Ссылка.ОкончаниеПериода <= &ОкончаниеПериода
	|	И АР_НачислениеАренднойПлаты.Ссылка.Контрагент В(&СписокКонтрагентов)
	|	И АР_НачислениеАренднойПлаты.Ссылка.ДоговорКонтрагента В(&СписокДоговоров)
	|	И (АР_НачислениеАренднойПлаты.СтавкаНДС <> ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ИЛИ &СоздаватьСФБезНДС)
	|	И НЕ АР_НачислениеАренднойПлаты.Ссылка.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	АР_НачислениеАренднойПлаты.Ссылка.Контрагент.Наименование,
	|	АР_НачислениеАренднойПлаты.Ссылка.МоментВремени";
	
	Запрос.УстановитьПараметр("НачалоПериода", Объект.НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", Объект.ОкончаниеПериода);
	Запрос.УстановитьПараметр("СписокКонтрагентов", СписокКонтрагентов);
	Запрос.УстановитьПараметр("СписокДоговоров", СписокДоговоров);
	Запрос.УстановитьПараметр("СоздаватьСФБезНДС", Не Объект.НеСоздаватьСФДляУслугБезНДС);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Отказ = Ложь;
	Пока Выборка.Следующий() Цикл
		ВвестиСчетФактуру(Выборка.Начисление, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьСостоянияДокументов();
	
	ТекстСообщения = НСтр("ru = 'Формирование документов завершено'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСуществующимиДокументамиНаСервере()
	
	СхемаКомпоновкиДанных = Обработки.АР_ГрупповоеВыставлениеСФ.ПолучитьМакет("Макет");;
	НастройкиКомпоновки = КомпоновщикНастроек.Настройки;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Попытка 
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		
		ТаблицаЗначений =  Новый ТаблицаЗначений;
		
		ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	Исключение
		Возврат;
	КонецПопытки;
	
	СписокКонтрагентов = Новый СписокЗначений;
	СписокДоговоров = Новый СписокЗначений;
	
	СписокКонтрагентов.ЗагрузитьЗначения(ТаблицаЗначений.ВыгрузитьКолонку("КонтрагентСсылка"));
	СписокДоговоров.ЗагрузитьЗначения(ТаблицаЗначений.ВыгрузитьКолонку("ДоговорСсылка"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СчетФактураВыданный.Ссылка КАК СчетФактура
	|ИЗ
	|	Документ.АР_НачислениеАренднойПлаты.Состав КАК АР_НачислениеАренднойПлаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ПО АР_НачислениеАренднойПлаты.Ссылка = СчетФактураВыданный.ДокументОснование
	|ГДЕ
	|	АР_НачислениеАренднойПлаты.Ссылка.НачалоПериода >= &НачалоПериода
	|	И АР_НачислениеАренднойПлаты.Ссылка.ОкончаниеПериода <= &ОкончаниеПериода
	|	И АР_НачислениеАренднойПлаты.Ссылка.Контрагент В(&СписокКонтрагентов)
	|	И АР_НачислениеАренднойПлаты.Ссылка.ДоговорКонтрагента В(&СписокДоговоров)
	|	И (АР_НачислениеАренднойПлаты.СтавкаНДС <> ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ИЛИ &СоздаватьСФБезНДС)
	|	И НЕ СчетФактураВыданный.Ссылка.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураВыданный.Ссылка.Контрагент.Наименование";
	
	Запрос.УстановитьПараметр("НачалоПериода", Объект.НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", Объект.ОкончаниеПериода);
	Запрос.УстановитьПараметр("СписокКонтрагентов", СписокКонтрагентов);
	Запрос.УстановитьПараметр("СписокДоговоров", СписокДоговоров);
	Запрос.УстановитьПараметр("СоздаватьСФБезНДС", Не Объект.НеСоздаватьСФДляУслугБезНДС);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТЧ = Объект.СформированныеДокументы.Добавить();
		СтрокаТЧ.Документ = Выборка.СчетФактура;
	КонецЦикла;
	
	ЗаполнитьСостоянияДокументов();
	
	Если Объект.СформированныеДокументы.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Данные для заполнения не обнаружены'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВвестиСчетФактуру(Документ, Отказ)

	Если (Документ.ПометкаУдаления) Тогда
		Возврат;
	КонецЕсли;

	//Попытаемся найти счет фактуру
	СчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(Документ);

	ОбъектСчетаФактуры = Неопределено;

	//Если потерпели неудачу, то необходимо ввести новый документ 
	Если (Не ЗначениеЗаполнено(СчетФактура))
	   И (Не Документ.ПометкаУдаления) Тогда
	   
		//Вводим новый документ на основании нашего
		ОбъектСчетаФактуры = Документы.СчетФактураВыданный.СоздатьДокумент();
		ОбъектСчетаФактуры.ДокументыОснования.Очистить();
		ОбъектСчетаФактуры.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
		ОбъектСчетаФактуры.Заполнить(Документ); 
		
		Попытка
			ОбъектСчетаФактуры.Записать();
			СтатусыДокумента = РегистрыСведений.СтатусыДокументов.НовыеСтатусыДокумента();
			СтатусыДокумента.Статус            = Перечисления.СтатусыДокументовРеализации.НеПодписан;
			СтатусыДокумента.СтатусСФ          = Перечисления.СтатусыСчетаФактуры.НеПроведен;
			СтатусыДокумента.НомерСчетаФактуры = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Документ.Номер, Истина, Ложь);
			РегистрыСведений.СтатусыДокументов.УстановитьСтатусыДокумента(Документ.Ссылка, СтатусыДокумента);
			
			СтрокаТЧ = Объект.СформированныеДокументы.Добавить();
			СтрокаТЧ.Документ = ОбъектСчетаФактуры.Ссылка;
		Исключение
		КонецПопытки;

	КонецЕсли;

КонецПроцедуры // ВвестиСчетФактуру()

&НаСервере
Процедура ЗаполнитьСостоянияДокументов()
	
	Для каждого СтрокаТЧ Из Объект.СформированныеДокументы Цикл
		Если СтрокаТЧ.Документ.Проведен Тогда
			СтрокаТЧ.СостояниеДокумента = 1;
		ИначеЕсли СтрокаТЧ.Документ.ПометкаУдаления Тогда
			СтрокаТЧ.СостояниеДокумента = 2;
		Иначе
			СтрокаТЧ.СостояниеДокумента = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроек()
	
	СхемаКомпоновкиДанных = Обработки.АР_ГрупповоеВыставлениеСФ.ПолучитьМакет("Макет");
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, ЭтаФорма.УникальныйИдентификатор))
	);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
КонецПроцедуры

&НаСервере
Процедура ПровестиДокументыНаСервере()
	
	Для каждого СтрокаТЧ из Объект.СформированныеДокументы Цикл
		Если СтрокаТЧ.Пометка Тогда
			ДокументОбъект = СтрокаТЧ.Документ.ПолучитьОбъект();
			Если ДокументОбъект <> Неопределено И НЕ ДокументОбъект.ПометкаУдаления Тогда
				Попытка
					Если ДокументОбъект.ПроверитьЗаполнение() Тогда
						ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
						СтрокаТЧ.Пометка = Ложь;
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьСостоянияДокументов();
	
КонецПроцедуры

&НаСервере
Процедура ПометитьНаУдалениеНаСервере()
	
	Для каждого СтрокаТЧ из Объект.СформированныеДокументы Цикл
		Если СтрокаТЧ.Пометка Тогда
			ДокументОбъект = СтрокаТЧ.Документ.ПолучитьОбъект();
			Если ДокументОбъект <> Неопределено Тогда
				Попытка
					ДокументОбъект.УстановитьПометкуУдаления(НЕ ДокументОбъект.ПометкаУдаления);;
					СтрокаТЧ.Пометка = Ложь;
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьСостоянияДокументов();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВнешниеПечатныеФормы(СписокПечатныхФорм)

	ДоступныеКомандыПечати = ДополнительныеОтчетыИОбработки.НовыйЗапросПоДоступнымКомандам(
		Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма,
		"Документ.СчетФактураВыданный",
		ЛОЖЬ).Выполнить().Выгрузить();
	
	Для Каждого КомандаПечати Из ДоступныеКомандыПечати Цикл
		СписокПечатныхФорм.Добавить(Новый Структура("Идентификатор, Ссылка, Внешняя", КомандаПечати.Идентификатор, КомандаПечати.Ссылка, Истина), КомандаПечати.Представление);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьСписокПечатныхФорм()
	
	СписокПечатныхФорм = Новый СписокЗначений;
	СписокПечатныхФорм.Добавить("СчетФактура", "Счет-фактура");
	СписокПечатныхФорм.Добавить("СчетФактураСводный", "Счет-фактура (сводный по услугам)");
	СписокПечатныхФорм.Добавить("УниверсальныйПередаточныйДокумент", "Универсальный передаточный документ (УПД)");
	СписокПечатныхФорм.Добавить("УниверсальныйПередаточныйДокументСводный", "Универсальный передаточный документ (УПД) (сводный по услугам)");
	
	ДобавитьВнешниеПечатныеФормы(СписокПечатныхФорм);
	
	Возврат СписокПечатныхФорм;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПечатьНаКлиенте(ПечатнаяФорма, НаПринтер)
	
	МассивДокументов = Новый Массив;	
	Для каждого СтрокаТЧ Из Объект.СформированныеДокументы Цикл
		Если СтрокаТЧ.Пометка Тогда
			МассивДокументов.Добавить(СтрокаТЧ.Документ);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПечатнаяФорма", ПечатнаяФорма);
	ДополнительныеПараметры.Вставить("НаПринтер", НаПринтер);
	
	//ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПечатьНаКлиентеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	//УправлениеПечатьюКлиент.ПроверитьПроведенностьДокументов(ОписаниеОповещения, МассивДокументов, ЭтаФорма);
	ВыполнитьПечатьНаКлиентеЗавершение(МассивДокументов, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПечатьНаКлиентеЗавершение(МассивДокументов, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьСостоянияДокументов();
	
	ПечатнаяФорма = ДополнительныеПараметры.ПечатнаяФорма;
	НаПринтер = ДополнительныеПараметры.НаПринтер;
	
	ПараметрыПечати = Новый Структура;
	ИменаМакетов = "";
	НастройкиПечатиСчетовФактур = УчетНДСВызовСервера.ПолучитьНастройкиПечатиСчетовФактур(МассивДокументов);
	НастройкиПечатиУПД = УчетНДСВызовСервера.ПолучитьНастройкиПечатиУниверсальныхПередаточныхДокументов(МассивДокументов);
	СписокМакетовСФ = НастройкиПечатиСчетовФактур.СписокМакетов;
	СписокМакетовУПД = НастройкиПечатиУПД.СписокМакетов;
	Если ПечатнаяФорма = "СчетФактураСводный" Тогда
		ПараметрыПечати.Вставить("СчетФактураСводный");
		ИменаМакетов = СписокМакетовСФ;
		МенеджерПечати	= "Документ.СчетФактураВыданный";
	ИначеЕсли ПечатнаяФорма = "СчетФактура"	Тогда
		ИменаМакетов = СписокМакетовСФ;
		МенеджерПечати	= "Документ.СчетФактураВыданный";
	ИначеЕсли ПечатнаяФорма = "УниверсальныйПередаточныйДокумент"	Тогда
		ИменаМакетов = СписокМакетовУПД;
		МенеджерПечати	= "Обработка.ПечатьУПД";
	ИначеЕсли ПечатнаяФорма = "УниверсальныйПередаточныйДокументСводный"	Тогда
		ПараметрыПечати.Вставить("СчетФактураСводный");
		ИменаМакетов = СписокМакетовУПД;
		МенеджерПечати	= "Обработка.ПечатьУПД";
	Иначе
		ИменаМакетов = ПечатнаяФорма;
		МенеджерПечати	= "Документ.СчетФактураВыданный";
	КонецЕсли;
	
	Если ТипЗнч(ПечатнаяФорма) = Тип("Структура") Тогда
	    ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьОткрытиеПечатнойФормы(ПечатнаяФорма, ЭтаФорма, МассивДокументов);
	ИначеЕсли НаПринтер Тогда
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер(МенеджерПечати, ИменаМакетов, МассивДокументов, ПараметрыПечати);
	Иначе
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(МенеджерПечати, ИменаМакетов, МассивДокументов, Неопределено, ПараметрыПечати);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыВыбораЗначенияОтбора() Экспорт
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Организация", Неопределено);
	СписокПараметров.Вставить("Контрагент", Неопределено);
	
	Возврат СписокПараметров;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с периодом
//

&НаКлиенте
Процедура ПериодНачалоВыбораЗавершение(СтруктураПериода, ДополнительныеПараметры) Экспорт
	
	// Установим полученный период
	Если СтруктураПериода <> Неопределено Тогда
		Объект.ВидПериода = СтруктураПериода.ВидПериода;
		Период = СтруктураПериода.Период;
		Объект.НачалоПериода = СтруктураПериода.НачалоПериода;
		Объект.ОкончаниеПериода = СтруктураПериода.КонецПериода;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВидПериодаПриИзменении(Элемент)
	
	ВыборПериодаКлиент.ВидПериодаПриИзменении(Элемент, Объект.ВидПериода, Объект.НачалоПериода, Объект.ОкончаниеПериода, Период);
	ВыборПериодаКлиентСервер.ПереключитьТекущуюСтраницуВыбораПериода(Объект.ВидПериода, Элементы.ГруппаПоляВводаПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ВыборПериодаКлиент.ПериодПриИзменении(Элемент, Период, Объект.НачалоПериода, Объект.ОкончаниеПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПериодНачалоВыбораЗавершение", ЭтотОбъект);
	ВыборПериодаКлиент.ПериодНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка, 
		Объект.ВидПериода, Объект.НачалоПериода, ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура ПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВыборПериодаКлиент.ПериодОбработкаВыбора(
		Элемент, ВыбранноеЗначение, СтандартнаяОбработка,
		Объект.ВидПериода, Период, Объект.НачалоПериода, Объект.ОкончаниеПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ВыборПериодаКлиент.ПериодАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка,
		Объект.ВидПериода, Период, Объект.НачалоПериода, Объект.ОкончаниеПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборПериодаКлиент.ПериодОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка,
		Объект.ВидПериода, Период, Объект.НачалоПериода, Объект.ОкончаниеПериода);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
		
	Форма.Период = ВыборПериодаКлиентСервер.ПолучитьПредставлениеПериодаОтчета(
		Объект.ВидПериода, Объект.НачалоПериода, Объект.ОкончаниеПериода);
		
	ВыборПериодаКлиентСервер.ПереключитьТекущуюСтраницуВыбораПериода(Объект.ВидПериода, Элементы.ГруппаПоляВводаПериода);
	
КонецПроцедуры // УправлениеФормой()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализироватьКомпоновщикНастроек();
	
	Если Не ЗначениеЗаполнено(Объект.ВидПериода) Тогда
		Объект.ВидПериода = АР_ОбщиеПроцедуры.ПолучитьВидПериодаПоПериодичности(Константы.АР_ПериодНачисленияАренднойПлаты.Получить());
	КонецЕсли;
		
	Настройки = АР_ОбщиеПроцедуры.ПолучитьНастройкиГрупповыхОбработок();
	Если НЕ Настройки = Неопределено И Настройки.Свойство("УчетнаяЗаписьЭлектроннойПочты") Тогда
		УчетнаяЗаписьЭлектроннойПочты = Настройки.УчетнаяЗаписьЭлектроннойПочты;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		АР_ОбщиеПроцедуры.СохранитьНастройкиГрупповыхОбработок(Новый Структура("УчетнаяЗаписьЭлектроннойПочты", УчетнаяЗаписьЭлектроннойПочты));
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаКлиенте
Процедура СформироватьДокументы(Команда)
	
	Если Объект.СформированныеДокументы.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("СпроситьобОчисткеСформированныхДокументов", ЭтотОбъект, Ложь);
		ПоказатьВопрос(Оповещение, "Таблица сформированных документов будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет);	
		
	Иначе
		СформироватьДокументыЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСуществующимиДокументами(Команда)
	
	Если Объект.СформированныеДокументы.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("СпроситьобОчисткеСформированныхДокументов", ЭтотОбъект, Истина);
		ПоказатьВопрос(Оповещение, "Таблица сформированных документов будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет);	
		
	Иначе
		ЗаполнитьСуществующимиДокументамиЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпроситьобОчисткеСформированныхДокументов(РезультатВопроса, ЗаполнитьСуществующими) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если ЗаполнитьСуществующими Тогда
			ЗаполнитьСуществующимиДокументамиЗавершение();
		Иначе
			СформироватьДокументыЗавершение();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСуществующимиДокументамиЗавершение()
	
	Объект.СформированныеДокументы.Очистить();
	Если ЭтаФорма.ПроверитьЗаполнение() Тогда
		ЗаполнитьСуществующимиДокументамиНаСервере();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДокументыЗавершение()
	
	Объект.СформированныеДокументы.Очистить();
	Если ЭтаФорма.ПроверитьЗаполнение() Тогда
		СформироватьДокументыНаСервере();
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаСформированныеДокументы;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки(Команда)
	
	Для каждого СтрокаТЧ Из Объект.СформированныеДокументы Цикл
		СтрокаТЧ.Пометка = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки(Команда)
	
	Для каждого СтрокаТЧ Из Объект.СформированныеДокументы Цикл
		СтрокаТЧ.Пометка = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Провести(Команда)
	
	ПровестиДокументыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдаление(Команда)
	
	ПометитьНаУдалениеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПросмотр(Команда)
	
	СписокПечатныхФорм = ПолучитьСписокПечатныхФорм();
	ОписаниеОповещения = Новый ОписаниеОповещения("ПечатьЗавершение", ЭтаФорма, Ложь);
	
	СтруктураПараметров = Новый Структура("Заголовок, Список",
		НСтр("ru = 'Выберите печатную форму'"),
		СписокПечатныхФорм);
	
	ОткрытьФорму("ОбщаяФорма.АР_ФормаВыбораИзСписка", СтруктураПараметров, ЭтотОбъект,,,, ОписаниеОповещения);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьНаПринтер(Команда)
	
	СписокПечатныхФорм = ПолучитьСписокПечатныхФорм();
	ОписаниеОповещения = Новый ОписаниеОповещения("ПечатьЗавершение", ЭтаФорма, Истина);
	
	СтруктураПараметров = Новый Структура("Заголовок, Список",
		НСтр("ru = 'Выберите печатную форму'"),
		СписокПечатныхФорм);
	
	ОткрытьФорму("ОбщаяФорма.АР_ФормаВыбораИзСписка", СтруктураПараметров, ЭтотОбъект,,,, ОписаниеОповещения);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочте(Команда)
	
	МассивДокументов = Новый Массив;
	Для Каждого СтрокаТЧ Из Объект.СформированныеДокументы Цикл
		Если СтрокаТЧ.Пометка Тогда
			МассивДокументов.Добавить(СтрокаТЧ.Документ);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивДокументов.Количество() > 0 Тогда
		АР_ОбщиеПроцедурыКлиент.ОтправитьПоЭлектроннойПочте(МассивДокументов, "СчетФактураВыданный", УчетнаяЗаписьЭлектроннойПочты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуГрупповыхОбработок(Команда)
	
	АР_ОбщиеПроцедурыКлиент.ОткрытьНастройкуГрупповыхОбработок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЗавершение(ВыбранныйЭлемент, НаПринтер) Экспорт
	
	Если НЕ ВыбранныйЭлемент = Неопределено Тогда
		ВыполнитьПечатьНаКлиенте(ВыбранныйЭлемент.Значение, НаПринтер);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

&НаКлиенте
Процедура СформированныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Попытка
		ПоказатьЗначение(, Элементы.СформированныеДокументы.ТекущиеДанные.Документ);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПравоеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокПараметров = ПолучитьПараметрыВыбораЗначенияОтбора();
	АР_ОбщиеПроцедурыКлиент.ОтборыПравоеЗначениеНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка, СписокПараметров);
	
КонецПроцедуры
