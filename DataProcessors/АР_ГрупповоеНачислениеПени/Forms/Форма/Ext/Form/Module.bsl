
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура СформироватьДокументыНаСервере()
	
	СхемаКомпоновкиДанных = Обработки.АР_ГрупповоеНачислениеПени.ПолучитьМакет("Макет");;
	НастройкиКомпоновки = КомпоновщикНастроек.Настройки;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Попытка 
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		
		ТаблицаЗначений =  Новый ТаблицаЗначений;
		
		ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	Исключение
		Возврат;
	КонецПопытки;
	
	СписокКонтрагентов = Новый СписокЗначений;
	СписокДоговоров = Новый СписокЗначений;
	СписокОбъектовАренды = Новый СписокЗначений;
	СписокУслуг = Новый СписокЗначений;
	
	СписокКонтрагентов.ЗагрузитьЗначения(ТаблицаЗначений.ВыгрузитьКолонку("КонтрагентСсылка"));
	СписокДоговоров.ЗагрузитьЗначения(ТаблицаЗначений.ВыгрузитьКолонку("ДоговорСсылка"));
	СписокОбъектовАренды.ЗагрузитьЗначения(ТаблицаЗначений.ВыгрузитьКолонку("ОбъектАрендыСсылка"));
	СписокУслуг.ЗагрузитьЗначения(ТаблицаЗначений.ВыгрузитьКолонку("УслугаСсылка"));
	
	ЕстьОтборПоУслугам = Ложь;
	Для Каждого ЭлементОтбора Из НастройкиКомпоновки.Отбор.Элементы Цикл
		Если Лев(Строка(ЭлементОтбора.ЛевоеЗначение), 6) = "Услуга" Тогда
			Если ЭлементОтбора.Использование Тогда
				ЕстьОтборПоУслугам = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ЕстьОтборПоОбъекту = Ложь;
	Для Каждого ЭлементОтбора Из НастройкиКомпоновки.Отбор.Элементы Цикл
		Если Лев(Строка(ЭлементОтбора.ЛевоеЗначение), 6) = "Объект" Тогда
			Если ЭлементОтбора.Использование Тогда
				ЕстьОтборПоОбъекту = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если Не ЕстьОтборПоОбъекту Тогда 
		СписокОбъектовАренды.Добавить(Справочники.АР_ОбъектыАренды.ПустаяСсылка());
	КонецЕсли;
 	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокКонтрагентов", СписокКонтрагентов);
	Запрос.УстановитьПараметр("СписокДоговоров", СписокДоговоров);
	Запрос.УстановитьПараметр("СписокУслуг", СписокУслуг);
	Запрос.УстановитьПараметр("СписокОбъектовАренды", СписокОбъектовАренды);
	
	// Сформируем документы "Начисление пени"
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	АР_СтатусыОбъектовАрендыСрезПоследних.Договор КАК ДоговорКонтрагента,
	|	АР_СтатусыОбъектовАрендыСрезПоследних.Договор.Владелец КАК Контрагент,
	|	АР_СтатусыОбъектовАрендыСрезПоследних.Договор.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.АР_СтатусыОбъектовАренды.СрезПоследних(
	|			,
	|			Договор.Владелец В (&СписокКонтрагентов)
	|				И Договор В (&СписокДоговоров)) КАК АР_СтатусыОбъектовАрендыСрезПоследних
	|ГДЕ
	|	АР_СтатусыОбъектовАрендыСрезПоследних.Статус = &ВАренде
	|
	|УПОРЯДОЧИТЬ ПО
	|	АР_СтатусыОбъектовАрендыСрезПоследних.Договор.Владелец.Наименование";
	
	Запрос.УстановитьПараметр("ВАренде", Перечисления.АР_СтатусыОбъектовАренды.ВАренде);
		
	Комментарий = "Групповое начисление пени от " + Формат(ТекущаяДата(), "ДФ = дд.ММ.гггг");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл  //по парам "Контрагент-Договор"
		
		Начисление = Документы.АР_НачислениеПени.СоздатьДокумент();
		
		ЗаполнитьЗначенияСвойств(Начисление, Выборка);
		Начисление.СчетОрганизации = Начисление.Организация.ОсновнойБанковскийСчет;
		Если Объект.ВремяЗаписиДокуменов = 0 Тогда
			ДатаДокумента = Объект.ДатаНачисления + Число(ТекущаяДата() - НачалоДня(ТекущаяДата()));
		ИначеЕсли Объект.ВремяЗаписиДокуменов = 1 Тогда
			ДатаДокумента = НачалоДня(Объект.ДатаНачисления);
		Иначе
			ДатаДокумента = КонецДня(Объект.ДатаНачисления);
		КонецЕсли;
		
		Уполномоченные = УстановитьРуководителяИГлавногоБухгалтера(Выборка.Организация);
		Начисление.Руководитель = Уполномоченные.Руководитель;
		Начисление.ЗаРуководителяНаОсновании = Справочники.ОснованияПраваПодписи.ОснованиеПраваПодписиФизЛица(Начисление.Руководитель, Начисление.Организация, ДатаДокумента);
		
		Начисление.Дата = ДатаДокумента;
		Начисление.ДатаКурса = Объект.ДатаКурса;
		Начисление.ВалютаДокумента = Начисление.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		Начисление.Комментарий = Комментарий;
		Начисление.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		ЗаполнениеДокументов.Заполнить(Начисление);
		Начисление.СуммаВключаетНДС = ?(Объект.СпособУчетаНДС = Перечисления.АР_СпособыУчетаНДСПриНачисленииПеней.НДССверху, Ложь, Истина);
		Начисление.ДокументБезНДС = ?(Объект.СпособУчетаНДС = Перечисления.АР_СпособыУчетаНДСПриНачисленииПеней.НеУчитыватьНДС, Истина, Ложь);
		Документы.АР_НачислениеПени.ЗаполнитьСчетаУчетаРасчетов(Начисление);
		
		СтруктураКурса = АР_ПроцедурыНачисления.ПолучитьКурсВалюты(Начисление.ВалютаДокумента, Объект.ДатаКурса, Начисление.ДоговорКонтрагента);
        Начисление.КурсВзаиморасчетов = СтруктураКурса.Курс;
		Начисление.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
		Начисление.Ответственный = Пользователи.ТекущийПользователь();
		
		Начисление.ЗаполнитьСтроки();
		
		Для Каждого СтрокаТЧ Из Начисление.Состав Цикл
			СтрокаТЧ.СчетДоходов = Объект.СчетДоходов;
			СтрокаТЧ.Субконто = Объект.Субконто;
		КонецЦикла;
		
		//теперь необходимо применить отбор по услугам и объектам аренды
		Индекс = 0;
		Пока Индекс < Начисление.Состав.Количество() Цикл
			Стр = Начисление.Состав[Индекс];
			Если ЕстьОтборПоУслугам И ((ЗначениеЗаполнено(Стр.Номенклатура) И СписокУслуг.НайтиПоЗначению(Стр.Номенклатура) = Неопределено) ИЛИ НЕ ЗначениеЗаполнено(Стр.Номенклатура)) Тогда
				Начисление.Состав.Удалить(Индекс);
				Продолжить;
			КонецЕсли;
			Если ЕстьОтборПоОбъекту И ((ЗначениеЗаполнено(Стр.ОбъектАренды) И (СписокОбъектовАренды.НайтиПоЗначению(Стр.ОбъектАренды) = Неопределено)) ИЛИ НЕ ЗначениеЗаполнено(Стр.ОбъектАренды)) Тогда
				Начисление.Состав.Удалить(Индекс);
				Продолжить;
			КонецЕсли;
			Если Стр.Сумма = 0 Тогда
				Начисление.Состав.Удалить(Индекс);
				Продолжить;
			КонецЕсли;
			Индекс = Индекс + 1;
		КонецЦикла;
		
		Если Начисление.Состав.Количество()>0 Тогда
			Попытка
				Начисление.Записать();
				СтрокаТЧ = Объект.СформированныеДокументы.Добавить();
				СтрокаТЧ.Документ = Начисление.Ссылка;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьСостоянияДокументов();
	
	ТекстСообщения = НСтр("ru = 'Формирование документов завершено'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСостоянияДокументов()
	
	Для каждого СтрокаТЧ Из Объект.СформированныеДокументы Цикл
		Если СтрокаТЧ.Документ.Проведен Тогда
			СтрокаТЧ.СостояниеДокумента = 1;
		ИначеЕсли СтрокаТЧ.Документ.ПометкаУдаления Тогда
			СтрокаТЧ.СостояниеДокумента = 2;
		Иначе
			СтрокаТЧ.СостояниеДокумента = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроек()
	
	СхемаКомпоновкиДанных = Обработки.АР_ГрупповоеНачислениеПени.ПолучитьМакет("Макет");
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, ЭтаФорма.УникальныйИдентификатор))
	);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
КонецПроцедуры

&НаКлиенте
// Компирует элементы из одной коллекции в другую
Процедура СкопироватьЭлементы(ПриемникЗначения, ИсточникЗначения)
	
	ПриемникЭлементов = ПриемникЗначения.Элементы;
	ИсточникЭлементов = ИсточникЗначения.Элементы;
	ПриемникЭлементов.Очистить();
	
	Для каждого ЭлементИсточник Из ИсточникЭлементов Цикл
		
		Если Лев(Строка(ЭлементИсточник.ЛевоеЗначение), 10) = "Контрагент"
			ИЛИ Лев(Строка(ЭлементИсточник.ЛевоеЗначение), 7) = "Договор"
			ИЛИ Лев(Строка(ЭлементИсточник.ЛевоеЗначение), 11) = "Организация"
			ИЛИ ТипЗнч(ЭлементИсточник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ЭлементПриемник = ПриемникЭлементов.Добавить(ТипЗнч(ЭлементИсточник));
			ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
			
			// В некоторых элементах коллекции необходимо заполнить другие коллекции
			Если ТипЗнч(ЭлементИсточник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				СкопироватьЭлементы(ЭлементПриемник, ЭлементИсточник);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПровестиДокументыНаСервере()
	
	Для каждого СтрокаТЧ из Объект.СформированныеДокументы Цикл
		Если СтрокаТЧ.Пометка Тогда
			ДокументОбъект = СтрокаТЧ.Документ.ПолучитьОбъект();
			Если ДокументОбъект <> Неопределено И НЕ ДокументОбъект.ПометкаУдаления Тогда
				Попытка
					Если ДокументОбъект.ПроверитьЗаполнение() Тогда
						ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
						СтрокаТЧ.Пометка = Ложь;
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьСостоянияДокументов();
	
КонецПроцедуры

&НаСервере
Процедура ПометитьНаУдалениеНаСервере()
	
	Для каждого СтрокаТЧ из Объект.СформированныеДокументы Цикл
		Если СтрокаТЧ.Пометка Тогда
			ДокументОбъект = СтрокаТЧ.Документ.ПолучитьОбъект();
			Если ДокументОбъект <> Неопределено Тогда
				Попытка
					ДокументОбъект.УстановитьПометкуУдаления(НЕ ДокументОбъект.ПометкаУдаления);;
					СтрокаТЧ.Пометка = Ложь;
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьСостоянияДокументов();
	
КонецПроцедуры

&НаСервере
Функция ЕстьДокументыВВалюте()
	
	ЕстьВВалюте = Ложь;
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Для каждого СтрокаТЧ Из Объект.СформированныеДокументы Цикл
		Если СтрокаТЧ.Пометка И Не СтрокаТЧ.Документ.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
			ЕстьВВалюте = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьВВалюте;
	
КонецФункции

&НаСервере
Процедура ДобавитьВнешниеПечатныеФормы(СписокПечатныхФорм)

	ДоступныеКомандыПечати = ДополнительныеОтчетыИОбработки.НовыйЗапросПоДоступнымКомандам(
		Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма,
		"Документ.АР_НачислениеПени",
		ЛОЖЬ).Выполнить().Выгрузить();
	
	Для Каждого КомандаПечати Из ДоступныеКомандыПечати Цикл
		СписокПечатныхФорм.Добавить(Новый Структура("Идентификатор, Ссылка, Внешняя", КомандаПечати.Идентификатор, КомандаПечати.Ссылка, Истина), КомандаПечати.Представление);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПолучитьСписокПечатныхФорм()
	
	КомандыПечати = УправлениеПечатью.СоздатьКоллекциюКомандПечати();
	Документы.АР_НачислениеПени.ДобавитьКомандыПечати(КомандыПечати);
	
	СписокПечатныхФорм = Новый СписокЗначений;
	
	Для Каждого Команда Из КомандыПечати Цикл
		Если Команда.Идентификатор = "Реестр" ИЛИ Команда.Идентификатор = "АктРуб" ИЛИ Команда.Идентификатор = "АктСводныйРуб" Тогда
			Продолжить;
		КонецЕсли;
		Ключ = Новый Структура("МенеджерПечати, Идентификатор, Обработчик");
		ЗаполнитьЗначенияСвойств(Ключ, Команда);
		Если НЕ ЗначениеЗаполнено(Ключ.МенеджерПечати) Тогда
			Ключ.МенеджерПечати = "Документ.АР_НачислениеПени";
		КонецЕсли;
		Ключ.Вставить("Внешняя", Ложь);
		Ключ.Вставить("ПараметрыПечати", Новый Структура);
		Для Каждого Элемент Из Команда.ДополнительныеПараметры Цикл
			Ключ.ПараметрыПечати.Вставить(Элемент.Ключ, Элемент.Значение);	
		КонецЦикла;
		СписокПечатныхФорм.Добавить(Ключ, Команда.Представление);
	КонецЦикла;
	
	ДобавитьВнешниеПечатныеФормы(СписокПечатныхФорм);
	
	Возврат СписокПечатныхФорм;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПечатьНаКлиенте(КомандаПечати, НаПринтер)
	
	МассивДокументов = Новый Массив;	
	Для каждого СтрокаТЧ Из Объект.СформированныеДокументы Цикл
		Если СтрокаТЧ.Пометка Тогда
			МассивДокументов.Добавить(СтрокаТЧ.Документ);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КомандаПечати", КомандаПечати);
	ДополнительныеПараметры.Вставить("НаПринтер", НаПринтер);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПечатьНаКлиентеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	УправлениеПечатьюКлиент.ПроверитьПроведенностьДокументов(ОписаниеОповещения, МассивДокументов, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПечатьНаКлиентеЗавершение(МассивДокументов, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьСостоянияДокументов();
	
	КомандаПечати = ДополнительныеПараметры.КомандаПечати;
	НаПринтер = ДополнительныеПараметры.НаПринтер;
	
	Если НЕ КомандаПечати.Внешняя И КомандаПечати.МенеджерПечати = "Документ.СчетФактураВыданный" Тогда
		НастройкиПечати = УчетНДСВызовСервера.ПолучитьНастройкиПечатиСчетовФактур(МассивДокументов);
		КомандаПечати.Идентификатор = НастройкиПечати.СписокМакетов;
		МассивДокументов = НастройкиПечати.СчетаФактуры;
	ИначеЕсли НЕ КомандаПечати.Внешняя И КомандаПечати.МенеджерПечати = "Обработка.ПечатьУПД" Тогда
		НастройкиПечати = УчетНДСВызовСервера.ПолучитьНастройкиПечатиУниверсальныхПередаточныхДокументов(МассивДокументов);
		КомандаПечати.Идентификатор = НастройкиПечати.СписокМакетов;
		МассивДокументов = НастройкиПечати.УниверсальныеПередаточныеДокументы;
	КонецЕсли;
	
	Если КомандаПечати.Внешняя Тогда
	    ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьОткрытиеПечатнойФормы(КомандаПечати, ЭтаФорма, МассивДокументов);
	ИначеЕсли НаПринтер Тогда
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер(КомандаПечати.МенеджерПечати, КомандаПечати.Идентификатор, МассивДокументов, КомандаПечати.ПараметрыПечати);
	Иначе
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(КомандаПечати.МенеджерПечати, КомандаПечати.Идентификатор, МассивДокументов, ЭтаФорма, КомандаПечати.ПараметрыПечати);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыВыбораЗначенияОтбора() Экспорт
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Организация", Неопределено);
	СписокПараметров.Вставить("Контрагент", Неопределено);
	
	Возврат СписокПараметров;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.ДатаНачисления = ТекущаяДата();
	Объект.ДатаКурса = ТекущаяДата();
	Объект.СпособУчетаНДС = Константы.АР_СпособУчетаНДСПриНачисленииПеней.Получить();
		
	СчетаУчета  = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Справочники.Организации.ПустаяСсылка(), Справочники.Номенклатура.ПустаяСсылка());

	Если СчетаУчета.СчетДоходов <> Неопределено Тогда
		Объект.СчетДоходов  = СчетаУчета.СчетДоходов;
	КонецЕсли;
	
	ИнициализироватьКомпоновщикНастроек();
		
	Настройки = АР_ОбщиеПроцедуры.ПолучитьНастройкиГрупповыхОбработок();
	Если НЕ Настройки = Неопределено И Настройки.Свойство("УчетнаяЗаписьЭлектроннойПочты") Тогда
		УчетнаяЗаписьЭлектроннойПочты = Настройки.УчетнаяЗаписьЭлектроннойПочты;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		АР_ОбщиеПроцедуры.СохранитьНастройкиГрупповыхОбработок(Новый Структура("УчетнаяЗаписьЭлектроннойПочты", УчетнаяЗаписьЭлектроннойПочты));
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаКлиенте
Процедура СформироватьДокументы(Команда)
	
	Если Объект.СформированныеДокументы.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("СпроситьобОчисткеСформированныхДокументов", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, "Таблица сформированных документов будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет);	
		
	Иначе
		СформироватьДокументыЗавершение();
	КонецЕсли;
	                                                        
	Оповестить("ГрупповоеСозданиеДокументов_НачислениеПени");
	
КонецПроцедуры

&НаКлиенте
Процедура СпроситьобОчисткеСформированныхДокументов(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СформироватьДокументыЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДокументыЗавершение()
	
	Объект.СформированныеДокументы.Очистить();
	Если ЭтаФорма.ПроверитьЗаполнение() Тогда
		СформироватьДокументыНаСервере();
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаСформированныеДокументы;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыставлениеСФ(Команда)
	
	ФормаОбработкиСФ = ПолучитьФорму("Обработка.АР_ГрупповоеВыставлениеСФ.Форма");
	СкопироватьЭлементы(ФормаОбработкиСФ.КомпоновщикНастроек.Настройки.Отбор, КомпоновщикНастроек.Настройки.Отбор);
	ФормаОбработкиСФ.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки(Команда)
	
	Для каждого СтрокаТЧ Из Объект.СформированныеДокументы Цикл
		СтрокаТЧ.Пометка = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки(Команда)
	
	Для каждого СтрокаТЧ Из Объект.СформированныеДокументы Цикл
		СтрокаТЧ.Пометка = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Провести(Команда)
	
	ПровестиДокументыНаСервере();
	                                                        
	Оповестить("ГрупповоеСозданиеДокументов_НачислениеПени");
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдаление(Команда)
	
	ПометитьНаУдалениеНаСервере();
	                                                        
	Оповестить("ГрупповоеСозданиеДокументов_НачислениеПени");
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПросмотр(Команда)
	
	СписокПечатныхФорм = ПолучитьСписокПечатныхФорм();
	ОписаниеОповещения = Новый ОписаниеОповещения("ПечатьЗавершение", ЭтаФорма, Ложь);
	
	СтруктураПараметров = Новый Структура("Заголовок, Список",
		НСтр("ru = 'Выберите печатную форму'"),
		СписокПечатныхФорм);
	
	ОткрытьФорму("ОбщаяФорма.АР_ФормаВыбораИзСписка", СтруктураПараметров, ЭтотОбъект,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьНаПринтер(Команда)
	
	СписокПечатныхФорм = ПолучитьСписокПечатныхФорм();
	ОписаниеОповещения = Новый ОписаниеОповещения("ПечатьЗавершение", ЭтаФорма, Истина);
	
	СтруктураПараметров = Новый Структура("Заголовок, Список",
		НСтр("ru = 'Выберите печатную форму'"),
		СписокПечатныхФорм);
	
	ОткрытьФорму("ОбщаяФорма.АР_ФормаВыбораИзСписка", СтруктураПараметров, ЭтотОбъект,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочте(Команда)
	
	МассивДокументов = Новый Массив;
	Для Каждого СтрокаТЧ Из Объект.СформированныеДокументы Цикл
		Если СтрокаТЧ.Пометка Тогда
			МассивДокументов.Добавить(СтрокаТЧ.Документ);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивДокументов.Количество() > 0 Тогда
		АР_ОбщиеПроцедурыКлиент.ОтправитьПоЭлектроннойПочте(МассивДокументов, "АР_НачислениеПени", УчетнаяЗаписьЭлектроннойПочты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуГрупповыхОбработок(Команда)
	
	АР_ОбщиеПроцедурыКлиент.ОткрытьНастройкуГрупповыхОбработок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЗавершение(ВыбранныйЭлемент, НаПринтер) Экспорт
	
	Если НЕ ВыбранныйЭлемент = Неопределено Тогда
		ВыполнитьПечатьНаКлиенте(ВыбранныйЭлемент.Значение, НаПринтер);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

&НаКлиенте
Процедура ДатаНачисленияПриИзменении(Элемент)
	
	Объект.ДатаКурса = Объект.ДатаНачисления;
	
КонецПроцедуры

&НаКлиенте
Процедура СформированныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Попытка
		ПоказатьЗначение(, Элементы.СформированныеДокументы.ТекущиеДанные.Документ);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПравоеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокПараметров = ПолучитьПараметрыВыбораЗначенияОтбора();
	АР_ОбщиеПроцедурыКлиент.ОтборыПравоеЗначениеНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка, СписокПараметров);
	
КонецПроцедуры

&НаСервере
Функция УстановитьРуководителяИГлавногоБухгалтера(Организация)
	
	СтруктураВозврата = Новый Структура("Руководитель, ЗаРуководителяПоПриказу");
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда 
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура("Руководитель, ЗаРуководителяПоПриказу");
	
	ДанныеУполномоченногоЛица = ОтветственныеЛицаБППереопределяемый.ДанныеУполномоченногоЛица(Организация, Пользователи.ТекущийПользователь());
	ОтветственныеЛица = ОтветственныеЛицаБП.ОтветственныеЛица(Организация, Объект.ДатаНачисления);
	
	Если ДанныеУполномоченногоЛица = Неопределено Тогда 
		СтруктураВозврата.Руководитель = ОтветственныеЛица.Руководитель;
		СтруктураВозврата.ЗаРуководителяПоПриказу = "";
	Иначе
		СтруктураВозврата.Руководитель = ?(ЗначениеЗаполнено(ДанныеУполномоченногоЛица.Руководитель), ДанныеУполномоченногоЛица.Руководитель, ОтветственныеЛица.Руководитель);
		СтруктураВозврата.ЗаРуководителяПоПриказу = ?(ЗначениеЗаполнено(ДанныеУполномоченногоЛица.Руководитель), ДанныеУполномоченногоЛица.РуководительНаОсновании, "");
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

