
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура СформироватьДокументыНаСервере()
	
	СхемаКомпоновкиДанных = Обработки.АР_ГрупповоеОформлениеЗаявокНаОбслуживание.ПолучитьМакет("Макет");;
	НастройкиКомпоновки = КомпоновщикНастроек.Настройки;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Попытка 
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		
		ТаблицаЗначений =  Новый ТаблицаЗначений;
		
		ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	Исключение
		Возврат;
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаЗначений);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДанных.Организация,
	|	ТаблицаДанных.ОбъектНедвижимости КАК ОбъектАренды,
	|	ТаблицаДанных.ЭлементОбъекта,
	|	ТаблицаДанных.КомплексРабот,
	|	ТаблицаДанных.Спецификация,
	|	ТаблицаДанных.ТипОбслуживания,
	|	ТаблицаДанных.ГрафикОбслуживания,
	|	ТаблицаДанных.ПоказательВыработки,
	|	ТаблицаДанных.ПороговоеЗначениеВыработки,
	|	ТаблицаДанных.ТехнологическаяКарта,
	|	ТаблицаДанных.Операция,
	|	ТаблицаДанных.ВремяВыполнения,
	|	ТаблицаДанных.Количество,
	|	ТаблицаДанных.Работа,
	|	ТаблицаДанных.ВнутренняяРабота,
	|	ТаблицаДанных.Цена,
	|	ТаблицаДанных.Сумма,
	|	ТаблицаДанных.ДатаПоследнегоВыполнения
	|ПОМЕСТИТЬ ВТТаблицаДанных
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных";	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДанных.Организация КАК Организация,
	|	ТаблицаДанных.ОбъектАренды КАК ОбъектАренды,
	|	ТаблицаДанных.ЭлементОбъекта КАК ЭлементОбъекта,
	|	ТаблицаДанных.КомплексРабот КАК КомплексРабот,
	|	ТаблицаДанных.Спецификация,
	|	ТаблицаДанных.ТипОбслуживания,
	|	ТаблицаДанных.ГрафикОбслуживания КАК ГрафикОбслуживания,
	|	ТаблицаДанных.ПоказательВыработки,
	|	ТаблицаДанных.ПороговоеЗначениеВыработки,
	|	ТаблицаДанных.ТехнологическаяКарта,
	|	ТаблицаДанных.Операция,
	|	ТаблицаДанных.ВремяВыполнения,
	|	ТаблицаДанных.Количество,
	|	ТаблицаДанных.Работа,
	|	ТаблицаДанных.ВнутренняяРабота,
	|	ТаблицаДанных.Цена,
	|	ТаблицаДанных.Сумма,
	|	ТаблицаДанных.ДатаПоследнегоВыполнения КАК ДатаПоследнегоВыполнения
	|ИЗ
	|	ВТТаблицаДанных КАК ТаблицаДанных
	|ИТОГИ
	|	МАКСИМУМ(ДатаПоследнегоВыполнения)
	|ПО
	|	Организация,
	|	ОбъектАренды,
	|	ЭлементОбъекта,
	|	ГрафикОбслуживания,
	|	КомплексРабот";	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивДат = СформироватьМассивДат(Объект.НачалоПериода, Объект.ОкончаниеПериода);

	ТаблицаДатПоследнегоВыполнения = Новый ТаблицаЗначений;
	ТаблицаДатПоследнегоВыполнения.Колонки.Добавить("ГрафикОбслуживания");	
	ТаблицаДатПоследнегоВыполнения.Колонки.Добавить("КомплексРабот");
	ТаблицаДатПоследнегоВыполнения.Колонки.Добавить("ДатаПоследнегоВыполнения");
	
	ВыборкаОрганизаций = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизаций.Следующий() Цикл
		
		ВыборкаОбъектов = ВыборкаОрганизаций.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаОбъектов.Следующий() Цикл
			
			ВыборкаЭлементов = ВыборкаОбъектов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаЭлементов.Следующий() Цикл
				
			    ВыборкаГрафиков = ВыборкаЭлементов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаГрафиков.Следующий() Цикл
					Расписание = ВыборкаГрафиков.ГрафикОбслуживания.Расписание.Получить();
					Если ТипЗнч(Расписание)<>Тип("РасписаниеРегламентногоЗадания") Тогда
						ВыборкаКомплексовРабот = ВыборкаГрафиков.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока ВыборкаКомплексовРабот.Следующий() Цикл
							ТекстСообщения = СтрШаблон("Не указан график обслуживания для комплекса работ ""%1"" по объекту ""%2""", ВыборкаКомплексовРабот.КомплексРабот, ВыборкаКомплексовРабот.ОбъектАренды)
								+ ?(ЗначениеЗаполнено(ВыборкаКомплексовРабот.ЭлементОбъекта), СтрШаблон(" (элемент ""%1"")", ВыборкаКомплексовРабот.ЭлементОбъекта), "");
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						КонецЦикла;
						Продолжить;
					КонецЕсли;
				КонецЦикла;
				
				ТаблицаДатПоследнегоВыполнения.Очистить();
				
				//для каждого дня из периода необходимо получить подтверждение необходимости выполнения операций по обслуживанию
				Для Каждого День Из МассивДат Цикл
					
					//создаем док "Заявка"
					Заявка = Документы.АР_ЗаявкаНаОбслуживание.СоздатьДокумент();
					Заявка.Дата = ТекущаяДата();
					Заявка.Комментарий = "Создана обработкой группового оформления заявок на обслуживание от "+Формат(ТекущаяДата(),"ДФ=дд.ММ.гг");
					Заявка.Организация = ВыборкаЭлементов.Организация;
					Заявка.ОбъектАренды = ВыборкаЭлементов.ОбъектАренды;
					Заявка.ЭлементОбъекта = ВыборкаЭлементов.ЭлементОбъекта;
					Заявка.ДатаВыполненияРабот = День;
					Заявка.СтатусЗаявки = Перечисления.АР_СтатусыЗаявокНаОбслуживание.НаРассмотрении;
					
					ПараметрыОтбора = Новый Структура("ГрафикОбслуживания, КомплексРабот");
								
				    ВыборкаГрафиков = ВыборкаЭлементов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаГрафиков.Следующий() Цикл
						
						Расписание = ВыборкаГрафиков.ГрафикОбслуживания.Расписание.Получить();
						Если ТипЗнч(Расписание)<>Тип("РасписаниеРегламентногоЗадания") Тогда
							Продолжить;
						КонецЕсли;
			
						ВыборкаКомплексовРабот = ВыборкаГрафиков.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока ВыборкаКомплексовРабот.Следующий() Цикл
							
							ЗаполнитьЗначенияСвойств(ПараметрыОтбора,ВыборкаКомплексовРабот);
							СтрТаблицы = ТаблицаДатПоследнегоВыполнения.НайтиСтроки(ПараметрыОтбора);
							Если СтрТаблицы.Количество()=0 Тогда
								ТекСтрокаТаблицыДат = ТаблицаДатПоследнегоВыполнения.Добавить();
								ЗаполнитьЗначенияСвойств(ТекСтрокаТаблицыДат,ВыборкаКомплексовРабот);
								ПоследняяДатаВыполнения = ВыборкаКомплексовРабот.ДатаПоследнегоВыполнения;	
							Иначе
								ТекСтрокаТаблицыДат = СтрТаблицы[0];
								ПоследняяДатаВыполнения = ТекСтрокаТаблицыДат.ДатаПоследнегоВыполнения;
							КонецЕсли;
							
							ТребуетсяВыполнение = Расписание.ТребуетсяВыполнение(День,ПоследняяДатаВыполнения,);
							Если ТребуетсяВыполнение Тогда
								
								//заполняем таб. часть
								ВыборкаРабот = ВыборкаКомплексовРабот.Выбрать();
								Пока ВыборкаРабот.Следующий() Цикл
									СтрТЧ = Заявка.Работы.Добавить();
									ЗаполнитьЗначенияСвойств(СтрТЧ,ВыборкаРабот);
								КонецЦикла;
								
								ТекСтрокаТаблицыДат.ДатаПоследнегоВыполнения = День;
								
							КонецЕсли;
							
						КонецЦикла; //по комплексам работ
						
					КонецЦикла; // по графикам
					
					Если Заявка.Работы.Количество()>0 Тогда
						
						Заявка.Записать();						
						СтрокаТЧ = Объект.СформированныеДокументы.Добавить();
						СтрокаТЧ.Документ = Заявка.Ссылка;
						
						Заявка.ЗаполнитьМатериалы();
						Заявка.Записать();	
						
					КонецЕсли;
					
				КонецЦикла; //по дням из периода
				
			КонецЦикла; //по элементам
			
		КонецЦикла; //по объектам аренды
		
	КонецЦикла; //по организации
	
	ЗаполнитьСостоянияДокументов();
	
	ТекстСообщения = НСтр("ru = 'Формирование документов завершено'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаСервере
Функция СформироватьМассивДат(НачалоПериода, ОкончаниеПериода)
	
	День = 60*60*24;
	МассивДат = Новый Массив();
	ОчереднаяДата = НачалоДня(НачалоПериода);
	
	Пока ОчереднаяДата<=ОкончаниеПериода Цикл
		МассивДат.Добавить(ОчереднаяДата);
		ОчереднаяДата = ОчереднаяДата + День;
	КонецЦикла;
	
	Возврат МассивДат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСостоянияДокументов()
	
	Для каждого СтрокаТЧ Из Объект.СформированныеДокументы Цикл
		Если СтрокаТЧ.Документ.Проведен Тогда
			СтрокаТЧ.СостояниеДокумента = 1;
		ИначеЕсли СтрокаТЧ.Документ.ПометкаУдаления Тогда
			СтрокаТЧ.СостояниеДокумента = 2;
		Иначе
			СтрокаТЧ.СостояниеДокумента = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроек()
	
	СхемаКомпоновкиДанных = Обработки.АР_ГрупповоеОформлениеЗаявокНаОбслуживание.ПолучитьМакет("Макет");
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, ЭтаФорма.УникальныйИдентификатор))
	);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
КонецПроцедуры

&НаСервере
Процедура ПровестиДокументыНаСервере()
	
	Для каждого СтрокаТЧ из Объект.СформированныеДокументы Цикл
		Если СтрокаТЧ.Пометка Тогда
			ДокументОбъект = СтрокаТЧ.Документ.ПолучитьОбъект();
			Если ДокументОбъект <> Неопределено И НЕ ДокументОбъект.ПометкаУдаления Тогда
				Попытка
					Если ДокументОбъект.ПроверитьЗаполнение() Тогда
						ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
						СтрокаТЧ.Пометка = Ложь;
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьСостоянияДокументов();
	
КонецПроцедуры

&НаСервере
Процедура ПометитьНаУдалениеНаСервере()
	
	Для каждого СтрокаТЧ из Объект.СформированныеДокументы Цикл
		Если СтрокаТЧ.Пометка Тогда
			ДокументОбъект = СтрокаТЧ.Документ.ПолучитьОбъект();
			Если ДокументОбъект <> Неопределено Тогда
				Попытка
					ДокументОбъект.УстановитьПометкуУдаления(НЕ ДокументОбъект.ПометкаУдаления);;
					СтрокаТЧ.Пометка = Ложь;
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьСостоянияДокументов();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыВыбораЗначенияОтбора() Экспорт
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Организация", Неопределено);
	СписокПараметров.Вставить("Контрагент", Неопределено);
	
	Возврат СписокПараметров;
	
КонецФункции

&НаСервере
Процедура ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_НаборКонстант" Тогда
		ВедетсяПроизводственнаяДеятельность = ПолучитьФункциональнуюОпцию("ВедетсяПроизводственнаяДеятельность");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с периодом
//

&НаКлиенте
Процедура ПериодНачалоВыбораЗавершение(СтруктураПериода, ДополнительныеПараметры) Экспорт
	
	// Установим полученный период
	Если СтруктураПериода <> Неопределено Тогда
		Объект.ВидПериода = СтруктураПериода.ВидПериода;
		Период = СтруктураПериода.Период;
		Объект.НачалоПериода = СтруктураПериода.НачалоПериода;
		Объект.ОкончаниеПериода = СтруктураПериода.КонецПериода;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВидПериодаПриИзменении(Элемент)
	
	ВыборПериодаКлиент.ВидПериодаПриИзменении(Элемент, Объект.ВидПериода, Объект.НачалоПериода, Объект.ОкончаниеПериода, Период);
	ВыборПериодаКлиентСервер.ПереключитьТекущуюСтраницуВыбораПериода(Объект.ВидПериода, Элементы.ГруппаПоляВводаПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ВыборПериодаКлиент.ПериодПриИзменении(Элемент, Период, Объект.НачалоПериода, Объект.ОкончаниеПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПериодНачалоВыбораЗавершение", ЭтотОбъект);
	ВыборПериодаКлиент.ПериодНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка, 
		Объект.ВидПериода, Объект.НачалоПериода, ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура ПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВыборПериодаКлиент.ПериодОбработкаВыбора(
		Элемент, ВыбранноеЗначение, СтандартнаяОбработка,
		Объект.ВидПериода, Период, Объект.НачалоПериода, Объект.ОкончаниеПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ВыборПериодаКлиент.ПериодАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка,
		Объект.ВидПериода, Период, Объект.НачалоПериода, Объект.ОкончаниеПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборПериодаКлиент.ПериодОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка,
		Объект.ВидПериода, Период, Объект.НачалоПериода, Объект.ОкончаниеПериода);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
		
	Форма.Период = ВыборПериодаКлиентСервер.ПолучитьПредставлениеПериодаОтчета(
		Объект.ВидПериода, Объект.НачалоПериода, Объект.ОкончаниеПериода);
		
	ВыборПериодаКлиентСервер.ПереключитьТекущуюСтраницуВыбораПериода(Объект.ВидПериода, Элементы.ГруппаПоляВводаПериода);
	
КонецПроцедуры // УправлениеФормой()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализироватьКомпоновщикНастроек();
	ВедетсяПроизводственнаяДеятельность = ПолучитьФункциональнуюОпцию("ВедетсяПроизводственнаяДеятельность");

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_НаборКонстант" Тогда
		ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаКлиенте
Процедура СформироватьДокументы(Команда)
	
	Если НЕ ВедетсяПроизводственнаяДеятельность Тогда
		ПоказатьПредупреждение(, "Для использования обработки необходимо включить функциональность ""Производство""");
		Возврат;
	КонецЕсли;
	
	Если Объект.СформированныеДокументы.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("СпроситьобОчисткеСформированныхДокументов", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, "Таблица сформированных документов будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет);	
		
	Иначе
		СформироватьДокументыЗавершение();
	КонецЕсли;
	
	Оповестить("ГрупповоеСозданиеДокументов_Заявки");
	
КонецПроцедуры

&НаКлиенте
Процедура СпроситьобОчисткеСформированныхДокументов(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СформироватьДокументыЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДокументыЗавершение()
	
	Объект.СформированныеДокументы.Очистить();
	Если ЭтаФорма.ПроверитьЗаполнение() Тогда
		СформироватьДокументыНаСервере();
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаСформированныеДокументы;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки(Команда)
	
	Для каждого СтрокаТЧ Из Объект.СформированныеДокументы Цикл
		СтрокаТЧ.Пометка = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки(Команда)
	
	Для каждого СтрокаТЧ Из Объект.СформированныеДокументы Цикл
		СтрокаТЧ.Пометка = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Провести(Команда)
	
	ПровестиДокументыНаСервере();
	
	Оповестить("ГрупповоеСозданиеДокументов_Заявки");
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдаление(Команда)
	
	ПометитьНаУдалениеНаСервере();
	
	Оповестить("ГрупповоеСозданиеДокументов_Заявки");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

&НаКлиенте
Процедура СформированныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Попытка
		ПоказатьЗначение(, Элементы.СформированныеДокументы.ТекущиеДанные.Документ);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПравоеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокПараметров = ПолучитьПараметрыВыбораЗначенияОтбора();
	АР_ОбщиеПроцедурыКлиент.ОтборыПравоеЗначениеНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка, СписокПараметров);
	
КонецПроцедуры

