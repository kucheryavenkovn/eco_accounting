

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.ДатаСчета = ТекущаяДата();
	Объект.ДатаКурса = ТекущаяДата();
	Объект.ПометитьНаУдалениеСуществующиеДокументы = 1;
	Объект.ВидОперации = Перечисления.АР_ВидыОперацийСчетНаАренду.ОплатаАренды;
	Объект.СуммаВключаетНДС = Истина;
	Объект.СпособУчетаНДС = Константы.АР_СпособУчетаНДСПриНачисленииПеней.Получить();
	
	Если Не ЗначениеЗаполнено(Объект.ВидПериода) Тогда
		Объект.ВидПериода = АР_ОбщиеПроцедуры.ПолучитьВидПериодаПоПериодичности(Константы.АР_ПериодНачисленияАренднойПлаты.Получить());
	КонецЕсли;
	
	ИнициализироватьКомпоновщикНастроек();
	
	УправлениеФормой(ЭтаФорма);
	
	Настройки = АР_ОбщиеПроцедуры.ПолучитьНастройкиГрупповыхОбработок();
	Если НЕ Настройки = Неопределено И Настройки.Свойство("УчетнаяЗаписьЭлектроннойПочты") Тогда
		УчетнаяЗаписьЭлектроннойПочты = Настройки.УчетнаяЗаписьЭлектроннойПочты;
	КонецЕсли;
	
	НастроитьТекстИнформацииОНовойСхемеНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		АР_ОбщиеПроцедуры.СохранитьНастройкиГрупповыхОбработок(Новый Структура("УчетнаяЗаписьЭлектроннойПочты", УчетнаяЗаписьЭлектроннойПочты));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененаСхемаОпределенияСтавокНДС" Тогда
		НастроитьТекстИнформацииОНовойСхемеНДС();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаСчетаПриИзменении(Элемент)
	
	Объект.ДатаКурса = Объект.ДатаСчета;
	
КонецПроцедуры

&НаКлиенте
Процедура ПостояннаяЧастьОплатыПриИзменении(Элемент)
	
	НастроитьОтбор();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеременнаяЧастьОплатыПриИзменении(Элемент)
	
	НастроитьОтбор();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	НастроитьТекстИнформацииОНовойСхемеНДС();

	НастроитьОтбор();
	
КонецПроцедуры

#Область РаботасПериодом

&НаКлиенте
Процедура ПериодНачалоВыбораЗавершение(СтруктураПериода, ДополнительныеПараметры) Экспорт
	
	// Установим полученный период
	Если СтруктураПериода <> Неопределено Тогда
		Объект.ВидПериода = СтруктураПериода.ВидПериода;
		Период = СтруктураПериода.Период;
		Объект.НачалоПериода = СтруктураПериода.НачалоПериода;
		Объект.ОкончаниеПериода = СтруктураПериода.КонецПериода;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВидПериодаПриИзменении(Элемент)
	
	ВыборПериодаКлиент.ВидПериодаПриИзменении(Элемент, Объект.ВидПериода, Объект.НачалоПериода, Объект.ОкончаниеПериода, Период);
	ВыборПериодаКлиентСервер.ПереключитьТекущуюСтраницуВыбораПериода(Объект.ВидПериода, Элементы.ГруппаПоляВводаПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ВыборПериодаКлиент.ПериодПриИзменении(Элемент, Период, Объект.НачалоПериода, Объект.ОкончаниеПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПериодНачалоВыбораЗавершение", ЭтотОбъект);
	ВыборПериодаКлиент.ПериодНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка, 
		Объект.ВидПериода, Объект.НачалоПериода, ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура ПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВыборПериодаКлиент.ПериодОбработкаВыбора(
		Элемент, ВыбранноеЗначение, СтандартнаяОбработка,
		Объект.ВидПериода, Период, Объект.НачалоПериода, Объект.ОкончаниеПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ВыборПериодаКлиент.ПериодАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка,
		Объект.ВидПериода, Период, Объект.НачалоПериода, Объект.ОкончаниеПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборПериодаКлиент.ПериодОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка,
		Объект.ВидПериода, Период, Объект.НачалоПериода, Объект.ОкончаниеПериода);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСформированныеДокументы

&НаКлиенте
Процедура СформированныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Попытка
		ПоказатьЗначение(, Элементы.СформированныеДокументы.ТекущиеДанные.Документ);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтборы

&НаКлиенте
Процедура ОтборыПравоеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокПараметров = ПолучитьПараметрыВыбораЗначенияОтбора();
	АР_ОбщиеПроцедурыКлиент.ОтборыПравоеЗначениеНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка, СписокПараметров);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьДокументы(Команда)
	
	Если Объект.СформированныеДокументы.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("СпроситьобОчисткеСформированныхДокументов", ЭтотОбъект, Ложь);
		ПоказатьВопрос(Оповещение, "Таблица сформированных документов будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет);	
		
	Иначе
		СформироватьДокументыЗавершение();
	КонецЕсли;
	
	Оповестить("ГрупповоеСозданиеДокументов_СчетаНаАренду");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки(Команда)
	
	Для каждого СтрокаТЧ Из Объект.СформированныеДокументы Цикл
		СтрокаТЧ.Пометка = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки(Команда)
	
	Для каждого СтрокаТЧ Из Объект.СформированныеДокументы Цикл
		СтрокаТЧ.Пометка = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Провести(Команда)
	
	ПровестиДокументыНаСервере();
	
	Оповестить("ГрупповоеСозданиеДокументов_СчетаНаАренду");
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдаление(Команда)
	
	ПометитьНаУдалениеНаСервере();
	
	Оповестить("ГрупповоеСозданиеДокументов_СчетаНаАренду");
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПросмотр(Команда)
	
	СписокПечатныхФорм = ПолучитьСписокПечатныхФорм();
	ОписаниеОповещения = Новый ОписаниеОповещения("ПечатьЗавершение", ЭтаФорма, Ложь);
	
	СтруктураПараметров = Новый Структура("Заголовок, Список",
		НСтр("ru = 'Выберите печатную форму'"),
		СписокПечатныхФорм);
	
	ОткрытьФорму("ОбщаяФорма.АР_ФормаВыбораИзСписка", СтруктураПараметров, ЭтотОбъект,,,, ОписаниеОповещения);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьНаПринтер(Команда)
	
	СписокПечатныхФорм = ПолучитьСписокПечатныхФорм();
	ОписаниеОповещения = Новый ОписаниеОповещения("ПечатьЗавершение", ЭтаФорма, Истина);
	
	СтруктураПараметров = Новый Структура("Заголовок, Список",
		НСтр("ru = 'Выберите печатную форму'"),
		СписокПечатныхФорм);
	
	ОткрытьФорму("ОбщаяФорма.АР_ФормаВыбораИзСписка", СтруктураПараметров, ЭтотОбъект,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочте(Команда)
	
	МассивДокументов = Новый Массив;
	Для Каждого СтрокаТЧ Из Объект.СформированныеДокументы Цикл
		Если СтрокаТЧ.Пометка Тогда
			МассивДокументов.Добавить(СтрокаТЧ.Документ);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивДокументов.Количество() > 0 Тогда
		АР_ОбщиеПроцедурыКлиент.ОтправитьПоЭлектроннойПочте(МассивДокументов, "АР_СчетНаАренду", УчетнаяЗаписьЭлектроннойПочты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуГрупповыхОбработок(Команда)
	
	АР_ОбщиеПроцедурыКлиент.ОткрытьНастройкуГрупповыхОбработок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСуществующимиДокументами(Команда)
	
	Если Объект.СформированныеДокументы.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("СпроситьобОчисткеСформированныхДокументов", ЭтотОбъект, Истина);
		ПоказатьВопрос(Оповещение, "Таблица сформированных документов будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет);	
		
	Иначе
		ЗаполнитьСуществующимиДокументамиЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаНовуюСхемуНДС(Команда)
	ОткрытьФорму("Обработка.АР_ПереходНаНовуюСхемуОпределенияСтавокНДС.Форма");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СформироватьДокументыНаСервере()
	
	ОплатаАренды = Объект.ВидОперации = Перечисления.АР_ВидыОперацийСчетНаАренду.ОплатаАренды;
	
	СхемаКомпоновкиДанных = Обработки.АР_ГрупповоеВыставлениеСчетов.ПолучитьМакет("Макет");;
	НастройкиКомпоновки = КомпоновщикНастроек.Настройки;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	
	НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПериода", Объект.НачалоПериода);
	НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("ОкончаниеПериода", КонецДня(Объект.ОкончаниеПериода));
	
	
	Попытка 
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		
		ТаблицаЗначений =  Новый ТаблицаЗначений;
		
		ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	Исключение
		Возврат;
	КонецПопытки;
	
	СписокКонтрагентов = Новый СписокЗначений;
	СписокДоговоров = Новый СписокЗначений;
	СписокОбъектовАренды = Новый СписокЗначений;
	СписокУслуг = Новый СписокЗначений;
	СписокДокументов = Новый СписокЗначений;
	
	СписокКонтрагентов.ЗагрузитьЗначения(ТаблицаЗначений.ВыгрузитьКолонку("КонтрагентСсылка"));
	СписокДоговоров.ЗагрузитьЗначения(ТаблицаЗначений.ВыгрузитьКолонку("ДоговорСсылка"));
	СписокОбъектовАренды.ЗагрузитьЗначения(ТаблицаЗначений.ВыгрузитьКолонку("ОбъектАрендыСсылка"));
	СписокУслуг.ЗагрузитьЗначения(ТаблицаЗначений.ВыгрузитьКолонку("УслугаСсылка"));
	
	СписокДокументов.ЗагрузитьЗначения(ТаблицаЗначений.ВыгрузитьКолонку("ДокументСсылка")); //Кучерявенко
	
	отказ = ложь; 
	Если Отказ Тогда Возврат КонецЕсли;
	
	ЕстьОтборПоУслугам = Ложь;
	Для Каждого ЭлементОтбора Из НастройкиКомпоновки.Отбор.Элементы Цикл
		Если Лев(Строка(ЭлементОтбора.ЛевоеЗначение), 6) = "Услуга" Тогда
			Если ЭлементОтбора.Использование Тогда
				ЕстьОтборПоУслугам = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ЕстьОтборПоОбъекту = Ложь;
	Для Каждого ЭлементОтбора Из НастройкиКомпоновки.Отбор.Элементы Цикл
		Если Лев(Строка(ЭлементОтбора.ЛевоеЗначение), 6) = "Объект" Тогда
			Если ЭлементОтбора.Использование Тогда
				ЕстьОтборПоОбъекту = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если Не ЕстьОтборПоОбъекту Тогда 
		СписокОбъектовАренды.Добавить(Справочники.АР_ОбъектыАренды.ПустаяСсылка());
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВАренде", Перечисления.АР_СтатусыОбъектовАренды.ВАренде);
	Запрос.УстановитьПараметр("СписокКонтрагентов", СписокКонтрагентов);
	Запрос.УстановитьПараметр("СписокДоговоров", СписокДоговоров);
	
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);//Кучерявенко
	
	
	Если ОплатаАренды Тогда
		
		// Сделаем проверку на то, сфорированны ли ранее документы
		Запрос.УстановитьПараметр("СписокУслуг", СписокУслуг);
		Запрос.УстановитьПараметр("СписокОбъектовАренды", СписокОбъектовАренды);
		Запрос.УстановитьПараметр("НачалоПериода",  Объект.НачалоПериода);
		Запрос.УстановитьПараметр("ОкончаниеПериода",  КонецДня(Объект.ОкончаниеПериода));
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	АР_СчетНаАрендуСостав.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.АР_СчетНаАренду.Состав КАК АР_СчетНаАрендуСостав
		|ГДЕ
		|	АР_СчетНаАрендуСостав.Ссылка.Контрагент В(&СписокКонтрагентов)
		
		|	И АР_СчетНаАрендуСостав.Ссылка В(&СписокДокументов) //Кучерявенко)
		
		|	И АР_СчетНаАрендуСостав.Ссылка.ДоговорКонтрагента В(&СписокДоговоров)
		|	И АР_СчетНаАрендуСостав.Ссылка.НачалоПериода >= &НачалоПериода
		|	И АР_СчетНаАрендуСостав.Ссылка.ОкончаниеПериода <= &ОкончаниеПериода
		|	И НЕ АР_СчетНаАрендуСостав.Ссылка.ПометкаУдаления
		|	И АР_СчетНаАрендуСостав.Номенклатура В(&СписокУслуг)
		|	И АР_СчетНаАрендуСостав.ОбъектАренды В(&СписокОбъектовАренды)
		|	И АР_СчетНаАрендуСостав.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.АР_ВидыОперацийСчетНаАренду.ОплатаАренды)";
		Выборка = Запрос.Выполнить().Выбрать();
		Отказ = Ложь;
		Пока Выборка.Следующий() Цикл
			Если Объект.ПометитьНаУдалениеСуществующиеДокументы = 1 Тогда
				ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ДокОбъект.УстановитьПометкуУдаления(Истина);
				ТекстСообщения = НСтр("ru = 'Документ """ + Строка(Выборка.Ссылка) + """ помечен на удаление'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка);
			ИначеЕсли Объект.ПометитьНаУдалениеСуществующиеДокументы = 0 Тогда
				ТекстСообщения = НСтр("ru = 'Имеется документ """ + Строка(Выборка.Ссылка) + """, созданный ранее по текущим параметрам отбора'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка,,, Отказ);
			КонецЕсли;
		КонецЦикла;
		
		Если Объект.ПометитьНаУдалениеСуществующиеДокументы = 2 Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	СчетНаАрендуСостав.Ссылка.ДоговорКонтрагента,
			|	СчетНаАрендуСостав.Номенклатура,
			|	СчетНаАрендуСостав.ОбъектАренды
			|ИЗ
			|	Документ.АР_СчетНаАренду.Состав КАК СчетНаАрендуСостав
			|ГДЕ
			|	НЕ СчетНаАрендуСостав.Ссылка.ПометкаУдаления
			|	И СчетНаАрендуСостав.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.АР_ВидыОперацийСчетНаАренду.ОплатаАренды)
			|	И СчетНаАрендуСостав.Ссылка.НачалоПериода = &НачалоПериода
			|	И СчетНаАрендуСостав.Ссылка.ОкончаниеПериода = &ОкончаниеПериода";
			ТаблицаРанееСформированныхДокументов = Запрос.Выполнить().Выгрузить();
		КонецЕсли;	
			
		Если Отказ Тогда
			ТекстСообщения = НСтр("ru = 'Формирование документов прервано'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		// Сформируем документы "Счет на Аренду"
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	АР_СтатусыОбъектовАрендыСрезПоследних.Договор КАК ДоговорКонтрагента,
		|	АР_СтатусыОбъектовАрендыСрезПоследних.Договор.Владелец КАК Контрагент,
		|	АР_СтатусыОбъектовАрендыСрезПоследних.Договор.Организация КАК Организация,
		|	МАКСИМУМ(АР_СтатусыОбъектовАрендыСрезПоследних.Регистратор.СуммаВключаетНДС) КАК СуммаВключаетНДС
		|ИЗ
		|	РегистрСведений.АР_СтатусыОбъектовАренды.СрезПоследних(
		|			&ОкончаниеПериодаКД,
		|			Договор.Владелец В (&СписокКонтрагентов)
		|				И Договор В (&СписокДоговоров)) КАК АР_СтатусыОбъектовАрендыСрезПоследних
		|ГДЕ
		|	АР_СтатусыОбъектовАрендыСрезПоследних.Статус = &ВАренде
		|	И (АР_СтатусыОбъектовАрендыСрезПоследних.ДатаНачалаАренды МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|			ИЛИ АР_СтатусыОбъектовАрендыСрезПоследних.ДатаОкончанияАренды МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|			ИЛИ АР_СтатусыОбъектовАрендыСрезПоследних.ДатаНачалаАренды <= &НачалоПериода
		|				И АР_СтатусыОбъектовАрендыСрезПоследних.ДатаОкончанияАренды >= &ОкончаниеПериода)
		|
		|СГРУППИРОВАТЬ ПО
		|	АР_СтатусыОбъектовАрендыСрезПоследних.Договор,
		|	АР_СтатусыОбъектовАрендыСрезПоследних.Договор.Владелец,
		|	АР_СтатусыОбъектовАрендыСрезПоследних.Договор.Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	АР_СтатусыОбъектовАрендыСрезПоследних.Договор.Владелец.Наименование";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	АР_СтатусыОбъектовАрендыСрезПоследних.Договор КАК ДоговорКонтрагента,
		|	АР_СтатусыОбъектовАрендыСрезПоследних.Договор.Владелец КАК Контрагент,
		|	АР_СтатусыОбъектовАрендыСрезПоследних.Договор.Организация КАК Организация
		|ИЗ
		|	РегистрСведений.АР_СтатусыОбъектовАренды.СрезПоследних(
		|			,
		|			Договор.Владелец В (&СписокКонтрагентов)
		|				И Договор В (&СписокДоговоров)) КАК АР_СтатусыОбъектовАрендыСрезПоследних
		|ГДЕ
		|	АР_СтатусыОбъектовАрендыСрезПоследних.Статус = &ВАренде
		|
		|УПОРЯДОЧИТЬ ПО
		|	АР_СтатусыОбъектовАрендыСрезПоследних.Договор.Владелец.Наименование";
		
	КонецЕсли;
	
	Комментарий = "Групповое выставление счетов от " + Формат(ТекущаяДата(), "ДФ = дд.ММ.гггг");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл  //по парам "Контрагент-Договор"
		
		Счет = Документы.АР_СчетНаАренду.СоздатьДокумент();
		Счет.ВидОперации = Объект.ВидОперации;
		
		ЗаполнитьЗначенияСвойств(Счет, Выборка);   
		Счет.СчетОрганизации = Счет.Организация.ОсновнойБанковскийСчет;
		Если НЕ ЗначениеЗаполнено(Счет.СчетОрганизации) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для организации " + Счет.Организация + " не заполнен основной банковский счет");	
		КонецЕсли;
		Счет.Дата = Объект.ДатаСчета;
		Счет.ДатаКурса = Объект.ДатаКурса;
		Счет.ВидПериода = Объект.ВидПериода;
		Счет.ВалютаДокумента = Счет.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		
		Если ОплатаАренды Тогда
			Если ПолучитьФункциональнуюОпцию("АР_ИспользоватьСхемуОпределенияСтавокНДСПоАрендеНаОсновеДоговора") Тогда
				Если Объект.ВариантУчетаНДС = 0 Тогда
					СуммаВключаетНДС = Выборка.СуммаВключаетНДС;
				ИначеЕсли Объект.ВариантУчетаНДС = 1 Тогда
					СуммаВключаетНДС = Истина;
				Иначе
					СуммаВключаетНДС = Ложь;
				КонецЕсли;
			Иначе
				СуммаВключаетНДС = Объект.СуммаВключаетНДС;
			КонецЕсли;
			Счет.СуммаВключаетНДС = СуммаВключаетНДС;
		Иначе
			Счет.СуммаВключаетНДС = ?(Объект.СпособУчетаНДС = Перечисления.АР_СпособыУчетаНДСПриНачисленииПеней.НДССверху, Ложь, Истина);
			Счет.ДокументБезНДС = ?(Объект.СпособУчетаНДС = Перечисления.АР_СпособыУчетаНДСПриНачисленииПеней.НеУчитыватьНДС, Истина, Ложь);
		КонецЕсли;
		
		Счет.НачалоПериода = Объект.НачалоПериода;
		Счет.ОкончаниеПериода = Объект.ОкончаниеПериода;
		Счет.Комментарий = Комментарий;
		ЗаполнениеДокументов.Заполнить(Счет);
		
		СтруктураКурса = АР_ПроцедурыНачисления.ПолучитьКурсВалюты(Счет.ВалютаДокумента, Объект.ДатаКурса, Счет.ДоговорКонтрагента);
        Счет.КурсВзаиморасчетов = СтруктураКурса.Курс;
		Счет.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
		Счет.Ответственный = Пользователи.ТекущийПользователь();
		
		Если ОплатаАренды Тогда
			Если Объект.ПостояннаяЧастьОплаты Тогда
			    Счет.ЗаполнитьСтроки(Истина, Ложь);
			КонецЕсли;
			Если  Объект.ПеременнаяЧастьОплаты Тогда
				Счет.ЗаполнитьСтроки(Ложь, Ложь);
			КонецЕсли;
		Иначе
			Счет.ЗаполнитьСтрокиПени();
		КонецЕсли;
				
		//теперь необходимо применить отбор по услугам и объектам аренды
		Индекс = 0;
		Пока Индекс < Счет.Состав.Количество() Цикл
			Стр = Счет.Состав[Индекс];
			Если (СписокУслуг.НайтиПоЗначению(Стр.Номенклатура) = Неопределено) и ЕстьОтборПоУслугам Тогда
				Счет.Состав.Удалить(Индекс);
				Продолжить;
			КонецЕсли;
			Если (СписокОбъектовАренды.НайтиПоЗначению(Стр.ОбъектАренды) = Неопределено) и ЕстьОтборПоОбъекту Тогда
				Счет.Состав.Удалить(Индекс);
				Продолжить;
			КонецЕсли;
			Если Стр.Сумма = 0 Тогда
				Счет.Состав.Удалить(Индекс);
				Продолжить;
			КонецЕсли;
			Индекс = Индекс + 1;
		КонецЦикла;
		
		// Проверим, есть ли уже такой документ
		Если ОплатаАренды И Объект.ПометитьНаУдалениеСуществующиеДокументы = 2 Тогда
			ЕстьДокумент = Ложь;
			Для Каждого СтрокаТЧ Из Счет.Состав Цикл
				СтруктураОтбора = Новый Структура("ДоговорКонтрагента, Номенклатура, ОбъектАренды", 
					Счет.ДоговорКонтрагента, СтрокаТЧ.Номенклатура, СтрокаТЧ.ОбъектАренды);	
				НайденныеСтроки = ТаблицаРанееСформированныхДокументов.НайтиСтроки(СтруктураОтбора);
				Если НайденныеСтроки.Количество() > 0 Тогда
					ЕстьДокумент = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ЕстьДокумент Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если Счет.Состав.Количество()>0 Тогда
			Попытка
				Если Счет.ПроверитьЗаполнение() Тогда
					Счет.Записать();
					СрокОплаты = АР_ПроцедурыНачисления.ПолучитьСрокОплатыСчетаНаАренду(Счет);
					СрокиОплатыДокументов.ЗаписатьСрокОплатыДокумента(Счет.Ссылка, СрокОплаты);
					СтрокаТЧ =  Объект.СформированныеДокументы.Добавить();
					СтрокаТЧ.Документ = Счет.Ссылка;
				КонецЕсли;
			Исключение
			КонецПопытки
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьСостоянияДокументов();
	
	ТекстСообщения = НСтр("ru = 'Формирование документов завершено'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
		
	Форма.Период = ВыборПериодаКлиентСервер.ПолучитьПредставлениеПериодаОтчета(
		Объект.ВидПериода, Объект.НачалоПериода, Объект.ОкончаниеПериода);
		
	ВыборПериодаКлиентСервер.ПереключитьТекущуюСтраницуВыбораПериода(Объект.ВидПериода, Элементы.ГруппаПоляВводаПериода);
	
	ОплатаАренды = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.АР_ВидыОперацийСчетНаАренду.ОплатаАренды");
	
	Элементы.ГруппаПериод.Видимость = ОплатаАренды;
	Элементы.ГруппаФлажки.Видимость = ОплатаАренды;
	Элементы.ГруппаСтратегии.Видимость = ОплатаАренды;
	Элементы.СформированныеДокументыЗаполнитьСуществующимиДокументами.Видимость = ОплатаАренды;
	Элементы.СпособУчетаНДС.Видимость = НЕ ОплатаАренды;
	
КонецПроцедуры // УправлениеФормой()

&НаСервере
Процедура ЗаполнитьСостоянияДокументов()
	
	Для каждого СтрокаТЧ Из Объект.СформированныеДокументы Цикл
		Если СтрокаТЧ.Документ.Проведен Тогда
			СтрокаТЧ.СостояниеДокумента = 1;
		ИначеЕсли СтрокаТЧ.Документ.ПометкаУдаления Тогда
			СтрокаТЧ.СостояниеДокумента = 2;
		Иначе
			СтрокаТЧ.СостояниеДокумента = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроек()
	
	СхемаКомпоновкиДанных = Обработки.АР_ГрупповоеВыставлениеСчетов.ПолучитьМакет("Макет");
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, ЭтаФорма.УникальныйИдентификатор))
	);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтбор()
	
	ЕстьПолеОтбора = Ложь;
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных("Услуга.АР_ПостояннаяЧастьОплаты");
	Для Каждого Элемент Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если Элемент.ЛевоеЗначение = ПолеКомпоновки Тогда
			ЭлементОтбора = Элемент;
			ЕстьПолеОтбора = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьПолеОтбора Тогда
		ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.АР_ВидыОперацийСчетНаАренду.ОплатаПени") Тогда
		КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);
		Возврат;
	КонецЕсли;
	
	ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = (Не Объект.ПостояннаяЧастьОплаты ИЛИ Не Объект.ПеременнаяЧастьОплаты) И (Объект.ПостояннаяЧастьОплаты ИЛИ Объект.ПеременнаяЧастьОплаты);
	ЭлементОтбора.ПравоеЗначение = Объект.ПостояннаяЧастьОплаты;
	
КонецПроцедуры

&НаСервере
Процедура ПровестиДокументыНаСервере()
	
	Для каждого СтрокаТЧ из Объект.СформированныеДокументы Цикл
		Если СтрокаТЧ.Пометка Тогда
			ДокументОбъект = СтрокаТЧ.Документ.ПолучитьОбъект();
			Если ДокументОбъект <> Неопределено И НЕ ДокументОбъект.ПометкаУдаления Тогда
				Попытка
					Если ДокументОбъект.ПроверитьЗаполнение() Тогда
						ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
						СтрокаТЧ.Пометка = Ложь;
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьСостоянияДокументов();
	
КонецПроцедуры

&НаСервере
Процедура ПометитьНаУдалениеНаСервере()
	
	Для каждого СтрокаТЧ из Объект.СформированныеДокументы Цикл
		Если СтрокаТЧ.Пометка Тогда
			ДокументОбъект = СтрокаТЧ.Документ.ПолучитьОбъект();
			Если ДокументОбъект <> Неопределено Тогда
				Попытка
					ДокументОбъект.УстановитьПометкуУдаления(НЕ ДокументОбъект.ПометкаУдаления);;
					СтрокаТЧ.Пометка = Ложь;
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьСостоянияДокументов();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВнешниеПечатныеФормы(СписокПечатныхФорм)

	ДоступныеКомандыПечати = ДополнительныеОтчетыИОбработки.НовыйЗапросПоДоступнымКомандам(
		Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма,
		"Документ.АР_СчетНаАренду",
		ЛОЖЬ).Выполнить().Выгрузить();
	
	Для Каждого КомандаПечати Из ДоступныеКомандыПечати Цикл
		СписокПечатныхФорм.Добавить(Новый Структура("Идентификатор, Ссылка, Внешняя", КомандаПечати.Идентификатор, КомандаПечати.Ссылка, Истина), КомандаПечати.Представление);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПолучитьСписокПечатныхФорм()
	
	КомандыПечати = УправлениеПечатью.СоздатьКоллекциюКомандПечати();
	Документы.АР_СчетНаАренду.ДобавитьКомандыПечати(КомандыПечати);
	
	СписокПечатныхФорм = Новый СписокЗначений;
	
	ОплатаПени = Ложь;
	Если Объект.СформированныеДокументы.Количество() > 0 Тогда
		Если Объект.СформированныеДокументы[0].Документ.ВидОперации = Перечисления.АР_ВидыОперацийСчетНаАренду.ОплатаПени Тогда
			ОплатаПени = Истина;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Команда Из КомандыПечати Цикл
		Если Команда.Идентификатор = "Реестр" ИЛИ (Команда.Идентификатор = "СправкаРасчетПеней" И НЕ ОплатаПени) Тогда
			Продолжить;
		КонецЕсли;
		Ключ = Новый Структура("МенеджерПечати, Идентификатор, Обработчик");
		ЗаполнитьЗначенияСвойств(Ключ, Команда);
		Если НЕ ЗначениеЗаполнено(Ключ.МенеджерПечати) Тогда
			Ключ.МенеджерПечати = "Документ.АР_СчетНаАренду";
		КонецЕсли;
		Ключ.Вставить("Внешняя", Ложь);
		Ключ.Вставить("ПараметрыПечати", Новый Структура);
		Для Каждого Элемент Из Команда.ДополнительныеПараметры Цикл
			Ключ.ПараметрыПечати.Вставить(Элемент.Ключ, Элемент.Значение);	
		КонецЦикла;
		СписокПечатныхФорм.Добавить(Ключ, Команда.Представление);
	КонецЦикла;
	
	ДобавитьВнешниеПечатныеФормы(СписокПечатныхФорм);
	
	Возврат СписокПечатныхФорм;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПечатьНаКлиенте(КомандаПечати, НаПринтер)
	
	МассивДокументов = Новый Массив;	
	Для каждого СтрокаТЧ Из Объект.СформированныеДокументы Цикл
		Если СтрокаТЧ.Пометка Тогда
			МассивДокументов.Добавить(СтрокаТЧ.Документ);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если КомандаПечати.Внешняя Тогда
	    ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьОткрытиеПечатнойФормы(КомандаПечати, ЭтаФорма, МассивДокументов);
	ИначеЕсли НаПринтер Тогда
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер(КомандаПечати.МенеджерПечати, КомандаПечати.Идентификатор, МассивДокументов, КомандаПечати.ПараметрыПечати);
	Иначе
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(КомандаПечати.МенеджерПечати, КомандаПечати.Идентификатор, МассивДокументов, ЭтаФорма, КомандаПечати.ПараметрыПечати);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДокументыЗавершение()
	
	Объект.СформированныеДокументы.Очистить();
	Если ЭтаФорма.ПроверитьЗаполнение() Тогда
		СформироватьДокументыНаСервере();
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаСформированныеДокументы;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЗавершение(ВыбранныйЭлемент, НаПринтер) Экспорт
	
	Если НЕ ВыбранныйЭлемент = Неопределено Тогда
		ВыполнитьПечатьНаКлиенте(ВыбранныйЭлемент.Значение, НаПринтер);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыВыбораЗначенияОтбора() Экспорт
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Организация", Неопределено);
	СписокПараметров.Вставить("Контрагент", Неопределено);
	
	Возврат СписокПараметров;
	
КонецФункции

&НаКлиенте
Процедура СпроситьобОчисткеСформированныхДокументов(РезультатВопроса, ЗаполнитьСуществующими) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если ЗаполнитьСуществующими Тогда
			ЗаполнитьСуществующимиДокументамиЗавершение();
		Иначе
			СформироватьДокументыЗавершение();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСуществующимиДокументамиЗавершение()
	
	Объект.СформированныеДокументы.Очистить();
	Если ЭтаФорма.ПроверитьЗаполнение() Тогда
		ЗаполнитьСуществующимиДокументамиНаСервере();	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСуществующимиДокументамиНаСервере()
	
	СхемаКомпоновкиДанных = Обработки.АР_ГрупповоеВыставлениеСчетов.ПолучитьМакет("Макет");;
	НастройкиКомпоновки = КомпоновщикНастроек.Настройки;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Попытка 
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		
		ТаблицаЗначений =  Новый ТаблицаЗначений;
		
		ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	Исключение
		Возврат;
	КонецПопытки;
	
	СписокКонтрагентов = Новый СписокЗначений;
	СписокДоговоров = Новый СписокЗначений;
	СписокОбъектовАренды = Новый СписокЗначений;
	СписокУслуг = Новый СписокЗначений;
	
	СписокКонтрагентов.ЗагрузитьЗначения(ТаблицаЗначений.ВыгрузитьКолонку("КонтрагентСсылка"));
	СписокДоговоров.ЗагрузитьЗначения(ТаблицаЗначений.ВыгрузитьКолонку("ДоговорСсылка"));
	СписокОбъектовАренды.ЗагрузитьЗначения(ТаблицаЗначений.ВыгрузитьКолонку("ОбъектАрендыСсылка"));
	СписокУслуг.ЗагрузитьЗначения(ТаблицаЗначений.ВыгрузитьКолонку("УслугаСсылка"));
	
	ЕстьОтборПоУслугам = Ложь;
	Для Каждого ЭлементОтбора Из НастройкиКомпоновки.Отбор.Элементы Цикл
		Если Лев(Строка(ЭлементОтбора.ЛевоеЗначение), 6) = "Услуга" Тогда
			Если ЭлементОтбора.Использование Тогда
				ЕстьОтборПоУслугам = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ЕстьОтборПоОбъекту = Ложь;
	Для Каждого ЭлементОтбора Из НастройкиКомпоновки.Отбор.Элементы Цикл
		Если Лев(Строка(ЭлементОтбора.ЛевоеЗначение), 6) = "Объект" Тогда
			Если ЭлементОтбора.Использование Тогда
				ЕстьОтборПоОбъекту = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если Не ЕстьОтборПоОбъекту Тогда 
		СписокОбъектовАренды.Добавить(Справочники.АР_ОбъектыАренды.ПустаяСсылка());
	КонецЕсли;
 	
	Запрос = Новый Запрос;
	
	// Сделаем проверку на то, сфорированны ли ранее документы
	Запрос.УстановитьПараметр("СписокКонтрагентов", СписокКонтрагентов);
	Запрос.УстановитьПараметр("СписокДоговоров", СписокДоговоров);
	Запрос.УстановитьПараметр("СписокУслуг", СписокУслуг);
	Запрос.УстановитьПараметр("СписокОбъектовАренды", СписокОбъектовАренды);
	Запрос.УстановитьПараметр("НачалоПериода", Объект.НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", Объект.ОкончаниеПериода);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	АР_СчетНаАренду.Ссылка КАК Ссылка,
	|	АР_СчетНаАренду.Ссылка.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Документ.АР_СчетНаАренду.Состав КАК АР_СчетНаАренду
	|ГДЕ
	|	АР_СчетНаАренду.Ссылка.Контрагент В(&СписокКонтрагентов)
	|	И АР_СчетНаАренду.Ссылка.ДоговорКонтрагента В(&СписокДоговоров)
	|	И АР_СчетНаАренду.Ссылка.НачалоПериода >= &НачалоПериода
	|	И АР_СчетНаАренду.Ссылка.ОкончаниеПериода <= &ОкончаниеПериода
	|	И АР_СчетНаАренду.Номенклатура В(&СписокУслуг)
	|	И АР_СчетНаАренду.ОбъектАренды В(&СписокОбъектовАренды)
	|	И НЕ АР_СчетНаАренду.Ссылка.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	АР_СчетНаАренду.Ссылка.Контрагент.Наименование,
	|	АР_СчетНаАренду.Ссылка.МоментВремени";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТЧ = Объект.СформированныеДокументы.Добавить();
		СтрокаТЧ.Документ = Выборка.Ссылка;
	КонецЦикла;
		
	ЗаполнитьСостоянияДокументов();
	
	Если Объект.СформированныеДокументы.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Данные для заполнения не обнаружены'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьТекстИнформацииОНовойСхемеНДС()
	
	АР_ИспользоватьСхемуОпределенияСтавокНДСПоАрендеНаОсновеДоговора = ПолучитьФункциональнуюОпцию("АР_ИспользоватьСхемуОпределенияСтавокНДСПоАрендеНаОсновеДоговора");
	Если Объект.ВидОперации = Перечисления.АР_ВидыОперацийСчетНаАренду.ОплатаАренды Тогда
		Если АР_ИспользоватьСхемуОпределенияСтавокНДСПоАрендеНаОсновеДоговора Тогда
			Элементы.ИнформацияОНовойСхемеНДС.Видимость = Ложь;
			Элементы.СуммаВключаетНДС.Видимость = Ложь;
			Элементы.ВариантУчетаНДС.Видимость = Истина;
		Иначе
			Элементы.ИнформацияОНовойСхемеНДС.Видимость = Истина;
			Элементы.СуммаВключаетНДС.Видимость = Истина;
			Элементы.ВариантУчетаНДС.Видимость = Ложь;
			
			Элементы.ТекстИнформацияОНовойСхемеНДС.Заголовок = "Добавлена возможность явного указания ставок НДС по услугам в договоре аренды. 
			|Рекомендуется выполнить переход на новую схему определения ставок НДС.
			|";
		КонецЕсли;	
	Иначе
		Элементы.ИнформацияОНовойСхемеНДС.Видимость = Ложь;
		Элементы.СуммаВключаетНДС.Видимость = Истина;
		Элементы.ВариантУчетаНДС.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
