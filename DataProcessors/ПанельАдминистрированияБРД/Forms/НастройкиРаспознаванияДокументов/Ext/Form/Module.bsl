#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//БП
	Элементы.СкладПоУмолчанию.Видимость = Ложь;
	//Конец БП
	
	ИспользоватьРаспознаваниеДокументов = Константы.ИспользоватьРаспознаваниеДокументов.Получить();
	
	ПолучитьСостоянияПараметровПодключенияРаспознавания();
	ПолучитьСостоянияОбщихНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПерерисоватьПоСостоянию();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИнтернетПоддержкаОтключена" Или ИмяСобытия = "ИнтернетПоддержкаПодключена" Тогда
		ПолучитьСостоянияПараметровПодключенияРаспознавания();
		ПерерисоватьПоСостоянию();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьРаспознаваниеДокументовПриИзменении(Элемент)
	
	УстановитьИспользованиеРаспознаванияДокументов(ИспользоватьРаспознаваниеДокументов);
	ОбновитьПовторноИспользуемыеЗначения();
	ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	ПерерисоватьПоСостоянию();
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастотаЗагрузкиДокументовИзСервисаПриИзменении(Элемент)
	
	ОбновитьОбщиеНастройкиПоТекущимСостояниям();
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастотаЗагрузкиДокументовИзСервисаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ШагРегулирования = 15;
	
	Если Направление = 1 Тогда
		ЧастотаЗагрузкиДокументовИзСервиса = ЧастотаЗагрузкиДокументовИзСервиса + ШагРегулирования;
	Иначе
		ЧастотаЗагрузкиДокументовИзСервиса = ЧастотаЗагрузкиДокументовИзСервиса - ШагРегулирования;
	КонецЕсли;
	
	Если ЧастотаЗагрузкиДокументовИзСервиса < 0 Тогда
		ЧастотаЗагрузкиДокументовИзСервиса = 0;
	КонецЕсли;
	
	ОбновитьОбщиеНастройкиПоТекущимСостояниям();
	
КонецПроцедуры

&НаКлиенте
Процедура АдресПочтыПриИзменении(Элемент)
	
	ИзменитьАдресЭлПочты();
	ПоказатьОповещениеПользователя(НСтр("ru = 'Адрес электронной почты изменен.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантСохраненияСоответствийПриИзменении(Элемент)
	
	ОбновитьОбщиеНастройкиПоТекущимСостояниям();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПоУмолчаниюПриИзменении(Элемент)
	
	ОбновитьОбщиеНастройкиПоТекущимСостояниям();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОбнаруженииДокументаПрикреплятьИзображениеАвтоматическиПриИзменении(Элемент)
	
	ОбновитьОбщиеНастройкиПоТекущимСостояниям();
	
КонецПроцедуры

&НаКлиенте
Процедура ПомечатьДокументОбработаннымПриПрикреаленииИзображенияПриИзменении(Элемент)
	
	ОбновитьОбщиеНастройкиПоТекущимСостояниям();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьСчетФактуруПриСозданииОснованияПриИзменении(Элемент)
	
	ОбновитьОбщиеНастройкиПоТекущимСостояниям();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрыватьНовыеЭлементыСправочниковПослеСозданияПриИзменении(Элемент)
	
	ОбновитьОбщиеНастройкиПоТекущимСостояниям();
	
КонецПроцедуры

&НаКлиенте
Процедура ПорогНоменклатурыДляГрупповогоСозданияПриИзменении(Элемент)
	
	ОбновитьОбщиеНастройкиПоТекущимСостояниям();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подключить(Команда)
	
	Обработчик = Новый ОписаниеОповещения("ПослеПроверкиПодключенияКСервисуРаспознавания", ЭтотОбъект);
	РаспознаваниеДокументовКлиент.ПоказатьАвторизациюИТС(Обработчик, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьДляПилотов(Команда)
	
	Если ТипАутентификации = "НеВыполнена" Тогда
		ПоказатьАвторизацию();
	Иначе
		Обработчик = Новый ОписаниеОповещения("ПослеПодтвержденияПереподключенияДляПилотов", ЭтотОбъект);
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("Отключить", НСтр("ru = 'Отключить'"));
		Кнопки.Добавить("Отмена", НСтр("ru = 'Отмена'"));
		
		ПараметрыВопроса = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
		ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
		ПараметрыВопроса.Заголовок = НСтр("ru = 'Подключение в пилотной программе'");
		ПараметрыВопроса.КнопкаПоУмолчанию = "Отмена";
		
		СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(
			Обработчик,
			НСтр("ru = 'Для подключения в пилотной программе требуется отключить режим использования Портала 1С:ИТС
			           |(после авторизации текущие данные будут сохранены).
			           |Отключить?'"),
			Кнопки,
			ПараметрыВопроса
		);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отключить(Команда)
	
	Обработчик = Новый ОписаниеОповещения("ПослеПодтвержденияОтключения", ЭтотОбъект);
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить("Отключить", НСтр("ru = 'Отключить'"));
	Кнопки.Добавить("Отмена", НСтр("ru = 'Отмена'"));
	
	ПараметрыВопроса = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
	ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
	ПараметрыВопроса.Заголовок = НСтр("ru = 'Отключить распознавания документов'");
	ПараметрыВопроса.КнопкаПоУмолчанию = "Отмена";
	
	СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(
		Обработчик,
		НСтр("ru = 'Отключить распознавание документов?
		           |(можно восстановить подключение в любое время)'"),
		Кнопки,
		ПараметрыВопроса
	);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КомандыДействий

&НаКлиенте
Процедура ПоказатьАвторизацию()
	
	Обработчик = Новый ОписаниеОповещения("ПослеПроверкиПодключенияКСервисуРаспознавания", ЭтотОбъект);
	РаспознаваниеДокументовКлиент.ПоказатьАвторизацию(Обработчик, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСостоянияПараметровПодключенияРаспознавания()
	
	ПытатьсяПодключитьсяПриПроверке = Ложь;
	ПодключеноКСервисуРаспознавания = РаспознаваниеДокументов.ПодключеноКСервисуРаспознавания(ПытатьсяПодключитьсяПриПроверке);
	АккаунтАктивирован = РаспознаваниеДокументов.АккаунтАктивирован();
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыАвторизации = РаспознаваниеДокументов.ТекущиеПараметрыАвторизации();
	ДанныеАутентификацииБИП = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	ЗаполненыДанныеАутентификацииБИП = ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	
	ПараметрыАвторизацииПереопределяемые = Новый Структура("Логин, Пароль");
	РаспознаваниеДокументовПереопределяемый.ПриВыполненииАвторизации(ПараметрыАвторизацииПереопределяемые);
	АвторизацияПереопределена = ЗначениеЗаполнено(ПараметрыАвторизацииПереопределяемые.Логин);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	
	ТипАутентификации = ПараметрыАвторизации.ТипАутентификации;
	
	Если АвторизацияПереопределена Тогда
		Логин = "";
	ИначеЕсли ТипАутентификации = "ПоТикетуИТС" Тогда
		Если ЗаполненыДанныеАутентификацииБИП И Не ОбщегоНазначения.РазделениеВключено() Тогда
			Логин = ДанныеАутентификацииБИП.Логин;
		Иначе
			Логин = "";
		КонецЕсли;
	ИначеЕсли ТипАутентификации = "ПоЛогинуПаролю" Тогда
		Логин = ПараметрыАвторизации.Логин;
	Иначе
		Логин = "";
	КонецЕсли;
	
	Если АвторизацияПереопределена Тогда 
		СостояниеПодключенияРаспознавания = НСтр("ru = 'Сервис распознавания документов готов к использованию.'");
	ИначеЕсли ТипАутентификации = "ПоТикетуИТС" Тогда
		Если АккаунтАктивирован Тогда
			
			Если ОбщегоНазначения.РазделениеВключено() И ТипАутентификации = "ПоТикетуИТС" Тогда
				СостояниеПодключенияРаспознавания = НСтр("ru = 'Используется учетная запись Портала 1С:ИТС.'");
			Иначе
				СостояниеПодключенияРаспознавания = СтрШаблон(НСтр("ru = 'Используется учетная запись Портала 1С:ИТС для пользователя ""%1"".'"), Логин);
			КонецЕсли;
			
		Иначе
			
			Если ОбщегоНазначения.РазделениеВключено() И ТипАутентификации = "ПоТикетуИТС" Тогда
				
				СостояниеПодключенияРаспознавания = 
					НСтр("ru = 'Используется учетная запись Портала 1С:ИТС.
					           |
					           |Заявка на подключение сервиса распознавания документов отправлена и будет обработана в ближайшие дни.
					           |Укажите свой e-mail и мы уведовим вас по факту подключения.'");
				
			Иначе
				
				СостояниеПодключенияРаспознавания = СтрШаблон(
					НСтр("ru = 'Используется учетная запись Портала 1С:ИТС для пользователя ""%1"".
					           |
					           |Заявка на подключение сервиса распознавания документов отправлена и будет обработана в ближайшие дни.
					           |Укажите свой e-mail и мы уведовим вас по факту подключения.'"),
					Логин);
				
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипАутентификации = "ПоЛогинуПаролю" Тогда
		СостояниеПодключенияРаспознавания = СтрШаблон(НСтр("ru = 'Выполнен вход в пилотную программу для пользователя ""%1"".'"), Логин);
	Иначе
		Если ЗаполненыДанныеАутентификацииБИП Тогда
			СостояниеПодключенияРаспознавания = НСтр("ru = 'Сервис распознавания документов готов к использованию.'");
		Иначе
			СостояниеПодключенияРаспознавания = НСтр("ru = 'Для использования распознавания документов необходимо подключить интернет-поддержку пользователей.'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСостоянияОбщихНастроек()
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РегистрыСведений.ОбщиеНастройкиРаспознаваниеДокументов.ТекущиеНастройки());
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОбщиеНастройкиПоТекущимСостояниям()
	
	МенеджерЗаписи = РегистрыСведений.ОбщиеНастройкиРаспознаваниеДокументов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Прочитать();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ЭтотОбъект);
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерерисоватьПоСостоянию()
	
	Элементы.СостояниеПодключенияРаспознавания.Заголовок = СостояниеПодключенияРаспознавания;
	Элементы.Подключить.Видимость = Не ЗаполненыДанныеАутентификацииБИП
		И Не ПодключеноКСервисуРаспознавания И Не АвторизацияПереопределена;
	Элементы.Отключить.Видимость = (ТипАутентификации = "ПоЛогинуПаролю") И Не АвторизацияПереопределена;
	Элементы.ПодключитьДляПилотов.Видимость = (ТипАутентификации <> "ПоЛогинуПаролю") И Не АвторизацияПереопределена;
	
	Элементы.ГруппаПодключение.Доступность = ИспользоватьРаспознаваниеДокументов;
	Элементы.ГруппаЧастотаЗагрузки.Доступность = ИспользоватьРаспознаваниеДокументов;
	Элементы.ГруппаЗаполнениеДокументов.Доступность = ИспользоватьРаспознаваниеДокументов;
	Элементы.ГруппаОбработкаДокументов.Доступность = ИспользоватьРаспознаваниеДокументов;
	Элементы.ГруппаПрочее.Доступность = ИспользоватьРаспознаваниеДокументов;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьИспользованиеРаспознаванияДокументов(Использование)
	
	Константы.ИспользоватьРаспознаваниеДокументов.Установить(Использование);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьДанныеАвторизации()
	
	РаспознаваниеДокументов.УдалитьДанныеАвторизации();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьАдресЭлПочты()
	
	РаспознаваниеДокументовКоннекторСлужебный.УстановитьАдресЭлектроннойПочты(АдресЭлПочты);
	ОбновитьОбщиеНастройкиПоТекущимСостояниям();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеОбработчикиСобытий

&НаКлиенте
Процедура ПослеПроверкиПодключенияКСервисуРаспознавания(Результат, Контекст) Экспорт
	
	ПолучитьСостоянияПараметровПодключенияРаспознавания();
	ПерерисоватьПоСостоянию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодтвержденияПереподключенияДляПилотов(Результат, Контекст) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Значение = "Отключить" Тогда
		УдалитьДанныеАвторизации();
		ПолучитьСостоянияПараметровПодключенияРаспознавания();
		ПерерисоватьПоСостоянию();
		ПоказатьАвторизацию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодтвержденияОтключения(Результат, Контекст) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Значение = "Отключить" Тогда
		УдалитьДанныеАвторизации();
		ПолучитьСостоянияПараметровПодключенияРаспознавания();
		ПерерисоватьПоСостоянию();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти