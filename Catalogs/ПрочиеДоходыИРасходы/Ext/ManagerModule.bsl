#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет статью прочих расходов, используемую по умолчанию.
// 
// Возвращаемое значение:
//  СправочникСсылка.ПрочиеДоходыИРасходы - основная статья.
//       Возвращается пустая ссылка, если ни одна статья не назначена основной.
//
Функция ОсновнаяСтатьяПрочихРасходов() Экспорт
	Возврат ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ПрочиеВнереализационныеДоходыРасходы");
КонецФункции

// Находит, а при необходимости - создает предопределенный элемент.
// Следует использовать в алгоритмах, требующих обязательного наличия предопределенного элемента.
//
// В алгоритмах, требующих обязательного наличия предопределенного элемента,
// когда обращение к элементам выполняется в цикле по большому числу элементов,
// следует использовать методы модуля КлассификаторыДоходовРасходов
// - НовыйКешГрупповойОперации
// - ПредопределенныйЭлементГрупповойОперации.
//
// В остальных случаях
// - для получения основной статьи расходов следует использовать ОсновнаяСтатьяПрочихРасходов()
// - для получения других статей, назначенных для использования по умолчанию - ОбщегоНазначения.ПредопределенныйЭлемент()
//
// Параметры:
//  ИмяПредопределенногоЭлемента - Строка - имя предопределенного элемента, заданное в метаданных.
//                                 Описание создаваемых элементов приведено в ЗаполнитьОписанияПоставляемыхЭлементов
// 
// Возвращаемое значение:
//  СправочникСсылка.ПрочиеДоходыИРасходы - найденный (созданный) предопределенный элемент
//
Функция ПредопределенныйЭлемент(ИмяПредопределенногоЭлемента) Экспорт
	
	Возврат КлассификаторыДоходовРасходов.ПредопределенныйЭлемент(
		Справочники.ПрочиеДоходыИРасходы,
		ИмяПредопределенногоЭлемента);
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область КлассификаторыДоходовРасходов

// Содержит описание поставляемых элементов, которые может (должен) содержать справочник.
//
// Параметры:
//  ОписаниеЭлементов - ТаблицаЗначений - см. КлассификаторыДоходовРасходов.НовыйПоставляемыеЭлементы,
//       описание поставляемых элементов справочника
//
Процедура ЗаполнитьОписанияПоставляемыхЭлементов(ОписаниеЭлементов) Экспорт
	
	// Элементы должны следовать в следующем порядке:
	// - статьи с уточнением "прочие" должны идти после "не прочих";
	//   Следствие: статья для использования по умолчанию ("совсем прочие") - последняя
	// - в остальном стремиться более часто используемые статьи размещать над редко используемыми;
	//   в том числе:
	//   -- статьи по более часто используемой функциональности
	//      размещать над статьями по менее часто используемой функциональности
	//   -- создаваемые заранее - до создаваемых при первом обращении.
	
	// Расходы на услуги банков
	ОписаниеЭлемента = ДобавитьОписаниеПоставляемогоЭлемента(
		ОписаниеЭлементов,
		"РасходыНаУслугиБанков",
		Перечисления.ВидыПрочихДоходовИРасходов.РасходыНаУслугиБанков,
		"ru = 'Расходы на услуги банков'",
		"ru = 'Документ «Списание с расчетного счета», используется при загрузке из клиент-банка'",
		Истина);
	
	// Исправительные записи по операциям прошлых лет
	ОписаниеЭлемента = ДобавитьОписаниеПоставляемогоЭлемента(
		ОписаниеЭлементов,
		"ИсправительныеЗаписиПоОперациямПрошлыхЛет",
		Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет,
		"ru = 'Исправительные записи по операциям прошлых лет'",
		"ru = 'Документы «Корректировка поступления» и «Корректировка реализации»'",
		Истина);
	ОписаниеЭлемента.Функциональность.Добавить("ИспользоватьКорректировочныеДокументы");
	
	// Реализация основных средств
	ОписаниеЭлемента = ДобавитьОписаниеПоставляемогоЭлемента(
		ОписаниеЭлементов,
		"РеализацияОсновныхСредств",
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств,
		"ru = 'Реализация основных средств'",
		"ru = 'Документ «Передача ОС» (доходы и расходы от реализации)'",
		Истина);
	ОписаниеЭлемента.Функциональность.Добавить("ВедетсяУчетОсновныхСредств");
	
	// Реализация прочего имущества (материалов)
	ОписаниеЭлемента = ДобавитьОписаниеПоставляемогоЭлемента(
		ОписаниеЭлементов,
		"РеализацияПрочегоИмущества",
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПрочегоИмущества,
		"ru = 'Реализация прочего имущества (материалов)'",
		"ru = 'Документ «Реализация (акт, накладная)», если счет доходов от реализации 91'",
		Истина);
	ОписаниеЭлемента.Функциональность.Добавить("ИспользоватьДокументыПоступления");
	
	// Оприходование излишков
	ОписаниеЭлемента = ДобавитьОписаниеПоставляемогоЭлемента(
		ОписаниеЭлементов,
		"ОприходованиеИзлишков",
		Перечисления.ВидыПрочихДоходовИРасходов.ИзлишкиПриИнвентаризации,
		"ru = 'Оприходование излишков'",
		"ru = 'Документ «Оприходование товаров»'",
		Истина);
	ОписаниеЭлемента.Функциональность.Добавить("ИспользоватьДокументыПоступления");
	
	// Курсовые разницы
	ОписаниеЭлемента = ДобавитьОписаниеПоставляемогоЭлемента(
		ОписаниеЭлементов,
		"КурсовыеРазницы",
		Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы,
		"ru = 'Курсовые разницы'",
		"",
		Истина);
	ОписаниеЭлемента.Функциональность.Добавить("ИспользоватьВалютныйУчет");
	
	// Продажа (покупка) иностранной валюты
	// - используется для отражения совокупного оборота конверсионной операции
	ОписаниеЭлемента = ДобавитьОписаниеПоставляемогоЭлемента(
		ОписаниеЭлементов,
		"ДоходыРасходыПриПродажеПокупкеВалюты",
		Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы, // подп. 6 п. 1 ст. 265
		"ru = 'Продажа (покупка) иностранной валюты'",
		"",
		Истина);
	ОписаниеЭлемента.Функциональность.Добавить("ИспользоватьВалютныйУчет");
	
	// - используется для отражения сальдированного результата конверсионной операции
	ОписаниеЭлемента = ДобавитьОписаниеПоставляемогоЭлемента(
		ОписаниеЭлементов,
		"ОтклонениеКурсаПродажиПокупкиВалюты",
		Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы, // подп. 6 п. 1 ст. 265
		"ru = 'Отклонения курса продажи (покупки) иностранной валюты от официального курса'",
		"",
		Истина);
	ОписаниеЭлемента.Функциональность.Добавить("ИспользоватьВалютныйУчет");
	
	// Уступка права требования по договору факторинга
	ОписаниеЭлемента = ДобавитьОписаниеПоставляемогоЭлемента(
		ОписаниеЭлементов,
		"УступкаПраваТребованияПоДоговоруФакторинга",
		Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы,
		"ru = 'Уступка права требования по договору факторинга'",
		"ru = 'Документ «Передача задолженности на факторинг»'",
		Истина);
	ОписаниеЭлемента.Функциональность.Добавить("ИспользоватьФакторинг");
	
	// Расходы на услуги факторинговых компаний
	ОписаниеЭлемента = ДобавитьОписаниеПоставляемогоЭлемента(
		ОписаниеЭлементов,
		"РасходыНаУслугиФакторинговыхКомпаний",
		Перечисления.ВидыПрочихДоходовИРасходов.РасходыНаУслугиБанков,
		"ru = 'Расходы на услуги факторинговых компаний'",
		"ru = 'Документ «Поступление: услуги факторинга»'",
		Истина);
	ОписаниеЭлемента.Функциональность.Добавить("ИспользоватьФакторинг");
	
	// Восстановление амортизационной премии
	ОписаниеЭлемента = ДобавитьОписаниеПоставляемогоЭлемента(
		ОписаниеЭлементов,
		"ВосстановлениеАмортизационнойПремии",
		Перечисления.ВидыПрочихДоходовИРасходов.ВосстановлениеАмортизационнойПремии,
		"ru = 'Восстановление амортизационной премии'",
		"ru = 'Документ «Передача ОС» (амортизационная премия)'",
		Истина);
	ОписаниеЭлемента.Функциональность.Добавить("ВедетсяУчетОсновныхСредств");
	ОписаниеЭлемента.Функциональность.Добавить("ВедетсяУчетОсновныхСредствПростойИнтерфейс");
	
	// Разницы стоимости возврата и фактической стоимости товаров
	ОписаниеЭлемента = ДобавитьОписаниеПоставляемогоЭлемента(
		ОписаниеЭлементов,
		"РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров",
		Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы,
		"ru = 'Разницы стоимости возврата и фактической стоимости товаров'");
	ОписаниеЭлемента.Функциональность.Добавить("ИспользоватьДокументыПоступления");
	
	// Разницы залоговой и фактической стоимости тары
	ОписаниеЭлемента = ДобавитьОписаниеПоставляемогоЭлемента(
		ОписаниеЭлементов,
		"РазницыЗалоговойИФактическойСтоимостиТары",
		Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы,
		"ru = 'Разницы залоговой и фактической стоимости тары'");
	ОписаниеЭлемента.Функциональность.Добавить("ИспользоватьВозвратнуюТару");
	
	// Возврат товаров, реализованных в предыдущем налоговом периоде
	ОписаниеЭлемента = ДобавитьОписаниеПоставляемогоЭлемента(
		ОписаниеЭлементов,
		"ВозвратТоваровПрошлыхЛет",
		Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет,
		"ru = 'Возврат товаров, реализованных в предыдущем налоговом периоде'",
		"ru = 'Документ «Возврат товаров от покупателя»'");
	ОписаниеЭлемента.Функциональность.Добавить("ИспользоватьДокументыРеализации");
	
	// Штрафы, пени и неустойки к получению (уплате)
	ОписаниеЭлемента = ДобавитьОписаниеПоставляемогоЭлемента(
		ОписаниеЭлементов,
		"ШтрафыПениНеустойки",
		Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате,
		"ru = 'Штрафы, пени и неустойки к получению (уплате)'",
		"ru = 'Документ «Начисление пеней»'");
	ОписаниеЭлемента.Функциональность.Добавить("ИспользоватьДокументыРеализации");
	
	// Расходы по уплате страховых взносов
	ОписаниеЭлемента = ДобавитьОписаниеПоставляемогоЭлемента(
		ОписаниеЭлементов,
		"РасходыПоУплатеСтраховыхВзносов",
		Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы,
		"ru = 'Расходы по уплате страховых взносов'",
		"ru = 'Расходы по уплате страховых взносов от начислений из прибыли'");
	ОписаниеЭлемента.Функциональность.Добавить("ВедетсяУчетЗарплатыКадров");
	
	// Проценты по займам сотрудникам
	ОписаниеЭлемента = ДобавитьОписаниеПоставляемогоЭлемента(
		ОписаниеЭлементов,
		"ПроцентыПоЗаймамСотрудникам",
		Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыКПолучениюУплате,
		"ru = 'Проценты по займам сотрудникам'");
	ОписаниеЭлемента.Функциональность.Добавить("ВедетсяУчетЗарплатыКадров");
	
	// Компенсация за задержку зарплаты
	ОписаниеЭлемента = ДобавитьОписаниеПоставляемогоЭлемента(
		ОписаниеЭлементов,
		"КомпенсацияЗаЗадержкуЗарплаты",
		Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы,
		"ru = 'Компенсация за задержку зарплаты'");
	ОписаниеЭлемента.Реквизиты.Вставить(
		"ПринятиеКНалоговомуУчету",
		Ложь);
	ОписаниеЭлемента.Функциональность.Добавить("ВедетсяУчетЗарплатыКадров");
	
	// Возвращенные сотрудниками излишне выплаченные суммы оплаты труда
	ОписаниеЭлемента = ДобавитьОписаниеПоставляемогоЭлемента(
		ОписаниеЭлементов,
		"ИзлишнеВыплаченнаяОплатаТруда",
		Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы,
		"ru = 'Возвращенные сотрудниками излишне выплаченные суммы оплаты труда'");
	ОписаниеЭлемента.Функциональность.Добавить("ВедетсяУчетЗарплатыКадров");
	
	// Оценочные обязательства по предстоящим отпускам
	ОписаниеЭлемента = ДобавитьОписаниеПоставляемогоЭлемента(
		ОписаниеЭлементов,
		"РезервыПоОтпускам",
		Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы,
		"ru = 'Оценочные обязательства по предстоящим отпускам'");
	ОписаниеЭлемента.Функциональность.Добавить("ВедетсяУчетЗарплатыКадров");
	
	// Оценочные обязательства по предстоящим отпускам (ЕНВД)
	ОписаниеЭлемента = ДобавитьОписаниеПоставляемогоЭлемента(
		ОписаниеЭлементов,
		"РезервыПоОтпускамЕНВД",
		Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы,
		"ru = 'Оценочные обязательства по предстоящим отпускам (ЕНВД)'");
	ОписаниеЭлемента.Функциональность.Добавить("ИспользуетсяЕНВД");
	ОписаниеЭлемента.Функциональность.Добавить("ИспользуетсяУСНПатент");
	ОписаниеЭлемента.Реквизиты.Вставить(
		"ВидДеятельностиДляНалоговогоУчетаЗатрат",
		Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения);
	
	// Оплата труда, не учитываемая в целях налогообложения
	ОписаниеЭлемента = ДобавитьОписаниеПоставляемогоЭлемента(
		ОписаниеЭлементов,
		"ОплатаТрудаНеУчитываемаяДляНалогообложения",
		Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы,
		"ru = 'Оплата труда, не учитываемая в целях налогообложения'");
	ОписаниеЭлемента.Реквизиты.Вставить(
		"ПринятиеКНалоговомуУчету",
		Ложь);
	ОписаниеЭлемента.Функциональность.Добавить("ВедетсяУчетЗарплатыКадров");
	
	// Расходы обслуживающих производств и хозяйств
	ОписаниеЭлемента = ДобавитьОписаниеПоставляемогоЭлемента(
		ОписаниеЭлементов,
		"РасходыОбслуживающихПроизводствИХозяйств",
		Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы,
		"ru = 'Расходы обслуживающих производств и хозяйств'");
	ОписаниеЭлемента.Реквизиты.Вставить(
		"ПринятиеКНалоговомуУчету",
		Ложь);
	ОписаниеЭлемента.Функциональность.Добавить("РасширенныйФункционал");
		
	// Резервы по сомнительным долгам
	ОписаниеЭлемента = ДобавитьОписаниеПоставляемогоЭлемента(
		ОписаниеЭлементов,
		"РезервыПоСомнительнымДолгам",
		Перечисления.ВидыПрочихДоходовИРасходов.ОтчисленияВОценочныеРезервы,
		"ru = 'Резервы по сомнительным долгам'");
	ОписаниеЭлемента.Функциональность.Добавить("ИспользоватьДокументыРеализации");
	
	// Расходы по уплате страховых взносов ИП (за себя)
	ОписаниеЭлемента = ДобавитьОписаниеПоставляемогоЭлемента(
		ОписаниеЭлементов,
		"РасходыПоУплатеСтраховыхВзносовИП",
		Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы,
		"ru = 'Расходы по уплате страховых взносов ИП (за себя)'");
	ОписаниеЭлемента.Реквизиты.Вставить(
		"ВидДеятельностиДляНалоговогоУчетаЗатрат",
		Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты);
	ОписаниеЭлемента.Функциональность.Добавить("ИспользуетсяНДФЛИП");
	
	// Доходы по авансам, полученным от покупателей в прошлом налоговом периоде
	ОписаниеЭлемента = ДобавитьОписаниеПоставляемогоЭлемента(
		ОписаниеЭлементов,
		"ДоходыПоАвансамПрошлогоНалоговогоПериодаИП",
		Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы,
		"ru = 'Доходы по авансам, полученным от покупателей'",
		"ru = 'Доходы ИП по авансам покупателей'");
	ОписаниеЭлемента.Функциональность.Добавить("ИспользуетсяНДФЛИП");
	
	// Расходы по передаче товаров (работ, услуг) безвозмездно и для собственных нужд
	ОписаниеЭлемента = ДобавитьОписаниеПоставляемогоЭлемента(
		ОписаниеЭлементов,
		"РасходыПоБезвозмезднойПередаче",
		Перечисления.ВидыПрочихДоходовИРасходов.РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд,
		"ru = 'Расходы по передаче товаров (работ, услуг) безвозмездно'",
		"ru = 'Документ «Безвозмездная передача»'");
	ОписаниеЭлемента.Реквизиты.Вставить(
		"ПринятиеКНалоговомуУчету",
		Ложь);
	ОписаниеЭлемента.Функциональность.Добавить("ИспользоватьДокументыРеализации");
	
	// Восстановление НДС по операциям, не облагаемым налогом
	// (подп. 2 п. 3 ст. 170)
	ОписаниеЭлемента = ДобавитьОписаниеПоставляемогоЭлемента(
		ОписаниеЭлементов,
		"СписаниеНДСНаПрочиеРасходы",
		Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы,
		"ru = 'Восстановление НДС по операциям, не облагаемым налогом'");
	// Принимается к вычету в силу требований ст. 170 НК РФ:
	// "учитываются единовременно в составе прочих расходов в соответствии со статьей 264"
	
	// Списание НДС, не подтвержденного счетом-фактурой поставщика
	ОписаниеЭлемента = ДобавитьОписаниеПоставляемогоЭлемента(
		ОписаниеЭлементов,
		"СписаниеВыделенногоНДСНаПрочиеРасходы",
		Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы,
		"ru = 'Списание НДС, не подтвержденного счетом-фактурой поставщика'");
	ОписаниеЭлемента.Реквизиты.Вставить(
		"ВидДеятельностиДляНалоговогоУчетаЗатрат",
		Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты);
	ОписаниеЭлемента.Реквизиты.Вставить(
		"ПринятиеКНалоговомуУчету",
		Ложь);
	
	// Устаревшие
	ОписаниеЭлемента = ДобавитьОписаниеПоставляемогоЭлемента(
		ОписаниеЭлементов,
		"СуммовыеРазницы",
		Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы,
		"ru = 'Суммовые разницы (по сделкам до 2015 г)'");
	ОписаниеЭлемента.Функциональность.Добавить("ИспользоватьВалютныйУчет");
	
	ОписаниеЭлемента = ДобавитьОписаниеПоставляемогоЭлемента(
		ОписаниеЭлементов,
		"КурсовыеРазницыПоРасчетамВУЕ",
		Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницыПоРасчетамВУЕ,
		"ru = 'Курсовые разницы по расчетам в у.е. (по сделкам до 2015 г)'");
	ОписаниеЭлемента.Функциональность.Добавить("ИспользоватьВалютныйУчет");
	
	// Прочие внереализационные доходы и расходы
	ОписаниеЭлемента = ДобавитьОписаниеПоставляемогоЭлемента(
		ОписаниеЭлементов,
		"ПрочиеВнереализационныеДоходыРасходы",
		Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы,
		"ru = 'Прочие внереализационные доходы и расходы'",
		"ru = 'Основная статья прочих доходов и расходов'",
		Истина);
	
	// Описания новых статей НЕ следует добавлять в конец списка.
	// Рекомендации по порядку см. в начале процедуры.
	
КонецПроцедуры

// Содержит перечень реквизитов справочника, опираясь на значения которых
// можно с некоторой степенью надежности идентифицировать элемент как "подходящий".
//
// Возвращаемое значение:
//  Строка - перечень реквизитов, разделенных запятой
//
Функция НадежныеРеквизитыПоиска() Экспорт
	
	Возврат "ВидПрочихДоходовИРасходов";
	
КонецФункции

// Определяет статью, которая должна использоваться по умолчанию, исходя из данных связанных настроек
// или других объектов, хранящих ссылки на статьи (например, документов).
// Используется, в частности, в обработчиках обновления на версии,
// в которых появляется возможности назначить новый предопределенный элемент, если алгоритм такого определения нетривиальный.
//
// Параметры:
//  ИмяЭлемента - Строка - имя элемента, как задано в ЗаполнитьОписанияПоставляемыхЭлементов
// 
// Возвращаемое значение:
//  СправочникСсылка.ПрочиеДоходыИРасходы - найденный в настройке элемент; ПустаяСсылка, если не найден.
//
Функция ПрочитатьИзСвязаннойНастройки(ИмяЭлемента) Экспорт
	
	Если ИмяЭлемента = "ДоходыПоАвансамПрошлогоНалоговогоПериодаИП" Тогда
		
		Возврат РегистрыСведений.УдалитьУчетнаяПолитикаОрганизаций.СтатьяУчетаПрочихДоходовПоАвансамИП();
		
	ИначеЕсли ИмяЭлемента = "РезервыПоСомнительнымДолгам" Тогда
		
		Возврат РегистрыСведений.УдалитьУчетнаяПолитикаОрганизаций.СтатьяУчетаПрочихДоходовИРасходовПоСомнительнымДолгам();
		
	ИначеЕсли ИмяЭлемента = "РеализацияОсновныхСредств" Тогда
		
		Возврат Документы.ПередачаОС.ИспользуемаяСтатьяПрочихДоходовРасходов();
		
	ИначеЕсли ИмяЭлемента = "РеализацияПрочегоИмущества" Тогда
		
		Возврат Документы.РеализацияТоваровУслуг.ИспользуемаяСтатьяПрочихДоходовРасходов();
		
	Иначе
		
		Возврат ПустаяСсылка();
		
	КонецЕсли;
	
КонецФункции

// Выполняет настройки, в которых должны участвовать статьи доходов (расходов).
// Как правило, такие настройки содержат ссылки на непредопределенные элементы справочника и позволяют установить,
// в каких ситуациях эти элементы должны использоваться по умолчанию.
//
// Параметры:
//  ИдентифицированныеЭлементы - Структура - созданные или найденные ранее статьи затрат.
//    * Ключ - имя элемента, как задано в ЗаполнитьОписанияПоставляемыхЭлементов
//    * Значение - ссылка на созданный элемент
//
Процедура ВыполнитьСвязанныеНастройки(ИдентифицированныеЭлементы) Экспорт
	
	// Программный интерфейс КлассификаторыДоходовРасходов требует наличия процедуры.
	// Однако, в этом справочнике фактически выполнять связанные настройки не требуется
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КлассификаторыДоходовРасходов

Функция ДобавитьОписаниеПоставляемогоЭлемента(ОписаниеЭлементов, Имя, Вид, Представление, ИспользованиеПоУмолчанию = "", СоздаватьЗаранее = Ложь)
	
	ОписаниеЗначения = КлассификаторыДоходовРасходов.ДобавитьОписаниеПоставляемогоЭлемента(
		ОписаниеЭлементов,
		Имя,
		Представление);
		
	ОписаниеЗначения.Предопределенный = Истина; // Поставляемые элементы этого справочника, как правило, предопределенные
	
	ОписаниеЗначения.Реквизиты.Вставить("ВидПрочихДоходовИРасходов", Вид);
	
	ОписаниеЗначения.СоздаватьЗаранее         = СоздаватьЗаранее;
	ОписаниеЗначения.ИспользованиеПоУмолчанию = ИспользованиеПоУмолчанию;
	
	Возврат ОписаниеЗначения;
	
КонецФункции

#КонецОбласти

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

Процедура СоздатьПоУмолчанию() Экспорт
	
	КлассификаторыДоходовРасходов.СоздатьПоУмолчанию(Справочники.ПрочиеДоходыИРасходы);
	
КонецПроцедуры

Процедура НазначитьПредопределенныеЭлементы() Экспорт
	
	КлассификаторыДоходовРасходов.НазначитьПредопределенныеЭлементы(Справочники.ПрочиеДоходыИРасходы);
	
КонецПроцедуры

Процедура ВключитьНастройкуПорядкаЭлементов() Экспорт
	
	КлассификаторыДоходовРасходов.ВключитьНастройкуПорядкаЭлементов(Справочники.ПрочиеДоходыИРасходы);
	
КонецПроцедуры

// Выполняет обновление реквизитов элемента ДоходыПоАвансамПрошлогоНалоговогоПериодаИП
//
Процедура ОбновитьРеквизиты_ДоходыПоАвансамПрошлогоНалоговогоПериодаИП() Экспорт
	
	КлассификаторыДоходовРасходов.ОбновитьРеквизитыКлассификатора(
		Справочники.ПрочиеДоходыИРасходы,
		"ДоходыПоАвансамПрошлогоНалоговогоПериодаИП");
	
КонецПроцедуры

#Область ИзлишкиПриИнвентаризации

// Начинает использование статей вида ИзлишкиПриИнвентаризации.
//
// Статьи вида ИзлишкиПриИнвентаризации появились в версии 3.0.72
// До этого для учета излишков использовались статьи вида ПрочиеВнереализационныеДоходыРасходы.
// При обновлении на версию с новым видом статей
// - у статей, которые относятся исключительно к оприходованию излишков заменяем вид
// - статьи, которые относятся как к оприходованию излишков, так и к другим операциям,
//   разделим:
//   -- для операций оприходования излишков создадим новую статью с новым видом
//   -- в остальных операциях оставим все как есть.
//
// Статьи к разделению заменяются в оприходованиях, а в других документах остаются как есть,
// потому что в Оприходовании товаров понятная и простая логика, как статья (реквизит документа) попадает в проводку.
//
// Кроме того, в информационных базах, созданных ранее версии 3.0.72 могла быть допущена ошибка:
// статья доходов, предназначенная для учета излишков при инвентаризации имела некорректный вид
// БезвозмездноеПолучениеИмуществаРаботУслугИмущественныхПрав.
// Исправляет и эту ошибку тоже: такой статье устанавливает вид ИзлишкиПриИнвентаризации.
//
// Все эти действия относятся к сервисным: их невыполнение может создать неудобства в работе пользователей,
// но не является критичным для работы программы.
// Поэтому при выполнении этого обработчика обновления большинство ошибок записи не приводит к прекращению обработки:
// "проблемные" документы просто пропускаются, повторно не обрабатываются.
//
// Параметры:
//  ПараметрыОбработчика - Структура - управляющая коллекция, см. документацию к подсистеме ОбновлениеИнформационнойБазы БСП.
//         Ключи:
//         * ОбработкаЗавершена - Булево - для того чтобы обработчик был вызван повторно для обработки следующей порции данных,
//                                         следует записать в него значение Ложь;
//         * ПрогрессВыполнения - Структура - необходимо заполнять для отображения прогресса обработки данных:
//              ** ВсегоОбъектов - Число - общее количество объектов, которое необходимо обработать;
//              ** ОбработаноОбъектов - Число - сколько объектов уже обработано.
//         В структуру можно добавить произвольное количество свойств произвольных типов,
//         значения которых будут автоматически запоминаться между вызовами процедуры - обработчика отложенного обновления.
//
Процедура УстановитьВидСтатьиДоходовИзлишкиПриИнвентаризацииОтложенно(ПараметрыОбработчика) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПараметрыОбработчика.Свойство("РазделенныеСтатьиДоходов") Тогда
		
		// Это первая итерация обработки, в ходе которой выполняется анализ данных и изменение свойств справочников.
		// По результатам может потребоваться обработка большого количества документов.
		// Такая обработка будет выполняться в следующих итерациях
		
		Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
			// Обработчик может создать новые элементы справочников,
			// поэтому выполняется централизованно - только в головном узле
			Возврат;
		КонецЕсли;
		
		ОтложенныеДействия = УстановитьВидСтатьиДоходовИзлишкиПриИнвентаризацииПодготовка();
		
		Если ОтложенныеДействия = Неопределено Тогда
			// Все необходимые данные обработаны, дальнейшая обработка не требуется
			Возврат;
		КонецЕсли;
		
		ПараметрыОбработчика.ОбработкаЗавершена = Ложь;
		ПараметрыОбработчика.ПрогрессВыполнения.ВсегоОбъектов = ОтложенныеДействия.ВсегоОбъектов;
		
		ПараметрыОбработчика.Вставить("РазделенныеСтатьиДоходов", ОтложенныеДействия.РазделенныеСтатьиДоходов);
		ПараметрыОбработчика.Вставить("ПорцииДанных",             ОтложенныеДействия.ПорцииДанных);
		ПараметрыОбработчика.Вставить("ГраницаОбработки",         Неопределено); // После этой границы все данные обработаны - возможна оперативная работа
		
	Иначе
		
		ОбработаноОбъектов = УстановитьСтатьюДоходовОприходованиеТоваровПорцияДанных(
			ПараметрыОбработчика.РазделенныеСтатьиДоходов,
			ПараметрыОбработчика.ПорцииДанных,
			ПараметрыОбработчика.ГраницаОбработки);
		
		ПараметрыОбработчика.ПрогрессВыполнения.ОбработаноОбъектов = ПараметрыОбработчика.ПрогрессВыполнения.ОбработаноОбъектов 
			+ ОбработаноОбъектов;
		
		Если ЗначениеЗаполнено(ПараметрыОбработчика.ПорцииДанных) Тогда
			ПараметрыОбработчика.ОбработкаЗавершена = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИмяОбработчикаУстановитьВидСтатьиДоходовИзлишкиПриИнвентаризацииОтложенно()
	
	// Для записи в ЖР
	
	Возврат "Справочники.ПрочиеДоходыИРасходы.УстановитьВидСтатьиДоходовИзлишкиПриИнвентаризацииОтложенно";
	
КонецФункции

Функция УстановитьВидСтатьиДоходовИзлишкиПриИнвентаризацииПодготовка()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПрочиеДоходыИРасходы.Ссылка КАК Значение
	|ИЗ
	|	Справочник.ПрочиеДоходыИРасходы КАК ПрочиеДоходыИРасходы
	|ГДЕ
	|	ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.ИзлишкиПриИнвентаризации)";
	Если Не Запрос.Выполнить().Пустой() Тогда
		// Переход на версию с ИзлишкиПриИнвентаризации уже заведомо выполнен
		Возврат Неопределено;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы) КАК ВидСубконто,
	|	ПрочиеДоходыИРасходы.Ссылка КАК Значение,
	|	ПрочиеДоходыИРасходы.ИмяПредопределенныхДанных = ""ОприходованиеИзлишков"" КАК ИспользуетсяПоУмолчанию
	|ПОМЕСТИТЬ УстаревшиеЗначенияСубконто
	|ИЗ
	|	Справочник.ПрочиеДоходыИРасходы КАК ПрочиеДоходыИРасходы
	|ГДЕ
	|	НЕ ПрочиеДоходыИРасходы.ЭтоГруппа
	|	И ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы)
	|	И ПрочиеДоходыИРасходы.ПринятиеКНалоговомуУчету
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы),
	|	ПрочиеДоходыИРасходы.Ссылка,
	|	ИСТИНА
	|ИЗ
	|	Справочник.ПрочиеДоходыИРасходы КАК ПрочиеДоходыИРасходы
	|ГДЕ
	|	НЕ ПрочиеДоходыИРасходы.ЭтоГруппа
	|	И ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.БезвозмездноеПолучениеИмуществаРаботУслугИмущественныхПрав)
	|	И ПрочиеДоходыИРасходы.ПринятиеКНалоговомуУчету
	|	И ПрочиеДоходыИРасходы.ИмяПредопределенныхДанных = ""ОприходованиеИзлишков""
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидСубконто,
	|	Значение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйСубконто.Значение КАК СтатьяДоходов,
	|	ХозрасчетныйСубконто.Регистратор КАК Регистратор,
	|	ХозрасчетныйСубконто.НомерСтроки КАК НомерСтроки,
	|	ХозрасчетныйСубконто.МоментВремени КАК МоментВремени,
	|	ХозрасчетныйСубконто.ВидДвижения КАК ВидДвижения,
	|	ТИПЗНАЧЕНИЯ(ХозрасчетныйСубконто.Регистратор) = ТИП(Документ.ОприходованиеТоваров) КАК ЭтоОприходованиеТоваров
	|ПОМЕСТИТЬ ПроводкиУстаревшихСтатейДоходов
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ УстаревшиеЗначенияСубконто КАК УстаревшиеЗначенияСубконто
	|		ПО ХозрасчетныйСубконто.Вид = УстаревшиеЗначенияСубконто.ВидСубконто
	|			И ХозрасчетныйСубконто.Значение = УстаревшиеЗначенияСубконто.Значение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЭтоОприходованиеТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Проводки.СтатьяДоходов КАК СтатьяДоходов
	|ПОМЕСТИТЬ СтатьиКОбработке
	|ИЗ
	|	ПроводкиУстаревшихСтатейДоходов КАК Проводки
	|ГДЕ
	|	Проводки.ЭтоОприходованиеТоваров
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СтатьиДоходов.Значение
	|ИЗ
	|	УстаревшиеЗначенияСубконто КАК СтатьиДоходов
	|ГДЕ
	|	СтатьиДоходов.ИспользуетсяПоУмолчанию
	|	И НЕ СтатьиДоходов.Значение В
	|				(ВЫБРАТЬ
	|					Проводки.СтатьяДоходов
	|				ИЗ
	|					ПроводкиУстаревшихСтатейДоходов КАК Проводки)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяДоходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Проводки.СтатьяДоходов КАК СтатьяДоходов
	|ПОМЕСТИТЬ СтатьиКРазделению
	|ИЗ
	|	ПроводкиУстаревшихСтатейДоходов КАК Проводки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиКОбработке КАК СтатьиКОбработке
	|		ПО Проводки.СтатьяДоходов = СтатьиКОбработке.СтатьяДоходов
	|ГДЕ
	|	НЕ Проводки.ЭтоОприходованиеТоваров
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяДоходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтатьиКОбработке.СтатьяДоходов КАК СтатьяДоходов
	|ПОМЕСТИТЬ СтатьиКЗаменеВида
	|ИЗ
	|	СтатьиКОбработке КАК СтатьиКОбработке
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатьиКРазделению КАК СтатьиКРазделению
	|		ПО СтатьиКОбработке.СтатьяДоходов = СтатьиКРазделению.СтатьяДоходов
	|ГДЕ
	|	СтатьиКРазделению.СтатьяДоходов ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяДоходов";
	
	Запрос.Выполнить();
	
	УстановитьВидСтатьиИзлишкиПриИнвентаризации(МенеджерВременныхТаблиц); // См. СтатьиКЗаменеВида
	
	РазделенныеСтатьиДоходов = РазделитьСтатьиДоходовИзлишкиПриИнвентаризации(МенеджерВременныхТаблиц); // См. СтатьиКРазделению
	
	Если Не ЗначениеЗаполнено(РазделенныеСтатьиДоходов) Тогда
		// Отложенная обработка заведомо не требуется
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Проводки.Регистратор) КАК КоличествоДокументов
	|ИЗ
	|	ПроводкиУстаревшихСтатейДоходов КАК Проводки
	|ГДЕ
	|	Проводки.ЭтоОприходованиеТоваров";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	РазмерПорцииДанных = 1000; // См. также запрос ниже
	Если Выборка.КоличествоДокументов <= РазмерПорцииДанных Тогда
		// Обработаем сразу - сэкономим на получении списка документов порции данных
		УстановитьСтатьюДоходовОприходованиеТоваровВсеСразу(РазделенныеСтатьиДоходов, МенеджерВременныхТаблиц); // См. ПроводкиУстаревшихСтатейДоходов, ПроводкиУстаревшихСтатейДоходов
		Возврат Неопределено;
	КонецЕсли;
	
	ОтложенныеДействия = Новый Структура;
	ОтложенныеДействия.Вставить("РазделенныеСтатьиДоходов", РазделенныеСтатьиДоходов);
	ОтложенныеДействия.Вставить("ВсегоОбъектов",            Выборка.КоличествоДокументов);
	ОтложенныеДействия.Вставить("ПорцииДанных",             Новый Массив);
	
	// Разобьем данные на порции
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Проводки.МоментВремени КАК Курсор
	|ИЗ
	|	ПроводкиУстаревшихСтатейДоходов КАК Проводки
	|
	|УПОРЯДОЧИТЬ ПО
	|	МоментВремени УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Курсор = Выборка.Курсор;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Проводки.Регистратор КАК Регистратор,
	|	Проводки.МоментВремени КАК МоментВремени
	|ПОМЕСТИТЬ ПорцииДанных
	|ИЗ
	|	ПроводкиУстаревшихСтатейДоходов КАК Проводки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиКРазделению КАК СтатьиКРазделению
	|		ПО Проводки.СтатьяДоходов = СтатьиКРазделению.СтатьяДоходов
	|ГДЕ
	|	Проводки.ЭтоОприходованиеТоваров";
	Запрос.Выполнить();
	
	Пока Истина Цикл
	
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Курсор", Курсор);
		Запрос.Текст =
		// Размер порции также указан выше - см. РазмерПорцииДанных
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ПорцииДанных.МоментВремени КАК Курсор
		|ИЗ
		|	ПорцииДанных КАК ПорцииДанных
		|ГДЕ
		|	ПорцииДанных.МоментВремени < &Курсор
		|
		|УПОРЯДОЧИТЬ ПО
		|	Курсор УБЫВ";
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Прервать;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			// Найдем курсор последней записи
			Курсор = Выборка.Курсор;
		КонецЦикла;
		
		ОтложенныеДействия.ПорцииДанных.Добавить(Курсор);
		
	КонецЦикла;
	
	Возврат ОтложенныеДействия;
	
КонецФункции

Процедура УстановитьВидСтатьиИзлишкиПриИнвентаризации(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатьиКЗаменеВида.СтатьяДоходов КАК Ссылка
	|ИЗ
	|	СтатьиКЗаменеВида КАК СтатьиКЗаменеВида";
	Выборка = Запрос.Выполнить().Выбрать();
	
	УстанавливаемыйВидСтатьи = Перечисления.ВидыПрочихДоходовИРасходов.ИзлишкиПриИнвентаризации;
	ПредставлениеВидаСтатьи  = Строка(УстанавливаемыйВидСтатьи);
	ШаблонОшибки             = НСтр("ru = 'Не удалось установить вид статьи доходов ""%1"".
                                     |%2'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Исключение
			
			ЗаписатьОшибкуУстановитьВидСтатьиИзлишкиПриИнвентаризации(
				ШаблонОшибки,
				Выборка.Ссылка,
				ПредставлениеВидаСтатьи,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Продолжить;
			
		КонецПопытки;
		
		СправочникОбъект.ВидПрочихДоходовИРасходов = УстанавливаемыйВидСтатьи;
		
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект, Истина);
		Исключение
			
			ЗаписатьОшибкуУстановитьВидСтатьиИзлишкиПриИнвентаризации(
				ШаблонОшибки,
				Выборка.Ссылка,
				ПредставлениеВидаСтатьи,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Создает копии статей доходов, устанавливая копии вид статьи ИзлишкиПриИнвентаризации.
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - содержит СтатьиКРазделению
// 
// Возвращаемое значение:
//  Соответствие - соответствие созданных статей оригиналам;
//        * Ключ - ссылка на оригинальную статью
//        * Значение - ссылка на созданную
//
Функция РазделитьСтатьиДоходовИзлишкиПриИнвентаризации(МенеджерВременныхТаблиц)
	
	РазделенныеСтатьиДоходов = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрочиеДоходыИРасходы.Ссылка КАК Ссылка,
	|	ПрочиеДоходыИРасходы.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
	|ИЗ
	|	Справочник.ПрочиеДоходыИРасходы КАК ПрочиеДоходыИРасходы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиКРазделению КАК СтатьиКРазделению
	|		ПО ПрочиеДоходыИРасходы.Ссылка = СтатьиКРазделению.СтатьяДоходов";
	Выборка = Запрос.Выполнить().Выбрать();
	
	УстанавливаемыйВидСтатьи = Перечисления.ВидыПрочихДоходовИРасходов.ИзлишкиПриИнвентаризации;
	ПредставлениеВидаСтатьи  = Строка(УстанавливаемыйВидСтатьи);
	ШаблонОшибки             = НСтр("ru = 'Не удалось создать статью доходов ""%1"".
                                     |%2'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	МаксимальнаяДлинаНаименования = Метаданные.Справочники.ПрочиеДоходыИРасходы.ДлинаНаименования;
	ШаблонНаименования            = НСтр("ru = '%1 - создана при обновлении на 3.0.72'", ОбщегоНазначения.КодОсновногоЯзыка());
	ДлинаДополнительногоТекста    = СтрДлина(ШаблонНаименования) - 2; // Здесь 2 - длина управляющей последовательности "%1"
	МаксимальнаяДлинаПользовательскогоНаименования = МаксимальнаяДлинаНаименования - ДлинаДополнительногоТекста;
	
	Пока Выборка.Следующий() Цикл
		
		УстанавливатьСтатьейПоУмолчанию = Ложь;
		
		Если Выборка.ИмяПредопределенныхДанных = "ОприходованиеИзлишков" Тогда
			
			// Раньше для заполнения документов ОприходованиеТоваров использовалась статья,
			// которая будет удалена из этих документов - заменяется на новую.
			// Поэтому теперь новая статья должна использоваться по умолчанию, а оригинальная - нет.
			Попытка
				СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
				СправочникОбъект.ИмяПредопределенныхДанных = "";
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект, Истина);
				УстанавливатьСтатьейПоУмолчанию = Истина;
			Исключение
				
				ЗаписатьОшибкуУстановитьВидСтатьиИзлишкиПриИнвентаризации(
					ШаблонОшибки,
					Выборка.Ссылка,
					ПредставлениеВидаСтатьи,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			КонецПопытки;
			
		КонецЕсли;
		
		Попытка
			
			СправочникОбъект = Выборка.Ссылка.Скопировать();
			СправочникОбъект.ВидПрочихДоходовИРасходов = УстанавливаемыйВидСтатьи;
			
			Если УстанавливатьСтатьейПоУмолчанию Тогда
				СправочникОбъект.ИмяПредопределенныхДанных = "ОприходованиеИзлишков";
			КонецЕсли;
			
			Если Не ПустаяСтрока(ШаблонНаименования) Тогда
				ПользовательскоеНаименование = Лев(СправочникОбъект.Наименование, МаксимальнаяДлинаПользовательскогоНаименования);
				СправочникОбъект.Наименование = СтрШаблон(ШаблонНаименования, ПользовательскоеНаименование);
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект, Истина, Истина); // Бизнес-логика включена для установки кода
			
		Исключение
			
			ЗаписатьОшибкуУстановитьВидСтатьиИзлишкиПриИнвентаризации(
				ШаблонОшибки,
				Выборка.Ссылка,
				ПредставлениеВидаСтатьи,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Продолжить;
			
		КонецПопытки;
		
		РазделенныеСтатьиДоходов.Вставить(Выборка.Ссылка, СправочникОбъект.Ссылка);
		
	КонецЦикла;
	
	Возврат РазделенныеСтатьиДоходов;
	
КонецФункции

Процедура УстановитьСтатьюДоходовОприходованиеТоваровВсеСразу(РазделенныеСтатьиДоходов, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Проводки.Регистратор КАК Ссылка,
	|	Проводки.МоментВремени КАК Ключ
	|ИЗ
	|	ПроводкиУстаревшихСтатейДоходов КАК Проводки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиКРазделению КАК СтатьиКРазделению
	|		ПО Проводки.СтатьяДоходов = СтатьиКРазделению.СтатьяДоходов
	|ГДЕ
	|	Проводки.ЭтоОприходованиеТоваров
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ключ УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		УстановитьСтатьюДоходовОприходованиеТоваровОбработатьДокумент(Выборка.Ссылка, РазделенныеСтатьиДоходов);
	КонецЦикла;
	
КонецПроцедуры

Функция УстановитьСтатьюДоходовОприходованиеТоваровПорцияДанных(РазделенныеСтатьиДоходов, ПорцииДанных, ГраницаОбработки)
	
	Если Не ЗначениеЗаполнено(ПорцииДанных) Тогда
		// Обработка завершена
		Возврат 0;
	КонецЕсли;
	
	Курсор = ПорцииДанных[0];
	
	РазделенныеСтатьиДоходовТаблица = Новый ТаблицаЗначений; // для помещения в запрос
	РазделенныеСтатьиДоходовТаблица.Колонки.Добавить("Значение", Новый ОписаниеТипов("СправочникСсылка.ПрочиеДоходыИРасходы"));
	Для Каждого ОписаниеСтатьи Из РазделенныеСтатьиДоходов Цикл
		РазделенныеСтатьиДоходовТаблица.Добавить().Значение = ОписаниеСтатьи.Ключ;
	КонецЦикла;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("РазделенныеСтатьиДоходов", РазделенныеСтатьиДоходовТаблица);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы) КАК ВидСубконто,
	|	РазделенныеСтатьиДоходов.Значение КАК Значение
	|ПОМЕСТИТЬ РазделенныеСтатьиДоходов
	|ИЗ
	|	&РазделенныеСтатьиДоходов КАК РазделенныеСтатьиДоходов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидСубконто,
	|	РазделенныеСтатьиДоходов.Значение";
	Запрос.Выполнить();
	
	ШаблонТекстаЗапроса =
	// Может быть дополнен условием на верхнюю границу периода обработки
	// Явное соединение с Документ.ОприходованиеТоваров позволяет исключить "битые ссылки"
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХозрасчетныйСубконто.Регистратор КАК Ссылка,
	|	ХозрасчетныйСубконто.МоментВремени КАК Ключ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РазделенныеСтатьиДоходов КАК РазделенныеСтатьиДоходов
	|		ПО ХозрасчетныйСубконто.Вид = РазделенныеСтатьиДоходов.ВидСубконто
	|			И ХозрасчетныйСубконто.Значение = РазделенныеСтатьиДоходов.Значение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОприходованиеТоваров КАК ОприходованиеТоваров
	|		ПО ХозрасчетныйСубконто.Регистратор = ОприходованиеТоваров.Ссылка
	|ГДЕ
	|	ХозрасчетныйСубконто.МоментВремени >= &Курсор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ключ УБЫВ";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Курсор",           Курсор);
	Запрос.УстановитьПараметр("ГраницаОбработки", ГраницаОбработки);
	
	Если ГраницаОбработки = Неопределено Тогда
		
		Запрос.Текст = ШаблонТекстаЗапроса;
		
	Иначе
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(ШаблонТекстаЗапроса);
		Отбор = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор;
		Отбор.Добавить("ХозрасчетныйСубконто.МоментВремени < &ГраницаОбработки");
		
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		
	КонецЕсли;
	
	НачалоПериода = Курсор.Дата;
	КонецПериода  = ?(ГраницаОбработки = Неопределено, Неопределено, ГраницаОбработки.Дата);
	
	КоличествоОшибок = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		УстановитьСтатьюДоходовОприходованиеТоваровОбработатьДокумент(
			Выборка.Ссылка,
			РазделенныеСтатьиДоходов,
			КоличествоОшибок);
		
	КонецЦикла;
	
	ГраницаОбработки = Курсор;
	ПорцииДанных.Удалить(0);
	
	КоличествоДокументов = Выборка.Количество();
	
	// Запишем в журнал результат обработки порции документов
	ШаблонТекста = НСтр(
		"ru = 'Процедура обновления ""%1"" обработала порцию данных за период %2
         |%3'",
		ОбщегоНазначения.КодОсновногоЯзыка());
		
	УниверсальнаяФорматнаяСтрокаПериода = "ДФ='yyyy-MM-dd hh:mm:ss'"; // не зависит от локали
	Если ЗначениеЗаполнено(КонецПериода) Тогда
		
		ШаблонПредставленияПериода = НСтр("ru = 'с %1 по %2'", ОбщегоНазначения.КодОсновногоЯзыка());
		ПредставлениеПериодаПорцииДанных = СтрШаблон(
			ШаблонПредставленияПериода,
			Формат(НачалоПериода, УниверсальнаяФорматнаяСтрокаПериода),
			Формат(КонецПериода, УниверсальнаяФорматнаяСтрокаПериода));
			
	Иначе
		
		ШаблонПредставленияПериода = НСтр("ru = 'с %1'", ОбщегоНазначения.КодОсновногоЯзыка());
		ПредставлениеПериодаПорцииДанных = СтрШаблон(
			ШаблонПредставленияПериода,
			Формат(НачалоПериода, УниверсальнаяФорматнаяСтрокаПериода));
			
	КонецЕсли;
	
	ПараметрыКоличествоДокументов = Новый Структура;
	ПараметрыКоличествоДокументов.Вставить("Обработано", КоличествоДокументов - КоличествоОшибок);
	ПараметрыКоличествоДокументов.Вставить("Ошибки",     КоличествоОшибок);
		
	Если КоличествоОшибок = 0 Тогда
		
		ШаблонКоличествоДокументов = НСтр(
			"ru = 'Обработано документов - [Обработано]'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		
	Иначе
		
		ШаблонКоличествоДокументов = НСтр(
			"ru = 'Обработано документов - [Обработано]; ошибок - [Ошибок]
             |Информация об ошибках записана в журнал регистрации.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		
	КонецЕсли;
		
	КоличествоДокументовПредставление = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
		ШаблонКоличествоДокументов,
		ПараметрыКоличествоДокументов);
		
	ОписаниеРезультатаОперации = СтрШаблон(
		ШаблонТекста,
		ИмяОбработчикаУстановитьВидСтатьиДоходовИзлишкиПриИнвентаризацииОтложенно(),
		ПредставлениеПериодаПорцииДанных,
		КоличествоДокументовПредставление);
		
	ЗаписьЖурналаРегистрации(
		ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,
		,
		,
		ОписаниеРезультатаОперации);
	
	Возврат КоличествоДокументов;
	
КонецФункции

Процедура УстановитьСтатьюДоходовОприходованиеТоваровОбработатьДокумент(Ссылка, РазделенныеСтатьиДоходов, КоличествоОшибок = 0)
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Хозрасчетный.НаборЗаписей");
	ЭлементБлокировки.УстановитьЗначение("Регистратор", Ссылка);
	
	ЭлементБлокировки = Блокировка.Добавить("Документ.ОприходованиеТоваров");
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);

	НачатьТранзакцию();
	
	Попытка
		
		Блокировка.Заблокировать();
		УстановитьСтатьюДоходовОприходованиеТоваров(Ссылка, РазделенныеСтатьиДоходов);
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ШаблонОшибки = НСтр("ru = 'Ошибка при обработке документа процедурой обновления %1
                             |%2'", ОбщегоНазначения.КодОсновногоЯзыка());
	
		ПредставлениеОшибки = СтрШаблон(
			ШаблонОшибки,
			ИмяОбработчикаУстановитьВидСтатьиДоходовИзлишкиПриИнвентаризацииОтложенно(),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.ОприходованиеТоваров,
			Ссылка,
			ПредставлениеОшибки);
			
		КоличествоОшибок = КоличествоОшибок + 1;
			
		// Этот документ будет пропущен для обработки. Повторная попытка обработки предприниматься не будет.
	
	КонецПопытки;
	
КонецПроцедуры

Процедура УстановитьСтатьюДоходовОприходованиеТоваров(Ссылка, РазделенныеСтатьиДоходов)
	
	// Документ
	Объект = Ссылка.ПолучитьОбъект();
	
	ЗаменяемаяСтатьяДоходов = Объект.СтатьяПрочихДоходовРасходов;
	НоваяСтатьяДоходов      = РазделенныеСтатьиДоходов[ЗаменяемаяСтатьяДоходов];
	Если НоваяСтатьяДоходов <> Неопределено Тогда
		Объект.СтатьяПрочихДоходовРасходов = НоваяСтатьяДоходов;
	КонецЕсли;
	
	Если Объект.Модифицированность() Тогда
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект, Истина);
	КонецЕсли;
	
	// Проводки
	НаборЗаписей = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	
	НаборыСубконто = Новый Массив;
	НаборыСубконто.Добавить("СубконтоДт");
	НаборыСубконто.Добавить("СубконтоКт");
	
	Для Каждого Запись Из НаборЗаписей Цикл
		
		Для Каждого ИмяНабораСубконто Из НаборыСубконто Цикл
			
			НаборСубконто = Запись[ИмяНабораСубконто];
			
			ЗаменяемаяСтатьяДоходов = НаборСубконто[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы];
			НоваяСтатьяДоходов      = РазделенныеСтатьиДоходов[ЗаменяемаяСтатьяДоходов];
			Если НоваяСтатьяДоходов = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НаборСубконто.Вставить(
				ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
				НоваяСтатьяДоходов);
				
		КонецЦикла;
	
	КонецЦикла;
	
	Если НаборЗаписей.Модифицированность() Тогда
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина, Истина, Истина);
	КонецЕсли;
	
	// Обрабатываем только записи регистра бухгалтерии, но не других регистров, по которым документ может делать движения.
	// Потому что
	// 1. Замена статьи принципиальна для налогового учета по налогу на прибыль, который ведется на регистре бухгалтерии,
	//    но не для других налоговых режимов (на регистрах накопления)
	// 2. В регистре бухгалтерии это субконто оборотное и не нужно заботиться о его "закрытии",
	//    а в других регистрах пришлось бы.
	
КонецПроцедуры

Процедура ЗаписатьОшибкуУстановитьВидСтатьиИзлишкиПриИнвентаризации(ШаблонОшибки, Ссылка, ПредставлениеВидаСтатьи, ПредставлениеОшибки)
	
	ПредставлениеОшибки = СтрШаблон(
		ШаблонОшибки,
		ПредставлениеВидаСтатьи,
		ПредставлениеОшибки);
	
	ЗаписьЖурналаРегистрации(
		ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Справочники.ПрочиеДоходыИРасходы,
		Ссылка,
		ПредставлениеОшибки);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли
