#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Проверяет корректность заполнения элементов справочника при выполнении регламентной операции
//
// Параметры:
//  ОбъектРегламентнаяОперация - ДокументОбъект, ДокументСсылка
//  Отказ - Булево - Устанавливается Истина, если найдена ошибка
//  СпособыОтраженияРасходов - Массив - Перечень СправочникСсылка.СпособыОтраженияРасходовПоАмортизации, 
//                   которые следует проверить
Функция ПроверитьПриВыполненииРегламентнойОперации(ОбъектРегламентнаяОперация, Отказ, СпособыОтраженияРасходов) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	КонтрольЗатрат.СоздатьВременныеТаблицыСчетаГдеОбязательнаАналитика(МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Параметры.Вставить("СпособыОтраженияРасходов", СпособыОтраженияРасходов);
	Запрос.УстановитьПараметр("ПустоеПодразделение", БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	
	// Первый запрос пакета находит ошибки в составе правил (выбирает данные для поиска этих ошибок):
	// - ошибочно незаполненный счет затрат
	// - ошибочно незаполненные подразделения
	// - ошибочно незаполненные номенклатурные группы
	// - ошибочно незаполненные статьи затрат
	// Второй запрос находит ошибки в правиле:
	// - пустой состав
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоставПравила.Ссылка КАК Ссылка,
	|	СоставПравила.НомерСтроки,
	|	ВЫБОР
	|		КОГДА СоставПравила.СчетЗатрат = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаСчетЗатрат,
	|	ВЫБОР
	|		КОГДА СчетаГдеОбязательныПодразделения.Счет ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаПодразделение,
	|	СоставПравила.СчетЗатрат,
	|	СчетаГдеОбязательныНоменклатурныеГруппы.НомерСубконто КАК НомерСубконтоОбязательныНоменклатурныеГруппы,
	|	СчетаГдеОбязательныСтатьиЗатрат.НомерСубконто КАК НомерСубконтоОбязательныСтатьиЗатрат,
	|	СоставПравила.Субконто1,
	|	СоставПравила.Субконто2,
	|	СоставПравила.Субконто3
	|ПОМЕСТИТЬ СоставПравил
	|ИЗ
	|	Справочник.СпособыОтраженияРасходовПоАмортизации.Способы КАК СоставПравила
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаГдеОбязательныПодразделения КАК СчетаГдеОбязательныПодразделения
	|		ПО СоставПравила.СчетЗатрат = СчетаГдеОбязательныПодразделения.Счет
	|			И (СоставПравила.ПодразделениеОрганизации = &ПустоеПодразделение)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаГдеОбязательныНоменклатурныеГруппы КАК СчетаГдеОбязательныНоменклатурныеГруппы
	|		ПО СоставПравила.СчетЗатрат = СчетаГдеОбязательныНоменклатурныеГруппы.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаГдеОбязательныСтатьиЗатрат КАК СчетаГдеОбязательныСтатьиЗатрат
	|		ПО СоставПравила.СчетЗатрат = СчетаГдеОбязательныСтатьиЗатрат.Счет
	|ГДЕ
	|	СоставПравила.Ссылка В(&СпособыОтраженияРасходов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпособыОтраженияРасходовПоАмортизации.Ссылка КАК Ссылка,
	|	СпособыОтраженияРасходовПоАмортизации.Наименование КАК Наименование,
	|	ВЫБОР
	|		КОГДА СоставПравил.Ссылка ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаСостав,
	|	СоставПравил.НомерСтроки КАК НомерСтроки,
	|	СоставПравил.ОшибкаСчетЗатрат,
	|	СоставПравил.СчетЗатрат КАК СчетЗатрат,
	|	ПРЕДСТАВЛЕНИЕ(СоставПравил.СчетЗатрат),
	|	СоставПравил.ОшибкаПодразделение,
	|	СоставПравил.НомерСубконтоОбязательныНоменклатурныеГруппы,
	|	СоставПравил.НомерСубконтоОбязательныСтатьиЗатрат,
	|	СоставПравил.Субконто1,
	|	СоставПравил.Субконто2,
	|	СоставПравил.Субконто3
	|ИЗ
	|	Справочник.СпособыОтраженияРасходовПоАмортизации КАК СпособыОтраженияРасходовПоАмортизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставПравил КАК СоставПравил
	|		ПО (СоставПравил.Ссылка = СпособыОтраженияРасходовПоАмортизации.Ссылка)
	|ГДЕ
	|	СпособыОтраженияРасходовПоАмортизации.Ссылка В(&СпособыОтраженияРасходов)
	|	И (СоставПравил.Ссылка ЕСТЬ NULL 
	|			ИЛИ СоставПравил.ОшибкаСчетЗатрат
	|			ИЛИ СоставПравил.ОшибкаПодразделение
	|			ИЛИ СоставПравил.НомерСубконтоОбязательныСтатьиЗатрат ЕСТЬ НЕ NULL 
	|			ИЛИ СоставПравил.НомерСубконтоОбязательныНоменклатурныеГруппы ЕСТЬ НЕ NULL )
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование,
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Непустой результат запроса - это не обязательно ошибки.
	// Потому что заполненность субконто проще проверять вне запроса
	
	Если РезультатЗапроса.Пустой() Тогда
		// Нет ошибок 
		Возврат Новый Массив;
	КонецЕсли;
	
	Ошибки = Новый Массив; // Будет содержать ссылки на способа отражения
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		
		// Добавляем в массив Ошибки после того, как убедились, что есть ошибка.
		
		Если Выборка.ОшибкаСостав Тогда
			
			// Сообщим об ошибке - не задан состав
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В способе отражения расходов по амортизации ""%1"" не указаны правила отнесения расходов.
							|Заполните способ отражения'"),
				Выборка.Наименование);
				
			ЗаписатьОшибкуПриВыполненииРегламентнойОперации(ТекстОшибки, Выборка.Ссылка, Отказ, ОбъектРегламентнаяОперация, Ошибки);
			
		ИначеЕсли Выборка.ОшибкаСчетЗатрат Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В способе отражения расходов по амортизации ""%1"" в строке %2 не заполнен счет затрат.
							|Устраните ошибку в способе отражения'"),
				Выборка.Наименование,
				Выборка.НомерСтроки);
			
			ЗаписатьОшибкуПриВыполненииРегламентнойОперации(ТекстОшибки, Выборка.Ссылка, Отказ, ОбъектРегламентнаяОперация, Ошибки);
			
		Иначе
			
			НеЗаполненаАналитика = Новый Массив;
			
			// Проверим заполнение аналитики в строке табличной части
			Если ЗначениеЗаполнено(Выборка.НомерСубконтоОбязательныНоменклатурныеГруппы) 
				И НЕ ЗначениеЗаполнено(Выборка["Субконто" + Выборка.НомерСубконтоОбязательныНоменклатурныеГруппы]) Тогда
				НеЗаполненаАналитика.Добавить("НоменклатурнаяГруппа");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.НомерСубконтоОбязательныСтатьиЗатрат) 
				И НЕ ЗначениеЗаполнено(Выборка["Субконто" + Выборка.НомерСубконтоОбязательныСтатьиЗатрат]) Тогда
				НеЗаполненаАналитика.Добавить("СтатьяЗатрат");
			КонецЕсли;
			
			Если Выборка.ОшибкаПодразделение = Истина Тогда // Обезопасимся от NULL
				НеЗаполненаАналитика.Добавить("Подразделение");
			КонецЕсли;
			
			Если НеЗаполненаАналитика.Количество() > 0 Тогда
			
				// Выводим сообщение об ошибке
				
				ТекстОшибки = НСтр("ru = 'В способе отражения расходов по амортизации ""[НазваниеСпособа]"" в строке [НомерСтроки] не [Заполнены] [Реквизиты] на счете [Счет].
	            |Заполните аналитику в способе отражения'");
				
				ПараметрыТекста = Новый Структура;
				ПараметрыТекста.Вставить("НазваниеСпособа", Выборка.Наименование);
	            ПараметрыТекста.Вставить("НомерСтроки",     Выборка.НомерСтроки);
	            ПараметрыТекста.Вставить("Счет",            Выборка.СчетЗатрат);
				
				СловаДляСклонения = Новый Структура;
				СловаДляСклонения.Вставить("Заполнены", Новый Структура("он,она,оно,они",НСтр("ru='заполнен'"),НСтр("ru='заполнена'"),НСтр("ru='заполнено'"),НСтр("ru='заполнены'")));
				КонтрольЗатрат.ДобавитьСклонениеВПараметрыСообщенияОбОшибке(ПараметрыТекста, НеЗаполненаАналитика, СловаДляСклонения); 
				
				// [Реквизиты]
				КонтрольЗатрат.ДобавитьПереченьАналитикиВПараметрыСообщенияОбОшибке(ПараметрыТекста, НеЗаполненаАналитика);
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстОшибки,  ПараметрыТекста);
				
				ЗаписатьОшибкуПриВыполненииРегламентнойОперации(ТекстОшибки, Выборка.Ссылка, Отказ, ОбъектРегламентнаяОперация, Ошибки)
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла; // По ВыборкаСпособов
	
	Возврат Ошибки;
	
КонецФункции

// Заполняет справочник значениями по умолчанию
//
// Параметры:
//  СтатьяЗатратАмортизация - СправочникСсылка.СтатьиЗатрат - статья затрат, предназначенная для учета амортизации
//
Процедура ЗаполнитьПоУмолчанию(СтатьяЗатратАмортизация) Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		// Поставляемые данные не следует создавать в подчиненных узлах РИБ
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Настройки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СпособыОтраженияРасходовПоАмортизации КАК Настройки";
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Настройки по умолчанию создаются для следующих счетов
	СчетаУчета = Новый Массив;
	СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
	СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ИздержкиОбращения);
	
	Для Каждого Счет Из СчетаУчета Цикл
	
		АналитикаЗатрат = Новый Соответствие;
		АналитикаЗатрат.Вставить(Тип("ПланСчетовСсылка.Хозрасчетный"), Счет);
		АналитикаЗатрат.Вставить(
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат,
			СтатьяЗатратАмортизация);
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("АналитикаЗатрат", АналитикаЗатрат);
		
		Настройка = Справочники.СпособыОтраженияРасходовПоАмортизации.СоздатьЭлемент();
		Настройка.Заполнить(ЗначенияЗаполнения);
		
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Настройка, Истина, Истина);
		Исключение
			
			ШаблонСообщения = НСтр("ru = 'Не удалось создать способ отражения расходов по амортизации
                                    |%1'", Метаданные.ОсновнойЯзык.КодЯзыка);
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.СпособыОтраженияРасходовПоАмортизации,
				, // Данные
				ТекстСообщения);
				
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СпособОтраженияРасходовПоЗначениямАналитики(ЗначенияАналитики) Экспорт
	
	// Выберем способы, у которых в строках ТЧ Способы есть строки со значениями аналитики:
	// СчетЗатрат, ПодразделениеОрганизации, Субконто1, Субконто2, Субконто3.
	СпособыПоАналитике = СпособыПоЗначениямАналитики(ЗначенияАналитики);
	
	// Из полученных способов нужно отобрать те, у которых только одна строка
	// в ТЧ Способы, и организация подходит по организацию из ЗначенияАналитики
	
	Способы = ОтобратьСпособСОднойСтрокойДляОрганизации(СпособыПоАналитике, ЗначенияАналитики.Организация);
	
	Если ЗначениеЗаполнено(Способы) Тогда
		Возврат Способы[0];
	КонецЕсли;
	
КонецФункции

Функция СоздатьСпособОтраженияРасходовПоЗначениямАналитики(ЗначенияАналитики) Экспорт
	
	СпособОтражения = Справочники.СпособыОтраженияРасходовПоАмортизации.СоздатьЭлемент();
	
	СпособОтражения.Наименование = НаименованиеПоЗначениямАналитики(ЗначенияАналитики);
	СпособОтражения.Организация = ЗначенияАналитики.Организация;
	
	СтрокаЗатратСпособаОтражения = СпособОтражения.Способы.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаЗатратСпособаОтражения, ЗначенияАналитики);
	Если Не ЗначениеЗаполнено(СтрокаЗатратСпособаОтражения.Коэффициент) Тогда
		СтрокаЗатратСпособаОтражения.Коэффициент = 1;
	КонецЕсли;
	
	СпособОтражения.Записать();
	
	Возврат СпособОтражения.Ссылка;
	
КонецФункции

// Определяет наиболее частотную статью затрат, используемую в настройке.
// 
// Возвращаемое значение:
//  СправочникСсылка.СтатьяЗатрат
//
Функция ОсновнаяСтатьяЗатрат() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА ВидСубконтоСтатьяЗатрат.НомерСтроки = 1
	|					ТОГДА Настройки.Субконто1
	|				КОГДА ВидСубконтоСтатьяЗатрат.НомерСтроки = 2
	|					ТОГДА Настройки.Субконто2
	|				КОГДА ВидСубконтоСтатьяЗатрат.НомерСтроки = 3
	|					ТОГДА Настройки.Субконто3
	|			КОНЕЦ КАК Справочник.СтатьиЗатрат), ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)) КАК СтатьяЗатрат,
	|	КОЛИЧЕСТВО(*) КАК КоличествоЗаписей
	|ИЗ
	|	Справочник.СпособыОтраженияРасходовПоАмортизации.Способы КАК Настройки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконтоСтатьяЗатрат
	|		ПО Настройки.СчетЗатрат = ВидСубконтоСтатьяЗатрат.Ссылка
	|ГДЕ
	|	НЕ Настройки.Ссылка.ПометкаУдаления
	|	И ВидСубконтоСтатьяЗатрат.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|	И ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА ВидСубконтоСтатьяЗатрат.НомерСтроки = 1
	|						ТОГДА Настройки.Субконто1
	|					КОГДА ВидСубконтоСтатьяЗатрат.НомерСтроки = 2
	|						ТОГДА Настройки.Субконто2
	|					КОГДА ВидСубконтоСтатьяЗатрат.НомерСтроки = 3
	|						ТОГДА Настройки.Субконто3
	|				КОНЕЦ КАК Справочник.СтатьиЗатрат), ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА ВидСубконтоСтатьяЗатрат.НомерСтроки = 1
	|					ТОГДА Настройки.Субконто1
	|				КОГДА ВидСубконтоСтатьяЗатрат.НомерСтроки = 2
	|					ТОГДА Настройки.Субконто2
	|				КОГДА ВидСубконтоСтатьяЗатрат.НомерСтроки = 3
	|					ТОГДА Настройки.Субконто3
	|			КОНЕЦ КАК Справочник.СтатьиЗатрат), ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	КоличествоЗаписей УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СтатьяЗатрат;
	Иначе
		Возврат Справочники.СтатьиЗатрат.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаписатьОшибкуПриВыполненииРегламентнойОперации(ТекстОшибки, СпособОтражения, Отказ, ОбъектРегламентнаяОперация, Ошибки)
	
	// Сообщение об ошибке прервет выполнение операции
	БухгалтерскийУчетПереопределяемый.СообщитьОбОшибкеРегОперацииСНавигацией(ТекстОшибки, СпособОтражения, Отказ, ОбъектРегламентнаяОперация);
	
	Ошибки.Добавить(СпособОтражения);
	
КонецПроцедуры

Функция СпособыПоЗначениямАналитики(ЗначенияАналитики)
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("СчетЗатрат", ЗначенияАналитики.СчетЗатрат);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СпособыОтраженияРасходовПоАмортизации.Способы КАК СпособыОтраженияРасходовПоАмортизацииСпособы
	|ГДЕ
	|	СпособыОтраженияРасходовПоАмортизацииСпособы.СчетЗатрат = &СчетЗатрат";
	
	Если ЗначенияАналитики.Свойство("ПодразделениеОрганизации") Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И СпособыОтраженияРасходовПоАмортизацииСпособы.ПодразделениеОрганизации = &ПодразделениеОрганизации";
		Запрос.Параметры.Вставить("ПодразделениеОрганизации", ЗначенияАналитики.ПодразделениеОрганизации);
	КонецЕсли;
	
	Если ЗначенияАналитики.Свойство("Субконто1") Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто1 = &Субконто1";
		Запрос.Параметры.Вставить("Субконто1", ЗначенияАналитики.Субконто1);
	КонецЕсли;
	
	Если ЗначенияАналитики.Свойство("Субконто2") Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто2 = &Субконто2";
		Запрос.Параметры.Вставить("Субконто2", ЗначенияАналитики.Субконто2);
	КонецЕсли;
	
	Если ЗначенияАналитики.Свойство("Субконто3") Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто3 = &Субконто3";
		Запрос.Параметры.Вставить("Субконто3", ЗначенияАналитики.Субконто3);
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ОтобратьСпособСОднойСтрокойДляОрганизации(Способы, Организация)
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Способы", Способы);
	Запрос.Параметры.Вставить("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СпособыОтраженияРасходовПоАмортизации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СпособыОтраженияРасходовПоАмортизации КАК СпособыОтраженияРасходовПоАмортизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СпособыОтраженияРасходовПоАмортизации.Способы КАК СпособыОтраженияРасходовПоАмортизацииСпособы
	|		ПО (СпособыОтраженияРасходовПоАмортизации.Ссылка = СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка)
	|ГДЕ
	|	СпособыОтраженияРасходовПоАмортизации.Ссылка В(&Способы)
	|	И (СпособыОтраженияРасходовПоАмортизации.Организация = &Организация
	|			ИЛИ СпособыОтраженияРасходовПоАмортизации.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
    |
	|СГРУППИРОВАТЬ ПО
	|	СпособыОтраженияРасходовПоАмортизации.Ссылка
    |
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка) = 1
	|УПОРЯДОЧИТЬ ПО
	|	СпособыОтраженияРасходовПоАмортизации.Организация УБЫВ,
	| СпособыОтраженияРасходовПоАмортизации.Ссылка";
	Способы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Если Способы.Количество() > 0 Тогда
		Возврат Способы;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция НаименованиеПоЗначениямАналитики(ЗначенияАналитики)
	
	ЧастиНаименования = Новый Массив;
	ЧастиНаименования.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначенияАналитики.СчетЗатрат, "Код"));
	Для НомерСубконто = 1 По 3 Цикл
		ИмяПоляСубконто =  "Субконто"+НомерСубконто;
		Если ЗначенияАналитики.Свойство(ИмяПоляСубконто)
			И ЗначениеЗаполнено(ЗначенияАналитики[ИмяПоляСубконто]) Тогда
			ЧастиНаименования.Добавить(Строка(ЗначенияАналитики[ИмяПоляСубконто]));
		КонецЕсли;
	КонецЦикла;
	ЧастиНаименования.Добавить(Строка(ЗначенияАналитики.Организация));
	Возврат СтрСоединить(ЧастиНаименования, " ");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ 

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Организация") И ЗначениеЗаполнено(Параметры.Организация) Тогда
		Организации = Новый Массив;
		Организации.Добавить(Параметры.Организация);
		Организации.Добавить(Справочники.Организации.ПустаяСсылка());
		Параметры.Отбор.Вставить("Организация", Новый ФиксированныйМассив(Организации));
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли