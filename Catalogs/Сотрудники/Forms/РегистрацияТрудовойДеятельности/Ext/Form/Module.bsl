#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект,
		Параметры,
		"ФизическоеЛицоСсылка, ТекущаяОрганизация, ТекущееПодразделение,
		|ТекущаяДолжность, ТекущийВидЗанятости, ДатаПриема, ДатаУвольнения");
	
	ДополнительныеПараметрыОткрытия = ПолучитьИзВременногоХранилища(Параметры.АдресДополнительныхПараметров);
	ЗначениеВРеквизитФормы(ДополнительныеПараметрыОткрытия.Сотрудник, "Сотрудник");
	
	Если Параметры.Прием Тогда
		Заголовок = СтрШаблон(НСтр("ru = 'Прием на работу (%1)'"), ФизическоеЛицоСсылка.ФИО);
	ИначеЕсли Параметры.Увольнение Тогда
		Заголовок = СтрШаблон(НСтр("ru = 'Увольнение (%1)'"), ФизическоеЛицоСсылка.ФИО);
	ИначеЕсли Параметры.Перевод Тогда
		Заголовок = СтрШаблон(НСтр("ru = 'Перевод (%1)'"), ФизическоеЛицоСсылка.ФИО);
		ДатаПеревода = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ДатаПриказа    = ТекущаяДатаСеанса();
	
	НаименованиеДокумента = НСтр("ru='Приказ'");
	СтатьяТКРФ            = Справочники.ОснованияУвольнения.Статья77п3;
	ОпределитьТрудовуюФункцию();
	
	ЗаполнятьПодразделения =
		Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяОрганизация,
			"НеЗаполнятьПодразделенияВМероприятияхТрудовойДеятельности");
	
	Элементы.ГруппаПриемПеревод.Видимость = Параметры.Прием ИЛИ Параметры.Перевод;
	Элементы.ДатаПриема.Видимость         = Параметры.Прием;
	Элементы.ДатаПеревода.Видимость       = Параметры.Перевод;
	Элементы.ГруппаУвольнение.Видимость   = Параметры.Увольнение;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТекущееПодразделение",
		"Видимость",
		ЗаполнятьПодразделения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("СохранитьИЗакрыть", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ Параметры.Увольнение Тогда
		ИндексРеквизита = ПроверяемыеРеквизиты.Найти("СтатьяТКРФ");
		ПроверяемыеРеквизиты.Удалить(ИндексРеквизита);
	КонецЕсли;
	
	Если НЕ Параметры.Перевод Тогда
		ИндексРеквизита = ПроверяемыеРеквизиты.Найти("ДатаПеревода");
		ПроверяемыеРеквизиты.Удалить(ИндексРеквизита);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если ПроверитьЗаполнение() Тогда
		СохранитьИЗакрытьНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НаименованиеДокументаПриИзменении(Элемент)
	
	Если Параметры.Прием Тогда
		ВидДокумента = "ПриемНаРаботу";
	Иначе
		ВидДокумента = "Увольнение";
	КонецЕсли;
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаПриИзменении(ТекущаяОрганизация,
		ВидДокумента,
		НаименованиеДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДокументаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаОбработкаВыбора(
		НаименованиеДокумента, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДокументаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЗанятостиПриИзменении(Элемент)
	
	СотрудникиКлиент.ПроверитьКонфликтыВидаЗанятостиССуществующимиСотрудниками(
		Сотрудник.Ссылка,
		ФизическоеЛицоСсылка,
		ТекущаяОрганизация,
		ТекущийВидЗанятости,
		ДатаПриема);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяДолжностьПриИзменении(Элемент)
	
	ОпределитьТрудовуюФункцию();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СохранитьИЗакрытьНаКлиенте()
	
	ЗарегистрироватьМероприятиеТрудовойДеятельности();
	Модифицированность = Ложь;
	Закрыть(МероприятиеТрудовойДеятельности);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИЗакрыть(Результат, ДополнительныеПараметры) Экспорт 
	
	СохранитьИЗакрытьНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьТрудовуюФункцию()
	
	Если ЗначениеЗаполнено(ТекущаяДолжность) Тогда
		
		ТрудоваяФункция = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяДолжность, "ТрудоваяФункция");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьМероприятиеТрудовойДеятельности()
	
	РегистрацияТрудовойДеятельности = Документы.РегистрацияТрудовойДеятельности.СоздатьДокумент();
	РегистрацияТрудовойДеятельности.Дата = ТекущаяДатаСеанса();
	РегистрацияТрудовойДеятельности.Организация = ТекущаяОрганизация;
	
	Если Параметры.Прием Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация",           ТекущаяОрганизация);
		Запрос.УстановитьПараметр("Сотрудник",             Сотрудник.Ссылка);
		Запрос.УстановитьПараметр("ФизическоеЛицо",        ФизическоеЛицоСсылка);
		Запрос.УстановитьПараметр("ЯвляетсяСовместителем", ТекущийВидЗанятости <> Перечисления.ВидыЗанятости.ОсновноеМестоРаботы);
		Запрос.УстановитьПараметр("ВидМероприятия",        Перечисления.ВидыМероприятийТрудовойДеятельности.Прием);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	МероприятияТрудовойДеятельности.ИдМероприятия КАК ИдМероприятия
		|ПОМЕСТИТЬ ВТ_ОтмененныеМероприятия
		|ИЗ
		|	РегистрСведений.МероприятияТрудовойДеятельности КАК МероприятияТрудовойДеятельности
		|ГДЕ
		|	МероприятияТрудовойДеятельности.Организация = &Организация
		|	И МероприятияТрудовойДеятельности.ФизическоеЛицо = &ФизическоеЛицо
		|	И МероприятияТрудовойДеятельности.Сотрудник = &Сотрудник
		|	И МероприятияТрудовойДеятельности.ЯвляетсяСовместителем = &ЯвляетсяСовместителем
		|	И МероприятияТрудовойДеятельности.ВидМероприятия = &ВидМероприятия
		|	И МероприятияТрудовойДеятельности.Отменено
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	*
		|ИЗ
		|	РегистрСведений.МероприятияТрудовойДеятельности КАК МероприятияТрудовойДеятельности
		|ГДЕ
		|	МероприятияТрудовойДеятельности.Организация = &Организация
		|	И МероприятияТрудовойДеятельности.ФизическоеЛицо = &ФизическоеЛицо
		|	И МероприятияТрудовойДеятельности.Сотрудник = &Сотрудник
		|	И МероприятияТрудовойДеятельности.ЯвляетсяСовместителем = &ЯвляетсяСовместителем
		|	И МероприятияТрудовойДеятельности.ВидМероприятия = &ВидМероприятия
		|	И НЕ МероприятияТрудовойДеятельности.Отменено
		|	И НЕ МероприятияТрудовойДеятельности.ИдМероприятия В
		|				(ВЫБРАТЬ
		|					ВТ_ОтмененныеМероприятия.ИдМероприятия
		|				ИЗ
		|					ВТ_ОтмененныеМероприятия)
		|
		|УПОРЯДОЧИТЬ ПО
		|	МероприятияТрудовойДеятельности.Регистратор";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НоваяСтрока = РегистрацияТрудовойДеятельности.Мероприятия.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.СотрудникЗаписи = Сотрудник.Ссылка;
			НоваяСтрока.ДатаОтмены      = РегистрацияТрудовойДеятельности.Дата;
		КонецЕсли;
		
	КонецЕсли;
	
	НоваяСтрока = РегистрацияТрудовойДеятельности.Мероприятия.Добавить();
	
	НоваяСтрока.Сотрудник                      = ФизическоеЛицоСсылка;
	НоваяСтрока.НаименованиеДокументаОснования = НаименованиеДокумента;
	НоваяСтрока.ДатаДокументаОснования         = ДатаПриказа;
	НоваяСтрока.НомерДокументаОснования        = НомерПриказа;
	НоваяСтрока.ЯвляетсяСовместителем          = ТекущийВидЗанятости <> Перечисления.ВидыЗанятости.ОсновноеМестоРаботы;
	НоваяСтрока.СотрудникЗаписи                = Сотрудник.Ссылка;
	НоваяСтрока.ИдМероприятия                  = Новый УникальныйИдентификатор;
	
	Если Параметры.Прием ИЛИ Параметры.Перевод Тогда
		Если Параметры.Прием Тогда
			НоваяСтрока.ДатаМероприятия = ДатаПриема;
			НоваяСтрока.ВидМероприятия  = Перечисления.ВидыМероприятийТрудовойДеятельности.Прием;
		Иначе
			НоваяСтрока.ДатаМероприятия = ДатаПеревода;
			НоваяСтрока.ВидМероприятия  = Перечисления.ВидыМероприятийТрудовойДеятельности.Перевод;
		КонецЕсли;
		НоваяСтрока.Подразделение   = ТекущееПодразделение;
		НоваяСтрока.Должность       = ТекущаяДолжность;
		НоваяСтрока.ТрудоваяФункция = ТрудоваяФункция;
		
		Если ЗначениеЗаполнено(ТекущееПодразделение) Тогда
			НоваяСтрока.ПредставлениеПодразделения =
				ЭлектронныеТрудовыеКнижкиПовтИсп.ПредставлениеПодразделения(ТекущееПодразделение);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущаяДолжность) Тогда
			СвойстваДолжности = ЭлектронныеТрудовыеКнижкиПовтИсп.СвойстваДолжности(ТекущаяДолжность);
			НоваяСтрока.ПредставлениеДолжности = СвойстваДолжности.Представление;
			НоваяСтрока.КодПоРееструДолжностей = СвойстваДолжности.КодПоРееструДолжностей;
		КонецЕсли;
		
	Иначе
		НоваяСтрока.ДатаМероприятия = ДатаУвольнения;
		НоваяСтрока.ВидМероприятия = Перечисления.ВидыМероприятийТрудовойДеятельности.Увольнение;
		НоваяСтрока.ОснованиеУвольнения = СтатьяТКРФ;
		Если ЗначениеЗаполнено(СтатьяТКРФ) Тогда
			СвойстваОснованияУвольнения = ЭлектронныеТрудовыеКнижкиПовтИсп.СвойстваОснованияУвольнения(СтатьяТКРФ);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СвойстваОснованияУвольнения);
		КонецЕсли;
	КонецЕсли;
	
	РегистрацияТрудовойДеятельности.Записать(РежимЗаписиДокумента.Проведение);
	
	МероприятиеТрудовойДеятельности = РегистрацияТрудовойДеятельности.Ссылка;
	
КонецПроцедуры

#КонецОбласти
