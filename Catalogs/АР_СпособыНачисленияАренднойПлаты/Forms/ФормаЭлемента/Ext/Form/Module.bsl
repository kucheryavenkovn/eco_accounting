
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ПараметрыДереваОператоров = Новый Структура();
	ПараметрыДереваОператоров.Вставить("СтандартныеОператоры", Истина);
	ПараметрыДереваОператоров.Вставить("ЛогическиеОператоры", Истина);
	ПараметрыДереваОператоров.Вставить("Функции", Истина);
	
	ДеревоОператоров = ПостроитьДеревоОператоров(ПараметрыДереваОператоров);
	
	Операнды = Справочники.АР_СпособыНачисленияАренднойПлаты.ПолучитьСписокОперандов();
	
	ДобавитьВДеревоОперанды(ДеревоОператоров, "Операнды");
	
	ЗначениеВРеквизитФормы(ДеревоОператоров, "Операторы");
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Объект.ВариантРасчета = ПредопределенноеЗначение("Перечисление.АР_ВариантыРасчета.РасчетПоПроизвольнойФормуле") Тогда
		ПроверитьФормулуСервер(Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.ВариантРасчета = ПредопределенноеЗначение("Перечисление.АР_ВариантыРасчета.РасчетПоПроизвольнойФормуле") Тогда
		Возврат;	
	КонецЕсли;
	
	СписокВозможныхНаименований = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Объект.Валюта) И ЗначениеЗаполнено(Объект.ПериодНачисления) Тогда
		ВозможноеНаименование = "В " + Объект.Валюта + " за " 
			+ ?(Объект.ВариантРасчета = ПредопределенноеЗначение("Перечисление.АР_ВариантыРасчета.ПоСтавкеЗаОбъектВЦелом"), "объект", Объект.ЕдиницаИзмерения) 
			+ "/" + НРег(Объект.ПериодНачисления);
		СписокВозможныхНаименований.Добавить(ВозможноеНаименование);
	КонецЕсли;

	// Выбор из списка и обработка выбора.
	Оповещение = Новый ОписаниеОповещения("НаименованиеНачалоВыбораЗавершение", ЭтотОбъект);
	ПоказатьВыборИзМеню(Оповещение, СписокВозможныхНаименований);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Объект.Наименование = Результат.Значение;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантРасчетаПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицФормы

&НаКлиенте
Процедура ОператорыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Оператор) Тогда
		ПараметрыПеретаскивания.Значение = Элемент.ТекущиеДанные.Оператор;
	Иначе
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОператорыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВставитьОператорВФормулу();
	
КонецПроцедуры

&НаКлиенте
Процедура ОператорыОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПроверитьФормулу(Команда)
	
	ОчиститьСообщения();
	Отказ = Ложь;
	ПроверитьФормулуСервер(Отказ);
	Если НЕ Отказ Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Синтаксических ошибок не обнаружено!'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ЕдиницаИзмерения.Видимость = Объект.ВариантРасчета = ПредопределенноеЗначение("Перечисление.АР_ВариантыРасчета.ПоСтавкеЗаЕдиницуПлощади");
	Элементы.ГруппаФормула.Видимость = Объект.ВариантРасчета = ПредопределенноеЗначение("Перечисление.АР_ВариантыРасчета.РасчетПоПроизвольнойФормуле");
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьОператорВФормулу()
	
	Если ЗначениеЗаполнено(Элементы.Операторы.ТекущиеДанные.Оператор) Тогда
		ТекстДляВставки = Элементы.Операторы.ТекущиеДанные.Оператор;
		Если Элементы.Операторы.ТекущиеДанные.Наименование = "( )" 
			И ЗначениеЗаполнено(Элементы.Формула.ВыделенныйТекст) Тогда
			ТекстДляВставки = "(" + Элементы.Формула.ВыделенныйТекст + ")";
		КонецЕсли;
		Элементы.Формула.ВыделенныйТекст = ТекстДляВставки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВДеревоОперанды(Дерево, ИмяУзла, ИмяРодителя = "")
	
	Если ЗначениеЗаполнено(ИмяРодителя) Тогда
		Группа = Дерево.Строки.Найти(ИмяРодителя);
	Иначе
		Группа = Дерево.Строки;
	КонецЕсли;
	
	Группа = ДобавитьГруппуОператоров(Дерево, ИмяУзла);
	
	Дерево.Строки.Сдвинуть(Группа, -1 * (Дерево.Строки.Количество() - 1));
	
	Для Каждого Операнд из Операнды Цикл
		
		ДобавитьОператор(Дерево, Группа, Операнд.Представление, 
			"[" + Операнд.Значение + "]");
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьФормулуСервер(Отказ)
	
	Если НЕ Справочники.АР_СпособыНачисленияАренднойПлаты.ПроверитьФормулу(Объект.Формула) Тогда
		Отказ = Истина;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСФормулами

&НаСервере
Функция ПолучитьПустоеДеревоОператоров() Экспорт
	
	Дерево = Новый ДеревоЗначений();
	Дерево.Колонки.Добавить("Наименование");
	Дерево.Колонки.Добавить("Оператор");
	Дерево.Колонки.Добавить("Сдвиг", Новый ОписаниеТипов("Число"));
	
	Возврат Дерево;
	
КонецФункции

&НаСервере
Функция ДобавитьГруппуОператоров(Дерево, Наименование) Экспорт
	
	НоваяГруппа = Дерево.Строки.Добавить();
	НоваяГруппа.Наименование = Наименование;
	
	Возврат НоваяГруппа;
	
КонецФункции

&НаСервере
Функция ДобавитьОператор(Дерево, Родитель = Неопределено, Наименование, Оператор = Неопределено, Сдвиг = 0) Экспорт
	
	НоваяСтрока = ?(Родитель <> Неопределено, Родитель.Строки.Добавить(), Дерево.Строки.Добавить());
	НоваяСтрока.Наименование = Наименование;
	НоваяСтрока.Оператор = ?(ЗначениеЗаполнено(Оператор), Оператор, Наименование);
	НоваяСтрока.Сдвиг = Сдвиг;
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаСервере
Функция ПолучитьСтандартноеДеревоОператоров() Экспорт
	
	Дерево = ПолучитьПустоеДеревоОператоров();
	ГруппаОператоров = ДобавитьГруппуОператоров(Дерево, "Операторы");
	ДобавитьОператор(Дерево, ГруппаОператоров, "+", " + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "-", " - ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "*", " * ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "/", " / ");
	
	Возврат Дерево;
	
КонецФункции

&НаСервере
Функция ПостроитьДеревоОператоров(ПараметрыСтруктура) Экспорт
	
	Дерево = ПолучитьПустоеДеревоОператоров();
	
	Если ПараметрыСтруктура.Свойство("СтандартныеОператоры") И ПараметрыСтруктура.СтандартныеОператоры Тогда
		ДобавитьГруппуСтандартныхОператоров(Дерево);
	КонецЕсли;
	
	Если ПараметрыСтруктура.Свойство("ЛогическиеОператоры") И ПараметрыСтруктура.ЛогическиеОператоры Тогда
		ДобавитьГруппуЛогическихОператоров(Дерево);
	КонецЕсли;
	
	Если ПараметрыСтруктура.Свойство("Функции") И ПараметрыСтруктура.Функции Тогда
		ДобавитьГруппуФункции(Дерево);
	КонецЕсли;
	
	Возврат Дерево;
	
КонецФункции

&НаСервере
Процедура ДобавитьГруппуСтандартныхОператоров(Дерево)

	ГруппаОператоров = ДобавитьГруппуОператоров(Дерево, НСтр("ru='Операторы'"));
	ДобавитьОператор(Дерево, ГруппаОператоров, "+", " + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "-", " - ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "*", " * ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "/", " / ");

КонецПроцедуры

&НаСервере
Процедура ДобавитьГруппуЛогическихОператоров(Дерево)

	ГруппаОператоров = ДобавитьГруппуОператоров(Дерево, НСтр("ru='Логические операторы и константы'"));
	ДобавитьОператор(Дерево, ГруппаОператоров, "<", " < ");
	ДобавитьОператор(Дерево, ГруппаОператоров, ">", " > ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "<=", " <= ");
	ДобавитьОператор(Дерево, ГруппаОператоров, ">=", " >= ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "=", " = ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "<>", " <> ");
	ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='И'"),      " " + НСтр("ru='И'")      + " ");
	ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='ИЛИ'"),    " " + НСтр("ru='ИЛИ'")    + " ");
	ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='НЕ'"),     " " + НСтр("ru='НЕ'")     + " ");
	ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='ИСТИНА'"), " " + НСтр("ru='ИСТИНА'") + " ");
	ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='ЛОЖЬ'"),   " " + НСтр("ru='ЛОЖЬ'")   + " ");

КонецПроцедуры

&НаСервере
Процедура ДобавитьГруппуФункции(Дерево)

	ГруппаОператоров = ДобавитьГруппуОператоров(Дерево, НСтр("ru='Функции'"));
	ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Максимум'"),    НСтр("ru='МАКСИМУМ(<Значение1>, <Значение2>)'"), 2);
	ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Минимум'"),     НСтр("ru='МИНИМУМ(<Значение1>, <Значение2>)'"),  2);
	ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Округлить'"),  НСтр("ru='ОКРУГЛИТЬ(<Значение>, <ЧислоЗнаков>)'"),  2);
	ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Целая часть'"), НСтр("ru='ЦелаяЧасть(<Значение>)'"),   1);
	ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Условие'"),     НСтр("ru='?(<Условие>, <РезультатИстина>, <РезультатЛожь>)'"), 3);

КонецПроцедуры

#КонецОбласти
