#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Получает описание предопределенных наборов свойств.
//
// Параметры:
//  Наборы - ДеревоЗначений - с колонками:
//     * Имя           - Строка - Имя набора свойств. Формируется из полного имени объекта
//                       метаданных заменой символа "." на "_".
//                       Например, "Документ_ЗаказПокупателя".
//     * Идентификатор - УникальныйИдентификатор - Идентификатор ссылки предопределенного элемента.
//     * Используется  - Неопределено, Булево - Признак того, что набор свойств используется.
//                       Например, можно использовать для скрытия набора по функциональным опциям.
//                       Значение по умолчанию - Неопределено, соответствует значению Истина.
//     * ЭтоГруппа     - Булево - Истина, если набор свойств является группой.
//
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	Набор = Наборы.Строки.Добавить();
	Набор.Имя = "Справочник_ТранспортныеСредства";
	Набор.ЭтоГруппа = Истина;
	Набор.Идентификатор = Новый УникальныйИдентификатор("a3127262-daf4-46b8-9787-6635668f1762");
	Набор.Используется  = ПолучитьФункциональнуюОпцию("ВедетсяУчетПоПутевымЛистам");
	
КонецПроцедуры

// Записывает указанное значение нормы расхода в транспортное средство.
//
// Параметры:
//    ТранспортноеСредство - СправочникСсылка.ТранспортныеСредства
//    НормаРасхода         - Число(7, 3)
//
Процедура ИзменитьНормуРасходаТоплива(ТранспортноеСредство, НормаРасхода) Экспорт
	
	ТранспортноеСредствоОбъект = ТранспортноеСредство.ПолучитьОбъект();
	ТранспортноеСредствоОбъект.НормаРасхода = НормаРасхода;
	ТранспортноеСредствоОбъект.Записать();
	
КонецПроцедуры

// Вычисляет количество топлива в баке транспортного средства организации.
//
// Параметры:
//    Организация          - СправочникСсылка.Организации
//    ТранспортноеСредство - СправочникСсылка.ТранспортныеСредства
//    Период               - Дата; МоментВремени; Граница.
//
// Возвращаемое значение:
//    Число
//
Функция ОстатокТопливаВБаке(Организация, ТранспортноеСредство, Период) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.КоличествоОстаток КАК Остаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Период,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТопливоВБаке),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ТранспортныеСредства),
	|			Организация = &Организация
	|				И Субконто1 = &ТС) КАК ХозрасчетныйОстатки");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТС",          ТранспортноеСредство);
	Запрос.УстановитьПараметр("Период",      Период);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить()[0].Остаток;
	
КонецФункции

// Возвращает количество километров для расчета нормы расхода топлива.
//
// Возвращаемое значение:
//    Число.
//
Функция ПробегАвтотранспортаПоНормативу() Экспорт
	
	Возврат 100;
	
КонецФункции

// Возвращает реквизиты транспортного средства: норма расхода и свойства топлива транспортного средства.
//
// Параметры:
//    ТранспортноеСредство  - СправочникСсылка.ТранспортныеСредства
//    ПоказаниеОдометраДата - Дата
//
// Возвращаемое значение:
//    Структура - см. НовыйСвойстваТопливо()
//
Функция РеквизитыТранспортногоСредства(ТранспортноеСредство, ПоказаниеОдометраДата) Экспорт
	
	СвойстваТС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТранспортноеСредство, "Топливо, НормаРасхода");
	Топливо    = СвойстваТС.Топливо;
	
	Если ЗначениеЗаполнено(Топливо) Тогда
		СтруктураРезультат = СвойстваНормыРасходаТоплива(Топливо);
	Иначе
		СтруктураРезультат = НовыйСвойстваТопливо();
	КонецЕсли;
	
	СтруктураРезультат.Вставить("НормаРасхода", СвойстваТС.НормаРасхода);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПутевойЛистМаршрут.ПоказаниеОдометраПосле КАК ПоказаниеОдометра
	|ИЗ
	|	Документ.ПутевойЛист КАК ПутевойЛист
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПутевойЛист.Маршрут КАК ПутевойЛистМаршрут
	|		ПО ПутевойЛист.Ссылка = ПутевойЛистМаршрут.Ссылка
	|ГДЕ
	|	ПутевойЛист.Проведен
	|	И ПутевойЛист.ТранспортноеСредство = &ТранспортноеСредство
	|	И ПутевойЛистМаршрут.ДатаОтправления <= &ДатаДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоказаниеОдометра УБЫВ");
	
	Запрос.УстановитьПараметр("ТранспортноеСредство", ТранспортноеСредство);
	Запрос.УстановитьПараметр("ДатаДокумента",        КонецДня(ПоказаниеОдометраДата));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураРезультат.Вставить("ПоказаниеОдометра", Выборка.ПоказаниеОдометра);
	Иначе
		СтруктураРезультат.Вставить("ПоказаниеОдометра", 0);
	КонецЕсли;
		
	Возврат СтруктураРезультат;
	
КонецФункции

// Возвращает текст дополнительной подсказки для нормы расхода топлива (напр., л/100 км).
//
// Параметры:
//    Топливо - СправочникСсылка.Номенклатура
//
// Возвращаемое значение:
//    Структура - ключи:
//     * Подсказка                    - Строка - Текст подсказки, напр. л/100 км.
//     * ЕдиницаИзмерения             - СправочникСсылка.КлассификаторЕдиницИзмерения - Свойство необязательное.
//     * ЕдиницаИзмеренияНаименование - Строка - Наименование единицы измерения топлива. Свойство необязательное.
//
Функция СвойстваНормыРасходаТоплива(Топливо) Экспорт
	
	СтруктураРезультат = НовыйСвойстваТопливо();
	
	Если Не ЗначениеЗаполнено(Топливо) Тогда
		Возврат СтруктураРезультат;
	КонецЕсли;
	
	ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Топливо, "ЕдиницаИзмерения");
	
	Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		Наименование   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЕдиницаИзмерения, "Наименование");
		ТекстУточнения = СтрШаблон(НСтр("ru = '%1/%2 км'"), Наименование, ПробегАвтотранспортаПоНормативу());
		СтруктураРезультат.Вставить("ЕдиницаИзмерения",             ЕдиницаИзмерения);
		СтруктураРезультат.Вставить("ЕдиницаИзмеренияНаименование", Наименование);
		СтруктураРезультат.Вставить("Подсказка",                    ТекстУточнения);
	КонецЕсли;
	
	Возврат СтруктураРезультат;
	
КонецФункции

// Конструктор таблицы для записи транспортного средства
//
// Возвращаемое значение:
//   ТаблицаЗначений с колонками:
//      * ИдентификационныйНомер  - Строка - VIN
//      * Марка                   - Строка - Марка транспортного средства
//      * РегистрационныйЗнак     - Строка - Регистрационный номер транспортного средства
//      * Организация             - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Собственник транспортного средства
//      * ОформляютсяПутевыеЛисты - Булево - Признак, оформляются ли по этому транспортному средству путевые листы
//
Функция НовыйТаблицаТранспортныеСредства() Экспорт
	
	МетаданныеСправочник = Метаданные.Справочники.ТранспортныеСредства;
	
	ТранспортныеСредства = Новый ТаблицаЗначений;
	ТранспортныеСредства.Колонки.Добавить("ИдентификационныйНомер", ОбщегоНазначения.ОписаниеТипаСтрока(МетаданныеСправочник.ДлинаКода));
	ТранспортныеСредства.Колонки.Добавить("Марка", МетаданныеСправочник.Реквизиты.Марка.Тип);
	ТранспортныеСредства.Колонки.Добавить("РегистрационныйЗнак", МетаданныеСправочник.Реквизиты.РегистрационныйЗнак.Тип);
	ТранспортныеСредства.Колонки.Добавить("Организация", МетаданныеСправочник.Реквизиты.Собственник.Тип);
	ТранспортныеСредства.Колонки.Добавить("ОформляютсяПутевыеЛисты", Новый ОписаниеТипов("Булево"));
	
	Возврат ТранспортныеСредства;
	
КонецФункции

// Создает новые элементы справочника по данным заполнения.
// Уникальность элементов проверяется по полю VIN (ИдентификационныйНомер).
//
// Параметры:
//    ДанныеЗаполнения - ТаблицаЗначений - см. НовыйТаблицаТранспортныеСредства()
//
Процедура СоздатьТранспортныеСредства(ДанныеЗаполнения) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВТ.ИдентификационныйНомер КАК Код,
	|	ВТ.Марка КАК Марка,
	|	ВТ.РегистрационныйЗнак КАК РегистрационныйЗнак,
	|	ВТ.Организация КАК Собственник,
	|	ВТ.ОформляютсяПутевыеЛисты КАК ОформляютсяПутевыеЛисты
	|ПОМЕСТИТЬ ТаблицаДанных
	|ИЗ
	|	&ТаблицаДанных КАК ВТ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДанных.Код КАК Код,
	|	ТаблицаДанных.Марка КАК Марка,
	|	ТаблицаДанных.РегистрационныйЗнак КАК РегистрационныйЗнак,
	|	ТаблицаДанных.Собственник КАК Собственник,
	|	ТаблицаДанных.ОформляютсяПутевыеЛисты КАК ОформляютсяПутевыеЛисты
	|ИЗ
	|	ТаблицаДанных КАК ТаблицаДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТранспортныеСредства КАК ТранспортныеСредства
	|		ПО ТаблицаДанных.Код = ТранспортныеСредства.Код
	|			И (НЕ ТранспортныеСредства.ПометкаУдаления)
	|ГДЕ
	|	ТранспортныеСредства.Ссылка ЕСТЬ NULL");
	
	Запрос.УстановитьПараметр("ТаблицаДанных", ДанныеЗаполнения);
	
	Отбор = Запрос.Выполнить().Выбрать();
	Пока Отбор.Следующий() Цикл
		НовыйЭлемент = Справочники.ТранспортныеСредства.СоздатьЭлемент();
		НовыйЭлемент.Заполнить(ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Отбор));
		НовыйЭлемент.ДополнительныеСвойства.Вставить("ПроверятьТопливо", Ложь);
		Если НовыйЭлемент.ПроверитьЗаполнение() Тогда
			НовыйЭлемент.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СсылкаОписаниеНормыМинтранса()
	
	Возврат "https://its.1c.ru/bmk/law/consumption_rates";
	
КонецФункции

Функция ПодсказкаОписаниеНормыМинтранса() Экспорт
	
	СтрокиПодсказки = Новый Массив;
	СтрокиПодсказки.Добавить(НСтр("ru = 'Определяется по документам завода-изготовителя или рекомендациям Минтранса.'"));
	СтрокиПодсказки.Добавить(Символы.ПС);
	СтрокиПодсказки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Подробнее'"),,,, СсылкаОписаниеНормыМинтранса()));
	
	Возврат Новый ФорматированнаяСтрока(СтрокиПодсказки);
	
КонецФункции

Процедура УстановитьОформляютсяПутевыеЛисты() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТранспортныеСредства.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ТранспортныеСредства КАК ТранспортныеСредства
	|ГДЕ
	|	НЕ ТранспортныеСредства.ОформляютсяПутевыеЛисты
	|	И ТранспортныеСредства.НормаРасхода <> 0";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.ОформляютсяПутевыеЛисты = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
	КонецЦикла;
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Собственник)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Параметры.Отбор.Свойство("Организация") И ЗначениеЗаполнено(Параметры.Отбор.Организация) Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ДанныеВыбораПриВводеПоСтроке(Параметры.СтрокаПоиска, Параметры.Отбор.Организация);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыйСвойстваТопливо()
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Подсказка", "");
	СтруктураРезультат.Вставить("ЕдиницаИзмерения", Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка());
	СтруктураРезультат.Вставить("ЕдиницаИзмеренияНаименование", "");
	СтруктураРезультат.Вставить("НормаРасхода", 0);
	СтруктураРезультат.Вставить("ПоказаниеОдометра", 0);
	
	Возврат СтруктураРезультат;
	
КонецФункции

Функция ДанныеВыбораПриВводеПоСтроке(СтрокаПоиска, Организация)
	
	СписокРезультат = Новый СписокЗначений;
	Если Не ЗначениеЗаполнено(СтрокаПоиска) Тогда 
		Возврат СписокРезультат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 10
	|	ТранспортныеСредства.Ссылка КАК Ссылка,
	|	ТранспортныеСредства.Представление КАК Представление
	|ИЗ
	|	Справочник.ТранспортныеСредства КАК ТранспортныеСредства
	|ГДЕ
	|	ТранспортныеСредства.Наименование ПОДОБНО &СтрокаПоиска
	|	И ВЫБОР
	|			КОГДА ТранспортныеСредства.Собственник ССЫЛКА Справочник.Организации
	|				ТОГДА ТранспортныеСредства.Собственник = &Организация
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТранспортныеСредства.Ссылка");
	
	Запрос.УстановитьПараметр("СтрокаПоиска", СтрШаблон("%%%1%%", СокрЛП(СтрокаПоиска)));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Отбор = Запрос.Выполнить().Выбрать();
	
	Пока Отбор.Следующий() Цикл
		Представление = ОбщегоНазначенияБП.ПодсветитьСтрокуПоиска(Отбор.Представление, СтрокаПоиска);
		СписокРезультат.Добавить(Отбор.Ссылка, Представление);
	КонецЦикла;
	
	Возврат СписокРезультат;
	
КонецФункции

#КонецОбласти

#КонецЕсли

