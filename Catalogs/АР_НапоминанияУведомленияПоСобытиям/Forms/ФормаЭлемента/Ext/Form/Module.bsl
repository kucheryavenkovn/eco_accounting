
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьТипыОбъектов();
	ЗаполнитьСписокРеквизитовИсточника();
	
	ЗаполнитьСписокИнтервалов();
	ЗаполнитьПредставленияИнтервалов();
	ЗаполнитьСписокИнтерваловВыбора();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//Если Объект.ИнтервалВремениОповещения > 0 Тогда
	//	ИнтервалВремениСтрокой = НапоминанияПользователяКлиентСервер.ПредставлениеВремени(Объект.ИнтервалВремениОповещения);
	//КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СпособУстановкиВремениПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииИнтервалаВремени(Элемент)
	
	Для каждого Элемент Из СписокИнтервалов Цикл
		Если Элемент.Представление = ИнтервалВремениСтрокой Тогда
			Объект.ИнтервалВремениОповещения = Элемент.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаПриИзменении(Элемент)
	
	ЗаполнитьСписокРеквизитовИсточника();
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонСообщенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.ТипыОбъектов.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан тип объекта",, "Объект.ТипОбъектаПредставление");
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("РедактированиеШаблонаСообщенияЗавершение", ЭтаФорма);
	ОткрытьФорму("Справочник.АР_НапоминанияУведомленияПоСобытиям.Форма.РедактированиеШаблонаСообщения", Новый Структура("ШаблонСообщения, ТипОбъекта", Элемент.ТекстРедактирования, Объект.ТипыОбъектов[0].ТипОбъекта),,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеШаблонаСообщенияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		Объект.ШаблонСообщения = РезультатЗакрытия;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТипыОбъектов.ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения("ВыборТиповОбъектаЗавершение", ЭтотОбъект), "Типы объектов");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборТиповОбъектаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Объект.ТипыОбъектов.Очистить();
		Для каждого Элемент Из Результат Цикл
			Если Элемент.Пометка Тогда
				НоваяСтрока = Объект.ТипыОбъектов.Добавить();
				НоваяСтрока.ТипОбъекта = Элемент.Значение;
			КонецЕсли;
		КонецЦикла;
		СформироватьПредставлениеТиповОбъектов();
		ЗаполнитьСписокРеквизитовИсточника();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоИнтерваловОповещенияПриИзменении(Элемент)
	
	ЗаполнитьПредставленияИнтервалов();
	ЗаполнитьСписокИнтерваловВыбора();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура ПолучателиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		СписокДоступныхТипов = Новый СписокЗначений;
		
		СписокДоступныхТипов.Добавить("Пользователи");
		СписокДоступныхТипов.Добавить("Ответственный по документу");
		
		СписокДоступныхТипов.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ПолучателиПриНачалеРедактированияЗавершение", ЭтотОбъект), НСтр("ru = 'Кому формировать уведомления'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПриНачалеРедактированияЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
    
    ВыбранныйТип = ВыбранныйЭлемент;
    
	Если ВыбранныйТип <> Неопределено Тогда	
		Если ВыбранныйТип.Значение = "Пользователи" Тогда
			Элементы.Получатели.ТекущиеДанные.Пользователь = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
			Элементы.ПолучателиПользователь.РедактированиеТекста = Истина;
		Иначе
			Элементы.Получатели.ТекущиеДанные.Пользователь = ВыбранныйТип;
			Элементы.ПолучателиПользователь.РедактированиеТекста = Ложь;
		КонецЕсли;
	Иначе
		Элементы.Получатели.ТекущиеДанные.Пользователь = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		Элементы.ПолучателиПользователь.РедактированиеТекста = Истина;
	КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Получатели.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТипЗнч(ТекущиеДанные.Пользователь) = Тип("Строка") Тогда
			Элементы.ПолучателиПользователь.РедактированиеТекста = Ложь;
		Иначе
			Элементы.ПолучателиПользователь.РедактированиеТекста = Истина;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Элементы.НастройкаИсточника.Видимость = Объект.СпособУстановкиВремени = ПредопределенноеЗначение("Перечисление.АР_СпособыУстановкиВремениНапоминанияУведомления.ОтносительноВремениПредмета");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТипыОбъектов()
	
	СписокОбъектов = Новый СписокЗначений;
	
	ТабТипыОбъектов = Объект.ТипыОбъектов.Выгрузить();
	
	СписокОбъектов.Добавить("Документ.АР_ЗаключениеДоговораАренды", "Документ ""Заключение договора аренды""");
	СписокОбъектов.Добавить("Документ.АР_ДополнительноеСоглашение", "Документ ""Дополнительное соглашение""");
	СписокОбъектов.Добавить("Документ.АР_РасторжениеДоговораАренды", "Документ ""Расторжение договора аренды""");
	СписокОбъектов.Добавить("Документ.АР_АктПриемаПередачиПомещенияВАренду", "Документ ""Акт приема-передачи помещения в аренду""");
	СписокОбъектов.Добавить("Документ.АР_АктПриемаВозвратаАрендуемогоПомещения", "Документ ""Акт приема-возврата арендуемого помещения""");
	СписокОбъектов.Добавить("Справочник.АР_ОбъектыАренды", "Справочник ""Объекты недвижимости""");
	
	Для каждого Элемент Из СписокОбъектов Цикл
		Пометка = ТабТипыОбъектов.Найти(Элемент.Значение, "ТипОбъекта") <> Неопределено;
		Элемент.Пометка = Пометка;
	КонецЦикла;
	
	ТипыОбъектов.Очистить();
	Для каждого Элемент Из СписокОбъектов Цикл
		ТипыОбъектов.Добавить(Элемент.Значение, Элемент.Представление, Элемент.Пометка);
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеТиповОбъектов()
	
	Объект.ТипОбъектаПредставление = "";
	Для каждого Элемент Из ТипыОбъектов Цикл
		Если Элемент.Пометка Тогда
			Объект.ТипОбъектаПредставление = Объект.ТипОбъектаПредставление + ?(ЗначениеЗаполнено(Объект.ТипОбъектаПредставление), "; ", "") + Элемент.Представление;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокРеквизитовИсточника()
	
	Если Объект.ТипыОбъектов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыСДатами = Новый Массив;
	ДобавитьДатуДокумента = Истина;
	
	Для Сч = 1 По Объект.ТипыОбъектов.Количество() Цикл
		
		СтрокаТипОбъекта = Объект.ТипыОбъектов[Сч-1];
		РеквизитыСДатамиДляТипа = Новый Массив;
		
		МассивДанных = СтрРазделить(СтрокаТипОбъекта.ТипОбъекта, ".");
		ВидОбъекта = МассивДанных[0];
		ИмяОбъекта = МассивДанных[1];
		Если ВидОбъекта = "Справочник" Тогда
			МетаданныеИсточника = Метаданные.Справочники[ИмяОбъекта];
			ДобавитьДатуДокумента = Ложь;
		ИначеЕсли ВидОбъекта = "Документ" Тогда
			МетаданныеИсточника = Метаданные.Документы[ИмяОбъекта];
		Иначе
			Возврат;
		КонецЕсли;
		
		МассивИсключаемыхРеквизитов = Новый Массив;
		МассивИсключаемыхРеквизитов.Добавить("ДатаНачалаАссортимента");
		МассивИсключаемыхРеквизитов.Добавить("ДатаОкончанияАссортимента");
		
		// заполняем по умолчанию
		Для Каждого Реквизит Из МетаданныеИсточника.Реквизиты Цикл
			Если МассивИсключаемыхРеквизитов.Найти(Реквизит.Имя) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если РеквизитИсточникаСуществуетИСодержитТипДата(МетаданныеИсточника, Реквизит.Имя) Тогда
				РеквизитыСДатамиДляТипа.Добавить(Реквизит.Имя);
			КонецЕсли;
		КонецЦикла;
		
		Если Сч = 1 Тогда
			РеквизитыСДатами = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(РеквизитыСДатамиДляТипа);
		Иначе
			Счч = 0;
			Пока Счч < РеквизитыСДатами.Количество() Цикл
				Реквизит = РеквизитыСДатами.Получить(Счч);
				Если РеквизитыСДатамиДляТипа.Найти(Реквизит) = Неопределено Тогда
					РеквизитыСДатами.Удалить(Счч);
				Иначе
					Счч = Счч + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ИмяРеквизитаИсточника.СписокВыбора.Очистить();
	
	Если ДобавитьДатуДокумента Тогда
		Элементы.ИмяРеквизитаИсточника.СписокВыбора.Добавить("Дата", "Дата документа");
	КонецЕсли;
	
	Для Каждого ИмяРеквизита Из РеквизитыСДатами Цикл
		Реквизит = МетаданныеИсточника.Реквизиты.Найти(ИмяРеквизита);
		ПредставлениеРеквизита = Реквизит.Представление();
		Если Элементы.ИмяРеквизитаИсточника.СписокВыбора.НайтиПоЗначению(ИмяРеквизита) = Неопределено Тогда
			Элементы.ИмяРеквизитаИсточника.СписокВыбора.Добавить(ИмяРеквизита, ПредставлениеРеквизита);
		КонецЕсли;
	КонецЦикла;
	
	// Добавим доп.реквизиты
	Если Объект.ТипыОбъектов.Количество() = 1 Тогда
		МассивСвойств = УправлениеСвойствами.СвойстваОбъекта(ПредопределенноеЗначение(Объект.ТипыОбъектов[0].ТипОбъекта + ".ПустаяСсылка"));
		Для каждого Свойство Из МассивСвойств Цикл
			Если Свойство.ТипЗначения.СодержитТип(Тип("Дата")) Тогда
				Элементы.ИмяРеквизитаИсточника.СписокВыбора.Добавить(Свойство.Имя, Свойство.Заголовок);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РеквизитИсточникаСуществуетИСодержитТипДата(МетаданныеИсточника, ИмяРеквизита, ПроверятьДату = Ложь)
	Результат = Ложь;
	Если МетаданныеИсточника.Реквизиты.Найти(ИмяРеквизита) <> Неопределено
		И МетаданныеИсточника.Реквизиты[ИмяРеквизита].Тип.СодержитТип(Тип("Дата")) Тогда
		Результат = Истина;
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ЗаполнитьПредставленияИнтервалов()
	
	ПредставлениеНедель = НСтр("ru = ';неделю;;недели;недель;недели'");
	ПредставлениеДней   = НСтр("ru = ';день;;дня;дней;дня'");
	ПредставлениеЧасов  = НСтр("ru = ';час;;часа;часов;часа'");
	ПредставлениеМинут  = НСтр("ru = ';минуту;;минуты;минут;минуты'");

	Для каждого Элемент Из СписокИнтервалов Цикл
		Если Элемент.Значение = "неделя" Тогда
			Элемент.Представление = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ПредставлениеНедель, Объект.КоличествоИнтерваловОповещения);
		ИначеЕсли Элемент.Значение = "день" Тогда
			Элемент.Представление = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ПредставлениеДней, Объект.КоличествоИнтерваловОповещения);
		ИначеЕсли Элемент.Значение = "час" Тогда
			Элемент.Представление = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ПредставлениеЧасов, Объект.КоличествоИнтерваловОповещения);
		ИначеЕсли Элемент.Значение = "минута" Тогда
			Элемент.Представление = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ПредставлениеМинут, Объект.КоличествоИнтерваловОповещения);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокИнтервалов()
	
	СписокИнтервалов.Очистить();
	СписокИнтервалов.Добавить("минута");
	СписокИнтервалов.Добавить("час");
	СписокИнтервалов.Добавить("день");
	СписокИнтервалов.Добавить("неделя");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокИнтерваловВыбора()
	
	Элементы.ИнтервалВремениОтносительноИсточника.СписокВыбора.Очистить();
	Для каждого Элемент Из СписокИнтервалов Цикл
		Элементы.ИнтервалВремениОтносительноИсточника.СписокВыбора.Добавить(Элемент.Представление, Элемент.Представление);
		Если Элемент.Значение = Объект.ИнтервалВремениОповещения Тогда
			ИнтервалВремениСтрокой = Элемент.Представление;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

