
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекстШаблона = Параметры.ШаблонСообщения;
	ТипОбъекта = Параметры.ТипОбъекта;
		
	МассивДанных = СтрРазделить(ТипОбъекта, ".");
	ВидОбъекта = МассивДанных[0];
	ИмяОбъекта = МассивДанных[1];
	Если ВидОбъекта = "Справочник" Тогда
		МетаданныеИсточника = Метаданные.Справочники[ИмяОбъекта];
	ИначеЕсли ВидОбъекта = "Документ" Тогда
		МетаданныеИсточника = Метаданные.Документы[ИмяОбъекта];
	Иначе
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип(ВидОбъекта + "Ссылка." + ИмяОбъекта));
	Элементы.ОбъектПроверки.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	
	СхемаКомпоновки = Новый СхемаКомпоновкиДанных;
	ИсточникДанных = СхемаКомпоновки.ИсточникиДанных.Добавить();
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных = СхемаКомпоновки.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Запрос = 
	"ВЫБРАТЬ
	|	Данные.Ссылка КАК Объект
	|ИЗ
	|	" + ТипОбъекта + " КАК Данные";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	
	КомпоновщикНастроек.Инициализировать(
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновки, ЭтаФорма.УникальныйИдентификатор))
	);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКомпановщикНастройки

&НаКлиенте
Процедура КомпоновщикНастроекВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекстСтроки = Строка(КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка.ПолучитьОбъектПоИдентификатору(ВыбраннаяСтрока).Поле);
	ДобавитьПоле(ТекстСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НЕ ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена Тогда
		ТекстСтроки = Строка(КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка.ПолучитьОбъектПоИдентификатору(Элементы.КомпоновщикНастроек.ТекущаяСтрока).Поле);
		ДобавитьПоле(ТекстСтроки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьПоле(Команда)
	
	ТекстСтроки = Строка(КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка.ПолучитьОбъектПоИдентификатору(Элементы.КомпоновщикНастроек.ТекущаяСтрока).Поле);
	ДобавитьПоле(ТекстСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаШаблона(Команда)
	
	ЧислоВхожденийНач = СтрЧислоВхождений(ТекстШаблона, "[");
	ЧислоВхожденийКон = СтрЧислоВхождений(ТекстШаблона, "]");
	
	Если НЕ ЧислоВхожденийНач = ЧислоВхожденийКон Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка в шаблоне: Количество открывающих скобок отличается от количества закрывающих");
		Возврат;
	КонецЕсли;
	
	ПроверитьШаблонНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	Закрыть(ТекстШаблона);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ДобавитьПоле(Реквизит)
	
	ИмяПоля = СтрЗаменить(Реквизит, "Ссылка.", "");
	ПутьКДанным = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяПоля, ".");
	
	Если НЕ СписокТабЧастей.НайтиПоЗначению(ПутьКДанным[0]) = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Запрещено выбирать табличные части");
		Возврат;
	КонецЕсли;
	
	Элементы.ТекстШаблона.ВыделенныйТекст = "[" + ИмяПоля + "]";
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьШаблонНаСервере()
	
	Данные = Новый Структура;
	Данные.Вставить("Объект", ОбъектПроверки);
	//Данные.Вставить("Сторона", Сторона);
	//Данные.Вставить("Штраф", Штраф);
	//Данные.Вставить("ВалютаШтрафа", ВалютаШтрафа);
	РезультатПроверки = АР_ОбщиеПроцедуры.ПолучитьТекстОповещения(ТекстШаблона, Данные);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПутьКДанным(ПутьКДанным)
	
	ДоступныеПоля = КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора.Элементы;
	ТекущийПуть = "";
	
	Для Каждого Элемент Из ПутьКДанным Цикл
		ИскомыйПуть = ?(ЗначениеЗаполнено(ТекущийПуть), ТекущийПуть + ".", "") + Элемент;
		НайденныйЭлемент = ДоступныеПоля.Найти(ИскомыйПуть);
		Если НЕ НайденныйЭлемент = Неопределено Тогда
			ДоступныеПоля = НайденныйЭлемент.Элементы;
			ТекущийПуть = ИскомыйПуть;
		Иначе
			Возврат Ложь
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти
