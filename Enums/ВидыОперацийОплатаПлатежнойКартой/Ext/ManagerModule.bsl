#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора         = ДопустимыеЗначения(Параметры.Отбор, Параметры.СтрокаПоиска);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Заполняет список значений данных выбора с учетом настроек учета и прав пользователя.
//
// Параметры:
//  Отбор		 - Структура - элемент параметров выбора: отбор, используемый при поиске данных
//  СтрокаПоиска - Строка, Неопределено - элемент параметров выбора: строка, используемая при поиске данных
// 
// Возвращаемое значение:
//  СписокЗначений - содержит ссылки на допустимые значения перечисления
//
Функция ДопустимыеЗначения(Отбор = Неопределено, Знач СтрокаПоиска = Неопределено) Экспорт
	
	ДопустимыеЗначения = Новый СписокЗначений;
	
	// Получим отобранный и упорядоченный перечень значений с представлениями
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыОперацийОплатаПлатежнойКартой.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ВидыОперацийОплатаПлатежнойКартой.Ссылка) КАК Представление,
	|	ВидыОперацийОплатаПлатежнойКартой.Порядок КАК Порядок
	|ИЗ
	|	Перечисление.ВидыОперацийОплатаПлатежнойКартой КАК ВидыОперацийОплатаПлатежнойКартой
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	ТекстыОтбора = Новый Массив;
	
	ТипОтбора = ТипЗнч(Отбор);
	
	// Исключаем ссылки, переданные в отборе
	Если ТипОтбора = Тип("ПеречислениеСсылка.ВидыОперацийОплатаПлатежнойКартой") Тогда
		ТекстыОтбора.Добавить("ВидыОперацийОплатаПлатежнойКартой.Ссылка = &Отбор");
		Запрос.УстановитьПараметр("Отбор", Отбор);
	ИначеЕсли ТипОтбора = Тип("ФиксированныйМассив") Тогда
		ТекстыОтбора.Добавить("ВидыОперацийОплатаПлатежнойКартой.Ссылка В(&Отбор)");
		Запрос.УстановитьПараметр("Отбор", Отбор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстыОтбора) Тогда
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		
		ТекстОтбора = СтрСоединить(ТекстыОтбора, Символы.ПС + " И ");
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить(ТекстОтбора);
		
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		
	КонецЕсли;
	
	// Готовим поиск по наименованию
	ОтборПоПредставлению = (ТипЗнч(СтрокаПоиска) = Тип("Строка") И Не ПустаяСтрока(СтрокаПоиска));
	Если ОтборПоПредставлению Тогда
		СтрокаПоиска = НРег(СтрокаПоиска); // поиск регистронезависимый
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ОтборПоПредставлению
			И СтрНайти(НРег(Выборка.Представление), СтрокаПоиска) <> 1 Тогда
			Продолжить;
		КонецЕсли;
		
		// Исключаем неподходящие к контексту
		Если Выборка.Ссылка = Перечисления.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка
			И Не РозничнаяВыручкаДоступна(Отбор) Тогда
			Продолжить;
		КонецЕсли;
		
		// Остальные - допустимые
		ДопустимыеЗначения.Добавить(Выборка.Ссылка, Выборка.Представление);
		
	КонецЦикла;
	
	Возврат ДопустимыеЗначения;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РозничнаяВыручкаДоступна(Отбор)
	
	Организация = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Отбор, "Организация");
	Дата = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Отбор, "Дата");
	
	Если Организация = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	РозницаДоступна    = ОплатаПлатежнойКартойВызовСервера.РозничнаяВыручкаДоступна();
	РозницаВключена    = ПолучитьФункциональнуюОпцию("ВедетсяРозничнаяТорговля");
	УчетБезЗакрывающих = УчетКассовымМетодом.УчетБезЗакрывающихДокументовВозможен(Организация, Дата);
	
	Возврат РозницаДоступна И (РозницаВключена Или УчетБезЗакрывающих);
	
КонецФункции

#КонецОбласти

#КонецЕсли