#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

#Область СоставОтчетов

// Возвращает структуру параметров для функции СоставОтчетностиПоСубъекту().
//
// Возвращаемое значение:
//	Структура
//
Функция НовыеПараметрыСоставОтчетности() Экспорт

	Результат = Новый Структура();
	Результат.Вставить("Дата",         '0001-01-01');
	Результат.Вставить("ДатаСоздания", '0001-01-01');
	Результат.Вставить("Организация",  Справочники.Организации.ПустаяСсылка());
	Результат.Вставить("Банк",         Справочники.БанкиУниверсальногоОбмена.ПустаяСсылка());
	Результат.Вставить("Субъект"); // Организация или Контрагент из табличной части ЭкономическиеСубъекты.
	Результат.Вставить("ВключатьОбособленныеПодразделения", Ложь);
	Результат.Вставить("КлючСтрокиСубъекта", 0);
	Результат.Вставить("КлючСтрокиОтчета",   0); // Ключ строки отчета, начиная с которого генерировать ключи для строк.
	Результат.Вставить("НастройкиКомплекта"); // Структура, см. ЗаполнениеФинОтчетностиВБанки.НастройкиКомплектаОтчетности().
	
	Возврат Результат;

КонецФункции

// Составляет по требованию банка список отчетов, которые применимы для переданного субъекта
// с учетом настроек его учетной политики и системы налогообложения.
//
// Экономическим субъектом может выступать либо организация, учет по которой ведется в текущей базе данных,
// либо контрагент - лицо, входящее в группу компаний, отчетность по которому требуется банку,
// но учетных данных по нему в текущей базе нет,
// поэтому пользователи должны будут приложить отчеты для банка в виде присоединенных файлов.
//
// Параметры:
//	ПараметрыЗаполнения - Структура - см. НовыеПараметрыСоставОтчетности().
//
// Возвращаемое значение:
//	Структура - см. СоставОтчетности
//
Функция СоставОтчетностиПоСубъекту(ПараметрыЗаполнения) Экспорт

	// Создадим заготовки пустых таблиц значений, совпадающих по структуре с табличными частями документа.
	ВременныйДокумент = Документы.ФинОтчетВБанк.СоздатьДокумент();

	СоставОтчетности = Новый Структура();
	СоставОтчетности.Вставить("Отчетность",               ВременныйДокумент.Отчетность.ВыгрузитьКолонки());
	СоставОтчетности.Вставить("ПараметрыОтчетов",         ВременныйДокумент.ПараметрыОтчетов.ВыгрузитьКолонки());
	
	// Дополнительные поля из настроек, которые используются при формировании списка требуемых отчетов.
	СоставОтчетности.Отчетность.Колонки.Добавить("ИдентификаторНастройкиОтчета", ОбщегоНазначения.ОписаниеТипаСтрока(0));

	// Дополним служебными данными, которые используются в процессе заполнения.
	ПараметрыЗаполнения.Вставить("ОписаниеВидовОтчетов", ЗаполнениеФинОтчетностиВБанки.ОписаниеВидовОтчетов());
	ПараметрыЗаполнения.Вставить("ЭтоОрганизация",       Ложь);
	ПараметрыЗаполнения.Вставить("ЭтоЮрЛицо",            Истина);// По умолчанию считаем всех юрлицами.
	ПараметрыЗаполнения.Вставить("ДатаРегистрации",      '0001-01-01');
	ПараметрыЗаполнения.Вставить("ВсяОрганизация",       Неопределено); // Массив всех обособленных подразделений организации, выделенных на отдельный баланс.
	
	// Закэшируем сведения об организации.
	ПараметрыЗаполнения.ЭтоОрганизация = ТипЗнч(ПараметрыЗаполнения.Субъект) = Тип("СправочникСсылка.Организации");
			
	Если ПараметрыЗаполнения.ЭтоОрганизация Тогда
		Если ПараметрыЗаполнения.ВключатьОбособленныеПодразделения Тогда
			// Учитываем все обособленные подразделения организации.
			ПараметрыЗаполнения.ВсяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(ПараметрыЗаполнения.Субъект);
		Иначе
			// Учитываем только саму текущую организацию.
			ПараметрыЗаполнения.ВсяОрганизация = Новый Массив;
			ПараметрыЗаполнения.ВсяОрганизация.Добавить(ПараметрыЗаполнения.Субъект);
		КонецЕсли;
	КонецЕсли;
	
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить("ЮридическоеФизическоеЛицо");
	Если ПараметрыЗаполнения.ЭтоОрганизация Тогда
		МассивРеквизитов.Добавить("ДатаРегистрации");
	КонецЕсли;

	РеквизитыСубъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыЗаполнения.Субъект, МассивРеквизитов);
	ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, РеквизитыСубъекта);
	ПараметрыЗаполнения.ЭтоЮрЛицо = 
		РеквизитыСубъекта.ЮридическоеФизическоеЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	
	Для каждого СтрокаНастройкиКомплекта Из ПараметрыЗаполнения.НастройкиКомплекта.Отчеты Цикл
		ДобавитьОтчетыПоНастройке(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности);
	КонецЦикла;
	
	// Исключим дубли отчетов, которые могли получиться из-за того, что периоды отчетов из разных строк пришлись на одни и те же даты.
	ИсключитьПовторяющиесяОтчеты(ПараметрыЗаполнения, СоставОтчетности);
	
	Возврат СоставОтчетности;

КонецФункции

// Формирует наименование строки отчетности.
//
// Параметры:
//  Отчет        - ДанныеФормыЭлементКоллекции, СтрокаТабличнойЧасти - свойства отчетности.
//  ОписаниеПредставленийОтчетов - Структура - источники представлений для строк отчетности.
//    * ОписаниеВидовОтчетов - ТаблицаЗначений - см. ЗаполнениеФинОтчетностиВБанки.ОписаниеВидовОтчетов()
//    * НастройкиКомплекта - Структура - см. ЗаполнениеФинОтчетностиВБанки.НастройкиКомплектаОтчетности()
//
// Возвращаемое значение:
//   Строка      - представление отчета.
//
Функция ПредставлениеСтрокиОтчетности(Отчет, ОписаниеПредставленийОтчетов = Неопределено) Экспорт
	
	Если ОписаниеПредставленийОтчетов = Неопределено Тогда
		// Представление произвольных файлов будет задано по-умолчанию.
		ОписаниеПредставленийОтчетов = Новый Структура;
		ОписаниеПредставленийОтчетов.Вставить("ОписаниеВидовОтчетов", ЗаполнениеФинОтчетностиВБанки.ОписаниеВидовОтчетов());
		ОписаниеПредставленийОтчетов.Вставить("НастройкиКомплекта");
	КонецЕсли;
	
	УровниПредставления = Новый Массив;
	
	// Описание отчета берем то, которое задано в требования банка.
	Если ОписаниеПредставленийОтчетов.НастройкиКомплекта <> Неопределено
		И ЗначениеЗаполнено(Отчет.ИдентификаторСтрокиКомплекта)
		И ЗаполнениеФинОтчетностиВБанкиКлиентСервер.ЭтоВнешнийФайл(Отчет.ВидОтчета) Тогда
	   
		ОписаниеИзНастройки = НайтиСтрокуКомплекта(Отчет.ИдентификаторСтрокиКомплекта,
			ОписаниеПредставленийОтчетов.НастройкиКомплекта);
		
		Если ОписаниеИзНастройки <> Неопределено
		   И Не ПустаяСтрока(ОписаниеИзНастройки.КраткоеПредставление) Тогда
			УровниПредставления.Добавить(ОписаниеИзНастройки.КраткоеПредставление);
		КонецЕсли;
		   
	КонецЕсли;
	
	// Если в требования банка отчет никак особо не поименован, то формируем стандартное представление по виду отчета.
	ОписаниеОтчета = ОписаниеПредставленийОтчетов.ОписаниеВидовОтчетов.Найти(Отчет.ВидОтчета, "ВидОтчета");
	
	Если УровниПредставления.Количество() = 0 Тогда
		Если ОписаниеОтчета = Неопределено Тогда
			УровниПредставления.Добавить(Отчет.ВидОтчета);
		Иначе
			УровниПредставления.Добавить(ОписаниеОтчета.ПредставлениеОтчета);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Отчет.УточнениеНаименования) Тогда
		УровниПредставления.Добавить(Отчет.УточнениеНаименования);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отчет.ДатаНачала) И ЗначениеЗаполнено(Отчет.ДатаОкончания) Тогда
		Если ОписаниеОтчета <> Неопределено И ОписаниеОтчета.ОтчетНаДату Тогда
			УровниПредставления.Добавить(СтрШаблон(НСтр("ru = 'на %1'"),
				Формат(Отчет.ДатаОкончания, "ДФ=dd.MM.yyyy")));
		Иначе
			УровниПредставления.Добавить(СтрШаблон(НСтр("ru = 'за %1'"),
				ПредставлениеПериода(Отчет.ДатаНачала, КонецДня(Отчет.ДатаОкончания), "ФП=Истина")));
		КонецЕсли;
	КонецЕсли;

	Возврат СтрСоединить(УровниПредставления, " ");
	
КонецФункции

#КонецОбласти

#Область Автозаполнение

// Заполняет отчеты, которые формируются по данным информационной базы, 
// и создает по ним присоединяемые файлы.
// Предназначена для вызова внутри фонового задания.
//
// Параметры:
//	Параметры - Структура - Содержит ключи:
//		* ТекущаяСсылка - ДокументСсылка.ФинОтчетВБанк - пакет отчетности.
//		* КлючСтрокиСубъекта - Число - Ключ строки субъекта, по которому заполнить отчеты, 0 - по всем субъекта.
//		* КлючСтрокиОтчета - Число - Ключ строки отчета, который надо заполнить, 0 - все отчеты.
//
//	АдресХранилища - Строка - Адрес временного хранилища для результата.
//
Процедура ЗаполнитьОтчетыВФоне(Параметры, АдресХранилища) Экспорт
	
	// Возвращаемое значение
	РезультатЗаполнения = РезультатЗагрузки(Ложь);
	
	// Выберем отчеты для заполнения: отчеты из 1С-Отчетности подбираем, стандартные отчеты - заполняем по данным базы.
	НомераТаблиц = Новый Структура();
	НомераТаблиц.Вставить("Шапка",            НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_Отчетность",    НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Отчетность",       НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ПараметрыОтчетов", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЭлектронныеПодписиФайлов", НомераТаблиц.Количество());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяСсылка",      Параметры.ТекущаяСсылка);
	Запрос.УстановитьПараметр("КлючСтрокиСубъекта", Параметры.КлючСтрокиСубъекта);
	Запрос.УстановитьПараметр("КлючиСтрокОтчетов",  Параметры.КлючиСтрокОтчетов);

	// Отфильтруем только те отчеты, которые в принципе могут быть заполнены автоматически или подобраны по данным учета.
	АвтозаполняемыеВидыОтчетов = Новый Массив;
	ОписаниеВидовОтчетов = ЗаполнениеФинОтчетностиВБанки.ОписаниеВидовОтчетов();
	Для каждого СтрокаВидаОтчета Из ОписаниеВидовОтчетов Цикл
		Если ЗаполнениеФинОтчетностиВБанкиКлиентСервер.ЭтоСтандартныйОтчет(СтрокаВидаОтчета.ВидОтчета)
			ИЛИ ЗаполнениеФинОтчетностиВБанкиКлиентСервер.ЭтоОтчетБРО(СтрокаВидаОтчета.ВидОтчета) Тогда
			АвтозаполняемыеВидыОтчетов.Добавить(СтрокаВидаОтчета.ВидОтчета);
		КонецЕсли;
	КонецЦикла;
	Запрос.УстановитьПараметр("АвтозаполняемыеВидыОтчетов", АвтозаполняемыеВидыОтчетов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФинОтчетВБанк.Банк КАК Банк,
	|	ФинОтчетВБанк.ИдентификаторКомплекта КАК ИдентификаторКомплекта
	|ИЗ
	|	Документ.ФинОтчетВБанк КАК ФинОтчетВБанк
	|ГДЕ
	|	ФинОтчетВБанк.Ссылка = &ТекущаяСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧСубъекты.НомерСтроки КАК НомерСтрокиСубъекта,
	|	ТЧСубъекты.КлючСтрокиСубъекта КАК КлючСтрокиСубъекта,
	|	ТЧСубъекты.Субъект КАК Субъект,
	|	ТЧСубъекты.ВключатьОбособленныеПодразделения КАК ВключатьОбособленныеПодразделения,
	|	ТЧСубъекты.Субъект.Наименование КАК СубъектНаименование,
	|	ТЧСубъекты.Субъект.ИНН КАК ИНН,
	|	ТЧСубъекты.Субъект.КПП КАК КПП,
	|	ТЧОтчетность.НомерСтроки КАК НомерСтрокиОтчета,
	|	ТЧОтчетность.КлючСтрокиОтчета КАК КлючСтрокиОтчета,
	|	ТЧОтчетность.ВидОтчета КАК ВидОтчета,
	|	ТЧОтчетность.ИдентификаторСтрокиКомплекта КАК ИдентификаторСтрокиКомплекта,
	|	ТЧОтчетность.ОтчетСсылка КАК ОтчетСсылка,
	|	ТЧОтчетность.ФайлОтчета КАК ФайлОтчета,
	|	ВЫБОР
	|		КОГДА НЕ ФинОтчетВБанкПрисоединенныеФайлы.Ссылка ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоСобственныйФайл,
	|	ТЧОтчетность.УточнениеНаименования КАК УточнениеНаименования,
	|	ТЧОтчетность.ДатаНачала КАК ДатаНачала,
	|	ТЧОтчетность.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТ_Отчетность
	|ИЗ
	|	Документ.ФинОтчетВБанк.ЭкономическиеСубъекты КАК ТЧСубъекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ФинОтчетВБанк.Отчетность КАК ТЧОтчетность
	|		ПО ТЧСубъекты.КлючСтрокиСубъекта = ТЧОтчетность.КлючСтрокиСубъекта
	|			И (ТЧСубъекты.Ссылка = &ТекущаяСсылка)
	|			И (ТЧОтчетность.Ссылка = &ТекущаяСсылка)
	|			И (ТИПЗНАЧЕНИЯ(ТЧСубъекты.Субъект) = ТИП(Справочник.Организации))
	|			И (ТЧОтчетность.ВидОтчета В (&АвтозаполняемыеВидыОтчетов))
	|			И (&УсловиеПоСубъекту)
	|			И (&УсловиеПоОтчетам)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФинОтчетВБанкПрисоединенныеФайлы КАК ФинОтчетВБанкПрисоединенныеФайлы
	|		ПО (ТЧОтчетность.ФайлОтчета = ФинОтчетВБанкПрисоединенныеФайлы.Ссылка)
	|			И (ФинОтчетВБанкПрисоединенныеФайлы.ВладелецФайла = &ТекущаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючСтрокиОтчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Отчетность.НомерСтрокиСубъекта КАК НомерСтрокиСубъекта,
	|	ВТ_Отчетность.КлючСтрокиСубъекта КАК КлючСтрокиСубъекта,
	|	ВТ_Отчетность.Субъект КАК Субъект,
	|	ВТ_Отчетность.СубъектНаименование КАК СубъектНаименование,
	|	ВТ_Отчетность.ИНН КАК ИНН,
	|	ВТ_Отчетность.КПП КАК КПП,
	|	ВТ_Отчетность.ВключатьОбособленныеПодразделения КАК ВключатьОбособленныеПодразделения,
	|	ВТ_Отчетность.НомерСтрокиОтчета КАК НомерСтрокиОтчета,
	|	ВТ_Отчетность.КлючСтрокиОтчета КАК КлючСтрокиОтчета,
	|	ВТ_Отчетность.ВидОтчета КАК ВидОтчета,
	|	ВТ_Отчетность.ИдентификаторСтрокиКомплекта КАК ИдентификаторСтрокиКомплекта,
	|	ВТ_Отчетность.ОтчетСсылка КАК ОтчетСсылка,
	|	ВТ_Отчетность.ФайлОтчета КАК ФайлОтчета,
	|	ВТ_Отчетность.ЭтоСобственныйФайл КАК ЭтоСобственныйФайл,
	|	ВТ_Отчетность.УточнениеНаименования КАК УточнениеНаименования,
	|	ВТ_Отчетность.ДатаНачала КАК ДатаНачала,
	|	ВТ_Отчетность.ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	ВТ_Отчетность КАК ВТ_Отчетность
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Отчетность.НомерСтрокиСубъекта,
	|	ВТ_Отчетность.НомерСтрокиОтчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧПараметрыОтчетов.КлючСтрокиОтчета КАК КлючСтрокиОтчета,
	|	ТЧПараметрыОтчетов.Имя КАК Имя,
	|	ТЧПараметрыОтчетов.Значение КАК Значение
	|ИЗ
	|	ВТ_Отчетность КАК ВТ_Отчетность
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ФинОтчетВБанк.ПараметрыОтчетов КАК ТЧПараметрыОтчетов
	|		ПО ВТ_Отчетность.КлючСтрокиОтчета = ТЧПараметрыОтчетов.КлючСтрокиОтчета
	|			И (ТЧПараметрыОтчетов.Ссылка = &ТекущаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Отчетность.КлючСтрокиОтчета КАК КлючСтрокиОтчета,
	|	ВТ_Отчетность.ФайлОтчета КАК ФайлОтчета,
	|	ЭлектронныеПодписиФайлов.ПорядковыйНомер КАК ПорядковыйНомер
	|ИЗ
	|	ВТ_Отчетность КАК ВТ_Отчетность
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписиФайлов
	|		ПО ВТ_Отчетность.ФайлОтчета = ЭлектронныеПодписиФайлов.ПодписанныйОбъект
	|			И (ВТ_Отчетность.ЭтоСобственныйФайл)
	|ИТОГИ
	|	МАКСИМУМ(КлючСтрокиОтчета)
	|ПО
	|	ФайлОтчета";
	
	// Установим отборы по субъекту и отчету, если они переданы.
	Если ЗначениеЗаполнено(Параметры.КлючСтрокиСубъекта) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСубъекту", "ТЧСубъекты.КлючСтрокиСубъекта = &КлючСтрокиСубъекта");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСубъекту", "ИСТИНА");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.КлючиСтрокОтчетов) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоОтчетам", "ТЧОтчетность.КлючСтрокиОтчета В (&КлючиСтрокОтчетов)");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоОтчетам", "ИСТИНА");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	// Подготовим параметры заполнения.
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("ТекущаяСсылка", Параметры.ТекущаяСсылка);
	ПараметрыЗаполнения.Вставить("Банк");
	ПараметрыЗаполнения.Вставить("ИдентификаторКомплекта");
	
	ВыборкаШапка = РезультатыЗапроса[НомераТаблиц.Шапка].Выбрать();
	Если ВыборкаШапка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, ВыборкаШапка);
	КонецЕсли;
	
	// Ссылочные параметров отчетов из текущей базы.
	ПараметрыЗаполнения.Вставить("ПараметрыОтчетов");
	ПараметрыЗаполнения.ПараметрыОтчетов = РезультатыЗапроса[НомераТаблиц.ПараметрыОтчетов].Выгрузить();
	ПараметрыЗаполнения.ПараметрыОтчетов.Индексы.Добавить("КлючСтрокиОтчета");
	ПараметрыЗаполнения.ПараметрыОтчетов.Индексы.Добавить("КлючСтрокиОтчета, Имя");
	
	ПараметрыЗаполнения.Вставить("ОписаниеВидовОтчетов", ОписаниеВидовОтчетов);
	
	ПараметрыЗаполнения.Вставить("НастройкиКомплекта");
	ПараметрыЗаполнения.НастройкиКомплекта = ЗаполнениеФинОтчетностиВБанки.НастройкиКомплектаОтчетности(
		ПараметрыЗаполнения.Банк, ПараметрыЗаполнения.ИдентификаторКомплекта);
	
	// Для поиска существующих в базе рег.отчетов.
	ПараметрыЗаполнения.Вставить("ПараметрыПоискаРеглОтчетов", ЗаполнениеФинОтчетностиВБанки.НовыеПараметрыПоискаРеглОтчетов());
	// Чтобы можно было сопоставить найденные ссылки на рег.отчеты с табличной частью Отчетность документа.
	ПараметрыЗаполнения.ПараметрыПоискаРеглОтчетов.Колонки.Добавить("КлючСтрокиОтчета",
		РезультатЗаполнения.Отчетность.Колонки.КлючСтрокиОтчета.ТипЗначения);
	ПараметрыЗаполнения.ПараметрыПоискаРеглОтчетов.Колонки.Добавить("КлючСтрокиСубъекта",
		РезультатЗаполнения.Отчетность.Колонки.КлючСтрокиСубъекта.ТипЗначения);
	
	// Ключ - строковый код счета, Значение - структура, см. БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета()
	ПараметрыЗаполнения.Вставить("СвойстваСчетов", Новый Соответствие()); 
	
	// В случае перезаполнения уже подписанных ранее отчетов необходимо сначала удалить у них старые подписи.
	ВыборкаПодписейПоФайлам = РезультатыЗапроса[НомераТаблиц.ЭлектронныеПодписиФайлов].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	УдалитьПодписиФайлов(ВыборкаПодписейПоФайлам, РезультатЗаполнения);
	
	// Заполняем отчеты по данным учета.
	ВыборкаОтчетность   = РезультатыЗапроса[НомераТаблиц.Отчетность].Выбрать();
	
	Прогрессор = НовыйПрогрессор();
	РассчитатьШагПрогрессора(Прогрессор, ВыборкаОтчетность.Количество());
	
	Пока ВыборкаОтчетность.Следующий() Цикл
		// Передаем форме информацию о том, какой отчет сейчас заполняем.
		ПредставлениеОтчета = СтрШаблон(НСтр("ru = 'Заполнение %1 по %2'"),
			ПредставлениеСтрокиОтчетности(ВыборкаОтчетность, ПараметрыЗаполнения),
			ВыборкаОтчетность.СубъектНаименование);
		СообщитьПрогресс(Прогрессор, ПредставлениеОтчета);
		
		ЗаполнитьОтчет(ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения);
	КонецЦикла;
	
	// Подберем ссылки на регламентированные отчеты.
	ПодобратьРегламентированныеОтчеты(ПараметрыЗаполнения, РезультатЗаполнения);

	ПоместитьВоВременноеХранилище(РезультатЗаполнения, АдресХранилища);
	
КонецПроцедуры

// Копирует параметры отчета из табличной части в структуру, передаваемую в процедуру формирования отчета.
//
// Параметры:
//	ПараметрыОтчетов - ТаблицаЗначений, ТабличнаяЧасть - табличная часть ПараметрыОтчетов.
//	ПараметрыОтчета - Структура - Структура параметров, которая передается в процедуру формирования отчета.
//	КлючСтрокиОтчета - Число - Ключ строки отчета.
//
Процедура ЗаполнитьПараметрыПоКлючу(ПараметрыОтчетов, ПараметрыОтчета, КлючСтрокиОтчета) Экспорт
	
	Отбор = Новый Структура("КлючСтрокиОтчета", КлючСтрокиОтчета);
	Настройки = ПараметрыОтчетов.НайтиСтроки(Отбор);
	Для Каждого ЭлементНастройки Из Настройки Цикл
		Если ПараметрыОтчета.Свойство(ЭлементНастройки.Имя) Тогда
			ПараметрыОтчета[ЭлементНастройки.Имя] = ЭлементНастройки.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Подписание

// Возвращает структуру для использования в процедурах подписания и отправки.
// 
// Параметры:
//	Объект - ДокументОбъект, ДанныеФормыКоллекция - документ ФинОтчетВБанк.
//	КлючСтрокиСубъекта - Число - Ключ строки субъекта, отчетность которого необходимо подписать.
//								 Если 0, то по всем.
//	НастройкиКомплекта - Структура - См. ЗаполнениеФинОтчетностиВБанки.НастройкиКомплектаОтчетности().
//
// Возвращаемое значение:
//	Структура
//
Функция ПараметрыПодписания(Объект, КлючСтрокиСубъекта, НастройкиКомплекта) Экспорт
	
	ПараметрыПодписания = Новый Структура;
	ПараметрыПодписания.Вставить("Сейчас",                  ТекущаяДатаСеанса()); // Чтобы одинаковые дату и время использовать во всех процедурах.
	ПараметрыПодписания.Вставить("ДействиеПослеПодписания", ""); // "Отправить" или пусто
	ПараметрыПодписания.Вставить("ОтпечатокСертификата",    "");
	ПараметрыПодписания.Вставить("Сертификат");
	
	ПараметрыПодписания.Вставить("Идентификатор",      Строка(Объект.Ссылка.УникальныйИдентификатор()));
	ПараметрыПодписания.Вставить("Сервис",             Перечисления.СервисыОбменаСБанками.ФинансоваяОтчетность);
	ПараметрыПодписания.Вставить("Предмет",            Объект.Ссылка);
	ПараметрыПодписания.Вставить("Организация",        Объект.Организация);
	ПараметрыПодписания.Вставить("Банк",               Объект.Банк);
	ПараметрыПодписания.Вставить("Дата",               Объект.Дата);
	ПараметрыПодписания.Вставить("ДатаСоздания",       Объект.ДатаСоздания);
	
	// Указываем ограничение, если подписание идет по конкретному субъекту или отчету, а не всем организациям одновременно.
	ПараметрыПодписания.Вставить("КлючСтрокиСубъекта", КлючСтрокиСубъекта);
	ПараметрыПодписания.Вставить("ОтборПоКлючамСтрок", Новый Массив);
	
	// В каком виде сохранять отчеты.
	ПараметрыПодписания.Вставить("ФорматыСохранения", ФорматыСохраненияОтчетов(НастройкиКомплекта));

	// Какие из строк должен подписывать отправитель, а какие - другие юр.лица из группы компаний заемщика.
	ПараметрыПодписания.Вставить("ПорядкиПодписания", ПорядкиПодписанияОтчетов(НастройкиКомплекта));

	ПараметрыПодписания.Вставить("ИдентификаторКомплекта", Объект.ИдентификаторКомплекта);
	ПараметрыПодписания.Вставить("КраткоеПредставление", 
		?(НастройкиКомплекта <> Неопределено, НастройкиКомплекта.КраткоеПредставление, ""));
	
	// Получим сразу сведения об основной организации, банке и пакете отчетности,
	// которые используются в разных процедурах подписания и отправки.
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация, "ИНН, КПП, Наименование");
	ПараметрыПодписания.Вставить("РеквизитыОрганизации", РеквизитыОрганизации);
	
	РеквизитыБанка = УниверсальныйОбменСБанками.РеквизитыБанка(Объект.Банк, "ИНН, Наименование");
	ПараметрыПодписания.Вставить("РеквизитыБанка", РеквизитыБанка);
		
	Возврат ПараметрыПодписания;
	
КонецФункции

// Формирует результат в формате для передачи в форму навигации по ошибкам.
//
// Параметры:
//  ПараметрыПроверки - Структура - см. ПараметрыПодписания(). 
//  ТолькоПроверка - Булево - Ложь = помещать файлы в регистр криптоопераций; Истина = только проверять.
//	Прогрессор - Структура - см. НовыйПрогрессор().
//
// Возвращаемое значение:
//   Структура   - см. РезультатВыгрузки()
//
Функция ГотовностьКОтправке(ПараметрыПроверки, ТолькоПроверка, Прогрессор) Экспорт

	МетаданныеТабличныхЧастей = Метаданные.Документы.ФинОтчетВБанк.ТабличныеЧасти;
	РеквизитыОтчетность = МетаданныеТабличныхЧастей.Отчетность.Реквизиты;
	
	РезультатПроверки = РезультатВыгрузки();
	ОтчетностьПоКлючамСтрокКолонки = РезультатПроверки.ОтчетностьПоКлючамСтрок.Колонки;
	ОтчетностьПоКлючамСтрокКолонки.Добавить("КлючСтрокиСубъекта", РеквизитыОтчетность.КлючСтрокиСубъекта.Тип);
	ОтчетностьПоКлючамСтрокКолонки.Добавить("Субъект");
	ОтчетностьПоКлючамСтрокКолонки.Добавить("ВариантВыгрузки", ОбщегоНазначения.ОписаниеТипаСтрока(25));
	ОтчетностьПоКлючамСтрокКолонки.Добавить("НужноПодписать", Новый ОписаниеТипов("Булево"));
	ОтчетностьПоКлючамСтрокКолонки.Добавить("Описание",       Новый ОписаниеТипов("Строка"));
	ОтчетностьПоКлючамСтрокКолонки.Добавить("ДатаНачала",     РеквизитыОтчетность.ДатаНачала.Тип);
	ОтчетностьПоКлючамСтрокКолонки.Добавить("ДатаОкончания",  РеквизитыОтчетность.ДатаОкончания.Тип);
	ОтчетностьПоКлючамСтрокКолонки.Добавить("Размер",
		ОбщегоНазначения.ОписаниеТипаЧисло(10, 0, ДопустимыйЗнак.Неотрицательный));

	ОсновнойПорядокПодписания = ПараметрыПроверки.ПорядкиПодписания["ЗначениеПоУмолчанию"];
	Если ОсновнойПорядокПодписания = Неопределено Тогда
		
		ДобавитьРезультатПоОтчету(РезультатПроверки, Строка(ПараметрыПроверки.Предмет), ,
			НСтр("ru = 'Не задан основной порядок подписания комплекта'"));
		Возврат РезультатПроверки;
			
	КонецЕсли;
	
	РезультатПроверки.Каталог = ФайловаяСистема.СоздатьВременныйКаталог();
	// В процессе обработки данные могут быть подготовлены в виде двоичных данных, файла во временном каталоге
	// или пути к каталогу (для архива). Добавляем поля для указания на место хранения.
	РезультатПроверки.Вставить("ПодготовленныеДанныеОтчета");
	РезультатПроверки.Вставить("ПодготовленныеДанныеПодписи");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФинОтчет", ПараметрыПроверки.Предмет);
	Запрос.УстановитьПараметр("НезаполненныйФайлОтчета",
		ОбщегоНазначенияБП.МассивПустыхЗначенийРеквизита(РеквизитыОтчетность.ФайлОтчета));
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФинОтчетВБанкОтчетность.КлючСтрокиСубъекта КАК КлючСтрокиСубъекта,
	|	ФинОтчетВБанкЭкономическиеСубъекты.Субъект КАК Субъект,
	|	ФинОтчетВБанкОтчетность.КлючСтрокиОтчета КАК КлючСтрокиОтчета,
	|	ФинОтчетВБанкОтчетность.ДанныеОтсутствуют КАК ДанныеОтсутствуют,
	|	ФинОтчетВБанкОтчетность.ИдентификаторСтрокиКомплекта КАК ИдентификаторСтрокиКомплекта,
	|	ФинОтчетВБанкОтчетность.ОтчетСсылка КАК ОтчетСсылка,
	|	ФинОтчетВБанкОтчетность.ФайлОтчета КАК ФайлОтчета,
	|	ФинОтчетВБанкОтчетность.ФайлОтчетаСодержитЭП КАК ФайлОтчетаСодержитЭП,
	|	ФинОтчетВБанкОтчетность.ОтчетСсылка.ВерсияДанных КАК ВерсияДанныхСсылка,
	|	ФинОтчетВБанкОтчетность.ВерсияДанныхОтчета КАК ВерсияДанныхОтчетность,
	|	ФинОтчетВБанкОтчетность.ВидОтчета КАК ВидОтчета,
	|	ФинОтчетВБанкОтчетность.УточнениеНаименования КАК УточнениеНаименования,
	|	ФинОтчетВБанкОтчетность.ДатаНачала КАК ДатаНачала,
	|	ФинОтчетВБанкОтчетность.ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	Документ.ФинОтчетВБанк.Отчетность КАК ФинОтчетВБанкОтчетность
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ФинОтчетВБанк.ЭкономическиеСубъекты КАК ФинОтчетВБанкЭкономическиеСубъекты
	|		ПО ФинОтчетВБанкОтчетность.Ссылка = ФинОтчетВБанкЭкономическиеСубъекты.Ссылка
	|			И ФинОтчетВБанкОтчетность.КлючСтрокиСубъекта = ФинОтчетВБанкЭкономическиеСубъекты.КлючСтрокиСубъекта
	|ГДЕ
	|	ФинОтчетВБанкОтчетность.Ссылка = &ФинОтчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючСтрокиСубъекта,
	|	ФинОтчетВБанкОтчетность.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФинОтчетВБанкОтчетность.ФайлОтчета КАК ФайлОтчета
	|ИЗ
	|	Документ.ФинОтчетВБанк.Отчетность КАК ФинОтчетВБанкОтчетность
	|ГДЕ
	|	ФинОтчетВБанкОтчетность.Ссылка = &ФинОтчет
	|	И НЕ ФинОтчетВБанкОтчетность.ФайлОтчета В (&НезаполненныйФайлОтчета)";
	
	Результаты = Запрос.ВыполнитьПакет();
	
	РеквизитыПрисоединенныхФайлов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		Результаты[1].Выгрузить().ВыгрузитьКолонку("ФайлОтчета"),
		"Наименование,ПодписанЭП,Расширение");
		
	ПустыеРеквизитыФайла = Новый ФиксированнаяСтруктура("Наименование, ПодписанЭП, Расширение",
				НСтр("ru = '<файл не найден>'"), Ложь, "");
				
	ПараметрыПроверки.Вставить("ДолженБытьУжеПодписан",     Ложь);
	ПараметрыПроверки.Вставить("ТолькоПроверка",            ТолькоПроверка);
	ПараметрыПроверки.Вставить("ОсновнойПорядокПодписания", ОсновнойПорядокПодписания);
	ПараметрыПроверки.Вставить("РеквизитыФайла",            ПустыеРеквизитыФайла);
	ПараметрыПроверки.Вставить("КешСхемВыгрузкиБО",         Новый Структура);
	
	Если Не ТолькоПроверка Тогда
		// Будем поочередно помещать в журнал для подписания в рамках одной транзакции.
		ПараметрыПомещения = УниверсальныйОбменСБанками.ПараметрыПомещенияВЖурналОперацийСФайлами();
		ПараметрыПомещения.Сервис         = ПараметрыПроверки.Сервис;
		ПараметрыПомещения.ТипДокумента   = Перечисления.ТипыДокументовОбменаСБанкамиФинОтчетность.Отчетность;
		ПараметрыПомещения.Организация    = ПараметрыПроверки.Организация;
		ПараметрыПомещения.БанкиПолучатели.Добавить(ПараметрыПроверки.Банк);
		ПараметрыПомещения.Предмет        = ПараметрыПроверки.Предмет;
		
		// Если есть строки, которые только сейчас выгружаются в архив, то нужно будет сначала подписать каждый из файлов
		// внутри архива, затем объединить файлы и подписи в один архив. Лишь после этого в рамках общей транзакции все
		// отправить в банк. То же самое для неподписанных присоединенных файлов.
		НужноПредварительноеПодписание = Ложь;
		ИдентификаторПодписанияАрхивов = Строка(Новый УникальныйИдентификатор);
		
	КонецЕсли;

	// Кеширование источников представлений для строк отчетности.
	ОписаниеПредставленийОтчетов = Новый Структура;
	ОписаниеПредставленийОтчетов.Вставить("ОписаниеВидовОтчетов", ЗаполнениеФинОтчетностиВБанки.ОписаниеВидовОтчетов());
	ИдентификаторКомплекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыПроверки.Предмет, "ИдентификаторКомплекта");
	НастройкиКомплекта = ЗаполнениеФинОтчетностиВБанки.НастройкиКомплектаОтчетности(ПараметрыПроверки.Банк, ИдентификаторКомплекта);
	ОписаниеПредставленийОтчетов.Вставить("НастройкиКомплекта", НастройкиКомплекта);

	ДанныеДляПроверки = Результаты[0].Выбрать();
	
	РассчитатьШагПрогрессора(Прогрессор, ДанныеДляПроверки.Количество());
	
	Пока ДанныеДляПроверки.Следующий() Цикл
		
		СообщитьПрогресс(Прогрессор, НСтр("ru = 'Выгрузка отчетов'"));
	
		Если ДанныеДляПроверки.ДанныеОтсутствуют Тогда // пустышка
			
			Отчет = ДобавитьРезультатПоОтчету(РезультатПроверки,
				ПредставлениеСтрокиОтчетности(ДанныеДляПроверки, ОписаниеПредставленийОтчетов), ДанныеДляПроверки.КлючСтрокиОтчета);
			Отчет.КлючСтрокиСубъекта = ДанныеДляПроверки.КлючСтрокиСубъекта;
			Отчет.Субъект            = ДанныеДляПроверки.Субъект;
			Отчет.ВариантВыгрузки    = "ДанныеОтсутствуют";
			Отчет.ДатаНачала         = ДанныеДляПроверки.ДатаНачала;
			Отчет.ДатаОкончания      = ДанныеДляПроверки.ДатаОкончания;
			Отчет.Описание           = Отчет.Представление;
			Продолжить;
			
		КонецЕсли;
		
		ПорядокПодписания = ПараметрыПроверки.ПорядкиПодписания[ДанныеДляПроверки.ИдентификаторСтрокиКомплекта];
		Если Не ЗначениеЗаполнено(ПорядокПодписания) Тогда
			ПорядокПодписания = ОсновнойПорядокПодписания;
		КонецЕсли;
		ПараметрыПроверки.ДолженБытьУжеПодписан = (ПараметрыПроверки.Организация <> ДанныеДляПроверки.Субъект
												И ПорядокПодписания <> "ОсновнаяОрганизация");

		ПараметрыПроверки.РеквизитыФайла = Неопределено;
		Если ЗначениеЗаполнено(ДанныеДляПроверки.ФайлОтчета) Тогда
			ПараметрыПроверки.РеквизитыФайла = РеквизитыПрисоединенныхФайлов[ДанныеДляПроверки.ФайлОтчета];
		КонецЕсли;
		Если ПараметрыПроверки.РеквизитыФайла = Неопределено Тогда
			ПараметрыПроверки.РеквизитыФайла = ПустыеРеквизитыФайла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеДляПроверки.ОтчетСсылка) Тогда // регламентированный отчет
			
			ГотовностьКОтправкеРеглОтчета(ДанныеДляПроверки, ПараметрыПроверки, РезультатПроверки);
			
		ИначеЕсли ЗначениеЗаполнено(ДанныеДляПроверки.ФайлОтчета) Тогда // присоединенный файл
			
			ГотовностьКОтправкеПрисоединенногоФайла(ДанныеДляПроверки, ПараметрыПроверки, РезультатПроверки);
			
		Иначе // незаполненная строка
			
			ДобавитьРезультатПоОтчету(РезультатПроверки,
				ПредставлениеСтрокиОтчетности(ДанныеДляПроверки, ОписаниеПредставленийОтчетов),
				ДанныеДляПроверки.КлючСтрокиОтчета,
				НСтр("ru = 'Отчет не заполнен'"));

		КонецЕсли;
		
		// Предусловие: за одну итерацию цикла всегда добавляется только одна строка.
		Отчет = РезультатПроверки.ОтчетностьПоКлючамСтрок[РезультатПроверки.ОтчетностьПоКлючамСтрок.Количество() - 1];
		Отчет.КлючСтрокиСубъекта = ДанныеДляПроверки.КлючСтрокиСубъекта;
		Отчет.Субъект            = ДанныеДляПроверки.Субъект;
		Отчет.ДатаНачала         = ДанныеДляПроверки.ДатаНачала;
		Отчет.ДатаОкончания      = ДанныеДляПроверки.ДатаОкончания;
		Отчет.Описание           = ПредставлениеСтрокиОтчетности(ДанныеДляПроверки, ОписаниеПредставленийОтчетов);
		Если ТипЗнч(РезультатПроверки.ПодготовленныеДанныеОтчета) = Тип("ДвоичныеДанные") Тогда
			Отчет.Размер         = РезультатПроверки.ПодготовленныеДанныеОтчета.Размер();
		КонецЕсли;
		
		Если Не РезультатПроверки.Выполнено Или ТолькоПроверка Тогда
			Продолжить;
		КонецЕсли;
		
		Если Отчет.ВариантВыгрузки = "Файл" Тогда // отдельный файл и его подпись
			
			ПараметрыПомещения.Подписать      = Истина;
			ПараметрыПомещения.ИсходныеДанные = РезультатПроверки.ПодготовленныеДанныеОтчета;
			Если Отчет.НужноПодписать Тогда
				
				НужноПредварительноеПодписание   = Истина;
				ПараметрыПомещения.Зашифровать   = Ложь;
				ПараметрыПомещения.Идентификатор = ИдентификаторПодписанияАрхивов;
				// Разделитель файлов, принадлежащих к разным строкам (из разных архивов).
				ПрефиксИмен = Формат(Отчет.КлючСтрокиОтчета, "ЧЦ=5; ЧВН=; ЧГ=0");
				ПараметрыПомещения.ИсходноеИмяФайла = ПрефиксИмен + Отчет.Представление;
				
			Иначе
				
				ПараметрыПомещения.Зашифровать      = Истина;
				ПараметрыПомещения.Идентификатор    = ПараметрыПроверки.Идентификатор;
				ПараметрыПомещения.Подпись          = РезультатПроверки.ПодготовленныеДанныеПодписи;
				ПараметрыПомещения.ИсходноеИмяФайла = Отчет.Представление;
				
			КонецЕсли;
			ПараметрыПомещения.ТипСодержимого = УниверсальныйОбменСБанками.ТипСодержимогоПоИмениФайла(ПараметрыПомещения.ИсходноеИмяФайла);
			
			РезультатПомещения = УниверсальныйОбменСБанками.ПоместитьВЖурналОперацияСФайлами(ПараметрыПомещения);
			ПараметрыПомещения.Подпись = Неопределено;
			Если Не РезультатПомещения.Выполнено Тогда
					
				РезультатПроверки.Выполнено = Ложь;
				Отчет.ОписаниеОшибки = РезультатПомещения.ОписаниеОшибки;
					
			КонецЕсли;
			
		Иначе // архив, внутрь которого помещаются подписи
			
			Если Отчет.НужноПодписать Тогда // каталог, куда извлечен архив
				// Подписываем каждый из входящих в архив файлов, затем соединим их в один архив и отправим.
				НужноПредварительноеПодписание   = Истина;
				ПараметрыПомещения.Зашифровать   = Ложь;
				ПараметрыПомещения.Подписать     = Истина;
				ПараметрыПомещения.Идентификатор = ИдентификаторПодписанияАрхивов;
				
				Каталог = РезультатПроверки.ПодготовленныеДанныеОтчета;
				// Разделитель файлов, принадлежащих к разным строкам (из разных архивов).
				ПрефиксИмен = Формат(Отчет.КлючСтрокиОтчета, "ЧЦ=5; ЧВН=; ЧГ=0");
				Если Отчет.ВариантВыгрузки = "Архив" Тогда // все в папке
					
					ДанныеАрхива = НайтиФайлы(Каталог, "*");
					Для каждого ФайлВАрхиве Из ДанныеАрхива Цикл
						
						ПараметрыПомещения.ИсходныеДанные = Новый ДвоичныеДанные(ФайлВАрхиве.ПолноеИмя);
						ПараметрыПомещения.ИсходноеИмяФайла = ПрефиксИмен + ФайлВАрхиве.Имя;
						ПараметрыПомещения.ТипСодержимого = УниверсальныйОбменСБанками.ТипСодержимогоПоИмениФайла(ПараметрыПомещения.ИсходноеИмяФайла);
						
						РезультатПомещения = УниверсальныйОбменСБанками.ПоместитьВЖурналОперацияСФайлами(ПараметрыПомещения);
						Если Не РезультатПомещения.Выполнено Тогда
							
							РезультатПроверки.Выполнено = Ложь;
							Отчет.ОписаниеОшибки = РезультатПомещения.ОписаниеОшибки;
							Прервать;
								
						КонецЕсли;
					
					КонецЦикла;
					
				ИначеЕсли Отчет.ВариантВыгрузки = "Дополнительно" Тогда // только отмеченные для подписания

					ДанныеАрхива = РезультатПроверки.ПодготовленныеДанныеПодписи;
					Для каждого ФайлВАрхиве Из ДанныеАрхива Цикл
						
						Если Не ФайлВАрхиве.НужноПодписать Тогда
							// Внутри архива могут быть как "НужноПодписать = Ложь" - xml-файлы регл.отчета, уже подписанные ФНС
							// и не требующие подписания, так и "НужноПодписать = Истина" - xlsx-файлы, которые только сейчас получены
							// и которые «Дополнительно» нужно подписать.
							Продолжить;
						КонецЕсли;
						
						ПараметрыПомещения.ИсходныеДанные = Новый ДвоичныеДанные(Каталог + ФайлВАрхиве.Представление);
						ПараметрыПомещения.ИсходноеИмяФайла = ПрефиксИмен + ФайлВАрхиве.Представление;
						ПараметрыПомещения.ТипСодержимого = УниверсальныйОбменСБанками.ТипСодержимогоПоИмениФайла(ПараметрыПомещения.ИсходноеИмяФайла);
						
						РезультатПомещения = УниверсальныйОбменСБанками.ПоместитьВЖурналОперацияСФайлами(ПараметрыПомещения);
						Если Не РезультатПомещения.Выполнено Тогда
							
							РезультатПроверки.Выполнено = Ложь;
							Отчет.ОписаниеОшибки = РезультатПомещения.ОписаниеОшибки;
							Прервать;
								
						КонецЕсли;
						
						УдалитьФайлы(Каталог + ФайлВАрхиве.Представление);
						
					КонецЦикла;
					
					// Оставшиеся файлы не требуют подписания. Сохраняем их в тот же буферный регистр на время подписания требующих
					// подписания файлов. Потом извлечем эти файлы и добавим к ним подписанные файлы и их подписи.
					АрхивРеглОтчета = Новый ЗаписьZipФайла;
					АрхивРеглОтчета.Добавить(Каталог + "*");
					ПараметрыПомещения.Подписать = Ложь;
					ПараметрыПомещения.ИсходныеДанные = АрхивРеглОтчета.ПолучитьДвоичныеДанные(,, МетодСжатияZIP.Копирование);
					ПараметрыПомещения.ИсходноеИмяФайла = ПрефиксИмен + "ВыгрузкаРегламентированногоОтчета";
					ПараметрыПомещения.ТипСодержимого = УниверсальныйОбменСБанками.ТипСодержимогоПоИмениФайла(ПараметрыПомещения.ИсходноеИмяФайла);
					
					РезультатПомещения = УниверсальныйОбменСБанками.ПоместитьВЖурналОперацияСФайлами(ПараметрыПомещения);
					Если Не РезультатПомещения.Выполнено Тогда
						
						РезультатПроверки.Выполнено = Ложь;
						Отчет.ОписаниеОшибки = РезультатПомещения.ОписаниеОшибки;
						Прервать;
							
					КонецЕсли;
					
				Иначе // иных вариантов подписания выгруженных архивов не может быть
					ВызватьИсключение СтрШаблон(НСтр("ru = 'Попытка подписать выгрузку по варианту %1'"), Отчет.ВариантВыгрузки);
				КонецЕсли;
				
				УдалитьВременныйКаталог(Каталог, ПараметрыПроверки.Предмет);
				
			Иначе
				// Отправляем готовый файл.
				ПараметрыПомещения.Зашифровать      = Истина;
				ПараметрыПомещения.Подписать        = Ложь;
				ПараметрыПомещения.Идентификатор    = ПараметрыПроверки.Идентификатор;
				ПараметрыПомещения.ИсходноеИмяФайла = Отчет.Представление;
				ПараметрыПомещения.ТипСодержимого   = УниверсальныйОбменСБанками.ТипСодержимогоПоИмениФайла(ПараметрыПомещения.ИсходноеИмяФайла);
				ПараметрыПомещения.ИсходныеДанные   = РезультатПроверки.ПодготовленныеДанныеОтчета;
				
				РезультатПомещения = УниверсальныйОбменСБанками.ПоместитьВЖурналОперацияСФайлами(ПараметрыПомещения);
				Если Не РезультатПомещения.Выполнено Тогда
						
					РезультатПроверки.Выполнено = Ложь;
					Отчет.ОписаниеОшибки = РезультатПомещения.ОписаниеОшибки;
						
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;
		
		РезультатПроверки.ПодготовленныеДанныеОтчета = Неопределено;
		РезультатПроверки.ПодготовленныеДанныеПодписи = Неопределено;
		
	КонецЦикла;
	
	РезультатПроверки.Удалить("ПодготовленныеДанныеОтчета");
	РезультатПроверки.Удалить("ПодготовленныеДанныеПодписи");
	
	УдалитьВременныйКаталог(РезультатПроверки.Каталог, ПараметрыПроверки.Предмет);
	
	Если Не ТолькоПроверка Тогда
		
		// При отправке пакета будет три этапа:
		// 1) извлекаем файлы из информационной базы и сохраняем их в буферном регистре;
		// 2) те отчеты, которые ещё не были подписаны, подписываются и сохраняются как в документ, так и в буфер;
		// 3) файлы шифруются и отправляются.
		// Если для подписания используется облачный ключ, то все этапы будут внутри одного фонового задания. Если клиентский,
		// то один этап - одно фоновое задание.
		
		Если РезультатПроверки.Выполнено Тогда 
			
			Если НужноПредварительноеПодписание Тогда
				// Добавляем признак, что нужно предварительное подписание файлов внутри архивов.
				РезультатПроверки.Вставить("ИдентификаторПодписанияАрхивов", ИдентификаторПодписанияАрхивов);
				
			КонецЕсли;
			
		Иначе
			
			УниверсальныйОбменСБанками.УдалитьЗаписиЖурналаОперацийСФайламиПоИдентификатору(ПараметрыПроверки.Идентификатор);
			Если НужноПредварительноеПодписание Тогда
				УниверсальныйОбменСБанками.УдалитьЗаписиЖурналаОперацийСФайламиПоИдентификатору(ИдентификаторПодписанияАрхивов);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Выполняет проверку готовности пакета отчетности к отправке в фоновом задании.
//
// Параметры:
//	ПараметрыПроверки - Структура - см. ПараметрыПодписания().
//	АдресХранилища - Строка - Адрес временного хранилища, в который поместить результат.
//
Процедура ПроверитьГотовностьКОтправкеВФоне(ПараметрыПроверки, АдресХранилища) Экспорт

	Прогрессор = НовыйПрогрессор();

	Результат = ГотовностьКОтправке(ПараметрыПроверки, Истина, Прогрессор);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

// Помещает двоичные данные отчетов в журнал, из которого они далее будут подписываться.
// Предназначена для вызова в качестве метода фонового задания.
//
// Параметры:
//	ПараметрыПодписания - Структура - см. ПараметрыПодписания().
//	АдресХранилища - Строка - Адрес временного хранилища, куда поместить результат.
//
Процедура ПодготовитьПодписываемыеОтчетыВФоне(ПараметрыПодписания, АдресХранилища) Экспорт

	Прогрессор = НовыйПрогрессор();
	
	Если ПараметрыПодписания.ДействиеПослеПодписания = "Отправить" Тогда
		// При отправке может быть два этапа криптоопераций на клиенте: подписание ранее неподписанных файлов и шифрование
		// подготовленных файлов.
		
		Если ПараметрыПодписания.Свойство("РезультатПодготовки") Тогда
			// Второй из двух этапов криптоопераций.
			// Ранее вызывалась ГотовностьКОтправке(), обнаружившая, что есть отчеты, файлы которых не подписаны.
			// Их подписали и теперь помещаем в общую транзакцию для шифрования.
			Попытка
				Результат = СформироватьПодписанныеАрхивы(ПараметрыПодписания, Прогрессор);
				
				Если Результат.Выполнено Тогда
					
					// Добавляем и подписываем опись файлов, которые передаются в банк.
					СформироватьОписьОтправляемойОтчетности(ПараметрыПодписания, Результат);

				КонецЕсли;
			Исключение
				
				ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	
				// Регистрируем ошибку в журнале регистрации.
				ИмяСобытия = НСтр("ru = 'Подготовка отчетов для подписания'", ОбщегоНазначения.КодОсновногоЯзыка());
				ЗаписьЖурналаРегистрации(
					ЗаполнениеФинОтчетностиВБанки.СобытиеЖурналаРегистрации(ИмяСобытия),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Документы.ФинОтчетВБанк,
					ПараметрыПодписания.Предмет,
					ПредставлениеОшибки);
				
				Если Результат = Неопределено Тогда
					Результат = РезультатВыгрузки();
				КонецЕсли;
				ДобавитьРезультатПоОтчету(Результат, Строка(ПараметрыПодписания.Предмет), , ПредставлениеОшибки);

			КонецПопытки;
		Иначе
			// Первый из двух этапов криптоопераций.
			// Анализируем подписи под отчетностью: неподписанные нужно будет подписать и зашифровать на втором этапе.
			
			Результат = ГотовностьКОтправке(ПараметрыПодписания, Ложь, Прогрессор);
			
			Если Результат.Выполнено И Не Результат.Свойство("ИдентификаторПодписанияАрхивов") Тогда
				// Можно уже сейчас сформировать и поместить файлы описи.
				СформироватьОписьОтправляемойОтчетности(ПараметрыПодписания, Результат);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		// Если требуется лишь подписать отчетность, то на клиенте будет только одна криптооперация - подписание,
		// после которой сформированные электронные подписи буду сохранены в информационной базе.

		Результат = ПодготовитьПодписываемыеОтчеты(ПараметрыПодписания, Прогрессор);
		
	КонецЕсли;

	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Прикрепляет к пакету отчетности файлы подписей, подписанные на клиенте.
// Предназначена для вызова в качестве метода фонового задания.
//
// Параметры:
//	ПараметрыПодписания - Структура - см. ПараметрыПодписания().
//	АдресХранилища - Строка - Адрес временного хранилища, куда поместить результат.
//
Процедура ПрикрепитьПодписиВФоне(ПараметрыПодписания, АдресХранилища) Экспорт
	
	Попытка
		
		Прогрессор = НовыйПрогрессор();
	
		Результат = ПрикрепитьПодписи(ПараметрыПодписания, Прогрессор);

	Исключение
		
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	
		// Регистрируем ошибку в журнале регистрации.
		ИмяСобытия = НСтр("ru = 'Сохранение подписанных отчетов'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(
			ЗаполнениеФинОтчетностиВБанки.СобытиеЖурналаРегистрации(ИмяСобытия),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.ФинОтчетВБанк,
			ПараметрыПодписания.Предмет,
			ПредставлениеОшибки);
		
		Если Результат = Неопределено Тогда
			Результат = РезультатВыгрузки();
		КонецЕсли;
		ДобавитьРезультатПоОтчету(Результат, Строка(ПараметрыПодписания.Предмет), , ПредставлениеОшибки);

	КонецПопытки;
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Подписывает отчеты на сервере и прикрепляет файлы подписей к пакету отчетности.
// Предназначена для вызова в качестве метода фонового задания.
//
// Параметры:
//	ПараметрыПодписания - Структура - см. ПараметрыПодписания().
//	АдресХранилища - Строка - Адрес временного хранилища, куда поместить результат.
//
Процедура ПодписатьОтчетыВФоне(ПараметрыПодписания, АдресХранилища) Экспорт
	
	Попытка

		Прогрессор = НовыйПрогрессор();	
		
		// Помещаем данные отчетов во временный регистр для подписания.
		УстановитьДиапазонПрогрессора(Прогрессор, 0, 60);
		
		Результат = ПодготовитьПодписываемыеОтчеты(ПараметрыПодписания, Прогрессор);
	
		Если Не Результат.Выполнено
		 Или Результат.ОтчетностьПоКлючамСтрок.Количество() = 0 Тогда

			ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
			Возврат;
			
		КонецЕсли;
		
		// Получаем сертификат для облачного ключа.
		СвойстваСертификата = УниверсальныйОбменСБанками.НайтиОблачныйСертификатВХранилище(ПараметрыПодписания.ОтпечатокСертификата);
		Если СвойстваСертификата = Неопределено Тогда
			
			ДобавитьРезультатПоОтчету(Результат, ПараметрыПодписания.ОтпечатокСертификата, ,
				НСтр("ru = 'Облачный сертификат не найден в информационной базе.'"));

			ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
			Возврат;
			
		Иначе

			ПараметрыПодписания.Сертификат = СвойстваСертификата.Сертификат;
			
		КонецЕсли;
		
		ПараметрыПодписания.ОтборПоКлючамСтрок = Результат.ОтчетностьПоКлючамСтрок;
		ПараметрыПодписания.Вставить("ИменаАрхивовПоКлючамСтрок", Результат.ИменаАрхивовПоКлючамСтрок);
		
		УниверсальныйОбменСБанками.УстановитьМаркерыБезопасностиСервисаКриптографии(ПараметрыПодписания.Маркеры);
		
		// Выполняем подписание отчетов.
		УстановитьДиапазонПрогрессора(Прогрессор, 60, 80);
		РассчитатьШагПрогрессора(Прогрессор, 2);
		СообщитьПрогресс(Прогрессор, НСтр("ru = 'Подписание отчетов'"));
		
		РезультатОперацииСФайлами = УниверсальныйОбменСБанками.ПодписатьИЗашифроватьДанныеВЖурналеОперацийСФайлами(
			ПараметрыПодписания.Идентификатор, ПараметрыПодписания.ОтпечатокСертификата);
			
		Если Не РезультатОперацииСФайлами.Выполнено Тогда
			
			ДобавитьРезультатПоОтчету(Результат, Строка(ПараметрыПодписания.Предмет), ,
				РезультатОперацииСФайлами.ОписаниеОшибки);
				
			ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
			Возврат;
			
		КонецЕсли;
		
		// Сохраняем данные подписей в присоединенных файлах отчетов.
		СообщитьПрогресс(Прогрессор, НСтр("ru = 'Сохранение подписей'"));
		УстановитьДиапазонПрогрессора(Прогрессор, 80, 100);
		Результат = ПрикрепитьПодписи(ПараметрыПодписания, Прогрессор);
		
	Исключение
		
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	
		// Регистрируем ошибку в журнале регистрации.
		ИмяСобытия = НСтр("ru = 'Подписание отчетов в облаке'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(
			ЗаполнениеФинОтчетностиВБанки.СобытиеЖурналаРегистрации(ИмяСобытия),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.ФинОтчетВБанк,
			ПараметрыПодписания.Предмет,
			ПредставлениеОшибки);
			
		Если Результат = Неопределено Тогда
			Результат = РезультатВыгрузки();
		КонецЕсли;
		ДобавитьРезультатПоОтчету(Результат, Строка(ПараметрыПодписания.Предмет), , ПредставлениеОшибки);

	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Подписывает еще не подписанные отчеты и отправляет пакет в банк. Вызывается, когда для подписания используется
// облачный ключ.
// Предназначена для вызова в качестве метода фонового задания.
//
// Параметры:
//	ПараметрыПодписания - Структура - см. ПараметрыПодписания().
//	АдресХранилища - Строка - Адрес временного хранилища, куда поместить результат.
//
Процедура ПодписатьИОтправитьВБанкВФоне(ПараметрыПодписания, АдресХранилища) Экспорт
	
	Попытка
	
		Прогрессор = НовыйПрогрессор();

		// Помещаем данные отчетов во временный регистр для подписания.
		УстановитьДиапазонПрогрессора(Прогрессор, 0, 40);
	
		РезультатПодготовки = ГотовностьКОтправке(ПараметрыПодписания, Ложь, Прогрессор);
		
		Если Не РезультатПодготовки.Выполнено
		 Или РезультатПодготовки.ОтчетностьПоКлючамСтрок.Количество() = 0 Тогда
		 
		    ПоместитьВоВременноеХранилище(РезультатПодготовки, АдресХранилища);
			Возврат;
			
		КонецЕсли;

		// Получаем сертификат для облачного ключа.
		СвойстваСертификата = УниверсальныйОбменСБанками.НайтиОблачныйСертификатВХранилище(ПараметрыПодписания.ОтпечатокСертификата);
		Если СвойстваСертификата = Неопределено Тогда
			
			ДобавитьРезультатПоОтчету(РезультатПодготовки, ПараметрыПодписания.ОтпечатокСертификата, ,
				НСтр("ru = 'Облачный сертификат не найден в информационной базе.'"));

			ПоместитьВоВременноеХранилище(РезультатПодготовки, АдресХранилища);
			Возврат;
			
		Иначе

			ПараметрыПодписания.Сертификат = СвойстваСертификата.Сертификат;
			
		КонецЕсли;
		
		ПараметрыПодписания.Вставить("РезультатПодготовки", РезультатПодготовки);
		УниверсальныйОбменСБанками.УстановитьМаркерыБезопасностиСервисаКриптографии(ПараметрыПодписания.Маркеры);
		
		Если РезультатПодготовки.Свойство("ИдентификаторПодписанияАрхивов") Тогда
			// Сначала подпишем файлы внутри архивов.
			УстановитьДиапазонПрогрессора(Прогрессор, 40, 50);
			
			РезультатОперацииСФайлами = УниверсальныйОбменСБанками.ПодписатьИЗашифроватьДанныеВЖурналеОперацийСФайлами(
				РезультатПодготовки.ИдентификаторПодписанияАрхивов, ПараметрыПодписания.ОтпечатокСертификата);
				
			Если Не РезультатОперацииСФайлами.Выполнено Тогда
				
				УниверсальныйОбменСБанками.УдалитьЗаписиЖурналаОперацийСФайламиПоИдентификатору(РезультатПодготовки.ИдентификаторПодписанияАрхивов);
				УниверсальныйОбменСБанками.УдалитьЗаписиЖурналаОперацийСФайламиПоИдентификатору(ПараметрыПодписания.Идентификатор);
				
				ДобавитьРезультатПоОтчету(РезультатПодготовки,
					Строка(ПараметрыПодписания.Предмет), , РезультатОперацииСФайлами.ОписаниеОшибки);

				ПоместитьВоВременноеХранилище(РезультатПодготовки, АдресХранилища);
				Возврат;
				
			КонецЕсли;
			
			// Помещаем подпись внутрь архивов.
			РезультатПодготовки = СформироватьПодписанныеАрхивы(ПараметрыПодписания, Прогрессор);
			Если Не РезультатПодготовки.Выполнено Тогда
				
				ПоместитьВоВременноеХранилище(РезультатПодготовки, АдресХранилища);
				Возврат;
				
			КонецЕсли;
			ПараметрыПодписания.Вставить("РезультатПодготовки", РезультатПодготовки);
				
		КонецЕсли;
		
		// Добавляем и подписываем опись файлов, которые передаются в банк.
		УстановитьДиапазонПрогрессора(Прогрессор, 50, 80);
		РассчитатьШагПрогрессора(Прогрессор, 2);
		СообщитьПрогресс(Прогрессор, НСтр("ru = 'Подписание отчетов'"));
		
		СформироватьОписьОтправляемойОтчетности(ПараметрыПодписания, РезультатПодготовки);
		
		// Формируем итоговую транзакцию, отправляемую в банк.
		СообщитьПрогресс(Прогрессор, НСтр("ru = 'Подписание отчетов'"));
		
		РезультатОперацииСФайлами = УниверсальныйОбменСБанками.ПодписатьИЗашифроватьДанныеВЖурналеОперацийСФайлами(
			ПараметрыПодписания.Идентификатор, ПараметрыПодписания.ОтпечатокСертификата);
				
		Если Не РезультатОперацииСФайлами.Выполнено Тогда
			
			УниверсальныйОбменСБанками.УдалитьЗаписиЖурналаОперацийСФайламиПоИдентификатору(ПараметрыПодписания.Идентификатор);
			
			ДобавитьРезультатПоОтчету(РезультатПодготовки,
				Строка(ПараметрыПодписания.Предмет), , РезультатОперацииСФайлами.ОписаниеОшибки);

			ПоместитьВоВременноеХранилище(РезультатПодготовки, АдресХранилища);
			Возврат;
			
		КонецЕсли;
		
		// Отправляем пакет отчетности в банк.
		УстановитьДиапазонПрогрессора(Прогрессор, 80, 100);
		
		Результат = ОтправитьВБанк(ПараметрыПодписания, Прогрессор);
		
	Исключение
		
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	
		// Регистрируем ошибку в журнале регистрации.
		ИмяСобытия = НСтр("ru = 'Отправка отчетов из облака'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(
			ЗаполнениеФинОтчетностиВБанки.СобытиеЖурналаРегистрации(ИмяСобытия),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.ФинОтчетВБанк,
			ПараметрыПодписания.Предмет,
			ПредставлениеОшибки);
		
		Если Результат = Неопределено Тогда
			Результат = РезультатВыгрузки();
		КонецЕсли;
		ДобавитьРезультатПоОтчету(Результат, Строка(ПараметрыПодписания.Предмет), , ПредставлениеОшибки);

	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Отправляет в банк ранее сформированную транзакцию. Вызывается после ГотовностьКОтправке().
// Предназначена для вызова в качестве метода фонового задания.
//
// Параметры:
//	ПараметрыПодписания - Структура - см. ПараметрыПодписания().
//	АдресХранилища - Строка - Адрес временного хранилища, куда поместить результат.
//
Процедура ОтправитьВБанкВФоне(ПараметрыПодписания, АдресХранилища) Экспорт
	
	Прогрессор = НовыйПрогрессор();

	Результат = ОтправитьВБанк(ПараметрыПодписания, Прогрессор);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область ОбменАрхивами

// Выполняет формирование архива с файлами отчетности из пакета для дальнейшего сохранения на клиенте.
// Предназначена для вызова в качестве метода фонового задания.
//
// Параметры:
//	Параметры - Структура - см. ВыгрузитьФинОтчет() в модуле формы.
//	АдресХранилища - Строка - Адрес временного хранилища, куда поместить результат.
//	АдресАрхива - Строка - Адрес дополнительного хранилища, куда поместить данные zip-архива.
//
Процедура ПодготовитьАрхивВФоне(Параметры, АдресХранилища, АдресАрхива) Экспорт
	
	Прогрессор = НовыйПрогрессор(0, 95);

	Результат = ВыгрузитьФайлыПакета(Параметры.ФинОтчет, Параметры.ФорматыСохранения, Прогрессор);
	Если Результат.Выполнено Тогда
		
		// Создаем файл Reports.xml с описанием отчетов.
		УстановитьДиапазонПрогрессора(Прогрессор, 95, 100);
		РассчитатьШагПрогрессора(Прогрессор, 3); // Оставляем на 1 шаг больше, чтобы не зависал на 100%.

		СоздатьXMLПоФайламПакета(Параметры, Результат);
		
		
		// Упаковываем все файлы в zip-архив.
		СообщитьПрогресс(Прогрессор);
		
		СоздаваемыйАрхив = Новый ЗаписьZipФайла;
		СоздаваемыйАрхив.Добавить(Результат.Каталог + "*",
			РежимСохраненияПутейZIP.СохранятьОтносительныеПути,
			РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
		Комментарий = СтрШаблон(НСтр("ru = 'Выгрузка %1 от %2'"), Параметры.ФинОтчет, Формат(ТекущаяДатаСеанса(), "ДЛФ=DT"));
		ПоместитьВоВременноеХранилище(
			СоздаваемыйАрхив.ПолучитьДвоичныеДанные( , Комментарий, МетодСжатияZIP.BZIP2, УровеньСжатияZIP.Максимальный),
			АдресАрхива);
		
		СообщитьПрогресс(Прогрессор);
			
	КонецЕсли;
	
	Если Не ПустаяСтрока(Результат.Каталог) Тогда
		УдалитьВременныйКаталог(Результат.Каталог, Параметры.ФинОтчет);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Функция ПроверитьПротокол(ФинОтчет, ДанныеПротокола) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПроверкаУспешна", Истина);
	Результат.Вставить("ТекстСообщения", "");
	
	ЧтениеПротокола = Новый ЧтениеXML;
	Если ТипЗнч(ДанныеПротокола) = Тип("Строка") Тогда
		ЧтениеПротокола.ОткрытьФайл(ДанныеПротокола);
	Иначе
		ЧтениеПротокола.ОткрытьПоток(ДанныеПротокола);
	КонецЕсли;
	
	// Проверяем совпадение реквизитов фин.отчета, куда мы загружаем файл, и реквизитов фин.отчета, откуда мы взяли файлы.

	ИдентификаторКомплекта = "";
	ИдентификаторБанка = "";
	МесяцЗагрузки = '00010101';
	КраткоеПредставление = "";
	НаименованиеБанка = "";
	Пока ЧтениеПротокола.Прочитать() И ЧтениеПротокола.Имя <> "Субъекты" Цикл
		
		Если ЧтениеПротокола.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЧтениеПротокола.Имя = "Документ" Тогда
			
			Пока ЧтениеПротокола.ПрочитатьАтрибут() Цикл
				
				Если ЧтениеПротокола.Имя = "ИдентификаторКомплекта" Тогда
					ИдентификаторКомплекта = ЧтениеПротокола.Значение;
				ИначеЕсли ЧтениеПротокола.Имя = "Дата" Тогда
					МесяцЗагрузки = НачалоМесяца(XMLЗначение(Тип("Дата"), ЧтениеПротокола.Значение));
				ИначеЕсли ЧтениеПротокола.Имя = "КраткоеПредставление" Тогда
					КраткоеПредставление = ЧтениеПротокола.Значение;
				КонецЕсли;
				
			КонецЦикла;
		
		ИначеЕсли ЧтениеПротокола.Имя = "Банк" Тогда
			
			Пока ЧтениеПротокола.ПрочитатьАтрибут() Цикл
				
				Если ЧтениеПротокола.Имя = "Идентификатор" Тогда
					ИдентификаторБанка = ЧтениеПротокола.Значение;
				ИначеЕсли ЧтениеПротокола.Имя = "Наименование" Тогда
					НаименованиеБанка = ЧтениеПротокола.Значение;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФинОтчет", ФинОтчет);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФинОтчетВБанк.ИдентификаторКомплекта КАК ИдентификаторКомплекта,
	|	ФинОтчетВБанк.Банк.Идентификатор КАК ИдентификаторБанка,
	|	ФинОтчетВБанк.Дата КАК МесяцЗагрузки
	|ИЗ
	|	Документ.ФинОтчетВБанк КАК ФинОтчетВБанк
	|ГДЕ
	|	ФинОтчетВБанк.Ссылка = &ФинОтчет";
	КудаЗагружаем = Запрос.Выполнить().Выгрузить().Получить(0);
	
	Если КудаЗагружаем.ИдентификаторКомплекта <> ИдентификаторКомплекта
	 Или КудаЗагружаем.ИдентификаторБанка <> ИдентификаторБанка Тогда

	    Результат.ПроверкаУспешна = Ложь;
		Результат.ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Назначение выбранного файла отличается от назначения текущего пакета отчетности.
						|Выбранный файл подготовлен для %1 (%2)'"),
			НаименованиеБанка, КраткоеПредставление);
	 
	КонецЕсли;
	Если НачалоМесяца(КудаЗагружаем.МесяцЗагрузки) <> МесяцЗагрузки Тогда
		
		Результат.ПроверкаУспешна = Ложь;
		Результат.ТекстСообщения = ?(ПустаяСтрока(Результат.ТекстСообщения), "", Результат.ТекстСообщения + Символы.ПС)
			+ СтрШаблон(
				НСтр("ru = 'Месяц формирования выбранного файла отличается от месяца текущего пакета отчетности.
							|Выбранный файл сформирован за %1'"),
				Формат(МесяцЗагрузки, "ДФ='ММММ гггг'"));
			
	КонецЕсли;
	Если Не Результат.ПроверкаУспешна Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Проверим, что в базе есть организации или контрагенты, отчеты по которым загружаются.
	
	ПротоколИзФайла = ПрочитатьПротоколИзXML(ЧтениеПротокола);
	
	ПроверяемыеИНН = Новый ТаблицаЗначений;
	ПроверяемыеИНН.Колонки.Добавить("ИНН",          ПротоколИзФайла.Колонки.ИНН.ТипЗначения);
	ПроверяемыеИНН.Колонки.Добавить("КПП",          ПротоколИзФайла.Колонки.КПП.ТипЗначения);
	ПроверяемыеИНН.Колонки.Добавить("Наименование", ПротоколИзФайла.Колонки.Наименование.ТипЗначения);
	Для каждого Субъект Из ПротоколИзФайла.Строки Цикл
		
		Проверка = ПроверяемыеИНН.Добавить();
		Проверка.ИНН          = Субъект.ИНН;
		Проверка.КПП          = Субъект.КПП;
		Проверка.Наименование = Субъект.Наименование;
	
	КонецЦикла; 
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПроверяемыеИНН.ИНН КАК ИНН,
	|	ПроверяемыеИНН.КПП КАК КПП,
	|	ПроверяемыеИНН.Наименование КАК Наименование
	|ПОМЕСТИТЬ ПроверяемыеИНН
	|ИЗ
	|	&ПроверяемыеИНН КАК ПроверяемыеИНН
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИНН,
	|	КПП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеИНН.ИНН КАК ИНН,
	|	ПроверяемыеИНН.КПП КАК КПП,
	|	ПроверяемыеИНН.Наименование КАК Наименование
	|ИЗ
	|	ПроверяемыеИНН КАК ПроверяемыеИНН
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ПроверяемыеИНН.ИНН = Организации.ИНН
	|			И ПроверяемыеИНН.КПП = Организации.КПП
	|			И Организации.Ссылка В (&ДоступныеОрганизации)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ПроверяемыеИНН.ИНН = Контрагенты.ИНН
	|			И ПроверяемыеИНН.КПП = Контрагенты.КПП
	|ГДЕ
	|	Организации.ИНН ЕСТЬ NULL
	|	И Контрагенты.ИНН ЕСТЬ NULL");
	Запрос.УстановитьПараметр("ПроверяемыеИНН", ПроверяемыеИНН);
	Запрос.УстановитьПараметр("ДоступныеОрганизации",
		ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Истина));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		СписокСообщений = Новый Массив;
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл

			СписокСообщений.Добавить(?(ПустаяСтрока(Выборка.КПП),
					СтрШаблон(НСтр("ru = '%1 (ИНН %2)'"), Выборка.Наименование, Выборка.ИНН),
					СтрШаблон(НСтр("ru = '%1 (ИНН %2 КПП %3)'"), Выборка.Наименование, Выборка.ИНН, Выборка.КПП)));
			
		КонецЦикла;
				
		
		Результат.ПроверкаУспешна = Ложь;
		Результат.ТекстСообщения = СтрШаблон(НСтр("ru = 'В справочниках Организации и Контрагенты не найдены компании, по которым загружается отчетность:
                                                   |%1'"), СтрСоединить(СписокСообщений, Символы.ПС));
			
		Возврат Результат;
		
	КонецЕсли;
	
	// Проверяем, не нужно ли нам запросить разрешение у пользователя на замену имеющихся файлов.

	ПротоколИзИБ = ПрочитатьПротоколИзИБ(ФинОтчет);
	
	СписокСообщений = Новый Массив;
	ОтборПоСубъекту = Новый Структура("ИНН,КПП,ВключатьОбособленныеПодразделения");
	Для каждого Субъект Из ПротоколИзФайла.Строки Цикл
		
		ОтборПоСубъекту.ИНН = Субъект.ИНН;
		ОтборПоСубъекту.КПП = Субъект.КПП;
		ОтборПоСубъекту.ВключатьОбособленныеПодразделения = Субъект.ВключатьОбособленныеПодразделения;
		
		НайденноеВИБ = ПротоколИзИБ.Строки.НайтиСтроки(ОтборПоСубъекту);
		Если НайденноеВИБ.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		СубъектИзИБ = НайденноеВИБ[0];
		
		// Ищем хотя бы один заполненный в ИБ.
		ЕстьДанныеПоСубъекту = Ложь;
		Для каждого Отчет Из СубъектИзИБ.Строки Цикл
			Если Не Отчет.ДанныеОтсутствуют И ЗначениеЗаполнено(Отчет.ФайлОтчета) Тогда
				ЕстьДанныеПоСубъекту = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		Если ЕстьДанныеПоСубъекту Тогда
			
			СписокСообщений.Добавить(?(ПустаяСтрока(Субъект.КПП),
					СтрШаблон(НСтр("ru = '%1 (ИНН %2)'"), Субъект.Наименование, Субъект.ИНН),
					СтрШаблон(НСтр("ru = '%1 (ИНН %2 КПП %3)'"), Субъект.Наименование, Субъект.ИНН, Субъект.КПП)));
			
		КонецЕсли; 
	
	КонецЦикла;
	Если СписокСообщений.Количество() > 0 Тогда
		
		Результат.ПроверкаУспешна = Неопределено; // спросить пользователя
		Результат.ТекстСообщения = Результат.ТекстСообщения
			+ СтрШаблон(НСтр("ru = 'Будут заменены файлы отчетности по:
                              |%1'"), СтрСоединить(СписокСообщений, Символы.ПС));
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗагрузитьОтчетыВФоне(ПараметрыАрхива, АдресХранилища) Экспорт
	
	// Предусловие: наличие проблем при загрузке проверено функцией ПроверитьПротокол()
	РезультатЗагрузки = РезультатЗагрузки(Истина);
	
	Прогрессор = НовыйПрогрессор(0, 10);
	РассчитатьШагПрогрессора(Прогрессор, 2);
	
	// Разархивируем загружаемые данные.
	РезультатЗагрузки.Каталог = ФайловаяСистема.СоздатьВременныйКаталог("zip");
	ИсточникДанныхАрхива = ПараметрыАрхива.Хранение.ОткрытьПотокДляЧтения();
	ДанныеАрхива = Новый ЧтениеZipФайла(ИсточникДанныхАрхива);
	ДанныеАрхива.ИзвлечьВсе(РезультатЗагрузки.Каталог, РежимВосстановленияПутейФайловZIP.Восстанавливать);
	ИсточникДанныхАрхива.Закрыть();
	ДанныеАрхива.Закрыть();

	СообщитьПрогресс(Прогрессор);
	
	// Получаем структуру загружаемых данных.
	ДанныеАрхива = Новый ЧтениеXML;
	ДанныеАрхива.ОткрытьФайл(РезультатЗагрузки.Каталог + "Reports.xml");
	ПротоколИзФайла = ПрочитатьПротоколИзXML(ДанныеАрхива);
	ДанныеАрхива.Закрыть();
	
	ПротоколИзИБ = ПрочитатьПротоколИзИБ(ПараметрыАрхива.ФинОтчет);
	
	КлючСтрокиСубъекта = МаксимальныйКлючСтроки(ПротоколИзИБ.Строки, "КлючСтрокиСубъекта");
	КлючСтрокиОтчета = 0;
	Для каждого Субъект Из ПротоколИзИБ.Строки Цикл
		КлючСтрокиОтчета = Макс(КлючСтрокиОтчета, МаксимальныйКлючСтроки(Субъект.Строки, "КлючСтрокиОтчета"));
	КонецЦикла;

	СообщитьПрогресс(Прогрессор);
	
	// Подсчитаем количество загружаемых отчетов для отображения прогрессора.
	КоличествоОтчетов = 0;
	Для каждого Субъект Из ПротоколИзФайла.Строки Цикл
		КоличествоОтчетов = КоличествоОтчетов + Субъект.Строки.Количество();
	КонецЦикла;
	УстановитьДиапазонПрогрессора(Прогрессор, 10, 100);
	РассчитатьШагПрогрессора(Прогрессор, КоличествоОтчетов);
	
	ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Истина);
	УстановившийПодпись = Пользователи.АвторизованныйПользователь();
	Сейчас = ТекущаяДатаСеанса();
	ОтборПоСубъекту = Новый Структура("ИНН,КПП,ВключатьОбособленныеПодразделения");
	Для каждого Субъект Из ПротоколИзФайла.Строки Цикл
		
		ПапкаСубъекта = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(РезультатЗагрузки.Каталог + Субъект.ИмяПапки);
		
		ОтборПоСубъекту.ИНН = СокрЛП(Субъект.ИНН);
		ОтборПоСубъекту.КПП = СокрЛП(Субъект.КПП);
		ОтборПоСубъекту.ВключатьОбособленныеПодразделения = Субъект.ВключатьОбособленныеПодразделения;
		
		НайденноеВИБ = ПротоколИзИБ.Строки.НайтиСтроки(ОтборПоСубъекту);

		Если НайденноеВИБ.Количество() > 0 Тогда 
			// Используем существующий ключ строки субъекта.
			ТекущийКлючСтрокиСубъекта = НайденноеВИБ[0].КлючСтрокиСубъекта;
			СубъектСсылка             = НайденноеВИБ[0].Субъект;
		Иначе
			// Создаем новый ключ субъекта.
			КлючСтрокиСубъекта = КлючСтрокиСубъекта + 1;
			ТекущийКлючСтрокиСубъекта = КлючСтрокиСубъекта;
			
			УстановитьПривилегированныйРежим(Истина);
			СубъектСсылка = Справочники.Организации.НайтиОрганизацию(ОтборПоСубъекту.ИНН, ОтборПоСубъекту.КПП);
			Если Не ЗначениеЗаполнено(СубъектСсылка) 
				ИЛИ ДоступныеОрганизации.Найти(СубъектСсылка) = Неопределено Тогда
				// Подставляем контрагента, если организация не найдена или она недоступна текущему пользователю.
				СубъектСсылка = РаботаСКонтрагентамиБП.НайтиКонтрагентаПоИНН_КПП(ОтборПоСубъекту);
			КонецЕсли;
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
		// Если найденный субъект в текущей базе является контрагентом и для него переданы в xml-файле 
		// настройки системы налогообложения из другой базы, где ведется учет его деятельности, то загрузим их.
		Если ТипЗнч(СубъектСсылка) = Тип("СправочникСсылка.Контрагенты") Тогда
			
			Для каждого НастройкаСНО Из Субъект.НастройкиСистемыНалогообложения Цикл
				НовНастройкаСНО = РезультатЗагрузки.НастройкиСистемыНалогообложения.Добавить();
				ЗаполнитьЗначенияСвойств(НовНастройкаСНО, НастройкаСНО);
				НовНастройкаСНО.КлючСтрокиСубъекта = ТекущийКлючСтрокиСубъекта;
			КонецЦикла;
			
		КонецЕсли;

		Для каждого Отчет Из Субъект.Строки Цикл

			СообщитьПрогресс(Прогрессор);
	
			НовОтчетность = РезультатЗагрузки.Отчетность.Добавить();
			НовОтчетность.КлючСтрокиСубъекта                = ТекущийКлючСтрокиСубъекта;
			НовОтчетность.Субъект                           = СубъектСсылка;
			НовОтчетность.ВключатьОбособленныеПодразделения = Субъект.ВключатьОбособленныеПодразделения;
			
			КлючСтрокиОтчета = КлючСтрокиОтчета + 1;
			НовОтчетность.КлючСтрокиОтчета             = КлючСтрокиОтчета;
			НовОтчетность.ИдентификаторСтрокиКомплекта = Отчет.ИдентификаторСтрокиКомплекта;
			НовОтчетность.ВидОтчета                    = Отчет.ВидОтчета;
			НовОтчетность.УточнениеНаименования        = Отчет.УточнениеНаименования;
			НовОтчетность.ДатаНачала                   = Отчет.ДатаНачала;
			НовОтчетность.ДатаОкончания                = Отчет.ДатаОкончания;
			
			НовОтчетность.ДанныеОтсутствуют = Отчет.ДанныеОтсутствуют;
			Если НовОтчетность.ДанныеОтсутствуют Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Отчет.ИмяФайлаОтчета) Тогда
				
				НовОтчетность.ФайлОтчета = ДобавитьОбновитьФайлОтчета(ПараметрыАрхива.ФинОтчет, Неопределено, Истина,
					Отчет.ИмяФайлаОтчета,
					Новый ДвоичныеДанные(ПапкаСубъекта + Отчет.ИмяФайлаОтчета));
					
				НовОтчетность.ФайлОтчетаСодержитЭП = Отчет.ФайлОтчетаСодержитЭП;
					
			КонецЕсли;
				
			Если ЗначениеЗаполнено(Отчет.ИмяФайлаПодписи) Тогда
				
				ДанныеСертификата = Новый ДвоичныеДанные(ПапкаСубъекта + Отчет.ИмяФайлаСертификата);
				СвойстваСертификата = ЭлектроннаяПодпись.СвойстваСертификата(Новый СертификатКриптографии(ДанныеСертификата));
				
				СвойстваПодписи = Новый Структура;
				СвойстваПодписи.Вставить("Подпись",             Новый ДвоичныеДанные(ПапкаСубъекта + Отчет.ИмяФайлаПодписи));
				СвойстваПодписи.Вставить("УстановившийПодпись", УстановившийПодпись);
				СвойстваПодписи.Вставить("Комментарий",         "");
				СвойстваПодписи.Вставить("ИмяФайлаПодписи",     Отчет.ИмяФайлаПодписи);
				СвойстваПодписи.Вставить("Отпечаток",           СвойстваСертификата.Отпечаток);
				СвойстваПодписи.Вставить("Сертификат",          ДанныеСертификата);
				СвойстваПодписи.Вставить("КомуВыданСертификат", СвойстваСертификата.КомуВыдан);
				СвойстваПодписи.Вставить("ПодписьВерна",        Истина);
				СвойстваПодписи.Вставить("ДатаПроверкиПодписи", Сейчас);
				
				ЭлектроннаяПодпись.ДобавитьПодпись(НовОтчетность.ФайлОтчета, СвойстваПодписи);
				
			КонецЕсли;
			
		КонецЦикла; 
		
	КонецЦикла;

	УдалитьВременныйКаталог(РезультатЗагрузки.Каталог, ПараметрыАрхива.ФинОтчет);
	ПоместитьВоВременноеХранилище(РезультатЗагрузки, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область ПрисоединенныеФайлы

// Создает или заменяет данные присоединенного файла в строке отчетности на новые данные отчета.
//
// Параметры:
//	ВладелецФайла - ДокументСсылка.ФинОтчетВБанк - ссылка на текущий документ.
//	ФайлОтчета - ОпределяемыйТип.ПрисоединенныйФайл - существующий файл отчета (если есть).
//	ЭтоСобственныйФайл - Булево - Истина, если у существующего присоединенного файла владелец совпадает с ВладелецФайла.
//	НовоеИмяФайла - Строка - Имя файла.
//	ДанныеОтчета - ТабличныйДокумент, ДвоичныеДанные - Данные отчета, которые надо сохранить в виде присоединенного файла.
//
Функция ДобавитьОбновитьФайлОтчета(ВладелецФайла, ФайлОтчета, ЭтоСобственныйФайл, НовоеИмяФайла, ДанныеОтчета) Экспорт

	Результат = Неопределено;

	СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(НовоеИмяФайла, Ложь);
	Если Лев(СтруктураИмениФайла.Расширение, 1) = "." Тогда
		РасширениеБезТочки = Сред(СтруктураИмениФайла.Расширение, 2);
	Иначе
		РасширениеБезТочки = СтруктураИмениФайла.Расширение;
	КонецЕсли;

	Если ТипЗнч(ДанныеОтчета) = Тип("ТабличныйДокумент") Тогда
		// Преобразуем табличный документ в формат, который требуется банку.
		ТипФайла = ЗаполнениеФинОтчетностиВБанкиКлиентСервер.ТипФайлаТабличногоДокументаПоРасширению(РасширениеБезТочки);
		
		АдресХранилища = БухгалтерскиеОтчетыВызовСервера.ДвоичныеДанныеИзТабличногоДокумента(ДанныеОтчета, ТипФайла);
		
	ИначеЕсли ТипЗнч(ДанныеОтчета) = Тип("ДвоичныеДанные") Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(ДанныеОтчета, Новый УникальныйИдентификатор);
		
	Иначе
		// Иные типы отчетов не поддерживаются.
		Возврат Неопределено;
	КонецЕсли;

	Попытка

		СоздатьНовыйФайл = Истина;

		Если ЗначениеЗаполнено(ФайлОтчета) И ЭтоСобственныйФайл Тогда
			// Элемент справочника присоединенных файлов для текущего документа уже есть, обновляем данные в нем.
			ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
			ПараметрыДанныхФайла.ДляРедактирования = Истина;
			ПараметрыДанныхФайла.ПолучатьСсылкуНаДвоичныеДанные = Ложь;
			
			// Проверим, что файл можно изменять текущему пользователю.
			ДанныеФайла = РаботаСФайлами.ДанныеФайла(ФайлОтчета, ПараметрыДанныхФайла);
			ФайлСвободен = Не ЗначениеЗаполнено(ДанныеФайла.Редактирует) Или ДанныеФайла.ФайлРедактируетТекущийПользователь;
			
			Если ФайлСвободен И НЕ ДанныеФайла.ПометкаУдаления Тогда
				// Обновляем существующий файл.
				СоздатьНовыйФайл = Ложь;
				
				УдалитьПодписиФайла(ФайлОтчета);
				
				ИнформацияОФайле = Новый Структура();
				ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", АдресХранилища);
				ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
				ИнформацияОФайле.Вставить("ИмяБезРасширения",               СтруктураИмениФайла.ИмяБезРасширения);
				ИнформацияОФайле.Вставить("Расширение",                     СтруктураИмениФайла.Расширение);
				ИнформацияОФайле.Вставить("Редактирует",                    Справочники.Пользователи.ПустаяСсылка()); // освобождаем файл
				
				РаботаСФайлами.ОбновитьФайл(ФайлОтчета, ИнформацияОФайле);
				Результат = ФайлОтчета;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СоздатьНовыйФайл Тогда
		
			// Создаем новый присоединный файл.
			ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
			ПараметрыФайла.ВладелецФайлов     = ВладелецФайла;
			ПараметрыФайла.ИмяБезРасширения   = СтруктураИмениФайла.ИмяБезРасширения;
			ПараметрыФайла.РасширениеБезТочки = РасширениеБезТочки;
		
			Результат = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресХранилища);
			
		КонецЕсли;
		
	Исключение
	
		ИнформацияОбОшибке = ИнформацияОбОшибке();
	
		// Регистрируем ошибку в журнале регистрации.
		ИмяСобытия = НСтр("ru = 'Операция с файлом отчета'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(
			ЗаполнениеФинОтчетностиВБанки.СобытиеЖурналаРегистрации(ИмяСобытия),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.ФинОтчетВБанк,
			ВладелецФайла,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
		Если ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
			УдалитьИзВременногоХранилища(АдресХранилища);
		КонецЕсли;
		
		ВызватьИсключение;
	
	КонецПопытки;
	
	Если ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		// Очистим данные, которые больше не требуются.
		УдалитьИзВременногоХранилища(АдресХранилища);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Неиспользуемые присоединенные файлы помечаем на удаление и очищаем, а для используемых снимаем пометку удаления.
//
// Параметры:
//  ФинОтчет     - ДокументСсылка.ФинОтчетВБанк - пакет отчетности-владелец файлов.
//  СвойстваФайлов - Соответствие - список файлов, которые используются в пакете
//                   * Ключ - ОпределяемыйТип.ПрисоединенныйФайл - файл отчета из пакета.
//                   * Значение - Булево - текущее состояние пометки удаления файла.
//
Процедура СинхронизироватьПрисоединенныеФайлы(Знач ФинОтчет, Знач СвойстваФайлов) Экспорт
	Перем ПустоеХранилище;
	
	НеиспользуемыеФайлы = Новый Массив;
	
	// Список файлов, которые когда-либо использовались в пакете.
	ИмеющиесяФайлы = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(ФинОтчет, ИмеющиесяФайлы);
	
	// Снимаем пометки удаления с используемых файлов.
	Для каждого Отчет Из ИмеющиесяФайлы Цикл
		
		ПометкаУдаления = СвойстваФайлов[Отчет];
		Если ПометкаУдаления = Неопределено Тогда
			НеиспользуемыеФайлы.Добавить(Отчет);
			Продолжить;
		ИначеЕсли ПометкаУдаления <> Истина Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			Отчет.ПолучитьОбъект().УстановитьПометкуУдаления(Ложь);
		Исключение
		
			ОписаниеОшибки = НСтр("ru = 'Ошибка при снятии пометки удаления с файла ""%1"".
                                  |%2'");
			ИмяСобытия = НСтр("ru = 'Синхронизация присоединенных файлов'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(
				ЗаполнениеФинОтчетностиВБанки.СобытиеЖурналаРегистрации(ИмяСобытия),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.ФинОтчетВБанк,
				ФинОтчет,
				СтрШаблон(ОписаниеОшибки, Строка(Отчет), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));

		КонецПопытки;	

	КонецЦикла;
	
	// Очищаем неиспользуемые файлы.
	СвойстваФайлов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(НеиспользуемыеФайлы, "ПометкаУдаления, ПодписанЭП", Истина);
	Для каждого ИспользованиеФайла Из СвойстваФайлов Цикл
		
		// Исключаем файлы, которые ранее уже были помечены на удаление.
		Если ИспользованиеФайла.Значение.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		Отчет = ИспользованиеФайла.Ключ;
		
		// Удаляем подписи файла.
		Если ИспользованиеФайла.Значение.ПодписанЭП = Истина Тогда

			Попытка
				УдалитьПодписиФайла(Отчет);
			Исключение
				
				ОписаниеОшибки = НСтр("ru = 'Ошибка при удалении подписи у файла ""%1"".
	                                  |%2'");
				ИмяСобытия = НСтр("ru = 'Синхронизация присоединенных файлов'", ОбщегоНазначения.КодОсновногоЯзыка());
				ЗаписьЖурналаРегистрации(
					ЗаполнениеФинОтчетностиВБанки.СобытиеЖурналаРегистрации(ИмяСобытия),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Документы.ФинОтчетВБанк,
					ФинОтчет,
					СтрШаблон(ОписаниеОшибки, Строка(Отчет), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));

			КонецПопытки;
			
		КонецЕсли;
		
		Если ПустоеХранилище = Неопределено Тогда
			// Инициализируем, только когда нашелся хотя бы один удаляемый файл.
			ПустойПоток = Новый ПотокВПамяти;
			ТекстДокумента = СтрШаблон(НСтр("ru = 'Этот файл был удален %1 %2'"),
				Формат(ТекущаяДатаСеанса(), "ДЛФ=DDT"), Пользователи.АвторизованныйПользователь());
			ПустойДокумент = Новый ЗаписьТекста(ПустойПоток, КодировкаТекста.UTF8);
			ПустойДокумент.Записать(ТекстДокумента);
			ПустойДокумент.Закрыть();
			ПустыеДвоичныеДанные = ПустойПоток.ЗакрытьИПолучитьДвоичныеДанные();
			ПустоеХранилище = ПоместитьВоВременноеХранилище(ПустыеДвоичныеДанные);
			ПустойПользователь = Справочники.Пользователи.ПустаяСсылка();
			
		КонецЕсли;
		
		// Записываем пустое значение вместо данных файла.
		ИнформацияОФайле = Новый Структура;
		ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", ПустоеХранилище);
		ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
		ИнформацияОФайле.Вставить("ИмяБезРасширения",               СтрШаблон(НСтр("ru = '(удален) %1'"), Строка(Отчет)));
		ИнформацияОФайле.Вставить("Расширение",                     "txt");
		ИнформацияОФайле.Вставить("Редактирует",                    ПустойПользователь);
		ИнформацияОФайле.Вставить("Кодировка",                      КодировкаТекста.UTF8);
		
		Попытка
			РаботаСФайлами.ОбновитьФайл(Отчет, ИнформацияОФайле);
		Исключение
			
			ОписаниеОшибки = НСтр("ru = 'Не удалось очистить данные файла ""%1"".
                                  |%2'");
			ИмяСобытия = НСтр("ru = 'Синхронизация присоединенных файлов'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(
				ЗаполнениеФинОтчетностиВБанки.СобытиеЖурналаРегистрации(ИмяСобытия),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.ФинОтчетВБанк,
				ФинОтчет,
				СтрШаблон(ОписаниеОшибки, Строка(Отчет), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));

		КонецПопытки;
		
		// Помечаем файл как разрешенный для физического удаления.
		Попытка
			Отчет.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
		Исключение
			
			ОписаниеОшибки = НСтр("ru = 'Не удалось пометить на удаление файл ""%1"".
                                  |%2'");
			ИмяСобытия = НСтр("ru = 'Синхронизация присоединенных файлов'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(
				ЗаполнениеФинОтчетностиВБанки.СобытиеЖурналаРегистрации(ИмяСобытия),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.ФинОтчетВБанк,
				ФинОтчет,
				СтрШаблон(ОписаниеОшибки, Строка(Отчет), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));

		КонецПопытки;
			
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

// Возвращает максимальное значение ключа строки таблицы.
//
// Параметры:
//	ИсходнаяТаблица - ТаблицаЗначений, ТабличнаяЧасть, ДанныеФормыКоллекция - таблица, для которой определяется ключ строки.
//	ИмяПоля - Строка - Имя колонки, содержащей ключ строки.
//
// Возвращаемое значение:
//	Число - максимальный ключ строки.
//
Функция МаксимальныйКлючСтроки(ИсходнаяТаблица, ИмяПоля) Экспорт

	Если ИсходнаяТаблица.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;

	Результат = 0;
	Для каждого СтрокаТаблицы Из ИсходнаяТаблица Цикл
		Результат = Макс(Результат, СтрокаТаблицы[ИмяПоля]);
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция НайтиСтрокуПоКлючу(ИсходнаяТаблица, ИмяПоля, КлючСтроки) Экспорт

	// Чтобы можно можно использовать с разными коллекциями (ТабличнаяЧасть, ТаблицаЗначений, ДанныеФормыКоллекция),
	// всегда используем поиск через НайтиСтроки().

	Отбор = Новый Структура(ИмяПоля, КлючСтроки);
	
	НайденныеСтроки = ИсходнаяТаблица.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() = 1 Тогда
		Возврат НайденныеСтроки[0];
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

Процедура УдалитьНеактуальныеСтроки(ВедущаяТабличнаяЧасть, ПодчиненнаяТабличнаяЧасть, ИмяКолонкиКлючСтроки) Экспорт

	Отбор = Новый Структура(ИмяКолонкиКлючСтроки);
	
	КлючиСтрок = ОбщегоНазначения.ВыгрузитьКолонку(ПодчиненнаяТабличнаяЧасть, ИмяКолонкиКлючСтроки, Истина);

	Для каждого КлючСтроки Из КлючиСтрок Цикл

		Отбор[ИмяКолонкиКлючСтроки] = КлючСтроки;
		// Ищем по структуре с отбором, чтобы можно было использовать и для табличной части, и для данных формы и для таблицы значений.
		Если ВедущаяТабличнаяЧасть.НайтиСтроки(Отбор).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Строки с ключом нет в ведущей табличной части, удалим все строки с таким ключом из подчиненной.
		СтрокиПодчиненнойТабличнойЧасти = ПодчиненнаяТабличнаяЧасть.НайтиСтроки(Отбор);
		Для каждого СтрокаТаблицы Из СтрокиПодчиненнойТабличнойЧасти Цикл
			ПодчиненнаяТабличнаяЧасть.Удалить(СтрокаТаблицы);
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

Процедура УдалитьСтрокиОтчетаИзПодчиненныхТабличныхЧастей(Объект, КлючСтрокиОтчета) Экспорт

	// Удаляем связанные с отчетами параметры и дополнительные показатели.
	ОтборПоОтчету = Новый Структура("КлючСтрокиОтчета");
	ОтборПоОтчету.КлючСтрокиОтчета = КлючСтрокиОтчета;
	
	СтрокиПараметров = Объект.ПараметрыОтчетов.НайтиСтроки(ОтборПоОтчету);
	Для каждого СтрокаПараметра Из СтрокиПараметров Цикл
		Объект.ПараметрыОтчетов.Удалить(СтрокаПараметра);
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиСтрокуКомплекта(ИдентификаторСтрокиКомплекта, НастройкиКомплекта) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторСтрокиКомплекта) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НастройкиКомплекта = Неопределено Тогда
		// Если не смогли найти настройки комплекта, то возвращаем Неопределено.
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат НастройкиКомплекта.Отчеты.Найти(ИдентификаторСтрокиКомплекта, "ИдентификаторСтрокиКомплекта");
	
КонецФункции

Функция НайтиНастройкиОтчета(ИдентификаторСтрокиКомплекта, НастройкиКомплекта) Экспорт
	
	СтрокаНастройки = НайтиСтрокуКомплекта(ИдентификаторСтрокиКомплекта, НастройкиКомплекта);
	Если СтрокаНастройки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтрокаНастройки.НастройкиОтчета;
	
КонецФункции

// Возвращает имя файла отчета, сформированное по шаблону.
//
// Параметры:
//	ИНН - Строка - ИНН экономического субъекта, представляющего отчетность.
//	КПП - Строка - КПП экономического субъекта, представляющего отчетность (для юридических лиц).
//	ШаблонИмениФайла - Строка - Содержит шаблон имени присоединенного файла, в который сохраняется отчет.
// 		Используемые параметры:
//			%1 - УточнениеНаименования;
//			%2 - ДатаНачала (ГГГГММДД);
//			%3 - ДатаОкончания (ГГГГММДД);
//	УточнениеНаименования - Строка - Уточнение наименования отчета.
//	ДатаНачала - Дата - Дата начала периода отчета.
//	ДатаОкончания - Дата - Дата окончания периода отчета.
//
// Возвращаемое значение:
//	Строка - имя файла.
//
Функция ИмяФайлаБезРасширенияПоШаблону(ИНН, КПП, ШаблонИмениФайла, УточнениеНаименования, ДатаНачала, ДатаОкончания) Экспорт

	Если НЕ ЗначениеЗаполнено(ШаблонИмениФайла) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачалаГГГГММДД = Формат(ДатаНачала, "ДФ='ггггММдд'");
	Иначе
		ДатаНачалаГГГГММДД = "";
	КонецЕсли;

	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		ДатаОкончанияГГГГММДД = Формат(ДатаОкончания, "ДФ='ггггММдд'");
	Иначе
		ДатаОкончанияГГГГММДД = "";
	КонецЕсли;
	
	// Формируем имя файла вида OSV_62_20200101_20200331_ИННКПП_GUID.xls
	ЧастиИмениФайла = Новый Массив;
	ЧастиИмениФайла.Добавить(СтрШаблон(
		ШаблонИмениФайла, 
		ЗаменитьНедопустимыеСимволыВИмениФайла(СокрЛП(УточнениеНаименования), ""), 
		ДатаНачалаГГГГММДД, 
		ДатаОкончанияГГГГММДД));
	
	ИННКПП = Новый Массив;
	Если ЗначениеЗаполнено(ИНН) Тогда
		ИННКПП.Добавить(ЗаменитьНедопустимыеСимволыВИмениФайла(СокрЛП(ИНН)));
	КонецЕсли;
	Если ЗначениеЗаполнено(КПП) Тогда
		ИННКПП.Добавить(ЗаменитьНедопустимыеСимволыВИмениФайла(СокрЛП(КПП)));
	КонецЕсли;
	Если ИННКПП.Количество() > 0 Тогда
		ЧастиИмениФайла.Добавить(СтрСоединить(ИННКПП, ""));
	КонецЕсли;
	
	ЧастиИмениФайла.Добавить(Строка(Новый УникальныйИдентификатор));
	
	Возврат СтрСоединить(ЧастиИмениФайла, "_");

КонецФункции

Функция РасширениеФайлаБезТочки(ИдентификаторСтрокиКомплекта, НастройкиКомплекта) Экспорт

	ФорматСохранения = "";
	Если НастройкиКомплекта <> Неопределено Тогда
		// Указан формат в целом для комплекта отчетов.
		ФорматСохранения = НастройкиКомплекта.ОсновнойФорматСохранения;
	КонецЕсли;

	СтрокаНастройки = НайтиСтрокуКомплекта(ИдентификаторСтрокиКомплекта, НастройкиКомплекта);
	Если СтрокаНастройки <> Неопределено И ЗначениеЗаполнено(СтрокаНастройки.ФорматСохранения) Тогда
		// Указан формат для конкретного отчета.
		ФорматСохранения = СтрокаНастройки.ФорматСохранения;
	КонецЕсли;
	
	Возврат РасширениеФайлаБезТочкиПоФорматуСохранения(ФорматСохранения)

КонецФункции

Функция РасширениеФайлаБезТочкиПоФорматуСохранения(Знач ФорматСохранения) Экспорт

	ФорматСохранения = ВРег(ФорматСохранения);

	Если ФорматСохранения = "XLS" Тогда
		Результат = "xls";
	ИначеЕсли ФорматСохранения = "XLS_XML" Тогда
		Результат = "xls";
	ИначеЕсли ФорматСохранения = "XLSX" Тогда
		Результат = "xlsx";
	ИначеЕсли ФорматСохранения = "XLSX_XML" Тогда
		Результат = "xlsx";
	Иначе
		Результат = ЗаполнениеФинОтчетностиВБанкиКлиентСервер.РасширениеТабличногоДокумента();
		Если Результат = ТипФайлаТабличногоДокумента.XLS
			ИЛИ Результат = ТипФайлаПакетаОтображаемыхДокументов.XLS Тогда
			Результат = "xls";
		Конецесли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает соответствие с порядком подписания каждой строки отчета из настроек комплекта.
//
// Параметры:
//	НастройкиКомплекта - Структура - см. ЗаполнениеФинОтчетностиВБанки.НастройкиКомплектаОтчетности()
//
// Возвращаемое значение:
//	Соответствие - Содержит:
//		* Ключ - Строка - Идентификатор строки комплекта или "ЗначениеПоУмолчанию".
//		* Значение - Строка - Одна из строк "ОсновнаяОрганизация" или "СубъектОтчетности".
//
Функция ПорядкиПодписанияОтчетов(НастройкиКомплекта) Экспорт

	ПорядкиПодписания = Новый Соответствие;
	
	Если НастройкиКомплекта = Неопределено Тогда

		// По умолчанию считаем, что каждый подписывает за себя сам.
		ПорядкиПодписания.Вставить("ЗначениеПоУмолчанию", "СубъектОтчетности");
		Возврат ПорядкиПодписания;

	КонецЕсли;
	
	ПорядкиПодписания.Вставить("ЗначениеПоУмолчанию", НастройкиКомплекта.ОсновнойПорядокПодписания); // порядок по-умолчанию
	
	Для каждого Отчет Из НастройкиКомплекта.Отчеты Цикл
		ПорядкиПодписания.Вставить(Отчет.ИдентификаторСтрокиКомплекта, Отчет.ПорядокПодписания);
	КонецЦикла;
	
	Возврат ПорядкиПодписания;
	
КонецФункции

// Возвращает соответствие с форматом сохранения каждой строки отчета из настроек комплекта.
//
// Параметры:
//	НастройкиКомплекта - Структура - см. ЗаполнениеФинОтчетностиВБанки.НастройкиКомплектаОтчетности()
//
// Возвращаемое значение:
//	Соответствие - Содержит:
//		* Ключ - Строка - Идентификатор строки комплекта или "ЗначениеПоУмолчанию".
//		* Значение - Строка - Одно из значений ПакетXDTO.ФинОтчетностьВБанки.ФорматыСохраненияОтчетов.
//
Функция ФорматыСохраненияОтчетов(НастройкиКомплекта) Экспорт
	
	ФорматыСохранения = Новый Соответствие;
	
	Если НастройкиКомплекта = Неопределено Тогда

		ФорматыСохранения.Вставить("ЗначениеПоУмолчанию",
			ВРег(ЗаполнениеФинОтчетностиВБанкиКлиентСервер.РасширениеТабличногоДокумента()));
		Возврат ФорматыСохранения;

	КонецЕсли;
	
	ФорматыСохранения.Вставить("ЗначениеПоУмолчанию", НастройкиКомплекта.ОсновнойФорматСохранения); // формат по умолчанию
	
	Для каждого Отчет Из НастройкиКомплекта.Отчеты Цикл
		Если ЗначениеЗаполнено(Отчет.ФорматСохранения) Тогда
			ФорматыСохранения.Вставить(Отчет.ИдентификаторСтрокиКомплекта, Отчет.ФорматСохранения);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ФорматыСохранения;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СоставОтчетности

// Создает в табличной части Отчетность одну или несколько строк с отчетом 
// согласно настройкам периодичности и количества 

Процедура ДобавитьОтчетыПоНастройке(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности)

	// Рассчитаем даты периода отчетов.
	Если СтрокаНастройкиКомплекта.ПраваяГраницаПериода = "ПоследнийКалендарныйМесяц"
		И ЗначениеЗаполнено(ПараметрыЗаполнения.ДатаСоздания) Тогда
		Если КонецДня(ПараметрыЗаполнения.ДатаСоздания) = КонецМесяца(ПараметрыЗаполнения.ДатаСоздания) Тогда
			// Пакет создан в последний день месяца, включаем сам этот месяц.
			ПраваяГраница = ПараметрыЗаполнения.ДатаСоздания;
		Иначе
			// Берем последний полностью закончившийся календарный месяц до даты создания пакета отчетности.
			ПраваяГраница = НачалоМесяца(ПараметрыЗаполнения.ДатаСоздания) - 1;
		КонецЕсли;
	Иначе
		// По умолчанию в качестве правой границы выступает сама отчетная дата.
		ПраваяГраница = ПараметрыЗаполнения.Дата;
	КонецЕсли;
	
	ДатаОкончания = ЗаполнениеФинОтчетностиВБанкиКлиентСервер.КонецПериодаОтчета(
		КонецДня(ПраваяГраница),
		СтрокаНастройкиКомплекта.ПериодОтчета,
		СтрокаНастройкиКомплекта.СмещениеПравойГраницы);
		
	ДатаНачала = ЗаполнениеФинОтчетностиВБанкиКлиентСервер.НачалоПериодаОтчета(
		ДатаОкончания,
		СтрокаНастройкиКомплекта.ПериодОтчета,
		СтрокаНастройкиКомплекта.КоличествоПериодов);
		
	// Для организаций ограничиваем период снизу датой регистрации организации, если она задана.
	// Для контрагентов дата регистрации неизвестна, поэтому оставляем периоды без изменения.
	Если ЗначениеЗаполнено(ПараметрыЗаполнения.ДатаРегистрации) Тогда
		ДатаНачала = Макс(ДатаНачала, НачалоМесяца(ПараметрыЗаполнения.ДатаРегистрации));
	КонецЕсли;
		
	// В зависимости от указанной банком периодичности формируем несколько строк отчетов.
	// Периоды определяем, последовательно отступая назад в прошлое.
	ТекущаяДатаОкончания = ДатаОкончания;
	
	Пока ТекущаяДатаОкончания >= ДатаНачала Цикл
	
		Если СтрокаНастройкиКомплекта.Периодичность = "Месяц" Тогда
			ТекущаяДатаНачала = НачалоМесяца(ТекущаяДатаОкончания);
			СледующаяДатаОкончания = ТекущаяДатаНачала - 1;

		ИначеЕсли СтрокаНастройкиКомплекта.Периодичность = "Квартал" Тогда
			ТекущаяДатаНачала = НачалоКвартала(ТекущаяДатаОкончания);
			СледующаяДатаОкончания = ТекущаяДатаНачала - 1; 

		ИначеЕсли СтрокаНастройкиКомплекта.Периодичность = "Год" Тогда
			ТекущаяДатаНачала = НачалоГода(ТекущаяДатаОкончания);
			СледующаяДатаОкончания = ТекущаяДатаНачала - 1; 

		ИначеЕсли СтрокаНастройкиКомплекта.Периодичность = "КварталПолугодие9МесяцевГод" Тогда
			// Накопительно с начала года.
			ТекущаяДатаНачала      = НачалоГода(ТекущаяДатаОкончания);
			СледующаяДатаОкончания = НачалоКвартала(ТекущаяДатаОкончания) - 1; 
		
		Иначе
			// Банку требуется один отчет за весь период целиком без деления по подпериодам.
			ТекущаяДатаНачала      = ДатаНачала;
			СледующаяДатаОкончания = ДатаНачала - 1;
			
		КонецЕсли;
	
		// Добавляем строку для отчета.
		ДобавитьОтчетПоНастройкеЗаПериод(
			ПараметрыЗаполнения, 
			СтрокаНастройкиКомплекта,
			СоставОтчетности,
			ТекущаяДатаНачала,
			ТекущаяДатаОкончания);
		
		ТекущаяДатаОкончания = СледующаяДатаОкончания;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьОтчетПоНастройкеЗаПериод(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания)
	
	Если СтрокаНастройкиКомплекта.ОбязанностьПредставления = "ОсновнаяОрганизация" Тогда
		// Представлять отчет в банк должен только основной заемщик, для других компаний группы не требуется.
		Если ПараметрыЗаполнения.Организация <> ПараметрыЗаполнения.Субъект Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Некоторые отчеты могут иметь особенности заполнения, поэтому обрабатываем их отдельно.
	Если СтрокаНастройкиКомплекта.ВидОтчета = "БухгалтерскаяОтчетность" Тогда
		ДобавитьОтчетБухгалтерскаяОтчетность(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);

	ИначеЕсли СтрокаНастройкиКомплекта.ВидОтчета = "БухгалтерскаяОтчетностьАудиторскоеЗаключение"
		ИЛИ СтрокаНастройкиКомплекта.ВидОтчета = "БухгалтерскаяОтчетностьПояснения" Тогда
		ДобавитьОтчетДопФайлыБухОтчетности(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);
		
	ИначеЕсли СтрокаНастройкиКомплекта.ВидОтчета = "ДекларацияПрибыль" Тогда
		ДобавитьОтчетДекларацияПрибыль(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);
		
	ИначеЕсли СтрокаНастройкиКомплекта.ВидОтчета = "ДекларацияНДС" Тогда
		ДобавитьОтчетДекларацияНДС(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);
		
	ИначеЕсли СтрокаНастройкиКомплекта.ВидОтчета = "ДекларацияУСН" Тогда
		ДобавитьОтчетДекларацияУСН(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);
		
	ИначеЕсли СтрокаНастройкиКомплекта.ВидОтчета = "ДекларацияЕНВД" Тогда
		ДобавитьОтчетДекларацияЕНВД(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);
		
	ИначеЕсли СтрокаНастройкиКомплекта.ВидОтчета = "Декларация3НДФЛ" Тогда
		ДобавитьОтчетДекларация3НДФЛ(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);

	ИначеЕсли СтрокаНастройкиКомплекта.ВидОтчета = "ДекларацияЕСХН" Тогда
		ДобавитьОтчетДекларацияЕСХН(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);
		
	ИначеЕсли СтрокаНастройкиКомплекта.ВидОтчета = "РасчетПоСтраховымВзносам" Тогда
		ДобавитьОтчетРасчетПоСтраховымВзносам(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);
		
	ИначеЕсли СтрокаНастройкиКомплекта.ВидОтчета = "АнализСчета"
		ИЛИ СтрокаНастройкиКомплекта.ВидОтчета = "ОборотноСальдоваяВедомость"
		ИЛИ СтрокаНастройкиКомплекта.ВидОтчета = "ОборотноСальдоваяВедомостьПоСчету"
		ИЛИ СтрокаНастройкиКомплекта.ВидОтчета = "ОборотыСчета"
		ИЛИ СтрокаНастройкиКомплекта.ВидОтчета = "КарточкаСчета" Тогда
		
		ДобавитьОтчетПоСчету(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);
		
	ИначеЕсли СтрокаНастройкиКомплекта.ВидОтчета = "ВаловаяПрибыль"
		Или СтрокаНастройкиКомплекта.ВидОтчета = "РасшифровкаЗадолженности"
		Или СтрокаНастройкиКомплекта.ВидОтчета = "ВедомостьАмортизацииОС" Тогда
		
		ДобавитьОтчетНаКомпоновке(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);
		
	ИначеЕсли СтрокаНастройкиКомплекта.ВидОтчета = "КассоваяКнига" Тогда
		
		ДобавитьОтчетКассоваяКнига(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);
		
	ИначеЕсли СтрокаНастройкиКомплекта.ВидОтчета = "КнигаУчетаДоходовПатент" Тогда
		
		ДобавитьОтчетКнигаУчетаДоходовПатент(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);

	ИначеЕсли СтрокаНастройкиКомплекта.ВидОтчета = "Патент" Тогда

		ДобавитьОтчетПатент(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);
		
	ИначеЕсли СтрокаНастройкиКомплекта.ВидОтчета = "КнигаУчетаДоходовИРасходов" Тогда
		
		ДобавитьОтчетКнигаУчетаДоходовИРасходов(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);
		
	ИначеЕсли СтрокаНастройкиКомплекта.ВидОтчета = "КнигаУчетаДоходовИРасходовПредпринимателя" Тогда
		
		ДобавитьОтчетКнигаУчетаДоходовИРасходовПредпринимателя(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);
		
	ИначеЕсли СтрокаНастройкиКомплекта.ВидОтчета = "СправкаБанка" Тогда

		ДобавитьОтчетСправкаБанка(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);
		
	ИначеЕсли СтрокаНастройкиКомплекта.ВидОтчета = "ПроизвольныйФайл" Тогда
		ДобавитьОтчетПроизвольныйФайл(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);
		
	Иначе
		
		// Все остальные виды отчетов формируются в целом по организации.
		ДобавитьОтчетЗаПериод(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОтчетБухгалтерскаяОтчетность(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания)

	Если НЕ ПараметрыЗаполнения.ЭтоЮрЛицо Тогда
		// Индивидуальный предприниматель не обязан вести бухгалтерский учет и сдавать бухгалтерскую отчетность.
		Возврат;
	КонецЕсли;
	
	Если НЕ ПараметрыЗаполнения.ЭтоОрганизация Тогда
		// Т.к. у нас нет данных по контрагенту, то добавим одну единственную строку отчета как пустографку.
		ДобавитьОтчетЗаПериод(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗаполнения.ДатаРегистрации) Тогда
		// п.3. ст. 15 Федерального закона от 06.12.2011 №402-ФЗ "О бухгалтерском учете"
		// В случае, если государственная регистрация экономического субъекта, за исключением кредитной организации, 
		// произведена после 30 сентября, первым отчетным годом является, если иное не установлено экономическим субъектом, 
		// период с даты государственной регистрации по 31 декабря календарного года, 
		// следующего за годом его государственной регистрации, включительно.

		НалоговыйПериод = ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод(
			ПараметрыЗаполнения.Субъект,
			ДатаОкончания,
			Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВПоследнемКвартале,
			Перечисления.Периодичность.Год,
			ПараметрыЗаполнения.ДатаРегистрации);
			
		ПериодНачалоГода = НалоговыйПериод.Начало;
	
	Иначе
		// Дата регистрации неизвестна, по умолчанию считаем, что отчетным периодом является календарный год.
		ПериодНачалоГода = НачалоГода(ДатаНачала);
	КонецЕсли;

	ДобавитьОтчетЗаПериод(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ПериодНачалоГода, ДатаОкончания);

КонецПроцедуры

Процедура ДобавитьОтчетДекларацияПрибыль(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, Знач ДатаНачала, ДатаОкончания)

	Если НЕ ПараметрыЗаполнения.ЭтоЮрЛицо Тогда
		// Индивидуальный предприниматель не платит налог на прибыль.
		Возврат;
	КонецЕсли;
	
	ДатаНачала = НачалоГода(ДатаНачала); // Декларация по прибыли всегда заполняется с начала года.
	
	Если НЕ ПараметрыЗаполнения.ЭтоОрганизация Тогда
		// Т.к. у нас нет данных по контрагенту, то добавим одну единственную строку отчета как пустографку.
		ДобавитьОтчетЗаПериод(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);
		Возврат;
	КонецЕсли;
	
	Если НЕ УчетнаяПолитика.ПлательщикНалогаНаПрибыль(ПараметрыЗаполнения.Субъект, ДатаНачала)
		И НЕ УчетнаяПолитика.ПлательщикНалогаНаПрибыль(ПараметрыЗаполнения.Субъект, ДатаОкончания) Тогда
		// Организация не являлась плательщиком налога в течение отчетного периода.
		Возврат;
	КонецЕсли;
	
	НалоговыйПериод = НалоговыйУчет.БлижайшийНалоговыйПериод(ДатаОкончания, ПараметрыЗаполнения.Субъект);

	// Отчетным периодом является месяц либо квартал, поэтому берем с начала налогового периода (года) до конца месяца/квартала.
	ДобавитьОтчетЗаПериод(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, НалоговыйПериод.Начало, ДатаОкончания);

КонецПроцедуры

Процедура ДобавитьОтчетДекларацияНДС(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания)

	// Декларация НДС всегда с начала до конца закончившегося квартала.
	НачалоПериода = НачалоКвартала(ДатаНачала);
	Если КонецКвартала(ДатаОкончания) = КонецДня(ДатаОкончания) Тогда
		КонецПериода = КонецДня(ДатаОкончания);
	Иначе
		КонецПериода = НачалоКвартала(ДатаОкончания) - 1;
	КонецЕсли;
	
	Если НачалоДня(НачалоПериода) >= НачалоДня(КонецПериода) Тогда
		// Квартал еще не закончился, необходимость сдачи отчета еще не наступила.
		Возврат;
	КонецЕсли;

	Если НЕ ПараметрыЗаполнения.ЭтоОрганизация Тогда
		// Т.к. у нас нет данных по контрагенту, то добавим одну единственную строку отчета как пустографку.
		ДобавитьОтчетЗаПериод(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, НачалоПериода, КонецПериода);
		Возврат;
	КонецЕсли;
	
	Если НЕ УчетнаяПолитика.ПлательщикНДС(ПараметрыЗаполнения.Субъект, НачалоПериода)
		И НЕ УчетнаяПолитика.ПлательщикНДС(ПараметрыЗаполнения.Субъект, КонецПериода) Тогда
		// Организация не являлась плательщиком налога в течение отчетного периода.
		Возврат;
	КонецЕсли;

	НалоговыйПериод = УчетНДСВызовСервера.БлижайшийНалоговыйПериодСервер(ПараметрыЗаполнения.Субъект, КонецПериода);

	ДобавитьОтчетЗаПериод(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, НалоговыйПериод.Начало, НалоговыйПериод.Конец);

КонецПроцедуры

Процедура ДобавитьОтчетДекларацияУСН(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания)

	Если НЕ ПараметрыЗаполнения.ЭтоОрганизация Тогда
		// Т.к. у нас нет данных по контрагенту, то добавим одну единственную строку отчета как пустографку.
		ДобавитьОтчетЗаПериод(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);
		Возврат;
	КонецЕсли;
	
	Если НЕ УчетнаяПолитика.ПрименяетсяУСНЗаПериод(ПараметрыЗаполнения.Субъект, ДатаНачала, ДатаОкончания) Тогда
		// Организация не являлась плательщиком налога в течение отчетного периода.
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ПараметрыЗаполнения.ДатаРегистрации) Тогда
		ДатаРегистрации = ПараметрыЗаполнения.ДатаРегистрации;
	Иначе
		ДатаРегистрации = Неопределено;
	КонецЕсли;
	
	НалоговыйПериод = ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод(ПараметрыЗаполнения.Субъект,
		ДатаОкончания,
		Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВДекабре,
		, ДатаРегистрации);

	ДобавитьОтчетЗаПериод(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, НалоговыйПериод.Начало, НалоговыйПериод.Конец);

КонецПроцедуры

Процедура ДобавитьОтчетДекларация3НДФЛ(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания)

	Если ПараметрыЗаполнения.ЭтоЮрЛицо Тогда
		// Юридическое лицо не является плательщиком НДФЛ.
		Возврат;
	КонецЕсли;

	Если НЕ ПараметрыЗаполнения.ЭтоОрганизация Тогда
		// Т.к. у нас нет данных по контрагенту, то добавим одну единственную строку отчета как пустографку.
		ДобавитьОтчетЗаПериод(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);
		Возврат;
	КонецЕсли;
	
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛЗаПериод(ПараметрыЗаполнения.Субъект, ДатаНачала, ДатаОкончания) Тогда
		// ИП не являлся плательщиком налога в течение отчетного периода.
		Возврат;
	КонецЕсли;

	ДобавитьОтчетЗаПериод(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);

КонецПроцедуры

Процедура ДобавитьОтчетДекларацияЕНВД(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания)

	Если НЕ ПараметрыЗаполнения.ЭтоОрганизация Тогда
		// Т.к. у нас нет данных по контрагенту, то добавим одну единственную строку отчета, пользователь может ее удалить, если не применимо.
		ДобавитьОтчетЗаПериод(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);
		Возврат;
	КонецЕсли;
	
	Если НЕ УчетнаяПолитика.ПлательщикЕНВДЗаПериод(ПараметрыЗаполнения.Субъект, ДатаНачала, ДатаОкончания) Тогда
		// Не является плательщиком ЕНВД в периоде в принципе.
		Возврат;
	КонецЕсли;

	// Декларация составляются по каждому налоговому органу.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВсяОрганизация", ПараметрыЗаполнения.ВсяОрганизация);
	Запрос.УстановитьПараметр("ДатаНачала",     ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",  ДатаОкончания);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	ВидыДеятельностиЕНВД.РегистрацияВНалоговомОргане КАК Ссылка,
	|	ВидыДеятельностиЕНВД.РегистрацияВНалоговомОргане.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ВидыДеятельностиЕНВД КАК ВидыДеятельностиЕНВД
	|ГДЕ
	|	ВидыДеятельностиЕНВД.Владелец В(&ВсяОрганизация)
	|	И НЕ ВидыДеятельностиЕНВД.ПометкаУдаления
	|	И ВидыДеятельностиЕНВД.ДатаНачала <= &ДатаОкончания
	|	И (ВидыДеятельностиЕНВД.ДатаПрекращения = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ ВидыДеятельностиЕНВД.ДатаПрекращения >= &ДатаНачала)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		// Добавляем строку по новому 
		СтрокаОтчета = ДобавитьОтчетЗаПериод(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);
		// В качестве уточнения наименования отчета используем наименование налогового органа.
		СтрокаОтчета.УточнениеНаименования = Выборка.Наименование;
		
		// Сохраним в параметрах отчета ссылку на налоговый орган, по которому необходимо формировать книгу.
		СтрокаПараметра                  = СоставОтчетности.ПараметрыОтчетов.Добавить();
		СтрокаПараметра.КлючСтрокиОтчета = СтрокаОтчета.КлючСтрокиОтчета;
		СтрокаПараметра.Имя              = "РегистрацияВНалоговомОргане";
		СтрокаПараметра.Значение         = Выборка.Ссылка;
	
	КонецЦикла;
	
	Если Выборка.Количество() = 0 Тогда
		// Справочник видов деятельности ЕНВД не заполнен, но при этом в настройках системы налогообложения применение ЕНВД указано.
		// Возможно, просто заполнял декларации вручную без помощника.
		// Добавим одну единственную строку отчета как пустографку.
		ДобавитьОтчетЗаПериод(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьОтчетДекларацияЕСХН(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания)

	Если НЕ ПараметрыЗаполнения.ЭтоОрганизация Тогда
		// Т.к. у нас нет данных по контрагенту, то добавим одну единственную строку отчета как пустографку.
		ДобавитьОтчетЗаПериод(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);
		Возврат;
	КонецЕсли;
	
	// В типовой БП 3.0 учет ЕСХН не поддерживается, но с помощью 1С-Отчетности можно создать и отправить декларацию ЕСХН.
	// Поэтому проверим, если такая имеется в перечне форм 1С-Отчетности, то добавляем ее в отчетность для банка.
	// Ищем без учета отметки о сдаче в ФНС, т.к. сам факт создания отчета является признаком того,
	// что организация применяет ЕСХН.
	
	СтрокаВидаОтчетов = ПараметрыЗаполнения.ОписаниеВидовОтчетов.Найти("ДекларацияЕСХН", "ВидОтчета");
	Если СтрокаВидаОтчетов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска = ЗаполнениеФинОтчетностиВБанки.НовыеПараметрыПоискаРеглОтчетов();
	СтрокаПараметровПоиска                = ПараметрыПоиска.Добавить();
	СтрокаПараметровПоиска.Организация    = ПараметрыЗаполнения.Субъект;
	СтрокаПараметровПоиска.ИсточникОтчета = СтрокаВидаОтчетов.ИсточникОтчетаБРО;
	СтрокаПараметровПоиска.ДатаОкончания  = ДатаОкончания;
	
	НайденныеДекларации = ЗаполнениеФинОтчетностиВБанки.ПодобратьРегламентированныеОтчеты(ПараметрыПоиска);
	
	Если НайденныеДекларации.Количество() > 0 Тогда
		// Декларации есть в базе, 
		ДобавитьОтчетЗаПериод(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОтчетРасчетПоСтраховымВзносам(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания)

	// РСВ всегда с начала года до конца закончившегося квартала.
	НачалоПериода = НачалоГода(ДатаНачала);
	Если КонецКвартала(ДатаОкончания) = КонецДня(ДатаОкончания) Тогда
		КонецПериода = КонецДня(ДатаОкончания);
	Иначе
		КонецПериода = НачалоКвартала(ДатаОкончания) - 1;
	КонецЕсли;
	
	Если НачалоДня(НачалоПериода) >= НачалоДня(КонецПериода) Тогда
		// Квартал еще не закончился, необходимость сдачи отчета еще не наступила.
		Возврат;
	КонецЕсли;

	Если НЕ ПараметрыЗаполнения.ЭтоОрганизация Тогда
		// Т.к. у нас нет данных по контрагенту, то добавим одну единственную строку отчета, пользователь может ее удалить, если не применимо.
		ДобавитьОтчетЗаПериод(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, НачалоПериода, КонецПериода);
		Возврат;
	КонецЕсли;
	
	Если НЕ ПараметрыЗаполнения.ЭтоЮрЛицо Тогда
		// Индивидуальный предприниматель может не иметь наемных работников, тогда он отчетность не сдает.
		Если НЕ УчетЗарплаты.ИПИспользуетТрудНаемныхРаботниковЗаПериод(ПараметрыЗаполнения.Субъект, НачалоПериода, КонецПериода) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Расчет представляется по кажому обособленному подразделению, выделенному на отдельный баланс.
	
	// Сначала по организации из шапки, потом по всем остальным.

	// Добавляем строку по самой организации. 
	СтрокаОтчета = ДобавитьОтчетЗаПериод(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, НачалоПериода, КонецПериода);
	// В качестве уточнения наименования отчета используем наименование организации.
	СтрокаОтчета.УточнениеНаименования = ПараметрыЗаполнения.Субъект;
	
	// Сохраним в параметрах отчета ссылку на налоговый орган, по которому необходимо формировать книгу.
	СтрокаПараметра                  = СоставОтчетности.ПараметрыОтчетов.Добавить();
	СтрокаПараметра.КлючСтрокиОтчета = СтрокаОтчета.КлючСтрокиОтчета;
	СтрокаПараметра.Имя              = "Организация";
	СтрокаПараметра.Значение         = ПараметрыЗаполнения.Субъект;
	
	// Потом все остальные обособленные подразделения.
	Для каждого ОбособленноеПодразделение Из ПараметрыЗаполнения.ВсяОрганизация Цикл

		Если ОбособленноеПодразделение = ПараметрыЗаполнения.Субъект Тогда
			Продолжить;
		КонецЕсли;
		
		// Добавляем строку по новому 
		СтрокаОтчета = ДобавитьОтчетЗаПериод(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, НачалоПериода, КонецПериода);
		// В качестве уточнения наименования отчета используем наименование организации.
		СтрокаОтчета.УточнениеНаименования = ОбособленноеПодразделение;
		
		// Сохраним в параметрах отчета ссылку на организацию, по которому необходимо формировать отчет.
		СтрокаПараметра                  = СоставОтчетности.ПараметрыОтчетов.Добавить();
		СтрокаПараметра.КлючСтрокиОтчета = СтрокаОтчета.КлючСтрокиОтчета;
		СтрокаПараметра.Имя              = "Организация";
		СтрокаПараметра.Значение         = ОбособленноеПодразделение;
		
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьОтчетПоСчету(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания)
	
	СтрокаОтчета = ДобавитьОтчетЗаПериод(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);
	// В качестве уточнения наименования укажем номер счета.
	СтрокаОтчета.УточнениеНаименования = СокрЛП(СтрокаНастройкиКомплекта.Счет);
	
КонецПроцедуры

Процедура ДобавитьОтчетНаКомпоновке(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания)
	
	СтрокаОтчета = ДобавитьОтчетЗаПериод(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);
	
КонецПроцедуры

Процедура ДобавитьОтчетКассоваяКнига(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания)
	
	Если НЕ ПараметрыЗаполнения.ЭтоОрганизация Тогда
		// Т.к. у нас нет данных по контрагенту, то добавим одну единственную строку отчета как пустографку.
		ДобавитьОтчетЗаПериод(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);
		Возврат;
	КонецЕсли;
	
	// Выберем все обособленные подразделения, по которым есть остатки и/или обороты по кассе, 
	// а также с учетом видов деятельности - собственные средства или по деятельности платежного агента.
	СчетаКассы = Новый Массив;
	СчетаКассы.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации);    // 50.01
	СчетаКассы.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизацииВал); // 50.21
	СчетаКассы = БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаКассы);
	
	СчетаКассыПлатежногоАгента = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.КассаПлатежногоАгента); // 50.04
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",    ПараметрыЗаполнения.Субъект);
	Запрос.УстановитьПараметр("ВсяОрганизация", ПараметрыЗаполнения.ВсяОрганизация);
	Запрос.УстановитьПараметр("ДатаНачала",     ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",  КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("СчетаКассы",     СчетаКассы);
	Запрос.УстановитьПараметр("СчетаКассыПлатежногоАгента", СчетаКассыПлатежногоАгента);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА Хозрасчетный.Организация = &Организация
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ПорядокСортировкиОрганизаций,
	|	Хозрасчетный.Организация КАК Организация,
	|	Хозрасчетный.Организация.Наименование КАК ОрганизацияНаименование,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Хозрасчетный.Подразделение.ОбособленноеПодразделение, ЛОЖЬ)
	|			ТОГДА Хозрасчетный.Подразделение
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Хозрасчетный.Подразделение.ОбособленноеПодразделение, ЛОЖЬ)
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПорядокСортировкиПодразделений,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Хозрасчетный.Подразделение.ОбособленноеПодразделение, ЛОЖЬ)
	|			ТОГДА Хозрасчетный.Подразделение.Наименование
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ПодразделениеНаименование,
	|	ВЫБОР
	|		КОГДА Хозрасчетный.Счет В (&СчетаКассыПлатежногоАгента)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПлатежныйАгент,
	|	СУММА(Хозрасчетный.СуммаНачальныйОстаток) КАК СуммаНачальныйОстаток,
	|	СУММА(Хозрасчетный.СуммаОборотДт) КАК СуммаОборотДт,
	|	СУММА(Хозрасчетный.СуммаОборотКт) КАК СуммаОборотКт,
	|	СУММА(Хозрасчетный.СуммаКонечныйОстаток) КАК СуммаКонечныйОстаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, , , Счет В (&СчетаКассы, &СчетаКассыПлатежногоАгента), , Организация В (&ВсяОрганизация)) КАК Хозрасчетный
	|
	|СГРУППИРОВАТЬ ПО
	|	Хозрасчетный.Организация,
	|	Хозрасчетный.Организация.Наименование,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Хозрасчетный.Подразделение.ОбособленноеПодразделение, ЛОЖЬ)
	|			ТОГДА Хозрасчетный.Подразделение
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Хозрасчетный.Подразделение.ОбособленноеПодразделение, ЛОЖЬ)
	|			ТОГДА Хозрасчетный.Подразделение.Наименование
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Хозрасчетный.Подразделение.ОбособленноеПодразделение, ЛОЖЬ)
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Хозрасчетный.Счет В (&СчетаКассыПлатежногоАгента)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокСортировкиОрганизаций,
	|	ОрганизацияНаименование,
	|	ПорядокСортировкиПодразделений,
	|	ПодразделениеНаименование,
	|	ПлатежныйАгент";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Подразделение) Тогда
			УточнениеНаименования = Выборка.ПодразделениеНаименование;
		Иначе
			УточнениеНаименования = Выборка.ОрганизацияНаименование;
		КонецЕсли;
		
		// Добавляем строку отчета.
		СтрокаОтчета = ДобавитьОтчетЗаПериод(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);
		Если Выборка.ПлатежныйАгент Тогда
			СтрокаОтчета.УточнениеНаименования = СтрШаблон(НСтр("ru = '%1 (по деятельности платежного агента)'"), УточнениеНаименования);
		Иначе
			СтрокаОтчета.УточнениеНаименования = УточнениеНаименования;
		КонецЕсли;
		СтрокаОтчета.УточнениеНаименования = СокрЛП(СтрокаОтчета.УточнениеНаименования);
		
		// Сохраним в параметрах отчета значения параметров отчета, с которым формировать книгу,
		// если они отличаются от значений по умолчанию.
		Если Выборка.Организация <> ПараметрыЗаполнения.Субъект Тогда
			СтрокаПараметра                  = СоставОтчетности.ПараметрыОтчетов.Добавить();
			СтрокаПараметра.КлючСтрокиОтчета = СтрокаОтчета.КлючСтрокиОтчета;
			СтрокаПараметра.Имя              = "Организация";
			СтрокаПараметра.Значение         = Выборка.Организация;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Подразделение) Тогда
			СтрокаПараметра                  = СоставОтчетности.ПараметрыОтчетов.Добавить();
			СтрокаПараметра.КлючСтрокиОтчета = СтрокаОтчета.КлючСтрокиОтчета;
			СтрокаПараметра.Имя              = "ПодразделениеОрганизации";
			СтрокаПараметра.Значение         = Выборка.Подразделение;
		КонецЕсли;
		
		Если Выборка.ПлатежныйАгент Тогда
			СтрокаПараметра                  = СоставОтчетности.ПараметрыОтчетов.Добавить();
			СтрокаПараметра.КлючСтрокиОтчета = СтрокаОтчета.КлючСтрокиОтчета;
			СтрокаПараметра.Имя              = "ПлатежныйАгент";
			СтрокаПараметра.Значение         = Выборка.ПлатежныйАгент;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьОтчетКнигаУчетаДоходовПатент(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания)
	
	Если ПараметрыЗаполнения.ЭтоЮрЛицо Тогда
		// Патентная система не применяется для юридических лиц.
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыЗаполнения.ЭтоОрганизация Тогда
		// Т.к. у нас нет данных по контрагенту, то добавим одну единственную строку отчета как пустографку,
		// пользователь может ее удалить, если не применимо.
		ДобавитьОтчетЗаПериод(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);
		Возврат;
	КонецЕсли;
	
	Если Не УчетнаяПолитика.ПрименяетсяУСНПатентЗаПериод(ПараметрыЗаполнения.Субъект, ДатаНачала, ДатаОкончания) Тогда
		// Патентная система не применялась в принципе за период.
		Возврат;
	КонецЕсли;
	
	ПатентыОрганизации = Справочники.Патенты.ПатентыОрганизацииЗаПериод(
		ПараметрыЗаполнения.Субъект,
		ДатаНачала,
		ДатаОкончания);
	
	Для каждого Патент Из ПатентыОрганизации Цикл
		
		// Добавляем строку по новому
		СтрокаОтчета = ДобавитьОтчетЗаПериод(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);
		// В качестве уточнения наименования отчета используем наименование патента.
		СтрокаОтчета.УточнениеНаименования = Патент.Наименование;
		
		// Сохраним в параметрах отчета ссылку на патент, по которому необходимо формировать книгу.
		СтрокаПараметра                  = СоставОтчетности.ПараметрыОтчетов.Добавить();
		СтрокаПараметра.КлючСтрокиОтчета = СтрокаОтчета.КлючСтрокиОтчета;
		СтрокаПараметра.Имя              = "Патент";
		СтрокаПараметра.Значение         = Патент.Ссылка;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьОтчетПатент(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания)
	
	Если ПараметрыЗаполнения.ЭтоЮрЛицо Тогда
		// Патентная система не применяется для юридических лиц.
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыЗаполнения.ЭтоОрганизация Тогда
		// Т.к. у нас нет данных по контрагенту, то добавим одну единственную строку отчета как пустографку,
		// пользователь может ее удалить, если не применимо.
		ДобавитьОтчетЗаПериод(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);
		Возврат;
	КонецЕсли;
	
	Если Не УчетнаяПолитика.ПрименяетсяУСНПатентЗаПериод(ПараметрыЗаполнения.Субъект, ДатаНачала, ДатаОкончания) Тогда
		// Патентная система не применялась в принципе за период.
		Возврат;
	КонецЕсли;
	
	ПатентыОрганизации = Справочники.Патенты.ПатентыОрганизацииЗаПериод(
		ПараметрыЗаполнения.Субъект,
		ДатаНачала,
		ДатаОкончания);
	
	Для каждого Патент Из ПатентыОрганизации Цикл
		
		// Добавляем строку по каждому патенту
		СтрокаОтчета = ДобавитьОтчетЗаПериод(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);
		// В качестве уточнения наименования отчета используем наименование патента.
		СтрокаОтчета.УточнениеНаименования = Патент.Наименование;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьОтчетКнигаУчетаДоходовИРасходов(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания)
	
	Если Не ПараметрыЗаполнения.ЭтоОрганизация Тогда
		// Т.к. у нас нет данных по контрагенту, то добавим одну единственную строку отчета как пустографку,
		// пользователь может ее удалить, если не применимо.
		ДобавитьОтчетЗаПериод(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);
		Возврат;
	КонецЕсли;
	
	Если Не УчетнаяПолитика.ПрименяетсяУСНЗаПериод(ПараметрыЗаполнения.Субъект, ДатаНачала, ДатаОкончания) Тогда
		// УСН не применялась в принципе за период.
		Возврат;
	КонецЕсли;
	
	ДобавитьОтчетЗаПериод(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);
	
КонецПроцедуры

Процедура ДобавитьОтчетКнигаУчетаДоходовИРасходовПредпринимателя(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания)
	
	Если ПараметрыЗаполнения.ЭтоЮрЛицо Тогда
		// Это не ИП.
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыЗаполнения.ЭтоОрганизация Тогда
		// Т.к. у нас нет данных по контрагенту, то добавим одну единственную строку отчета как пустографку,
		// пользователь может ее удалить, если не применимо.
		ДобавитьОтчетЗаПериод(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);
		Возврат;
	КонецЕсли;
	
	Если Не УчетнаяПолитика.ПлательщикНДФЛЗаПериод(ПараметрыЗаполнения.Субъект, ДатаНачала, ДатаОкончания) Тогда
		// Не являлся плательщиком НДФЛ в принципе за период.
		Возврат;
	КонецЕсли;
	
	ДобавитьОтчетЗаПериод(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);
	
КонецПроцедуры

Процедура ДобавитьОтчетДопФайлыБухОтчетности(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания)
	
	Если НЕ ПараметрыЗаполнения.ЭтоЮрЛицо Тогда
		// Индивидуальный предприниматель не обязан вести бухгалтерский учет и сдавать бухгалтерскую отчетность.
		Возврат;
	КонецЕсли;
	
	ДобавитьОтчетЗаПериод(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);
	
КонецПроцедуры

Процедура ДобавитьОтчетСправкаБанка(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания)

	Если НЕ ПараметрыЗаполнения.ЭтоОрганизация Тогда
		// Т.к. у нас нет данных по контрагенту, то добавим одну единственную строку отчета, пользователь может ее удалить, если не применимо.
		ДобавитьОтчетЗаПериод(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);
		Возврат;
	КонецЕсли;

	// Справка представляется из каждого банка, где есть счета, кроме самого банка, в который направляется отчетность.
	
	// Выбираем банки из всех банковских счетов организации, которые не закрыты.
	
	// Получим все БИК текущего банка, чтобы их не учитывать.
	РеквизитыБанка = УниверсальныйОбменСБанками.РеквизитыБанка(ПараметрыЗаполнения.Банк, "СписокБИК");
	
	СчетаБанка = Новый Массив;
	СчетаБанка.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета); // 51
	СчетаБанка.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета); // 52
	СчетаБанка.Добавить(ПланыСчетов.Хозрасчетный.СпециальныеСчета); // 55
	СчетаБанка = БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаБанка);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВсяОрганизация", ПараметрыЗаполнения.ВсяОрганизация);
	Запрос.УстановитьПараметр("ИсключаемыеБИК", РеквизитыБанка.СписокБИК);
	Запрос.УстановитьПараметр("ДатаНачала",     ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",  КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("СчетаБанка",     СчетаБанка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Банк.Наименование КАК Наименование
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец В(&ВсяОрганизация)
	|	И НЕ БанковскиеСчета.Банк.Код В (&ИсключаемыеБИК)
	|	И НЕ БанковскиеСчета.ПометкаУдаления
	|	И (БанковскиеСчета.ДатаОткрытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ БанковскиеСчета.ДатаОткрытия <= &ДатаОкончания)
	|	И (БанковскиеСчета.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ БанковскиеСчета.ДатаЗакрытия >= &ДатаНачала)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		// Добавляем строку отчета.
		СтрокаОтчета = ДобавитьОтчетЗаПериод(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);
		// Используем в качестве уточнения наименования название банка.
		// Ссылки на банки в табличной части Параметры не сохраняем, 
		// т.к. справка представляется в произвольной форме из внешней системы типа клиент-банк, по учетным данным БП ее не формируем.
		СтрокаОтчета.УточнениеНаименования = Выборка.Наименование;
	
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьОтчетПроизвольныйФайл(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания)

	// Формируем столько строк в табличной части Отчетность, сколько файлов запросил банк.
	Если ЗначениеЗаполнено(СтрокаНастройкиКомплекта.КоличествоФайлов) Тогда
		КоличествоФайлов = СтрокаНастройкиКомплекта.КоличествоФайлов;
	Иначе
		// Если явно не указано, то считаем, что достаточно одного файла.
		КоличествоФайлов = 1;
	КонецЕсли;
	
	Для НомерФайла = 1 По КоличествоФайлов Цикл

		// Добавляем строку отчета.
		СтрокаОтчета = ДобавитьОтчетЗаПериод(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания);
	
	КонецЦикла;

КонецПроцедуры

Функция ДобавитьОтчетЗаПериод(ПараметрыЗаполнения, СтрокаНастройкиКомплекта, СоставОтчетности, ДатаНачала, ДатаОкончания)
	
	ПараметрыЗаполнения.КлючСтрокиОтчета = ПараметрыЗаполнения.КлючСтрокиОтчета + 1;
	
	СтрокаОтчета = СоставОтчетности.Отчетность.Добавить();
	СтрокаОтчета.КлючСтрокиОтчета             = ПараметрыЗаполнения.КлючСтрокиОтчета;
	СтрокаОтчета.КлючСтрокиСубъекта           = ПараметрыЗаполнения.КлючСтрокиСубъекта;
	СтрокаОтчета.ВидОтчета                    = СтрокаНастройкиКомплекта.ВидОтчета;
	СтрокаОтчета.ИдентификаторСтрокиКомплекта = СтрокаНастройкиКомплекта.ИдентификаторСтрокиКомплекта;
	СтрокаОтчета.ИдентификаторНастройкиОтчета = СтрокаНастройкиКомплекта.ИдентификаторНастройкиОтчета;
	СтрокаОтчета.ДатаНачала                   = ДатаНачала;
	СтрокаОтчета.ДатаОкончания                = ДатаОкончания;
	
	Возврат СтрокаОтчета;
	
КонецФункции

Процедура ИсключитьПовторяющиесяОтчеты(ПараметрыЗаполнения, СоставОтчетности)

	// В процессе разворота по периодам может получиться так, что по одному и тому же отчету
	// за один и тот же период будет несколько строк.
	// Чтобы не показывать такие отчеты несколько раз, исключим дублирующиеся строки.
	//
	// Но при этом необходимо учитывать, что у отчетов могут быть разные параметры формирования,
	// тогда их нельзя исключать. Проверяем эту ситуацию по совпадению идентификатора настройки отчета.

	ИменаКлючевыхРеквизитов = "ВидОтчета, ДатаНачала, ДатаОкончания, УточнениеНаименования";
	
	СоставОтчетности.Отчетность.Индексы.Добавить(ИменаКлючевыхРеквизитов);
	
	Отбор = Новый Структура(ИменаКлючевыхРеквизитов);
	
	ВидыОтчетовПоПериодам = СоставОтчетности.Отчетность.Скопировать(, ИменаКлючевыхРеквизитов);
	ВидыОтчетовПоПериодам.Колонки.Добавить("КоличествоСтрок", ОбщегоНазначения.ОписаниеТипаЧисло(5));
	ВидыОтчетовПоПериодам.ЗаполнитьЗначения(1, "КоличествоСтрок");
	ВидыОтчетовПоПериодам.Свернуть(ИменаКлючевыхРеквизитов, "КоличествоСтрок");
	
	ИдентификаторыНастроекОтчетов = Новый Соответствие;
	
	Для каждого СтрокаВидаОтчета Из ВидыОтчетовПоПериодам Цикл
	
		Если НЕ ЗначениеЗаполнено(СтрокаВидаОтчета.ВидОтчета) Тогда
			// Неизвестный вид отчета пропускаем.
			Продолжить;
		КонецЕсли;
	
		Если СтрокаВидаОтчета.КоличествоСтрок = 1 Тогда
			// Отчет включен в единственном экземпляре, с другими не дублируется.
			Продолжить;
		КонецЕсли;
	
		Если ЗаполнениеФинОтчетностиВБанкиКлиентСервер.ЭтоВнешнийФайл(СтрокаВидаОтчета.ВидОтчета) Тогда
			// Зависимость произвольных файлов от периодов может быть любой.
			// Кроме того, количество файлов может быть задано банком в настройках,
			// например, скан-копии договоров с 5-ю крупнейшими контрагентами.
			// Поэтому их не сокращаем.
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаВидаОтчета);
		СтрокиОтчетов = СоставОтчетности.Отчетность.НайтиСтроки(Отбор);
		
		// Для остальных отчетов проверяем по идентификатору настройки отчета.
		// Если несколько строк сгенерированы на основании одной и той же настройки отчета, 
		// то считаем, что достаточно одного такого отчета за период.
		ИдентификаторыНастроекОтчетов.Очистить();

		Для каждого СтрокаОтчета Из СтрокиОтчетов Цикл

			Если НЕ ЗначениеЗаполнено(СтрокаОтчета.ИдентификаторНастройкиОтчета) Тогда
				Продолжить;
			КонецЕсли;
		
			Если ИдентификаторыНастроекОтчетов[СтрокаОтчета.ИдентификаторНастройкиОтчета] <> Неопределено Тогда
				// Такой отчет уже встречался ранее, поэтому удаляем дублирующуюся строку.
				УдалитьСтрокиОтчетаИзПодчиненныхТабличныхЧастей(СоставОтчетности, СтрокаОтчета.КлючСтрокиОтчета);
				СоставОтчетности.Отчетность.Удалить(СтрокаОтчета);
			Иначе
				ИдентификаторыНастроекОтчетов.Вставить(СтрокаОтчета.ИдентификаторНастройкиОтчета, Истина);
			КонецЕсли;

		КонецЦикла;
	
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область Автозаполнение

Процедура ЗаполнитьОтчет(ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения)
	
	// Отчеты, заполняемые по данным информационной базы.
	Если ВыборкаОтчетность.ВидОтчета = "АнализСчета" Тогда
		
		ЗаполнитьАнализСчета(ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения);
		
	ИначеЕсли ВыборкаОтчетность.ВидОтчета = "ОборотноСальдоваяВедомость" Тогда
		
		ЗаполнитьОСВ(ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения);
		
	ИначеЕсли ВыборкаОтчетность.ВидОтчета = "ОборотноСальдоваяВедомостьПоСчету" Тогда
		
		ЗаполнитьОСВПоСчету(ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения);
		
	ИначеЕсли ВыборкаОтчетность.ВидОтчета = "ОборотыСчета" Тогда
		
		ЗаполнитьОборотыСчета(ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения);
		
	ИначеЕсли ВыборкаОтчетность.ВидОтчета = "КарточкаСчета" Тогда
		
		ЗаполнитьКарточкаСчета(ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения);
		
	ИначеЕсли ВыборкаОтчетность.ВидОтчета = "ВаловаяПрибыль" Тогда
		
		ЗаполнитьВаловаяПрибыль(ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения);
		
	ИначеЕсли ВыборкаОтчетность.ВидОтчета = "ВедомостьАмортизацииОС" Тогда
		
		ЗаполнитьВедомостьАмортизацииОС(ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения);
		
	ИначеЕсли ВыборкаОтчетность.ВидОтчета = "РасшифровкаЗадолженности" Тогда
		
		ЗаполнитьРасшифровкаЗадолженности(ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения);
		
	ИначеЕсли ВыборкаОтчетность.ВидОтчета = "КассоваяКнига" Тогда
		
		ЗаполнитьКассоваяКнига(ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения);
		
	ИначеЕсли ВыборкаОтчетность.ВидОтчета = "КнигаУчетаДоходовПатент" Тогда
		
		ЗаполнитьКнигаУчетаДоходовПатент(ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения);
		
	ИначеЕсли ВыборкаОтчетность.ВидОтчета = "КнигаУчетаДоходовИРасходов" Тогда
		
		ЗаполнитьКнигаУчетаДоходовИРасходов(ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения);
		
	ИначеЕсли ВыборкаОтчетность.ВидОтчета = "КнигаУчетаДоходовИРасходовПредпринимателя" Тогда
		
		ЗаполнитьКнигаУчетаДоходовИРасходовПредпринимателя(ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения);
		
	ИначеЕсли ЗаполнениеФинОтчетностиВБанкиКлиентСервер.ЭтоОтчетБРО(ВыборкаОтчетность.ВидОтчета) Тогда
		// Добавляем в общий список параметры поиска регламентированных отчетов.
		ДобавитьРеглОтчетДляПоиска(ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения);
		
	КонецЕсли;
	
	ДобавитьРезультатПоОтчету(РезультатЗаполнения,
		ПредставлениеСтрокиОтчетности(ВыборкаОтчетность, ПараметрыЗаполнения),
		ВыборкаОтчетность.КлючСтрокиОтчета);

КонецПроцедуры

Процедура ЗаполнитьАнализСчета(ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения)
	
	НастройкиОтчета = НайтиНастройкиОтчета(
		ВыборкаОтчетность.ИдентификаторСтрокиКомплекта,
		ПараметрыЗаполнения.НастройкиКомплекта);
	
	Если НастройкиОтчета = Неопределено Тогда
		// Нет данных о настройках по умолчанию.
		Возврат;
	КонецЕсли;
	
	ПараметрыОтчета = ЗаполнениеФинОтчетностиВБанки.ПараметрыОтчетаАнализСчета(НастройкиОтчета);
	
	ПодготовитьОтчет(ПараметрыОтчета, ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьОСВ(ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения)
	
	НастройкиОтчета = НайтиНастройкиОтчета(
		ВыборкаОтчетность.ИдентификаторСтрокиКомплекта,
		ПараметрыЗаполнения.НастройкиКомплекта);
	
	Если НастройкиОтчета = Неопределено Тогда
		// Нет данных о настройках по умолчанию.
		Возврат;
	КонецЕсли;
	
	ПараметрыОтчета = ЗаполнениеФинОтчетностиВБанки.ПараметрыОтчетаОСВ(НастройкиОтчета);
	
	ПодготовитьОтчет(ПараметрыОтчета, ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьОСВПоСчету(ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения)
	
	НастройкиОтчета = НайтиНастройкиОтчета(
		ВыборкаОтчетность.ИдентификаторСтрокиКомплекта,
		ПараметрыЗаполнения.НастройкиКомплекта);
	
	Если НастройкиОтчета = Неопределено Тогда
		// Нет данных о настройках по умолчанию.
		Возврат;
	КонецЕсли;
	
	ПараметрыОтчета = ЗаполнениеФинОтчетностиВБанки.ПараметрыОтчетаОСВПоСчету(НастройкиОтчета);
	
	ПодготовитьОтчет(ПараметрыОтчета, ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьОборотыСчета(ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения)
	
	НастройкиОтчета = НайтиНастройкиОтчета(
		ВыборкаОтчетность.ИдентификаторСтрокиКомплекта,
		ПараметрыЗаполнения.НастройкиКомплекта);
	
	Если НастройкиОтчета = Неопределено Тогда
		// Нет данных о настройках по умолчанию.
		Возврат;
	КонецЕсли;
	
	ПараметрыОтчета = ЗаполнениеФинОтчетностиВБанки.ПараметрыОтчетаОборотыСчета(НастройкиОтчета);
	
	ПодготовитьОтчет(ПараметрыОтчета, ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьКарточкаСчета(ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения)
	
	НастройкиОтчета = НайтиНастройкиОтчета(
		ВыборкаОтчетность.ИдентификаторСтрокиКомплекта,
		ПараметрыЗаполнения.НастройкиКомплекта);
	
	Если НастройкиОтчета = Неопределено Тогда
		// Нет данных о настройках по умолчанию.
		Возврат;
	КонецЕсли;
	
	ПараметрыОтчета = ЗаполнениеФинОтчетностиВБанки.ПараметрыОтчетаКарточкаСчета(НастройкиОтчета);
	
	ПодготовитьОтчет(ПараметрыОтчета, ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьВаловаяПрибыль(ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения)
	
	НастройкиОтчета = НайтиНастройкиОтчета(
		ВыборкаОтчетность.ИдентификаторСтрокиКомплекта,
		ПараметрыЗаполнения.НастройкиКомплекта);
	
	Если НастройкиОтчета = Неопределено Тогда
		// Нет данных о настройках по умолчанию.
		Возврат;
	КонецЕсли;
	
	ПараметрыОтчета = ЗаполнениеФинОтчетностиВБанки.ПараметрыОтчетаВаловаяПрибыль(НастройкиОтчета);
	
	ПодготовитьОтчет(ПараметрыОтчета, ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьВедомостьАмортизацииОС(ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения)
	
	НастройкиОтчета = НайтиНастройкиОтчета(
		ВыборкаОтчетность.ИдентификаторСтрокиКомплекта,
		ПараметрыЗаполнения.НастройкиКомплекта);
	
	Если НастройкиОтчета = Неопределено Тогда
		// Нет данных о настройках по умолчанию.
		Возврат;
	КонецЕсли;
	
	ПараметрыОтчета = ЗаполнениеФинОтчетностиВБанки.ПараметрыОтчетаВедомостьАмортизацииОС(НастройкиОтчета);
	
	ПодготовитьОтчет(ПараметрыОтчета, ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьРасшифровкаЗадолженности(ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения)
	
	НастройкиОтчета = НайтиНастройкиОтчета(
		ВыборкаОтчетность.ИдентификаторСтрокиКомплекта,
		ПараметрыЗаполнения.НастройкиКомплекта);
	
	Если НастройкиОтчета = Неопределено Тогда
		// Нет данных о настройках по умолчанию.
		Возврат;
	КонецЕсли;
	
	ПараметрыОтчета = ЗаполнениеФинОтчетностиВБанки.ПараметрыОтчетаРасшифровкаЗадолженности(НастройкиОтчета);
	
	ЗаполнитьОбщиеПараметрыОтчета(ПараметрыОтчета, ВыборкаОтчетность);
	
	ПараметрыОтчета.Период = ПараметрыОтчета.КонецПериода;
	
	ПодготовитьОтчет(ПараметрыОтчета, ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьКассоваяКнига(ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения)
	
	НастройкиОтчета = НайтиНастройкиОтчета(
		ВыборкаОтчетность.ИдентификаторСтрокиКомплекта,
		ПараметрыЗаполнения.НастройкиКомплекта);
	
	Если НастройкиОтчета = Неопределено Тогда
		// Нет данных о настройках по умолчанию.
		Возврат;
	КонецЕсли;
	
	ПараметрыОтчета = ЗаполнениеФинОтчетностиВБанки.ПараметрыОтчетаКассоваяКнига(НастройкиОтчета);
	
	ПодготовитьОтчетКассоваяКнига(ПараметрыОтчета, ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьКнигаУчетаДоходовПатент(ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения)
	
	НастройкиОтчета = НайтиНастройкиОтчета(
		ВыборкаОтчетность.ИдентификаторСтрокиКомплекта,
		ПараметрыЗаполнения.НастройкиКомплекта);
	
	Если НастройкиОтчета = Неопределено Тогда
		// Нет данных о настройках по умолчанию.
		Возврат;
	КонецЕсли;
	
	ПараметрыОтчета = ЗаполнениеФинОтчетностиВБанки.ПараметрыОтчетаКнигаУчетаДоходовПатент(НастройкиОтчета);
	
	ПодготовитьОтчетКнигаУчета(ПараметрыОтчета, ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьКнигаУчетаДоходовИРасходов(ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения)
	
	НастройкиОтчета = НайтиНастройкиОтчета(
		ВыборкаОтчетность.ИдентификаторСтрокиКомплекта,
		ПараметрыЗаполнения.НастройкиКомплекта);
	
	Если НастройкиОтчета = Неопределено Тогда
		// Нет данных о настройках по умолчанию.
		Возврат;
	КонецЕсли;
	
	ПараметрыОтчета = ЗаполнениеФинОтчетностиВБанки.ПараметрыОтчетаКнигаУчетаДоходовИРасходов(НастройкиОтчета);
	
	ПодготовитьОтчетКнигаУчета(ПараметрыОтчета, ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьКнигаУчетаДоходовИРасходовПредпринимателя(ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения)
	
	НастройкиОтчета = НайтиНастройкиОтчета(
		ВыборкаОтчетность.ИдентификаторСтрокиКомплекта,
		ПараметрыЗаполнения.НастройкиКомплекта);
	
	Если НастройкиОтчета = Неопределено Тогда
		// Нет данных о настройках по умолчанию.
		Возврат;
	КонецЕсли;
	
	ПараметрыОтчета = ЗаполнениеФинОтчетностиВБанки.ПараметрыОтчетаКнигаУчетаДоходовИРасходовПредпринимателя(
		НастройкиОтчета);
	
	ПодготовитьОтчетКнигаУчета(ПараметрыОтчета, ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьОбщиеПараметрыОтчета(ПараметрыОтчета, ВыборкаОтчетность)
	
	ПараметрыОтчета.Организация   = ВыборкаОтчетность.Субъект;
	ПараметрыОтчета.НачалоПериода = ВыборкаОтчетность.ДатаНачала;
	ПараметрыОтчета.КонецПериода  = ВыборкаОтчетность.ДатаОкончания;
	
КонецПроцедуры

Процедура ПодготовитьОтчет(ПараметрыОтчета, ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения)
	
	Если ПараметрыОтчета = Неопределено Тогда
		// Если счет не найден в плане счетов, то структура параметров формирования отчета не иницализируется,
		// отметим тогда в результате заполнения, что таких данных нет.
		ЗаполнитьДанныеОтсутствуют(ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьОбщиеПараметрыОтчета(ПараметрыОтчета, ВыборкаОтчетность);
	ПараметрыОтчета.ВключатьОбособленныеПодразделения = ВыборкаОтчетность.ВключатьОбособленныеПодразделения;
	
	БухгалтерскиеОтчеты.ПодготовитьСхемуКомпоновкиДанных(ПараметрыОтчета);
	
	// Для выгрузки в банк расшифровку формировать не требуется.
	ПараметрыОтчета.Вставить("ИспользоватьДанныеРасшифровки", Ложь);
	
	РезультатФормированияОтчета = БухгалтерскиеОтчетыВызовСервера.ПодготовитьОтчет(ПараметрыОтчета);
	Если ЭтоАдресВременногоХранилища(РезультатФормированияОтчета.ДанныеРасшифровки) Тогда
		УдалитьИзВременногоХранилища(РезультатФормированияОтчета.ДанныеРасшифровки);
	КонецЕсли;
	
	Если НЕ РезультатФормированияОтчета.Выполнено Тогда
		
		ОписаниеОшибки = ?(ПустаяСтрока(РезультатФормированияОтчета.ПодробноеПредставлениеОшибки),
			РезультатФормированияОтчета.КраткоеПредставлениеОшибки, РезультатФормированияОтчета.ПодробноеПредставлениеОшибки);
		ДобавитьРезультатПоОтчету(РезультатЗаполнения,
			РезультатФормированияОтчета.КраткоеПредставлениеОшибки, ВыборкаОтчетность.КлючСтрокиОтчета,	ОписаниеОшибки);
		Возврат;
		
	КонецЕсли;
	
	// Сохраняем отчет в присоединенный файл.
	ПрисоединитьФайлОтчета(ВыборкаОтчетность,
		ПараметрыЗаполнения,
		РезультатЗаполнения,
		РезультатФормированияОтчета.Результат);
	
КонецПроцедуры

Процедура ПодготовитьОтчетКассоваяКнига(ПараметрыОтчета, ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения)
	
	Если ПараметрыОтчета = Неопределено Тогда
		ЗаполнитьДанныеОтсутствуют(ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьОбщиеПараметрыОтчета(ПараметрыОтчета, ВыборкаОтчетность);
	
	ЗаполнитьПараметрыПоКлючу(ПараметрыЗаполнения.ПараметрыОтчетов, ПараметрыОтчета, ВыборкаОтчетность.КлючСтрокиОтчета);
	
	ПараметрыОтчета = Отчеты[ПараметрыОтчета.ИдентификаторОтчета].ЗаполнитьПараметрыОтчета(ПараметрыОтчета);
	РезультатФормированияОтчета = Отчеты[ПараметрыОтчета.ИдентификаторОтчета].ПодготовитьОтчет(ПараметрыОтчета);
	
	Если Не РезультатФормированияОтчета.Выполнено Тогда
		
		ОписаниеОшибки = ?(ПустаяСтрока(РезультатФормированияОтчета.ПодробноеПредставлениеОшибки),
			РезультатФормированияОтчета.КраткоеПредставлениеОшибки, РезультатФормированияОтчета.ПодробноеПредставлениеОшибки);
		ДобавитьРезультатПоОтчету(РезультатЗаполнения,
			РезультатФормированияОтчета.КраткоеПредставлениеОшибки, ВыборкаОтчетность.КлючСтрокиОтчета,	ОписаниеОшибки);
		Возврат;

	КонецЕсли;
	
	// Сохраняем отчет в присоединенный файл.
	ПрисоединитьФайлОтчета(ВыборкаОтчетность,
		ПараметрыЗаполнения,
		РезультатЗаполнения,
		РезультатФормированияОтчета.Результат);
	
КонецПроцедуры

Процедура ПодготовитьОтчетКнигаУчета(ПараметрыОтчета, ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения)
	
	Если ПараметрыОтчета = Неопределено Тогда
		ЗаполнитьДанныеОтсутствуют(ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьОбщиеПараметрыОтчета(ПараметрыОтчета, ВыборкаОтчетность);
	
	ЗаполнитьПараметрыПоКлючу(ПараметрыЗаполнения.ПараметрыОтчетов, ПараметрыОтчета, ВыборкаОтчетность.КлючСтрокиОтчета);
	
	ПараметрыОтчета = Отчеты[ПараметрыОтчета.ИдентификаторОтчета].ЗаполнитьПараметрыОтчета(ПараметрыОтчета);
	ПроверитьУстановитьРасширение(
		ПараметрыОтчета, ВыборкаОтчетность.ИдентификаторСтрокиКомплекта, ПараметрыЗаполнения.НастройкиКомплекта);
	
	РезультатФормированияОтчета = Отчеты[ПараметрыОтчета.ИдентификаторОтчета].ПодготовитьОбщийФайлОтчета(ПараметрыОтчета);
	
	Если Не РезультатФормированияОтчета.Выполнено Тогда
		
		ОписаниеОшибки = ?(ПустаяСтрока(РезультатФормированияОтчета.ПодробноеПредставлениеОшибки),
			РезультатФормированияОтчета.КраткоеПредставлениеОшибки, РезультатФормированияОтчета.ПодробноеПредставлениеОшибки);
		ДобавитьРезультатПоОтчету(РезультатЗаполнения,
			РезультатФормированияОтчета.КраткоеПредставлениеОшибки, ВыборкаОтчетность.КлючСтрокиОтчета,	ОписаниеОшибки);
		Возврат;

	КонецЕсли;
	
	// Сохраняем отчет в присоединенный файл.
	ПрисоединитьФайлОтчета(ВыборкаОтчетность,
		ПараметрыЗаполнения,
		РезультатЗаполнения,
		РезультатФормированияОтчета.Результат);
	
КонецПроцедуры


Процедура ПрисоединитьФайлОтчета(ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения, ДанныеОтчета)
	
	СтрокаВидаОтчетов = ПараметрыЗаполнения.ОписаниеВидовОтчетов.Найти(ВыборкаОтчетность.ВидОтчета, "ВидОтчета");
	Если СтрокаВидаОтчетов = Неопределено Тогда
		
		ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Неизвестный вид отчета ""%1"" для сохранения присоединенного файла'"),
							ВыборкаОтчетность.ВидОтчета);
		ДобавитьРезультатПоОтчету(РезультатЗаполнения,
			ВыборкаОтчетность.ВидОтчета, ВыборкаОтчетность.КлючСтрокиОтчета, ОписаниеОшибки);
		Возврат;

	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаВидаОтчетов.ШаблонИмениФайла) Тогда
		
		ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Для вида отчета ""%1"" не задан шаблон имени присоединенного файла'"),
							ВыборкаОтчетность.ВидОтчета);
		ДобавитьРезультатПоОтчету(РезультатЗаполнения,
			ВыборкаОтчетность.ВидОтчета, ВыборкаОтчетность.КлючСтрокиОтчета, ОписаниеОшибки);
		Возврат;

	КонецЕсли;
	
	НовоеИмяФайла = ИмяФайлаБезРасширенияПоШаблону(
		ВыборкаОтчетность.ИНН,
		ВыборкаОтчетность.КПП,
		СтрокаВидаОтчетов.ШаблонИмениФайла,
		ВыборкаОтчетность.УточнениеНаименования,
		ВыборкаОтчетность.ДатаНачала,
		ВыборкаОтчетность.ДатаОкончания);
	
	РасширениеФайлаБезТочки = РасширениеФайлаБезТочки(ВыборкаОтчетность.ИдентификаторСтрокиКомплекта, ПараметрыЗаполнения.НастройкиКомплекта);
	
	НовоеИмяФайла = СтрШаблон(НСтр("ru = '%1.%2'"), НовоеИмяФайла, РасширениеФайлаБезТочки);
	
	Попытка
		ФайлОтчета = ДобавитьОбновитьФайлОтчета(
			ПараметрыЗаполнения.ТекущаяСсылка,
			ВыборкаОтчетность.ФайлОтчета,
			ВыборкаОтчетность.ЭтоСобственныйФайл,
			НовоеИмяФайла,
			ДанныеОтчета);
		
		ДанныеОтчета = Неопределено;
		
		// Добавляем в результат заполнения ссылку на присоединенный файл.
		Если ЗначениеЗаполнено(ФайлОтчета) Тогда
			НоваяСтрока = РезультатЗаполнения.Отчетность.Добавить();
			НоваяСтрока.КлючСтрокиОтчета   = ВыборкаОтчетность.КлючСтрокиОтчета;
			НоваяСтрока.КлючСтрокиСубъекта = ВыборкаОтчетность.КлючСтрокиСубъекта;
			НоваяСтрока.ФайлОтчета         = ФайлОтчета;
		Иначе
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Не получилось сохранить присоединенный файл %1'"), НовоеИмяФайла);
		КонецЕсли;
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ИмяСобытия = НСтр("ru = 'Присоединение файла к пакету отчетности'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(
			ЗаполнениеФинОтчетностиВБанки.СобытиеЖурналаРегистрации(ИмяСобытия),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.ФинОтчетВБанк,
			ПараметрыЗаполнения.ТекущаяСсылка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		// Запишем в результат заполнения сведения об ошибке.
		ДобавитьРезультатПоОтчету(РезультатЗаполнения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке),
			ВыборкаОтчетность.КлючСтрокиОтчета,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеОтсутствуют(ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения)
	
	НоваяСтрока = РезультатЗаполнения.Отчетность.Добавить();
	НоваяСтрока.КлючСтрокиОтчета   = ВыборкаОтчетность.КлючСтрокиОтчета;
	НоваяСтрока.КлючСтрокиСубъекта = ВыборкаОтчетность.КлючСтрокиСубъекта;
	НоваяСтрока.ДанныеОтсутствуют  = Истина;
	
КонецПроцедуры

Процедура ДобавитьРеглОтчетДляПоиска(ВыборкаОтчетность, ПараметрыЗаполнения, РезультатЗаполнения) 

	СтрокаВидаОтчета = ПараметрыЗаполнения.ОписаниеВидовОтчетов.Найти(ВыборкаОтчетность.ВидОтчета, "ВидОтчета");
	Если СтрокаВидаОтчета = Неопределено Тогда
		// Неизвестный отчет, пропускаем.
		Возврат;
	КонецЕсли;

	ИсточникиОтчета = Новый Массив;
	Если СтрокаВидаОтчета.ВидОтчета = "БухгалтерскаяОтчетность" Тогда
		// Бух.отчетнось может быть разных видов, поэтому для нее используем в качестве источника общее описание.
		ИсточникиОтчета.Добавить("БухгалтерскаяОтчетность"); 
	ИначеЕсли ЗначениеЗаполнено(СтрокаВидаОтчета.ИсточникОтчетаБРО) Тогда
		ИсточникиОтчета.Добавить(СтрокаВидаОтчета.ИсточникОтчетаБРО);
	ИначеЕсли СтрокаВидаОтчета.ИсточникиОтчетаБРО.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИсточникиОтчета, СтрокаВидаОтчета.ИсточникиОтчетаБРО);
	КонецЕсли;

	// Проверим, есть ли в ТЧ ПараметрыОтчетов есть регистрация в налоговом органе.
	РегистрацииВНО = Новый Массив;
	Если СтрокаВидаОтчета.Параметры.Свойство("РегистрацияВНалоговомОргане") Тогда
		Отбор = Новый Структура();
		Отбор.Вставить("КлючСтрокиОтчета", ВыборкаОтчетность.КлючСтрокиОтчета);
		Отбор.Вставить("Имя",              "РегистрацияВНалоговомОргане");
		
		СтрокиРегистрацийВНалоговыхОрганах = ПараметрыЗаполнения.ПараметрыОтчетов.НайтиСтроки(Отбор);
		Для каждого СтрокаРегистрацииВНО Из СтрокиРегистрацийВНалоговыхОрганах Цикл
			РегистрацииВНО.Добавить(СтрокаРегистрацииВНО.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РегистрацииВНО) Тогда
		// Нет конкретной регистрации, используем пустую ссылку.
		РегистрацииВНО.Добавить(Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
	КонецЕсли;
	
	// Требования банка о наличии отметки о приеме отчетности в ФНС.
	ТребуетсяОтметкаОПриемеОтчетности = Ложь;
	
	СтрокаКомплекта = НайтиСтрокуКомплекта(ВыборкаОтчетность.ИдентификаторСтрокиКомплекта,
		ПараметрыЗаполнения.НастройкиКомплекта);
	Если СтрокаКомплекта <> Неопределено Тогда
		ТребуетсяОтметкаОПриемеОтчетности = СтрокаКомплекта.ТребуетсяОтметкаОПриемеОтчетности;
	КонецЕсли;
	
	Для каждого ИсточникОтчета Из ИсточникиОтчета Цикл

		Для каждого РегистрацияВНО Из РегистрацииВНО Цикл

			НовыеПараметрыПоиска = ПараметрыЗаполнения.ПараметрыПоискаРеглОтчетов.Добавить();
			НовыеПараметрыПоиска.Организация    = ВыборкаОтчетность.Субъект;
			НовыеПараметрыПоиска.ИсточникОтчета = ИсточникОтчета;
			НовыеПараметрыПоиска.ДатаОкончания  = ВыборкаОтчетность.ДатаОкончания;
			НовыеПараметрыПоиска.РегистрацияВНалоговомОргане  = РегистрацияВНО;
			НовыеПараметрыПоиска.ТребуетсяОтметкаОПриемеОтчетности = ТребуетсяОтметкаОПриемеОтчетности;
			
			// Запоминаем ключи строк, чтобы потом загрузить результат подбора.
			НовыеПараметрыПоиска.КлючСтрокиОтчета   = ВыборкаОтчетность.КлючСтрокиОтчета;
			НовыеПараметрыПоиска.КлючСтрокиСубъекта = ВыборкаОтчетность.КлючСтрокиСубъекта;
			
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

Процедура ПодобратьРегламентированныеОтчеты(ПараметрыЗаполнения, РезультатЗаполнения)

	Если ПараметрыЗаполнения.ПараметрыПоискаРеглОтчетов.Количество() = 0 Тогда
		// Банку регламентированные отчеты не требуются.
		Возврат;
	КонецЕсли;
	
	// Выделим из общего списка бух.отчетность.
	ПараметрыПоискаБухОтчетности = ПараметрыЗаполнения.ПараметрыПоискаРеглОтчетов.СкопироватьКолонки();
	ПараметрыПоискаНалоговыхДеклараций = ПараметрыЗаполнения.ПараметрыПоискаРеглОтчетов.СкопироватьКолонки();
	
	Для каждого ПараметрПоиска Из ПараметрыЗаполнения.ПараметрыПоискаРеглОтчетов Цикл
		Если ПараметрПоиска.ИсточникОтчета = "БухгалтерскаяОтчетность" Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыПоискаБухОтчетности.Добавить(), ПараметрПоиска);
		Иначе
			ЗаполнитьЗначенияСвойств(ПараметрыПоискаНалоговыхДеклараций.Добавить(), ПараметрПоиска);
		КонецЕсли;
	КонецЦикла;
	
	// Подбираем бухгалтерскую отчетность.
	Если ПараметрыПоискаБухОтчетности.Количество() > 0 Тогда
	
		БухОтчетность = ЗаполнениеФинОтчетностиВБанки.ПодобратьБухОтчетность(ПараметрыПоискаБухОтчетности);

		// Переносим найденные ссылки в результат заполнения в привязке к ключам строк табличной части.
		// Могут быть несколько экземпляров бух.отчетности за разные периоды, остальные реквизиты поиска у них совпадают.
		// При этом ИсточникОтчета в БухОтчетность содержим фактически найденное значение, а  не обобщенное.
		Отбор = Новый Структура();
		Отбор.Вставить("Организация");
		Отбор.Вставить("ДатаОкончания");
		
		Для каждого РеглОтчет Из БухОтчетность Цикл
		
			ЗаполнитьЗначенияСвойств(Отбор, РеглОтчет);
			
			НайденныеСтроки = ПараметрыПоискаБухОтчетности.НайтиСтроки(Отбор);
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				НоваяСтрока = РезультатЗаполнения.Отчетность.Добавить();
				НоваяСтрока.КлючСтрокиСубъекта = НайденнаяСтрока.КлючСтрокиСубъекта;
				НоваяСтрока.КлючСтрокиОтчета   = НайденнаяСтрока.КлючСтрокиОтчета;
				НоваяСтрока.ОтчетСсылка        = РеглОтчет.Ссылка;
				
				ДобавитьРезультатПоОтчету(РезультатЗаполнения, Строка(РеглОтчет.Ссылка), НайденнаяСтрока.КлючСтрокиОтчета);
				
			КонецЦикла;
		
		КонецЦикла;
		
	КонецЕсли;
	
	// Подбираем налоговые декларации.
	Если ПараметрыПоискаНалоговыхДеклараций.Количество() > 0 Тогда
		НалоговыеДекларации = ЗаполнениеФинОтчетностиВБанки.ПодобратьРегламентированныеОтчеты(
			ПараметрыПоискаНалоговыхДеклараций);
			
		// Переносим найденные ссылки в результат заполнения в привязке к ключам строк табличной части.
		ИгнорируемыеКолонки = Новый Структура;
		ИгнорируемыеКолонки.Вставить("КлючСтрокиСубъекта");
		ИгнорируемыеКолонки.Вставить("КлючСтрокиОтчета");
		ИгнорируемыеКолонки.Вставить("ТребуетсяОтметкаОПриемеОтчетности");
		
		Отбор = Новый Структура();
		Для каждого Колонка Из ПараметрыЗаполнения.ПараметрыПоискаРеглОтчетов.Колонки Цикл
			Если ИгнорируемыеКолонки.Свойство(Колонка.Имя) Тогда
				Продолжить;
			КонецЕсли;
			Отбор.Вставить(Колонка.имя);
		КонецЦикла;
		
		Для каждого РеглОтчет Из НалоговыеДекларации Цикл
		
			ЗаполнитьЗначенияСвойств(Отбор, РеглОтчет);
		
			НайденныеСтроки = ПараметрыПоискаНалоговыхДеклараций.НайтиСтроки(Отбор);
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НоваяСтрока = РезультатЗаполнения.Отчетность.Добавить();
				
				НоваяСтрока.КлючСтрокиСубъекта = НайденнаяСтрока.КлючСтрокиСубъекта;
				НоваяСтрока.КлючСтрокиОтчета   = НайденнаяСтрока.КлючСтрокиОтчета;
				НоваяСтрока.ОтчетСсылка        = РеглОтчет.Ссылка;
				
				ДобавитьРезультатПоОтчету(РезультатЗаполнения, Строка(РеглОтчет.Ссылка), НайденнаяСтрока.КлючСтрокиОтчета);
				
			КонецЦикла;
		
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьУстановитьРасширение(ПараметрыОтчета, ИдентификаторСтрокиКомплекта, НастройкиКомплекта) Экспорт
	
	РасширениеФайлаБезТочки = РасширениеФайлаБезТочки(ИдентификаторСтрокиКомплекта, НастройкиКомплекта);
	Если ЗначениеЗаполнено(РасширениеФайлаБезТочки) И ПараметрыОтчета.Расширение <> РасширениеФайлаБезТочки Тогда
		ТипФайла = ЗаполнениеФинОтчетностиВБанкиКлиентСервер.ТипФайлаПакетаОтображаемыхДокументовПоРасширению(
			РасширениеФайлаБезТочки);
		
		ПараметрыОтчета.Вставить("Расширение", РасширениеФайлаБезТочки);
		ПараметрыОтчета.Вставить("ТипФайла",   ТипФайла);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрисоединенныеФайлы

// Заменяет расширение у файла.
//
// Параметры:
//  ИмяФайла     - Строка - со старым расширением.
//  ЦелевойФормат - ТипФайлаТабличногоДокумента, Строка - к какому расширению привести.
//  ПоследнийИспользовавшийся - Структура - предыдущий результат сопоставления типа и расширения (для кеширования).
//
// Возвращаемое значение:
//   Строка      - имя файла с новым расширением.
//
Функция ИмяФайлаПоТипуФайла(Знач ИмяФайла, Знач ЦелевойФормат, ПоследнийИспользовавшийся = Неопределено)
	
	// Убираем старое расширение от файла.
	ДлинаРасширения = СтрДлина(ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяФайла));
	Если ДлинаРасширения > 0 Тогда
		ИмяФайла = Лев(ИмяФайла, СтрДлина(ИмяФайла) - ДлинаРасширения - 1);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЦелевойФормат) Тогда
		Возврат ИмяФайла + ".bin";
	ИначеЕсли ТипЗнч(ЦелевойФормат) = Тип("Строка") Тогда
		Возврат ИмяФайла + "." + ЦелевойФормат;
	КонецЕсли;

	Если ПоследнийИспользовавшийся = Неопределено Тогда

		ПоследнийИспользовавшийся = Новый Структура;
		ПоследнийИспользовавшийся.Вставить("ТипФайлаТабличногоДокумента", ТипФайлаТабличногоДокумента.MXL);
		ПоследнийИспользовавшийся.Вставить("Расширение", "mxl");
		
	КонецЕсли;
	Если ЦелевойФормат = ПоследнийИспользовавшийся.ТипФайлаТабличногоДокумента Тогда
		// Если это очередной файл, для которого уже было определено расширение.
		Возврат ИмяФайла + "." + ПоследнийИспользовавшийся.Расширение;
	КонецЕсли;
	
	// Нужно подобрать расширение.
	ТипыФорматов = СтандартныеПодсистемыСервер.НастройкиФорматовСохраненияТабличногоДокумента();
	ТипФормата = ТипыФорматов.Найти(ЦелевойФормат, "ТипФайлаТабличногоДокумента");
	Если ТипФормата = Неопределено Тогда
		
		ПоследнийИспользовавшийся.ТипФайлаТабличногоДокумента = ЦелевойФормат;
		ПоследнийИспользовавшийся.Расширение = НРег(ЦелевойФормат);
		
	Иначе
		
		ПоследнийИспользовавшийся = ТипФормата;
		
	КонецЕсли;
		
	Возврат ИмяФайла + "." + ПоследнийИспользовавшийся.Расширение;
	
КонецФункции

Функция ВыгрузитьПрисоединенныйФайл(ФайлОтчета, ОтчетСсылка = Неопределено)
	
	РезультатВыгрузки = РезультатВыгрузки();

	ПараметрыДанных = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
	Попытка
		ИнформацияОФайле = РаботаСФайлами.ДанныеФайла(ФайлОтчета, ПараметрыДанных);
	Исключение
		
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ИмяСобытия = НСтр("ru = 'Получение данных присоединенного файла'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(
			ЗаполнениеФинОтчетностиВБанки.СобытиеЖурналаРегистрации(ИмяСобытия),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.ФинОтчетВБанк,
			ФайлОтчета,
			ПредставлениеОшибки);
		
		ПредставлениеОтчета = ?(ЗначениеЗаполнено(ОтчетСсылка),
			РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(ОтчетСсылка),
			Строка(ФайлОтчета));
		ДобавитьРезультатПоОтчету(РезультатВыгрузки, ПредставлениеОтчета, , ПредставлениеОшибки);
		Возврат РезультатВыгрузки;
		
	КонецПопытки;
		
	РезультатВыгрузки.Вставить("ИнформацияОФайле", ИнформацияОФайле);
		
	Возврат РезультатВыгрузки;
	
КонецФункции

Процедура ГотовностьКОтправкеРеглОтчета(ДанныеДляПроверки, ПараметрыПроверки, РезультатПроверки)

	РеквизитыФайла = ПараметрыПроверки.РеквизитыФайла;
	
	Если ЗначениеЗаполнено(ДанныеДляПроверки.ФайлОтчета)
	   И ДанныеДляПроверки.ВерсияДанныхСсылка = ДанныеДляПроверки.ВерсияДанныхОтчетность Тогда
		// Выгрузка регл.отчета уже делалась, и она актуальна.
		ГотовностьКОтправкеПрисоединенногоФайла(ДанныеДляПроверки, ПараметрыПроверки, РезультатПроверки);
		
	ИначеЕсли ЗаполнениеФинОтчетностиВБанкиКлиентСервер.ЭтоОтчетБРО(ДанныеДляПроверки.ВидОтчета) Тогда
		// Актуальной ранее подписанной выгрузки регл.отчета нет. Проверим, можем ли мы ее сделать.
		
		Отчет = ДобавитьРезультатПоОтчету(РезультатПроверки, "", ДанныеДляПроверки.КлючСтрокиОтчета);

		Если ПараметрыПроверки.ТолькоПроверка Тогда
			// Для оптимизации проверим быстро проверяемое условие.
			СостояниеОтчета = ИнтерфейсыВзаимодействияБРО.СостояниеДокумента(ДанныеДляПроверки.ОтчетСсылка);
			ПроверкаПройдена = СостояниеОтчета.Сдано И СостояниеОтчета.Отправлено;
			
		Иначе
			
			ПроверкаПройдена = Ложь;
			
		КонецЕсли;
		Если Не ПроверкаПройдена Тогда // для проверки нужно выгрузить отчет в файл
			
			ФорматПреобразования = ФорматПреобразованияРеглОтчета(ПараметрыПроверки.ФорматыСохранения, ДанныеДляПроверки);
			РезультатВыгрузкиФайла = ВыгрузитьРегламентированныйОтчет(
				ДанныеДляПроверки, ФорматПреобразования, ПараметрыПроверки.КешСхемВыгрузкиБО, РезультатПроверки.Каталог); 
				
		КонецЕсли;
			
		Если ПроверкаПройдена Или РезультатВыгрузкиФайла.Выполнено Тогда // регл.отчет выгружается без ошибок
			
			ПодписанЭП = Истина;
			Если ПроверкаПройдена Тогда // для оптимизации, если нужна была только проверка
				// Отчетность имеет подписи ФНС. Перед отправкой может понадобиться выгрузить xls-файлы и подписать их.
				Отчет.ВариантВыгрузки = "Дополнительно";

			Иначе
				
				Отчет.ВариантВыгрузки = РезультатВыгрузкиФайла.Подписать;
				Если РезультатВыгрузкиФайла.Подписать = "Файл" Тогда
					// Подписать отдельный файл через БСП.
					ПодписанЭП = Ложь;

				ИначеЕсли РезультатВыгрузкиФайла.Подписать = "Дополнительно" Тогда
					// Отправляем на подпись только дополнительные файлы, предназначенные для пользовательского представления.
					ПодписанЭП = Ложь;
					РезультатПроверки.ПодготовленныеДанныеОтчета = РезультатВыгрузкиФайла.Каталог; // где подписываемые данные
					РезультатПроверки.ПодготовленныеДанныеПодписи = РезультатВыгрузкиФайла.ОтчетностьПоКлючамСтрок; // какие файлы подписывать
					
				ИначеЕсли РезультатВыгрузкиФайла.Подписать = "Архив" Тогда
					// Все файлы должны быть подписаны.
					// Если есть хотя бы одна подпись, то архив считается подписанным.
					ПодписанЭП = (НайтиФайлы(РезультатВыгрузкиФайла.Каталог, "*." + РасширениеЭлектроннойПодписи()).Количество() > 0);
					РезультатПроверки.ПодготовленныеДанныеОтчета = РезультатВыгрузкиФайла.Каталог; // где подписываемые данные
					
				КонецЕсли;
						
			КонецЕсли;

			Если ПодписанЭП Тогда
				
				Если Не ПроверкаПройдена И ПустаяСтрока(Отчет.Представление) Тогда
					Отчет.Представление = РезультатВыгрузкиФайла.ИмяАрхива;
				КонецЕсли;
				
			Иначе

				Если ПараметрыПроверки.ДолженБытьУжеПодписан Тогда
					// Отчет нельзя подписать при выгрузке.
					РезультатПроверки.Выполнено = Ложь;
					Отчет.Представление = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(ДанныеДляПроверки.ОтчетСсылка);
					Отчет.ОписаниеОшибки = НСтр("ru = 'Регламентированный отчет не подписан'");
					Возврат;
					
				Иначе
					// Тогда подпишем его сейчас, выгрузив файлы из сформированного архива.
					Отчет.Представление = РезультатВыгрузкиФайла.ИмяАрхива;
					Отчет.НужноПодписать = Истина;
					
				КонецЕсли;

			КонецЕсли;
				
			Если ПараметрыПроверки.ТолькоПроверка Или Не РезультатПроверки.Выполнено Тогда
				
				Если (Отчет.ВариантВыгрузки = "Дополнительно" Или Отчет.ВариантВыгрузки = "Архив")
				   И Не ПустаяСтрока(РезультатПроверки.ПодготовленныеДанныеОтчета) Тогда

				    УдалитьВременныйКаталог(РезультатПроверки.ПодготовленныеДанныеОтчета, ПараметрыПроверки.Предмет);
				   
				КонецЕсли;

			Иначе
			   
				Если Отчет.ВариантВыгрузки <> "Дополнительно" И Отчет.ВариантВыгрузки <> "Архив" Тогда

					РезультатПроверки.ПодготовленныеДанныеОтчета = Новый ДвоичныеДанные(
						РезультатВыгрузкиФайла.Каталог + РезультатВыгрузкиФайла.ОтчетностьПоКлючамСтрок[0].Представление);

				КонецЕсли;
			   
			КонецЕсли;
			
		Иначе // если мы не можем выгрузить отчет, то не сможем его и подписать

			РезультатПроверки.Выполнено = Ложь;
			Ошибка = РезультатВыгрузкиФайла.ОтчетностьПоКлючамСтрок[0];
			Отчет.Представление     = Ошибка.Представление;
			Отчет.ОписаниеОшибки    = Ошибка.ОписаниеОшибки;
			Отчет.ДетализацияОшибок = Ошибка.ДетализацияОшибок;
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		РезультатПроверки.Выполнено = Ложь;
		Отчет = РезультатПроверки.ОтчетностьПоКлючамСтрок.Добавить();
		Отчет.КлючСтрокиОтчета = ДанныеДляПроверки.КлючСтрокиОтчета;
		Отчет.Представление = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(ДанныеДляПроверки.ОтчетСсылка);
		Отчет.ОписаниеОшибки = СтрШаблон(
			НСтр("ru = 'Указан неподдерживаемый вид отчета ""%1"" из сервиса 1С:ФинОтчетность'"), ДанныеДляПроверки.ВидОтчета);
		Возврат;
		
	КонецЕсли;
	
	Если Отчет <> Неопределено И ПараметрыПроверки.ТолькоПроверка Тогда
		
		РезультатПроверки.ПодготовленныеДанныеОтчета = Неопределено;
		РезультатПроверки.ПодготовленныеДанныеПодписи = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ГотовностьКОтправкеПрисоединенногоФайла(ДанныеДляПроверки, ПараметрыПроверки, РезультатПроверки)
	
	РеквизитыФайла = ПараметрыПроверки.РеквизитыФайла;
	ПредставлениеОтчета = ДобавитьУникальныйИдентификатор(РеквизитыФайла.Наименование)
		+ ?(ПустаяСтрока(РеквизитыФайла.Расширение), "", "." + РеквизитыФайла.Расширение);
	Отчет = ДобавитьРезультатПоОтчету(РезультатПроверки, ПредставлениеОтчета, ДанныеДляПроверки.КлючСтрокиОтчета);

	ЭтоВыгрузкаРеглОтчета = ЗначениеЗаполнено(ДанныеДляПроверки.ОтчетСсылка);

	Если ДанныеДляПроверки.ФайлОтчетаСодержитЭП Тогда // архив с подписями внутри
		
		Если ЭтоИмяФайлаАрхива(РеквизитыФайла.Расширение) Тогда
			
			Отчет.ВариантВыгрузки = "Архив";
			
			Если Не ПараметрыПроверки.ТолькоПроверка И РезультатПроверки.Выполнено Тогда
					
				РезультатВыгрузки = ВыгрузитьПрисоединенныйФайл(ДанныеДляПроверки.ФайлОтчета, ДанныеДляПроверки.ОтчетСсылка);
				Если Не РезультатВыгрузки.Выполнено Тогда
					
					РезультатПроверки.Выполнено = Ложь;
					Ошибка = РезультатВыгрузки.ОтчетностьПоКлючамСтрок[0];
					Если ЭтоВыгрузкаРеглОтчета Тогда
						Отчет.ОписаниеОшибки = НСтр("ru = 'Ошибка при извлечении архива ранее подписанной выгрузки регламентированного отчета.
                                                     |%1'");
						Отчет.Представление = Ошибка.Представление;
					Иначе
						Отчет.ОписаниеОшибки = НСтр("ru = 'Ошибка при извлечении присоединенного файла.
                                                     |%1'");
					КонецЕсли;
					Отчет.ОписаниеОшибки = СтрШаблон(Отчет.ОписаниеОшибки, Ошибка.ОписаниеОшибки);
					Возврат;
					
				КонецЕсли;
				
				Отчет.Представление = РезультатВыгрузки.ИнформацияОФайле.ИмяФайла;
				РезультатПроверки.ПодготовленныеДанныеОтчета = ПолучитьИзВременногоХранилища(РезультатВыгрузки.ИнформацияОФайле.СсылкаНаДвоичныеДанныеФайла);
				Если Не ЗаполнениеФинОтчетностиВБанки.ЕстьПодписьВнутриАрхива(РезультатПроверки.ПодготовленныеДанныеОтчета) Тогда
					
					РезультатПроверки.Выполнено = Ложь;
					Если ЭтоВыгрузкаРеглОтчета Тогда
						Отчет.ОписаниеОшибки = НСтр("ru = 'Архив выгрузки регламентированного отчета помечен как подписанный,
                                                     |но подписей не содержит'");
						Отчет.Представление = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(ДанныеДляПроверки.ОтчетСсылка);
					Иначе
						Отчет.ОписаниеОшибки = НСтр("ru = 'Архив помечен как подписанный, но подписей не содержит'");
					КонецЕсли;
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			РезультатПроверки.Выполнено = Ложь;
			Отчет.ОписаниеОшибки = НСтр("ru = 'Флаг ""ФайлОтчетаСодержитЭП"" установлен для файла, не являющегося архивом'");
			Если ЭтоВыгрузкаРеглОтчета Тогда
				Отчет.Представление = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(ДанныеДляПроверки.ОтчетСсылка);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе // присоединенный файл, подписанный через БСП
		
		Если РеквизитыФайла.ПодписанЭП Тогда

			ИнформацияОПодписи = ДанныеПодписиФайла(ДанныеДляПроверки.ФайлОтчета);
			Если ИнформацияОПодписи <> Неопределено Тогда
				Отчет.ВариантВыгрузки = "Файл";
				РезультатПроверки.ПодготовленныеДанныеПодписи = ИнформацияОПодписи.Подпись;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Отчет.ВариантВыгрузки <> "Файл" Тогда
				
			Если ПараметрыПроверки.ДолженБытьУжеПодписан Тогда
			
				РезультатПроверки.Выполнено = Ложь;
				Если ЭтоВыгрузкаРеглОтчета Тогда
					Отчет.ОписаниеОшибки = НСтр("ru = 'Выгрузка отчета подготовлена, но не подписана'");
					Отчет.Представление = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(ДанныеДляПроверки.ОтчетСсылка);
				Иначе
					Отчет.ОписаниеОшибки = НСтр("ru = 'Отчет не подписан'");
				КонецЕсли;
				Возврат;
				
			КонецЕсли;
			
			Отчет.ВариантВыгрузки = "Файл";
			Отчет.НужноПодписать = Истина;
			
		КонецЕсли;
		
		Если Не ПараметрыПроверки.ТолькоПроверка // в режиме проверки данные извлекать не нужно
		   И РезультатПроверки.Выполнено Тогда   // если уже были ошибки, препятствующие отправке, то далее данные извлекать не нужно
		   
			РезультатВыгрузки = ВыгрузитьПрисоединенныйФайл(ДанныеДляПроверки.ФайлОтчета, ДанныеДляПроверки.ОтчетСсылка);
			Если Не РезультатВыгрузки.Выполнено Тогда
				
				РезультатПроверки.Выполнено = Ложь;
				Ошибка = РезультатВыгрузки.ОтчетностьПоКлючамСтрок[0];
				Если ЭтоВыгрузкаРеглОтчета Тогда
					Отчет.ОписаниеОшибки = НСтр("ru = 'Ошибка при извлечении сохраненного файла выгрузки регламентированного отчета.
                                                       |%1'");
					Отчет.Представление = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(ДанныеДляПроверки.ОтчетСсылка);
				Иначе
					Отчет.ОписаниеОшибки = НСтр("ru = 'Ошибка при извлечении присоединенного файла.
                                                 |%1'");
				КонецЕсли;
				Отчет.ОписаниеОшибки = СтрШаблон(Отчет.ОписаниеОшибки, Ошибка.ОписаниеОшибки);
				Возврат;
				
			КонецЕсли;
			
			РезультатПроверки.ПодготовленныеДанныеОтчета = ПолучитьИзВременногоХранилища(РезультатВыгрузки.ИнформацияОФайле.СсылкаНаДвоичныеДанныеФайла);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отчет <> Неопределено И ПараметрыПроверки.ТолькоПроверка Тогда
		
		РезультатПроверки.ПодготовленныеДанныеОтчета = Неопределено;
		РезультатПроверки.ПодготовленныеДанныеПодписи = Неопределено;
		
	КонецЕсли; 
	
КонецПроцедуры

// Создает папки и сохраняет туда файлы, входящие в финансовый отчет для банка.
//
// Параметры:
//  ФинОтчет - ДокументСсылка.ФинОтчетВБанк - откуда берутся файлы.
//  ФорматыСохранения - Соответствие - ключ = ИдентификаторСтрокиКомплекта,
//                                     значение = см. XDTO-пакет ФинОтчетностьВБанки, тип ФорматыСохраненияОтчетов
//
// Возвращаемое значение:
//   Структура - результат выгрузки и создания архива. См. РезультатВыгрузки()  
//
Функция ВыгрузитьФайлыПакета(ФинОтчет, ФорматыСохранения, Прогрессор)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ФинОтчетВБанкЭкономическиеСубъекты.Субъект КАК Субъект,
	|	ФинОтчетВБанкЭкономическиеСубъекты.Субъект.ИНН КАК ИНН,
	|	ФинОтчетВБанкЭкономическиеСубъекты.Субъект.КПП КАК КПП,
	|	ФинОтчетВБанкЭкономическиеСубъекты.Субъект.Наименование КАК Наименование,
	|	ФинОтчетВБанкОтчетность.ОтчетСсылка КАК ОтчетСсылка,
	|	ФинОтчетВБанкОтчетность.ФайлОтчета КАК ФайлОтчета,
	|	ФинОтчетВБанкОтчетность.ВидОтчета КАК ВидОтчета,
	|	ФинОтчетВБанкОтчетность.ФайлОтчетаСодержитЭП КАК ФайлОтчетаСодержитЭП,
	|	ФинОтчетВБанкОтчетность.ОтчетСсылка.ВерсияДанных КАК ВерсияДанныхСсылка,
	|	ФинОтчетВБанкОтчетность.ВерсияДанныхОтчета КАК ВерсияДанныхОтчетность,
	|	ФинОтчетВБанкОтчетность.КлючСтрокиОтчета КАК КлючСтрокиОтчета,
	|	ФинОтчетВБанкОтчетность.ИдентификаторСтрокиКомплекта КАК ИдентификаторСтрокиКомплекта
	|ИЗ
	|	Документ.ФинОтчетВБанк.ЭкономическиеСубъекты КАК ФинОтчетВБанкЭкономическиеСубъекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ФинОтчетВБанк.Отчетность КАК ФинОтчетВБанкОтчетность
	|		ПО ФинОтчетВБанкЭкономическиеСубъекты.Ссылка = ФинОтчетВБанкОтчетность.Ссылка
	|			И ФинОтчетВБанкЭкономическиеСубъекты.КлючСтрокиСубъекта = ФинОтчетВБанкОтчетность.КлючСтрокиСубъекта
	|ГДЕ
	|	ФинОтчетВБанкОтчетность.Ссылка = &ФинОтчет
	|	И НЕ ФинОтчетВБанкОтчетность.ДанныеОтсутствуют
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИНН,
	|	КПП");
	Запрос.УстановитьПараметр("ФинОтчет", ФинОтчет);
	Выборка = Запрос.Выполнить().Выбрать();

	РезультатВыгрузки = РезультатВыгрузки();
	КолонкиВыгружаемого = РезультатВыгрузки.ОтчетностьПоКлючамСтрок.Колонки;
	КолонкиВыгружаемого.Добавить("ПапкаСубъекта",   Новый ОписаниеТипов("Строка"));
	КолонкиВыгружаемого.Добавить("ИмяПодписи",      Новый ОписаниеТипов("Строка"));
	КолонкиВыгружаемого.Добавить("ИмяСертификата",  Новый ОписаниеТипов("Строка"));
	
	// В зависимости от источника данных и состояния подписания могут быть различные варианты подготовки файлов.
	// "Файл" - отдельный файл;
	// "Архив" - файлы внутри архива;
	// "Дополнительно" - содержимое неоднородно или требует дополнительных действий (файл без подписи или архив,
	//                   где часть файлов подписана не нами).
	КолонкиВыгружаемого.Добавить("ВариантВыгрузки", ОбщегоНазначения.ОписаниеТипаСтрока(25));
	
	РезультатВыгрузки.Каталог = ФайловаяСистема.СоздатьВременныйКаталог();

	КешСхемВыгрузкиБО = Новый Структура;
	ПоследнийСубъект = Неопределено;
	ПоследнийКаталог = "";
	НомерКоллизии = 0;
	
	РассчитатьШагПрогрессора(Прогрессор, Выборка.Количество());
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.ОтчетСсылка) И Не ЗначениеЗаполнено(Выборка.ФайлОтчета) Тогда
			Продолжить;
		КонецЕсли;
		
		СообщитьПрогресс(Прогрессор);
		
		Если ПоследнийСубъект <> Выборка.Субъект Тогда
			
			РезультатВыгрузки.ИмяАрхива = СокрЛП(Выборка.ИНН) + " "
				+ ?(ПустаяСтрока(Выборка.КПП), "", СокрЛП(Выборка.КПП) + " ")
				+ СокрП(ЗаменитьНедопустимыеСимволыВИмениФайла(Лев(Выборка.Наименование, 50)));
			СоздаваемыйКаталог = РезультатВыгрузки.Каталог + РезультатВыгрузки.ИмяАрхива;
			ЭталоннаяЧастьПути = Лев(ПоследнийКаталог, СтрДлина(ПоследнийКаталог) - ?(НомерКоллизии = 0, 1, 5));
			Если СоздаваемыйКаталог = ЭталоннаяЧастьПути Тогда
				НомерКоллизии = НомерКоллизии + 1;
				СоздаваемыйКаталог = СоздаваемыйКаталог + " (" + НомерКоллизии + ")";
				РезультатВыгрузки.ИмяАрхива = РезультатВыгрузки.ИмяАрхива + " (" + НомерКоллизии + ")";
			Иначе
				НомерКоллизии = 0;
			КонецЕсли;
			ПоследнийКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(СоздаваемыйКаталог);
			СоздатьКаталог(ПоследнийКаталог);
			ПоследнийСубъект = Выборка.Субъект;
			
		КонецЕсли;

		Если ЗначениеЗаполнено(Выборка.ОтчетСсылка) Тогда
			
			Если ЗначениеЗаполнено(Выборка.ФайлОтчета)
			   И Выборка.ВерсияДанныхСсылка = Выборка.ВерсияДанныхОтчетность Тогда
				// Сохраним уже сформированный и подписанный файл.
				ПараметрыДанных = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
				Попытка
					ИнформацияОФайле = РаботаСФайлами.ДанныеФайла(Выборка.ФайлОтчета, ПараметрыДанных);
				Исключение
					
					ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		            ИмяСобытия = НСтр("ru = 'Получение данных присоединенного файла'", ОбщегоНазначения.КодОсновногоЯзыка());
					ЗаписьЖурналаРегистрации(
						ЗаполнениеФинОтчетностиВБанки.СобытиеЖурналаРегистрации(ИмяСобытия),
						УровеньЖурналаРегистрации.Ошибка,
						Метаданные.Документы.ФинОтчетВБанк,
						Выборка.ФайлОтчета,
						ПредставлениеОшибки);
					
					Ошибка = ДобавитьРезультатПоОтчету(РезультатВыгрузки,
						РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Выборка.ОтчетСсылка),
						Выборка.КлючСтрокиОтчета,
						СтрШаблон(НСтр("ru = 'Ошибка при сохранении файла ранее подписанной выгрузки регламентированного отчета.
                                        |%1'"), ПредставлениеОшибки));
					Ошибка.ПапкаСубъекта = РезультатВыгрузки.ИмяАрхива;
					Прервать;
					
				КонецПопытки;
				
				Если ЭтоИмяФайлаАрхива(ИнформацияОФайле.Расширение) Тогда // подписи внутри архива
					
					Выгруженное = ДобавитьРезультатПоОтчету(РезультатВыгрузки,
						ЗаменитьНедопустимыеСимволыВИмениФайла(ИнформацияОФайле.ИмяФайла),
						Выборка.КлючСтрокиОтчета);
					Выгруженное.ПапкаСубъекта   = РезультатВыгрузки.ИмяАрхива;
					Выгруженное.ВариантВыгрузки = "Архив";

					ПолучитьИзВременногоХранилища(ИнформацияОФайле.СсылкаНаДвоичныеДанныеФайла).Записать(
						ПоследнийКаталог + Выгруженное.Представление);
					
				Иначе // подписи отдельно от файла
					
					Выгруженное = ДобавитьРезультатПоОтчету(РезультатВыгрузки,
						ЗаменитьНедопустимыеСимволыВИмениФайла(ИнформацияОФайле.ИмяФайла),
						Выборка.КлючСтрокиОтчета);
					Выгруженное.ПапкаСубъекта   = РезультатВыгрузки.ИмяАрхива;
					Выгруженное.ВариантВыгрузки = "Дополнительно"; // по-умолчанию, если нет ни одной верной подписи

					ПолучитьИзВременногоХранилища(ИнформацияОФайле.СсылкаНаДвоичныеДанныеФайла).Записать(
						ПоследнийКаталог + Выгруженное.Представление);
					
					ИнформацияОПодписи = ДанныеПодписиФайла(Выборка.ФайлОтчета);
					Если ИнформацияОПодписи <> Неопределено Тогда

						Выгруженное.ВариантВыгрузки = "Файл"; // присоединенный файл подписан
						
						Выгруженное.ИмяПодписи = ИнформацияОПодписи.ИмяФайлаПодписи;
						ИнформацияОПодписи.Подпись.Записать(ПоследнийКаталог + Выгруженное.ИмяПодписи);
						
						ДанныеСертификата = ИнформацияОПодписи.Сертификат.Получить();
						Если ДанныеСертификата = Неопределено Тогда
							// Запуская стандартную проверку, сохраняем новое состояние некорректности подписи.
							ОписаниеОшибки = "";
							ЭлектроннаяПодпись.ПроверитьПодпись(Неопределено,
								ИнформацияОФайле.СсылкаНаДвоичныеДанныеФайла,
								ИнформацияОПодписи.Подпись,
								ОписаниеОшибки);
							ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Отсутствует сертификат электронной подписи.
                                                |%1'"), ОписаниеОшибки);
							Ошибка = ДобавитьРезультатПоОтчету(РезультатВыгрузки,
										Строка(Выборка.ФайлОтчета), Выборка.КлючСтрокиОтчета, ОписаниеОшибки);
							Ошибка.ПапкаСубъекта = РезультатВыгрузки.ИмяАрхива;
							Прервать;
							
						Иначе
							
							Выгруженное.ИмяСертификата = ИмяФайлаПоТипуФайла(ИнформацияОПодписи.ИмяФайлаПодписи, РасширениеСертификата());
							ДанныеСертификата.Записать(ПоследнийКаталог + Выгруженное.ИмяСертификата);
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				// Сформируем файл и сохраним его.
				ФорматПреобразования = ФорматПреобразованияРеглОтчета(ФорматыСохранения, Выборка);
				РезультатВыгрузкиФайла = ВыгрузитьРегламентированныйОтчет(
					Выборка, ФорматПреобразования, КешСхемВыгрузкиБО, ПоследнийКаталог);
 
				Если Не РезультатВыгрузкиФайла.Выполнено Тогда
					
					РезультатВыгрузки.Выполнено = Ложь;
					
					Для каждого ОшибкаВыгрузки Из РезультатВыгрузкиФайла.ОтчетностьПоКлючамСтрок Цикл
						Если ПустаяСтрока(ОшибкаВыгрузки.ОписаниеОшибки) Тогда
							Продолжить;
						КонецЕсли;
						
						Ошибка = ДобавитьРезультатПоОтчету(РезультатВыгрузки,
							ОшибкаВыгрузки.Представление, ОшибкаВыгрузки.КлючСтрокиОтчета, ОшибкаВыгрузки.ОписаниеОшибки,
							ОшибкаВыгрузки.ДетализацияОшибок);
						Ошибка.ПапкаСубъекта = РезультатВыгрузки.ИмяАрхива;
						
					КонецЦикла;
					Если РезультатВыгрузки.ОтчетностьПоКлючамСтрок.Количество() = 0 Тогда
						
						Ошибка = ДобавитьРезультатПоОтчету(РезультатВыгрузки,
							РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Выборка.ОтчетСсылка),
							Выборка.КлючСтрокиОтчета,
							НСтр("ru = 'Ошибка при выгрузке регламентированного отчета'"));
						Ошибка.ПапкаСубъекта = РезультатВыгрузки.ИмяАрхива;
						
					КонецЕсли;
					Прервать;
					
				КонецЕсли;		
					
				Выгруженное = ДобавитьРезультатПоОтчету(РезультатВыгрузки,
					РезультатВыгрузкиФайла.ИмяАрхива, Выборка.КлючСтрокиОтчета);
				Выгруженное.ПапкаСубъекта = РезультатВыгрузки.ИмяАрхива;
				
				// На основании состояния отчета с точки зрения подписания присваиваем состояние с точки зрения выгрузки.
				Если РезультатВыгрузкиФайла.Подписать = "Файл" Тогда // файл без подписи
					
					Выгруженное.ВариантВыгрузки = "Дополнительно";
					
				ИначеЕсли РезультатВыгрузкиФайла.Подписать = "Архив"
				 Или РезультатВыгрузкиФайла.Подписать = "Дополнительно" Тогда
				 
				    Выгруженное.ВариантВыгрузки = "Архив"; // по-умолчанию это архив с подписями внутри
					Если РезультатВыгрузкиФайла.Подписать <> "Дополнительно" Тогда
						// Архив может считается сформированным и подписанным при наличии хотя бы одного файла подписи.
						ПодписанЭП = (НайтиФайлы(РезультатВыгрузкиФайла.Каталог, "*." + РасширениеЭлектроннойПодписи()).Количество() > 0);
						Если Не ПодписанЭП Тогда
							Выгруженное.ВариантВыгрузки = "Дополнительно";
						КонецЕсли;
						
					КонецЕсли;

					Архив = Новый ЗаписьZipФайла(ПоследнийКаталог + Выгруженное.Представление, ,
						РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Выборка.ОтчетСсылка),
						МетодСжатияZIP.BZIP2, УровеньСжатияZIP.Максимальный);
					Архив.Добавить(РезультатВыгрузкиФайла.Каталог + "*");
					Архив.Записать();
					
					УдалитьВременныйКаталог(РезультатВыгрузкиФайла.Каталог, ФинОтчет);
					
				Иначе // файл, который не изменяется при передаче
					
					Выгруженное.ВариантВыгрузки = "Архив";
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Выборка.ФайлОтчета) Тогда // выгрузим присоединенный файл
			
			ПараметрыДанных = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
			Попытка
				ИнформацияОФайле = РаботаСФайлами.ДанныеФайла(Выборка.ФайлОтчета, ПараметрыДанных);
			Исключение
				
				ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		        ИмяСобытия = НСтр("ru = 'Получение данных присоединенного файла'", ОбщегоНазначения.КодОсновногоЯзыка());
				ЗаписьЖурналаРегистрации(
					ЗаполнениеФинОтчетностиВБанки.СобытиеЖурналаРегистрации(ИмяСобытия),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Документы.ФинОтчетВБанк,
					Выборка.ФайлОтчета,
					ПредставлениеОшибки);
				
				Ошибка = ДобавитьРезультатПоОтчету(РезультатВыгрузки, Строка(Выборка.ФайлОтчета), Выборка.КлючСтрокиОтчета,
							СтрШаблон(НСтр("ru = 'Ошибка при сохранении присоединенного файла.
                                            |%1'"), ПредставлениеОшибки));
				Ошибка.ПапкаСубъекта = РезультатВыгрузки.ИмяАрхива;
				Прервать;
				
			КонецПопытки;
			
			ИмяФайла = ДобавитьУникальныйИдентификатор(ИнформацияОФайле.ПолноеНаименованиеВерсии);
			ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(ИмяФайла, ИнформацияОФайле.Расширение);
			Выгруженное = ДобавитьРезультатПоОтчету(РезультатВыгрузки, ИмяФайла, Выборка.КлючСтрокиОтчета);
			Выгруженное.ПапкаСубъекта = РезультатВыгрузки.ИмяАрхива;
				
			ПолучитьИзВременногоХранилища(ИнформацияОФайле.СсылкаНаДвоичныеДанныеФайла).Записать(
				ПоследнийКаталог + Выгруженное.Представление);
			
			Если Выборка.ФайлОтчетаСодержитЭП Тогда
				
				Выгруженное.ВариантВыгрузки = "Архив"; // подписи внутри архива
				Продолжить;
				
			Иначе
				
				Выгруженное.ВариантВыгрузки = "Дополнительно"; // по-умолчанию, если нет ни одной верной подписи
				
			КонецЕсли;
			
			ИнформацияОПодписи = ДанныеПодписиФайла(Выборка.ФайлОтчета);
			Если ИнформацияОПодписи <> Неопределено Тогда
				
 				Выгруженное.ВариантВыгрузки = "Файл"; // присоединенный файл подписан
				
				Выгруженное.ИмяПодписи = ИмяФайла + "." + РасширениеЭлектроннойПодписи();
				ИнформацияОПодписи.Подпись.Записать(ПоследнийКаталог + Выгруженное.ИмяПодписи);
				
				ДанныеСертификата = ИнформацияОПодписи.Сертификат.Получить();
				Если ДанныеСертификата = Неопределено Тогда
					// Запуская стандартную проверку, сохраняем новое состояние некорректности подписи.
					ОписаниеОшибки = "";
					ЭлектроннаяПодпись.ПроверитьПодпись(Неопределено,
						ИнформацияОФайле.СсылкаНаДвоичныеДанныеФайла,
						ИнформацияОПодписи.Подпись,
						ОписаниеОшибки);
					ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Отсутствует сертификат электронной подписи.
                                                |%1'"), ОписаниеОшибки);
					Ошибка = ДобавитьРезультатПоОтчету(РезультатВыгрузки,
								Строка(Выборка.ФайлОтчета), Выборка.КлючСтрокиОтчета, ОписаниеОшибки);
					Ошибка.ПапкаСубъекта = РезультатВыгрузки.ИмяАрхива;
					Прервать;
					
				Иначе
					
					Выгруженное.ИмяСертификата = ИмяФайлаПоТипуФайла(Выгруженное.ИмяПодписи, РасширениеСертификата());
					ДанныеСертификата.Записать(ПоследнийКаталог + Выгруженное.ИмяСертификата);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;
	
	РезультатВыгрузки.ОтчетностьПоКлючамСтрок.Индексы.Добавить("КлючСтрокиОтчета");
	
	Возврат РезультатВыгрузки;
	
КонецФункции

// Сохраняет файлы выгрузки регламентированного отчета на диск.
//
// Параметры:
//  СтрокаОтчета - ВыборкаИзРезультатаЗапроса - данные выгружаемого отчета.
//  ФорматПреобразования - Структура - см. ФорматыСохраненияОтчетов() в модуле формы.
//  КешСхемВыгрузкиБО - Структура - см. параметры ИнтерфейсыВзаимодействияБРО.ВыгрузитьРегламентированныйОтчет()
//  Каталог      - Строка - если выгрузка - это отдельный файл, и параметр заполнен, то файл будет сохранен сюда;
//                          иначе файлы выгружаются в новый временный каталог.
//
// Возвращаемое значение:
//   Структура   - файлы будущего архива лежат во временной папке:
//               * ОтчетностьПоКлючамСтрок = список записанных на диск файлов с пометками НужноПодписать;
//               * Каталог = временная папка, где лежат файлы, входящие в архив,
//                           или переданный в параметре Каталог, куда положили единственный файл;
//               * Подписать = какой вариант подписания файлов должен применяться;
//               * ИмяАрхива = имя будущего файла-архива.
//
Функция ВыгрузитьРегламентированныйОтчет(СтрокаОтчета, ФорматПреобразования, КешСхемВыгрузкиБО, Знач Каталог = "")
	Перем РезультатВыгрузкиОтчета;
	
	РезультатВыгрузки = РезультатВыгрузки();
	РезультатВыгрузки.ОтчетностьПоКлючамСтрок.Колонки.Добавить("НужноПодписать", Новый ОписаниеТипов("Булево"));
	
	// Как подписывать файлы отчетности.
	// Архив = подписать все файлы внутри архива.
	// Дополнительно = подписать только дополнительные файлы (для пользователя).
	//      Например, выгрузка регл. отчета была подписана в ФНС. Однако в банк требуется отправить не только
	//      файлы в машиночитаемых форматах, но и файлы в пользовательском формате (xls, pdf и т.п.). Их нужно будет
	//      приложить к архиву и подписать.
	// Файл = подписать один файл выгрузки.
	// "" = не подписывать
	РезультатВыгрузки.Вставить("Подписать", "Архив");   

	РеглОтчет = СтрокаОтчета.ОтчетСсылка;

	// Возможно два формата файлов для помещения в архив в рамках данной строки отчетности.
	// Первый формат - это выгрузка регл.отчета для автоматизированной обработки.
	Если ФорматПреобразования.СформироватьXML Тогда
		
		ОписаниеОшибки = "";
		СостояниеДокумента = ИнтерфейсыВзаимодействияБРО.СостояниеДокумента(РеглОтчет);
		Если СостояниеДокумента.Отправлено И Не СостояниеДокумента.Сдано Тогда
			
			ОписаниеОшибки = НСтр("ru = 'Отчет отправлен в ФНС, но еще не получен ответ о приеме. Нельзя отправить отчет получателю без отметки о сдаче в ФНС.'");
			
		ИначеЕсли СостояниеДокумента.Отправлено Или СтрокаОтчета.ВидОтчета <> "БухгалтерскаяОтчетность" Тогда
			// Обычная регламентированная отчетность за стандартные периоды.
			РезультатВыгрузкиОтчета = ВыгрузитьПакетПоСдачеОтчетностиВФНС(РеглОтчет);
			Если ЭтоИмяФайлаАрхива(РезультатВыгрузкиОтчета.ИмяФайлаВыгрузки) Тогда
				РезультатВыгрузки.ИмяАрхива = РезультатВыгрузкиОтчета.ИмяФайлаВыгрузки;
				Если Не ЗначениеЗаполнено(ФорматПреобразования.ЦелевойФормат) Тогда
					РезультатВыгрузки.Подписать = "";
				Иначе
					РезультатВыгрузки.Подписать = "Дополнительно";
				КонецЕсли;
			Иначе
				ОписаниеОшибки = НСтр("ru = 'Неверный формат выгружаемого файла регламентированного отчета'");
			КонецЕсли;
			
		Иначе
			// Банки просят предоставлять бухгалтерскую отчетность за "нестандартные" периоды (например, поквартально).
			// В ФНС за такие периоды отчеты не сдаются, и штатная проверка их не пропускает при выгрузке. Чтобы отключить эту
			// проверку, передадим специальный флаг для выгрузки. При этом в xml-файле будут использованы особые значения для
			// тега периода, которые отсутствуют в формате ФНС.
			ДополнительныеПараметрыВыгрузки = Новый Структура();
			ДополнительныеПараметрыВыгрузки.Вставить("РеглОтчетВыгружаетсяВБанк", Истина);
			ДополнительныеПараметрыВыгрузки.Вставить("КешСхемВыгрузки", КешСхемВыгрузкиБО);
			
			РезультатВыгрузкиОтчета = ИнтерфейсыВзаимодействияБРО.ВыгрузитьРегламентированныйОтчет(
				РеглОтчет, ДополнительныеПараметрыВыгрузки);
			
			Если ЭтоИмяФайлаАрхива(РезультатВыгрузкиОтчета.ИмяФайлаВыгрузки) Тогда
				РезультатВыгрузки.Подписать = "Архив";
				РезультатВыгрузки.ИмяАрхива = РезультатВыгрузкиОтчета.ИмяФайлаВыгрузки;
			Иначе
				РезультатВыгрузки.Подписать = "Файл";
				РезультатВыгрузки.ИмяАрхива = ИмяФайлаПоТипуФайла(РезультатВыгрузкиОтчета.ИмяФайлаВыгрузки, "zip");
			КонецЕсли;
			
		КонецЕсли;
		Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
			// Сформируем описание ошибки, если выгрузка неуспешна.
			РезультатВыгрузкиОтчета = РегламентированнаяОтчетность.НовыйРезультатВыгрузкиРеглОтчета();
			РезультатВыгрузкиОтчета.Ошибки.Добавить(ОписаниеОшибки);
				
		КонецЕсли;
		
		Если Не РезультатВыгрузкиОтчета.РеглОтчетВыгружен Тогда
		
			Если РезультатВыгрузкиОтчета.Ошибки.Количество() = 0 Тогда
				ОписаниеОшибки = НСтр("ru = 'Невозможно выгрузить отчет'");
			Иначе
				ОписаниеОшибки = СтрСоединить(РезультатВыгрузкиОтчета.Ошибки, Символы.ПС);
			КонецЕсли;
			
			ПредставлениеФайлаВыгрузки = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(РеглОтчет);
			Для Каждого Ошибка Из РезультатВыгрузкиОтчета.ТаблицаСообщений Цикл
				Если Не ЗначениеЗаполнено(Ошибка.ОтчетДок) Тогда
					Ошибка.ОтчетДок = РеглОтчет;
					Ошибка.Отчет = ПредставлениеФайлаВыгрузки;
				КонецЕсли;
			КонецЦикла;
			
			ДобавитьРезультатПоОтчету(РезультатВыгрузки,
				?(ПустаяСтрока(РезультатВыгрузкиОтчета.ИмяФайлаВыгрузки), ПредставлениеФайлаВыгрузки, РезультатВыгрузкиОтчета.ИмяФайлаВыгрузки),
				СтрокаОтчета.КлючСтрокиОтчета,
				ОписаниеОшибки,
				РезультатВыгрузкиОтчета.ТаблицаСообщений);

			Возврат РезультатВыгрузки;
			
		КонецЕсли;

		Если ПустаяСтрока(РезультатВыгрузки.Подписать) Тогда // файл выгружается без действий над ним (в частности, без подписания)

			РезультатВыгрузки.Каталог = ?(ПустаяСтрока(Каталог), ФайловаяСистема.СоздатьВременныйКаталог(), Каталог);
			
			ДобавитьРезультатПоОтчету(РезультатВыгрузки, РезультатВыгрузкиОтчета.ИмяФайлаВыгрузки, СтрокаОтчета.КлючСтрокиОтчета);

			ДанныеФайла = ПолучитьИзВременногоХранилища(РезультатВыгрузкиОтчета.АдресФайлаВыгрузки);
			ДанныеФайла.Записать(РезультатВыгрузки.Каталог + РезультатВыгрузкиОтчета.ИмяФайлаВыгрузки);
			
			Возврат РезультатВыгрузки;
			
		КонецЕсли;

	Иначе
		// Имя создаваемого архива должно быть аналогично имени регл.отчета.
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РегламентированныйОтчет.Организация.ИНН КАК ИНН,
		|	РегламентированныйОтчет.Организация.КПП КАК КПП,
		|	РегламентированныйОтчет.КодНалоговогоОргана КАК КодНалоговогоОргана,
		|	РегламентированныйОтчет.ИсточникОтчета КАК ИсточникОтчета
		|ИЗ
		|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
		|ГДЕ
		|	РегламентированныйОтчет.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", РеглОтчет);
		РеквизитыОтчета = Запрос.Выполнить().Выгрузить().Получить(0);
		
		РезультатВыгрузки.ИмяАрхива = "BANK_"
			+ ?(РеквизитыОтчета.ИсточникОтчета = "РегламентированныйОтчетБухОтчетностьМП", "BOUPR", "BUHOTCH") + "_"
			+ СокрЛП(РеквизитыОтчета.ИНН)
			+ ?(ПустаяСтрока(РеквизитыОтчета.КПП), "", РеквизитыОтчета.КПП)
			+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
			+ "_" + Строка(Новый УникальныйИдентификатор)
			+ ".zip";
		
	КонецЕсли;
	
	// Второй формат - это выгрузка регл.отчета для обработки пользователем.
	Если ЗначениеЗаполнено(ФорматПреобразования.ЦелевойФормат) Тогда
					
		РезультатПолученияФайлов = ИнтерфейсыВзаимодействияБРО.ФайлыРегламентированногоОтчета(РеглОтчет);
		
		РезультатВыгрузки.Выполнено = ПустаяСтрока(РезультатПолученияФайлов.ОписаниеОшибки)
									 И РезультатПолученияФайлов.ФайлыОтчета.Количество() <> 0;
		Если Не РезультатВыгрузки.Выполнено Тогда

			Если ПустаяСтрока(РезультатПолученияФайлов.ОписаниеОшибки) Тогда
				РезультатПолученияФайлов.ОписаниеОшибки = СтрШаблон(
					НСтр("ru = 'Невозможно выгрузить файлы отчета ""%1""'"),
					РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(РеглОтчет));
			КонецЕсли;
				
			ДобавитьРезультатПоОтчету(РезультатВыгрузки,
				РезультатВыгрузки.ИмяАрхива, СтрокаОтчета.КлючСтрокиОтчета, РезультатПолученияФайлов.ОписаниеОшибки);
				
			Возврат РезультатВыгрузки;
			
		КонецЕсли;
		
	Иначе // для единообразия инициализируем структуру
		
		РезультатПолученияФайлов = Новый Структура("ФайлыОтчета", Новый Массив);
		
	КонецЕсли;

	// Определяем место, куда будут сохраняться файлы.
	ЭтоОтдельныйФайл = Ложь;
	Если РезультатВыгрузки.Подписать = "Файл"
	   И Не ЗначениеЗаполнено(ФорматПреобразования.ЦелевойФормат) Тогда
		// Получен из регл.отчета без преобразования (ЦелевойФормат внутренний для 1С).
		ЭтоОтдельныйФайл = Истина;
	ИначеЕсли Не ФорматПреобразования.СформироватьXML
	   И РезультатПолученияФайлов.ФайлыОтчета.Количество() = 1 Тогда
		// Регл.отчет не выгружался в машинночитаемый формат, а пользовательское представление регл.отчета состоит из единственного файла.
		ЭтоОтдельныйФайл = Истина;
	КонецЕсли;
	Если ЭтоОтдельныйФайл Тогда
		// В этом варианте результатом сохранения регл.отчета будет всего один файл.
		Если ПустаяСтрока(Каталог) Тогда // создаем каталог и возвращаем его в вызывающую процедуру
			РезультатВыгрузки.Каталог = ФайловаяСистема.СоздатьВременныйКаталог();
		Иначе // вызывающая процедура уже передала нам каталог, куда нужно поместить файл
			РезультатВыгрузки.ИмяАрхива = РезультатВыгрузкиОтчета.ИмяФайлаВыгрузки;
			РезультатВыгрузки.Каталог = Каталог;
		КонецЕсли;

	Иначе
		// В этом варианте результатом сохранения регл.отчета будет несколько файлов.
		
		Если РезультатВыгрузки.Подписать = "Файл" Тогда
			// Предполагали, что может быть всего один файл, но их оказалось несколько, которые нужно сложить в один архив.
			РезультатВыгрузки.Подписать = "Архив";
		КонецЕсли;
		РезультатВыгрузки.Каталог = ФайловаяСистема.СоздатьВременныйКаталог();
		
	КонецЕсли;

	Если ФорматПреобразования.СформироватьXML Тогда
		
		ДанныеФайла = ПолучитьИзВременногоХранилища(РезультатВыгрузкиОтчета.АдресФайлаВыгрузки);
		Если ЭтоИмяФайлаАрхива(РезультатВыгрузкиОтчета.ИмяФайлаВыгрузки) Тогда
			
			ИзвлекаемыйАрхив = Новый ЧтениеZipФайла(ДанныеФайла.ОткрытьПотокДляЧтения());
			ИзвлекаемыйАрхив.ИзвлечьВсе(РезультатВыгрузки.Каталог, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
			НужноПодписать = (РезультатВыгрузки.Подписать <> "Дополнительно");
			Для каждого Извлекаемый Из ИзвлекаемыйАрхив.Элементы Цикл
				
				ФайлВАрхиве = ДобавитьРезультатПоОтчету(РезультатВыгрузки, Извлекаемый.Имя, СтрокаОтчета.КлючСтрокиОтчета);
				ФайлВАрхиве.НужноПодписать = НужноПодписать;
				
			КонецЦикла;
			
		Иначе
			
			ДанныеФайла.Записать(РезультатВыгрузки.Каталог + РезультатВыгрузкиОтчета.ИмяФайлаВыгрузки);
			
			ФайлВАрхиве = ДобавитьРезультатПоОтчету(РезультатВыгрузки, РезультатВыгрузкиОтчета.ИмяФайлаВыгрузки, СтрокаОтчета.КлючСтрокиОтчета);
			ФайлВАрхиве.НужноПодписать = Истина;

		КонецЕсли;

	КонецЕсли;
	
	ПоследнийИспользовавшийсяФормат = Неопределено;
	Для каждого РезультатВыгрузкиОтчета Из РезультатПолученияФайлов.ФайлыОтчета Цикл

		РезультатВыгрузкиОтчета.ИмяФайла = ЗаменитьНедопустимыеСимволыВИмениФайла(РезультатВыгрузкиОтчета.ИмяФайла);
		Если ТипЗнч(РезультатВыгрузкиОтчета.СодержимоеФайла) = Тип("ТабличныйДокумент") Тогда
			
			ИмяФайла = ИмяФайлаПоТипуФайла(
				РезультатВыгрузкиОтчета.ИмяФайла, ФорматПреобразования.ЦелевойФормат, ПоследнийИспользовавшийсяФормат);
			РезультатВыгрузкиОтчета.СодержимоеФайла.Записать(РезультатВыгрузки.Каталог + ИмяФайла, ФорматПреобразования.ЦелевойФормат);
			
			ФайлВАрхиве = ДобавитьРезультатПоОтчету(РезультатВыгрузки, ИмяФайла, СтрокаОтчета.КлючСтрокиОтчета);
			
		Иначе
			
			РезультатВыгрузкиОтчета.СодержимоеФайла.Записать(РезультатВыгрузки.Каталог + РезультатВыгрузкиОтчета.ИмяФайла);
			
			ФайлВАрхиве = ДобавитьРезультатПоОтчету(РезультатВыгрузки, РезультатВыгрузкиОтчета.ИмяФайла, СтрокаОтчета.КлючСтрокиОтчета);
			
		КонецЕсли;
		ФайлВАрхиве.НужноПодписать = Истина;

	КонецЦикла;

	Возврат РезультатВыгрузки;
	
КонецФункции

Функция ФорматПреобразованияРеглОтчета(ФорматыСохранения, Отчет)
	
	ФорматПреобразования = Новый Структура;
	ФорматПреобразования.Вставить("СформироватьXML", Истина);
	ФорматПреобразования.Вставить("ЦелевойФормат");
	
	Если Отчет.ВидОтчета <> "БухгалтерскаяОтчетность" Тогда
	   
		Возврат ФорматПреобразования;
	   
	КонецЕсли;
	
	ТипФайлаРегОтчета = ФорматыСохранения[Отчет.ИдентификаторСтрокиКомплекта];
	Если Не ЗначениеЗаполнено(ТипФайлаРегОтчета) Тогда
		ТипФайлаРегОтчета = ФорматыСохранения["ЗначениеПоУмолчанию"];
	КонецЕсли;
	Если ТипФайлаРегОтчета = "XLS" Тогда
		
		ФорматПреобразования.ЦелевойФормат = ТипФайлаТабличногоДокумента.XLS;
		ФорматПреобразования.СформироватьXML = Ложь;
		
	ИначеЕсли ТипФайлаРегОтчета = "XLS_XML" Тогда
		
		ФорматПреобразования.ЦелевойФормат = ТипФайлаТабличногоДокумента.XLS;
		
	ИначеЕсли ТипФайлаРегОтчета = "XLSX" Тогда
		
		ФорматПреобразования.ЦелевойФормат = ТипФайлаТабличногоДокумента.XLSX;
		ФорматПреобразования.СформироватьXML = Ложь;
		
	ИначеЕсли ТипФайлаРегОтчета = "XLSX_XML" Тогда
		
		ФорматПреобразования.ЦелевойФормат = ТипФайлаТабличногоДокумента.XLSX;	
		
	КонецЕсли;
	
	Возврат ФорматПреобразования;
	
КонецФункции

Функция ВыгрузитьПакетПоСдачеОтчетностиВФНС(РегламентированныйОтчет)

	// Используем стандартную структуру с результатом выгрузки для единообразной обработки далее.
	РезультатВыгрузки = РегламентированнаяОтчетность.НовыйРезультатВыгрузкиРеглОтчета();
	
	// Отчеты могли ранее сдаваться в ФНС другим пользователем.
	// Поэтому чтобы не возникало сообщений про нехватку прав доступа на выгрузки пакетов отчетов,
	// выполняем выгрузку в привилегированном режиме.
	УстановитьПривилегированныйРежим(Истина);
	СвойстваПакета = ИнтерфейсыВзаимодействияБРО.ВыгрузитьПакетПоСдачеОтчетностиВФНС(РегламентированныйОтчет);
	УстановитьПривилегированныйРежим(Ложь);

	Если ЗначениеЗаполнено(СвойстваПакета.ОписаниеОшибки) Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка при выгрузке пакета файлов с отметкой ФНС для отчета ""%1"": %2'"), 
			РегламентированныйОтчет,
			СвойстваПакета.ОписаниеОшибки);
		РезультатВыгрузки.Ошибки.Добавить(ТекстСообщения);
	ИначеЕсли Не ЭтоАдресВременногоХранилища(СвойстваПакета.Адрес) Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка при выгрузке пакета файлов с отметкой ФНС для отчета ""%1""'"), 
			РегламентированныйОтчет);
		РезультатВыгрузки.Ошибки.Добавить(ТекстСообщения);
	Иначе
		
		РезультатВыгрузки.РеглОтчетВыгружен = Истина;
		РезультатВыгрузки.АдресФайлаВыгрузки = СвойстваПакета.Адрес;
		РезультатВыгрузки.ИмяФайлаВыгрузки   = СвойстваПакета.ИмяФайла;
		
	КонецЕсли;
	
	Возврат РезультатВыгрузки;

КонецФункции

#КонецОбласти

#Область Подписание

Функция СформироватьПодписанныеАрхивы(ПараметрыПодписания, Прогрессор)
	
	РезультатПодготовки = ПараметрыПодписания.РезультатПодготовки;
	РезультатПодготовки.Каталог = ФайловаяСистема.СоздатьВременныйКаталог("zip");
	
	Подписи = УниверсальныйОбменСБанками.ВременныеДанныеТранзакции(РезультатПодготовки.ИдентификаторПодписанияАрхивов, , Истина, , Истина);
	
	Подписи.Колонки.Добавить("КлючСтрокиОтчета",
		Метаданные.Документы.ФинОтчетВБанк.ТабличныеЧасти.Отчетность.Реквизиты.КлючСтрокиОтчета.Тип);
	Для каждого РезультатПодписания Из Подписи Цикл
		
		РезультатПодписания.КлючСтрокиОтчета = Число(Лев(РезультатПодписания.ИсходноеИмяФайла, 5));
		РезультатПодписания.ИсходноеИмяФайла = Сред(РезультатПодписания.ИсходноеИмяФайла, 6);
		
	КонецЦикла;
	Подписи.Сортировать("КлючСтрокиОтчета");
	
	// Параметры, производные от контекста. Нужны для подписывания через механизм БСП.
	КонтекстПодписания = Новый Структура;
	КонтекстПодписания.Вставить("ЭтоАрхив",            Ложь);
	КонтекстПодписания.Вставить("УстановившийПодпись", Пользователи.АвторизованныйПользователь());
	КонтекстПодписания.Вставить("РасширениеПодписи",   РасширениеЭлектроннойПодписи());
	КонтекстПодписания.Вставить("Сейчас",              ПараметрыПодписания.Сейчас);
	КонтекстПодписания.Вставить("Предмет",             ПараметрыПодписания.Предмет);
	КонтекстПодписания.Вставить("ОтпечатокСертификата",ПараметрыПодписания.ОтпечатокСертификата);
	КонтекстПодписания.Вставить("Сертификат",          ПараметрыПодписания.Сертификат);
	КонтекстПодписания.Вставить("КомуВыданСертификат",
		ЭлектроннаяПодпись.ПредставлениеСубъекта(Новый СертификатКриптографии(ПараметрыПодписания.Сертификат)));
	ПараметрыПодписания.Сертификат = Неопределено;
	КонтекстПодписания.Вставить("Отчет");
	КонтекстПодписания.Вставить("ОтчетТЧ");
	КонтекстПодписания.Вставить("ПутьКПоследнемуФайлу", "");

	ПараметрыПомещения = УниверсальныйОбменСБанками.ПараметрыПомещенияВЖурналОперацийСФайлами();
	ПараметрыПомещения.Сервис         = ПараметрыПодписания.Сервис;
	ПараметрыПомещения.ТипДокумента   = Перечисления.ТипыДокументовОбменаСБанкамиФинОтчетность.Отчетность;
	ПараметрыПомещения.Организация    = ПараметрыПодписания.Организация;
	ПараметрыПомещения.БанкиПолучатели.Добавить(ПараметрыПодписания.Банк);
	ПараметрыПомещения.Предмет        = ПараметрыПодписания.Предмет;
	ПараметрыПомещения.Зашифровать    = Истина;
	ПараметрыПомещения.Идентификатор  = ПараметрыПодписания.Идентификатор;
	
	ФинОтчетОбъект = ПараметрыПодписания.Предмет.ПолучитьОбъект();
	ОтчетностьТЧ   = ФинОтчетОбъект.Отчетность;
	Отчетность     = РезультатПодготовки.ОтчетностьПоКлючамСтрок;
	ТекущийКлюч             = 0;
	КоличествоФайловПоКлючу = 0;
	ПутьКПоследнемуФайлу    = "";
	
	РассчитатьШагПрогрессора(Прогрессор, Подписи.Количество());
	
	Пока Подписи.Количество() > 0 Цикл
		
		СообщитьПрогресс(Прогрессор);
	
		РезультатПодписания = Подписи[0];
		
		Если РезультатПодписания.КлючСтрокиОтчета <> ТекущийКлюч Тогда // записываем архив, чтобы перейти к следующему
			
			Если ТекущийКлюч <> 0 Тогда
				
				КонтекстПодписания.Отчет                = Отчетность.Найти(ТекущийКлюч, "КлючСтрокиОтчета");
				КонтекстПодписания.ОтчетТЧ              = ОтчетностьТЧ.Найти(ТекущийКлюч, "КлючСтрокиОтчета");
				КонтекстПодписания.ЭтоАрхив             = (КоличествоФайловПоКлючу > 1);
				КонтекстПодписания.ПутьКПоследнемуФайлу = ПутьКПоследнемуФайлу;
				
				СформироватьФайлОтчетаСПодписями(КонтекстПодписания, ПараметрыПомещения, РезультатПодготовки);

			КонецЕсли;
			
			ТекущийКлюч = РезультатПодписания.КлючСтрокиОтчета;
			КоличествоФайловПоКлючу = 0;
			
		КонецЕсли;
		
		Если РезультатПодписания.ИсходноеИмяФайла = "ВыгрузкаРегламентированногоОтчета" Тогда
			// Файлы, помещаемые без изменения.
			АрхивРеглОтчета = Новый ЧтениеZipФайла(РезультатПодписания.ИсходныеДанные.Получить().ОткрытьПотокДляЧтения());
			КоличествоФайловПоКлючу = КоличествоФайловПоКлючу + АрхивРеглОтчета.Элементы.Количество();
			АрхивРеглОтчета.ИзвлечьВсе(РезультатПодготовки.Каталог);
			АрхивРеглОтчета.Закрыть();
			
		Иначе
			
			ПутьКПоследнемуФайлу = РезультатПодготовки.Каталог + РезультатПодписания.ИсходноеИмяФайла;
			РезультатПодписания.ИсходныеДанные.Получить().Записать(ПутьКПоследнемуФайлу);
			РезультатПодписания.Подпись.Получить().Записать(ПутьКПоследнемуФайлу + "." + КонтекстПодписания.РасширениеПодписи);
			КоличествоФайловПоКлючу = КоличествоФайловПоКлючу + 1;
				
		КонецЕсли;
			
		Подписи.Удалить(РезультатПодписания);
		
	КонецЦикла;
	Если ТекущийКлюч <> 0 Тогда
		
		КонтекстПодписания.Отчет                = Отчетность.Найти(ТекущийКлюч, "КлючСтрокиОтчета");
		КонтекстПодписания.ОтчетТЧ              = ОтчетностьТЧ.Найти(ТекущийКлюч, "КлючСтрокиОтчета");
		КонтекстПодписания.ЭтоАрхив             = (КоличествоФайловПоКлючу > 1);
		КонтекстПодписания.ПутьКПоследнемуФайлу = ПутьКПоследнемуФайлу;
		
		СформироватьФайлОтчетаСПодписями(КонтекстПодписания, ПараметрыПомещения, РезультатПодготовки);		
		
	КонецЕсли;
	УдалитьВременныйКаталог(РезультатПодготовки.Каталог, ПараметрыПодписания.Предмет);
	УниверсальныйОбменСБанками.УдалитьЗаписиЖурналаОперацийСФайламиПоИдентификатору(
		РезультатПодготовки.ИдентификаторПодписанияАрхивов);
	РезультатПодготовки.Удалить("ИдентификаторПодписанияАрхивов");
	
	Если РезультатПодготовки.Выполнено Тогда
		
		Если ФинОтчетОбъект.Модифицированность() Тогда
			ФинОтчетОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;

	КонецЕсли;
	
	Возврат РезультатПодготовки;
	
КонецФункции

Процедура СформироватьФайлОтчетаСПодписями(КонтекстПодписания, ПараметрыПомещения, РезультатПодготовки)
	Перем ДанныеАрхива;

	Отчет   = КонтекстПодписания.Отчет;
	ОтчетТЧ = КонтекстПодписания.ОтчетТЧ;

	Попытка

		Если КонтекстПодписания.ЭтоАрхив Тогда // архив с подписями внутри

			ФайлОтчета = СоздатьАрхивСПодписямиИзКаталога(РезультатПодготовки.Каталог, Отчет.Представление,
				КонтекстПодписания.Предмет, , ДанныеАрхива);
				
			ПараметрыПомещения.Подписать = Ложь;
			ПараметрыПомещения.ИсходныеДанные = ДанныеАрхива;

		Иначе // файл с подписью через БСП
			
			ДанныеАрхива = Новый ДвоичныеДанные(КонтекстПодписания.ПутьКПоследнемуФайлу);
			
			Если ЗначениеЗаполнено(КонтекстПодписания.ОтчетТЧ.ФайлОтчета) Тогда
				
				ФайлОтчета = КонтекстПодписания.ОтчетТЧ.ФайлОтчета;
				
			Иначе
				// Файл был получен выгрузкой регламентированного отчета и должен быть сохранен перед подписанием.
				ИнформацияОФайле = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(КонтекстПодписания.ПутьКПоследнемуФайлу);
				
				ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
				ПараметрыФайла.Автор              = КонтекстПодписания.УстановившийПодпись;
				ПараметрыФайла.ВладелецФайлов     = КонтекстПодписания.Предмет;
				ПараметрыФайла.ИмяБезРасширения   = ИнформацияОФайле.ИмяБезРасширения;
				ПараметрыФайла.РасширениеБезТочки = ИнформацияОФайле.Расширение;
				
				ФайлОтчета = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ПоместитьВоВременноеХранилище(ДанныеАрхива));
				
			КонецЕсли;
			
			ДанныеПодписи = Новый ДвоичныеДанные(КонтекстПодписания.ПутьКПоследнемуФайлу
												+ "." + КонтекстПодписания.РасширениеПодписи);
			
			СвойстваПодписи = Новый Структура;
			СвойстваПодписи.Вставить("Подпись",             ДанныеПодписи);
			СвойстваПодписи.Вставить("УстановившийПодпись", КонтекстПодписания.УстановившийПодпись);
			СвойстваПодписи.Вставить("Комментарий",         "");
			СвойстваПодписи.Вставить("ИмяФайлаПодписи",     Отчет.Представление + "." + КонтекстПодписания.РасширениеПодписи);
			СвойстваПодписи.Вставить("Отпечаток",           КонтекстПодписания.ОтпечатокСертификата);
			СвойстваПодписи.Вставить("Сертификат",          КонтекстПодписания.Сертификат);
			СвойстваПодписи.Вставить("КомуВыданСертификат", КонтекстПодписания.КомуВыданСертификат);
			СвойстваПодписи.Вставить("ПодписьВерна",        Истина);
			СвойстваПодписи.Вставить("ДатаПроверкиПодписи", КонтекстПодписания.Сейчас);
			ЭлектроннаяПодпись.ДобавитьПодпись(ФайлОтчета, СвойстваПодписи);
			
			ПараметрыПомещения.Подписать      = Истина;
			ПараметрыПомещения.Подпись        = ДанныеПодписи;
			ПараметрыПомещения.ИсходныеДанные = ДанныеАрхива;
			
		КонецЕсли;		
		УдалитьФайлы(РезультатПодготовки.Каталог, "*");

		ПараметрыПомещения.ИсходноеИмяФайла = Отчет.Представление;
		ПараметрыПомещения.ТипСодержимого   = УниверсальныйОбменСБанками.ТипСодержимогоПоИмениФайла(ПараметрыПомещения.ИсходноеИмяФайла);
		
		РезультатПомещения = УниверсальныйОбменСБанками.ПоместитьВЖурналОперацияСФайлами(ПараметрыПомещения);
		Если РезультатПомещения.Выполнено Тогда

			Если ЗначениеЗаполнено(ОтчетТЧ.ОтчетСсылка) Тогда
				ОтчетТЧ.ВерсияДанныхОтчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтчетТЧ.ОтчетСсылка, "ВерсияДанных");
			КонецЕсли;
			
			ОтчетТЧ.ФайлОтчета = ФайлОтчета;
			ОтчетТЧ.ФайлОтчетаСодержитЭП = КонтекстПодписания.ЭтоАрхив;
			
			Отчет.НужноПодписать = Ложь;
			Отчет.Размер = ДанныеАрхива.Размер();

		Иначе
				
			РезультатПодготовки.Выполнено = Ложь;
			Отчет.ОписаниеОшибки = РезультатПомещения.ОписаниеОшибки;
				
		КонецЕсли;
	
	Исключение
	
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		// Записываем ошибку в журнал регистрации.
		ИмяСобытия = НСтр("ru = 'Подписание отчета'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(
			ФинОтчетностьВБанкиКлиентСервер.СобытиеЖурналаРегистрации(ИмяСобытия),
			УровеньЖурналаРегистрации.Ошибка,
			,
			ФайлОтчета,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ДобавитьРезультатПоОтчету(
			РезультатПодготовки,
			Отчет.Описание,
			ОтчетТЧ.КлючСтрокиОтчета,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	
	КонецПопытки;
	
КонецПроцедуры

// Помещает двоичные данные отчетов в журнал, из которого они далее будут подписываться.
//
// Параметры:
//	ПараметрыПодписания - Структура - см. ПараметрыПодписания().
//	Прогрессор - Структура - см. НовыйПрогрессор().
//
// Возвращаемое значение:
//   Структура   - см. РезультатВыгрузки()
//
Функция ПодготовитьПодписываемыеОтчеты(ПараметрыПодписания, Прогрессор)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Предмет",            ПараметрыПодписания.Предмет);
	Запрос.УстановитьПараметр("НезаполненныйФайлОтчета",
		ОбщегоНазначенияБП.МассивПустыхЗначенийРеквизита(
			ПараметрыПодписания.Предмет.Метаданные().ТабличныеЧасти.Отчетность.Реквизиты.ФайлОтчета));
			
	// Получаем исходные данные из табличной части и версии объектов базы данных.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФинОтчетВБанкОтчетность.ИдентификаторСтрокиКомплекта КАК ИдентификаторСтрокиКомплекта,
	|	ФинОтчетВБанкОтчетность.КлючСтрокиОтчета КАК КлючСтрокиОтчета,
	|	ФинОтчетВБанкОтчетность.ВидОтчета КАК ВидОтчета,
	|	ФинОтчетВБанкОтчетность.ОтчетСсылка КАК ОтчетСсылка,
	|	ФинОтчетВБанкОтчетность.ФайлОтчета КАК ФайлОтчета,
	|	ФинОтчетВБанкОтчетность.ОтчетСсылка.ВерсияДанных КАК ВерсияДанныхСсылка,
	|	ФинОтчетВБанкОтчетность.ВерсияДанныхОтчета КАК ВерсияДанныхОтчета,
	|	ФинОтчетВБанкОтчетность.ФайлОтчетаСодержитЭП КАК ФайлОтчетаСодержитЭП
	|ПОМЕСТИТЬ ПодписываемаяОтчетность
	|ИЗ
	|	Документ.ФинОтчетВБанк.Отчетность КАК ФинОтчетВБанкОтчетность
	|ГДЕ
	|	ФинОтчетВБанкОтчетность.Ссылка = &Предмет
	|	И НЕ ФинОтчетВБанкОтчетность.ДанныеОтсутствуют
	|	И (ФинОтчетВБанкОтчетность.ОтчетСсылка <> ЗНАЧЕНИЕ(Документ.РегламентированныйОтчет.ПустаяСсылка)
	|			ИЛИ НЕ ФинОтчетВБанкОтчетность.ФайлОтчета В (&НезаполненныйФайлОтчета))
	|	И &ОтборПоКлючуСубъекта
	|	И &ОтборПоКлючамСтрок
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФайлОтчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодписываемаяОтчетность.ОтчетСсылка КАК ОтчетСсылка,
	|	ПодписываемаяОтчетность.ВерсияДанныхСсылка КАК ВерсияДанныхСсылка
	|ИЗ
	|	ПодписываемаяОтчетность КАК ПодписываемаяОтчетность
	|ГДЕ
	|	ПодписываемаяОтчетность.ОтчетСсылка <> ЗНАЧЕНИЕ(Документ.РегламентированныйОтчет.ПустаяСсылка)";
	Если ЗначениеЗаполнено(ПараметрыПодписания.КлючСтрокиСубъекта) Тогда
		
		Запрос.УстановитьПараметр("КлючСтрокиСубъекта", ПараметрыПодписания.КлючСтрокиСубъекта);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоКлючуСубъекта",
			"ФинОтчетВБанкОтчетность.КлючСтрокиСубъекта = &КлючСтрокиСубъекта");
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоКлючуСубъекта", "ИСТИНА");
		
	КонецЕсли;
	Если ПараметрыПодписания.ОтборПоКлючамСтрок.Количество() > 0 Тогда
		
		Запрос.УстановитьПараметр("КлючиСтрокОтчетов", ПараметрыПодписания.ОтборПоКлючамСтрок);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоКлючамСтрок",
			"ФинОтчетВБанкОтчетность.КлючСтрокиОтчета В(&КлючиСтрокОтчетов)");
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоКлючамСтрок", "ИСТИНА");
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	// Делаем выгрузку для выполнения запроса и вычисления версии объекта.
	Запрос.УстановитьПараметр("ВерсииОтчетов", Запрос.Выполнить().Выгрузить()); // вычисленные версии объектов базы данных
	
	// Получаем список неподписанных или измененных отчетов.
	// Используем сортировку по ОтчетСсылка, чтобы сначала шли записи результата запроса, 
	// не связанные с регламентированными отчетами, их данные хранятся просто в присоединенных файла и быстро выгружаются,
	// а регламентированные отчеты выгружаются через механизмы БРО, что дольше по времени.
	// Тогда визуально прогресс выполнения идет более плавно, т.к. сам обработчик ожидания для получения 
	// прогресса срабатывает с увеличивающимся интервалом и для последних отчетов будет получать сведения о прогрессе реже.
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВерсииОтчетов.ОтчетСсылка КАК ОтчетСсылка,
	|	ПОДСТРОКА(ВерсииОтчетов.ВерсияДанныхСсылка, 1, 12) КАК ВерсияДанныхСсылка
	|ПОМЕСТИТЬ ВерсииОтчетов
	|ИЗ
	|	&ВерсииОтчетов КАК ВерсииОтчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПодписываемаяОтчетность.ИдентификаторСтрокиКомплекта КАК ИдентификаторСтрокиКомплекта,
	|	ПодписываемаяОтчетность.КлючСтрокиОтчета КАК КлючСтрокиОтчета,
	|	ПодписываемаяОтчетность.ВидОтчета КАК ВидОтчета,
	|	ПодписываемаяОтчетность.ОтчетСсылка КАК ОтчетСсылка,
	|	ПодписываемаяОтчетность.ФайлОтчета КАК ФайлОтчета
	|ИЗ
	|	ПодписываемаяОтчетность КАК ПодписываемаяОтчетность
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
	|		ПО ПодписываемаяОтчетность.ФайлОтчета = ЭлектронныеПодписи.ПодписанныйОбъект
	|			И (ЭлектронныеПодписи.ПодписьВерна)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВерсииОтчетов КАК ВерсииОтчетов
	|		ПО ПодписываемаяОтчетность.ОтчетСсылка = ВерсииОтчетов.ОтчетСсылка
	|			И ПодписываемаяОтчетность.ВерсияДанныхОтчета = ВерсииОтчетов.ВерсияДанныхСсылка
	|ГДЕ
	|	(НЕ ПодписываемаяОтчетность.ФайлОтчетаСодержитЭП
	|				И ЭлектронныеПодписи.ПодписанныйОбъект ЕСТЬ NULL
	|			ИЛИ ПодписываемаяОтчетность.ОтчетСсылка <> ЗНАЧЕНИЕ(Документ.РегламентированныйОтчет.ПустаяСсылка)
	|				И ВерсииОтчетов.ОтчетСсылка ЕСТЬ NULL)
	|УПОРЯДОЧИТЬ ПО
	|	ОтчетСсылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	// Поочередно помещаем в журнал для подписания в рамках одной транзакции.
	ПараметрыПомещения = УниверсальныйОбменСБанками.ПараметрыПомещенияВЖурналОперацийСФайлами();
	ПараметрыПомещения.Сервис         = ПараметрыПодписания.Сервис;
	ПараметрыПомещения.Подписать      = Истина;
	ПараметрыПомещения.ТипСодержимого = Перечисления.ТипыСодержимогоФайловОбменаСБанками.Неизвестный;
	ПараметрыПомещения.ТипДокумента   = Перечисления.ТипыДокументовОбменаСБанкамиФинОтчетность.Отчетность;
	ПараметрыПомещения.Организация    = ПараметрыПодписания.Организация;
	ПараметрыПомещения.БанкиПолучатели.Добавить(ПараметрыПодписания.Банк);
	ПараметрыПомещения.Предмет        = ПараметрыПодписания.Предмет;
	ПараметрыПомещения.Идентификатор  = ПараметрыПодписания.Идентификатор;
	
	РезультатВыгрузки = РезультатВыгрузки();
	РезультатВыгрузки.Каталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолучитьИмяВременногоФайла());
	РезультатВыгрузки.Вставить("ИменаАрхивовПоКлючамСтрок", Новый Соответствие);
	
	КешСхемВыгрузкиБО = Новый Структура;
	ПоследнийИспользовавшийсяФормат = Неопределено;

	// Рассчитаем шаг прогрессора в зависимости от количества отчетов.
	РассчитатьШагПрогрессора(Прогрессор, Выборка.Количество());

	Пока Выборка.Следующий() Цикл

		СообщитьПрогресс(Прогрессор);

		ОбъектПодписания = "";
		ПараметрыПомещения.ИсходныеДанные = Неопределено;

		Если ЗначениеЗаполнено(Выборка.ОтчетСсылка) Тогда // выгрузить рег.отчет и подписать результат выгрузки
			
			ФорматПреобразования = ФорматПреобразованияРеглОтчета(ПараметрыПодписания.ФорматыСохранения, Выборка);
			РезультатВыгрузкиФайла = ВыгрузитьРегламентированныйОтчет(
				Выборка, ФорматПреобразования, КешСхемВыгрузкиБО, РезультатВыгрузки.Каталог);
			
			Если РезультатВыгрузкиФайла.Выполнено Тогда
				
				ОбъектПодписания = РезультатВыгрузкиФайла.Подписать;
				Если ПустаяСтрока(ОбъектПодписания) Тогда // файл не должен подписываться
					
					Если РезультатВыгрузкиФайла.ОтчетностьПоКлючамСтрок.Количество() > 0 Тогда
						// Текущая выгрузка относится одной конкретной строке отчета и в ней может быть только один файл.
						УдалитьФайлы(РезультатВыгрузкиФайла.Каталог + РезультатВыгрузкиФайла.ОтчетностьПоКлючамСтрок[0].Представление);
					КонецЕсли;
					Продолжить;
					
				ИначеЕсли ОбъектПодписания = "Архив" Или ОбъектПодписания = "Дополнительно" Тогда
					
					РезультатВыгрузки.ИменаАрхивовПоКлючамСтрок.Вставить(Выборка.КлючСтрокиОтчета, РезультатВыгрузкиФайла.ИмяАрхива);
					
				КонецЕсли;
				
			КонецЕсли;

		ИначеЕсли ЗначениеЗаполнено(Выборка.ФайлОтчета) Тогда // подписать присоединенный файл
			
			ПараметрыДанных = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
			ПараметрыДанных.ВызыватьИсключение = Ложь;
			ПараметрыДанных.ПолучатьСсылкуНаДвоичныеДанные = Ложь;
			
			ИнформацияОФайле = РаботаСФайлами.ДанныеФайла(Выборка.ФайлОтчета, ПараметрыДанных);
			РезультатВыгрузкиФайла = РезультатВыгрузки();
			Если ИнформацияОФайле = Неопределено Тогда // при получении данных файла из системы хранения возникла ошибка

				ДобавитьРезультатПоОтчету(РезультатВыгрузкиФайла, Строка(Выборка.ФайлОтчета), Выборка.КлючСтрокиОтчета,
					СтрШаблон(НСтр("ru = 'Ошибка при подготовке %1'"), Строка(Выборка.ФайлОтчета)));

			ИначеЕсли ИнформацияОФайле.ПодписанЭП
			   И ДанныеПодписиФайла(Выборка.ФайлОтчета) <> Неопределено Тогда // уже подписан
				
				Продолжить;
				
			ИначеЕсли ЭтоИмяФайлаАрхива(ИнформацияОФайле.ИмяФайла) Тогда // подписываются файлы внутри архива
				
				ОбъектПодписания = "Архив";
				РезультатВыгрузки.ИменаАрхивовПоКлючамСтрок.Вставить(Выборка.КлючСтрокиОтчета, ИнформацияОФайле.ИмяФайла);
				
				ПараметрыПомещения.ИсходныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(Выборка.ФайлОтчета, Ложь);
				Если ЗаполнениеФинОтчетностиВБанки.ЕстьПодписьВнутриАрхива(ПараметрыПомещения.ИсходныеДанные) Тогда
					// Архив не нуждается в подписании, т.к. уже содерит файлы подписей.
					// Нужно лишь будет проставить флаг ФайлОтчетаСодержитЭП.
					ДобавитьРезультатПоОтчету(РезультатВыгрузкиФайла, "", Выборка.КлючСтрокиОтчета);
					Продолжить;
					
				КонецЕсли;
				
				РезультатВыгрузкиФайла.Каталог = РезультатВыгрузки.Каталог;
				
				ИсточникИсходныхДанных = Новый ЧтениеZipФайла(ПараметрыПомещения.ИсходныеДанные.ОткрытьПотокДляЧтения());
				Для каждого ФайлИзАрхива Из ИсточникИсходныхДанных.Элементы Цикл
					
					ДобавитьРезультатПоОтчету(РезультатВыгрузкиФайла, ФайлИзАрхива.Имя, Выборка.КлючСтрокиОтчета);
					ИсточникИсходныхДанных.Извлечь(ФайлИзАрхива, РезультатВыгрузкиФайла.Каталог, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
				
				КонецЦикла;
				
			Иначе // подписывается отдельный присоединенный файл

				ОбъектПодписания = "ДвоичныеДанные";
				ПараметрыПомещения.ИсходныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(Выборка.ФайлОтчета, Ложь);
				
				РезультатВыгрузкиФайла = РезультатВыгрузки();
				ДобавитьРезультатПоОтчету(РезультатВыгрузкиФайла, ИнформацияОФайле.ИмяФайла, Выборка.КлючСтрокиОтчета);

			КонецЕсли;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
		РезультатВыгрузки.Выполнено = РезультатВыгрузки.Выполнено И РезультатВыгрузкиФайла.Выполнено;
		Если Не РезультатВыгрузкиФайла.Выполнено Тогда // переносим в результат только сообщения об ошибках
			Для каждого Ошибка Из РезультатВыгрузкиФайла.ОтчетностьПоКлючамСтрок Цикл
				Если Не ПустаяСтрока(Ошибка.ОписаниеОшибки) Тогда
					ЗаполнитьЗначенияСвойств(РезультатВыгрузки.ОтчетностьПоКлючамСтрок.Добавить(), Ошибка);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если Не РезультатВыгрузки.Выполнено Тогда
			// Если мы заранее знаем, что выгрузка неуспешна, то далее не нужно ничего помещать в журнал.
			Продолжить;
		КонецЕсли;
		
		// Разделитель файлов, принадлежащих к разным строкам (из разных архивов).
		ПрефиксИмен = Формат(Выборка.КлючСтрокиОтчета, "ЧЦ=5; ЧВН=; ЧГ=0");
		Для каждого ФайлВАрхиве Из РезультатВыгрузкиФайла.ОтчетностьПоКлючамСтрок Цикл
			
			// Если объект подписания - это не "ДвоичныеДанные", то могут быть следующие варианты.
			Если ОбъектПодписания = "Файл" Или ОбъектПодписания = "Архив" Тогда
				
				ПараметрыПомещения.ИсходныеДанные = Новый ДвоичныеДанные(РезультатВыгрузкиФайла.Каталог + ФайлВАрхиве.Представление);
				УдалитьФайлы(РезультатВыгрузкиФайла.Каталог + ФайлВАрхиве.Представление);
				
			ИначеЕсли ОбъектПодписания = "Дополнительно" Тогда
				
				Если Не ФайлВАрхиве.НужноПодписать Тогда
					// Внутри архива могут быть как "НужноПодписать = Ложь" - xml-файлы регл.отчета, уже подписанные ФНС
					// и не требующие подписания, так и "НужноПодписать = Истина" - xlsx-файлы, которые только сейчас получены
					// и которые «Дополнительно» нужно подписать.
					Продолжить;
				КонецЕсли;
				ПараметрыПомещения.ИсходныеДанные = Новый ДвоичныеДанные(РезультатВыгрузкиФайла.Каталог + ФайлВАрхиве.Представление);
				УдалитьФайлы(РезультатВыгрузкиФайла.Каталог + ФайлВАрхиве.Представление);
				
			КонецЕсли;
			ПараметрыПомещения.ИсходноеИмяФайла = ПрефиксИмен + ФайлВАрхиве.Представление;
			ПараметрыПомещения.ТипСодержимого   = УниверсальныйОбменСБанками.ТипСодержимогоПоИмениФайла(ПараметрыПомещения.ИсходноеИмяФайла);
			
			РезультатПомещения = УниверсальныйОбменСБанками.ПоместитьВЖурналОперацияСФайлами(ПараметрыПомещения);
			Если РезультатПомещения.Выполнено Тогда
				
				ДобавитьРезультатПоОтчету(РезультатВыгрузки, ПараметрыПомещения.ИсходноеИмяФайла, ФайлВАрхиве.КлючСтрокиОтчета);
				
			Иначе

				ДобавитьРезультатПоОтчету(РезультатВыгрузки, ФайлВАрхиве.Представление, ФайлВАрхиве.КлючСтрокиОтчета,
					РезультатПомещения.ОписаниеОшибки);
				
			КонецЕсли;
		
		КонецЦикла;

		Если ОбъектПодписания = "Архив" Тогда
			
			УдалитьВременныйКаталог(РезультатВыгрузкиФайла.Каталог, ПараметрыПодписания.Предмет);
			
 		ИначеЕсли ОбъектПодписания = "Дополнительно" Тогда
			// Оставшиеся файлы просто сохраняем на время.
			АрхивРеглОтчета = Новый ЗаписьZipФайла;
			АрхивРеглОтчета.Добавить(РезультатВыгрузкиФайла.Каталог + "*");
			ПараметрыПомещения.ИсходныеДанные = АрхивРеглОтчета.ПолучитьДвоичныеДанные(,, МетодСжатияZIP.Копирование);
			ПараметрыПомещения.ИсходноеИмяФайла = ПрефиксИмен + "ВыгрузкаРегламентированногоОтчета";
			ПараметрыПомещения.ТипСодержимого   = УниверсальныйОбменСБанками.ТипСодержимогоПоИмениФайла(ПараметрыПомещения.ИсходноеИмяФайла);
			
			ПараметрыПомещения.Подписать = Ложь;
			РезультатПомещения = УниверсальныйОбменСБанками.ПоместитьВЖурналОперацияСФайлами(ПараметрыПомещения);
			ПараметрыПомещения.Подписать = Истина;
			
			Если Не РезультатПомещения.Выполнено Тогда
				
				ДобавитьРезультатПоОтчету(РезультатВыгрузки,
					РезультатВыгрузкиФайла.ИмяАрхива, Выборка.КлючСтрокиОтчета, РезультатПомещения.ОписаниеОшибки);

			КонецЕсли;
			УдалитьВременныйКаталог(РезультатВыгрузкиФайла.Каталог, ПараметрыПодписания.Предмет);
			
		КонецЕсли;
		
	КонецЦикла;

	Если Не РезультатВыгрузки.Выполнено Тогда // помещенные данные не будут использоваться и должны быть очищены
		
		УниверсальныйОбменСБанками.УдалитьЗаписиЖурналаОперацийСФайламиПоИдентификатору(ПараметрыПодписания.Идентификатор);
		
	КонецЕсли;
	
	Возврат РезультатВыгрузки;
	
КонецФункции

// Прикрепляет к пакету отчетности файлы подписей.
//
// Параметры:
//	ПараметрыПодписания - Структура - см. ПараметрыПодписания().
//	Прогрессор - Структура - см. НовыйПрогрессор().
//
Функция ПрикрепитьПодписи(ПараметрыПодписания, Прогрессор)

	Результат = РезультатВыгрузки();
	
	Подписи = УниверсальныйОбменСБанками.ВременныеДанныеТранзакции(ПараметрыПодписания.Идентификатор, , Истина, , Истина);
	
	Подписи.Колонки.Добавить("КлючСтрокиОтчета",
		Метаданные.Документы.ФинОтчетВБанк.ТабличныеЧасти.Отчетность.Реквизиты.КлючСтрокиОтчета.Тип);
	Для каждого РезультатПодписания Из Подписи Цикл
		
		РезультатПодписания.КлючСтрокиОтчета = Число(Лев(РезультатПодписания.ИсходноеИмяФайла, 5));
		РезультатПодписания.ИсходноеИмяФайла = Сред(РезультатПодписания.ИсходноеИмяФайла, 6);
		
	КонецЦикла;
	Подписи.Индексы.Добавить("КлючСтрокиОтчета");
	
	// Кеширование источников представлений для строк отчетности.
	ОписаниеПредставленийОтчетов = Новый Структура;
	ОписаниеПредставленийОтчетов.Вставить("ОписаниеВидовОтчетов", ЗаполнениеФинОтчетностиВБанки.ОписаниеВидовОтчетов());
	ИдентификаторКомплекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыПодписания.Предмет, "ИдентификаторКомплекта");
	НастройкиКомплекта = ЗаполнениеФинОтчетностиВБанки.НастройкиКомплектаОтчетности(ПараметрыПодписания.Банк, ИдентификаторКомплекта);
	ОписаниеПредставленийОтчетов.Вставить("НастройкиКомплекта", НастройкиКомплекта);
	
	УстановившийПодпись = Пользователи.АвторизованныйПользователь();
	РасширениеПодписи = РасширениеЭлектроннойПодписи();
	РасширениеСертификата = РасширениеСертификата();

	// Параметры, производные от контекста. Нужны для подписывания через механизм БСП.
	Сертификат = ПараметрыПодписания.Сертификат;
	КомуВыданСертификат = ЭлектроннаяПодпись.ПредставлениеСубъекта(Новый СертификатКриптографии(Сертификат));
	ПараметрыПодписания.Сертификат = Неопределено;
	
	// Подписываем файлы отчетности.
	
	Сейчас = ПараметрыПодписания.Сейчас;
	ОтборПоКлючу = Новый Структура("КлючСтрокиОтчета");
	ОтборПоКлючамСтрок = ПараметрыПодписания.ОтборПоКлючамСтрок;
	ИменаАрхивовПоКлючамСтрок = ПараметрыПодписания.ИменаАрхивовПоКлючамСтрок;
	ФинОтчетОбъект = ПараметрыПодписания.Предмет.ПолучитьОбъект();
	
	РассчитатьШагПрогрессора(Прогрессор, ОтборПоКлючамСтрок.Количество());
	
	Для каждого Отчет Из ФинОтчетОбъект.Отчетность Цикл
		
		Попытка
	
			ОтборПоКлючу.КлючСтрокиОтчета = Отчет.КлючСтрокиОтчета;
			
			ИнформацияОбИсходныхДанных = ОтборПоКлючамСтрок.НайтиСтроки(ОтборПоКлючу);
			Если ИнформацияОбИсходныхДанных.Количество() = 0 Тогда
				// Подпись не формировалась.
				Продолжить;
			КонецЕсли;
			
			СообщитьПрогресс(Прогрессор);
			
			ИмяАрхива = ИменаАрхивовПоКлючамСтрок[Отчет.КлючСтрокиОтчета];
			Если ЗначениеЗаполнено(ИмяАрхива)
			   И ИнформацияОбИсходныхДанных.Количество() = 1
			   И ПустаяСтрока(ИнформацияОбИсходныхДанных[0].Представление) Тогда
				// На этапе подготовки файлов было обнаружено, что архив уже содержит подписи. Поэтому никаких файлов
				// обрабатывать не нужно, а требуется лишь проставить признак.
				Отчет.ФайлОтчетаСодержитЭП = Истина;
				Продолжить;

			КонецЕсли;
			
			ПодписиПоКлючу = Подписи.НайтиСтроки(ОтборПоКлючу);
			Если ПодписиПоКлючу.Количество() = 0 Тогда
				// Подпись не сформировалась.
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИмяАрхива) И ИнформацияОбИсходныхДанных.Количество() > 1 Тогда
				// Исходный набор файлов - это регл.отчет или архив, содержащий несколько файлов.
				// Создаем архив, содержащий как файлы исходного архива, так и подписи для этих файлов.
				Результат.Каталог = ФайловаяСистема.СоздатьВременныйКаталог();
				Если ЗначениеЗаполнено(Отчет.ОтчетСсылка) Тогда // регл.отчет
					
					Отчет.ВерсияДанныхОтчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Отчет.ОтчетСсылка, "ВерсияДанных");
					
					Для каждого РезультатПодписания Из ПодписиПоКлючу Цикл
						
						Если РезультатПодписания.Подписать Тогда // сформированная подпись
							
							РезультатПодписания.ИсходныеДанные.Получить().Записать(
								Результат.Каталог + РезультатПодписания.ИсходноеИмяФайла);
							
							РезультатПодписания.Подпись.Получить().Записать(
								Результат.Каталог + РезультатПодписания.ИсходноеИмяФайла + "." + РасширениеПодписи);
								
						Иначе // файлы, которые должны остаться неизменными в архиве
							
							АрхивРеглОтчета = Новый ЧтениеZipФайла(РезультатПодписания.ИсходныеДанные.Получить().ОткрытьПотокДляЧтения());
							АрхивРеглОтчета.ИзвлечьВсе(Результат.Каталог);
							АрхивРеглОтчета.Закрыть();
								
						КонецЕсли;

					КонецЦикла;				
					
					Отчет.ФайлОтчета = СоздатьАрхивСПодписямиИзКаталога(Результат.Каталог, ИмяАрхива, ПараметрыПодписания.Предмет,
						РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Отчет.ОтчетСсылка));
					УдалитьВременныйКаталог(Результат.Каталог, ПараметрыПодписания.Предмет);

				Иначе // присоединенный файл
					
					ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(Отчет.ФайлОтчета);
					Архив = Новый ЧтениеZipФайла(ДвоичныеДанныеФайла.ОткрытьПотокДляЧтения());
					Комментарий = Архив.Комментарий;
					Архив.ИзвлечьВсе(Результат.Каталог, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
					Архив.Закрыть();
					
					Для каждого РезультатПодписания Из ПодписиПоКлючу Цикл
						РезультатПодписания.Подпись.Получить().Записать(
							Результат.Каталог + РезультатПодписания.ИсходноеИмяФайла + "." + РасширениеПодписи);
					КонецЦикла;
					
					Архив = Новый ЗаписьZipФайла;
					Архив.Добавить(Результат.Каталог + "*");
					АдресПодписи = ПоместитьВоВременноеХранилище(Архив.ПолучитьДвоичныеДанные( , Комментарий));
					УдалитьВременныйКаталог(Результат.Каталог, ПараметрыПодписания.Предмет);
					
					ИнформацияОФайле = Новый Структура;
					ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", АдресПодписи);
					ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
					
					РаботаСФайлами.ОбновитьФайл(Отчет.ФайлОтчета, ИнформацияОФайле);
					
					УдалитьИзВременногоХранилища(АдресПодписи);
					
				КонецЕсли;
				
				Отчет.ФайлОтчетаСодержитЭП = Истина;
				
				ДобавитьРезультатПоОтчету(Результат, ИмяАрхива, Отчет.КлючСтрокиОтчета);
				
			Иначе
				// Если это регл.отчет или архив, состоящий всего из одного файла, то подписываем его как
				// присоединенный файл через БСП, а не помещаем в архив.
				РезультатПодписания = ПодписиПоКлючу[0];
				
				Если ЗначениеЗаполнено(Отчет.ОтчетСсылка) Тогда // регл.отчет
					
					Отчет.ВерсияДанныхОтчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Отчет.ОтчетСсылка, "ВерсияДанных");
					
					ИнформацияОФайле = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(РезультатПодписания.ИсходноеИмяФайла);
					
					ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
					ПараметрыФайла.Автор              = УстановившийПодпись;
					ПараметрыФайла.ВладелецФайлов     = ПараметрыПодписания.Предмет;
					ПараметрыФайла.ИмяБезРасширения   = ИнформацияОФайле.ИмяБезРасширения;
					ПараметрыФайла.РасширениеБезТочки = СтрЗаменить(ИнформацияОФайле.Расширение, ".", "");
					
					АдресИсходныеДанные = ПоместитьВоВременноеХранилище(РезультатПодписания.ИсходныеДанные.Получить());
					
					Отчет.ФайлОтчета = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресИсходныеДанные);
					
					УдалитьИзВременногоХранилища(АдресИсходныеДанные);
					
				КонецЕсли;
				
				СвойстваПодписи = Новый Структура;
				СвойстваПодписи.Вставить("Подпись",             РезультатПодписания.Подпись.Получить());
				СвойстваПодписи.Вставить("УстановившийПодпись", УстановившийПодпись);
				СвойстваПодписи.Вставить("Комментарий",         ПредставлениеСтрокиОтчетности(Отчет, ОписаниеПредставленийОтчетов));
				СвойстваПодписи.Вставить("ИмяФайлаПодписи",     РезультатПодписания.ИсходноеИмяФайла + "." + РасширениеПодписи);
				СвойстваПодписи.Вставить("Отпечаток",           ПараметрыПодписания.ОтпечатокСертификата);
				СвойстваПодписи.Вставить("Сертификат",          Сертификат);
				СвойстваПодписи.Вставить("КомуВыданСертификат", КомуВыданСертификат);
				СвойстваПодписи.Вставить("ПодписьВерна",        Истина);
				СвойстваПодписи.Вставить("ДатаПроверкиПодписи", Сейчас);
				
				ЭлектроннаяПодпись.ДобавитьПодпись(Отчет.ФайлОтчета, СвойстваПодписи);
				
				ДобавитьРезультатПоОтчету(Результат, РезультатПодписания.ИсходноеИмяФайла, Отчет.КлючСтрокиОтчета);

			КонецЕсли;
			
		Исключение
		
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			// Записываем ошибку в журнал регистрации.
			ИмяСобытия = НСтр("ru = 'Подписание отчета'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(
				ФинОтчетностьВБанкиКлиентСервер.СобытиеЖурналаРегистрации(ИмяСобытия),
				УровеньЖурналаРегистрации.Ошибка,
				,
				Отчет.ФайлОтчета,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ДобавитьРезультатПоОтчету(
				Результат,
				?(ЗначениеЗаполнено(ИмяАрхива), ИмяАрхива, РезультатПодписания.ИсходноеИмяФайла),
				Отчет.КлючСтрокиОтчета,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		
		КонецПопытки;
		
	КонецЦикла;
	Если ФинОтчетОбъект.Модифицированность() Тогда
		ФинОтчетОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;

	УниверсальныйОбменСБанками.УдалитьЗаписиЖурналаОперацийСФайламиПоИдентификатору(ПараметрыПодписания.Идентификатор);
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеПодписиФайла(ФайлОтчета)
	Перем ДанныеПодписи;
	
	Подписи = ЭлектроннаяПодпись.УстановленныеПодписи(ФайлОтчета);
	Для Каждого ИнформацияОПодписи Из Подписи Цикл
		
		Если Не ИнформацияОПодписи.ПодписьВерна Тогда
			Продолжить;
		КонецЕсли;

		ДанныеПодписи = ИнформацияОПодписи;
		
		Прервать; // выгружаем первую из подписей
		
	КонецЦикла;
	
	Возврат ДанныеПодписи;
	
КонецФункции

Процедура УдалитьПодписиФайлов(ВыборкаПоФайлам, РезультатЗаполнения)

	Пока ВыборкаПоФайлам.Следующий() Цикл

		Если Не ЗначениеЗаполнено(ВыборкаПоФайлам.ФайлОтчета) Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			УдалитьПодписиФайла(ВыборкаПоФайлам);
		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			ИмяСобытия = НСтр("ru = 'Удаление подписи'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(
				ЗаполнениеФинОтчетностиВБанки.СобытиеЖурналаРегистрации(ИмяСобытия),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.ФинОтчетВБанкПрисоединенныеФайлы,
				ВыборкаПоФайлам.ФайлОтчета,
				ПодробноеПредставлениеОшибки);
				
			ДобавитьРезультатПоОтчету(РезультатЗаполнения, КраткоеПредставлениеОшибки, ВыборкаПоФайлам.КлючСтрокиОтчета,
				?(ПустаяСтрока(ПодробноеПредставлениеОшибки), КраткоеПредставлениеОшибки, ПодробноеПредставлениеОшибки));
			
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры

Процедура УдалитьПодписиФайла(Отчет)
	
	НомераПодписей = Новый Массив;

	Если ТипЗнч(Отчет) = Тип("ВыборкаИзРезультатаЗапроса") Тогда // запрос к информационной базе уже сделан
		
		Выборка = Отчет.Выбрать();
		Пока Выборка.Следующий() Цикл
			НомераПодписей.Добавить(Выборка.ПорядковыйНомер);
		КонецЦикла;
		ЭлектроннаяПодпись.УдалитьПодпись(Отчет.ФайлОтчета, НомераПодписей);
		
	Иначе // делаем запрос к информационной базе
		
		ИнформацияПодписей = ЭлектроннаяПодпись.УстановленныеПодписи(Отчет);
		Для каждого Подпись Из ИнформацияПодписей Цикл
			НомераПодписей.Добавить(Подпись.ПорядковыйНомер);
		КонецЦикла;
		ЭлектроннаяПодпись.УдалитьПодпись(Отчет, НомераПодписей);		
		
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьАрхивСПодписямиИзКаталога(КаталогИсточник, Имя, Владелец, Представление = "", ДанныеАрхива = Неопределено)
	
	Если ПустаяСтрока(Представление) Тогда
		Представление = Имя;
	КонецЕсли;
	
	Архив = Новый ЗаписьZipФайла;
	Архив.Добавить(КаталогИсточник + "*");
	ДанныеАрхива = Архив.ПолучитьДвоичныеДанные( , СтрШаблон(НСтр("ru = 'Электронные подписи для %1'"), Представление));
	АдресПодписей = ПоместитьВоВременноеХранилище(ДанныеАрхива);

	ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
	ПараметрыФайла.Автор              = Пользователи.АвторизованныйПользователь();
	ПараметрыФайла.ВладелецФайлов     = Владелец;
	ПараметрыФайла.ИмяБезРасширения   = Лев(Имя, СтрДлина(Имя) - 4);
	ПараметрыФайла.РасширениеБезТочки = "zip";

	ФайлОтчета = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресПодписей);
	УдалитьИзВременногоХранилища(АдресПодписей);
	
	Возврат ФайлОтчета;
	
КонецФункции

#КонецОбласти

#Область Отправка

Функция ОтправитьВБанк(ПараметрыПодписания, Прогрессор)
	
	РассчитатьШагПрогрессора(Прогрессор, 3); // Делаем на 1 больше, чтобы не зависал прогрессор на 100%.
	
	// Создание транспортного контейнера.
	СообщитьПрогресс(Прогрессор, НСтр("ru = 'Создание транспортного контейнера'"));

	РезультатОтправки = ПараметрыПодписания.РезультатПодготовки;

	ПараметрыТранзакции = УниверсальныйОбменСБанками.ПараметрыСоздатьТранзакцииИзДанныхЖурналаОперацийСФайлами();
	ПараметрыТранзакции.Сервис              = ПараметрыПодписания.Сервис;
	ПараметрыТранзакции.Предмет             = ПараметрыПодписания.Предмет;
	ПараметрыТранзакции.ИдентификаторВоВременномХранилище = ПараметрыПодписания.Идентификатор;
	ПараметрыТранзакции.ТипДокументооборота = Перечисления.ДокументооборотыОбменаСБанками.ФинансоваяОтчетность;
	ПараметрыТранзакции.ТипТранзакции       = Перечисления.ТипыТранзакцийОбменаСБанкамиФинОтчетность.Отчетность;
	ПараметрыТранзакции.ОтпечатокСертификатаПодписи = ПараметрыПодписания.ОтпечатокСертификата;
	ПараметрыТранзакции.Организация         = ПараметрыПодписания.Организация;
	
	РезультатСоздания = УниверсальныйОбменСБанками.СоздатьТранзакцииИзДанныхЖурналаОперацийСФайлами(ПараметрыТранзакции);
	Если Не РезультатСоздания.Выполнено Тогда
		
		ДобавитьРезультатПоОтчету(РезультатОтправки,
			Строка(ПараметрыПодписания.Предмет), , РезультатСоздания.ОписаниеОшибки);

		Возврат РезультатОтправки;
		
	КонецЕсли;
	
	// Отправка транспортного контейнера.
	СообщитьПрогресс(Прогрессор, НСтр("ru = 'Отправка отчетности'"));
	
	РезультатСоздания = УниверсальныйОбменСБанками.ОтправитьТранзакцииНаСервер(ПараметрыПодписания.Сервис, 
							РезультатСоздания.Транзакции);
	Если Не РезультатСоздания.Выполнено Тогда
		
		ДобавитьРезультатПоОтчету(РезультатОтправки,
			Строка(ПараметрыПодписания.Предмет), , РезультатСоздания.ОписаниеОшибки);
		
	КонецЕсли;
	
	Возврат РезультатОтправки;
	
КонецФункции

#КонецОбласти

#Область ОбменАрхивами

Процедура СоздатьXMLПоФайламПакета(Параметры, Результат)
	
	ПериодыОтчетности = ПериодыОтчетностиИзПакета(Параметры.ФинОтчет);

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ФинОтчет",      Параметры.ФинОтчет);
	Запрос.УстановитьПараметр("ДатаНачала",    ПериодыОтчетности.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ПериодыОтчетности.ДатаОкончания);

	// По компаниям-организациям выгружаем также настройки системы налогообложения, 
	// чтобы потом можно было их передать банку, когда будем отправлять из базы, в которую загрузим текущий архив.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФинОтчетВБанк.Организация.ИНН КАК ИНН,
	|	ФинОтчетВБанк.Дата КАК Дата,
	|	ФинОтчетВБанк.ИдентификаторКомплекта КАК ИдентификаторКомплекта,
	|	ФинОтчетВБанк.Банк КАК Банк
	|ИЗ
	|	Документ.ФинОтчетВБанк КАК ФинОтчетВБанк
	|ГДЕ
	|	ФинОтчетВБанк.Ссылка = &ФинОтчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФинОтчетВБанкЭкономическиеСубъекты.НомерСтроки КАК НомерСтрокиСубъекта,
	|	ФинОтчетВБанкЭкономическиеСубъекты.Субъект.ИНН КАК ИНН,
	|	ФинОтчетВБанкЭкономическиеСубъекты.Субъект.КПП КАК КПП,
	|	ФинОтчетВБанкЭкономическиеСубъекты.ВключатьОбособленныеПодразделения КАК ВключатьОбособленныеПодразделения,
	|	ФинОтчетВБанкЭкономическиеСубъекты.Субъект.Наименование КАК Наименование,
	|	ФинОтчетВБанкЭкономическиеСубъекты.Субъект КАК Субъект,
	|	ФинОтчетВБанкОтчетность.НомерСтроки КАК НомерСтрокиОтчета,
	|	ФинОтчетВБанкОтчетность.КлючСтрокиОтчета КАК КлючСтрокиОтчета,
	|	ФинОтчетВБанкОтчетность.ДанныеОтсутствуют КАК ДанныеОтсутствуют,
	|	ФинОтчетВБанкОтчетность.ИдентификаторСтрокиКомплекта КАК ИдентификаторСтрокиКомплекта,
	|	ФинОтчетВБанкОтчетность.ВидОтчета КАК ВидОтчета,
	|	ФинОтчетВБанкОтчетность.УточнениеНаименования КАК УточнениеНаименования,
	|	ФинОтчетВБанкОтчетность.ДатаНачала КАК ДатаНачала,
	|	ФинОтчетВБанкОтчетность.ДатаОкончания КАК ДатаОкончания,
	|	ФинОтчетВБанкОтчетность.ФайлОтчетаСодержитЭП КАК ФайлОтчетаСодержитЭП
	|ИЗ
	|	Документ.ФинОтчетВБанк.ЭкономическиеСубъекты КАК ФинОтчетВБанкЭкономическиеСубъекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ФинОтчетВБанк.Отчетность КАК ФинОтчетВБанкОтчетность
	|		ПО ФинОтчетВБанкЭкономическиеСубъекты.Ссылка = ФинОтчетВБанкОтчетность.Ссылка
	|			И ФинОтчетВБанкЭкономическиеСубъекты.КлючСтрокиСубъекта = ФинОтчетВБанкОтчетность.КлючСтрокиСубъекта
	|ГДЕ
	|	ФинОтчетВБанкОтчетность.Ссылка = &ФинОтчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиСубъекта,
	|	НомерСтрокиОтчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧЭкономическиеСубъекты.Субъект КАК Организация
	|ПОМЕСТИТЬ ВТ_Организации
	|ИЗ
	|	Документ.ФинОтчетВБанк.ЭкономическиеСубъекты КАК ТЧЭкономическиеСубъекты
	|ГДЕ
	|	ТЧЭкономическиеСубъекты.Ссылка = &ФинОтчет
	|	И ТИПЗНАЧЕНИЯ(ТЧЭкономическиеСубъекты.Субъект) = ТИП(Справочник.Организации)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Период КАК Период,
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.СистемаНалогообложения КАК СистемаНалогообложения,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходы КАК ПрименяетсяУСНДоходы,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходыМинусРасходы КАК ПрименяетсяУСНДоходыМинусРасходы,
	|	НастройкиСистемыНалогообложения.ПлательщикЕНВД КАК ПлательщикЕНВД,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНПатент КАК ПрименяетсяУСНПатент,
	|	НастройкиСистемыНалогообложения.ПлательщикТорговогоСбора КАК ПлательщикТорговогоСбора,
	|	НастройкиСистемыНалогообложения.ПрименяетсяНалогНаПрофессиональныйДоход КАК ПрименяетсяНалогНаПрофессиональныйДоход,
	|	НастройкиСистемыНалогообложения.ДатаИзменения КАК ДатаИзменения
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(
	|			&ДатаНачала,
	|			Организация В
	|				(ВЫБРАТЬ
	|					ВТ_Организации.Организация
	|				ИЗ
	|					ВТ_Организации)) КАК НастройкиСистемыНалогообложения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Период,
	|	НастройкиСистемыНалогообложения.Организация,
	|	НастройкиСистемыНалогообложения.СистемаНалогообложения,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходы,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходыМинусРасходы,
	|	НастройкиСистемыНалогообложения.ПлательщикЕНВД,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНПатент,
	|	НастройкиСистемыНалогообложения.ПлательщикТорговогоСбора,
	|	НастройкиСистемыНалогообложения.ПрименяетсяНалогНаПрофессиональныйДоход,
	|	НастройкиСистемыНалогообложения.ДатаИзменения
	|ИЗ
	|	ВТ_Организации КАК ВТ_Организации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|		ПО ВТ_Организации.Организация = НастройкиСистемыНалогообложения.Организация
	|ГДЕ
	|	НастройкиСистемыНалогообложения.Период > &ДатаНачала
	|	И НастройкиСистемыНалогообложения.Период <= &ДатаОкончания
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Период";
	
	Результаты = Запрос.ВыполнитьПакет();
	ИнформацияОПакете      = Результаты[0].Выгрузить().Получить(0);
	СодержимоеПакета       = Результаты[1].Выбрать();
	СистемыНалогообложения = Результаты[3].Выгрузить();
	
	СистемыНалогообложения.Индексы.Добавить("Организация");
	
	Протокол = Новый ЗаписьXML;
	Протокол.ОткрытьФайл(Результат.Каталог + "Reports.xml");
	Протокол.ЗаписатьОбъявлениеXML();
	
	Протокол.ЗаписатьНачалоЭлемента("Документ");
	Протокол.ЗаписатьАтрибут("ИдентификаторКомплекта", ИнформацияОПакете.ИдентификаторКомплекта);
	Протокол.ЗаписатьАтрибут("Дата",                   XMLСтрока(ИнформацияОПакете.Дата));
	Протокол.ЗаписатьАтрибут("КраткоеПредставление",   Параметры.КраткоеПредставление);
	
	ИнформацияОБанке = УниверсальныйОбменСБанками.РеквизитыБанка(ИнформацияОПакете.Банк, "Идентификатор,ИНН,Наименование");
	Протокол.ЗаписатьНачалоЭлемента("Банк");
	Протокол.ЗаписатьАтрибут("Идентификатор", ИнформацияОБанке.Идентификатор);
	Протокол.ЗаписатьАтрибут("Наименование", ИнформацияОБанке.Наименование);
	Протокол.ЗаписатьКонецЭлемента(); // Банк
	
	Протокол.ЗаписатьНачалоЭлемента("Субъекты");

	Субъект = Неопределено;
	ВключатьОбособленныеПодразделения = Ложь;
	ПапкаПредыдущегоСубъекта = "";
	Пока СодержимоеПакета.Следующий() Цикл
		
		Отчет = Результат.ОтчетностьПоКлючамСтрок.Найти(СодержимоеПакета.КлючСтрокиОтчета, "КлючСтрокиОтчета");
		
		Если Субъект <> СодержимоеПакета.Субъект
		 Или ВключатьОбособленныеПодразделения <> СодержимоеПакета.ВключатьОбособленныеПодразделения Тогда // следующий субъект
		 
			Если Субъект <> Неопределено Тогда

				Протокол.ЗаписатьКонецЭлемента(); // Отчетность
				Протокол.ЗаписатьКонецЭлемента(); // Субъект
				
			КонецЕсли;
			Субъект = СодержимоеПакета.Субъект;
			ВключатьОбособленныеПодразделения = СодержимоеПакета.ВключатьОбособленныеПодразделения;
			
			Протокол.ЗаписатьНачалоЭлемента("Субъект");
			Протокол.ЗаписатьАтрибут("ИНН", СодержимоеПакета.ИНН);
			Если Не ПустаяСтрока(СодержимоеПакета.КПП) Тогда
				Протокол.ЗаписатьАтрибут("КПП", СодержимоеПакета.КПП);
			КонецЕсли;
			Протокол.ЗаписатьАтрибут("ВключатьОбособленныеПодразделения", ?(ВключатьОбособленныеПодразделения, "true", "false"));
		 
			Протокол.ЗаписатьНачалоАтрибута("Наименование");
			Протокол.ЗаписатьТекст(СодержимоеПакета.Наименование);
			Протокол.ЗаписатьКонецАтрибута();
			
			Протокол.ЗаписатьНачалоАтрибута("ИмяПапки");
			Если Отчет = Неопределено Тогда // файл не выгружался
				ИмяПапки = СокрЛП(СодержимоеПакета.ИНН) + " "
					+ ?(ПустаяСтрока(СодержимоеПакета.КПП), "", СокрЛП(СодержимоеПакета.КПП) + " ")
					+ ЗаменитьНедопустимыеСимволыВИмениФайла(Лев(СодержимоеПакета.Наименование, 50));
			Иначе
				ИмяПапки = Отчет.ПапкаСубъекта;
			КонецЕсли;
			Протокол.ЗаписатьТекст(ИмяПапки);
			Протокол.ЗаписатьКонецАтрибута();
		 
			СоздатьУзелXMLНастройкиСистемыНалогообложения(Протокол, Субъект, СистемыНалогообложения);
			
			Протокол.ЗаписатьНачалоЭлемента("Отчетность");
		КонецЕсли;
			
		Протокол.ЗаписатьНачалоЭлемента("Отчет");
		Протокол.ЗаписатьАтрибут("КлючСтрокиОтчета", Формат(СодержимоеПакета.КлючСтрокиОтчета, "ЧГ=0"));
		Протокол.ЗаписатьАтрибут("ДанныеОтсутствуют", ?(СодержимоеПакета.ДанныеОтсутствуют, "true", "false"));
		
		ЗаписатьЭлементXML(Протокол, "ИдентификаторСтрокиКомплекта", СодержимоеПакета.ИдентификаторСтрокиКомплекта);
		ЗаписатьЭлементXML(Протокол, "ВидОтчета",                    СодержимоеПакета.ВидОтчета);
		ЗаписатьЭлементXML(Протокол, "УточнениеНаименования",        СодержимоеПакета.УточнениеНаименования);
		ЗаписатьЭлементXML(Протокол, "ДатаНачала",                   СодержимоеПакета.ДатаНачала);
		ЗаписатьЭлементXML(Протокол, "ДатаОкончания",                СодержимоеПакета.ДатаОкончания);
		
		Если Отчет = Неопределено Тогда // файл не выгружался
			ИмяФайлаОтчета = "";
			ФайлОтчетаСодержитЭП = Ложь;
		Иначе
			ИмяФайлаОтчета = Отчет.Представление;
			ФайлОтчетаСодержитЭП = (Отчет.ВариантВыгрузки = "Архив");
		КонецЕсли;
		ЗаписатьЭлементXML(Протокол, "ИмяФайлаОтчета",       ИмяФайлаОтчета);

		ЗаписатьЭлементXML(Протокол, "ФайлОтчетаСодержитЭП", ФайлОтчетаСодержитЭП);

		Если Отчет <> Неопределено И Не ПустаяСтрока(Отчет.ИмяПодписи) Тогда

			ЗаписатьЭлементXML(Протокол, "ИмяФайлаПодписи",     Отчет.ИмяПодписи);
			ЗаписатьЭлементXML(Протокол, "ИмяФайлаСертификата", Отчет.ИмяСертификата);

		КонецЕсли;
	
		Протокол.ЗаписатьКонецЭлемента(); // Отчет
		
	КонецЦикла;

	Если Субъект <> Неопределено Тогда
		Протокол.ЗаписатьКонецЭлемента(); // Отчетность
		Протокол.ЗаписатьКонецЭлемента(); // Субъект
	КонецЕсли;
	
	Протокол.ЗаписатьКонецЭлемента(); // Субъекты
	
	Протокол.ЗаписатьКонецЭлемента(); // Документ
	
	Протокол.Закрыть();
	
	Результат.ИмяАрхива = "FINREPORT_"
		+ СокрЛП(ИнформацияОПакете.ИНН) + "_"
		+ СокрЛП(ИнформацияОБанке.ИНН) + "_"
		+ Формат(ТекущаяДатаСеанса(), "ДФ=ггММдд")
		+ ".zip";
	
КонецПроцедуры

Функция ПериодыОтчетностиИзПакета(ФинОтчет)

	Результат = Новый Структура();
	Результат.Вставить("ДатаНачала",    '0001-01-01');
	Результат.Вставить("ДатаОкончания", '2999-12-31');

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФинОтчет", ФинОтчет);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МИНИМУМ(ТЧОтчетность.ДатаНачала) КАК ДатаНачала,
	|	МАКСИМУМ(ТЧОтчетность.ДатаОкончания) КАК ДатаОкончания
	|ИЗ
	|	Документ.ФинОтчетВБанк.Отчетность КАК ТЧОтчетность
	|ГДЕ
	|	ТЧОтчетность.Ссылка = &ФинОтчет
	|	И ТЧОтчетность.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1)
	|	И ТЧОтчетность.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Процедура СоздатьУзелXMLНастройкиСистемыНалогообложения(Протокол, Субъект, СистемыНалогообложения)

	Отбор = Новый Структура();
	Отбор.Вставить("Организация", Субъект);
	
	НайденныеСтроки = СистемыНалогообложения.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Протокол.ЗаписатьНачалоЭлемента("НастройкиСистемыНалогообложения");
	
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл

		Протокол.ЗаписатьНачалоЭлемента("НастройкаСистемыНалогообложения");

		// Выгружаем в xml все колонки, кроме организации.
		Для каждого Колонка Из СистемыНалогообложения.Колонки Цикл
			Если Колонка.Имя = "Организация" Тогда
				Продолжить;
			КонецЕсли;
			ЗаписатьЭлементXML(Протокол, Колонка.Имя, НайденнаяСтрока[Колонка.Имя]);
		КонецЦикла;
		
		Протокол.ЗаписатьКонецЭлемента(); // СистемаНалогообложения
		
	КонецЦикла;

	Протокол.ЗаписатьКонецЭлемента(); // НастройкиСистемыНалогообложения

КонецПроцедуры

// Создает дерево из переданного источника.
//
Функция ПрочитатьПротоколИзXML(Протокол)
	
	// Предусловие: мы находимся на элементе "Субъекты".
	МетаданныеТабличныхЧастей = Метаданные.Документы.ФинОтчетВБанк.ТабличныеЧасти;
	МетаданныеЭкономическиеСубъекты = МетаданныеТабличныхЧастей.ЭкономическиеСубъекты.Реквизиты;
	МетаданныеОтчетность = МетаданныеТабличныхЧастей.Отчетность.Реквизиты;
	МетаданныеНастройкиСистемыНалогообложения = МетаданныеТабличныхЧастей.НастройкиСистемыНалогообложения.Реквизиты;
	
	ПротоколИзФайла = Новый ДеревоЗначений;
	// верхний уровень - субъекты
	ПротоколИзФайла.Колонки.Добавить("ИНН",          ОбщегоНазначения.ОписаниеТипаСтрока(12));
	ПротоколИзФайла.Колонки.Добавить("КПП",          ОбщегоНазначения.ОписаниеТипаСтрока(9));
	ПротоколИзФайла.Колонки.Добавить("ВключатьОбособленныеПодразделения",
		МетаданныеЭкономическиеСубъекты.ВключатьОбособленныеПодразделения.Тип);
	ПротоколИзФайла.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ПротоколИзФайла.Колонки.Добавить("ИмяПапки",     Новый ОписаниеТипов("Строка"));
	// детальные записи - отчеты
	ПротоколИзФайла.Колонки.Добавить("ИдентификаторСтрокиКомплекта", МетаданныеОтчетность.ИдентификаторСтрокиКомплекта.Тип);
	ПротоколИзФайла.Колонки.Добавить("ВидОтчета",                    МетаданныеОтчетность.ВидОтчета.Тип);
	ПротоколИзФайла.Колонки.Добавить("УточнениеНаименования",        МетаданныеОтчетность.УточнениеНаименования.Тип);
	ПротоколИзФайла.Колонки.Добавить("ДатаНачала",                   МетаданныеОтчетность.ДатаНачала.Тип);
	ПротоколИзФайла.Колонки.Добавить("ДатаОкончания",                МетаданныеОтчетность.ДатаОкончания.Тип);
	ПротоколИзФайла.Колонки.Добавить("ДанныеОтсутствуют",            МетаданныеОтчетность.ДанныеОтсутствуют.Тип);
	ПротоколИзФайла.Колонки.Добавить("ФайлОтчетаСодержитЭП",         МетаданныеОтчетность.ФайлОтчетаСодержитЭП.Тип);
	ПротоколИзФайла.Колонки.Добавить("ИмяФайлаОтчета",               Новый ОписаниеТипов("Строка"));
	ПротоколИзФайла.Колонки.Добавить("ИмяФайлаПодписи",              Новый ОписаниеТипов("Строка"));
	ПротоколИзФайла.Колонки.Добавить("ИмяФайлаСертификата",          Новый ОписаниеТипов("Строка"));
	
	// Данные о системе налогообложения субъекта (заполняется только на верхнем уровне).
	ПротоколИзФайла.Колонки.Добавить("НастройкиСистемыНалогообложения", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	ШаблонНастройкиСистемыНалогообложения = Новый ТаблицаЗначений;
	Для каждого РеквизитТЧ Из МетаданныеНастройкиСистемыНалогообложения Цикл
		Если РеквизитТЧ.Имя = "КлючСтрокиСубъекта" Тогда
			Продолжить;
		КонецЕсли;
		ШаблонНастройкиСистемыНалогообложения.Колонки.Добавить(РеквизитТЧ.Имя, РеквизитТЧ.Тип);
	КонецЦикла;
	
	ДоступныеКолонки = ПротоколИзФайла.Колонки;
	ДоступныеКолонкиСНО = ШаблонНастройкиСистемыНалогообложения.Колонки;
	
	Пока Протокол.Прочитать() Цикл
		
		Если Протокол.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
			Продолжить;
		КонецЕсли;
		
		Если Протокол.Имя = "Субъект" Тогда
			
			НовСубъект = ПротоколИзФайла.Строки.Добавить();
			Пока Протокол.ПрочитатьАтрибут() Цикл
				
				Если Протокол.Имя = "ВключатьОбособленныеПодразделения" Тогда
					НовСубъект.ВключатьОбособленныеПодразделения = (Протокол.Значение = "true");
				ИначеЕсли ДоступныеКолонки.Найти(Протокол.Имя) <> Неопределено Тогда
					НовСубъект[Протокол.Имя] = Протокол.Значение;
				КонецЕсли;
				
			КонецЦикла;

		ИначеЕсли Протокол.Имя = "НастройкаСистемыНалогообложения" Тогда
		
			НовСубъект.НастройкиСистемыНалогообложения = ШаблонНастройкиСистемыНалогообложения.Скопировать();
			НовСистемаНалогообложения = НовСубъект.НастройкиСистемыНалогообложения.Добавить();
		
			// Читаем узлы записи о системе налогообложения.
			Пока Протокол.Прочитать() И Протокол.Имя <> "НастройкаСистемыНалогообложения" Цикл

				Если Протокол.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
					Продолжить;
				КонецЕсли;
				
				Если ДоступныеКолонкиСНО.Найти(Протокол.Имя) <> Неопределено Тогда
					ИмяКолонки = Протокол.Имя;
					Протокол.Прочитать();

					Если ИмяКолонки = "Период" ИЛИ ИмяКолонки = "ДатаИзменения" Тогда
						НовСистемаНалогообложения[ИмяКолонки] = XMLДата(Протокол.Значение);

					ИначеЕсли ИмяКолонки = "СистемаНалогообложения" Тогда
						НовСистемаНалогообложения[ИмяКолонки] = ОбщегоНазначенияБП.НайтиЗначениеПеречисления(
							"СистемыНалогообложения", Протокол.Значение);

					Иначе
						НовСистемаНалогообложения[ИмяКолонки] = XMLЗначение(Тип("Булево"), Протокол.Значение);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли Протокол.Имя = "Отчет" Тогда
			
			НовОтчет = НовСубъект.Строки.Добавить();
			Пока Протокол.ПрочитатьАтрибут() Цикл
				
				Если Протокол.Имя = "ДанныеОтсутствуют" Тогда
					НовОтчет.ДанныеОтсутствуют = (Протокол.Значение = "true");
				ИначеЕсли ДоступныеКолонки.Найти(Протокол.Имя) <> Неопределено Тогда
					НовОтчет[Протокол.Имя] = Протокол.Значение;
				КонецЕсли;
				
			КонецЦикла;
			
			// Читаем вложенные узлы с данными отчета.
			Пока Протокол.Прочитать() И Протокол.Имя <> "Отчет" Цикл
			
				Если Протокол.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
					Продолжить;
				КонецЕсли;
				
				Если ДоступныеКолонки.Найти(Протокол.Имя) <> Неопределено Тогда
					ИмяКолонки = Протокол.Имя;
					Протокол.Прочитать();

					Если ИмяКолонки = "ДатаНачала" Или ИмяКолонки = "ДатаОкончания" Тогда
						НовОтчет[ИмяКолонки] = XMLДата(Протокол.Значение);

					ИначеЕсли ИмяКолонки = "ФайлОтчетаСодержитЭП" Тогда
						НовОтчет.ФайлОтчетаСодержитЭП = (Протокол.Значение = "true");

					Иначе
						НовОтчет[ИмяКолонки] = Протокол.Значение;
					КонецЕсли;
				КонецЕсли;	
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПротоколИзФайла;
	
КонецФункции

// Создает дерево из переданного источника.
//
Функция ПрочитатьПротоколИзИБ(ФинОтчет)
	
	МетаданныеТабличныхЧастей = Метаданные.Документы.ФинОтчетВБанк.ТабличныеЧасти;
	РеквизитыОтчетность = МетаданныеТабличныхЧастей.Отчетность.Реквизиты;
	РеквизитыЭкономическиеСубъекты = МетаданныеТабличныхЧастей.ЭкономическиеСубъекты.Реквизиты;
	
	ПротоколИзИБ = Новый ДеревоЗначений;
	// верхний уровень - субъекты
	ПротоколИзИБ.Колонки.Добавить("ИНН",                          ОбщегоНазначения.ОписаниеТипаСтрока(12));
	ПротоколИзИБ.Колонки.Добавить("КПП",                          ОбщегоНазначения.ОписаниеТипаСтрока(9));
	ПротоколИзИБ.Колонки.Добавить("ВключатьОбособленныеПодразделения", Новый ОписаниеТипов("Булево"));
	ПротоколИзИБ.Колонки.Добавить("Субъект",                      РеквизитыЭкономическиеСубъекты.Субъект.Тип);
	ПротоколИзИБ.Колонки.Добавить("КлючСтрокиСубъекта",           РеквизитыЭкономическиеСубъекты.КлючСтрокиСубъекта.Тип);
	// детальные записи - отчеты
	ПротоколИзИБ.Колонки.Добавить("ИдентификаторСтрокиКомплекта", РеквизитыОтчетность.ИдентификаторСтрокиКомплекта.Тип);
	ПротоколИзИБ.Колонки.Добавить("ВидОтчета",                    РеквизитыОтчетность.ВидОтчета.Тип);
	ПротоколИзИБ.Колонки.Добавить("УточнениеНаименования",        РеквизитыОтчетность.УточнениеНаименования.Тип);
	ПротоколИзИБ.Колонки.Добавить("ДатаНачала",                   РеквизитыОтчетность.ДатаНачала.Тип);
	ПротоколИзИБ.Колонки.Добавить("ДатаОкончания",                РеквизитыОтчетность.ДатаОкончания.Тип);
	ПротоколИзИБ.Колонки.Добавить("ДанныеОтсутствуют",            РеквизитыОтчетность.ДанныеОтсутствуют.Тип);
	ПротоколИзИБ.Колонки.Добавить("ФайлОтчета",                   РеквизитыОтчетность.ФайлОтчета.Тип);
	ПротоколИзИБ.Колонки.Добавить("ФайлОтчетаСодержитЭП",         РеквизитыОтчетность.ФайлОтчетаСодержитЭП.Тип);
	ПротоколИзИБ.Колонки.Добавить("КлючСтрокиОтчета",             РеквизитыОтчетность.КлючСтрокиОтчета.Тип);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ФинОтчетВБанкЭкономическиеСубъекты.Субъект.ИНН КАК ИНН,
	|	ФинОтчетВБанкЭкономическиеСубъекты.Субъект.КПП КАК КПП,
	|	ФинОтчетВБанкЭкономическиеСубъекты.ВключатьОбособленныеПодразделения КАК ВключатьОбособленныеПодразделения,
	|	ФинОтчетВБанкЭкономическиеСубъекты.Субъект КАК Субъект,
	|	ФинОтчетВБанкЭкономическиеСубъекты.КлючСтрокиСубъекта КАК КлючСтрокиСубъекта,
	|	ФинОтчетВБанкОтчетность.КлючСтрокиОтчета КАК КлючСтрокиОтчета,
	|	ФинОтчетВБанкОтчетность.ИдентификаторСтрокиКомплекта КАК ИдентификаторСтрокиКомплекта,
	|	ФинОтчетВБанкОтчетность.ВидОтчета КАК ВидОтчета,
	|	ФинОтчетВБанкОтчетность.УточнениеНаименования КАК УточнениеНаименования,
	|	ФинОтчетВБанкОтчетность.ДатаНачала КАК ДатаНачала,
	|	ФинОтчетВБанкОтчетность.ДатаОкончания КАК ДатаОкончания,
	|	ФинОтчетВБанкОтчетность.ДанныеОтсутствуют КАК ДанныеОтсутствуют,
	|	ФинОтчетВБанкОтчетность.ФайлОтчета КАК ФайлОтчета,
	|	ФинОтчетВБанкОтчетность.ФайлОтчетаСодержитЭП КАК ФайлОтчетаСодержитЭП
	|ИЗ
	|	Документ.ФинОтчетВБанк.ЭкономическиеСубъекты КАК ФинОтчетВБанкЭкономическиеСубъекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ФинОтчетВБанк.Отчетность КАК ФинОтчетВБанкОтчетность
	|		ПО ФинОтчетВБанкЭкономическиеСубъекты.Ссылка = ФинОтчетВБанкОтчетность.Ссылка
	|			И ФинОтчетВБанкЭкономическиеСубъекты.КлючСтрокиСубъекта = ФинОтчетВБанкОтчетность.КлючСтрокиСубъекта
	|ГДЕ
	|	ФинОтчетВБанкЭкономическиеСубъекты.Ссылка = &ФинОтчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючСтрокиСубъекта");
	Запрос.УстановитьПараметр("ФинОтчет", ФинОтчет);
	Выборка = Запрос.Выполнить().Выбрать();
	
	КлючСтрокиСубъекта = -1;
	Пока Выборка.Следующий() Цикл
		
		Если КлючСтрокиСубъекта <> Выборка.КлючСтрокиСубъекта Тогда
			
			КлючСтрокиСубъекта = Выборка.КлючСтрокиСубъекта;
			
			НовСубъект = ПротоколИзИБ.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НовСубъект, Выборка, "ИНН,КПП,ВключатьОбособленныеПодразделения,Субъект,КлючСтрокиСубъекта");
			НовСубъект.ИНН = СокрЛП(НовСубъект.ИНН);
			НовСубъект.КПП = СокрЛП(НовСубъект.КПП);
			
		КонецЕсли;
		
		НовОтчет = НовСубъект.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НовОтчет, Выборка);
		
	КонецЦикла;
	
	Возврат ПротоколИзИБ;
	
КонецФункции

#КонецОбласти

#Область ОписьВложения

// Формирует файлы BANK_REPLIST с описью вложений в xml и в табличном виде 
// и добавляет их в журнал операций с файлами для последующего включения в транспортный контейнер.
//
// Параметры:
//	ПараметрыПодписания - Структура - см. ПараметрыПодписания().
//	РезультатПодготовки - Структура - Возвращаемое значение ГотовностьКОтправке().
//
// Возвращаемое значение:
//	Булево - Истина, если успешно, Ложь, если возникли ошибки. Тексты ошибок добавляются в общий список ошибок РезультатПодготовки.
//
Функция СформироватьОписьОтправляемойОтчетности(ПараметрыПодписания, РезультатПодготовки)

	Успешно = Истина;

	// Добавляем и подписываем опись файлов, которые передаются в банк, в виде XML и в виде табличного документа для менеджеров банка.
	ДанныеОписи = Новый Массив;
	
	// Получим сведения об компаниях, используемые при выгрузках, они одинаковые для организаций и контрагентов.
	Субъекты = РезультатПодготовки.ОтчетностьПоКлючамСтрок.Скопировать(, "Субъект");
	Субъекты.Свернуть("Субъект");
	РеквизитыСубъектов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		Субъекты.ВыгрузитьКолонку("Субъект"), "ИНН, КПП, Наименование");
	
	ОписаниеОтправки = ОписьОтправляемойОтченостиXML(
		ПараметрыПодписания, РезультатПодготовки, РеквизитыСубъектов);
	ДанныеОписи.Добавить(ОписаниеОтправки);
	
	ОписаниеОтправки = ОписьОтправляемойОтченостиТабличныйДокумент(
		ПараметрыПодписания, РезультатПодготовки, РеквизитыСубъектов);
	ДанныеОписи.Добавить(ОписаниеОтправки);
	
	// Помещаем данные описи в журнал операций для включения в транспортный контейнер.
	Для каждого ОписаниеОтправки Из ДанныеОписи Цикл
		ПараметрыПомещения = УниверсальныйОбменСБанками.ПараметрыПомещенияВЖурналОперацийСФайлами();
		ПараметрыПомещения.Сервис         = ПараметрыПодписания.Сервис;
		ПараметрыПомещения.ТипДокумента   = Перечисления.ТипыДокументовОбменаСБанкамиФинОтчетность.Отчетность;
		ПараметрыПомещения.Организация    = ПараметрыПодписания.Организация;
		ПараметрыПомещения.БанкиПолучатели.Добавить(ПараметрыПодписания.Банк);
		ПараметрыПомещения.Предмет        = ПараметрыПодписания.Предмет;
		ПараметрыПомещения.Зашифровать    = Истина;
		ПараметрыПомещения.Идентификатор  = ПараметрыПодписания.Идентификатор;
		ПараметрыПомещения.Подписать        = Истина;
		ПараметрыПомещения.ИсходноеИмяФайла = ОписаниеОтправки.ИмяФайла;
		ПараметрыПомещения.ТипСодержимого   = УниверсальныйОбменСБанками.ТипСодержимогоПоИмениФайла(ПараметрыПомещения.ИсходноеИмяФайла);
		ПараметрыПомещения.ИсходныеДанные   = ОписаниеОтправки.ДанныеФайла;
			
		РезультатПомещения = УниверсальныйОбменСБанками.ПоместитьВЖурналОперацияСФайлами(ПараметрыПомещения);
		Если Не РезультатПомещения.Выполнено Тогда
			ДобавитьРезультатПоОтчету(РезультатПодготовки, ОписаниеОтправки.ИмяФайла, , РезультатПомещения.ОписаниеОшибки);
			Успешно = Ложь;
		КонецЕсли;
	КонецЦикла;

	Возврат Успешно;

КонецФункции

Функция ОписьОтправляемойОтченостиXML(ПараметрыПодписания, РезультатПодготовки, РеквизитыСубъектов)
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяФайла", "");
	Результат.Вставить("ДанныеФайла");

	ОтчетностьПоКлючамСтрок = РезультатПодготовки.ОтчетностьПоКлючамСтрок;

	Сейчас = ПараметрыПодписания.Сейчас;
	Результат.ИмяФайла = ИмяФайлаОписиОтправляемойОтчетности(ПараметрыПодписания, "xml");
		
	ПотокXML = Новый ПотокВПамяти;
		
	Протокол = Новый ЗаписьXML;
	Протокол.ОткрытьПоток(ПотокXML, "windows-1251");
	Протокол.ЗаписатьОбъявлениеXML();
	
	Протокол.ЗаписатьНачалоЭлемента("Файл");
	Протокол.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	Протокол.ЗаписатьАтрибут("ВерсияПрограммы", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	Протокол.ЗаписатьАтрибут("ВерсияФормата",   "1.01.01");
	
	Протокол.ЗаписатьНачалоЭлемента("Документ");
	Протокол.ЗаписатьАтрибут("ДатаДок",                XMLСтрока(Сейчас));
	Протокол.ЗаписатьАтрибут("ДатаОтчетности",         XMLСтрока(ПараметрыПодписания.Дата));
	Протокол.ЗаписатьАтрибут("ДатаСоздания",           XMLСтрока(ПараметрыПодписания.ДатаСоздания));
	Протокол.ЗаписатьАтрибут("ИдентификаторКомплекта", ПараметрыПодписания.ИдентификаторКомплекта);
	Протокол.ЗаписатьАтрибут("КраткоеПредставление",   ПараметрыПодписания.КраткоеПредставление);
	
	Протокол.ЗаписатьНачалоЭлемента("Организация");
	РеквизитыОрганизации = ПараметрыПодписания.РеквизитыОрганизации;
	Протокол.ЗаписатьАтрибут("Наим", РеквизитыОрганизации.Наименование);
	Протокол.ЗаписатьАтрибут("ИНН",  РеквизитыОрганизации.ИНН);
	Если ЗначениеЗаполнено(РеквизитыОрганизации.КПП) Тогда
		Протокол.ЗаписатьАтрибут("КПП", РеквизитыОрганизации.КПП);
	КонецЕсли;
	Протокол.ЗаписатьКонецЭлемента(); // Организация	
		
	Протокол.ЗаписатьНачалоЭлемента("Банк");
	РеквизитыБанка = ПараметрыПодписания.РеквизитыБанка;
	Протокол.ЗаписатьАтрибут("ИНН",  РеквизитыБанка.ИНН);
	Протокол.ЗаписатьАтрибут("Наим", РеквизитыБанка.Наименование);
	Протокол.ЗаписатьКонецЭлемента(); // Банк	
	
	ТекущийКлючСубъекта = 0;
	Для каждого Отчет Из ОтчетностьПоКлючамСтрок Цикл
		
		Если Отчет.КлючСтрокиСубъекта <> ТекущийКлючСубъекта Тогда
			
			Если ТекущийКлючСубъекта <> 0 Тогда
				Протокол.ЗаписатьКонецЭлемента(); // Отчетность
				ТекущийКлючСубъекта = 0;
			КонецЕсли;

			РеквизитыСубъекта = РеквизитыСубъектов[Отчет.Субъект];
			Если РеквизитыСубъекта = Неопределено Тогда
				// В обычной ситуации сюда зайти не должны, т.к. элементы должны быть найдены в справочниках.
				ДобавитьРезультатПоОтчету(РезультатПодготовки, Отчет.Субъект, , НСтр("ru = 'Не определены реквизиты компании'"));
				Продолжить;
			КонецЕсли;
			
			Протокол.ЗаписатьНачалоЭлемента("Отчетность");
			Протокол.ЗаписатьАтрибут("Наим", РеквизитыСубъекта.Наименование);
			Протокол.ЗаписатьАтрибут("ИНН",  РеквизитыСубъекта.ИНН);
			Если ЗначениеЗаполнено(РеквизитыСубъекта.КПП) Тогда
				Протокол.ЗаписатьАтрибут("КПП", РеквизитыСубъекта.КПП);
			КонецЕсли;
			
			ТекущийКлючСубъекта = Отчет.КлючСтрокиСубъекта;
		
		КонецЕсли;
		
		ДанныеОтсутствуют = (Отчет.ВариантВыгрузки = "ДанныеОтсутствуют");
		Протокол.ЗаписатьНачалоЭлемента("Отчет");
		Протокол.ЗаписатьАтрибут("Описание", Отчет.Описание);
		Протокол.ЗаписатьАтрибут("НачПер",   XMLСтрока(Отчет.ДатаНачала));
		Протокол.ЗаписатьАтрибут("КонПер",   XMLСтрока(Отчет.ДатаОкончания));
		Если ДанныеОтсутствуют Тогда
			Протокол.ЗаписатьАтрибут("ДанныеОтсутствуют", "1");
		Иначе
			Протокол.ЗаписатьАтрибут("ИсходноеИмяФайла", Отчет.Представление);
			Протокол.ЗаписатьАтрибут("Размер", Формат(Отчет.Размер, "ЧГ=0"));
		КонецЕсли;
		Протокол.ЗаписатьКонецЭлемента(); // Отчет
		
	КонецЦикла;
	Если ТекущийКлючСубъекта <> 0 Тогда
		Протокол.ЗаписатьКонецЭлемента(); // Отчетность
	КонецЕсли;
	
	Протокол.ЗаписатьКонецЭлемента(); // Документ
	
	Протокол.ЗаписатьКонецЭлемента(); // Файл
	
	Протокол.Закрыть();
	Результат.ДанныеФайла = ПотокXML.ЗакрытьИПолучитьДвоичныеДанные();
	
	Возврат Результат;
	
КонецФункции

Функция ОписьОтправляемойОтченостиТабличныйДокумент(ПараметрыПодписания, РезультатПодготовки, РеквизитыСубъектов)
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяФайла", "");
	Результат.Вставить("ДанныеФайла");
	
	ОтчетностьПоКлючамСтрок = РезультатПодготовки.ОтчетностьПоКлючамСтрок;
	
	Макет = Документы.ФинОтчетВБанк.ПолучитьМакет("ОписьВложения");
	
	ОбластьШапка          = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрокаКомпании = Макет.ПолучитьОбласть("СтрокаКомпании");
	ОбластьСтрокаОтчета   = Макет.ПолучитьОбласть("СтрокаОтчета");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Шапка
	РеквизитыОрганизации = ПараметрыПодписания.РеквизитыОрганизации;
	Если ЗначениеЗаполнено(РеквизитыОрганизации.КПП) Тогда
		ОбластьШапка.Параметры.ОрганизацияНаименование = СтрШаблон(
			НСтр("ru = '%1 (%2 / %3)'"), РеквизитыОрганизации.Наименование, РеквизитыОрганизации.ИНН, РеквизитыОрганизации.КПП);
	Иначе
		ОбластьШапка.Параметры.ОрганизацияНаименование = СтрШаблон(
			НСтр("ru = '%1 (%2)'"), РеквизитыОрганизации.Наименование, РеквизитыОрганизации.ИНН);
	КонецЕсли;
	ОбластьШапка.Параметры.БанкНаименование        = ПараметрыПодписания.РеквизитыБанка.Наименование;
	ОбластьШапка.Параметры.КраткоеПредставление    = ПараметрыПодписания.КраткоеПредставление;
	ОбластьШапка.Параметры.ДатаОтчетности          = ПараметрыПодписания.Дата;
	ОбластьШапка.Параметры.ДатаСоздания            = ПараметрыПодписания.ДатаСоздания;
	ОбластьШапка.Параметры.ДатаОтправки            = ПараметрыПодписания.Сейчас;
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	// Определим периоды отчетов внутри пакета, чтобы по за них же потом определять системы налогообложения.
	ДатаНачала    = '2999-12-31';
	ДатаОкончания = '0001-01-01';
	Субъекты      = Новый Массив;
	
	Для каждого Отчет из ОтчетностьПоКлючамСтрок Цикл
		ДатаНачала    = Мин(ДатаНачала,     Отчет.ДатаНачала);
		ДатаОкончания = Макс(ДатаОкончания, Отчет.ДатаОкончания);
		
		Если Субъекты.Найти(Отчет.Субъект) = Неопределено Тогда
			Субъекты.Добавить(Отчет.Субъект);
		КонецЕсли;
	КонецЦикла;
	
	СистемыНалогообложения = СистемыНалогообложенияСубъектов(ПараметрыПодписания, Субъекты, ДатаНачала, ДатаОкончания);
	
	// Выводим список отчетов каждой компании из пакета отчетности.
	ТекущийКлючСубъекта    = 0;
	НомерКомпанииПоПорядку = 0;
	НомерОтчетаПоПорядку   = 0;
	
	Для каждого Отчет из ОтчетностьПоКлючамСтрок Цикл
		
		Если Отчет.КлючСтрокиСубъекта <> ТекущийКлючСубъекта Тогда
			
			// Начинаются отчеты по новой компании.
			Если ТекущийКлючСубъекта <> 0 Тогда
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
				ТекущийКлючСубъекта = 0;
			КонецЕсли;

			РеквизитыСубъекта = РеквизитыСубъектов[Отчет.Субъект];
			Если РеквизитыСубъекта = Неопределено Тогда
				// В обычной ситуации сюда зайти не должны, т.к. элементы должны быть найдены в справочниках.
				ДобавитьРезультатПоОтчету(РезультатПодготовки, Отчет.Субъект, , НСтр("ru = 'Не определены реквизиты компании'"));
				Продолжить;
			КонецЕсли;
			
			НомерКомпанииПоПорядку = НомерКомпанииПоПорядку + 1;
			НомерОтчетаПоПорядку   = 0;

			ТекущийКлючСубъекта = Отчет.КлючСтрокиСубъекта;

			// Для организаций определяем систему налогообложения.
			СистемаНалогообложения = СистемыНалогообложения[Отчет.Субъект];
			Если НЕ ЗначениеЗаполнено(СистемаНалогообложения) Тогда
				СистемаНалогообложения = НСтр("ru = 'Нет данных о системе налогообложения'");
			КонецЕсли;
			
			ОбластьСтрокаКомпании.Параметры.НомерПП         = НомерКомпанииПоПорядку;
			ОбластьСтрокаКомпании.Параметры.Компания        = РеквизитыСубъекта.Наименование;
			Если ЗначениеЗаполнено(РеквизитыСубъекта.КПП) Тогда
				ОбластьСтрокаКомпании.Параметры.КомпанияИНН_КПП = СтрШаблон(
					НСтр("ru = '%1 / %2'"), РеквизитыСубъекта.ИНН, РеквизитыСубъекта.КПП);
			Иначе
				ОбластьСтрокаКомпании.Параметры.КомпанияИНН_КПП = РеквизитыСубъекта.ИНН;
			КонецЕсли;
			ОбластьСтрокаКомпании.Параметры.СистемаНалогообложения = СистемаНалогообложения;
			
			ТабличныйДокумент.Вывести(ОбластьСтрокаКомпании);
			ТабличныйДокумент.НачатьГруппуСтрок();
					
		КонецЕсли;
		
		// Строка отчетности.
		НомерОтчетаПоПорядку = НомерОтчетаПоПорядку + 1;
		ОбластьСтрокаОтчета.Параметры.НомерПП = СтрШаблон(НСтр("ru = '%1.%2'"), 
			Формат(НомерКомпанииПоПорядку, "ЧГ="), Формат(НомерОтчетаПоПорядку, "ЧГ="));
			
		ОбластьСтрокаОтчета.Параметры.Отчет = Отчет.Описание;
		
		Если Отчет.ВариантВыгрузки = "ДанныеОтсутствуют" Тогда
			ОбластьСтрокаОтчета.Параметры.ИмяФайла = НСтр("ru = 'Данные отсутствуют'");
			ОбластьСтрокаОтчета.Параметры.Размер   = Неопределено;
		Иначе
			ОбластьСтрокаОтчета.Параметры.ИмяФайла = Отчет.Представление;
			ОбластьСтрокаОтчета.Параметры.Размер   = Окр(Отчет.Размер / 1024); // В Кб.
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьСтрокаОтчета);
	
	КонецЦикла;
	
	// Закрываем последнюю открытую группу.
	ТабличныйДокумент.ЗакончитьГруппуСтрок();
	
	// Сохраняем в файл.
	ФорматСохраненияПоУмолчанию = ПараметрыПодписания.ФорматыСохранения["ЗначениеПоУмолчанию"];
	РасширениеФайла             = РасширениеФайлаБезТочкиПоФорматуСохранения(ФорматСохраненияПоУмолчанию);
	ТипФайлаТаблицы             = ЗаполнениеФинОтчетностиВБанкиКлиентСервер.ТипФайлаТабличногоДокументаПоРасширению(РасширениеФайла);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
	ТабличныйДокумент.Записать(ИмяВременногоФайла, ТипФайлаТаблицы);
	
	Результат.ИмяФайла    = ИмяФайлаОписиОтправляемойОтчетности(ПараметрыПодписания, РасширениеФайла);
	Результат.ДанныеФайла = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	ФайловаяСистема.УдалитьВременныйФайл(ИмяВременногоФайла);
	
	Возврат Результат;
	
КонецФункции

Функция ИмяФайлаОписиОтправляемойОтчетности(ПараметрыПодписания, РасширениеФайлаБезТочки)

	Возврат СтрШаблон(НСтр("ru = 'BANK_REPLIST_%1%2_%3.%4'"),
		ПараметрыПодписания.РеквизитыОрганизации.ИНН,
		ПараметрыПодписания.РеквизитыОрганизации.КПП,
		Формат(ПараметрыПодписания.Сейчас, "ДФ=ггггММдд"),
		РасширениеФайлаБезТочки);

КонецФункции

Функция СистемыНалогообложенияСубъектов(ПараметрыПодписания, Субъекты, ДатаНачала, ДатаОкончания)

	Результат = Новый Соответствие(); // Ключ - субъект, Значение - строка с описанием системы налогообложения.
	
	Если НЕ ЗначениеЗаполнено(Субъекты) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФинОтчет",      ПараметрыПодписания.Предмет);
	Запрос.УстановитьПараметр("Субъекты",      Субъекты);
	Запрос.УстановитьПараметр("ДатаНачала",    ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	// Для организаций настройки системы налогообложения берем из базы данных.
	// Для контрагентов, отчетность которых была загружена из другой базы,
	// настройки системы налогообложения также загружаются в одноименную табличную часть документа, выбираем из нее.
	// При выгрузке из другой базы настройки системы налогообложения выгружаются как срез последних на дату первого отчетного периода
	// и движения за период всех отчетов.
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЧЭкономическиеСубъекты.Субъект КАК Субъект,
	|	ТЧНастройкиСистемыНалогообложения.Период КАК Период,
	|	ТЧНастройкиСистемыНалогообложения.СистемаНалогообложения КАК СистемаНалогообложения,
	|	ТЧНастройкиСистемыНалогообложения.ПрименяетсяУСНДоходы КАК ПрименяетсяУСНДоходы,
	|	ТЧНастройкиСистемыНалогообложения.ПрименяетсяУСНДоходыМинусРасходы КАК ПрименяетсяУСНДоходыМинусРасходы,
	|	ТЧНастройкиСистемыНалогообложения.ПлательщикЕНВД КАК ПлательщикЕНВД,
	|	ТЧНастройкиСистемыНалогообложения.ПрименяетсяУСНПатент КАК ПрименяетсяУСНПатент,
	|	ТЧНастройкиСистемыНалогообложения.ПлательщикТорговогоСбора КАК ПлательщикТорговогоСбора,
	|	ТЧНастройкиСистемыНалогообложения.ПрименяетсяНалогНаПрофессиональныйДоход КАК ПрименяетсяНалогНаПрофессиональныйДоход,
	|	ТЧНастройкиСистемыНалогообложения.ДатаИзменения КАК ДатаИзменения
	|ПОМЕСТИТЬ ВТ_НастройкиСистемыНалогообложенияКонтрагентов
	|ИЗ
	|	Документ.ФинОтчетВБанк.ЭкономическиеСубъекты КАК ТЧЭкономическиеСубъекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ФинОтчетВБанк.НастройкиСистемыНалогообложения КАК ТЧНастройкиСистемыНалогообложения
	|		ПО (ТЧЭкономическиеСубъекты.Ссылка = &ФинОтчет)
	|			И (ТЧНастройкиСистемыНалогообложения.Ссылка = &ФинОтчет)
	|			И ТЧЭкономическиеСубъекты.КлючСтрокиСубъекта = ТЧНастройкиСистемыНалогообложения.КлючСтрокиСубъекта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НастройкиСистемыНалогообложения.Период < НастройкиСистемыНалогообложения.ДатаИзменения
	|				И НастройкиСистемыНалогообложения.ДатаИзменения <= &ДатаНачала
	|			ТОГДА НастройкиСистемыНалогообложения.ДатаИзменения
	|		ИНАЧЕ НастройкиСистемыНалогообложения.Период
	|	КОНЕЦ КАК Период,
	|	НастройкиСистемыНалогообложения.Организация КАК Субъект,
	|	НастройкиСистемыНалогообложения.СистемаНалогообложения КАК СистемаНалогообложения,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходы КАК ПрименяетсяУСНДоходы,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходыМинусРасходы КАК ПрименяетсяУСНДоходыМинусРасходы,
	|	НастройкиСистемыНалогообложения.ПлательщикЕНВД КАК ПлательщикЕНВД,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНПатент КАК ПрименяетсяУСНПатент,
	|	НастройкиСистемыНалогообложения.ПлательщикТорговогоСбора КАК ПлательщикТорговогоСбора,
	|	НастройкиСистемыНалогообложения.ПрименяетсяНалогНаПрофессиональныйДоход КАК ПрименяетсяНалогНаПрофессиональныйДоход
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(&ДатаНачала, Организация В (&Субъекты)) КАК НастройкиСистемыНалогообложения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Период,
	|	НастройкиСистемыНалогообложения.Организация,
	|	НастройкиСистемыНалогообложения.СистемаНалогообложения,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходы,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходыМинусРасходы,
	|	НастройкиСистемыНалогообложения.ПлательщикЕНВД,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНПатент,
	|	НастройкиСистемыНалогообложения.ПлательщикТорговогоСбора,
	|	НастройкиСистемыНалогообложения.ПрименяетсяНалогНаПрофессиональныйДоход
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|ГДЕ
	|	НастройкиСистемыНалогообложения.Организация В(&Субъекты)
	|	И НастройкиСистемыНалогообложения.Период > &ДатаНачала
	|	И НастройкиСистемыНалогообложения.Период <= &ДатаОкончания
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.ДатаИзменения,
	|	НастройкиСистемыНалогообложения.Организация,
	|	НастройкиСистемыНалогообложения.СистемаНалогообложения,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходы,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходыМинусРасходы,
	|	НастройкиСистемыНалогообложения.ПлательщикЕНВД,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНПатент,
	|	НастройкиСистемыНалогообложения.ПлательщикТорговогоСбора,
	|	НастройкиСистемыНалогообложения.ПрименяетсяНалогНаПрофессиональныйДоход
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|ГДЕ
	|	НастройкиСистемыНалогообложения.Организация В(&Субъекты)
	|	И НастройкиСистемыНалогообложения.ДатаИзменения >= &ДатаНачала
	|	И НастройкиСистемыНалогообложения.ДатаИзменения <= &ДатаОкончания
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НастройкиСистемыНалогообложения.Период < НастройкиСистемыНалогообложения.ДатаИзменения
	|				И НастройкиСистемыНалогообложения.ДатаИзменения <= &ДатаНачала
	|			ТОГДА НастройкиСистемыНалогообложения.ДатаИзменения
	|		ИНАЧЕ НастройкиСистемыНалогообложения.Период
	|	КОНЕЦ КАК Период,
	|	НастройкиСистемыНалогообложения.Субъект,
	|	НастройкиСистемыНалогообложения.СистемаНалогообложения,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходы,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходыМинусРасходы,
	|	НастройкиСистемыНалогообложения.ПлательщикЕНВД,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНПатент,
	|	НастройкиСистемыНалогообложения.ПлательщикТорговогоСбора,
	|	НастройкиСистемыНалогообложения.ПрименяетсяНалогНаПрофессиональныйДоход
	|ИЗ
	|	ВТ_НастройкиСистемыНалогообложенияКонтрагентов КАК НастройкиСистемыНалогообложения
	|ГДЕ
	|	НастройкиСистемыНалогообложения.Субъект В(&Субъекты)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.ДатаИзменения,
	|	НастройкиСистемыНалогообложения.Субъект,
	|	НастройкиСистемыНалогообложения.СистемаНалогообложения,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходы,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходыМинусРасходы,
	|	НастройкиСистемыНалогообложения.ПлательщикЕНВД,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНПатент,
	|	НастройкиСистемыНалогообложения.ПлательщикТорговогоСбора,
	|	НастройкиСистемыНалогообложения.ПрименяетсяНалогНаПрофессиональныйДоход
	|ИЗ
	|	ВТ_НастройкиСистемыНалогообложенияКонтрагентов КАК НастройкиСистемыНалогообложения
	|ГДЕ
	|	НастройкиСистемыНалогообложения.Субъект В(&Субъекты)
	|	И НастройкиСистемыНалогообложения.ДатаИзменения >= &ДатаНачала
	|	И НастройкиСистемыНалогообложения.ДатаИзменения <= &ДатаОкончания
	|
	|УПОРЯДОЧИТЬ ПО
	|	НастройкиСистемыНалогообложения.Организация,
	|	Период
	|ИТОГИ ПО
	|	Субъект";

	РезультатЗапроса = Запрос.Выполнить();
	
	// Чтобы сократить дублирование информации, когда в записи меняется только одно из полей, 
	// запоминаем значения полей предыдущей записи для сравнения.
	ПредыдущиеДанные = Новый Структура();
	Для каждого Колонка из РезультатЗапроса.Колонки Цикл
		Если Колонка.Имя = "Период" Тогда
			// Период не учитываем.
			Продолжить;
		КонецЕсли;
		ПредыдущиеДанные.Вставить(Колонка.Имя);
	КонецЦикла;

	ОписаниеСНО = Новый Массив;
	ОписаниеТекущейЗаписи = Новый Массив;

	ВыборкаПоСубъектам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСубъектам.Следующий() Цикл
		
		// Инициализируем вспомогательные переменные.
		ОписаниеСНО.Очистить();
		Для каждого КлючИЗначение Из ПредыдущиеДанные Цикл
			ПредыдущиеДанные[КлючИЗначение.Ключ] = Ложь;
		КонецЦикла;
		
		Выборка = ВыборкаПоСубъектам.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			// Собираем текст записи за текущий период.
			ОписаниеТекущейЗаписи.Очистить();
			
			// Изменение системы налогообложения в целом или объекта обложения УСН.
			Если Выборка.СистемаНалогообложения <> ПредыдущиеДанные.СистемаНалогообложения
				ИЛИ Выборка.ПрименяетсяУСНДоходы <> ПредыдущиеДанные.ПрименяетсяУСНДоходы
				ИЛИ Выборка.ПрименяетсяУСНДоходыМинусРасходы <> ПредыдущиеДанные.ПрименяетсяУСНДоходыМинусРасходы Тогда
				
				Если Выборка.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая Тогда
					ОписаниеТекущейЗаписи.Добавить(НСтр("ru = 'Общая система'"));
				ИначеЕсли Выборка.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная Тогда
					Если Выборка.ПрименяетсяУСНДоходы Тогда
						ОписаниеТекущейЗаписи.Добавить(НСтр("ru = 'УСН (доходы)'"));
					ИначеЕсли Выборка.ПрименяетсяУСНДоходыМинусРасходы Тогда
						ОписаниеТекущейЗаписи.Добавить(НСтр("ru = 'УСН (доходы минус расходы)'"));
					КонецЕсли;
				ИначеЕсли Выборка.СистемаНалогообложения = Перечисления.СистемыНалогообложения.НалогНаПрофессиональныйДоход Тогда
					ОписаниеТекущейЗаписи.Добавить(НСтр("ru = 'Налог на профессиональный доход (""самозанятые"")'"));
				КонецЕсли;

			КонецЕсли;

			// ЕНВД
			Если Выборка.ПлательщикЕНВД <> ПредыдущиеДанные.ПлательщикЕНВД Тогда
				Если Выборка.ПлательщикЕНВД Тогда
					ОписаниеТекущейЗаписи.Добавить(НСтр("ru = 'ЕНВД'"));
				ИначеЕсли ПредыдущиеДанные.ПлательщикЕНВД Тогда
					ОписаниеТекущейЗаписи.Добавить(НСтр("ru = 'Не применяется ЕНВД'"));
				КонецЕсли;
			КонецЕсли;
			
			// Патент
			Если Выборка.ПрименяетсяУСНПатент <> ПредыдущиеДанные.ПрименяетсяУСНПатент Тогда
				Если Выборка.ПрименяетсяУСНПатент Тогда
					ОписаниеТекущейЗаписи.Добавить(НСтр("ru = 'Патент'"));
				ИначеЕсли ПредыдущиеДанные.ПрименяетсяУСНПатент Тогда
					ОписаниеТекущейЗаписи.Добавить(НСтр("ru = 'Не применяется патент'"));
				КонецЕсли;
			КонецЕсли;
			
			// Торговый сбор
			Если Выборка.ПлательщикТорговогоСбора <> ПредыдущиеДанные.ПлательщикТорговогоСбора Тогда
				Если Выборка.ПлательщикТорговогоСбора Тогда
					ОписаниеТекущейЗаписи.Добавить(НСтр("ru = 'Торговый сбор'"));
				ИначеЕсли ПредыдущиеДанные.ПлательщикТорговогоСбора Тогда
					ОписаниеТекущейЗаписи.Добавить(НСтр("ru = 'Не уплачивается торговый сбор'"));
				КонецЕсли;
			КонецЕсли;
			
			Если ОписаниеТекущейЗаписи.Количество() > 0 Тогда
				ОписаниеТекущейЗаписи[0] = СтрШаблон(НСтр("ru = 'С %1 %2'"), Формат(Выборка.Период, "ДФ=дд.ММ.гггг"), ОписаниеТекущейЗаписи[0]);
				ОписаниеСНО.Добавить(СтрСоединить(ОписаниеТекущейЗаписи, ", "));
			КонецЕсли;
			
			// Запоминаем значения текущей записи выборки, чтобы сравнивать с ней следующую.
			ЗаполнитьЗначенияСвойств(ПредыдущиеДанные, Выборка);
		
		КонецЦикла;
		
		Результат.Вставить(ВыборкаПоСубъектам.Субъект, СтрСоединить(ОписаниеСНО, Символы.ПС));
	
	КонецЦикла;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ДлительныеОперации

// Возвращает данные прогрессора.
//
// Параметры:
//	НачальныйПроцент - Число - Начало диапазона изменения прогрессора.
//	КонечныйПроцент - Число - Конец диапазона изменения прогрессора.
//
// Возвращаемое значение:
//	Структура
//
Функция НовыйПрогрессор(НачальныйПроцент = 0, КонечныйПроцент = 100)

	Результат = Новый Структура();
	Результат.Вставить("НачальныйПроцент", НачальныйПроцент);
	Результат.Вставить("КонечныйПроцент",  КонечныйПроцент);
	Результат.Вставить("ТекущийПроцент",   НачальныйПроцент);
	Результат.Вставить("Шаг",              1);
	
	Возврат Результат;

КонецФункции

Процедура РассчитатьШагПрогрессора(Прогрессор, КоличествоШагов)

	ДиапазонИзменения = Прогрессор.КонечныйПроцент - Прогрессор.НачальныйПроцент;

	Если КоличествоШагов <> 0 Тогда
		Прогрессор.Шаг = ДиапазонИзменения / КоличествоШагов;
	Иначе
		Прогрессор.Шаг = ДиапазонИзменения;
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьДиапазонПрогрессора(Прогрессор, НачальныйПроцент, КонечныйПроцент)

	Прогрессор.НачальныйПроцент = НачальныйПроцент;
	Прогрессор.КонечныйПроцент  = КонечныйПроцент;

КонецПроцедуры

Процедура СообщитьПрогресс(Прогрессор, Текст = Неопределено)

	Прогрессор.ТекущийПроцент = Прогрессор.ТекущийПроцент + Прогрессор.Шаг;
	
	Прогрессор.ТекущийПроцент = Мин(Макс(Прогрессор.НачальныйПроцент, Прогрессор.ТекущийПроцент), Прогрессор.КонечныйПроцент);

	ДлительныеОперации.СообщитьПрогресс(Цел(Прогрессор.ТекущийПроцент), Текст);

КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

Процедура УдалитьВременныйКаталог(ПутьККаталогу, ФинОтчет)
	
	Если ПустаяСтрока(ПутьККаталогу) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(ПутьККаталогу);
	Исключение
		// Запишем в журнал регистрации, но не будем прерывать выполнение.
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка при удалении временного каталога %1: %2'"),
			ПутьККаталогу, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ИмяСобытия = НСтр("ru = 'Удаление временного каталога'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(
			ЗаполнениеФинОтчетностиВБанки.СобытиеЖурналаРегистрации(ИмяСобытия),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.ФинОтчетВБанк,
			ФинОтчет,
			ТекстСообщения);

	КонецПопытки;
	
КонецПроцедуры

Функция ТаблицаОтчетности()
	
	ОтчетностьПоКлючамСтрок = Новый ТаблицаЗначений;
	КолонкиОтчетности = ОтчетностьПоКлючамСтрок.Колонки;
	КолонкиОтчетности.Добавить("КлючСтрокиОтчета",
		Метаданные.Документы.ФинОтчетВБанк.ТабличныеЧасти.Отчетность.Реквизиты.КлючСтрокиОтчета.Тип); // строка в пакете отчетности
	КолонкиОтчетности.Добавить("ОписаниеОшибки", Новый ОписаниеТипов("Строка")); // если действие не получилось
	КолонкиОтчетности.Добавить("Представление",  Новый ОписаниеТипов("Строка")); // имя или путь к отчету
	
	// Если это был регламентированный отчет, то где конкретно в нем проблемы.
	// См. РегламентированнаяОтчетность.НовыйТаблицаСообщенийОбОшибкахВыгрузки()
	КолонкиОтчетности.Добавить("ДетализацияОшибок", Новый ОписаниеТипов("ТаблицаЗначений"));

	Возврат ОтчетностьПоКлючамСтрок;
	
КонецФункции

Функция ДобавитьРезультатПоОтчету(РезультатОперации, Представление, КлючСтрокиОтчета = 0,
									ОписаниеОшибки = "", ДетализацияОшибок = Неопределено)
	
	Отчет = РезультатОперации.ОтчетностьПоКлючамСтрок.Добавить();
	Отчет.Представление    = Представление;
	Отчет.КлючСтрокиОтчета = КлючСтрокиОтчета;
	Отчет.ОписаниеОшибки   = ОписаниеОшибки;
	Если ДетализацияОшибок <> Неопределено Тогда
		Отчет.ДетализацияОшибок = ДетализацияОшибок;
	КонецЕсли;
	
	Если РезультатОперации.Выполнено И Не ПустаяСтрока(ОписаниеОшибки) Тогда
		РезультатОперации.Выполнено = Ложь;
	КонецЕсли;
	
	Возврат Отчет;
	
КонецФункции

Функция РезультатВыгрузки()
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Истина);
	Результат.Вставить("ИмяАрхива", "");     // имя группы файлов, созданной в результате действия
	Результат.Вставить("Каталог",   "");     // имя каталога, где лежат файлы до архивирования
	Результат.Вставить("ОтчетностьПоКлючамСтрок", ТаблицаОтчетности()); // подробный результат операции
	
	Возврат Результат;
	
КонецФункции

Функция РезультатЗагрузки(ПолныйНаборКолонок)
	
	ТабличныеЧастиФинОтчета = Метаданные.Документы.ФинОтчетВБанк.ТабличныеЧасти;
	РеквизитыТЧОтчетность = ТабличныеЧастиФинОтчета.Отчетность.Реквизиты;
	
	РезультатЗаполнения = Новый Структура;
	РезультатЗаполнения.Вставить("Выполнено",               Истина);
	РезультатЗаполнения.Вставить("ПолныйНаборКолонок",      ПолныйНаборКолонок);
	РезультатЗаполнения.Вставить("Каталог",                 "");
	РезультатЗаполнения.Вставить("ИмяАрхива",               "");
	РезультатЗаполнения.Вставить("Отчетность",              Новый ТаблицаЗначений);
	РезультатЗаполнения.Вставить("ОтчетностьПоКлючамСтрок", ТаблицаОтчетности());
	
	НаборКолонок = РезультатЗаполнения.Отчетность.Колонки;
	НаборКолонок.Добавить("КлючСтрокиСубъекта",   РеквизитыТЧОтчетность.КлючСтрокиСубъекта.Тип);
	НаборКолонок.Добавить("КлючСтрокиОтчета",     РеквизитыТЧОтчетность.КлючСтрокиОтчета.Тип);
	НаборКолонок.Добавить("ОтчетСсылка",          РеквизитыТЧОтчетность.ОтчетСсылка.Тип);
	НаборКолонок.Добавить("ФайлОтчета",           РеквизитыТЧОтчетность.ФайлОтчета.Тип);
	НаборКолонок.Добавить("ФайлОтчетаСодержитЭП", РеквизитыТЧОтчетность.ФайлОтчетаСодержитЭП.Тип);
	НаборКолонок.Добавить("ДанныеОтсутствуют",    РеквизитыТЧОтчетность.ДанныеОтсутствуют.Тип);
	
	Если ПолныйНаборКолонок Тогда

		РеквизитыТЧСубъекты = ТабличныеЧастиФинОтчета.ЭкономическиеСубъекты.Реквизиты;
		НаборКолонок.Добавить("Субъект",                      РеквизитыТЧСубъекты.Субъект.Тип);
		НаборКолонок.Добавить("ВключатьОбособленныеПодразделения",РеквизитыТЧСубъекты.ВключатьОбособленныеПодразделения.Тип);
		НаборКолонок.Добавить("ВидОтчета",                    РеквизитыТЧОтчетность.ВидОтчета.Тип);
		НаборКолонок.Добавить("ИдентификаторСтрокиКомплекта", РеквизитыТЧОтчетность.ИдентификаторСтрокиКомплекта.Тип);
		НаборКолонок.Добавить("УточнениеНаименования",        РеквизитыТЧОтчетность.УточнениеНаименования.Тип);
		НаборКолонок.Добавить("ДатаНачала",                   РеквизитыТЧОтчетность.ДатаНачала.Тип);
		НаборКолонок.Добавить("ДатаОкончания",                РеквизитыТЧОтчетность.ДатаОкончания.Тип);
		
		РеквизитыТЧНастройкиСистемыНалогообложения = ТабличныеЧастиФинОтчета.НастройкиСистемыНалогообложения.Реквизиты;
		РезультатЗаполнения.Вставить("НастройкиСистемыНалогообложения", Новый ТаблицаЗначений);
		Для каждого РеквизитТЧ Из РеквизитыТЧНастройкиСистемыНалогообложения Цикл
			РезультатЗаполнения.НастройкиСистемыНалогообложения.Колонки.Добавить(РеквизитТЧ.Имя, РеквизитТЧ.Тип);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат РезультатЗаполнения;
	
КонецФункции

Функция ЗаменитьНедопустимыеСимволыВИмениФайла(Знач ИмяФайла, НаЧтоМенять = " ")
	
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла, НаЧтоМенять);
	ИмяФайла = СтрЗаменить(ИмяФайла, Символы.ПС, НаЧтоМенять);

	Возврат ИмяФайла;

КонецФункции

Функция РасширениеЭлектроннойПодписи()
	
	Возврат "p7s";
	
КонецФункции

Функция РасширениеСертификата()
	
	Возврат "cer";
	
КонецФункции

Функция ЭтоИмяФайлаАрхива(ИмяФайла)
	
	Возврат НРег(Прав(ИмяФайла, 3)) = "zip";
	
КонецФункции

Функция ДобавитьУникальныйИдентификатор(Знач ИмяФайла)
	
	// Убираем символы, недопустимые при записи на диск.
	ИмяФайла = ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
	
	// Проверим, что имя не содержит идентификатор уже сейчас.
	СодержитИдентификатор = Истина;
	Если СтрДлина(ИмяФайла) < 36 Тогда // слишком маленькая длина, чтобы вместился идентификатор
		СодержитИдентификатор = Ложь;
	Иначе
		
		ЧастиИмени = СтрРазделить(ИмяФайла, "-", Истина);
		КоличествоЧастей = ЧастиИмени.Количество();
		Если КоличествоЧастей < 5
		 Или СтрДлина(ЧастиИмени[КоличествоЧастей - 1]) <> 12
		 Или СтрДлина(ЧастиИмени[КоличествоЧастей - 2]) <> 4
		 Или СтрДлина(ЧастиИмени[КоличествоЧастей - 3]) <> 4
		 Или СтрДлина(ЧастиИмени[КоличествоЧастей - 4]) <> 4 Тогда // не совпадает с шаблоном идентификатора
			СодержитИдентификатор = Ложь;
		Иначе
			
			ЧастиИмени.Удалить(0);
			Для каждого ЧастьИмени Из ЧастиИмени Цикл
				
				Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(
							СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("abcdef", НРег(ЧастьИмени), "000000")) Тогда
					// Содержит не только шестнадцатиричные цифры.
					СодержитИдентификатор = Ложь;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не СодержитИдентификатор Тогда
		ИмяФайла = ИмяФайла + " " + Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат ИмяФайла;
	
КонецФункции

Процедура ЗаписатьЭлементXML(ЗаписьXML, ИмяЭлемента, ТекстЭлемента)

	ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяЭлемента);
	ЗаписьXML.ЗаписатьТекст(XMLСтрока(ТекстЭлемента));
	ЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

Функция XMLДата(Значение)

	Если ПустаяСтрока(Значение) Тогда
		Возврат '00010101';
	Иначе
		Возврат XMLЗначение(Тип("Дата"), Значение);
	КонецЕсли;

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
