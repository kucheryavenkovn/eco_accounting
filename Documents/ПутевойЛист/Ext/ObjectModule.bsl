#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения, Истина);
	
	// Подписи: по умолчанию устанавливается руководитель организации
	// в случае, если уже были введены документы, то присваивается последнее значение
	
	РеквизитыОтветственногоЛица = Документы.ПутевойЛист.ОтветственноеЛицоПоДокументу(
		Организация, Дата, ПодразделениеОрганизации);
	
	ДокументПодписал = РеквизитыОтветственногоЛица.ДокументПодписал;
	ДолжностьПодписавшегоЛица = РеквизитыОтветственногоЛица.ДолжностьПодписавшегоЛица;
	
	Если ЗначениеЗаполнено(ТранспортноеСредство) Тогда
		НормаРасхода = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТранспортноеСредство, "НормаРасхода");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	// При групповом перепроведении реквизиты документов не меняются,
	// поэтому обновление связанных данных выполнять не требуется.
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьПередЗаписью(ЭтотОбъект, РежимЗаписи);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДокументыПоКассовымЧекамПодотчетныхЛиц();
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.ПутевойЛист.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	// Учет доходов и расходов ИП
	ИПТаблицаПрочее = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуПоступленияМПЗ(
		ПараметрыПроведения.ИПТаблицаОплаченноеТопливо,
		ПараметрыПроведения.Реквизиты);
	
	ИПСтруктураТаблиц = Новый Структура("ТаблицаПрочее", ИПТаблицаПрочее);
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	УчетТоваров.СформироватьДвиженияРасходыПоПутевомуЛисту(
		ПараметрыПроведения.ТаблицаТопливо,
		ПараметрыПроведения.Реквизиты,
		Движения);
	
	// УСН
	СуммаСторноРасхода = 0;
	УчетУСН.ПоступлениеРасходовУСН(ПараметрыПроведения.ПоступлениеРасходовУСНТаблицаРасходов,
		ПараметрыПроведения.ПоступлениеРасходовУСНРеквизиты, СуммаСторноРасхода, Движения, Отказ);
		
	Если Не Отказ И Движения.РасходыПриУСН.Количество() > 0 Тогда
		Движения.РасходыПриУСН.Записать(Истина);
		Движения.РасходыПриУСН.Записывать = Ложь;
	КонецЕсли;
	
	НалоговыйУчетУСН.СформироватьДвиженияУСН(ЭтотОбъект);
	
	// Учет доходов и расходов ИП
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияПоступлениеМПЗ(
		ИПСтруктураТаблиц,
		ПараметрыПроведения.ИПТаблицаВзаиморасчетов,,
		ПараметрыПроведения.Реквизиты,
		Движения,
		Отказ);
	
	РаботаСПоследовательностями.ЗарегистрироватьОтложенныеРасчетыВПоследовательности(ЭтотОбъект, Отказ,,,
		Перечисления.ВидыРегламентныхОпераций.КорректировкаСтоимостиНоменклатуры);
	
	ПроведениеСервер.УстановитьЗаписьОчищаемыхНаборовЗаписей(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ТекстОшибки = НСтр("ru = 'Не заполнена сумма в строке %1.'");
	ШаблонПоляОшибки = "Топливо[%1].Сумма";
	ВидДокументаТопливнаяКарта = Перечисления.ВидыДокументовПриобретенияГСМ.ТопливнаяКарта;
	Для Каждого ТекущаяСтрока Из Топливо Цикл
		
		Если ТекущаяСтрока.ВидВходящегоДокумента = ВидДокументаТопливнаяКарта Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяСтрока.Сумма = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ТекстОшибки, ТекущаяСтрока.НомерСтроки),,
				СтрШаблон(ШаблонПоляОшибки, ТекущаяСтрока.НомерСтроки - 1), "Объект", Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	Номенклатура = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТранспортноеСредство, "Топливо");
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Топливо"" в транспортном средстве.'"),,
			"ТранспортноеСредство", "Объект", Отказ);
	КонецЕсли;
	
	Если Документы.ПутевойЛист.ВодительскоеУдостоверениеФизлица(ФизЛицо, Дата) = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Не заполнено водительское удостоверение сотрудника. См. Справочники - Физическое лицо - Все Документы'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ФизЛицо, "ФизЛицо", "Объект", Отказ);
	КонецЕсли;
	
	КоличествоСтрок = Маршрут.Количество();
	Для Каждого ТекущаяСтрока Из Маршрут Цикл
		
		НомерСтроки = Маршрут.Индекс(ТекущаяСтрока);
		
		ПроверятьПересечениеПериодов = Истина;
		// Проверка корректности дат в текущей строке
		Если ТекущаяСтрока.ДатаОтправления > ТекущаяСтрока.ДатаВозвращения Тогда
			
			ШаблонПоляОшибки = ?(День(ТекущаяСтрока.ДатаОтправления) = День(ТекущаяСтрока.ДатаВозвращения),
				"Маршрут[%1].ВозвращениеВремя", "Маршрут[%1].ВозвращениеДата");
			ТекстОшибки = НСтр("ru = 'Дата возвращения из рейса не может быть меньше даты отправления.'");
			
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, СтрШаблон(ШаблонПоляОшибки, НомерСтроки), "Объект", Отказ);
			ПроверятьПересечениеПериодов = Ложь;
			
		КонецЕсли;
		
		ПроверятьПересечениеПоказаний = Истина;
		// Проверка корректности показаний одометра в текущей строке
		Если ТекущаяСтрока.ПоказаниеОдометраДо > ТекущаяСтрока.ПоказаниеОдометраПосле Тогда
			
			ШаблонПоляОшибки = "Маршрут[%1].ПоказаниеОдометраПосле";
			ТекстОшибки = НСтр("ru = 'Показание одометра при возращении из рейса не может быть меньше показаний одометра при выезде.'");
			
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, СтрШаблон(ШаблонПоляОшибки, НомерСтроки), "Объект", Отказ);
			ПроверятьПересечениеПоказаний = Ложь;
			
		КонецЕсли;
		
		Если Не ПроверятьПересечениеПоказаний И Не ПроверятьПересечениеПериодов Тогда
			Продолжить;
		КонецЕсли;
		
		Для ИндексСледующейСтроки = НомерСтроки + 1 По КоличествоСтрок - 1 Цикл
			
			СтрокаСравнения = Маршрут[ИндексСледующейСтроки];
			
			// Проверка пересечения показаний одометра
			
			Если ПроверятьПересечениеПериодов И ТекущаяСтрока.ПоказаниеОдометраПосле > СтрокаСравнения.ПоказаниеОдометраДо Тогда
				
				ШаблонПоляОшибки = "Маршрут[%1].ПоказаниеОдометраДо";
				
				Если ТекущаяСтрока.ПоказаниеОдометраДо >= СтрокаСравнения.ПоказаниеОдометраПосле Тогда
					ТекстОшибки = НСтр("ru = 'Показания одометра в строке %1 должны быть больше показаний в строке %2.'");
				Иначе
					ТекстОшибки = НСтр("ru = 'Показания одометра в строке %1 пересекаются с данными строки %2.'");
				КонецЕсли;
				
				ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ТекстОшибки, ИндексСледующейСтроки + 1, НомерСтроки + 1),,
					СтрШаблон(ШаблонПоляОшибки, ИндексСледующейСтроки), "Объект", Отказ);
				
			КонецЕсли;
			
			// Проверка даты отправления и возвращения
			
			Если ПроверятьПересечениеПоказаний И ТекущаяСтрока.ДатаВозвращения > СтрокаСравнения.ДатаОтправления Тогда
				
				ШаблонПоляОшибки = ?(НачалоДня(ТекущаяСтрока.ДатаОтправления) = НачалоДня(СтрокаСравнения.ДатаОтправления),
					"Маршрут[%1].ОтправлениеВремя", "Маршрут[%1].ОтправлениеДата");
				
				Если ТекущаяСтрока.ДатаОтправления >= СтрокаСравнения.ДатаВозвращения Тогда
					ТекстОшибки = НСтр("ru = 'Отсортируйте строки по периоду. Сейчас период в строке %1 меньше, чем в строке %2.'");
				Иначе
					ТекстОшибки = НСтр("ru = 'Период рейса в строке %1 пересекается с данными строки %2.'");
				КонецЕсли;
				
				ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ТекстОшибки, ИндексСледующейСтроки + 1, НомерСтроки + 1),,
					СтрШаблон(ШаблонПоляОшибки, ИндексСледующейСтроки), "Объект", Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	РеквизитыЗаСсылками = Документы.ПутевойЛист.РеквизитыЗаСсылками();
	СчетаУчетаВДокументах.ПроверитьЗаполнение(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, РеквизитыЗаСсылками);
	ПроверкаЗаполненияДокументов.ПроверитьРеквизитыЗаСсылками(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, РеквизитыЗаСсылками);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
	РаботаСПоследовательностями.ОтменитьРегистрациюВПоследовательности(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
	
	Для Каждого СтрокаТЧ Из Топливо Цикл
		СтрокаТЧ.КассовыйЧек = Документы.КассовыйЧекПодотчетногоЛица.ПустаяСсылка();
		СтрокаТЧ.Описание = "";
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбновитьДокументыПоКассовымЧекамПодотчетныхЛиц()
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПутевойЛистТопливо.КассовыйЧек КАК КассовыйЧек
		|ИЗ
		|	Документ.ПутевойЛист.Топливо КАК ПутевойЛистТопливо
		|ГДЕ
		|	ПутевойЛистТопливо.Ссылка = &Ссылка
		|	И ПутевойЛистТопливо.КассовыйЧек <> ЗНАЧЕНИЕ(Документ.КассовыйЧекПодотчетногоЛица.ПустаяСсылка)";
	
	РегистрыСведений.ДокументыПоКассовымЧекамПодотчетныхЛиц.ОбновитьДокументыПоКассовымЧекамПодотчетныхЛиц(ТекстЗапроса, Ссылка);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
