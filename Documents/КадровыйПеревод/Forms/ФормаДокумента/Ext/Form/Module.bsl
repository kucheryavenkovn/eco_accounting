#Область ОписаниеПеременных

&НаКлиенте
Перем ЗакрытьПослеЗаписи;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	КадровыйУчетФормы.ФормаКадровогоДокументаПриСозданииНаСервере(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Параметры.Ключ) Тогда
		
		Элементы.ГруппаИндикатораЭТК.Видимость = Ложь;
		
		ПолучитьНачислениеПоУмолчанию();
		
		Объект.ИзменитьНачисления = Истина;
		
		Если ЗначениеЗаполнено(Параметры.Основание) И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения) Тогда
			ЗаполнитьЗначенияСвойств(Объект, Параметры.ЗначенияЗаполнения);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
			Объект.ДатаНачала = ТекущаяДатаСеанса();
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Объект.Начисления.Очистить();
		КонецЕсли;
		
		Если Параметры.Свойство("Сотрудник") И ЗначениеЗаполнено(Параметры.Сотрудник) Тогда 
			Объект.Сотрудник = Параметры.Сотрудник;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
			УстановитьТекущиеКадровыеДанные(Истина);
			УстановитьДанныеРабочегоМеста(ЭтаФорма);
			ЗаполнитьСоставДействующихНачисленийСотрудника(Истина);
			УстановитьКомментарии();
		КонецЕсли;
		
		Объект.ПричинаПеревода   = НСтр("ru = 'Желание сотрудника'");
		Объект.ОснованиеПеревода = НСтр("ru = 'Заявление сотрудника'");
		
		УстановитьФункциональныеОпцииФормы();
		РасчетЗарплатыКлиентСервер.УстановитьПоказРазмераАванса(ЭтаФорма);	
		
		// ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
		ЭлектронныеТрудовыеКнижки.ЗаполнитьНаименованиеДокумента(Объект, "КадровыйПеревод");
		// Конец ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
		
		Если Не ЗначениеЗаполнено(Объект.НаименованиеДокумента) Тогда
			Объект.НаименованиеДокумента = НСтр("ru='Приказ'");
		КонецЕсли;
		
		УправлениеФормой();
		
	КонецЕсли;
	
	ЭтотОбъект.РасчетЗарплатыДляНебольшихОрганизаций = ПолучитьФункциональнуюОпцию("РасчетЗарплатыДляНебольшихОрганизаций");
	
	ПрочитатьРазмерАвансаПоУмолчанию();
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	УстановитьПредупреждениеРедактированияНомера();
	СервисЭлектронныхТрудовыхКнижек.КадровыйПеревод_ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	УстановитьСостояниеДокумента();
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Документ.КадровыйПеревод",
		"ФормаДокумента",
		НСтр("ru='Новости: Кадровый перевод'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ЗакрытьПослеЗаписи = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "Запись_СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД" Тогда
		Если Параметр.Организация = Объект.Организация
			И Параметр.Сотрудники.Найти(Объект.Сотрудник) <> Неопределено Тогда
			ПолучитьСтатусЗаписиЭлектроннойТрудовойКнижки();
		КонецЕсли;
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПолучитьНачислениеПоУмолчанию();
	УстановитьТекущиеКадровыеДанные(Ложь);
	ЗаполнитьСоставДействующихНачисленийСотрудника(Ложь);
	УстановитьКомментарии();
	
	УстановитьФункциональныеОпцииФормы();
	РасчетЗарплатыКлиентСервер.УстановитьПоказРазмераАванса(ЭтаФорма);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчетаБЗК.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
	ЭлектронныеТрудовыеКнижки.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
	
	ИзменитьПодразделениеИДолжность = ТекущийОбъект.ИзменитьПодразделениеИДолжность;
	ИзменитьНачисления              = ТекущийОбъект.ИзменитьНачисления;
	ИзменитьАванс                   = ТекущийОбъект.ИзменитьАванс;
	
	СтатусЗаписиЭлектроннойТрудовойКнижки();
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьПризнакИзменения();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.РасчетЗарплаты") Тогда
		МодульРасчетЗарплатыДляНебольшихОрганизаций = ОбщегоНазначения.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизаций");
		МодульРасчетЗарплатыДляНебольшихОрганизаций.ЗапомнитьТекущееКоличествоСотрудников(ЭтаФорма, Объект.ОбособленноеПодразделение);
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	КадровыйУчетКлиент.ОповеститьОбИзмененииРабочегоМеста(ЭтаФорма);
	
	ПредупреждениеПоказано = Ложь;
	Если Объект.ИзменитьПодразделениеИДолжность Тогда
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.РасчетЗарплаты") Тогда
			МодульРасчетЗарплатыДляНебольшихОрганизацийКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизацийКлиент");
			ПредупреждениеПоказано = МодульРасчетЗарплатыДляНебольшихОрганизацийКлиент.ПоказатьПредупреждениеОбОграниченияхРежимаРасчетаЗарплатыДляНебольшихОрганизаций(
				ЭтаФорма, Объект.ОбособленноеПодразделение);
		КонецЕсли;
	КонецЕсли; 
	
	Если НЕ ПредупреждениеПоказано Тогда
		ПоказатьПредупреждениеОбОграниченияхРежимаРасчетаЗарплатыДляНебольшихОрганизацийЗавершение();
	КонецЕсли; 
	
	Оповестить("Запись_КадровыйПеревод", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчетаБЗК.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	СтатусЗаписиЭлектроннойТрудовойКнижки();
	УстановитьПредупреждениеРедактированияНомера();
	УправлениеФормой();
	
	УстановитьСостояниеДокумента();
	
	СинхронизацияДанныхЗарплатаКадры.ЗапуститьОтложеннуюОбработкуЗаполненияДанныхПоФизическимЛицам(ТекущийОбъект);
	СинхронизацияДанныхЗарплатаКадры.ЗапуститьОтложеннуюОбработкуЗаполненияДанныхПоСотрудникам(ТекущийОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НомерПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(Объект.НомерПриказа)) Тогда
		Объект.НомерПриказа = ЭлектронныеТрудовыеКнижкиВызовСервера.НомерНаПечать(Объект.Номер);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	СотрудникПриИзмененииНаСервере();
	ПроверитьНеобходимостьОтразитьВТрудовойКнижке();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	ДатаНачалаПриИзмененииНаСервере();
	ПроверитьНеобходимостьОтразитьВТрудовойКнижке();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбособленноеПодразделениеПриИзменении(Элемент)
	ОбособленноеПодразделениеПриИзмененииНаСервере();
	ПроверитьНеобходимостьОтразитьВТрудовойКнижке();
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	ПроверитьНеобходимостьОтразитьВТрудовойКнижке();
	ПодразделениеПриИзмененииНаСвервере();
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаАвансаПриИзменении(Элемент)
	
	ПрименитьИзменениеРасчетаАванса(ЭтаФорма);
	УстановитьПризнакИзменения();
	УстановитьКомментарийКАвансу(ЭтотОбъект)
	
КонецПроцедуры

&НаКлиенте
Процедура АвансРазмерГруппаСтраницаФиксированнойСуммойВеличинаПриИзменении(Элемент)
	УстановитьПризнакИзменения();
	УстановитьКомментарийКАвансу(ЭтотОбъект)
КонецПроцедуры

&НаКлиенте
Процедура АвансРазмерГруппаСтраницаПроцентомОтТарифаВеличинаПриИзменении(Элемент)
	УстановитьПризнакИзменения();
	УстановитьКомментарийКАвансу(ЭтотОбъект)
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьПриИзменении(Элемент)
	
	ДолжностьПриИзмененииНаСервере();
	ПроверитьНеобходимостьОтразитьВТрудовойКнижке();
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудоваяФункцияПриИзменении(Элемент)
	ТрудоваяФункцияПриИзмененииНаСервере();
КонецПроцедуры

// ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки

&НаКлиенте
Процедура ОтразитьВТрудовойКнижкеПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ОкладПриИзменении(Элемент)
	
	ОсновныеНачисления = Объект.Начисления.НайтиСтроки(Новый Структура("Начисление", ОплатаПоОкладу));
	ОсновныеНачисления[0].Размер = Оклад;
	УстановитьКомментарииНачислений();
	УстановитьПризнакИзменения();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДокументаПриИзменении(Элемент)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаПриИзменении(Объект.Организация, "КадровыйПеревод", Объект.НаименованиеДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДокументаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаОбработкаВыбора(
		Объект.НаименованиеДокумента, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДокументаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки

&НаКлиенте
Процедура НадписьДоплатыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("РедактированиеНачисленийЗавершение", ЭтотОбъект);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресПараметровВХранилище", АдресПараметровВХранилище());
	ПараметрыОткрытия.Вставить("ТолькоПросмотр",            ТолькоПросмотр);
	
	ОткрытьФорму("Документ.ПриемНаРаботу.Форма.ФормаНачислений", 
		ПараметрыОткрытия,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДокументаНажатие(Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = "";
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЗаписьЭлектроннойТрудовойКнижкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗаписиТрудовойКнижки.Количество() = 0 Тогда
		Возврат
	ИначеЕсли ЗаписиТрудовойКнижки.Количество() = 1 Тогда
		ПоказатьЗначение(, ЗаписиТрудовойКнижки[0].ЗаписьЭлектроннойТрудовойКнижки)
	Иначе
		СписокЗаписей = Новый СписокЗначений;
		Для Каждого СтрокаТаблицы Из ЗаписиТрудовойКнижки Цикл
			СписокЗаписей.Добавить(СтрокаТаблицы.ЗаписьЭлектроннойТрудовойКнижки);
		КонецЦикла;
		
		Оповещение = Новый ОписаниеОповещения("НадписьЗаписьЭлектроннойТрудовойКнижкиПоказатьОповещение", ЭтотОбъект);
		ПоказатьВыборИзМеню(Оповещение, СписокЗаписей, Элемент);
	КонецЕсли
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки

&НаКлиенте
Процедура Подключаемый_ИзменитьДокумент(Команда)
	
	ДопуститьИзменениеДокумента();
	
КонецПроцедуры

// Конец ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ЗакрытьПослеЗаписи = Истина;
	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	
КонецПроцедуры

// СтандартныеПодсистемы.КонтрольВеденияУчета

&НаКлиенте
Процедура Подключаемый_ОткрытьОтчетПоПроблемам(ЭлементИлиКоманда, НавигационнаяСсылка, СтандартнаяОбработка)
	
	КонтрольВеденияУчетаКлиентБЗК.ОткрытьОтчетПоПроблемамОбъекта(ЭтотОбъект, Объект.Ссылка, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтрольВеденияУчета

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтотОбъект,
		Команда
	);

КонецПроцедуры


&НаКлиенте
Процедура ЗарегистрироватьЗаписьЭлектроннойТрудовойКнижки(Команда)
	
	Если Объект.ПометкаУдаления Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Нельзя оформить запись электронной трудовой книжки на основании документа, помеченного на удаление.'"));
		Возврат;
	Иначе
		Если НЕ Объект.Проведен ИЛИ Модифицированность Тогда
			Кнопки = Новый СписокЗначений;
			Кнопки.Вставить(0, КодВозвратаДиалога.Да,     НСтр("ru = 'Провести'"));
			Кнопки.Вставить(1, КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
			
			Оповещение = Новый ОписаниеОповещения("ВопросПередРегистрациейСледуетПровестиЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, НСтр("ru = 'Перед регистрацией записи электронной трудовой книжки документ следует провести'"), Кнопки,, КодВозвратаДиалога.Да);
		Иначе
			СоздатьЗаписьЭлектроннойТрудовойКнижки();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ПолучитьНачислениеПоУмолчанию()
	
	ОплатаПоОкладу = УчетЗарплаты.ОплатаПоОкладу();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПрименитьИзменениеРасчетаАванса(Форма)
	
	Если Форма.Объект.СпособРасчетаАванса = ПредопределенноеЗначение("Перечисление.СпособыРасчетаАванса.ПроцентомОтТарифа") Тогда
		Форма.Объект.Аванс = Форма.РазмерАвансаВПроцентахПоУмолчанию;
	Иначе
		Форма.Объект.Аванс = 0;
	КонецЕсли;
	
	РасчетЗарплатыКлиентСервер.УстановитьПоказРазмераАванса(Форма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы() 
	
	ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Объект.Организация);
	
	ПараметрыФО = Новый Структура("Организация", ГоловнаяОрганизация);
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	КадровыйУчетФормы.ЗаполнитьОтветственныхЛицПоОрганизации(ЭтаФорма);
	
	УстановитьФункциональныеОпцииФормы();
	
	ЕстьОбособленныеПодразделения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГоловнаяОрганизация, "ЕстьОбособленныеПодразделения");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОбособленноеПодразделение",
		"Видимость",
		ЕстьОбособленныеПодразделения = Истина);
	
	ЭлектронныеТрудовыеКнижки.ЗаполнитьНаименованиеДокумента(Объект, "КадровыйПеревод");
	
	// ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
	ЭлектронныеТрудовыеКнижки.ЗаполнитьНаименованиеДокумента(Объект, "КадровыйПеревод");
	// Конец ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
	
КонецПроцедуры

&НаСервере
Процедура ОбособленноеПодразделениеПриИзмененииНаСервере()
	
	ПрочитатьРазмерАвансаПоУмолчанию();
	ПрименитьИзменениеРасчетаАванса(ЭтаФорма);
	УстановитьКомментарии();
	УстановитьПризнакИзменения();
	
КонецПроцедуры

&НаСервере
Процедура СотрудникПриИзмененииНаСервере()
	
	ЗаполнитьСоставДействующихНачисленийСотрудника(Истина);
	УстановитьТекущиеКадровыеДанные(Истина);
	УстановитьДанныеРабочегоМеста(ЭтаФорма);
	УстановитьКомментарии();
	УстановитьПризнакИзменения();
	
КонецПроцедуры

&НаСервере
Процедура ДатаНачалаПриИзмененииНаСервере()
	
	ЗаполнитьСоставДействующихНачисленийСотрудника(Ложь);
	УстановитьТекущиеКадровыеДанные(Ложь);
	УстановитьКомментарии();
	УстановитьПризнакИзменения();
	УстановитьФункциональныеОпцииФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЗанятостиПриИзменении(Элемент)
	
	ПроверитьНеобходимостьОтразитьВТрудовойКнижке();
	ВидЗанятостиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьРазмерАвансаПоУмолчанию()
	
	Если ЗначениеЗаполнено(Объект.ОбособленноеПодразделение) Тогда
		РазмерАвансаВПроцентахПоУмолчанию = РасчетЗарплатыФормы.РазмерАвансаВПроцентахПоУмолчанию(Объект.ОбособленноеПодразделение);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДанныеРабочегоМеста(Форма)
	
	Объект = Форма.Объект;
	
	Если ЗначениеЗаполнено(Форма.ТекущееОбособленноеПодразделение) Тогда
		Объект.ОбособленноеПодразделение 	= Форма.ТекущееОбособленноеПодразделение;
	Иначе
		Объект.ОбособленноеПодразделение 	= Объект.Организация;
	КонецЕсли;
	
	Объект.Подразделение 				= Форма.ТекущееПодразделение;
	Объект.Должность 					= Форма.ТекущаяДолжность;
	Объект.ВидЗанятости 				= Форма.ТекущийВидЗанятости;
	Объект.ТрудоваяФункция 				= Форма.ТекущаяТрудоваяФункция;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущиеКадровыеДанные(ПерезаполнитьДанные)
	
	Отбор = Новый Массив;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(Отбор, "Регистратор", "<>", Объект.Ссылка);
	
	ПоляОтбораПериодическихДанных = Новый Структура;
	ПоляОтбораПериодическихДанных.Вставить("КадроваяИсторияСотрудников", Отбор);
	Поля = "Подразделение,Должность,Организация,ВидЗанятости";
	
	ДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, Объект.Сотрудник, Поля, Объект.ДатаНачала, ПоляОтбораПериодическихДанных);
	
	Если ДанныеСотрудников.Количество() > 0 Тогда
		
		ТекущиеКадровыеДанныеСотрудника = ДанныеСотрудников[0];
		
		ТекущееОбособленноеПодразделение 	= ТекущиеКадровыеДанныеСотрудника.Организация;
		ТекущееПодразделение 				= ТекущиеКадровыеДанныеСотрудника.Подразделение;
		ТекущаяДолжность 					= ТекущиеКадровыеДанныеСотрудника.Должность;
		ТекущийВидЗанятости					= ТекущиеКадровыеДанныеСотрудника.ВидЗанятости;
		
	КонецЕсли;
	
	ТекущаяТрудоваяФункция = Справочники.ТрудовыеФункции.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(Объект.Сотрудник)
		И ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Сотрудник",       Объект.Сотрудник);
		Запрос.УстановитьПараметр("ДатаМероприятия", Объект.ДатаНачала);
		Запрос.УстановитьПараметр("Регистратор",     Объект.Ссылка);
		
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	МероприятияТрудовойДеятельности.ТрудоваяФункция КАК ТрудоваяФункция
		|ИЗ
		|	РегистрСведений.МероприятияТрудовойДеятельности КАК МероприятияТрудовойДеятельности
		|ГДЕ
		|	МероприятияТрудовойДеятельности.Сотрудник = &Сотрудник
		|	И НЕ МероприятияТрудовойДеятельности.Отменено
		|	И МероприятияТрудовойДеятельности.ДатаМероприятия <= &ДатаМероприятия
		|	И МероприятияТрудовойДеятельности.Регистратор <> &Регистратор
		|
		|УПОРЯДОЧИТЬ ПО
		|	МероприятияТрудовойДеятельности.ДатаМероприятия УБЫВ";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ТекущаяТрудоваяФункция = Выборка.ТрудоваяФункция;
		КонецЕсли;
	КонецЕсли;
	
	ПрочитатьТекущийАванс(ПерезаполнитьДанные);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьТекущийАванс(ПерезаполнитьАванс)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСотрудников.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	СтрокаТаблицы = ТаблицаСотрудников.Добавить();
	СтрокаТаблицы.Сотрудник = Объект.Сотрудник;
	СтрокаТаблицы.Период = Объект.ДатаНачала;
	
	ДанныеОбАвансе = РасчетЗарплаты.АвансыСотрудников(ТаблицаСотрудников, Объект.Ссылка);
	
	Если ДанныеОбАвансе.Количество() > 0 Тогда
		ТекущийАванс				= ДанныеОбАвансе[0].Аванс;
		ТекущийСпособРасчетаАванса	= ДанныеОбАвансе[0].СпособРасчетаАванса
	КонецЕсли;
	
	УстановитьТекущиеЗначенияРасчетаАванса(ЭтотОбъект, ПерезаполнитьАванс);

	УстановитьКомментарийКАвансу(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура УстановитьКомментарии()
	
	ПозицияКомментарийФилиал          = "";
	ПозицияКомментарийПодразделение   = "";
	ПозицияКомментарийДолжность       = "";
	ПозицияКомментарийТрудоваяФункция = "";
	ПозицияКомментарийВидЗанятости    = "";
	ПозицияКомментарий                = "";
	
	Если ЗначениеЗаполнено(ТекущееОбособленноеПодразделение)
		И ТекущееОбособленноеПодразделение <> Объект.ОбособленноеПодразделение Тогда
		
		ПозицияКомментарийФилиал = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'До %1: %2'"),
			Формат(Объект.ДатаНачала, "ДФ=dd.MM.yyyy"),
			ТекущееОбособленноеПодразделение);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущееПодразделение)
		И ТекущееПодразделение <> Объект.Подразделение Тогда
		
		ПозицияКомментарийПодразделение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'До %1: %2'"),
			Формат(Объект.ДатаНачала, "ДФ=dd.MM.yyyy"),
			ТекущееПодразделение); 
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяДолжность)
		И ТекущаяДолжность <> Объект.Должность Тогда
		
		ПозицияКомментарийДолжность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'До %1: %2'"),
			Формат(Объект.ДатаНачала, "ДФ=dd.MM.yyyy"),
			ТекущаяДолжность);
		
	КонецЕсли;
	
	Если ТекущаяТрудоваяФункция <> Объект.ТрудоваяФункция Тогда
		
		ПозицияКомментарийТрудоваяФункция = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'До %1: %2'"),
			Формат(Объект.ДатаНачала, "ДФ=dd.MM.yyyy"),
			?(ЗначениеЗаполнено(ТекущаяТрудоваяФункция), ТекущаяТрудоваяФункция, НСтр("ru = '<Не указана>'"))); 
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийВидЗанятости) Тогда
		
		Если ТекущийВидЗанятости <> Объект.ВидЗанятости Тогда
			ПозицияКомментарийВидЗанятости = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'До %1: %2'"),
				Формат(Объект.ДатаНачала, "ДФ=dd.MM.yyyy"),
				ТекущийВидЗанятости);
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		ПозицияКомментарий = НСтр("ru = 'Сотрудник еще не принят на работу'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКомментарииНачислений()
	
	ПозицияКомментарийНачисления = "";
	
	Если ТекущиеНачисления.Количество() <> 0
		И ТекущиеНачисления.Итог("Размер") <> Объект.Начисления.Итог("Размер") Тогда
		
		ПозицияКомментарийНачисления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'До %1: %2'"),
			Формат(Объект.ДатаНачала, "ДФ=dd.MM.yyyy"),
			Формат(ТекущиеНачисления.Итог("Размер"), "ЧЦ=15; ЧДЦ=2; ЧН="));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоставДействующихНачисленийСотрудника(ПерезаполнитьНачисления)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСотрудников.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	СтрокаСотрудник = ТаблицаСотрудников.Добавить();
	СтрокаСотрудник.Сотрудник = Объект.Сотрудник;
	СтрокаСотрудник.Период = ?(ЗначениеЗаполнено(Объект.ДатаНачала), НачалоДня(Объект.ДатаНачала) - 1, ТекущаяДатаСеанса());
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		Запрос.МенеджерВременныхТаблиц, 
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ТаблицаСотрудников));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлановыеНачисления.Начисление,
		|	ПлановыеНачисления.Размер
		|ИЗ
		|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
		|ГДЕ
		|	ПлановыеНачисления.Размер <> 0";
	
	ТаблицаНачислений = Запрос.Выполнить().Выгрузить();
	
	ТекущиеНачисления.Загрузить(ТаблицаНачислений);
	
	Если ПерезаполнитьНачисления Тогда
		Объект.Начисления.Загрузить(ТаблицаНачислений);
	КонецЕсли;
	
	УстановитьОсновноеНачисление();
	
	УстановитьКомментарииНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупреждениеОбОграниченияхРежимаРасчетаЗарплатыДляНебольшихОрганизацийЗавершение(ОписаниеОповещения = Неопределено) Экспорт
	
	Если ЗакрытьПослеЗаписи И Открыта() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьКомментарийКАвансу(Форма)
	
	Форма.ПозицияКомментарийАванс = "";
	
	Если (ЗначениеЗаполнено(Форма.ТекущийСпособРасчетаАванса)
			И Форма.ТекущийСпособРасчетаАванса <> Форма.Объект.СпособРасчетаАванса)
		ИЛИ Форма.ТекущийАванс <> Форма.Объект.Аванс Тогда
		
		Если Форма.ТекущийСпособРасчетаАванса = ПредопределенноеЗначение("Перечисление.СпособыРасчетаАванса.ПроцентомОтТарифа") Тогда
			ТекстПодсказки = СтрШаблон(НСтр("ru = 'процентом от оклада, %1%%'"), Форма.ТекущийАванс);
		Иначе
			ТекстПодсказки = СтрШаблон(НСтр("ru = 'фиксированной суммой, %1 руб.'"), Форма.ТекущийАванс);
		КонецЕсли;
		
		Форма.ПозицияКомментарийАванс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'До %1: %2'"),
			Формат(Форма.Объект.ДатаНачала, "ДФ=dd.MM.yyyy"),
			ТекстПодсказки);
		
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекущиеЗначенияРасчетаАванса(Форма, ПерезаполнитьАванс)
	
	Если ПерезаполнитьАванс Тогда
		Форма.Объект.СпособРасчетаАванса = Форма.ТекущийСпособРасчетаАванса;
		Форма.Объект.Аванс = Форма.ТекущийАванс;
	КонецЕсли;
	РасчетЗарплатыКлиентСервер.УстановитьПоказРазмераАванса(Форма);
	
КонецПроцедуры

&НаСервере
Процедура ПодразделениеПриИзмененииНаСвервере()
	
	УстановитьКомментарии();
	УстановитьПризнакИзменения();
	
КонецПроцедуры

&НаСервере
Процедура ДолжностьПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Должность) Тогда
		Объект.ТрудоваяФункция = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Должность, "ТрудоваяФункция");
	КонецЕсли;
	УстановитьКомментарии();
	УстановитьПризнакИзменения();
	
КонецПроцедуры

&НаСервере
Процедура ТрудоваяФункцияПриИзмененииНаСервере()
	УстановитьКомментарии();
	УстановитьПризнакИзменения();
КонецПроцедуры

&НаСервере
Процедура ВидЗанятостиПриИзмененииНаСервере()
	
	УстановитьКомментарии();
	УстановитьПризнакИзменения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеобходимостьОтразитьВТрудовойКнижке()
	
	Объект.ОтразитьВТрудовойКнижке = НЕ (Объект.ОбособленноеПодразделение = ТекущееОбособленноеПодразделение
		И Объект.Подразделение = ТекущееПодразделение
		И Объект.Должность = ТекущаяДолжность
		И Объект.ВидЗанятости = ТекущийВидЗанятости);
		
	УправлениеФормой();
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаСервере
Функция АдресПараметровВХранилище()
	
	МассивСтрок = Новый Массив;
	Для Каждого СтрокаНачисления ИЗ Объект.Начисления Цикл
		Если СтрокаНачисления.Начисление <> ОплатаПоОкладу Тогда
			МассивСтрок.Добавить(СтрокаНачисления);
		КонецЕсли;
	КонецЦикла;
	
	ПередаваемыеСведения = Новый Структура;
	ПередаваемыеСведения.Вставить("УникальныйИдентификаторВладельца", УникальныйИдентификатор);
	ПередаваемыеСведения.Вставить("МассивСтрок",                      Новый ФиксированныйМассив(МассивСтрок));
	
	Возврат ПоместитьВоВременноеХранилище(ПередаваемыеСведения, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура РедактированиеНачисленийЗавершение(Знач РезультатРедактирования, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатРедактирования)
		И ТипЗнч(РезультатРедактирования) = Тип("Структура") Тогда
		Если РезультатРедактирования.Свойство("УникальныйИдентификаторВладельца")
			И РезультатРедактирования.УникальныйИдентификаторВладельца = УникальныйИдентификатор Тогда
			ЗаполнитьТаблицуНачислений(РезультатРедактирования.АдресМассиваСтрок);
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуНачислений(АдресМассиваСтрок)
	
	Для Каждого СтрокаНачисления ИЗ Объект.Начисления Цикл
		Если СтрокаНачисления.Начисление <> ОплатаПоОкладу Тогда
			Объект.Начисления.Удалить(СтрокаНачисления);
		КонецЕсли;
	КонецЦикла;
	
	МассивСтрок = ПолучитьИзВременногоХранилища(АдресМассиваСтрок);

	Для Каждого СтрокаМассива ИЗ МассивСтрок Цикл
		НоваяСтрока = Объект.Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМассива);
	КонецЦикла;
	
	ОписаниеДоплат();
	
КонецПроцедуры

&НаСервере
Функция ОписаниеДоплат()
	
	КоличествоДоплат = Объект.Начисления.Количество() - 1;
	Если КоличествоДоплат <= 0 Тогда
		НадписьДоплаты = НСтр("ru = 'Доплаты'");
	Иначе
		СуммаДоплат = 0;
		Для Каждого СтрокаНачисления ИЗ Объект.Начисления Цикл
			Если СтрокаНачисления.Начисление <> ОплатаПоОкладу Тогда
				СуммаДоплат = СуммаДоплат + СтрокаНачисления.Размер;
			КонецЕсли;
		КонецЦикла;
		Если СуммаДоплат <> 0 Тогда
			НадписьДоплаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Доплаты: %1'"),
				Формат(СуммаДоплат, "ЧЦ=15; ЧДЦ=2; ЧН="));
		КонецЕсли;
	КонецЕсли;
	УстановитьКомментарииНачислений();
	УстановитьПризнакИзменения();
	
КонецФункции

&НаКлиенте
Процедура ВопросПередРегистрациейСледуетПровестиЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ДокументПроведен = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	Если НЕ ДокументПроведен Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не удалось провести документ'"));
		Возврат;
	КонецЕсли;
	
	СоздатьЗаписьЭлектроннойТрудовойКнижки();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаписьЭлектроннойТрудовойКнижки()
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Сотрудник",   Объект.ФизическоеЛицо);
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", Новый Структура("Организация", Объект.Организация));
	
	ОткрытьФорму("Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ФормаОбъекта", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДокументаНажатиеЗавершение(Результат, ДополнительныеДанные) Экспорт
	
	Объект.НаименованиеДокумента = Результат;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЗаписьЭлектроннойТрудовойКнижкиПоказатьОповещение(ВыбранныйЭлемент, ДопПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ПоказатьЗначение(, ВыбранныйЭлемент.Значение)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтатусЗаписиЭлектроннойТрудовойКнижки()
	
	СтатусЗаписиЭлектроннойТрудовойКнижки();
	УчетЗарплаты.УправлениеДоступностьюКадровыхРеквизитов(ЭтотОбъект, Не МероприятиеПереданоПФР);
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура СтатусЗаписиЭлектроннойТрудовойКнижки()
	
	УчетЗарплаты.СтатусЗаписиЭлектроннойТрудовойКнижки(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	УчетЗарплаты.УправлениеФормойКадровогоМероприятия(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = 0;
	ЗарплатаКадрыПереопределяемый.СостояниеДокумента(Объект, СостояниеДокумента);
	
КонецПроцедуры

&НаСервере
Процедура ДопуститьИзменениеДокумента()
	
	УчетЗарплаты.УправлениеДоступностьюКадровыхРеквизитов(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредупреждениеРедактированияНомера()
	
	УсловныйНомерПриказа = ЭлектронныеТрудовыеКнижкиВызовСервера.НомерНаПечать(Объект.Номер);
	
	Если ПустаяСтрока(Объект.НомерПриказа) Тогда
		ПредупреждениеПриРедактированииРеквизита = НСтр("ru = 'Номер заполняется при записи автоматически'");
	Иначе
		ПредупреждениеПриРедактированииРеквизита = "";
	КонецЕсли;
	
	Элементы.НомерПриказа.ПредупреждениеПриРедактировании = ПредупреждениеПриРедактированииРеквизита;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОсновноеНачисление()
	
	Если Объект.Начисления.Количество() = 0 Тогда
		НоваяСтрока = Объект.Начисления.Добавить();
		НоваяСтрока.Начисление = ОплатаПоОкладу;
	Иначе
		ОсновныеНачисления = Объект.Начисления.НайтиСтроки(Новый Структура("Начисление", ОплатаПоОкладу));
		Если ОсновныеНачисления.Количество() <> 0 Тогда
			Оклад = ОсновныеНачисления[0].Размер;
		КонецЕсли;
	КонецЕсли;
	ОписаниеДоплат();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакИзменения()
	
	// Изменилась кадровая информация
	Объект.ИзменитьПодразделениеИДолжность = ТекущееОбособленноеПодразделение <> Объект.ОбособленноеПодразделение
		ИЛИ ТекущееПодразделение <> Объект.Подразделение
		ИЛИ ТекущаяДолжность <> Объект.Должность
		ИЛИ ТекущаяТрудоваяФункция <> Объект.ТрудоваяФункция
		ИЛИ ТекущийВидЗанятости <> Объект.ВидЗанятости;
	
	// Изменился аванс
	Объект.ИзменитьАванс = ТекущийСпособРасчетаАванса <> Объект.СпособРасчетаАванса
		ИЛИ ТекущийАванс <> Объект.Аванс;
	
	// Изменились начисления
	МассивНачислений = Новый Массив;
	Для Каждого СтрокаТаблицы ИЗ Объект.Начисления Цикл
		МассивНачислений.Добавить(Строка(СтрокаТаблицы.Начисление.УникальныйИдентификатор()) + "#" + Строка(СтрокаТаблицы.Размер));
	КонецЦикла;
	ТекущийМассивНачислений = Новый Массив;
	Для Каждого СтрокаТаблицы ИЗ ТекущиеНачисления Цикл
		ТекущийМассивНачислений.Добавить(Строка(СтрокаТаблицы.Начисление.УникальныйИдентификатор()) + "#" + Строка(СтрокаТаблицы.Размер));
	КонецЦикла;
	
	Объект.ИзменитьНачисления = НЕ ОбщегоНазначенияКлиентСервер.СпискиЗначенийИдентичны(МассивНачислений, ТекущийМассивНачислений);
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

ЗакрытьПослеЗаписи = Ложь;

#КонецОбласти
