#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

//======= ПРОЦЕДУРЫ ЗАПОЛНЕНИЯ ДОКУМЕНТА

// Эта процедура в зависимости от значения параметра "Постоянная часть оплаты" 
//выбирает все счета на оплату и переносит данные из их табличной части
//в свою табличную часть "Состав".
Процедура ДобавитьПоСчету(ПостояннаяЧастьОплаты, ЗаполнятьСпециальныйКурс = Ложь, СписокСчетовДляОповещения = Неопределено) Экспорт
	
	НоваяТаблицаСостав = Состав.ВыгрузитьКолонки();
	
	Если СписокСчетовДляОповещения = Неопределено Тогда
		СписокСчетовДляОповещения = Новый СписокЗначений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АР_СчетНаАрендуСостав.ОбъектАренды КАК ОбъектАренды,
	|	АР_СчетНаАрендуСостав.Номенклатура КАК Номенклатура,
	|	АР_СчетНаАрендуСостав.СпособНачисления КАК СпособНачисления,
	|	СУММА(АР_СчетНаАрендуСостав.Количество) КАК Количество,
	|	СУММА(АР_СчетНаАрендуСостав.КоличествоДней) КАК КоличествоДней,
	|	АР_СчетНаАрендуСостав.Цена КАК Цена,
	|	СУММА(АР_СчетНаАрендуСостав.Сумма) КАК Сумма,
	|	АР_СчетНаАрендуСостав.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(АР_СчетНаАрендуСостав.СуммаНДС) КАК СуммаНДС,
	|	АР_СчетНаАрендуСостав.Ссылка КАК СчетНаАренду,
	|	АР_СчетНаАрендуСостав.СтавкаСпособаНачисления КАК СтавкаСпособаНачисления,
	|	АР_СчетНаАрендуСостав.ПериодАренды КАК ПериодАренды,
	|	ВЫРАЗИТЬ(АР_СчетНаАрендуСостав.Содержание КАК СТРОКА(1000)) КАК Содержание,
	|	АР_СчетНаАрендуСостав.НомерСтроки КАК НомерСтрокиПорядок,
	|	АР_СчетНаАрендуСостав.Ссылка.МоментВремени КАК МоментВремени,
	|	АР_СчетНаАрендуСостав.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	АР_СчетНаАрендуСостав.Ссылка.ДокументБезНДС КАК ДокументБезНДС
	|ИЗ
	|	Документ.АР_СчетНаАренду.Состав КАК АР_СчетНаАрендуСостав
	|ГДЕ
	|	АР_СчетНаАрендуСостав.Ссылка.ДоговорКонтрагента = &ДоговорКонтрагента
	|	И АР_СчетНаАрендуСостав.Ссылка.НачалоПериода >= &НачалоПериода
	|	И АР_СчетНаАрендуСостав.Ссылка.ОкончаниеПериода <= &ОкончаниеПериода
	|	И АР_СчетНаАрендуСостав.Номенклатура.АР_ПостояннаяЧастьОплаты = &ПостояннаяЧастьОплаты
	|	И АР_СчетНаАрендуСостав.Ссылка.ВидОперации = &ВидОперацииОплатаАренды
	|	И НЕ АР_СчетНаАрендуСостав.Ссылка.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	АР_СчетНаАрендуСостав.ОбъектАренды,
	|	АР_СчетНаАрендуСостав.Номенклатура,
	|	АР_СчетНаАрендуСостав.СпособНачисления,
	|	АР_СчетНаАрендуСостав.Цена,
	|	АР_СчетНаАрендуСостав.СтавкаНДС,
	|	АР_СчетНаАрендуСостав.Ссылка,
	|	АР_СчетНаАрендуСостав.СтавкаСпособаНачисления,
	|	АР_СчетНаАрендуСостав.ПериодАренды,
	|	ВЫРАЗИТЬ(АР_СчетНаАрендуСостав.Содержание КАК СТРОКА(1000)),
	|	АР_СчетНаАрендуСостав.НомерСтроки,
	|	АР_СчетНаАрендуСостав.Ссылка.МоментВремени,
	|	АР_СчетНаАрендуСостав.Ссылка.СуммаВключаетНДС
	|
	|УПОРЯДОЧИТЬ ПО
	|	МоментВремени,
	|	НомерСтрокиПорядок";
	
	Запрос.УстановитьПараметр("ПостояннаяЧастьОплаты",ПостояннаяЧастьОплаты);
	Запрос.УстановитьПараметр("НачалоПериода",НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецДня(ОкончаниеПериода));
	Запрос.УстановитьПараметр("ДоговорКонтрагента",ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ВидОперацииОплатаАренды",Перечисления.АР_ВидыОперацийСчетНаАренду.ОплатаАренды);
	
	Выборка = Запрос.Выполнить().Выбрать();
	ПервыйСчет = Истина;
	Пока Выборка.Следующий() Цикл
		Если ПервыйСчет Тогда
			ДокументБезНДС = Выборка.ДокументБезНДС;
			СуммаВключаетНДС = Выборка.СуммаВключаетНДС;
			ПервыйСчет = Ложь;
		КонецЕсли;
		Если (НЕ (Выборка.ДокументБезНДС = ДокументБезНДС) ИЛИ (НЕ Выборка.ДокументБезНДС И НЕ Выборка.СуммаВключаетНДС = СуммаВключаетНДС)) 
			И СписокСчетовДляОповещения.НайтиПоЗначению(Выборка.СчетНаАренду) = Неопределено Тогда
			ТекстСообщения = "В счете """ + Выборка.СчетНаАренду + """ параметры НДС не соответствуют параметрам НДС документа начисления арендной платы. 
								|Возможно неверное заполнение сумм в документе начисления.";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект);
			СписокСчетовДляОповещения.Добавить(Выборка.СчетНаАренду);
		КонецЕсли;
		
		СтрТЧ = НоваяТаблицаСостав.Добавить();
		ЗаполнитьЗначенияСвойств(СтрТЧ,Выборка);
		НеКонтролироватьСоответствиеСодержаниюДоговора = НеКонтролироватьСоответствиеСодержаниюДоговора ИЛИ Выборка.СчетНаАренду.НеКонтролироватьСоответствиеСодержаниюДоговора;
		Документы.АР_НачислениеАренднойПлаты.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(ЭтотОбъект, СтрТЧ);
		Документы.АР_НачислениеАренднойПлаты.ЗаполнитьДанныеПоАгентскимУслугамВСтрокеТабЧасти(ЭтотОбъект, СтрТЧ);
	КонецЦикла;
	
	НоваяТаблицаСостав = АР_ПроцедурыНачисления.РазбитьСуммуПоСобственникамУчета(ЭтотОбъект, НоваяТаблицаСостав);
	Для Каждого СтрокаТаблицы из НоваяТаблицаСостав Цикл 
		НоваяСтрока = Состав.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	
	// Проверим, если валюта документа и валюта строки совпадают, 
	// то изменим при необходимости курс на специальный
	Если ЗаполнятьСпециальныйКурс Тогда
		Если Состав.Количество() > 0 Тогда
			Если ВалютаДокумента = Состав[0].СпособНачисления.Валюта Тогда
				СтруктураКурса = АР_ПроцедурыНачисления.ПолучитьКурсВалюты(ВалютаДокумента, ДатаКурса, ДоговорКонтрагента);
				Если  КурсВзаиморасчетов <> СтруктураКурса.Курс Тогда
					КурсВзаиморасчетов = СтруктураКурса.Курс;
					КратностьВзаиморасчетов = СтруктураКурса.Кратность;
				КонецЕсли;
			КонецЕсли;  
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Эта процедура по аналогии с заполнением счета на оплату аренды без выборки счетов
//заполняет свою табличную часть по данным о действующих договорах и арендуемых объектах
Процедура РассчитатьПостояннуюЧастьОплаты(ЗаполнятьСпециальныйКурс = Ложь) Экспорт
	
	АР_ПроцедурыНачисления.ПолучитьПостояннуюЧастьОплаты(ЭтотОбъект,"Состав");
	Документы.АР_НачислениеАренднойПлаты.ЗаполнитьСчетаУчетаВТабЧасти(ЭтотОбъект);
	
	// Проверим, если валюта документа и валюта строки совпадают, 
	// то изменим при необходимости курс на специальный
	Если ЗаполнятьСпециальныйКурс Тогда
		Если Состав.Количество() > 0 Тогда
			Если ВалютаДокумента = Состав[0].СпособНачисления.Валюта Тогда
				СтруктураКурса = АР_ПроцедурыНачисления.ПолучитьКурсВалюты(ВалютаДокумента, ДатаКурса, ДоговорКонтрагента);
				Если  КурсВзаиморасчетов <> СтруктураКурса.Курс Тогда
					КурсВзаиморасчетов = СтруктураКурса.Курс;
					КратностьВзаиморасчетов = СтруктураКурса.Кратность;
				КонецЕсли;
			КонецЕсли;  
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Эта процедура по аналогии с заполнением счета на оплату аренды без выборки счетов
//заполняет свою табличную часть по данным о действующих договорах и арендуемых объектах
Процедура РассчитатьПеременнуюЧастьОплаты(ЗаполнятьСпециальныйКурс = Ложь) Экспорт

	АР_ПроцедурыНачисления.ПолучитьПеременнуюЧастьОплаты(ЭтотОбъект,"Состав");
	Документы.АР_НачислениеАренднойПлаты.ЗаполнитьСчетаУчетаВТабЧасти(ЭтотОбъект);
	
	// Проверим, если валюта документа и валюта строки совпадают, 
	// то изменим при необходимости курс на специальный
	Если ЗаполнятьСпециальныйКурс Тогда
		Если Состав.Количество() > 0 Тогда
			Если ВалютаДокумента = Состав[0].СпособНачисления.Валюта Тогда
				СтруктураКурса = АР_ПроцедурыНачисления.ПолучитьКурсВалюты(ВалютаДокумента, ДатаКурса, ДоговорКонтрагента);
				Если  КурсВзаиморасчетов <> СтруктураКурса.Курс Тогда
					КурсВзаиморасчетов = СтруктураКурса.Курс;
					КратностьВзаиморасчетов = СтруктураКурса.Кратность;
				КонецЕсли;
			КонецЕсли;  
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСтатусыОбъектовАренды(Отказ)

	Если НеКонтролироватьСоответствиеСодержаниюДоговора ИЛИ Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//Если Не НеКонтролироватьСоответствиеСодержаниюДоговора Тогда
	//	Запрос = Новый Запрос;
	//	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	//	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ОкончаниеПериода));
	//	Запрос.УстановитьПараметр("Период", КонецДня(Дата));
	//	Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);
	//	Запрос.УстановитьПараметр("Состав", Состав.Выгрузить());
	//	Запрос.Текст =
	//	"ВЫБРАТЬ
	//	|	АР_НачислениеАренднойПлатыСостав.НомерСтроки,
	//	|	АР_НачислениеАренднойПлатыСостав.Номенклатура КАК Услуга,
	//	|	АР_НачислениеАренднойПлатыСостав.ОбъектАренды,
	//	|	&Договор КАК ДоговорКонтрагента,
	//	|	&НачалоПериода КАК НачалоПериода,
	//	|	&КонецПериода КАК ОкончаниеПериода
	//	|ПОМЕСТИТЬ ПериодыДокумента
	//	|ИЗ
	//	|	&Состав  КАК АР_НачислениеАренднойПлатыСостав
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	АР_СтатусыОбъектовАрендыСрезПоследних.Услуга,
	//	|	АР_СтатусыОбъектовАрендыСрезПоследних.ОбъектАренды,
	//	|	АР_СтатусыОбъектовАрендыСрезПоследних.Договор,
	//	|	АР_СтатусыОбъектовАрендыСрезПоследних.ДатаНачалаАренды,
	//	|	АР_СтатусыОбъектовАрендыСрезПоследних.ДатаОкончанияАренды
	//	|ПОМЕСТИТЬ ПериодыАренды
	//	|ИЗ
	//	|	РегистрСведений.АР_СтатусыОбъектовАренды.СрезПоследних(&Период, Договор = &Договор) КАК АР_СтатусыОбъектовАрендыСрезПоследних
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ПериодыДокумента.НомерСтроки,
	//	|	ПериодыДокумента.Услуга,
	//	|	ПериодыДокумента.ОбъектАренды,
	//	|	ПериодыДокумента.НачалоПериода,
	//	|	ПериодыДокумента.ОкончаниеПериода,
	//	|	ВЫБОР
	//	|		КОГДА ПериодыАренды.ОбъектАренды ЕСТЬ NULL 
	//	|			ТОГДА ИСТИНА
	//	|		ИНАЧЕ ЛОЖЬ
	//	|	КОНЕЦ КАК Ошибка
	//	|ИЗ
	//	|	ПериодыДокумента КАК ПериодыДокумента
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ ПериодыАренды КАК ПериодыАренды
	//	|		ПО ПериодыДокумента.ОкончаниеПериода >= ПериодыАренды.ДатаНачалаАренды
	//	|			И ПериодыДокумента.НачалоПериода <= ПериодыАренды.ДатаОкончанияАренды
	//	|			И ПериодыДокумента.ДоговорКонтрагента = ПериодыАренды.Договор
	//	|			И ПериодыДокумента.ОбъектАренды = ПериодыАренды.ОбъектАренды
	//	|			И ПериодыДокумента.Услуга = ПериодыАренды.Услуга
	//	|ГДЕ
	//	|	ВЫБОР
	//	|			КОГДА ПериодыАренды.ОбъектАренды ЕСТЬ NULL 
	//	|				ТОГДА ИСТИНА
	//	|			ИНАЧЕ ЛОЖЬ
	//	|		КОНЕЦ";
	//	Выборка = Запрос.Выполнить().Выбрать();
	//	Пока Выборка.Следующий() Цикл 
	//		Префикс = "Состав[" + Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
	//		ТекстСообщения = "услуга """ + Выборка.Услуга + """ по объекту аренды """ + Выборка.ОбъектАренды + """ не предусмотрена по данному договору";
	//		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "КОРРЕКТНОСТЬ",
	//			НСтр("ru = 'Услуга'"), Выборка.НомерСтроки, НСтр("ru = 'Начисление'"), ТекстСообщения);
	//		Поле = Префикс + "Номенклатура";
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
	//	КонецЦикла;
	//	
	//КонецЕсли;
	
КонецПроцедуры

Процедура СкопироватьСостав(Основание)
	
	Состав.Очистить();
	
	СписокСчетовНаОплату = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Основание);
	ТаблицаРеализацийПоСчету = Документы.АР_НачислениеАренднойПлаты.РеализацииПоСчетам(СписокСчетовНаОплату);
	
	Для каждого СчетНаОплату Из СписокСчетовНаОплату Цикл
		
		РеализацииПоСчетуНаОплату = ОбщегоНазначения.ВыгрузитьКолонку(
			ТаблицаРеализацийПоСчету.Скопировать(Новый Структура("СчетНаОплату", СчетНаОплату)),
			"Реализация");
	
		ЭтаРеализация = РеализацииПоСчетуНаОплату.Найти(Ссылка);
		Если ЭтаРеализация <> Неопределено Тогда
			РеализацииПоСчетуНаОплату.Удалить(ЭтаРеализация);
		КонецЕсли;
		
		ПокупательНалоговыйАгентПоНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "УчетАгентскогоНДСПокупателем");
		ВедетсяУчетНДСПоФЗ335 = УчетНДС.ВедетсяУчетНДСПоФЗ335(Дата);
		
		ТоварыУслугиКРеализации = Документы.АР_НачислениеАренднойПлаты.ТоварыУслугиКРеализацииПоСчету(СчетНаОплату, РеализацииПоСчетуНаОплату);
		
		Для Каждого СтрокаОснования Из ТоварыУслугиКРеализации Цикл
			
			Если СтрокаОснования.ЭтоУслуга Тогда
				СтрокаУслуги = Состав.Добавить();
				СтрокаУслуги.СчетНаАренду = СчетНаОплату;
				ЗаполнитьЗначенияСвойств(СтрокаУслуги, СтрокаОснования);
			КонецЕсли;
			
		КонецЦикла;
		
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СчетНаОплату, "ДокументБезНДС, СуммаВключаетНДС");
		ДокументБезНДС = РеквизитыОснования.ДокументБезНДС;
		
		// Пересчет сумм в табличной части Услуги
		Если РеквизитыОснования.СуммаВключаетНДС <> СуммаВключаетНДС Тогда
			Для Каждого СтрокаТЧ Из Состав Цикл
				СтрокаТЧ.Сумма = СтрокаТЧ.Сумма + ?(СуммаВключаетНДС, СтрокаТЧ.СуммаНДС, -СтрокаТЧ.СуммаНДС);
				СтрокаТЧ.Цена = ?(СтрокаТЧ.Количество = 0, СтрокаТЧ.Сумма, СтрокаТЧ.Сумма/СтрокаТЧ.Количество);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, СуммаВключаетНДС);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

// Функция готовит пакетный запрос для ОбработкиПроверкиЗаполнения.
//	Табличные части объекта (еще не сохраненного в информационной базе) выгружаются во временные таблицы,
//	соединяются с другими нужными талицами.
//
//Параметры:
//	СтруктураРезультатов - <Структура> - описание пакета запросов. Ключ - имя результата запроса, значение - индекс этого результата
//
//Возвращает массив результатов запроса
Функция ПолучитьДанныеОбъектаДляПроверкиЗаполнения(СтруктураРезультатов)

	Запрос = Новый Запрос;

	Запрос.Текст = "";


	Если Состав.Количество() > 0 Тогда
		Запрос.УстановитьПараметр("ТаблицаСостав", Состав.Выгрузить());

		СтруктураРезультатов.Вставить("ТаблицаСостав", СтруктураРезультатов.Количество());
		СтруктураРезультатов.Вставить("Состав", СтруктураРезультатов.Количество());

		Запрос.Текст = Запрос.Текст + ?(ПустаяСтрока(Запрос.Текст), "", Символы.ПС + ";" + Символы.ПС) +
		"ВЫБРАТЬ
		|	ВремТаблица.НомерСтроки,
		|	ВремТаблица.Номенклатура,
		|	ВремТаблица.ОбъектАренды,
		|	ВремТаблица.СпособНачисления,
		|	ВремТаблица.СтавкаСпособаНачисления,
		|	ВремТаблица.СчетНаАренду,
		|	ВремТаблица.ПериодАренды,
		|	ВремТаблица.Контрагент,
		|	ВремТаблица.ДоговорКонтрагента,
		|	ВремТаблица.Цена,
		|	ВремТаблица.Количество,
		|	ВремТаблица.КоличествоДней,
		|	ВремТаблица.Сумма,
		|	ВремТаблица.СтавкаНДС,
		|	ВремТаблица.СуммаНДС,
		|	ВремТаблица.СчетДоходов,
		|	ВремТаблица.Субконто,
		|	ВремТаблица.СчетУчетаНДСПоРеализации,
		|	ВремТаблица.СчетРасходов,
		|	ВремТаблица.СчетРасчетов
		|ПОМЕСТИТЬ ТаблицаСостав
		|ИЗ
		|	&ТаблицаСостав КАК ВремТаблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДокумента.Номенклатура,
		|	ТаблицаДокумента.Номенклатура.АР_ПостояннаяЧастьОплаты КАК АР_ПостояннаяЧастьОплаты,
		|	ТаблицаДокумента.ОбъектАренды,
		|	ТаблицаДокумента.СпособНачисления,
		|	ТаблицаДокумента.СтавкаСпособаНачисления,
		|	ТаблицаДокумента.СчетНаАренду,
		|	ТаблицаДокумента.ПериодАренды,
		|	ТаблицаДокумента.Контрагент,
		|	ТаблицаДокумента.ДоговорКонтрагента,
		|	ТаблицаДокумента.Цена,
		|	ТаблицаДокумента.Количество,
		|	ТаблицаДокумента.КоличествоДней,
		|	ТаблицаДокумента.Сумма,
		|	ТаблицаДокумента.СтавкаНДС,
		|	ТаблицаДокумента.СуммаНДС,
		|	ТаблицаДокумента.СчетДоходов,
		|	ТаблицаДокумента.Субконто,
		|	ТаблицаДокумента.СчетУчетаНДСПоРеализации,
		|	ТаблицаДокумента.СчетРасходов,
		|	ТаблицаДокумента.СчетРасчетов
		|ИЗ
		|	ТаблицаСостав КАК ТаблицаДокумента
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	КонецЕсли;

	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Возврат Запрос.ВыполнитьПакет();
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Процедура ЗаполнитьПоДокументуОснованию(Основание)

	Если ТипЗнч(Основание)=Тип("ДокументСсылка.АР_СчетНаАренду") Тогда

		// Заполним реквизиты шапки по документу основанию.
		ДокументОснование = Основание;
		ДатаКурса = Дата;
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
		
		НеКонтролироватьСоответствиеСодержаниюДоговора = Основание.НеКонтролироватьСоответствиеСодержаниюДоговора;
		
		СкопироватьСостав(Основание);
		
		Для Каждого Стр Из Состав Цикл
			Стр.СчетНаАренду = Основание;	
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьПризнакНДС(Отказ)
	
	Если НеКонтролироватьСоответствиеСодержаниюДоговора ИЛИ Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("АР_ИспользоватьСхемуОпределенияСтавокНДСПоАрендеНаОсновеДоговора") Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьУслугиПостЧасти = Ложь;
	Для Каждого Стр Из Состав Цикл
		ЕстьУслугиПостЧасти = ЕстьУслугиПостЧасти ИЛИ Стр.Номенклатура.АР_ПостояннаяЧастьОплаты;
	КонецЦикла;
	Если НЕ ЕстьУслугиПостЧасти Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Услуги.НомерСтроки КАК НомерСтроки,
	|	Услуги.Номенклатура КАК Номенклатура,
	|	Услуги.ОбъектАренды КАК ОбъектАренды
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	&Услуги КАК Услуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусыОбъектовАренды.ОбъектАренды КАК ОбъектАренды,
	|	СтатусыОбъектовАренды.Услуга КАК Услуга,
	|	СтатусыОбъектовАренды.Регистратор.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	МИНИМУМ(ДанныеДокумента.НомерСтроки) КАК НомерСтроки,
	|	СтатусыОбъектовАренды.Регистратор.ДокументБезНДС КАК ДокументБезНДС
	|ИЗ
	|	РегистрСведений.АР_СтатусыОбъектовАренды.СрезПоследних(&Период, Договор = &Договор) КАК СтатусыОбъектовАренды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДокумента КАК ДанныеДокумента
	|		ПО СтатусыОбъектовАренды.ОбъектАренды = ДанныеДокумента.ОбъектАренды
	|			И СтатусыОбъектовАренды.Услуга = ДанныеДокумента.Номенклатура
	|ГДЕ
	|	(СтатусыОбъектовАренды.Регистратор.ДокументБезНДС <> &ДокументБезНДС
	|			ИЛИ &ДокументБезНДС = ЛОЖЬ
	|				И СтатусыОбъектовАренды.Регистратор.СуммаВключаетНДС <> &СуммаВключаетНДС)
	|	И СтатусыОбъектовАренды.ДатаНачалаАренды <= &КонецПериода
	|	И СтатусыОбъектовАренды.ДатаОкончанияАренды >= &НачалоПериода
	|	И СтатусыОбъектовАренды.Услуга.АР_ПостояннаяЧастьОплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	СтатусыОбъектовАренды.Регистратор.ДокументБезНДС,
	|	СтатусыОбъектовАренды.ОбъектАренды,
	|	СтатусыОбъектовАренды.Услуга,
	|	СтатусыОбъектовАренды.Регистратор.СуммаВключаетНДС
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Период", КонецДня(ОкончаниеПериода));
	Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("СуммаВключаетНДС", СуммаВключаетНДС);
	Запрос.УстановитьПараметр("ДокументБезНДС", ДокументБезНДС);
	Запрос.УстановитьПараметр("Услуги", Состав.Выгрузить());
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", ОкончаниеПериода);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ДокументБезНДС Тогда
			ВариантНДС = "Документ без НДС";
		ИначеЕсли Выборка.СуммаВключаетНДС Тогда
			ВариантНДС = "НДС в сумме";
		Иначе
			ВариантНДС = "НДС сверху";
		КонецЕсли;
		ТекстСообщения = "Контрагент """ + Контрагент + """, договор """ + ДоговорКонтрагента + """: для услуги """ + Выборка.Услуга + """ по объекту аренды """ + Выборка.ОбъектАренды + """ вариант учета НДС должен быть """ + ВариантНДС + """";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,, Отказ);
	КонецЦикла;             	
		
КонецПроцедуры

Процедура УстановитьСтатусДокумента() Экспорт
	
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда 
		Возврат;
	КонецЕсли;
		
	НомерСчетаФактуры = "";
		
	Если ДополнительныеСвойства.Свойство("СтатусДокумента") Тогда
		// Запись из формы документа
		СтатусДокумента = ?(ДополнительныеСвойства.СтатусДокумента,
			Перечисления.СтатусыДокументовРеализации.Подписан, 
			Перечисления.СтатусыДокументовРеализации.НеПодписан);
			
		Если Не ДополнительныеСвойства.ТребуетсяСчетФактура Тогда
			СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.НеТребуется;
		ИначеЕсли ЭтотОбъект.ЭтоУниверсальныйДокумент Тогда
			СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.НеТребуется;
			Если ЗначениеЗаполнено(ДополнительныеСвойства.НомерСчетаФактуры) Тогда
				НомерСчетаФактуры = ДополнительныеСвойства.НомерСчетаФактуры;
			Иначе
				// УПД в статусе "2"
				НомерСчетаФактуры = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ЭтотОбъект.Номер, Истина, Ложь);
			КонецЕсли;
		ИначеЕсли ДополнительныеСвойства.ЕстьСчетФактура Тогда
			НомерСчетаФактуры = ДополнительныеСвойства.НомерСчетаФактуры;
			Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда 
				СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.Проведен;
			ИначеЕсли ПометкаУдаления Тогда
				СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.Отсутствует;
			Иначе
				СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.НеПроведен;
			КонецЕсли;
		Иначе
			СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.Отсутствует;
		КонецЕсли;
	Иначе
		// Необходимо сделать запись состояния счета-фактуры для случаев "Отсутствует", "Не требуется".
		СчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(ЭтотОбъект.Ссылка);
		Если ЗначениеЗаполнено(СчетФактура) Тогда
			// Движения по статусам сформирует счет-фактура
			Возврат;
		КонецЕсли;
		
		СтатусДокумента = Неопределено;
		ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговора");
		Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента)
			ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером 
			ИЛИ ДокументБезНДС Тогда 
			СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.НеТребуется;
		Иначе
			СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.Отсутствует;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановленСтатусДокумента = Истина;
	СтатусыДокумента = РегистрыСведений.СтатусыДокументов.НовыеСтатусыДокумента();
	СтатусыДокумента.Статус            = СтатусДокумента;
	СтатусыДокумента.СтатусСФ          = СтатусСчетаФактуры;
	СтатусыДокумента.НомерСчетаФактуры = НомерСчетаФактуры;
	РегистрыСведений.СтатусыДокументов.УстановитьСтатусыДокумента(ЭтотОбъект.Ссылка, СтатусыДокумента);
	
КонецПроцедуры

//======= ПРОЦЕДУРЫ ОБРАБОТКИ ПРОВЕДЕНИЯ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ДокументБезНДС = НЕ УчетнаяПолитика.ПлательщикНДС(Организация, Дата);
	АР_ОбщиеПроцедуры.ЗаполнитьПериодПоУмолчанию(ЭтотОбъект);
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	Иначе
		СуммаВключаетНДС = Истина;
	КонецЕсли;
	врДокументБезНДС = ДокументБезНДС;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	ДокументБезНДС = врДокументБезНДС;
	
	// Заполнение реквизитов, специфичных для документа:
	ДатаКурса = Дата;		
		
	Данные = АР_ПроцедурыНачисления.РазбитьСуммуПоСобственникамУчета(ЭтотОбъект, Состав.Выгрузить());
	Состав.Загрузить(Данные);
	
	Документы.АР_НачислениеАренднойПлаты.ЗаполнитьСчетаУчетаРасчетов(ЭтотОбъект);
    Документы.АР_НачислениеАренднойПлаты.ЗаполнитьСчетаУчетаВТабЧасти(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
	ЗачетАвансов.Очистить();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если не ЗначениеЗаполнено(Номер) Тогда
		НН=1;
		Пока НН<=9999 Цикл
			ПеремНомерДоп = Формат(НН, "ЧГ=0");
			НомерДоп_ =  Формат(Дата, "ДФ=yyyyMM")+ "/" +(ПеремНомерДоп);
			НомерДок = Прав(НомерДоп_, 11);
			ПоискДок=Документы.АР_НачислениеАренднойПлаты.НайтиПоНомеру(НомерДок,Дата);
			Если Не ЗначениеЗаполнено(ПоискДок) Тогда
				ПоискДок=Документы.РеализацияТоваровУслуг.НайтиПоНомеру(НомерДок,Дата);
				Если Не ЗначениеЗаполнено(ПоискДок) Тогда
					Номер=НомерДок;
					Прервать;
				КонецЕсли;
			КонецЕсли;
			НН=НН+1;
		КонецЦикла;
	КонецЕсли;		
	
		
		
		
	
 //   Если не ЗначениеЗаполнено(Номер) Тогда
 //   Запрос =  Новый Запрос;
 //   Запрос.Текст="ВЫБРАТЬ
 //                |	РеализацияТоваровУслуг.Номер КАК НомерДоп,
 //                |	РеализацияТоваровУслуг.Ссылка
 //                |ИЗ
 //                |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
 //                |ГДЕ
 //                |	РеализацияТоваровУслуг.Дата МЕЖДУ &НачМесяца И &КонМесяца
 //                |
 //                |СГРУППИРОВАТЬ ПО
 //                |	РеализацияТоваровУслуг.Ссылка,
 //                |	РеализацияТоваровУслуг.Номер
 //                |
 //                |ОБЪЕДИНИТЬ ВСЕ
 //                |
 //                |ВЫБРАТЬ
 //                |	АР_НачислениеАренднойПлаты.Номер,
 //                |	АР_НачислениеАренднойПлаты.Ссылка
 //                |ИЗ
 //                |	Документ.АР_НачислениеАренднойПлаты КАК АР_НачислениеАренднойПлаты
 //                |ГДЕ
 //                |	АР_НачислениеАренднойПлаты.Дата МЕЖДУ &НачМесяца И &КонМесяца
 //                |
 //                |СГРУППИРОВАТЬ ПО
 //                |	АР_НачислениеАренднойПлаты.Ссылка,
 //                |	АР_НачислениеАренднойПлаты.Номер";
 //
 //   Запрос.УстановитьПараметр("НачМесяца",НачалоМесяца(Дата));
 //	Запрос.УстановитьПараметр("КонМесяца", КонецМесяца(Дата));
 //	ДатаДок = Запрос.Выполнить().Выбрать();
 //   ПеремНомерДоп = 0;
 //   
 //	Пока ДатаДок.Следующий() Цикл
 //   	
 //   	НомерДопРаб = Сред(ДатаДок.НомерДоп, 8, 11);
 //   	
 //   	Попытка
 //   		НомерДР = Число(НомерДопРаб);
 //   	Исключение
 //   		НомерДР = 0;
 //   	КонецПопытки;

 //   	
 //   	Если ЗначениеЗаполнено(НомерДопРаб) Тогда
 //   		Попытка 
 //   			
 //   			ЧЛ=Число(НомерДопРаб);
 //   			
 //   		Если ПеремНомерДоп < Число(НомерДопРаб) тогда
 //   			//Сообщить(Число(НомерДопРаб));
 //   			ПеремНомерДоп = Число(НомерДопРаб);
 //   		КонецЕсли;
 //   		
 //   		исключение
 //   		
 //   		КонецПопытки;
 //   		
 //   	КонецЕсли;
 //   	
 //   КонецЦикла;
 //   ПеремНомерДоп = ПеремНомерДоп + 1;
 //   ПеремНомерДоп = Формат(ПеремНомерДоп, "ЧГ=0");
 //   Если ДатаДок.Количество()>0 Тогда             // 
 //   	//ДатаДок.Следующий(); //позиционируем выборку на единственной записи в ней
 //   	//РанееЗанятыйНомер = ДатаДок.НомерДоп;
 //   	//РанееЗанятыйНомер = Прав(РанееЗанятыйНомер, СтрДлина(РанееЗанятыйНомер)-7); //отсекли префикс
 //   	//РанееЗанятыйНомерЧисло = Число(РанееЗанятыйНомер);
 //   	//НомерДоп_ =  Формат(Дата, "ДФ=yyyyMM")+ "/" +(сч+1) ;
 //   	НомерДоп_ =  Формат(Дата, "ДФ=yyyyMM")+ "/" +(ПеремНомерДоп);
 //   	Номер = Прав(НомерДоп_, 11); 
 //   ИНАЧЕ
 //  		//первый док в этом месяце
 //   	Номер =  Формат(Дата, "ДФ=yyyyMM") + "/" + "1";
 // 
 //   КонецЕсли;
 //   КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Дата>='20180101' Тогда 
		НеКонтролироватьСоответствиеСодержаниюДоговора=истина;
	КонецЕсли;	
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ЭтотОбъект);
	
	Если ПравоДоступа("Изменение", Метаданные.Документы.КорректировкаРеализации) Тогда
		Документы.КорректировкаРеализации.ОбновитьРеквизитыСвязанныхДокументовКорректировки(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	ВидЭлектронногоДокумента = Перечисления.ВидыЭД.АктИсполнитель;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьСтатусДокумента();
	
	УчетНДСПереопределяемый.ПроверитьСоответствиеРеквизитовСчетаФактурыВыданного(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	// Исключаем из проверки реквизиты, заполнение которых стало необязательным:
	МассивНепроверяемыхРеквизитов = Новый Массив();

	Если СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовПоАвансам");
	КонецЕсли;

	// Проверяем корректность заполнения реквизитов шапки:

	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ТекстСообщения = "";
		Если НЕ УчетВзаиморасчетов.ПроверитьВозможностьПроведенияВРеглУчете(
			ЭтотОбъект, ДоговорКонтрагента, ТекстСообщения) Тогда
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, "Корректность",
				НСтр("ru = 'Договор'"),,, ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,
				"ДоговорКонтрагента", "Объект", Отказ);
		КонецЕсли;
	КонецЕсли;

	Если НЕ ДеятельностьНаПатенте Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Патент");
	КонецЕсли;
	
	// Получаем содержимое табличных частей объекта с вспомогательными реквизитами:
	СтруктураРезультатов = Новый Структура;
	ТаблицыДокумента =  ПолучитьДанныеОбъектаДляПроверкиЗаполнения(СтруктураРезультатов);

	// Проверка заполнения табличной части "Состав"
	Если Состав.Количество() > 0 Тогда

		ВыборкаУслуг = ТаблицыДокумента[СтруктураРезультатов.Состав].Выбрать();
		ИмяСписка = НСтр("ru = 'Начисление'");

		Пока ВыборкаУслуг.Следующий() Цикл
			Префикс = "Состав[" + Формат(ВыборкаУслуг.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";

			Если ВыборкаУслуг.СуммаНДС <> 0
					И НЕ ЗначениеЗаполнено(ВыборкаУслуг.СчетУчетаНДСПоРеализации) Тогда
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка",,
					НСтр("ru = 'Счет учета НДС по реализации'"), ВыборкаУслуг.НомерСтроки, ИмяСписка);
				Поле = Префикс + "СчетУчетаНДСПоРеализации";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			
			//Проверим, заполнены ли счета на оплату услуг аренды
			НеобходимостьПроверки = (ДоговорКонтрагента.АР_ВестиВзаиморасчетыПоСчетамПост И ВыборкаУслуг.АР_ПостояннаяЧастьОплаты)
				ИЛИ (ДоговорКонтрагента.АР_ВестиВзаиморасчетыПоСчетамПерем И НЕ ВыборкаУслуг.АР_ПостояннаяЧастьОплаты);
							
			Если НеобходимостьПроверки И НЕ ЗначениеЗаполнено(ВыборкаУслуг.СчетНаАренду) Тогда
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка",,
					НСтр("ru = 'Счет на оплату'"), ВыборкаУслуг.НомерСтроки, ИмяСписка);
				Поле = Префикс + "СчетНаАренду";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			
			// Проверим, что если заполнен Принципал, то договор и счет расчетов тоже должны быть заполнены
			Если ЗначениеЗаполнено(ВыборкаУслуг.Контрагент) Тогда
				
				// Проверим, чтобы не был заполнен Принципал для объектов, по-которым взаиморасчеты не ведутся по агентской схеме
				Если НЕ АР_ОбщиеПроцедуры.ПолучитьДанныеСобственника(ВыборкаУслуг.ОбъектАренды, ВыборкаУслуг.Контрагент, Дата).АгентскаяСхема Тогда
					
					ТекстСообщения = "Для объекта аренды """ + ВыборкаУслуг.ОбъектАренды + """ взаиморасчеты не ведутся по агентской схеме. Принципал не должен быть заполнен!";
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "КОРРЕКТНОСТЬ",
						НСтр("ru = 'Контрагент'"), ВыборкаУслуг.НомерСтроки, ИмяСписка, ТекстСообщения);
					Поле = Префикс + "Контрагент";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
					
					// дальнейшая проверка контрагента не нужна
					Продолжить;
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ВыборкаУслуг.ДоговорКонтрагента) Тогда
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка",,
						НСтр("ru = 'Договор принципала'"), ВыборкаУслуг.НомерСтроки, ИмяСписка);
					Поле = Префикс + "ДоговорКонтрагента";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ВыборкаУслуг.СчетРасчетов) Тогда
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка",,
						НСтр("ru = 'Счет расчетов'"), ВыборкаУслуг.НомерСтроки, ИмяСписка);
					Поле = Префикс + "СчетРасчетов";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
				
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	МассивНепроверяемыхРеквизитов.Добавить("Состав.СчетУчетаНДСПоРеализации");
	
	// Проверка заполнения табличной части "Зачет авансов"
	Если НЕ СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ЗачетАвансов");
	КонецЕсли;
	

	Если ЗначениеЗаполнено(ДоговорКонтрагента) И НЕ ДоговорКонтрагента.АР_АрендныйДоговор Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выбранный договор не является договором аренды.", ЭтотОбъект, "ДоговорКонтрагента", "Объект", Отказ);	
	Иначе
		// Сделаем проверку на то, что объект по данному договору находится в аренде
		ПроверитьСтатусыОбъектовАренды(Отказ);
		
		ПроверитьПризнакНДС(Отказ);
	КонецЕсли;
	
	// Удаляем из проверяемых реквизитов все, по которым автоматическая проверка не нужна:
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПроведения = Документы.АР_НачислениеАренднойПлаты.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ

	// Таблица взаиморасчетов с учетом зачета авансов
	ТаблицаВзаиморасчеты = УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
		ПараметрыПроведения.ЗачетАвансовТаблицаДокумента, ПараметрыПроведения.ЗачетАвансовТаблицаАвансов,
		ПараметрыПроведения.ЗачетАвансовРеквизиты, Отказ);

	// Таблицы расчетов по авансам с учетом зачисления платежей через посредника
	ТаблицыЗачетаАвансовКассовыйМетод = УчетВзаиморасчетов.ПодготовитьТаблицыЗачетаАвансовКассовыйМетод(
		ПараметрыПроведения.ЗачетАвансовТаблицаДокумента, ТаблицаВзаиморасчеты,
		ПараметрыПроведения.ЗачетАвансовРеквизиты, Отказ);
	
	СтруктураТаблицДляИП = 
		Документы.АР_НачислениеАренднойПлаты.ПодготовитьСтруктуруТаблицИП(
			ПараметрыПроведения.Реквизиты, ТаблицаВзаиморасчеты);
			
	ТаблицаВзаиморасчетыИП  = СтруктураТаблицДляИП.ТаблицаВзаиморасчетыИП;
			
	// Таблицы выручки от реализации: собственных товаров и услуг и отдельно комиссионных
	ТаблицыРеализация = УчетДоходовРасходов.ПодготовитьТаблицыВыручкиОтРеализации(
		ПараметрыПроведения.РеализацияТаблицаДокумента, ТаблицаВзаиморасчеты, Неопределено,
		ПараметрыПроведения.Реквизиты, Отказ);

	ТаблицаСобственныеТоварыУслуги = ТаблицыРеализация.СобственныеТоварыУслуги;
	ТаблицаТоварыУслугиКомитентов = ТаблицыРеализация.ТоварыУслугиКомитентов;
	ТаблицаРеализованныеТоварыКомитентов = ТаблицыРеализация.РеализованныеТоварыКомитентов;
	
	Если Дата>=Дата('20170101') и  Дата<=Дата('20171231235959') ТОгда //СВД
		ТЗ=ТаблицаСобственныеТоварыУслуги.Скопировать();
		ТЗ.Очистить();
		
		Н1=Справочники.Номенклатура.НайтиПоКоду("00000004345");
		Н2=Справочники.Номенклатура.НайтиПоКоду("00000004344");
		Н3=Справочники.Номенклатура.НайтиПоКоду("00000004371");
		Н4=Справочники.Номенклатура.НайтиПоКоду("00000004418");
		
		Для Каждого Стр из ТаблицаСобственныеТоварыУслуги Цикл
			Если Стр.Номенклатура=Н1 или 
				Стр.Номенклатура=Н2 или 
				Стр.Номенклатура=Н3 или 
				Стр.Номенклатура=Н4 Тогда
				НовСтр=ТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр,Стр);
				НовСтр.СуммаВзаиморасчетов=Окр(28.57*НовСтр.Количество,2);
				НовСтр.СуммаБУ=НовСтр.СуммаВзаиморасчетов;
				НовСтр.СуммаНУ=НовСтр.СуммаБУ;
				НовСтр.СуммаРуб=НовСтр.СуммаБУ;
				НовСтр.СуммаНДСРуб=Окр(НовСтр.Сумма*18/118,2);
				//НовСтр.НДСВал=НовСтр.НДС;
				НовСтр.СуммаБезНДСРуб=НовСтр.СуммаБУ-НовСтр.СуммаНДСРуб;
				//НовСтр.СуммаБУБезНдс=НовСтр.СуммаБезНдс;
				//НовСтр.СуммаБезНДСВал=НовСтр.СуммаБУБезНдс;
				НовСтр.Субконто=Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000004");
				
				НовСтр2=ТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр2,Стр);
				НовСтр2.СуммаВзаиморасчетов=НовСтр2.СуммаВзаиморасчетов-НовСтр.СуммаВзаиморасчетов;
				НовСтр2.СуммаБУ=НовСтр2.СуммаВзаиморасчетов;
				НовСтр2.СуммаНУ=НовСтр2.СуммаБУ;
				НовСтр2.СуммаРуб=НовСтр2.СуммаБУ;
				НовСтр2.СуммаНДСРуб=НовСтр2.СуммаНДСРуб-НовСтр.СуммаНДСРуб;
				//НовСтр2.НДСВал=НовСтр2.НДС;
				НовСтр2.СуммаБезНДСРуб=НовСтр2.СуммаБезНДСРуб-НовСтр.СуммаБезНДСРуб;
				//НовСтр2.СуммаБУБезНдс=НовСтр2.СуммаБезНдс;
				//НовСтр2.СуммаБезНДСВал=НовСтр2.СуммаБУБезНдс;
				НовСтр2.Субконто=Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000002");
				
			Иначе
				НовСтр=ТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр,Стр);
				
			КонецЕсли;	
			
			
		КонецЦикла;
		ТаблицаСобственныеТоварыУслуги=ТЗ.Скопировать();
		ТаблицыРеализация.СобственныеТоварыУслуги = ТаблицаСобственныеТоварыУслуги;
		
		
	ИначеЕсли Дата>=Дата('20180101') и Дата<=Дата('20180731235959')  Тогда
		
		ТЗ=ТаблицаСобственныеТоварыУслуги.Скопировать();
		ТЗ.Очистить();
		
		Н1=Справочники.Номенклатура.НайтиПоКоду("00000005629");
		Н2=Справочники.Номенклатура.НайтиПоКоду("00000004488");
		Н3=Справочники.Номенклатура.НайтиПоКоду("00000004470");
		//Н4=Справочники.Номенклатура.НайтиПоКоду("00000004418");
		
		Для Каждого Стр из ТаблицаСобственныеТоварыУслуги Цикл
			Если Стр.Номенклатура=Н1 Тогда
				НовСтр=ТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр,Стр);
				НовСтр.СуммаВзаиморасчетов=Окр(75*НовСтр.Количество,2);
				НовСтр.СуммаБУ=НовСтр.СуммаВзаиморасчетов;
				НовСтр.СуммаРуб=НовСтр.СуммаБУ;
				НовСтр.СуммаНУ=НовСтр.СуммаБУ;
				НовСтр.СуммаНДСРуб=Окр(НовСтр.СуммаБУ*18/118,2);
				//НовСтр.НДСВал=НовСтр.НДС;
				НовСтр.СуммаБезНДСРуб=НовСтр.СуммаБУ-НовСтр.СуммаНДСРуб;
				//НовСтр.СуммаБезНДСРуб=НовСтр.СуммаБезНдс;
				//НовСтр.СуммаБезНДСВал=НовСтр.СуммаБУБезНдс;
				НовСтр.Субконто=Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000014");
				
				НовСтр2=ТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр2,Стр);
				НовСтр2.СуммаВзаиморасчетов=НовСтр2.СуммаВзаиморасчетов-НовСтр.СуммаВзаиморасчетов;
				НовСтр2.СуммаБУ=НовСтр2.СуммаВзаиморасчетов;
				НовСтр2.СуммаРуб=НовСтр2.СуммаБУ;
				НовСтр2.СуммаНУ=НовСтр2.СуммаБУ;
				НовСтр2.СуммаНДСРуб=НовСтр2.СуммаНДСРуб-НовСтр.СуммаНДСРуб;
				//НовСтр2.НДСВал=НовСтр2.НДС;
				НовСтр2.СуммаБезНДСРуб=НовСтр2.СуммаБезНДСРуб-НовСтр.СуммаБезНДСРуб;
				//НовСтр2.СуммаБУБезНдс=НовСтр2.СуммаБезНдс;
				//НовСтр2.СуммаБезНДСВал=НовСтр2.СуммаБУБезНдс;
				НовСтр2.Субконто=Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000002");
			ИначеЕсли Стр.Номенклатура=Н2 или Стр.Номенклатура=Н3 Тогда
				НовСтр=ТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр,Стр);
				НовСтр.СуммаВзаиморасчетов=Окр(180*НовСтр.Количество,2);
				НовСтр.СуммаБУ=НовСтр.СуммаВзаиморасчетов;
				НовСтр.СуммаРуб=НовСтр.СуммаБУ;
				НовСтр.СуммаНУ=НовСтр.СуммаБУ;
				НовСтр.СуммаНДСРуб=Окр(НовСтр.СуммаБУ*18/118,2);
				//НовСтр.НДСВал=НовСтр.НДС;
				НовСтр.СуммаБезНДСРуб=НовСтр.СуммаБУ-НовСтр.СуммаНДСРуб;
				//НовСтр.СуммаБУБезНдс=НовСтр.СуммаБезНдс;
				//НовСтр.СуммаБезНДСВал=НовСтр.СуммаБУБезНдс;
				НовСтр.Субконто=Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000014");
				
				НовСтр2=ТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр2,Стр);
				НовСтр2.СуммаВзаиморасчетов=НовСтр2.СуммаВзаиморасчетов-НовСтр.СуммаВзаиморасчетов;
				НовСтр2.СуммаБУ=НовСтр2.СуммаВзаиморасчетов;
				НовСтр2.СуммаНУ=НовСтр2.СуммаБУ;
				НовСтр2.СуммаРуб=НовСтр2.СуммаБУ;
				НовСтр2.СуммаНДСРуб=НовСтр2.СуммаНДСРуб-НовСтр.СуммаНДСРуб;
				//НовСтр2.НДСВал=НовСтр2.НДС;
				НовСтр2.СуммаБезНДСРуб=НовСтр2.СуммаБезНДСРуб-НовСтр.СуммаБезНДСРуб;
				//НовСтр2.СуммаБУБезНдс=НовСтр2.СуммаБезНдс;
				//НовСтр2.СуммаБезНДСВал=НовСтр2.СуммаБУБезНдс;
				НовСтр2.Субконто=Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000002");
				
				
				
			Иначе
				НовСтр=ТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр,Стр);
				
			КонецЕсли;
			
		КонецЦикла;
		ТаблицаСобственныеТоварыУслуги=ТЗ.Скопировать();
		ТаблицыРеализация.СобственныеТоварыУслуги = ТаблицаСобственныеТоварыУслуги;
		
		
		
	ИначеЕсли Дата>=Дата('20180801') Тогда
		
		ТЗ=ТаблицаСобственныеТоварыУслуги.Скопировать();
		ТЗ.Очистить();
		
		Н1=Справочники.Номенклатура.НайтиПоКоду("00000005629");
		Н2=Справочники.Номенклатура.НайтиПоКоду("00000004488");
		Н3=Справочники.Номенклатура.НайтиПоКоду("00000004470");
		//Н4=Справочники.Номенклатура.НайтиПоКоду("00000004636");
		
		Для Каждого Стр из ТаблицаСобственныеТоварыУслуги Цикл
			Если Стр.Номенклатура=Н1 Тогда
				НовСтр=ТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр,Стр);
				НовСтр.СуммаВзаиморасчетов=Окр(85*НовСтр.Количество,2);
				НовСтр.СуммаБУ=НовСтр.СуммаВзаиморасчетов;
				НовСтр.СуммаРуб=НовСтр.СуммаБУ;
				НовСтр.СуммаНУ=НовСтр.СуммаБУ;
				НовСтр.СуммаНДСРуб=Окр(НовСтр.СуммаБУ*18/118,2);
				//НовСтр.НДСВал=НовСтр.НДС;
				НовСтр.СуммаБезНДСРуб=НовСтр.СуммаБУ-НовСтр.СуммаНДСРуб;
				//НовСтр.СуммаБезНДСРуб=НовСтр.СуммаБезНдс;
				//НовСтр.СуммаБезНДСВал=НовСтр.СуммаБУБезНдс;
				НовСтр.Субконто=Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000014");
				
				НовСтр2=ТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр2,Стр);
				НовСтр2.СуммаВзаиморасчетов=НовСтр2.СуммаВзаиморасчетов-НовСтр.СуммаВзаиморасчетов;
				НовСтр2.СуммаБУ=НовСтр2.СуммаВзаиморасчетов;
				НовСтр2.СуммаРуб=НовСтр2.СуммаБУ;
				НовСтр2.СуммаНУ=НовСтр2.СуммаБУ;
				НовСтр2.СуммаНДСРуб=НовСтр2.СуммаНДСРуб-НовСтр.СуммаНДСРуб;
				//НовСтр2.НДСВал=НовСтр2.НДС;
				НовСтр2.СуммаБезНДСРуб=НовСтр2.СуммаБезНДСРуб-НовСтр.СуммаБезНДСРуб;
				//НовСтр2.СуммаБУБезНдс=НовСтр2.СуммаБезНдс;
				//НовСтр2.СуммаБезНДСВал=НовСтр2.СуммаБУБезНдс;
				НовСтр2.Субконто=Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000002");
			ИначеЕсли Стр.Номенклатура=Н2 или Стр.Номенклатура=Н3 Тогда
				НовСтр=ТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр,Стр);
				НовСтр.СуммаВзаиморасчетов=Окр(200*НовСтр.Количество,2);
				НовСтр.СуммаБУ=НовСтр.СуммаВзаиморасчетов;
				НовСтр.СуммаРуб=НовСтр.СуммаБУ;
				НовСтр.СуммаНУ=НовСтр.СуммаБУ;
				НовСтр.СуммаНДСРуб=Окр(НовСтр.СуммаБУ*18/118,2);
				//НовСтр.НДСВал=НовСтр.НДС;
				НовСтр.СуммаБезНДСРуб=НовСтр.СуммаБУ-НовСтр.СуммаНДСРуб;
				//НовСтр.СуммаБУБезНдс=НовСтр.СуммаБезНдс;
				//НовСтр.СуммаБезНДСВал=НовСтр.СуммаБУБезНдс;
				НовСтр.Субконто=Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000014");
				
				НовСтр2=ТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр2,Стр);
				НовСтр2.СуммаВзаиморасчетов=НовСтр2.СуммаВзаиморасчетов-НовСтр.СуммаВзаиморасчетов;
				НовСтр2.СуммаБУ=НовСтр2.СуммаВзаиморасчетов;
				НовСтр2.СуммаНУ=НовСтр2.СуммаБУ;
				НовСтр2.СуммаРуб=НовСтр2.СуммаБУ;
				НовСтр2.СуммаНДСРуб=НовСтр2.СуммаНДСРуб-НовСтр.СуммаНДСРуб;
				//НовСтр2.НДСВал=НовСтр2.НДС;
				НовСтр2.СуммаБезНДСРуб=НовСтр2.СуммаБезНДСРуб-НовСтр.СуммаБезНДСРуб;
				//НовСтр2.СуммаБУБезНдс=НовСтр2.СуммаБезНдс;
				//НовСтр2.СуммаБезНДСВал=НовСтр2.СуммаБУБезНдс;
				НовСтр2.Субконто=Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000002");
				
			Иначе
				НовСтр=ТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр,Стр);
				
			КонецЕсли;	
			
			
			
			
			
		КонецЦикла;
		
		ТаблицаСобственныеТоварыУслуги=ТЗ.Скопировать();
		ТаблицыРеализация.СобственныеТоварыУслуги = ТаблицаСобственныеТоварыУслуги;
		
	КонецЕсли;
	//ТаблицаСобственныеТоварыУслуги=ТЗ.Скопировать();
	//
	//ТаблицыРеализация.СобственныеТоварыУслуги = ТаблицаСобственныеТоварыУслуги;
	
//КонецЕсли;
	

	Документы.АР_НачислениеАренднойПлаты.ДобавитьКолонкуСодержание(ТаблицыРеализация.СобственныеТоварыУслуги);

	// Структура таблиц для отражения в налоговом учете УСН
	СтруктураТаблицУСН = Новый Структура("ТаблицаРасчетов", ТаблицыЗачетаАвансовКассовыйМетод.ТаблицаВзаиморасчетов);
	
	// Учет доходов и расходов ИП
	Если ПараметрыПроведения.Реквизиты[0].ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		СписанныеМПЗ = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуСписанныеМПЗ(
			Неопределено, ПараметрыПроведения.РеализацияТаблицаДокумента, ПараметрыПроведения.Реквизиты)
	КонецЕсли;
	
	ТаблицыСписанияТоваровИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыСписанияМПЗ(
		СписанныеМПЗ, ПараметрыПроведения.Реквизиты, Отказ);
	ТаблицаОказаниеУслугИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуОказаниеУслуг(
		ТаблицыРеализация.СобственныеТоварыУслуги, ПараметрыПроведения.Реквизиты);
		
	Если Не ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		ТаблицаСтатусовСчетов = СтатусыДокументов.ПодготовитьТаблицуСтатусовОтгрузкиПоСчетам(
			ПараметрыПроведения.ТаблицаСчетовНаОплату,
			ПараметрыПроведения.ОтгрузкаТоваровОказаниеУслугПоСчету,
			ПараметрыПроведения.ОтгрузкаВозвратнойТарыПоСчету,
			ПараметрыПроведения.Реквизиты);
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ

	УчетВзаиморасчетов.СформироватьДвиженияЗачетАвансов(ТаблицаВзаиморасчеты,
		ПараметрыПроведения.ЗачетАвансовРеквизиты, Движения, Отказ);
	УчетВзаиморасчетов.СформироватьДвиженияЗачетАвансовКомитентов(ТаблицаТоварыУслугиКомитентов,
		ПараметрыПроведения.ЗачетАвансовКомитентовРеквизиты, Движения, Отказ);
	
	УчетВзаиморасчетов.СформироватьДвиженияРасчетыПоЭквайрингуЗачетАвансов(
		ТаблицыЗачетаАвансовКассовыйМетод.ТаблицаПрочихРасчетов,
		ТаблицыЗачетаАвансовКассовыйМетод.ТаблицаПроводокВспомогательныеРасчеты,
		ПараметрыПроведения.ЗачетАвансовРеквизиты,
		Движения, Отказ);

	УчетДоходовРасходов.СформироватьДвиженияРеализация(
		ТаблицаСобственныеТоварыУслуги, ТаблицаТоварыУслугиКомитентов, ТаблицаРеализованныеТоварыКомитентов,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	РегистрыНакопления.РеализацияУслуг.ДобавитьДвижения(
		Движения.РеализацияУслуг,
		ПараметрыПроведения.ТаблицаРеализацияУслуг,
		ТаблицаСобственныеТоварыУслуги,
		ПараметрыПроведения.Реквизиты);
		
	УчетНДС.СформироватьДвиженияРеализацияТоваровУслуг(
		ТаблицаСобственныеТоварыУслуги, Неопределено, Неопределено,  
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	//Движения регистра "Рублевые суммы документов в валюте"
	УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалюте(ТаблицаСобственныеТоварыУслуги, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетНДС.СформироватьДвиженияРеализацияКомиссионныхТоваров(
		Неопределено, 
		ТаблицаТоварыУслугиКомитентов,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	НалоговыйУчетУСН.СформироватьДвиженияУСН(ЭтотОбъект, СтруктураТаблицУСН);
		
	// Учет доходов и расходов ИП
	ТаблицаИПМПЗОтгруженные	= УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияСписаниеМПЗ(
		ТаблицыСписанияТоваровИП,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	ТаблицаИПМПЗОтгруженныеУслуги = УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияОказаниеУслуг(
		ТаблицаОказаниеУслугИП,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаИПМПЗОтгруженныеУслуги, ТаблицаИПМПЗОтгруженные);
		
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияЗачетОплатыПокупателя(
		ТаблицаИПМПЗОтгруженные,
		СтруктураТаблицДляИП.ТаблицаВзаиморасчетыИП, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	АР_ОбщиеПроцедуры.СформироватьДвиженияЗачетАвансов(ТаблицаВзаиморасчеты, ПараметрыПроведения.ЗачетАвансовРеквизиты, Движения, Отказ);
	АР_ОбщиеПроцедуры.СформироватьДвиженияРеализация(ТаблицаСобственныеТоварыУслуги, ПараметрыПроведения.Реквизиты, Движения, Отказ);
	АР_ОбщиеПроцедуры.СформироватьДвиженияРеализация(ТаблицаТоварыУслугиКомитентов, ПараметрыПроведения.Реквизиты, Движения, Отказ);
	АР_ОбщиеПроцедуры.СформироватьДвиженияПоРегистру(ПараметрыПроведения.ПродажиПоАренде, Движения, "АР_ПродажиПоАренде", Отказ);
	АР_ОбщиеПроцедуры.СвернутьСформированныеПроводки(Движения.Хозрасчетный);
	
	// ПЕРЕОЦЕНКА ВАЛЮТНЫХ ОСТАТКОВ
	ТаблицаПереоценка = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкаВалютныхОстатковПоПроводкамДокумента(
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетУСН.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	Если Не ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		СтатусыДокументов.СформироватьДвиженияСтатусовДокументов(
			ТаблицаСтатусовСчетов, ПараметрыПроведения.Реквизиты);
	КонецЕсли;
	
	ПроведениеСервер.УстановитьЗаписьОчищаемыхНаборовЗаписей(ЭтотОбъект);
		
	Движения.Записать();
	
	ПараметрыДействия = УчетНДСПереопределяемый.НовыеПараметрыСостоянияСчетаФактуры("Проведен", ЭтотОбъект);	
	УчетНДСПереопределяемый.УстановитьСостояниеСчетаФактуры(ПараметрыДействия, Отказ);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
			
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

	УчетНДСПереопределяемый.УстановкаПроведенияУСчетаФактуры(Ссылка, "СчетФактураВыданный", Ложь, Отказ);

КонецПроцедуры

#КонецЕсли

