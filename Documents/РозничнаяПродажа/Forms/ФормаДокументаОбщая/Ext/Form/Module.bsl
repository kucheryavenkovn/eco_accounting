&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	Если Параметры.Свойство("ИзменитьВидОперации")
		И Параметры.ИзменитьВидОперации Тогда
		
		Объект.ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
		
		УстановитьЗаголовокФормы(ЭтотОбъект);
		УстановитьЗаголовокКнопкиОплата();
		Модифицированность = Истина;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		РозничнаяПродажаСсылка = Документы.РозничнаяПродажа.ПолучитьСсылку();
	Иначе
		РозничнаяПродажаСсылка = Объект.Ссылка;
	КонецЕсли; 
	
	ЕстьПравоВводаРозничнаяПродажа    = ПравоДоступа("Добавление", Метаданные.Документы.РозничнаяПродажа);
	ЕстьПравоВводаВозвратОтПокупателя = ПравоДоступа("Добавление", Метаданные.Документы.ВозвратТоваровОтПокупателя);
	ЕстьПравоВводаЧекаКоррекции       = РольДоступна(Метаданные.Роли.КоррекцияРозничнойПродажи) ИЛИ РольДоступна(Метаданные.Роли.ПолныеПрава);
	
	// Нельзя менять ответственного пока не отработал обработчик обновления
	Элементы.Ответственный.Доступность = Объект.УдалитьОтветственный.Пустая();

	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Активизировать первую непустую табличную часть
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("Товары",                "Товары");
	СписокТабличныхЧастей.Добавить("АгентскиеУслуги",       "АгентскиеУслуги");
	СписокТабличныхЧастей.Добавить("ПодарочныеСертификаты", "ПодарочныеСертификаты");
	СписокТабличныхЧастей.Добавить("Оплата",                "Оплата");
	
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБПВызовСервера.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБПВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);
	
	ШтрихкодированиеИС.ИнициализироватьКэшМаркируемойПродукции(ЭтотОбъект);
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Документ.РозничнаяПродажа",
		"ФормаДокументаОбщая",
		НСтр("ru='Новости: Розничная продажа (чек)'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	УстановитьУсловноеОформление();
	УправлениеФормой(ЭтаФорма);
	ОбновитьИтоги(ЭтаФорма);
	НастройкаОтображенияФормыВПростомИнтерфейсе();
	
КонецПроцедуры


&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	Если НЕ ТекущийОбъект.Ссылка.Пустая() Тогда
		РозничнаяПродажаСсылка = ТекущийОбъект.Ссылка;
	КонецЕсли; 
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ТекущийОбъект.Ссылка.Пустая() И ЗначениеЗаполнено(РозничнаяПродажаСсылка) Тогда
		ТекущийОбъект.УстановитьСсылкуНового(РозничнаяПродажаСсылка);
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	УстановитьЗаголовокФормы(ЭтотОбъект);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	Если Не ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Ценообразование.ОбновитьЦеныНоменклатуры(Объект.Ссылка, 
			Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам,
			Объект.ВалютаДокумента,
			Объект.СуммаВключаетНДС);
	КонецЕсли;

	УстановитьСостояниеДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	СобытияФормИСКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
	Если ИмяСобытия = КассовыеСменыКлиентБП.СобытиеВыполняетсяОперацияКассовойСмены() Тогда
		Доступность = Ложь;
	ИначеЕсли ИмяСобытия = КассовыеСменыКлиентБП.СобытиеЗавершиласьОперацияКассовойСмены() Тогда
		Доступность = Истина;
	ИначеЕсли ИмяСобытия = "ОбновитьБаннеры_РозничнаяТорговля" И ИспользуетсяПростойИнтерфейс Тогда
		Элементы.ГруппаБаннерОткрытьСмену.Видимость =
			ОтображатьБаннерОткрытияСмены(Объект.Ссылка, ИспользуетсяФискальныйРегистратор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ИспользуютсяСканерыШтрихкода И НЕ ТолькоПросмотр Тогда
		// Попробуем подключить сканер штрихкода
		ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода";
		
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(
			Неопределено,
			ЭтотОбъект,
			ПоддерживаемыеТипыПодключаемогоОборудования);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если НЕ ЗавершениеРаботы И ИспользуютсяСканерыШтрихкода Тогда
		МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ТолькоПросмотр ИЛИ НЕ ВводДоступен() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСоСканераСтруктура = СобытияФормИСКлиент.ВнешнееСобытиеПреобразоватьДанныеСоСканераВСтруктуру(ЭтотОбъект, Источник, Событие, Данные);
	Если ДанныеСоСканераСтруктура = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоискПоШтрихкодуЗавершение(ДанныеСоСканераСтруктура, Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПринятьОплату(Команда)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользуетсяФискальныйРегистратор Тогда
		Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
			РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
		Иначе
			ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			РабочееМесто = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыДокумента = ПодготовитьПараметрыФормаОплата(РабочееМесто);
	
	ПараметрыФормыОплаты = Новый Структура;
	
	ПараметрыФормыОплаты.Вставить("Организация",                     Объект.Организация);
	ПараметрыФормыОплаты.Вставить("ЗаголовокКнопкиВыполнить",        ?(ПараметрыДокумента.СписокОборудованияПечатьЧека.Количество() = 0, Элементы.ФормаПринятьОплату.Заголовок, НСтр("ru = 'Напечатать чек'")));
	ПараметрыФормыОплаты.Вставить("ЕстьОплатаКартой",                (ПараметрыДокумента.СписокОборудованияПлатежнаяКарта.Количество() > 0));
	ПараметрыФормыОплаты.Вставить("ЭтоВозврат",                      (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРозничнаяПродажа.Возврат")));
	ПараметрыФормыОплаты.Вставить("ЭтоЧекКоррекции",                 ЭтоЧекКоррекции);
	ПараметрыФормыОплаты.Вставить("АдресТаблицаОплата",              ПараметрыДокумента.АдресТаблицаОплата);
	ПараметрыФормыОплаты.Вставить("СуммаДокумента",                  ИтогВсего);
	ПараметрыФормыОплаты.Вставить("ЗапрашиватьКонтактнуюИнформацию", ПараметрыДокумента.СписокОборудованияПечатьЧека.Количество() > 0);
	
	ОповещениеПриЗакрытииФормыОплаты = Новый ОписаниеОповещения("ПринятьОплатуЗавершение", ЭтотОбъект, ПараметрыДокумента);
	ОткрытьФорму("Документ.РозничнаяПродажа.Форма.ФормаОплаты",ПараметрыФормыОплаты, ЭтотОбъект, , , , ОповещениеПриЗакрытииФормыОплаты, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПодборТовары(Команда)
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоШтрихкоду(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыБПКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКассовуюСмену(Команда)
	
	Если Не УправлениеКассовойСменойДоступно Тогда
		ПоказатьПредупреждение( , НСтр("ru='Недостаточно прав для выполнения операции'"));
	Иначе
		ОчиститьСообщения();
		КассовыеСменыКлиентБП.НачатьОткрытиеКассовойСмены(УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекКоррекции(Команда)
	Если НЕ Объект.ОтчетОРозничныхПродажах.Пустая() Тогда
		ТекстВопроса = НСтр("ru = 'По этому чеку был сформирован ""Отчет о розничных продажах"". После пробития чека коррекции отчет нужно будет откорректировать вручную.'");
		ОповещениеОВыборе = Новый ОписаниеОповещения("ПробитьЧекКоррекцииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеОВыборе, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ПереключитьЧекКоррекции();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЧекНаВозврат(Команда)
	СтруктураПараметров = Новый Структура;
	ЗначенияЗаполнения = Новый Структура;
	
	Если НЕ Объект.ОтчетОРозничныхПродажах.Пустая() Тогда
		ЗначенияЗаполнения.Вставить("Основание", Объект.ОтчетОРозничныхПродажах);
		ЗначенияЗаполнения.Вставить("РозничнаяПродажа", Объект.Ссылка);
		
		СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
		ОткрытьФорму("Документ.ВозвратТоваровОтПокупателя.Форма.ФормаДокументаОбщая", СтруктураПараметров, ЭтаФорма, Объект.Ссылка);
	Иначе
		ЗначенияЗаполнения.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийРозничнаяПродажа.Возврат"));
		ЗначенияЗаполнения.Вставить("Основание", Объект.Ссылка);
		
		СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		СтруктураПараметров.Вставить("ИзменитьВидОперации", Истина);
		
		ОткрытьФорму("Документ.РозничнаяПродажа.Форма.ФормаДокументаОбщая", СтруктураПараметров, ЭтаФорма, Объект.Ссылка);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		СкладПриИзмененииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НадписьОтчетОРозничныхПродажахНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПоказатьЗначение(, Объект.ОтчетОРозничныхПродажах);
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеПриИзменении(Элемент)
	
	Если НЕ Объект.Основание.Пустая() Тогда
		ОснованиеПриИзмененииНаСервере();
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	ОбновитьИтоги(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ОбновитьУсловноеОформление(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты();
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ИспользуетсяПростойИнтерфейс Тогда
		СтандартнаяОбработка = Ложь;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Организация", Объект.Организация);
		Отбор.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийРозничнаяПродажа.Продажа"));
		Отбор.Вставить("Склад", Объект.Склад);
		
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		ОткрытьФорму("Документ.РозничнаяПродажа.ФормаВыбора", ПараметрыФормы, Элемент);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	ОбновитьИтоги(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		Объект.СчетКасса = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.КассаОрганизации");
	КонецЕсли; 
	
	Если НоваяСтрока И НЕ ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если (Объект.СчетКасса = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.КассаПлатежногоАгента") И Объект.АгентскиеУслуги.Количество() > 0) Тогда
		ТекстСообщения = НСтр("ru = 'Чек на прием платежей по договору платежного агента не должен содержать иных товаров или услуг.'");
			
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , "Объект.Товары");
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	ТекущиеДанные	= Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Количество, Цена, Сумма, СтавкаНДС ,СуммаНДС, Всего, ЭтоУслуга, ПродукцияМаркируемаяДляГИСМ, 
		|ЭтоТабачнаяПродукция, ЭтоОбувнаяПродукция, ОсобыйПорядок, ЭтоАлкогольнаяПродукция, ИндексАкцизнойМарки, АкцизнаяМарка");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Склад, ТипЦен, СуммаВключаетНДС, ДокументБезНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтаФорма);
	
	ДанныеОбъекта.Вставить("Реализация", Истина);
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	Если Объект.Товары.Количество() > 1 
		И ДанныеСтрокиТаблицы.ОсобыйПорядок <> Объект.Товары[0].ОсобыйПорядок Тогда
		ИмяСписка = "Товары";
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность", НСтр("ru = 'Номенклатура'"),
			ТекущиеДанные.НомерСтроки, ИмяСписка, НСтр("ru = 'Один чек не может содержать товары по разным системам налогообложения'"));
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяСписка, ТекущиеДанные.НомерСтроки, "Номенклатура");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "Объект");
	КонецЕсли; 
	
	Если ДанныеСтрокиТаблицы.ЭтоТабачнаяПродукция 
		ИЛИ ДанныеСтрокиТаблицы.ЭтоОбувнаяПродукция 
		ИЛИ ДанныеСтрокиТаблицы.ЭтоАлкогольнаяПродукция Тогда
		
		ПараметрыОткрытия = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыВводаКодаМаркировки();
		
		ПараметрыОткрытия.Номенклатура     = ТекущиеДанные.Номенклатура;
		
		ПараметрыОткрытия.МаркируемаяПродукция = Истина;
		Если ДанныеСтрокиТаблицы.ЭтоТабачнаяПродукция Тогда
			ПараметрыОткрытия.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак");
		ИначеЕсли ДанныеСтрокиТаблицы.ЭтоОбувнаяПродукция Тогда
			ПараметрыОткрытия.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь");
		Иначе
			ПараметрыОткрытия.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная");
		КонецЕсли; 
		
		ПараметрыОткрытия.ПараметрыСканирования = ШтрихкодированиеИСКлиент.ПараметрыСканирования(ЭтотОбъект,,ПараметрыОткрытия.ВидПродукции);
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ТоварыНоменклатураПриИзмененииЗавершение", ЭтотОбъект, ДанныеСтрокиТаблицы);
		ШтрихкодированиеИСКлиент.ОткрытьФормуСчитыванияКодаМаркировки(ЭтотОбъект, ПараметрыОткрытия, ОповещениеОЗавершении);
	Иначе
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзмененииЗавершение(ДанныеКодаМаркировки, ДанныеСтрокиТаблицы) Экспорт
	
	ТекущиеДанные	= Элементы.Товары.ТекущиеДанные;
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
	Если ДанныеКодаМаркировки <> Неопределено 
		И ДанныеКодаМаркировки.МаркируемаяПродукция Тогда
		
		ТекущиеДанные.Количество       = 1;
		ТекущиеДанные.Штрихкод         = ДанныеКодаМаркировки.Штрихкод;
		ТекущиеДанные.АкцизнаяМарка    = ДанныеКодаМаркировки.ШтрихкодУпаковки;
		ТекущиеДанные.ШтрихкодУпаковки = ДанныеКодаМаркировки.ШтрихкодУпаковки;
		
		ТекущиеДанные.ИндексАкцизнойМарки = ?(ЗначениеЗаполнено(ТекущиеДанные.АкцизнаяМарка), 1, 0);
		
		ПриИзмененииКоличествоЦена("Товары");
	КонецЕсли;
	
КонецПроцедуры 
 

&НаКлиенте
Процедура ТоварыНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ДанныеВыбораНоменклатура(Текст, ПараметрыПолученияДанных);
		
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если НЕ ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ДанныеВыбораНоменклатура(Текст, ПараметрыПолученияДанных);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	ПриИзмененииКоличествоЦена("Товары");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	ПриИзмененииКоличествоЦена("Товары");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	ПриИзмененииСумма("Товары");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	ПриИзмененииСтавкаНДС("Товары");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	ПриИзмененииСуммаНДС("Товары");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Копирование И ИспользоватьКонтрольныеЗнакиГИСМ Тогда
		Элемент.ТекущиеДанные.КиЗ_ГИСМ = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	Для каждого ИдентификаторСтроки Из Элементы.Товары.ВыделенныеСтроки Цикл
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ТекущаяСтрока = Неопределено 
			ИЛИ НЕ ЗначениеЗаполнено(ТекущаяСтрока.АкцизнаяМарка) Тогда
		
			Продолжить;
		КонецЕсли; 
		
		ТоварыПередУдалениемНаСервере(КэшМаркируемойПродукции, ТекущаяСтрока.АкцизнаяМарка);
	КонецЦикла; 
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыПередУдалениемНаСервере(КэшМаркируемойПродукции, АкцизнаяМарка)
	Если ЭтоАдресВременногоХранилища(КэшМаркируемойПродукции) Тогда
		ДанныеКэша = ПолучитьИзВременногоХранилища(КэшМаркируемойПродукции);
		Если ДанныеКэша.ОбработанныеКодыМаркировки[АкцизнаяМарка.ЗначениеШтрихкода] <> Неопределено Тогда
			ДанныеКэша.ОбработанныеКодыМаркировки.Удалить(АкцизнаяМарка.ЗначениеШтрихкода);
			ПоместитьВоВременноеХранилище(ДанныеКэша, КэшМаркируемойПродукции);
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАгентскиеУслуги

&НаКлиенте
Процедура АгентскиеУслугиПослеУдаления(Элемент)
	Если Объект.АгентскиеУслуги.Количество() = 0 Тогда
	
		Объект.СчетКасса = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.КассаОрганизации");
		УправлениеФормой(ЭтотОбъект);
		УстановитьЗаголовокФормы(ЭтотОбъект);
	
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиПриИзменении(Элемент)
	ОбновитьИтоги(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НЕ ОтменаРедактирования Тогда
		
		ТекущиеДанные = Элементы.АгентскиеУслуги.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено 
			И ЗначениеЗаполнено(ТекущиеДанные.ДоговорКонтрагента) Тогда
		
			ПроверитьУстановитьСчетКассы(ТекущиеДанные.ДоговорКонтрагента);
		КонецЕсли; 
	
		Если НоваяСтрока Тогда
			ОбновитьИтоги(ЭтаФорма);
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиНоменклатураПриИзменении(Элемент)
	ТекущиеДанные = Элементы.АгентскиеУслуги.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Содержание, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, Всего");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, ТипЦен, СуммаВключаетНДС, ДокументБезНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтаФорма);
	
	АгентскиеУслугиНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиСодержаниеПриИзменении(Элемент)
	ТекущиеДанные = Элементы.АгентскиеУслуги.ТекущиеДанные;
	РаботаСНоменклатуройКлиент.СодержаниеПриИзменении(ТекущиеДанные, ТекущаяДатаДокумента);
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиКоличествоПриИзменении(Элемент)
	ПриИзмененииКоличествоЦена("АгентскиеУслуги");
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиЦенаПриИзменении(Элемент)
	ПриИзмененииКоличествоЦена("АгентскиеУслуги");
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиСуммаПриИзменении(Элемент)
	ПриИзмененииСумма("АгентскиеУслуги");
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиСтавкаНДСПриИзменении(Элемент)
	ПриИзмененииСтавкаНДС("АгентскиеУслуги");
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиСуммаНДСПриИзменении(Элемент)

	ПриИзмененииСуммаНДС("АгентскиеУслуги");

КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиКонтрагентПриИзменении(Элемент)

	ДанныеСтрокаТаблицы = Новый Структура("Контрагент, ДоговорКонтрагента, ВидОперации");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, Элементы.АгентскиеУслуги.ТекущиеДанные);

	ПараметрыОбъекта = Новый Структура("Организация");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);

	АгентскиеУслугиКонтрагентПриИзмененииНаСервере(ДанныеСтрокаТаблицы, ПараметрыОбъекта);

	ЗаполнитьЗначенияСвойств(Элементы.АгентскиеУслуги.ТекущиеДанные, ДанныеСтрокаТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	МассивПараметровВыбора = Новый Массив(Элементы.АгентскиеУслугиДоговорКонтрагента.ПараметрыВыбора);
	
	Индекс = МассивПараметровВыбора.Количество()-1;
	
	Пока Индекс >= 0 Цикл
		Если МассивПараметровВыбора[Индекс].Имя = "Отбор.ПлатежныйАгент" Тогда
			МассивПараметровВыбора.Удалить(Индекс)
		КонецЕсли; 
		
		Индекс = Индекс -1;
	КонецЦикла; 
	
	// Если это единственная строка в агентских услугах, то признак платежного агента может быть любым.
	Если Объект.Товары.Количество() <> 0 
		ИЛИ Объект.ПодарочныеСертификаты.Количество() <> 0 
		ИЛИ Объект.АгентскиеУслуги.Количество() <> 1 Тогда
	
		ПлатежныйАгент = (Объект.СчетКасса = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.КассаПлатежногоАгента"));
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ПлатежныйАгент", ПлатежныйАгент));
		
	КонецЕсли;
	
	Элементы.АгентскиеУслугиДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодарочныеСертификаты

&НаКлиенте
Процедура ПодарочныеСертификатыПриИзменении(Элемент)
	ОбновитьИтоги(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПодарочныеСертификатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НоваяСтрока И НЕ ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПодарочныеСертификатыВидОплатыОткрытие(Элемент, СтандартнаяОбработка)
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	
	Если ТекущиеДанные.ВидОплаты.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПередачи = Новый Структура;
	
	ДопустимыеТипыОплаты = Новый Массив;
	
	ДопустимыеТипыОплаты.Добавить(ПредопределенноеЗначение("Перечисление.ТипыОплат.ПодарочныйСертификатСобственный"));
	ДопустимыеТипыОплаты.Добавить(ПредопределенноеЗначение("Перечисление.ТипыОплат.ПодарочныйСертификатСторонний"));
	
	ПараметрыПередачи.Вставить("ТипОплатыДоступныеЗначения", ДопустимыеТипыОплаты);
	ПараметрыПередачи.Вставить("Ключ", ТекущиеДанные.ВидОплаты);
	
	ОткрытьФорму("Справочник.ВидыОплатОрганизаций.ФормаОбъекта", ПараметрыПередачи, ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОплата

&НаКлиенте
Процедура ОплатаВидОплатыОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПередачи = Новый Структура;
	
	ДопустимыеТипыОплаты = Новый Массив;
	
	ДопустимыеТипыОплаты.Добавить(ПредопределенноеЗначение("Перечисление.ТипыОплат.ПлатежнаяКарта"));
	ДопустимыеТипыОплаты.Добавить(ПредопределенноеЗначение("Перечисление.ТипыОплат.БанковскийКредит"));
	
	Если ИспользуютсяПодарочныеСертификаты Тогда
	
		ДопустимыеТипыОплаты.Добавить(ПредопределенноеЗначение("Перечисление.ТипыОплат.ПодарочныйСертификатСобственный"));
		ДопустимыеТипыОплаты.Добавить(ПредопределенноеЗначение("Перечисление.ТипыОплат.ПодарочныйСертификатСторонний"));
		
	КонецЕсли;
	
	ПараметрыПередачи.Вставить("ТипОплатыДоступныеЗначения", ДопустимыеТипыОплаты);
	ПараметрыПередачи.Вставить("Ключ", Элемент.Родитель.ТекущиеДанные.ВидОплаты);
	
	ОткрытьФорму("Справочник.ВидыОплатОрганизаций.ФормаОбъекта", ПараметрыПередачи, ЭтаФорма);
	
КонецПроцедуры


#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти 

#Область ПечатьЧека

&НаСервере
Функция ТекстЗапросаТаблицаТоваров(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВТ_Сертификаты",                  НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_Товары",                       НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_АгентскиеУслуги",              НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_ТаблицаОплата",                НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_ТаблицаЧека",                  НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаДокумента",                НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаОплат",                    НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаКомитенты",                НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаДоговораПлатежногоАгента", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаСертификаты.ВидОплаты КАК ВидОплаты,
	|	ТаблицаСертификаты.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТ_ТаблицаСертификаты
	|ИЗ
	|	&ТаблицаСертификаты КАК ТаблицаСертификаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.АкцизнаяМарка КАК АкцизнаяМарка,
	|	ТаблицаТовары.Штрихкод КАК Штрихкод,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС
	|ПОМЕСТИТЬ ВТ_ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУслуги.Номенклатура КАК Номенклатура,
	|	ТаблицаУслуги.Содержание КАК Содержание,
	|	ВЫБОР
	|		КОГДА ТаблицаУслуги.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаУслуги.Количество
	|	КОНЕЦ КАК Количество,
	|	ТаблицаУслуги.Цена КАК Цена,
	|	ТаблицаУслуги.Сумма КАК Сумма,
	|	ТаблицаУслуги.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаУслуги.СуммаНДС КАК СуммаНДС,
	|	ТаблицаУслуги.Контрагент КАК Контрагент,
	|	ТаблицаУслуги.ДоговорКонтрагента КАК ДоговорКонтрагента
	|ПОМЕСТИТЬ ВТ_АгентскиеУслуги
	|ИЗ
	|	&ТаблицаУслуги КАК ТаблицаУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОплата.ВидОплаты КАК ВидОплаты,
	|	ТаблицаОплата.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТ_ТаблицаОплата
	|ИЗ
	|	&ТаблицаОплата КАК ТаблицаОплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	NULL КАК Содержание,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СправочникНоменклатура.Услуга, ИСТИНА)
	|				И ТаблицаТовары.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаТовары.Количество
	|	КОНЕЦ КАК Количество,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СправочникНоменклатура.Услуга, ИСТИНА)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПризнакиПредметаРасчета.Услуга)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПризнакиПредметаРасчета.Товар)
	|	КОНЕЦ КАК ПризнакПредметаРасчета,
	|	ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой) КАК ПризнакСпособаРасчета,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК ДоговорПлатежногоАгента,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	|	ЕСТЬNULL(ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода, ТаблицаТовары.Штрихкод) КАК Штрихкод
	|ПОМЕСТИТЬ ВТ_ТаблицаЧека
	|ИЗ
	|	ВТ_ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО ТаблицаТовары.АкцизнаяМарка = ШтрихкодыУпаковокТоваров.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаУслуги.Номенклатура,
	|	ТаблицаУслуги.Содержание,
	|	ТаблицаУслуги.Количество,
	|	ТаблицаУслуги.Цена,
	|	ТаблицаУслуги.Сумма,
	|	ТаблицаУслуги.СтавкаНДС,
	|	ТаблицаУслуги.СуммаНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ПризнакиПредметаРасчета.Услуга),
	|	ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой),
	|	ТаблицаУслуги.ДоговорКонтрагента,
	|	ТаблицаУслуги.Контрагент,
	|	""""
	|ИЗ
	|	ВТ_АгентскиеУслуги КАК ТаблицаУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ТаблицаУслуги.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|	ВидыОплатОрганизаций.Наименование,
	|	1,
	|	ТаблицаСертификаты.Сумма,
	|	ТаблицаСертификаты.Сумма,
	|	ВЫБОР
	|		КОГДА &ДокументБезНДС
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|		ИНАЧЕ &РасчетнаяСтавкаНДСПоУмолчанию
	|	КОНЕЦ,
	|	0,
	|	ЗНАЧЕНИЕ(Перечисление.ПризнакиПредметаРасчета.ПлатежВыплата),
	|	ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.Аванс),
	|	ВЫБОР
	|		КОГДА ВидыОплатОрганизаций.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСторонний)
	|			ТОГДА ДоговорыКонтрагентов.Ссылка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВидыОплатОрганизаций.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСторонний)
	|			ТОГДА ДоговорыКонтрагентов.Владелец
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ,
	|	""""
	|ИЗ
	|	ВТ_ТаблицаСертификаты КАК ТаблицаСертификаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыОплатОрганизаций КАК ВидыОплатОрганизаций
	|		ПО ТаблицаСертификаты.ВидОплаты = ВидыОплатОрганизаций.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО (ВидыОплатОрганизаций.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаЧека.Содержание, СправочникНоменклатура.НаименованиеПолное) КАК Наименование,
	|	ЕСТЬNULL(СправочникНоменклатура.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
	|	ЕСТЬNULL(СправочникНоменклатура.ТабачнаяПродукция, ЛОЖЬ) КАК ЭтоТабачнаяПродукция,
	|	ЕСТЬNULL(СправочникНоменклатура.Артикул, """") КАК Артикул,
	|	ТаблицаЧека.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА &СуммаВключаетНДС
	|			ТОГДА ТаблицаЧека.Цена
	|		КОГДА ТаблицаЧека.Количество <> 0
	|			ТОГДА ВЫРАЗИТЬ((ТаблицаЧека.Сумма + ТаблицаЧека.СуммаНДС) / ТаблицаЧека.Количество КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ ТаблицаЧека.Сумма + ТаблицаЧека.СуммаНДС
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА &СуммаВключаетНДС
	|			ТОГДА ТаблицаЧека.Сумма
	|		ИНАЧЕ ТаблицаЧека.Сумма + ТаблицаЧека.СуммаНДС
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА &ЭтоВерсия105
	|				И ТаблицаЧека.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
	|			ТОГДА 120
	|		КОГДА ТаблицаЧека.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	|				ИЛИ ТаблицаЧека.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
	|			ТОГДА 20
	|		КОГДА &ЭтоВерсия105
	|				И ТаблицаЧека.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	|			ТОГДА 118
	|		КОГДА ТаблицаЧека.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|				ИЛИ ТаблицаЧека.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	|			ТОГДА 18
	|		КОГДА &ЭтоВерсия105
	|				И ТаблицаЧека.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	|			ТОГДА 110
	|		КОГДА ТаблицаЧека.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|				ИЛИ ТаблицаЧека.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	|			ТОГДА 10
	|		КОГДА ТаблицаЧека.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтавкаНДС,
	|	ТаблицаЧека.СуммаНДС КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА &ВыводитьПризнакСпособаРасчета
	|			ТОГДА ТаблицаЧека.ПризнакСпособаРасчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ПризнакСпособаРасчета,
	|	ВЫБОР
	|		КОГДА &ВыводитьПризнакПредметаРасчета
	|			ТОГДА ТаблицаЧека.ПризнакПредметаРасчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ПризнакПредметаРасчета,
	|	1 КАК НомерСекции,
	|	ТаблицаЧека.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента,
	|	ТаблицаЧека.Контрагент КАК Контрагент,
	|	ТаблицаЧека.Штрихкод КАК Штрихкод,
	|	ЕСТЬNULL(СправочникНоменклатура.КодНоменклатурнойКлассификацииККТ.Код, НЕОПРЕДЕЛЕНО) КАК КодВидаНоменклатурнойКлассификации
	|ИЗ
	|	ВТ_ТаблицаЧека КАК ТаблицаЧека
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаЧека.Номенклатура = СправочникНоменклатура.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР ВидыОплатОрганизаций.ТипОплаты
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОплат.Наличные)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Наличные)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСобственный)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Предоплата)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСторонний)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Предоплата)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Электронно)
	|	КОНЕЦ КАК ТипОплаты,
	|	СУММА(ТаблицаОплата.Сумма) КАК Сумма
	|ИЗ
	|	ВТ_ТаблицаОплата КАК ТаблицаОплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыОплатОрганизаций КАК ВидыОплатОрганизаций
	|		ПО (ВидыОплатОрганизаций.Ссылка = ТаблицаОплата.ВидОплаты)
	|ГДЕ
	|	ВидыОплатОрганизаций.ТипОплаты <> ЗНАЧЕНИЕ(Перечисление.ТипыОплат.Наличные)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР ВидыОплатОрганизаций.ТипОплаты
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОплат.Наличные)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Наличные)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСобственный)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Предоплата)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСторонний)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Предоплата)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Электронно)
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АгентскиеУслуги.Контрагент КАК Контрагент,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_АгентскиеУслуги.ДоговорКонтрагента) КАК КоличествоДоговоров
	|ИЗ
	|	ВТ_АгентскиеУслуги КАК ВТ_АгентскиеУслуги
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_АгентскиеУслуги.Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
	|	АгентскиеУслуги.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	АгентскиеУслуги.Контрагент КАК Контрагент
	|ИЗ
	|	ВТ_АгентскиеУслуги КАК АгентскиеУслуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО АгентскиеУслуги.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	ДоговорыКонтрагентов.ПлатежныйАгент";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
КонецФункции

&НаСервере
Функция ПодготовитьПараметрыПечатиЧека(ВерсияФормата, ИдентификаторУстройства)
	Запрос = Новый Запрос;
	
	ЭтоВерсия105 = НЕ ОбщегоНазначенияКлиентСервер.СравнитьВерсии("1.0.5.0", ВерсияФормата) > 0;
	
	ПараметрыУстройства = Новый Структура("ВыводитьПризнакПредметаРасчета, ВыводитьПризнакСпособаРасчета", Ложь, Ложь);
	Если ЗначениеЗаполнено(ИдентификаторУстройства) Тогда
		ПараметрыУстройства = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИдентификаторУстройства, "ВыводитьПризнакПредметаРасчета, ВыводитьПризнакСпособаРасчета");
	КонецЕсли; 
	
	
	Запрос.УстановитьПараметр("ТаблицаТовары",                  Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаУслуги",                  Объект.АгентскиеУслуги.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаСертификаты",             Объект.ПодарочныеСертификаты.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаОплата",                  Объект.Оплата.Выгрузить());
	Запрос.УстановитьПараметр("СуммаВключаетНДС",               Объект.СуммаВключаетНДС);
	Запрос.УстановитьПараметр("ДокументБезНДС",                 Объект.ДокументБезНДС);
	Запрос.УстановитьПараметр("ЭтоВерсия105",                   ЭтоВерсия105);
	Запрос.УстановитьПараметр("ВыводитьПризнакПредметаРасчета", ПараметрыУстройства.ВыводитьПризнакПредметаРасчета ИЛИ ЭтоВерсия105);
	Запрос.УстановитьПараметр("ВыводитьПризнакСпособаРасчета",  ПараметрыУстройства.ВыводитьПризнакСпособаРасчета ИЛИ ЭтоВерсия105);
	Запрос.УстановитьПараметр("РасчетнаяСтавкаНДСПоУмолчанию",  УчетНДСКлиентСервер.РасчетнаяСтавкаНДСПоУмолчанию(Объект.Дата));
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаТаблицаТоваров(НомераТаблиц);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ПараметрыПечатиЧека = Новый Структура;
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПечатиЧека.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПечатиЧека;
КонецФункции

&НаСервере
Функция СистемаНалогообложения()
	ПрименяетсяОсобыйПорядокНалогообложения = 
		УчетнаяПолитика.ПрименяетсяОсобыйПорядокНалогообложения(Объект.Организация, Объект.Дата) 
		ИЛИ (Объект.Товары.Количество()>0 И Объект.Товары[0].ОсобыйПорядок);
	
	НалоговыйРежим = Перечисления.ТипыСистемНалогообложенияККТ.ОСН;
	Если ПрименяетсяОсобыйПорядокНалогообложения Тогда
		НалоговыйРежим = ?(УчетнаяПолитика.ПлательщикЕНВД(Объект.Организация, Объект.Дата), Перечисления.ТипыСистемНалогообложенияККТ.ЕНВД, Перечисления.ТипыСистемНалогообложенияККТ.Патент);
	ИначеЕсли УчетнаяПолитика.ПрименяетсяУСНДоходы(Объект.Организация, Объект.Дата) Тогда
		НалоговыйРежим = Перечисления.ТипыСистемНалогообложенияККТ.УСНДоход;
	ИначеЕсли УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Объект.Организация, Объект.Дата) Тогда 
		НалоговыйРежим = Перечисления.ТипыСистемНалогообложенияККТ.УСНДоходРасход;
	КонецЕсли;
	
	Возврат НалоговыйРежим;
КонецФункции

&НаКлиенте
Процедура ПроверкаГотовностиККТЗавершение(РезультатПроверкиГотовности, ДополнительныеПараметры) Экспорт
	Перем ОписаниеОшибки, ВыходныеПараметры;
	
	ЭтоОнлайнККТ = ДополнительныеПараметры.ИдентификаторУстройства <> Неопределено И ДополнительныеПараметры.ТипУстройства = "ККТ";

	Если РезультатПроверкиГотовности.Результат Тогда
		РезультатПроверкиГотовности.Свойство("ВыходныеПараметры", ВыходныеПараметры);
		
		Если ЭтоОнлайнККТ Тогда
			СтатусПоследнейСмены = КассовыеСменыВызовСервера.СтатусПоследнейСмены(ДополнительныеПараметры.ИдентификаторУстройства);
		Иначе
			СтатусПоследнейСмены = Неопределено;
		КонецЕсли; 
		
		Если СтатусПоследнейСмены = Неопределено 
			ИЛИ (СтатусПоследнейСмены.Активна И СтатусПоследнейСмены.Открыта) Тогда
			
			ПараметрыОплаты = ДополнительныеПараметры.ПараметрыОплаты;
			Если ПараметрыОплаты.АдресТаблицыОплаты = Неопределено Тогда
				ПараметрыПечатиЧека = ПараметрыПечатиЧекаНаличныеКарта(ПараметрыОплаты, ДополнительныеПараметры.ИдентификаторУстройства, ДополнительныеПараметры.ВерсияФормата, ДополнительныеПараметры.АдресУстановкиККТ, ОписаниеОшибки);
			Иначе
				ПараметрыПечатиЧека = ПараметрыПечатиЧекаСложнаяОплата(ПараметрыОплаты, ДополнительныеПараметры.ИдентификаторУстройства, ДополнительныеПараметры.ВерсияФормата, ДополнительныеПараметры.АдресУстановкиККТ, ОписаниеОшибки);
			КонецЕсли;
		Иначе
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Кассовая смена %1.'"), ?(СтатусПоследнейСмены.Открыта, "истекла", "не открыта"));
		КонецЕсли;
	Иначе
		РезультатПроверкиГотовности.Свойство("ОписаниеОшибки", ОписаниеОшибки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ТекстСообщения = НСтр("ru = 'При подключении устройства произошла ошибка.
			|Чек не напечатан на фискальном устройстве.
			|Дополнительное описание:
			|%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ЭтоОнлайнККТ Тогда
		ФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(ПараметрыПечатиЧека, ДополнительныеПараметры.ИдентификаторУстройства);
	КонецЕсли;
	
	ЭтаФорма.Доступность = Ложь; // Блокируем интерфейс пользователя.
	
	Если ДополнительныеПараметры.Свойство("ИдентификаторУстройстваЭТ") Тогда
		ДополнительныеПараметры.Вставить("ИдентификаторУстройства", ДополнительныеПараметры.ИдентификаторУстройства);
		ДополнительныеПараметры.Вставить("ПараметрыПечатиЧека",     ПараметрыПечатиЧека);
		
		ОповещениеПриЗавершенииОперации = Новый ОписаниеОповещения("ОперацияПоПлатежнойКартеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ПараметрыОперации = МенеджерОборудованияКлиент.ПараметрыВыполненияЭквайринговойОперации();
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРозничнаяПродажа.Продажа") Тогда
			ПараметрыОперации.ТипТранзакции  = "AuthorizeSales";
		Иначе
			ПараметрыОперации.ТипТранзакции  = "AuthorizeRefund";
			ПараметрыОперации.СсылочныйНомер = ДополнительныеПараметры.ПараметрыОплаты.СсылочныйНомер;
			ПараметрыОперации.НомерКарты     = ДополнительныеПараметры.ПараметрыОплаты.НомерПлатежнойКарты;
			ПараметрыОперации.НомерЧекаЭТ    = ДополнительныеПараметры.ПараметрыОплаты.НомерЧекаЭТ;
		КонецЕсли;
		
		Если ВыходныеПараметры <> Неопределено Тогда
			
			НомерЧекаККМ = ВыходныеПараметры[1]+1;
		Иначе
			
			НомерЧекаККМ = НомерЧекаККМ(Объект.Организация, Объект.Склад, ДополнительныеПараметры.ИдентификаторУстройства, Объект.Дата);
		КонецЕсли; 
		
		ПараметрыОперации.СуммаОперации  = ДополнительныеПараметры.ОплатаКарта;
		ПараметрыОперации.НомерЧека      = Формат(НомерЧекаККМ, "ЧГ=0");
		
		МенеджерОборудованияКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(ОповещениеПриЗавершенииОперации, УникальныйИдентификатор, 
			ДополнительныеПараметры.ИдентификаторУстройстваЭТ, ДополнительныеПараметры.ИдентификаторУстройства, ПараметрыОперации);
	Иначе
		Если ДополнительныеПараметры.ИдентификаторУстройства <> Неопределено Тогда 
			ОповещениеПриЗавершенииПечатиЧека = Новый ОписаниеОповещения("ПечатьЧекаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			
			ЕстьАлкогольнаяПродукция = Ложь;
			Если ИспользуетсяРегистрацияРозничныхПродажВЕГАИС Тогда
				Для Каждого СтрокаТЧ Из Объект.Товары Цикл
					Если СтрокаТЧ.ЭтоАлкогольнаяПродукция И ЗначениеЗаполнено(СтрокаТЧ.АкцизнаяМарка) Тогда
						ЕстьАлкогольнаяПродукция = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ДополнительныеПараметрыОповещения = Новый Структура;
			ДополнительныеПараметрыОповещения.Вставить("ОписаниеОповещения",       ОповещениеПриЗавершенииПечатиЧека);
			ДополнительныеПараметрыОповещения.Вставить("ЕстьАлкогольнаяПродукция", ЕстьАлкогольнаяПродукция);
			ДополнительныеПараметрыОповещения.Вставить("АдресТорговогоОбъекта",    ПараметрыПечатиЧека.АдресМагазина);
			
			Оповещение_ПослеОткрытияЧека     = Новый ОписаниеОповещения("ПечатьЧека_ПослеОткрытияЧека",     ЭтотОбъект, ДополнительныеПараметрыОповещения);
			Оповещение_ПослеОшибкиПечатиЧека = Новый ОписаниеОповещения("ПечатьЧека_ПослеОшибкиПечатиЧека", ЭтотОбъект, ДополнительныеПараметрыОповещения);
			
				
	
			Если ЭтоЧекКоррекции Тогда
				
				ДанныеКоррекции = МенеджерОборудованияКлиентСервер.ПараметрыДанныеКоррекции();
				
				ДанныеКоррекции.ТипКоррекции      = 0;
				ДанныеКоррекции.НомерПредписания  = "0";
				ДанныеКоррекции.ОписаниеКоррекции = ДополнительныеПараметры.ПараметрыОплаты.ОснованиеКоррекции;
				ДанныеКоррекции.ДатаКоррекции     = Объект.Дата;
				
				ПараметрыЧекаКоррекции = МенеджерОборудованияКлиентСервер.ПараметрыОперацииЧекаКоррекции();
				
				ПараметрыЧекаКоррекции.КорректируемыйДокумент = Объект.Ссылка;
				ПараметрыЧекаКоррекции.НеприменениеККТ        = Ложь;
				
				ЗаполнитьЗначенияСвойств(ПараметрыЧекаКоррекции.ДанныеКоррекции, ДанныеКоррекции);
				ЗаполнитьЗначенияСвойств(ПараметрыЧекаКоррекции, ПараметрыПечатиЧека);
				
				МенеджерОборудованияКлиент.НачатьФормированиеЧекаКоррекцииНаФискальномУстройстве(
					ОповещениеПриЗавершенииПечатиЧека, 
					УникальныйИдентификатор, 
					ПараметрыЧекаКоррекции, 
					ДополнительныеПараметры.ИдентификаторУстройства
					);
			Иначе
				МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(
					ОповещениеПриЗавершенииПечатиЧека, 
					УникальныйИдентификатор, 
					ПараметрыПечатиЧека, 
					ДополнительныеПараметры.ИдентификаторУстройства,
					,
					Оповещение_ПослеОткрытияЧека,
					Оповещение_ПослеОшибкиПечатиЧека);

			КонецЕсли; 
				
		Иначе
			ПечатьЧекаЗавершение(Новый Структура("Результат", Истина), ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека_ПослеОткрытияЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ЕстьАлкогольнаяПродукция Тогда
		
		Записать();
		
		НомерСмены = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерСмены);
		Если НомерСмены = 0 Тогда
			НомерСмены = 1;
		КонецЕсли;
		
		НомерЧека = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерЧека);
		Если НомерЧека = 0 Тогда
			НомерЧека = 1;
		КонецЕсли;
		
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("НомерСмены",    НомерСмены);
		ПараметрыОперации.Вставить("НомерЧека",     НомерЧека);
		ПараметрыОперации.Вставить("АдресТорговогоОбъекта", ДополнительныеПараметры.АдресТорговогоОбъекта);
		ПараметрыОперации.Вставить("СерийныйНомер", "");
		Если ПараметрыВыполнения.Свойство("ЗаводскойНомерФН") И ЗначениеЗаполнено(ПараметрыВыполнения.ЗаводскойНомерФН) Тогда
			ПараметрыОперации.СерийныйНомер = ПараметрыВыполнения.ЗаводскойНомерФН;
		КонецЕсли;
		
		ИнтеграцияЕГАИСКлиент.ПередатьНемедленно(
			Объект.Ссылка,
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные"),
			ПараметрыОперации,
			Новый ОписаниеОповещения("ПослеПередачиЧекаЕГАИС", ЭтотОбъект, ПараметрыВыполнения));
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПродолжения, ПараметрыВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека_ПослеОшибкиПечатиЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ЕстьАлкогольнаяПродукция Тогда
		
		НомерСмены = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерСмены);
		Если НомерСмены = 0 Тогда
			НомерСмены = 1;
		КонецЕсли;
		
		НомерЧека = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерЧека);
		Если НомерЧека = 0 Тогда
			НомерЧека = 1;
		КонецЕсли;
		
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("НомерСмены",    НомерСмены);
		ПараметрыОперации.Вставить("НомерЧека",     НомерЧека + 1000000);
		ПараметрыОперации.Вставить("АдресТорговогоОбъекта", ДополнительныеПараметры.АдресТорговогоОбъекта);
		ПараметрыОперации.Вставить("СерийныйНомер", "");
		Если ПараметрыВыполнения.Свойство("ЗаводскойНомерФН") И ЗначениеЗаполнено(ПараметрыВыполнения.ЗаводскойНомерФН) Тогда
			ПараметрыОперации.СерийныйНомер = ПараметрыВыполнения.ЗаводскойНомерФН;
		КонецЕсли;
		
		ИнтеграцияЕГАИСКлиент.ПередатьНемедленно(
			Объект.Ссылка,
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию"),
			ПараметрыОперации,
			Новый ОписаниеОповещения("ПослеПередачиЧекаЕГАИС", ЭтотОбъект, ПараметрыВыполнения));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПередачиЧекаЕГАИС(Изменения, ПараметрыВыполнения) Экспорт
	
	ЕстьОшибки = (Изменения.Количество() <> 1);
	
	Ошибки = Новый Массив;
	Для Каждого ЭлементДанных Из Изменения Цикл
		Если ЗначениеЗаполнено(ЭлементДанных.ТекстОшибки) Тогда
			ЕстьОшибки = Истина;
			Ошибки.Добавить(ЭлементДанных.ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	Если Ошибки.Количество() > 0 Тогда
		Ошибки.Вставить(0, НСтр("ru = 'В процессе передачи данных в ЕГАИС возникли ошибки:'"));
	КонецЕсли;
	ОписаниеОшибки = СтрСоединить(Ошибки, Символы.ПС);
	
	ПараметрыВыполнения.ПродолжитьПечать = Не ЕстьОшибки;
	ПараметрыВыполнения.ОписаниеОшибки   = ОписаниеОшибки;
	
	ПараметрыВыполнения.Вставить("АдресЧека",   Изменения[0].ИдентификаторЗапроса);
	ПараметрыВыполнения.Вставить("ПодписьЧека", Изменения[0].Подпись);
	
	ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПродолжения, ПараметрыВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПараметрыЗавершение(ПараметрыФискальногоУстройства, ДополнительныеПараметры) Экспорт
	Перем ОписаниеОшибки;
	
	ДополнительныеПараметры.Вставить("АдресУстановкиККТ");
	ДополнительныеПараметры.Вставить("ВерсияФормата");
	
	Если ПараметрыФискальногоУстройства =  Неопределено Тогда
		// Принтер чеков эмулирует все атрибуты ФФД 1.1
		ДополнительныеПараметры.ВерсияФормата = ?(ДополнительныеПараметры.ТипУстройства = "ПринтерЧеков", "1.1.0.0", "1.0.0.0");
		
	ИначеЕсли НЕ ПараметрыФискальногоУстройства.Результат Тогда 
		ОписаниеОшибки = ПараметрыФискальногоУстройства.ОписаниеОшибки;
	Иначе
		ДополнительныеПараметры.ВерсияФормата = ПечатьФискальныхДокументовКлиент.ПолучитьВерсиюФФД(ПараметрыФискальногоУстройства.ВыходныеПараметры.ВерсияФФДФН, ПараметрыФискальногоУстройства.ВыходныеПараметры.ВерсияФФДККТ);
		
		ПараметрыФискальногоУстройства.ВыходныеПараметры.Свойство("АдресУстановкиККТ", ДополнительныеПараметры.АдресУстановкиККТ);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаГотовностиККТЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		МенеджерОборудованияКлиент.НачатьПолучениеТекущегоСостоянияФискальногоУстройства(ОписаниеОповещения, УникальныйИдентификатор, ДополнительныеПараметры.ИдентификаторУстройства, ДополнительныеПараметры.ТипУстройства);
		
		Возврат;
	КонецЕсли;
	
	ПроверкаГотовностиККТЗавершение(
		Новый Структура("Результат, ВыходныеПараметры, ОписаниеОшибки", НЕ ЗначениеЗаполнено(ОписаниеОшибки), Неопределено, ОписаниеОшибки), 
		ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыПечатиЧека(ПараметрыОплаты, ИдентификаторУстройства, ВерсияФормата, АдресУстановкиККТ, ОписаниеОшибки)
	Перем СведенияОКомитентах;
	
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Объект.Организация, Объект.Дата);
	
	ОбщиеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	ОбщиеПараметры.ИндивидуальныйРежимПодготовкиДанныхКПередачеВОФД = Истина;
	
	ЭтоВерсия110 = НЕ ОбщегоНазначенияКлиентСервер.СравнитьВерсии("1.1.0.0", ВерсияФормата) > 0;
	ЭтоВерсия105 = НЕ ОбщегоНазначенияКлиентСервер.СравнитьВерсии("1.0.5.0", ВерсияФормата) > 0;
	
	ОбщиеПараметры.ТипРасчета = ?(
		Объект.ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Продажа, 
		Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств, 
		Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств);
		
	ДанныеКассира = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛицаТекущегоПользователя(Объект.Организация, Объект.Дата);
	
	ОбщиеПараметры.Кассир    = ?(ДанныеКассира.Представление = Неопределено, НСтр("ru = 'Администратор'"), СокрЛП(СтрШаблон("%1 %2", Строка(ДанныеКассира.Должность), ДанныеКассира.Представление)));
	ОбщиеПараметры.КассирИНН = ДанныеКассира.ИНН;
	
	ОбщиеПараметры.Электронно = Ложь;
	
	ОбщиеПараметры.НомерКассы        = "00001";
	ОбщиеПараметры.НомерЧека         = НомерЧекаККМ(Объект.Организация, Объект.Склад, ИдентификаторУстройства, Объект.Дата);
	ОбщиеПараметры.НомерСмены        = 1;
	ОбщиеПараметры.ДокументОснование = РозничнаяПродажаСсылка;
	ОбщиеПараметры.Организация       = Объект.Организация;
	
	ОбщиеПараметры.ОрганизацияНазвание = СведенияОбОрганизации.НаименованиеДляПечатныхФорм;
	ОбщиеПараметры.ОрганизацияИНН      = СведенияОбОрганизации.ИНН;
	ОбщиеПараметры.ОрганизацияКПП      = СведенияОбОрганизации.КПП;
	ОбщиеПараметры.АдресМагазина       = ?(ЗначениеЗаполнено(АдресУстановкиККТ), АдресУстановкиККТ, СведенияОбОрганизации.ФактическийАдрес);
	
	ОбщиеПараметры.ОтправительEMail    = СведенияОбОрганизации.Email;
	
	НастройкиОтправкиЧеков = РегистрыСведений.ОборудованиеПоОрганизациям.Получить(Новый Структура("Оборудование", ИдентификаторУстройства));
	Если ЗначениеЗаполнено(ПараметрыОплаты.ПокупательEmail) Тогда
		ОбщиеПараметры.ПокупательEmail     = ПараметрыОплаты.ПокупательEmail;
		ОбщиеПараметры.Отправляет1СEmail   = НастройкиОтправкиЧеков.Отправляет1СEmail;
	ИначеЕсли ЗначениеЗаполнено(ПараметрыОплаты.ПокупательНомер) Тогда 
		ОбщиеПараметры.ПокупательНомер     = ПараметрыОплаты.ПокупательНомер;
		ОбщиеПараметры.Отправляет1СSMS     = НастройкиОтправкиЧеков.Отправляет1СSMS;
	КонецЕсли;
	
	ОбщиеПараметры.НаименованиеМагазина = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "Наименование");
	
	ОбщиеПараметры.СистемаНалогообложения = СистемаНалогообложения();
	
	ЕстьТовары = Объект.Товары.Количество() > 0;
	ЕстьСертификаты = Объект.ПодарочныеСертификаты.Количество() > 0;
	
	// Подготовка таблицы товаров
	ПараметрыПечатиЧека = ПодготовитьПараметрыПечатиЧека(ВерсияФормата, ИдентификаторУстройства);
	
	ТаблицаДокумента    = ПараметрыПечатиЧека.ТаблицаДокумента;
	
	ЕстьОбщийКомитентПоЧеку       = Неопределено;
	ЕстьОбщийПлатежныйАгентПоЧеку = Неопределено;
	
	ДоговорПлатежногоАгента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	ПлатежныйАгент          = Справочники.Контрагенты.ПустаяСсылка();
	КомитентПоЧеку          = ПечатьФискальныхДокументов.НовыйСведенияОКомитенте();
	
	СписокДоговоровПлатежногоАгента = ПараметрыПечатиЧека.ТаблицаДоговораПлатежногоАгента.ВыгрузитьКолонку("ДоговорКонтрагента");
	
	КоличествоДоговоровКомиссииВЧеке    = ПараметрыПечатиЧека.ТаблицаКомитенты.Итог("КоличествоДоговоров");
	КоличествоДоговоровПлатежногоАгента = СписокДоговоровПлатежногоАгента.Количество();
	
	Если ЭтоВерсия105 Тогда
		Если ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов") Тогда 
			ПараметрыОбъекта = Новый Структура("Организация, Дата");
		
			ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
			
			СписокНоменклатуры = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаДокумента, "Номенклатура", Истина);
			
			СведенияОСпискеНоменклатуры = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(СписокНоменклатуры, ПараметрыОбъекта, Истина, Ложь);
			
			МассивТоваровНаКомиссии = Новый Массив;
			Для каждого СведенияОНоменклатуре Из СведенияОСпискеНоменклатуры Цикл
				Если СведенияОНоменклатуре.Значение.Комиссионный  Тогда
					МассивТоваровНаКомиссии.Добавить(СведенияОНоменклатуре.Ключ);
				КонецЕсли;
			КонецЦикла;
			
			СведенияОКомитентах = ПечатьФискальныхДокументов.ПолучитьСведенияОКомитентах(МассивТоваровНаКомиссии, ПараметрыОбъекта.Организация, ПараметрыОбъекта.Дата);
			
		КонецЕсли;
	ИначеЕсли (КоличествоДоговоровПлатежногоАгента > 1 
			ИЛИ (КоличествоДоговоровПлатежногоАгента = 1 И (ЕстьТовары ИЛИ  КоличествоДоговоровКомиссииВЧеке > 1))) Тогда
			
		ТекстСообщения = НСтр("ru = 'Для версии формата фискальных данных %1 возможен лишь один договор платежного агента в чеке'");
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВерсияФормата);
		Возврат Неопределено;
	КонецЕсли;
	
	
	Для каждого СтрокаТовары Из ТаблицаДокумента Цикл
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
		
		ЗаполнитьЗначенияСвойств(СтрокаПозицииЧека, СтрокаТовары);
		
		Если СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Товар 
			И (СтрокаТовары.ЭтоТабачнаяПродукция ИЛИ Справочники.Номенклатура.ЭтоМаркируемаяАлкогольнаяПродукция(СтрокаТовары.Номенклатура)) Тогда
			
			СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТовар;
		КонецЕсли; 
		
		СтрокаПозицииЧека.ЦенаСоСкидками    = СтрокаПозицииЧека.Цена;
		СтрокаПозицииЧека.НомерСтрокиТовара = ОбщиеПараметры.ПозицииЧека.Количество()+1;
		
		Если ЗначениеЗаполнено(СтрокаТовары.ДоговорПлатежногоАгента) Тогда
			// Договор платежного агента - общего комитента по чеку указать нельзя.
			ЕстьОбщийКомитентПоЧеку = Ложь;
			
			РеквизитыАгента = ПечатьФискальныхДокументов.РеквизитыПлатежногоАгента(СтрокаТовары.ДоговорПлатежногоАгента, СтрокаТовары.Контрагент, Объект.Дата);
			ЗаполнитьЗначенияСвойств(СтрокаПозицииЧека, РеквизитыАгента, "ДанныеАгента, ДанныеПоставщика, ПризнакАгентаПоПредметуРасчета");
			Если ЕстьОбщийПлатежныйАгентПоЧеку = Неопределено Тогда
				
				// Общего платежного агента нет и никогда не было
				ДоговорПлатежногоАгента       = СтрокаТовары.ДоговорПлатежногоАгента;
				ПлатежныйАгент                = СтрокаТовары.Контрагент;
				ЕстьОбщийПлатежныйАгентПоЧеку = Истина;
				
			ИначеЕсли ЕстьОбщийПлатежныйАгентПоЧеку = Истина
				И ДоговорПлатежногоАгента <> СтрокаТовары.ДоговорПлатежногоАгента Тогда
				
				// Платежный агент по текущей строке не равен общему платежному агента
				ЕстьОбщийПлатежныйАгентПоЧеку = Ложь;
			КонецЕсли; 
		ИначеЕсли ЗначениеЗаполнено(СтрокаТовары.Контрагент) Тогда 
			// Комиссионная услуга
			ЕстьОбщийПлатежныйАгентПоЧеку = Ложь;
			СведенияОКомитенте = ПечатьФискальныхДокументов.СведенияОКонтрагенте(СтрокаТовары.Контрагент, Объект.Дата);
			
			СтрокаПозицииЧека.ПризнакАгентаПоПредметуРасчета = Перечисления.ПризнакиАгента.Комиссионер;
			ЗаполнитьЗначенияСвойств(СтрокаПозицииЧека.ДанныеПоставщика, СведенияОКомитенте);
			
			Если ЕстьОбщийКомитентПоЧеку = Неопределено Тогда
				
				// Общего комитента нет и никогда не было
				КомитентПоЧеку          = СведенияОКомитенте;
				ЕстьОбщийКомитентПоЧеку = Истина;
				
			ИначеЕсли ЕстьОбщийКомитентПоЧеку = Истина 
				И СведенияОКомитенте.Контрагент <> КомитентПоЧеку.Контрагент Тогда 
				
				// Комитент по строке не равен общему комитенту по чеку
				ЕстьОбщийКомитентПоЧеку = Ложь;
			КонецЕсли; 
		ИначеЕсли ЗначениеЗаполнено(СтрокаТовары.Номенклатура) И СведенияОКомитентах <> Неопределено Тогда
			ЕстьОбщийПлатежныйАгентПоЧеку = Ложь;
			
			СведенияОКомитенте = СведенияОКомитентах[СтрокаТовары.Номенклатура];
			Если СведенияОКомитенте <> Неопределено Тогда
				// Комиссионный товар
				СтрокаПозицииЧека.ПризнакАгентаПоПредметуРасчета = Перечисления.ПризнакиАгента.Комиссионер;
				ЗаполнитьЗначенияСвойств(СтрокаПозицииЧека.ДанныеПоставщика, СведенияОКомитенте);
				
				Если ЕстьОбщийКомитентПоЧеку = Неопределено Тогда
					
					// Общего комитента нет и никогда не было
					КомитентПоЧеку          = СведенияОКомитенте;
					ЕстьОбщийКомитентПоЧеку = Истина;
					
				ИначеЕсли ЕстьОбщийКомитентПоЧеку = Истина 
					И СведенияОКомитенте.Контрагент <> КомитентПоЧеку.Контрагент Тогда 
					
					// Комитент по строке не равен общему комитенту по чеку
					ЕстьОбщийКомитентПоЧеку = Ложь;
				КонецЕсли; 
			Иначе
				// Некомиссионный товар или услуга - общего комитента по чеку указать нельзя.
				ЕстьОбщийКомитентПоЧеку = Ложь;
			КонецЕсли; 
		КонецЕсли; 
		
		ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
	КонецЦикла;
	
	// Устанавливаем общего платежного агента по чеку
	Если ЕстьОбщийПлатежныйАгентПоЧеку = Истина Тогда
		СтруктураРеквизитов = ПечатьФискальныхДокументов.РеквизитыПлатежногоАгента(ДоговорПлатежногоАгента, ПлатежныйАгент, Объект.Дата);
		ЗаполнитьЗначенияСвойств(ОбщиеПараметры, СтруктураРеквизитов, "ДанныеАгента, ДанныеПоставщика, ПризнакАгента");
	ИначеЕсли ЕстьОбщийКомитентПоЧеку = Истина Тогда 
		ОбщиеПараметры.ПризнакАгента = Перечисления.ПризнакиАгента.Комиссионер;
		ЗаполнитьЗначенияСвойств(ОбщиеПараметры.ДанныеПоставщика, КомитентПоЧеку);
	КонецЕсли; 
	
	ОплатыПоДокументу = ПараметрыПечатиЧека.ТаблицаОплат;
	
	Если ПараметрыОплаты.ОплатаНаличные > 0 Тогда
		СтрокаОплаты = ОплатыПоДокументу.Добавить();
		СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные;
		СтрокаОплаты.Сумма = ПараметрыОплаты.ОплатаНаличные;
	КонецЕсли;
	
	Для каждого СтрокаОплатыПоДокументу Из ОплатыПоДокументу Цикл
		СтрокаОплаты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаОплатыПоДокументу);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЦикла;
	
	Возврат ОбщиеПараметры;
КонецФункции

&НаСервере
Функция ПараметрыПечатиЧекаНаличныеКарта(ПараметрыОплаты, ИдентификаторУстройства, ВерсияФормата, АдресУстановкиККТ, ОписаниеОшибки)
	
	Возврат ПараметрыПечатиЧека(ПараметрыОплаты, ИдентификаторУстройства, ВерсияФормата, АдресУстановкиККТ, ОписаниеОшибки);
	
КонецФункции

&НаСервере
Функция ПараметрыПечатиЧекаСложнаяОплата(ПараметрыОплаты, ИдентификаторУстройства, ВерсияФормата, АдресУстановкиККТ, ОписаниеОшибки)

	ТаблицаОплата = ПолучитьИзВременногоХранилища(ПараметрыОплаты.АдресТаблицыОплаты);
	
	Объект.Оплата.Загрузить(ТаблицаОплата);
	
	УдалитьИзВременногоХранилища(ПараметрыОплаты.АдресТаблицыОплаты);
	
	Возврат ПараметрыПечатиЧекаНаличныеКарта(ПараметрыОплаты, ИдентификаторУстройства, ВерсияФормата, АдресУстановкиККТ, ОписаниеОшибки);

КонецФункции

&НаСервере
Функция СписокОборудованияПечатьЧека(РабочееМесто)
	
	МассивТиповОборудования = Новый Массив;
	МассивТиповОборудования.Добавить(ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ФискальныйРегистратор"));
	МассивТиповОборудования.Добавить(ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ПринтерЧеков"));
	МассивТиповОборудования.Добавить(ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ККТ"));
	
	Возврат СписокОборудованияПоТипу(МассивТиповОборудования, РабочееМесто);

КонецФункции

&НаСервере
Функция СписокОборудованияПлатежнаяКарта(РабочееМесто)

	МассивТиповОборудования = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал"));
	
	Возврат СписокОборудованияПоТипу(МассивТиповОборудования, РабочееМесто);

КонецФункции

&НаСервере
Функция СписокОборудованияПоТипу(МассивТиповОборудования, РабочееМесто)
	
	Если НЕ ИспользуетсяФискальныйРегистратор ИЛИ РабочееМесто = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	ПодключаемоеОборудование.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОборудованиеПоОрганизациям КАК ОборудованиеПоОрганизациям
	|		ПО ПодключаемоеОборудование.Ссылка = ОборудованиеПоОрганизациям.Оборудование
	|ГДЕ
	|	ПодключаемоеОборудование.Организация = &Организация
	|	И (ОборудованиеПоОрганизациям.Склад В (&Склады)
	|			ИЛИ ОборудованиеПоОрганизациям.Склад ЕСТЬ NULL)
	|	И ПодключаемоеОборудование.ТипОборудования В(&ТипОборудования)
	|	И ПодключаемоеОборудование.РабочееМесто = &РабочееМесто
	|	И НЕ ПодключаемоеОборудование.ПометкаУдаления
	|	И ПодключаемоеОборудование.УстройствоИспользуется";
	
	МассивСкладов = Новый Массив;
	МассивСкладов.Добавить(Объект.Склад);
	МассивСкладов.Добавить(ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка"));
	
	Запрос.УстановитьПараметр("Организация",     Объект.Организация);
	Запрос.УстановитьПараметр("Склады",          МассивСкладов);
	Запрос.УстановитьПараметр("ТипОборудования", МассивТиповОборудования);
	Запрос.УстановитьПараметр("РабочееМесто",    РабочееМесто);

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

&НаСервереБезКонтекста
Функция ВидыОплатПлатежнойКартой(Организация)
	
	Возврат Справочники.ВидыОплатОрганизаций.ВидыОплатПлатежнойКартой(Организация);
	
КонецФункции

&НаКлиенте
Процедура ПринятьОплатуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И ТипЗнч(Результат) = Тип("Структура") Тогда
		ПараметрыОповещения = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Результат);
		ПараметрыОповещения.Вставить("СписокОборудования", ДополнительныеПараметры.СписокОборудованияПечатьЧека);
		Если Результат.ОплатаКарта <> 0 Тогда
			ДанныеПоВидамОплат = ВидыОплатПлатежнойКартой(Объект.Организация);
			Если ЗначениеЗаполнено(ДанныеПоВидамОплат.ВидОплатыПоУмолчанию) И Не ДанныеПоВидамОплат.ТребуетсяВыбратьВидОплаты Тогда
				ОплатаКартойЗавершение(ДанныеПоВидамОплат.ВидОплатыПоУмолчанию, ПараметрыОповещения);
			Иначе
				ОтборВидыОплат = Новый Структура("Организация, ТипОплаты, ПометкаУдаления", Объект.Организация, ПредопределенноеЗначение("Перечисление.ТипыОплат.ПлатежнаяКарта"), Ложь);
				ЗаголовокФормыВыбора = НСтр("ru = 'Выберите вид оплаты'");
				
				ОповещениеПриЗавершенииВыбора = Новый ОписаниеОповещения("ОплатаКартойЗавершение", ЭтотОбъект, ПараметрыОповещения);
				
				ПараметрыОткрытияФормы = Новый Структура("Отбор, Заголовок", ОтборВидыОплат, ЗаголовокФормыВыбора);
				ОткрытьФорму("Справочник.ВидыОплатОрганизаций.ФормаВыбора", ПараметрыОткрытияФормы, ЭтаФорма, УникальныйИдентификатор, , ,ОповещениеПриЗавершенииВыбора);
			КонецЕсли;
		Иначе
			НапечататьЧек(ПараметрыОповещения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаКартойЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено  Тогда
		Если ЗначениеЗаполнено(Результат) Тогда
			Объект.Оплата.Очистить();
			СтрокаОплата = Объект.Оплата.Добавить();
			СтрокаОплата.ВидОплаты = Результат;
			СтрокаОплата.Сумма = ДополнительныеПараметры.ОплатаКарта;
		КонецЕсли;
		
		Если НЕ ЭтоЧекКоррекции Тогда
			ИдентификаторУстройстваЭТ = ИдентификаторУстройстваЭТ(Результат);
			
			Если ЗначениеЗаполнено(ИдентификаторУстройстваЭТ) Тогда
				ДополнительныеПараметры.Вставить("ИдентификаторУстройстваЭТ", ИдентификаторУстройстваЭТ);
			КонецЕсли; 
		КонецЕсли; 
		
		НапечататьЧек(ДополнительныеПараметры);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧек(ПараметрыОплаты)
	
	ПараметрыОповещения = Новый Структура("ПараметрыОплаты , ПечататьТоварныйЧек, ОплатаКарта", 
		ПараметрыОплаты , ПараметрыОплаты.ПечататьТоварныйЧек, ПараметрыОплаты.ОплатаКарта);
		
	// Для чеков коррекции не используем эквайринговый терминал
	Если ПараметрыОплаты.Свойство("ИдентификаторУстройстваЭТ") Тогда
		ПараметрыОповещения.Вставить("ИдентификаторУстройстваЭТ", ПараметрыОплаты.ИдентификаторУстройстваЭТ);
	КонецЕсли;
	
	СписокОборудования = ПараметрыОплаты.СписокОборудования;
	
	Если СписокОборудования.Количество() = 1 Тогда
		
		ВыбратьУстройствоЗавершение(СписокОборудования[0], ПараметрыОповещения);
		
	ИначеЕсли СписокОборудования.Количество() > 0 Тогда
		ТипыОборудования = Новый Массив;
		ТипыОборудования.Добавить(ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ФискальныйРегистратор"));
		ТипыОборудования.Добавить(ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ПринтерЧеков"));
		ТипыОборудования.Добавить(ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ККТ"));
		
		МассивСкладов = Новый Массив;
		МассивСкладов.Добавить(ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка"));
		МассивСкладов.Добавить(Объект.Склад);
		
		СтруктураОтбора = Новый Структура("Организация, Склад, ТипОборудования, УстройствоИспользуется", Объект.Организация, МассивСкладов, ТипыОборудования, Истина);
		
		ПараметрыФормыВыбора = Новый Структура("Отбор, Заголовок", СтруктураОтбора, НСтр("ru='Выберите фискальный регистратор (принтер чеков)'", "ru") );
		
		ОповещениеПриЗавершенииВыбора = Новый ОписаниеОповещения("ВыбратьУстройствоЗавершение", ЭтотОбъект, ПараметрыОповещения);
		
		ОткрытьФорму("Справочник.ПодключаемоеОборудование.Форма.ФормаВыбораИзСписка", ПараметрыФормыВыбора,ЭтаФорма,УникальныйИдентификатор,,,ОповещениеПриЗавершенииВыбора,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ВыбратьУстройствоЗавершение(Неопределено, ПараметрыОповещения);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ИдентификаторУстройстваЭТ(ВидОплатыОрганизации)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидОплатыОрганизации, "ПодключаемоеОборудование");
	
КонецФункции

&НаКлиенте
Процедура ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	ТипУстройства = "";
	Если ЗначениеЗаполнено(ИдентификаторУстройства) Тогда
		ДанныеУстройства = МенеджерОборудованияКлиентПовтИсп.ПолучитьДанныеУстройства(ИдентификаторУстройства);
		ТипУстройства    = ?(ДанныеУстройства.Свойство("ТипОборудованияИмя"), ДанныеУстройства.ТипОборудованияИмя, "ККТ");
	КонецЕсли;
	
	Параметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	Параметры.Вставить("ТипУстройства", ТипУстройства);
	
	Если ТипУстройства = "ККТ" Тогда
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПолучитьПараметрыЗавершение", ЭтотОбъект, Параметры);
		МенеджерОборудованияКлиент.НачатьПолучениеПараметровФискальногоУстройства(ОповещениеПриЗавершении, УникальныйИдентификатор , ИдентификаторУстройства, Ложь);
	Иначе
		ПолучитьПараметрыЗавершение(Неопределено, Параметры);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПоПлатежнойКартеЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатВыполнения.Результат Тогда
		ЭтаФорма.Доступность = Истина; // Разблокировка интерфейса пользователя.
		
		ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Иначе
		Если Объект.Оплата.Количество() = 1 Тогда
			Объект.Оплата[0].СсылочныйНомер       = РезультатВыполнения.СсылочныйНомер;
			Объект.Оплата[0].НомерПлатежнойКарты  = РезультатВыполнения.НомерКарты;
			Объект.Оплата[0].НомерЧекаЭТ          = РезультатВыполнения.НомерЧекаЭТ;
		КонецЕсли;
		
		ПараметрыОплаты = Новый Структура();
		ПараметрыОплаты.Вставить("СсылочныйНомер",  РезультатВыполнения.СсылочныйНомер);
		ПараметрыОплаты.Вставить("НомерКарты",      РезультатВыполнения.НомерКарты);
		ПараметрыОплаты.Вставить("НомерЧекаЭТ",     РезультатВыполнения.НомерЧекаЭТ);
		
		ДополнительныеПараметры.Вставить("ПараметрыОплаты", ПараметрыОплаты);
		
		// Печатаем фискальный чек
		Если ДополнительныеПараметры.ИдентификаторУстройства <> Неопределено Тогда
			ОповещениеПриЗавершенииПечатиЧека = Новый ОписаниеОповещения("ПечатьЧекаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			
			ЕстьАлкогольнаяПродукция = Ложь;
			Если ИспользуетсяРегистрацияРозничныхПродажВЕГАИС Тогда
				Для Каждого СтрокаТЧ Из Объект.Товары Цикл
					Если СтрокаТЧ.ЭтоАлкогольнаяПродукция И ЗначениеЗаполнено(СтрокаТЧ.АкцизнаяМарка) Тогда
						ЕстьАлкогольнаяПродукция = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ДополнительныеПараметрыОповещения = Новый Структура;
			ДополнительныеПараметрыОповещения.Вставить("ОписаниеОповещения",       ОповещениеПриЗавершенииПечатиЧека);
			ДополнительныеПараметрыОповещения.Вставить("ЕстьАлкогольнаяПродукция", ЕстьАлкогольнаяПродукция);
			ДополнительныеПараметрыОповещения.Вставить("АдресТорговогоОбъекта",    ДополнительныеПараметры.ПараметрыПечатиЧека.АдресМагазина);
			
			Оповещение_ПослеОткрытияЧека     = Новый ОписаниеОповещения("ПечатьЧека_ПослеОткрытияЧека",     ЭтотОбъект, ДополнительныеПараметрыОповещения);
			Оповещение_ПослеОшибкиПечатиЧека = Новый ОписаниеОповещения("ПечатьЧека_ПослеОшибкиПечатиЧека", ЭтотОбъект, ДополнительныеПараметрыОповещения);
			
			МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(
				ОповещениеПриЗавершенииПечатиЧека, 
				УникальныйИдентификатор, 
				ДополнительныеПараметры.ПараметрыПечатиЧека, 
				ДополнительныеПараметры.ИдентификаторУстройства,
				,
				Оповещение_ПослеОткрытияЧека,
				Оповещение_ПослеОшибкиПечатиЧека);
		Иначе
			ПечатьЧекаЗавершение(Новый Структура("Результат", Истина), ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция НомерЧекаККМ(Организация, Склад, ИдентификаторУстройства, ДатаДокумента)
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",             Организация);
	Запрос.УстановитьПараметр("Склад",                   Склад);
	Запрос.УстановитьПараметр("ИдентификаторУстройства", 
		?(ЗначениеЗаполнено(ИдентификаторУстройства), ИдентификаторУстройства, Справочники.ПодключаемоеОборудование.ПустаяСсылка()));
		
	Запрос.УстановитьПараметр("НачалоГода",             НачалоГода(ДатаДокумента));
	Запрос.УстановитьПараметр("КонецГода",              КонецГода(ДатаДокумента));
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РозничнаяПродажа.НомерЧекаККМ КАК НомерЧекаККМ
	|ИЗ
	|	Документ.РозничнаяПродажа КАК РозничнаяПродажа
	|ГДЕ
	|	РозничнаяПродажа.Организация = &Организация
	|	И РозничнаяПродажа.ИдентификаторУстройства = &ИдентификаторУстройства
	|	И РозничнаяПродажа.Склад = &Склад
	|	И РозничнаяПродажа.Дата МЕЖДУ &НачалоГода И &КонецГода
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЧекаККМ УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Возврат ?(РезультатЗапроса.Следующий(), РезультатЗапроса.НомерЧекаККМ + 1, 1);
КонецФункции 

&НаКлиенте
Процедура ОтменаАвторизацииЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт

	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'При выполнении операции отмены авторизации произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура ПечатьЧекаЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	Перем ВыходныеПараметры, ИдентификаторУстройства;
	
	ЭтаФорма.Доступность = Истина; // Разблокировка интерфейса пользователя.
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
		
		Если ДополнительныеПараметры.Свойство("ИдентификаторУстройстваЭТ") 
			И ЗначениеЗаполнено(ДополнительныеПараметры.ИдентификаторУстройстваЭТ) 
			И ДополнительныеПараметры.Свойство("ПараметрыОплаты") Тогда
			
			ОповещениеПриЗавершенииОперации = Новый ОписаниеОповещения("ОтменаАвторизацииЗавершение", ЭтотОбъект);
			
			ПараметрыОперации = МенеджерОборудованияКлиент.ПараметрыВыполненияЭквайринговойОперации();
			
			ПараметрыОперации.ТипТранзакции  = "AuthorizeVoid";
			
			ПараметрыОперации.СсылочныйНомер = ДополнительныеПараметры.ПараметрыОплаты.СсылочныйНомер;
			ПараметрыОперации.НомерКарты     = ДополнительныеПараметры.ПараметрыОплаты.НомерКарты;
			ПараметрыОперации.НомерЧекаЭТ    = ДополнительныеПараметры.ПараметрыОплаты.НомерЧекаЭТ;
			ПараметрыОперации.СуммаОперации  = ДополнительныеПараметры.ОплатаКарта;
			
			МенеджерОборудованияКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(ОповещениеПриЗавершенииОперации, УникальныйИдентификатор, 
				ДополнительныеПараметры.ИдентификаторУстройстваЭТ, ДополнительныеПараметры.ИдентификаторУстройства, ПараметрыОперации);
		КонецЕсли; 
	Иначе
		// Получить номер чека, если номер чека не задан - записываем текущий номер документа
		Если НЕ ЭтоЧекКоррекции Тогда
			Объект.НомерЧекаККМ            = ?(РезультатВыполнения.Свойство("ВыходныеПараметры", ВыходныеПараметры), 
				ВыходныеПараметры[1], 
				НомерЧекаККМ(Объект.Организация, Объект.Склад, Объект.ИдентификаторУстройства, Объект.Дата));
		КонецЕсли; 
			
		Объект.ИдентификаторУстройства = ?(РезультатВыполнения.Свойство("ИдентификаторУстройства", ИдентификаторУстройства), ИдентификаторУстройства, Неопределено);
		
		ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
		Записать(ПараметрыЗаписи);
		
		Если ДополнительныеПараметры.ПечататьТоварныйЧек Тогда
			ОбъектыПечати = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка);
			
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер("Документ.РозничнаяПродажа", "ТоварныйЧек", ОбъектыПечати, ОбщегоНазначенияБПКлиент.ПолучитьЗаголовокПечатнойФормы(ОбъектыПечати));
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru = 'Операция выполнена успешно.'");
		ПоказатьОповещениеПользователя(ТекстСообщения);
		
		Закрыть();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 

#Область ГосИС

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ИсходныеДанные, ДополнительныеПараметры) Экспорт
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования = ШтрихкодированиеИСКлиент.ПараметрыСканирования(ЭтотОбъект);
	
	ДанныеШтрихкодов = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ИсходныеДанные, Ложь);
	Если Не ДанныеШтрихкодов.Свойство("ФорматBase64") Или Не ДанныеШтрихкодов.ФорматBase64 Тогда
		ДанныеШтрихкодов.Вставить("ФорматBase64", Истина);
		ДанныеШтрихкодов.Штрихкод = ШтрихкодированиеИСКлиентСервер.ШтрихкодВBase64(ИсходныеДанные.Штрихкод);
	КонецЕсли;
	
	РезультатОбработки = ОбработатьВводШтрихкода(ДанныеШтрихкодов, Неопределено, ПараметрыСканирования);
	
	ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования);
	ШтрихкодированиеИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	
КонецПроцедуры

&НаКлиенте
Функция ОписаниеОповещенияОбработкиКодаМаркировки()
	
	Возврат Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Функция ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования)
	
	ПараметрыЗавершенияВводаШтрихкода = ШтрихкодированиеИСКлиент.ПараметрыЗавершенияОбработкиШтрихкода();
	ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода  = РезультатОбработки;
	ПараметрыЗавершенияВводаШтрихкода.Форма                        = ЭтотОбъект;
	ПараметрыЗавершенияВводаШтрихкода.ПараметрыСканирования        = ПараметрыСканирования;
	ПараметрыЗавершенияВводаШтрихкода.ДанныеШтрихкода              = ИсходныеДанные;
	ПараметрыЗавершенияВводаШтрихкода.ОповещениеОбработкиШтрихкода = ОписаниеОповещенияОбработкиКодаМаркировки();
	ПараметрыЗавершенияВводаШтрихкода.ОповещениеВыполнитьДействие  = Новый ОписаниеОповещения("ОбработкаКодаМаркировкиВыполнитьДействие", ЭтотОбъект);
	
	Возврат ПараметрыЗавершенияВводаШтрихкода;
	
КонецФункции

&НаСервере
Функция ОбработатьВводШтрихкода(ШтрихкодКоличество, КэшированныеЗначения, ПараметрыСканирования = Неопределено)
	
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ОбработатьВводШтрихкода(
		ЭтотОбъект, ШтрихкодКоличество, КэшированныеЗначения, ПараметрыСканирования);
		
	ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Неопределено;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаКлиенте
Функция ОбработкаКодаМаркировкиВыполнитьДействие(ДанныеДляВыполненияДействия, ДополнительныеПараметры) Экспорт
	
	РезультатВыбора             = ДанныеДляВыполненияДействия.РезультатВыбора;
	РезультатОбработкиШтрихкода = ДанныеДляВыполненияДействия.РезультатОбработкиШтрихкода;
	КэшированныеЗначения        = ДанныеДляВыполненияДействия.КэшированныеЗначения;
	ПараметрыСканирования       = ДанныеДляВыполненияДействия.ПараметрыСканирования;
	
	Действие = ДанныеДляВыполненияДействия.Действие;
	РезультатОбработкиШтрихкода = ОбработкаКодаМаркировкиВыполнитьДействиеСервер(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, ПараметрыСканирования, КэшированныеЗначения);
	
	ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(
		ДанныеДляВыполненияДействия.ИсходныеДанные, РезультатОбработкиШтрихкода, ДанныеДляВыполненияДействия.ПараметрыСканирования);
	ШтрихкодированиеИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	
КонецФункции

&НаСервере
Функция ОбработкаКодаМаркировкиВыполнитьДействиеСервер(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, ПараметрыСканирования, КэшированныеЗначения)
	
	ПараметрыОбработкиВыбора    = ШтрихкодированиеИС.ИнициализироватьПараметрыОбработкиВыбора(РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ВыполнитьДействие(ЭтотОбъект, Действие, ПараметрыОбработкиВыбора);
	
	ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Неопределено;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОткрытьФормуУточненияДанных()
	
	ШтрихкодированиеИСКлиент.Подключаемый_ОткрытьФормуУточненияДанных(ЭтотОбъект, ОписаниеОповещенияОбработкиКодаМаркировки());
	
КонецПроцедуры

&НаСервере
Процедура  ПослеОбработкиШтрихкодов(РезультатОбработкиШтрихкода,КэшированныеЗначения)
	
	Если РезультатОбработкиШтрихкода.ТребуетсяОбработкаШтрихкода Тогда
		
		Если ТипЗнч(РезультатОбработкиШтрихкода.ИсходныеДанные) = Тип("Структура") Тогда
			ДанныеШтрихкодов = Новый Массив;
			ДанныеШтрихкодов.Добавить(РезультатОбработкиШтрихкода.ИсходныеДанные);
		Иначе
			ДанныеШтрихкодов = РезультатОбработкиШтрихкода.ИсходныеДанные;
		КонецЕсли;
		
		
		ПараметрыЗаполнения = ИнтеграцияИС.ПараметрыЗаполненияТабличнойЧастиТовары(ВидыПродукцииГОСИС());
		
		
		ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц   = Истина;
		ПараметрыЗаполнения.МаркируемаяПродукцияВТЧ       = Истина;
		
		//ШтрихкодированиеИС
		ДанныеДляОбработки = Неопределено;
		ШтрихкодированиеИСПереопределяемый.ПодготовитьДанныеДляОбработкиШтрихкодов(
			ЭтотОбъект, ДанныеШтрихкодов, ПараметрыЗаполнения, ДанныеДляОбработки);
		
		//ШтрихкодированиеИС
		ШтрихкодированиеИСПереопределяемый.ОбработатьШтрихкоды(
			ЭтотОбъект, ДанныеДляОбработки, КэшированныеЗначения);
			
		// Если это не алкогольная продукция, и номенклатура по штрихкоду найдена - добавим ее
		Если ДанныеДляОбработки.МассивСтрокСАкцизнымиМарками.Количество() = 0 
				И ДанныеДляОбработки.ТекущаяСтрока <> Неопределено Тогда
				
			ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ДанныеДляОбработки.ТекущаяСтрока);
			
			Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.СтавкаНДС) Тогда
				РезультатОбработкиШтрихкода.ДобавленныеСтроки.Добавить(ТекущаяСтрока);
			Иначе
				РезультатОбработкиШтрихкода.ИзмененныеСтроки.Добавить(ТекущаяСтрока);
			КонецЕсли; 
			
		КонецЕсли; 
			
	КонецЕсли;
	
	ОбработатьСтрокиТЧ(
		РезультатОбработкиШтрихкода.ДобавленныеСтроки,
		РезультатОбработкиШтрихкода.ИзмененныеСтроки,
		КэшированныеЗначения);
		
	ОбновитьИтоги(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Функция Подключаемый_ОбработатьВводШтрихкода(ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования) Экспорт
	
	//ШтрихкодированиеИС
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ОбработатьВводШтрихкода(ЭтотОбъект, ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
	
	ПослеОбработкиШтрихкодов(
		РезультатОбработкиШтрихкода,
		КэшированныеЗначения);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Неопределено;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

//ШтрихкодированиеИС
&НаСервере
Функция Подключаемый_ВыполнитьДействие(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения) Экспорт
	
	ПараметрыОбработкиВыбора    = ШтрихкодированиеИС.ИнициализироватьПараметрыОбработкиВыбора(РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ВыполнитьДействие(ЭтотОбъект, Действие, ПараметрыОбработкиВыбора);
	
	ПослеОбработкиШтрихкодов(
		РезультатОбработкиШтрихкода,
		КэшированныеЗначения);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Неопределено;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

//ШтрихкодированиеИС
&НаКлиенте
Процедура Подключаемый_ПослеОбработкиШтрихкодов() Экспорт
	
	ШтрихкодированиеИСКлиентПереопределяемый.ПослеОбработкиШтрихкодов(
		ЭтотОбъект,
		ДанныеДляОбработки,
		КэшированныеЗначения);
	
КонецПроцедуры

// Возвращает виды продукции обрабатываемые конфигурацией в зависимости от опций
//
// Возвращаемое значение:
//   Массив   - список видов обрабатываемой продукции
//
&НаСервереБезКонтекста
Функция ВидыПродукцииГОСИС()
	ВидыПродукции = Новый Массив;
	
	Если ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
		ВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Алкогольная);
	КонецЕсли; 
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
		ВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Обувь);
		ВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Табак);
		ВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.ЛегкаяПромышленность);
		ВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Велосипеды);
		ВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Духи);
		ВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.КреслаКоляски);
		ВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.МолочнаяПродукция);
		ВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Фотоаппараты);
		ВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Шины);
	КонецЕсли; 
	
	Возврат ВидыПродукции;
КонецФункции

#КонецОбласти 

&НаСервере
Процедура ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода,КэшированныеЗначения)
	
	Если РезультатОбработкиШтрихкода.ТребуетсяОбработкаШтрихкода Тогда
		
		Если ТипЗнч(РезультатОбработкиШтрихкода.ИсходныеДанные) = Тип("Структура") Тогда
			ДанныеШтрихкодов = Новый Массив;
			ДанныеШтрихкодов.Добавить(РезультатОбработкиШтрихкода.ИсходныеДанные);
		Иначе
			ДанныеШтрихкодов = РезультатОбработкиШтрихкода.ИсходныеДанные;
		КонецЕсли;
		
		
		ПараметрыЗаполнения = ИнтеграцияИС.ПараметрыЗаполненияТабличнойЧастиТовары(ВидыПродукцииГОСИС());
		
		
		ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц   = Истина;
		ПараметрыЗаполнения.МаркируемаяПродукцияВТЧ       = Истина;
		
		//ШтрихкодированиеИС
		ДанныеДляОбработки = Неопределено;
		ШтрихкодированиеИСПереопределяемый.ПодготовитьДанныеДляОбработкиШтрихкодов(
			ЭтотОбъект, ДанныеШтрихкодов, ПараметрыЗаполнения, ДанныеДляОбработки);
		
		//ШтрихкодированиеИС
		ШтрихкодированиеИСПереопределяемый.ОбработатьШтрихкоды(
			ЭтотОбъект, ДанныеДляОбработки, КэшированныеЗначения);
			
		// Если это не алкогольная продукция, и номенклатура по штрихкоду найдена - добавим ее
		Если ДанныеДляОбработки.МассивСтрокСАкцизнымиМарками.Количество() = 0 
				И ДанныеДляОбработки.ТекущаяСтрока <> Неопределено Тогда
				
			ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ДанныеДляОбработки.ТекущаяСтрока);
			
			Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.СтавкаНДС) Тогда
				РезультатОбработкиШтрихкода.ДобавленныеСтроки.Добавить(ТекущаяСтрока);
			Иначе
				РезультатОбработкиШтрихкода.ИзмененныеСтроки.Добавить(ТекущаяСтрока);
			КонецЕсли; 
			
		КонецЕсли; 
			
	КонецЕсли;
	
	ОбработатьСтрокиТЧ(
		РезультатОбработкиШтрихкода.ДобавленныеСтроки,
		РезультатОбработкиШтрихкода.ИзмененныеСтроки,
		КэшированныеЗначения);
		
	ОбновитьИтоги(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбработатьСтрокиТЧ(ДобавленныеСтроки, ИзмененныеСтроки, КэшированныеЗначения)
	Перем СведенияОСпискеНоменклатуры;
	
	МассивНоменклатуры = ОбщегоНазначения.ВыгрузитьКолонку(ДобавленныеСтроки, "Номенклатура", Истина);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		МассивНоменклатуры, 
		ОбщегоНазначения.ВыгрузитьКолонку(ИзмененныеСтроки, "Номенклатура", Истина), 
		Истина);
	
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(МассивНоменклатуры, Справочники.Номенклатура.ПустаяСсылка());
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад, ТипЦен, СуммаВключаетНДС, ДокументБезНДС");
		
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("Реализация", Истина);
	
	Если МассивНоменклатуры.Количество() > 0 Тогда
		СведенияОСпискеНоменклатуры = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(МассивНоменклатуры, ДанныеОбъекта, Ложь, Истина);
	Иначе
		СведенияОСпискеНоменклатуры = Новый Соответствие;
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из ДобавленныеСтроки Цикл
		СведенияОНоменклатуре = СведенияОСпискеНоменклатуры[СтрокаТабличнойЧасти.Номенклатура];
		
		Если ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
			ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
		Иначе
			ЦенаВключаетНДС = ДанныеОбъекта.СуммаВключаетНДС;
		КонецЕсли;
		
		Если СведенияОНоменклатуре <> Неопределено Тогда
			СтрокаТабличнойЧасти.СтавкаНДС = СведенияОНоменклатуре.СтавкаНДС;
			СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				СведенияОНоменклатуре.Цена, ЦенаВключаетНДС, ДанныеОбъекта.СуммаВключаетНДС,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СведенияОНоменклатуре.СтавкаНДС));
		КонецЕсли;
		
		Если ЦенаВключаетНДС <> ДанныеОбъекта.СуммаВключаетНДС Тогда
			СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, ДанныеОбъекта.СуммаВключаетНДС,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СведенияОНоменклатуре.СтавкаНДС));
		КонецЕсли;
	КонецЦикла; 
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИзмененныеСтроки, ДобавленныеСтроки);
	
	Для каждого СтрокаТабличнойЧасти Из ИзмененныеСтроки Цикл
		СведенияОНоменклатуре = СведенияОСпискеНоменклатуры[СтрокаТабличнойЧасти.Номенклатура];
		
		// Рассчитываем реквизиты табличной части
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
		
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС, СведенияОНоменклатуре);
	КонецЦикла; 

КонецПроцедуры 

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыФормаОплата(РабочееМесто)
	ПараметрыФормы = Новый Структура;

	ПараметрыФормы.Вставить("СписокОборудованияПечатьЧека", СписокОборудованияПечатьЧека(РабочееМесто));
	ПараметрыФормы.Вставить("СписокОборудованияПлатежнаяКарта", СписокОборудованияПлатежнаяКарта(РабочееМесто));
	ПараметрыФормы.Вставить("АдресТаблицаОплата", ПоместитьВоВременноеХранилище(Объект.Оплата.Выгрузить(), УникальныйИдентификатор));
	
	Возврат ПараметрыФормы;
КонецФункции 

&НаСервере
Функция ПолучитьСведенияОСпискеНоменклатуры(ТаблицаТоваров)
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад, ДокументБезНДС");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеОбъекта.Вставить("Реализация", Истина);
	
	СписокНоменклатуры = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина);
	
	Возврат БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(СписокНоменклатуры, ДанныеОбъекта, Ложь, Ложь);
КонецФункции 

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура("ТипЦен, СуммаВключаетНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСведенийОНоменклатуре = ПолучитьСведенияОСпискеНоменклатуры(ТаблицаТоваров);
		
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		ДанныеСтроки = НовыйСтрокаТовары();
		
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТовара);
		
		ДобавитьНоменклатуруНаСервере(
			ДанныеСтроки, 
			СоответствиеСведенийОНоменклатуре[ДанныеСтроки.Номенклатура], 
			ДанныеОбъекта, 
			ИмяТаблицы);
			
	КонецЦикла;
	
	ОбновитьИтоги(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ДобавитьНоменклатуруНаСервере(СтрокаТовара, СведенияОНоменклатуре, ДанныеОбъекта, ИмяТаблицы)
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
	Иначе
		ЦенаВключаетНДС = ДанныеОбъекта.СуммаВключаетНДС;
	КонецЕсли;
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Цена = СтрокаТовара.Цена;
	Иначе
		Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			СтрокаТовара.Цена, ЦенаВключаетНДС, ДанныеОбъекта.СуммаВключаетНДС,
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СведенияОНоменклатуре.СтавкаНДС));
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Номенклатура, КиЗ_ГИСМ, АкцизнаяМарка, Цена", 
		СтрокаТовара.Номенклатура, 
		?(ЗначениеЗаполнено(СтрокаТовара.КиЗ_ГИСМ),СтрокаТовара.КиЗ_ГИСМ, Справочники.КонтрольныеЗнакиГИСМ.ПустаяСсылка()), 
		СтрокаТовара.АкцизнаяМарка,
		Окр(Цена,2,1));
		
	СтрокаТабличнойЧасти = НайтиСтрокуТабличнойЧасти("Товары", СтруктураОтбора);
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		// Нашли - увеличиваем количество.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	Иначе
		СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
		
		Если СведенияОНоменклатуре <> Неопределено Тогда
				
			СтрокаТабличнойЧасти.СтавкаНДС = СведенияОНоменклатуре.СтавкаНДС;
		КонецЕсли;
		
		Если ЦенаВключаетНДС <> ДанныеОбъекта.СуммаВключаетНДС Тогда
			СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, ДанныеОбъекта.СуммаВключаетНДС,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СведенияОНоменклатуре.СтавкаНДС));
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
		КонецЕсли;
		
	КонецЕсли;
	
	// Рассчитываем реквизиты табличной части
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС, СведенияОНоменклатуре);
КонецПроцедуры

&НаСервере
Функция НайтиСтрокуТабличнойЧасти(ИмяТабличнойЧасти, СтруктураОтбора)

	СтрокаТабличнойЧасти = Неопределено;

	МассивНайденныхСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта, Ложь);
		
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ОсобыйПорядок = СведенияОНоменклатуре.ДоходЕНВД;
	СтрокаТабличнойЧасти.ЭтоУслуга  = СведенияОНоменклатуре.Услуга;
	СтрокаТабличнойЧасти.ЭтоАлкогольнаяПродукция = СведенияОНоменклатуре.АлкогольнаяПродукция;
	Если СведенияОНоменклатуре.Цена <> 0 Тогда
		СтрокаТабличнойЧасти.Цена   = СведенияОНоменклатуре.Цена;
	КонецЕсли;
	СтрокаТабличнойЧасти.СтавкаНДС  = СведенияОНоменклатуре.СтавкаНДС;
	Если СведенияОНоменклатуре.ПродукцияМаркируемаяДляГИСМ 
		ИЛИ СведенияОНоменклатуре.ТабачнаяПродукция
		ИЛИ СведенияОНоменклатуре.ОбувнаяПродукция Тогда
		
		СтрокаТабличнойЧасти.Количество  = 1;
	КонецЕсли;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ?(СтрокаТабличнойЧасти.ЭтоУслуга, 1, 0));
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС, СведенияОНоменклатуре);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, СуммаВключаетНДС, СведенияОНоменклатуре)
	СтрокаТаблицы.Всего = ?(СуммаВключаетНДС, СтрокаТаблицы.Сумма, СтрокаТаблицы.Сумма + СтрокаТаблицы.СуммаНДС);
	
	Если СведенияОНоменклатуре <> Неопределено Тогда
		СтрокаТаблицы.ЭтоУслуга                   = СведенияОНоменклатуре.Услуга;
		СтрокаТаблицы.ЭтоАлкогольнаяПродукция     = СведенияОНоменклатуре.АлкогольнаяПродукция;
		СтрокаТаблицы.ОсобыйПорядок               = СведенияОНоменклатуре.ДоходЕНВД;
		СтрокаТаблицы.ПродукцияМаркируемаяДляГИСМ = СведенияОНоменклатуре.ПродукцияМаркируемаяДляГИСМ;
		СтрокаТаблицы.ЭтоТабачнаяПродукция        = СведенияОНоменклатуре.ТабачнаяПродукция; 
		СтрокаТаблицы.ЭтоОбувнаяПродукция         = СведенияОНоменклатуре.ОбувнаяПродукция; 
	КонецЕсли;
	
	СтрокаТаблицы.ИндексАкцизнойМарки = ?(ЗначениеЗаполнено(СтрокаТаблицы.АкцизнаяМарка), 1, 0);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура АгентскиеУслугиНоменклатураПриИзмененииНаСервере(СтрокаТаблицы, Знач ДанныеОбъекта)
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТаблицы.Номенклатура, ДанныеОбъекта, Ложь);
		
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы.Содержание	= СведенияОНоменклатуре.НаименованиеПолное;
	СтрокаТаблицы.Цена			= СведенияОНоменклатуре.Цена;
	СтрокаТаблицы.СтавкаНДС		= СведенияОНоменклатуре.СтавкаНДС;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы, 1);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, ДанныеОбъекта.СуммаВключаетНДС);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыАгентскиеУслуги(СтрокаТаблицы, ДанныеОбъекта.СуммаВключаетНДС);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыАгентскиеУслуги(СтрокаТаблицы, СуммаВключаетНДС)
	
	СтрокаТаблицы.Всего = ?(СуммаВключаетНДС, СтрокаТаблицы.Сумма, СтрокаТаблицы.Сумма + СтрокаТаблицы.СуммаНДС);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	СоответствиеСведенийОНоменклатуре = ПолучитьСведенияОСпискеНоменклатуры(Объект.Товары);
		
	Для каждого СтрокаТаблицы Из Объект.Товары Цикл
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТаблицы.Номенклатура);
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, Объект.СуммаВключаетНДС, СведенияОНоменклатуре);
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из Объект.АгентскиеУслуги Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыАгентскиеУслуги(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()
	РеквизитыСклад   = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Склад, "ТипЦенРозничнойТорговли, ТипЦенРозничнойТорговли.ЦенаВключаетНДС");
	
	ПересчитатьНДС  = Ложь;
	ПересчитатьЦены = (Объект.ТипЦен <> РеквизитыСклад.ТипЦенРозничнойТорговли);
	
	Объект.ТипЦен           = РеквизитыСклад.ТипЦенРозничнойТорговли;
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ПересчитатьНДС  = (Объект.СуммаВключаетНДС <> РеквизитыСклад.ТипЦенРозничнойТорговлиЦенаВключаетНДС);
		Объект.СуммаВключаетНДС = РеквизитыСклад.ТипЦенРозничнойТорговлиЦенаВключаетНДС;
	КонецЕсли;
	
	УстановитьФункциональныеОпцииФормы();
	
	Если ИспользуетсяРегистрацияРозничныхПродажВЕГАИС Тогда
		ОрганизацияЕГАИС = ИнтеграцияЕГАИСБПВызовСервера.ОрганизацияЕГАИСПоОрганизацииИТорговомуОбъекту(Объект.Организация, Объект.Склад);
	Иначе
		ОрганизацияЕГАИС = Неопределено;
	КонецЕсли; 
	
	ЗаполнитьРассчитатьСуммы(ПересчитатьЦены, ПересчитатьНДС);
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	СформироватьНадписьЦеныИВалюта(ЭтаФорма);
КонецПроцедуры 

&НаКлиенте
Процедура ПриИзмененииКоличествоЦена(ИмяТабЧасти)

	СтрокаТаблицы = Элементы[ИмяТабЧасти].ТекущиеДанные;
	
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	ЭтоУслуга = ИмяТабЧасти = "АгентскиеУслуги" ИЛИ СтрокаТаблицы.ЭтоУслуга;
	ЗначениеПустогоКоличества = ?(ЭтоУслуга, 1, 0);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы, ЗначениеПустогоКоличества);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС);

	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСумма(ИмяТабЧасти)

	СтрокаТаблицы = Элементы[ИмяТабЧасти].ТекущиеДанные;
	
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если СтрокаТаблицы.Количество = 0 Тогда
		ЭтоУслуга = ИмяТабЧасти = "АгентскиеУслуги" ИЛИ (ИмяТабЧасти = "Товары" И СтрокаТаблицы.ЭтоУслуга);
		Если ЭтоУслуга Тогда
			СтрокаТаблицы.Цена = СтрокаТаблицы.Сумма;
		Иначе
			СтрокаТаблицы.Цена = 0;
		КонецЕсли;
	Иначе
		СтрокаТаблицы.Цена = СтрокаТаблицы.Сумма / СтрокаТаблицы.Количество;
	КонецЕсли;
	
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСтавкаНДС(ИмяТабЧасти)

	СтрокаТаблицы = Элементы[ИмяТабЧасти].ТекущиеДанные;
	
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС);

	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСуммаНДС(ИмяТабЧасти)

	СтрокаТаблицы = Элементы[ИмяТабЧасти].ТекущиеДанные;
	
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура АгентскиеУслугиКонтрагентПриИзмененииНаСервере(ДанныеСтрокаТаблицы, Знач ПараметрыОбъекта)

	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(ДанныеСтрокаТаблицы.ДоговорКонтрагента, ДанныеСтрокаТаблицы.Контрагент, 
		ПараметрыОбъекта.Организация, Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеВыбораНоменклатура(Текст, ПараметрыПолученияДанных)
	ДанныеВыбора = Справочники.Номенклатура.ПолучитьДанныеВыбора(ПараметрыПолученияДанных);
	
	Если ДанныеВыбора.Количество() = 0 Тогда
		ТаблицаНоменклатуры = РегистрыСведений.ШтрихкодыНоменклатуры.НоменклатураПоШтрихкоду(Текст);
		Для каждого СтрокаНоменклатуры Из ТаблицаНоменклатуры Цикл
			ДанныеВыбора.Добавить(СтрокаНоменклатуры.Номенклатура, СтрокаНоменклатуры.Представление);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеВыбора;
КонецФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ИспользуютсяСканерыШтрихкода = (МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам("СканерШтрихкода").Количество() > 0);
	Иначе
		ИспользуютсяСканерыШтрихкода = Ложь;
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование И ИспользуетсяПростойИнтерфейс Тогда
		УправлениеКассовойСменойДоступно = КассовыеСменыВызовСервераБП.ДоступноУправлениеКассовойСменой();
	КонецЕсли;
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	Если НЕ Объект.ОтчетОРозничныхПродажах.Пустая() Тогда
		ОтчетОРозничныхПродажах = Объект.ОтчетОРозничныхПродажах;
		ОтчетОРозничныхПродажахНаименование = ОтчетОРозничныхПродажах.Метаданные().Синоним;
		
		НадписьОтчетОРозничныхПродажах = СтрШаблон("%1 № %2 от %3 г.", ОтчетОРозничныхПродажахНаименование, ОтчетОРозничныхПродажах.Номер, Формат(ОтчетОРозничныхПродажах.Дата, "ДФ='дд ММММ гггг'"));
	КонецЕсли;
	
	Элементы.СчетПокупателю.Видимость = ЗначениеЗаполнено(Объект.СчетНаОплатуПокупателю);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьПараметрыВыбораВидаОплаты();
	
	УстановитьЗаголовокФормы(ЭтотОбъект);
	
	УстановитьЗаголовокКнопкиОплата();
	
КонецПроцедуры

&НаСервере
Функция УстановитьЗаголовокКнопкиОплата()

	Если Объект.ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Продажа Тогда
		ТекстЗаголовка = НСтр("ru = 'Принять оплату'");
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Вернуть средства'");
	КонецЕсли;
	
	Элементы.ФормаПринятьОплату.Заголовок = ТекстЗаголовка;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокФормы(Форма)
	ТекстЗаголовка = НСтр("ru = 'Чек'");
	
	Объект = Форма.Объект;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстЗаголовка = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru=' %1 от %2'"), Объект.Номер, Формат(Объект.Дата, "ДЛФ=D"));
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' (создание)'");
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРозничнаяПродажа.Продажа") 
		И Объект.СчетКасса = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.КассаПлатежногоАгента") Тогда
	
		ВидОперации = НСтр("ru = 'Прием платежей'");
	
	Иначе
	
		ВидОперации = Строка(Объект.ВидОперации);
	
	КонецЕсли; 
	
	Форма.Заголовок = ТекстЗаголовка + " (" + ВидОперации + ")";
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораВидаОплаты()
	ТипыОплатБезналичныеОплаты = Новый Массив;
	ТипыОплатБезналичныеОплаты.Добавить(Перечисления.ТипыОплат.ПлатежнаяКарта);
	ТипыОплатБезналичныеОплаты.Добавить(Перечисления.ТипыОплат.БанковскийКредит);
	
	Если ИспользуютсяПодарочныеСертификаты Тогда
		
		ТипыОплатПодарочныеСертификаты = Новый Массив;
	
		ТипыОплатПодарочныеСертификаты.Добавить(Перечисления.ТипыОплат.ПодарочныйСертификатСобственный);
		ТипыОплатБезналичныеОплаты.Добавить(Перечисления.ТипыОплат.ПодарочныйСертификатСобственный);
		
		Если ПрименяютсяДоговораСКомитентамиНаПродажу Тогда
			ТипыОплатПодарочныеСертификаты.Добавить(Перечисления.ТипыОплат.ПодарочныйСертификатСторонний);
			ТипыОплатБезналичныеОплаты.Добавить(Перечисления.ТипыОплат.ПодарочныйСертификатСторонний);
		КонецЕсли;
		
		ПараметрыСертификатов = Новый Массив;
		ПараметрыСертификатов.Добавить(Новый ПараметрВыбора("Отбор.ТипОплаты", Новый ФиксированныйМассив(ТипыОплатПодарочныеСертификаты)));
		ПараметрыСертификатов.Добавить(Новый ПараметрВыбора("Отбор.Организация", Объект.Организация));

		Элементы.ПодарочныеСертификатыВидОплаты.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыСертификатов);
		
	КонецЕсли;
	
	ПараметрыБезналичныхОплат = Новый Массив;
	
	ПараметрыБезналичныхОплат.Добавить(Новый ПараметрВыбора("Отбор.ТипОплаты", Новый ФиксированныйМассив(ТипыОплатБезналичныеОплаты)));
	ПараметрыБезналичныхОплат.Добавить(Новый ПараметрВыбора("Отбор.Организация", Объект.Организация));
	
	Элементы.ОплатаВидОплаты.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыБезналичныхОплат);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ЭтоВозврат = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРозничнаяПродажа.Возврат"));
	ЭтоДоговорПлатежногоАгента = (Объект.СчетКасса = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.КассаПлатежногоАгента"));
	
	ПравоВводаВозврата = ?(Объект.ОтчетОРозничныхПродажах.Пустая(), Форма.ЕстьПравоВводаРозничнаяПродажа, Форма.ЕстьПравоВводаВозвратОтПокупателя);
	
	Элементы.СтраницаТовары.Видимость       = НЕ ЭтоДоговорПлатежногоАгента;
	Элементы.ПродажаСертификатами.Видимость = НЕ ЭтоДоговорПлатежногоАгента;
	
	Элементы.ГруппаБаннерПробитЧек.Видимость    = ЗначениеЗаполнено(Объект.НомерЧекаККМ) 
		И НЕ ЭтоВозврат 
		И Форма.ЕстьПравоВводаЧекаКоррекции 
		И НЕ Форма.ЭтоЧекКоррекции
		И ПечатьФискальныхДокументовВызовСервера.ЕстьФискальныеОперацииПоДокументу(Объект.Ссылка, Истина);
		
	Форма.ТолькоПросмотр                    = Форма.ТолькоПросмотр ИЛИ (ЗначениеЗаполнено(Объект.НомерЧекаККМ) И НЕ Форма.ЭтоЧекКоррекции);
	Элементы.ФормаПринятьОплату.Видимость = НЕ Форма.ТолькоПросмотр;
	Элементы.ФормаЧекНаВозврат.Видимость    = ЗначениеЗаполнено(Объект.НомерЧекаККМ) И НЕ ЭтоВозврат И ПравоВводаВозврата И НЕ Форма.ЭтоЧекКоррекции;
	Элементы.Основание.Видимость            = ЭтоВозврат;
	Элементы.ФормаПринятьОплату.Заголовок = ?(Форма.ЭтоЧекКоррекции, НСтр("ru = 'Чек коррекции'"), НСтр("ru = 'Принять оплату'"));
	
	СформироватьНадписьЦеныИВалюта(Форма);
	
	ОбновитьИтоги(Форма);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
	СтруктураНадписи = Новый Структура(
		"СуммаВключаетНДС, ДокументБезНДС, ВалютаРегламентированногоУчета",
		Объект.СуммаВключаетНДС,
		Объект.ДокументБезНДС,
		Форма.ВалютаРегламентированногоУчета);
	Если Форма.ИспользоватьТипыЦенНоменклатуры Тогда
		СтруктураНадписи.Вставить("ТипЦен", Объект.ТипЦен);
	КонецЕсли;
	Форма.ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ИспользоватьТипыЦенНоменклатуры  = ПолучитьФункциональнуюОпцию("ИспользоватьТипыЦенНоменклатуры") 
		И ПравоДоступа("Чтение", Метаданные.Справочники.ТипыЦенНоменклатуры);

	ИспользуютсяПодарочныеСертификаты = ПолучитьФункциональнуюОпцию("ИспользуютсяПодарочныеСертификаты");
	
	ИспользоватьПодключаемоеОборудование = ПравоДоступа("Чтение", Метаданные.Справочники.ПодключаемоеОборудование);
	
	ИспользуетсяФискальныйРегистратор = ПолучитьФункциональнуюОпцию("ИспользоватьФискальныйРегистратор") 
		И ИспользоватьПодключаемоеОборудование;
	
	ПрименяютсяДоговораСКомитентамиНаПродажу = ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов");
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	
	ИспользоватьКонтрольныеЗнакиГИСМ = ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольныеЗнакиГИСМ");
	
	ИспользуетсяРегистрацияРозничныхПродажВЕГАИС = ПравоДоступа("Чтение", Метаданные.Справочники.КлассификаторОрганизацийЕГАИС) 
		И ИнтеграцияЕГАИСВызовСервера.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(Объект.Организация, Объект.Склад, Объект.Дата);
		
	ИспользуетсяПростойИнтерфейс = ПолучитьФункциональнуюОпцию("ИнтерфейсТаксиПростой");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	Объект = Форма.Объект;
	
	Форма.ИтогВсего = Объект.Товары.Итог("Всего") + Объект.АгентскиеУслуги.Итог("Всего") + Объект.ПодарочныеСертификаты.Итог("Сумма");
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)
	
	ПараметрыФормы = Новый Структура;
	
	ДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	ЗаголовокПодбора = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Параметрыформы.Вставить("ПоказыватьЦены", Истина);
	КонецЕсли;
	
	Если ИмяТаблицы = "Товары" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Товары'");
		
		ПараметрыФормы.Вставить("ПоказыватьОстатки"    , Истина);
		ПараметрыФормы.Вставить("КомандаВыбратьОстаток", Истина);
	ИначеЕсли ИмяТаблицы = "АгентскиеУслуги" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Агентские услуги'");
		
		ПараметрыФормы.Вставить("ПоказыватьОстатки"  , Ложь);
	КонецЕсли;
	
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы.Вставить("ЕстьЦена"		, Истина);
	ПараметрыФормы.Вставить("ЕстьКоличество", Истина);
	ПараметрыФормы.Вставить("ДатаРасчетов"	, ДатаРасчетов);
	ПараметрыФормы.Вставить("ТипЦен"		, Объект.ТипЦен);
	ПараметрыФормы.Вставить("Валюта"		, ВалютаРегламентированногоУчета);
	ПараметрыФормы.Вставить("Организация"	, Объект.Организация);
	ПараметрыФормы.Вставить("Склад"			, Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок"		, ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ИмяТаблицы"	, ИмяТаблицы);
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ПараметрыФормы.Вставить("ЗаполнятьЦеныПоПродаже"	, Истина);
		ПараметрыФормы.Вставить("СуммаВключаетНДС"			, Объект.СуммаВключаетНДС);
		ПараметрыФормы.Вставить("Реализация"				, Истина);
	КонецЕсли;

	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	НастройкиУсловногоОформления = Новый Структура();

	УсловноеОформление.Элементы.Очистить();

	// Условное оформление, связанное с видимостью, устанавливаем сразу для всех колонок.
	УстановитьУсловноеОформлениеВидимость();

	// Условное оформление для полей, расположенных на страницах

	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУсловноеОформление(Форма)

	Элементы = Форма.Элементы;

	Если НЕ Форма.НастройкиУсловногоОформления.Свойство("ТоварыПроинициализировано")
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаТовары Тогда

		Форма.УстановитьУсловноеОформлениеТовары();

	ИначеЕсли НЕ Форма.НастройкиУсловногоОформления.Свойство("АгентскиеУслугиПроинициализировано")
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаАгентскиеУслуги Тогда

		Форма.УстановитьУсловноеОформлениеАгентскиеУслуги();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеВидимость()

	// ТоварыСтавкаНДС, ТоварыСуммаНДС, ТоварыВсего

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВсего");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиВсего");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ДокументБезНДС", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеТовары() Экспорт

	НастройкиУсловногоОформления.Вставить("ТоварыПроинициализировано", Истина);


	// ТоварыКоличество

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКоличество");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ЭтоУслуга", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// ТоварыСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	// ТоварыКиЗ_ГИСМ

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКиЗ_ГИСМ");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ПродукцияМаркируемаяДляГИСМ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеАгентскиеУслуги() Экспорт

	НастройкиУсловногоОформления.Вставить("АгентскиеУслугиПроинициализировано", Истина);


	// АгентскиеУслугиСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.АгентскиеУслуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.АгентскиеУслуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	Если ПлательщикНДС Тогда 
		Объект.ДокументБезНДС = Ложь;
	КонецЕсли;
	
	Если ИспользуетсяРегистрацияРозничныхПродажВЕГАИС Тогда
		ОрганизацияЕГАИС = ИнтеграцияЕГАИСБПВызовСервера.ОрганизацияЕГАИСПоОрганизацииИТорговомуОбъекту(Объект.Организация, Объект.Склад);
	Иначе
		ОрганизацияЕГАИС = Неопределено;
	КонецЕсли; 
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	РаботаСНоменклатурой.ОбновитьСодержаниеУслуг(Объект.АгентскиеУслуги, Объект.Дата, ТекущаяДатаДокумента);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьФункциональныеОпцииФормы();
КонецПроцедуры

&НаСервере
Функция НовыйСтрокаТовары()
	СтрокаТовары = Новый Структура;
	
	СтрокаТовары.Вставить("Номенклатура",         Справочники.Номенклатура.ПустаяСсылка());
	СтрокаТовары.Вставить("Количество",           0);
	СтрокаТовары.Вставить("Цена",                 0);
	СтрокаТовары.Вставить("Сумма",                0);
	СтрокаТовары.Вставить("КиЗ_ГИСМ",             Неопределено);
	СтрокаТовары.Вставить("АкцизнаяМарка",        Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка());
	СтрокаТовары.Вставить("Справка2",             Справочники.Справки2ЕГАИС.ПустаяСсылка());
	СтрокаТовары.Вставить("АлкогольнаяПродукция", Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка());
	СтрокаТовары.Вставить("Штрихкод",             "");
	
	Возврат СтрокаТовары
КонецФункции

// Пересчет табличной части документа после изменений в форме "Цены и валюта".
// Выполняется пересчет колонок: цена, скидка, сумма, сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты()

	// Формирование структуры параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СуммаВключаетНДС",	  Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("ДокументБезНДС",        Объект.ДокументБезНДС);
	СтруктураПараметров.Вставить("Организация",			  Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",		  Объект.Дата);
	СтруктураПараметров.Вставить("ТипЦен", 				  Объект.ТипЦен);
	СтруктураПараметров.Вставить("ТолькоПросмотр",		  ТолькоПросмотр);
	
	ДополнительныеПараметры = Новый Структура;
	
	Если ИспользоватьТипыЦенНоменклатуры Тогда 
		ОткрыватьИзМеню = Ложь;
	Иначе
		ОткрыватьИзМеню = Истина;
		ДополнительныеПараметры.Вставить("СтруктураПараметровКоманды", СтруктураПараметров);
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ОткрыватьИзМеню Тогда
		
		СписокКоманд = Новый СписокЗначений;
		
		Если Не ПлательщикНДС Тогда
			СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.ДокументБезНДС"));
		КонецЕсли;
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДССверху"));
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме"));
		
		Если НЕ ТолькоПросмотр Тогда
			ПоказатьВыборИзМеню(ОповещениеОЗакрытии, СписокКоманд, Элементы.ЦеныИВалюта);
		Иначе
			ОповещениеОЗакрытии = Неопределено;
		КонецЕсли; 
	Иначе
		ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,ЭтаФорма,,,,ОповещениеОЗакрытии);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("СтруктураПараметровКоманды") Тогда
		
		СтруктураЦеныИВалюта = ДополнительныеПараметры.СтруктураПараметровКоманды;
		
		СуммаВключаетНДСДоИзменения = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Если РезультатЗакрытия = Неопределено Тогда 
			Возврат;
		ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.ДокументБезНДС") Тогда
			СтруктураЦеныИВалюта.ДокументБезНДС 	= Истина;
		ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме") Тогда
			СтруктураЦеныИВалюта.ДокументБезНДС 	= Ложь;
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Истина;
		Иначе
			СтруктураЦеныИВалюта.ДокументБезНДС 	= Ложь;
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Ложь;
		КонецЕсли;
		
		СтруктураЦеныИВалюта.Вставить("ПерезаполнитьЦены",    Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьЦены",      Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьНДС",       СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС
			ИЛИ Объект.ДокументБезНДС <> СтруктураЦеныИВалюта.ДокументБезНДС);
		СтруктураЦеныИВалюта.Вставить("БылиВнесеныИзменения", СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС
			ИЛИ Объект.ДокументБезНДС <> СтруктураЦеныИВалюта.ДокументБезНДС);
		
	Иначе
		СтруктураЦеныИВалюта = РезультатЗакрытия;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда

		Объект.ТипЦен             = СтруктураЦеныИВалюта.ТипЦен;
		Объект.СуммаВключаетНДС   = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Объект.ДокументБезНДС	  = СтруктураЦеныИВалюта.ДокументБезНДС;
		
		Модифицированность = Истина;

		Если СтруктураЦеныИВалюта.ПерезаполнитьЦены  ИЛИ СтруктураЦеныИВалюта.ПересчитатьНДС Тогда
			ЗаполнитьРассчитатьСуммы(
				СтруктураЦеныИВалюта.ПерезаполнитьЦены,
				СтруктураЦеныИВалюта.ПересчитатьНДС);
		КонецЕсли;
				
		СформироватьНадписьЦеныИВалюта(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммы(ПерезаполнитьЦены = Ложь, ПересчитатьНДС = Ложь);
	ТаблицаЦенНоменклатуры = Неопределено;
	
	Если ПерезаполнитьЦены Тогда
		
		СписокНоменклатуры	= ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "Номенклатура", Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокНоменклатуры,
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.АгентскиеУслуги, "Номенклатура"), Истина);
		
		Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
			ТаблицаЦенНоменклатуры = Ценообразование.ПолучитьТаблицуЦенНоменклатуры(
			СписокНоменклатуры,
			Объект.ТипЦен,
			Объект.Дата);
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Строка Из Объект.Товары Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ПерезаполнитьЦены, ПересчитатьНДС, ?(Строка.ЭтоУслуга, 1, 0));
	КонецЦикла;
	Для Каждого Строка Из Объект.АгентскиеУслуги Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ПерезаполнитьЦены, ПересчитатьНДС, 1);
	КонецЦикла;
	
	УправлениеФормой(ЭтаФорма);
	ОбновитьИтоги(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ПерезаполнитьЦены,  ПересчитатьНДС, ЗначениеПустогоКоличества)

	Если ПерезаполнитьЦены И ТаблицаЦенНоменклатуры <> Неопределено Тогда
		
		НайденнаяСтрока	= ТаблицаЦенНоменклатуры.Найти(Строка.Номенклатура, "Номенклатура");
		Если НайденнаяСтрока <> Неопределено Тогда
			Цена = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
				НайденнаяСтрока.Цена, НайденнаяСтрока.Валюта, ВалютаРегламентированногоУчета, НайденнаяСтрока.Курс,
				1, НайденнаяСтрока.Кратность, 1);
			ЦенаВключаетНДС = НайденнаяСтрока.ЦенаВключаетНДС;
		Иначе
			Цена = 0;
			// Признак того, что цена включает НДС, хранится в реквизите ЦенаВключаетНДС типа цен
			Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
				ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
			Иначе
				ЦенаВключаетНДС = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Цена = Строка.Цена;
		// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа
		ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);
	КонецЕсли;

	Если Объект.ДокументБезНДС Тогда
		Строка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
	
	Строка.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
		ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
	Строка.Сумма = Строка.Цена * ?(Строка.Количество =0, ЗначениеПустогоКоличества, Строка.Количество);
	Строка.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(Строка.Сумма, Объект.СуммаВключаетНДС,
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
	Строка.Всего = Строка.Сумма + ?(Объект.СуммаВключаетНДС, 0, Строка.СуммаНДС);

КонецПроцедуры

&НаСервере
Процедура ОснованиеПриИзмененииНаСервере()

	ЗаполнитьЗначенияСвойств(Объект, Объект.Основание, "СуммаВключаетНДС, ТипЦен, ДокументБезНДС");
	Документы.РозничнаяПродажа.СкопироватьТабличныеЧасти(Объект, Объект.Основание);

КонецПроцедуры 

&НаСервере
Процедура НастройкаОтображенияФормыВПростомИнтерфейсе()
	
	Если Не ИспользуетсяПростойИнтерфейс Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьОтображениеВкладок();
	
	Элементы.ГруппаБаннерОткрытьСмену.Видимость
		= ОтображатьБаннерОткрытияСмены(Объект.Ссылка, ИспользуетсяФискальныйРегистратор);
		
	Элементы.Основание.Заголовок = НСтр("ru='Возврат по чеку'");
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеВкладок()
	
	ОпцииОтображенияТабличныхЧастей = ИменаОпцийСвязанныхСТабличнымиЧастями();
	ОтображаетсяТолькоОсновнаяТабличнаяЧасть = Истина;
	Для Каждого ИмяОпции Из ОпцииОтображенияТабличныхЧастей Цикл
		Если ПолучитьФункциональнуюОпцию(ИмяОпции) Тогда
			ОтображаетсяТолькоОсновнаяТабличнаяЧасть = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ОтображаетсяТолькоОсновнаяТабличнаяЧасть Тогда
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтображатьБаннерОткрытияСмены(Ссылка, ИспользуетсяФискальныйРегистратор)
	
	Если Не ИспользуетсяФискальныйРегистратор Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		ТипыОборудования = МенеджерОборудованияКлиентСерверБП.ТипыКонтрольноКассовойТехники();
		СписокДоступныхУстройств = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам(ТипыОборудования);
		Если СписокДоступныхУстройств.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		Для Каждого Устройство Из СписокДоступныхУстройств Цикл
			ОписаниеПоследнейСмены = КассовыеСменыВызовСервера.ОписаниеПоследнейКассовойСмены(Устройство.Ссылка);
			Если ОписаниеПоследнейСмены <> Неопределено
				И ОписаниеПоследнейСмены.Статус = Перечисления.СтатусыКассовойСмены.Открыта Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИменаОпцийСвязанныхСТабличнымиЧастями()
	
	ИменаФункциональныхОпций = Новый Массив;
	ИменаФункциональныхОпций.Добавить("ИспользоватьОплатуПоПлатежнымКартам");
	Возврат ИменаФункциональныхОпций;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьУстановитьСчетКассы(ДоговорКонтрагента)
	ЭтоДоговорПлатежногоАгента = ЭтоДоговорПлатежногоАгента(ДоговорКонтрагента);
	Если ЭтоДоговорПлатежногоАгента <> (Объект.СчетКасса = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.КассаПлатежногоАгента")) Тогда
	
		Объект.СчетКасса = ?(ЭтоДоговорПлатежногоАгента, ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.КассаПлатежногоАгента"), ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.КассаОрганизации")); 
		
		УправлениеФормой(ЭтотОбъект);
		УстановитьЗаголовокФормы(ЭтотОбъект);
	КонецЕсли; 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоДоговорПлатежногоАгента(ДоговорКонтрагента)

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ПлатежныйАгент");

КонецФункции

&НаКлиенте
Процедура ПробитьЧекКоррекцииЗавершение(Значение, Параметры) Экспорт

	Если Значение = КодВозвратаДиалога.ОК Тогда
	
		ПереключитьЧекКоррекции();
	
	КонецЕсли; 

КонецПроцедуры 

&НаКлиенте
Процедура ПереключитьЧекКоррекции()

	ЭтоЧекКоррекции = Истина;
	ТолькоПросмотр = Ложь;
	
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьЧек" Тогда
		СтандартнаяОбработка =Ложь;
		
		КлючЗаписи = ДанныеФискальнойОперации(Объект.Ссылка);
		Если КлючЗаписи <> Неопределено Тогда
		
			ПараметрыОткрытия = Новый Структура("Ключ", КлючЗаписи);
			
			ОткрытьФорму("РегистрСведений.ФискальныеОперации.ФормаЗаписи", ПараметрыОткрытия, ЭтотОбъект);
		
		КонецЕсли; 
	
	КонецЕсли; 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеФискальнойОперации(Ссылка)

	ДанныеФискальнойОперации = МенеджерОборудованияВызовСервера.ДанныеФискальнойОперации(Ссылка,,,Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств);
	Если ДанныеФискальнойОперации <> Неопределено Тогда
		ЗначенияКлюча = Новый Структура("ДокументОснование, ИдентификаторЗаписи");
		ЗаполнитьЗначенияСвойств(ЗначенияКлюча, ДанныеФискальнойОперации);
		
		Возврат РегистрыСведений.ФискальныеОперации.СоздатьКлючЗаписи(ЗначенияКлюча);
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
КонецФункции 
 

#КонецОбласти


