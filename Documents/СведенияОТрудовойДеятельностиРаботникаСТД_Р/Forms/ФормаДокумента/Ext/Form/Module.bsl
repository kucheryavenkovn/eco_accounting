#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ЗапрашиваемыеЗначения = Новый Структура;
		ЗапрашиваемыеЗначения.Вставить("Организация", "Объект.Организация");
		ЗапрашиваемыеЗначения.Вставить("Ответственный", "Объект.Ответственный");
		
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗапрашиваемыеЗначения);
		
		ОрганизацияПриИзмененииНаСервере();
		
		ПриПолученииДанныхНаСервере();
		
	КонецЕсли;
	
	ЭлектронныеТрудовыеКнижки.УстановитьУсловноеОформлениеТаблицыРедактированияМероприятий(ЭтотОбъект, Ложь);
	ЭлектронныеТрудовыеКнижки.УстановитьУсловноеОформлениеПредставленияДолжностиТаблицыМероприятий(ЭтотОбъект);
	УстановитьУсловноеОформлениеПредставленияДолжностиТаблицыМероприятий();
	
	СервисЭлектронныхТрудовыхКнижек.СведенияОТрудовойДеятельностиРаботникаСТД_Р_ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПриПолученииДанныхНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПослеЗаписиНаСервере(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	ПриПолученииДанныхНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_СведенияОТрудовойДеятельностиРаботникаСТД_Р", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик подсистемы "ПодписиДокументов".
&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементПриИзменении(Элемент) 
	ПодписиДокументовКлиент.ПриИзмененииПодписывающегоЛица(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементНажатие(Элемент) 
	ПодписиДокументовКлиент.РасширеннаяПодсказкаНажатие(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры
// Конец Обработчик подсистемы "ПодписиДокументов".

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	СотрудникПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УведомленииОСпособеИзмененияДекорацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Документ.РегистрацияТрудовойДеятельности.ФормаСписка");
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыМероприятия

&НаКлиенте
Процедура МероприятияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура МероприятияПередУдалением(Элемент, Отказ)
	
	Если Элементы.Мероприятия.ВыделенныеСтроки.Количество() > 0 Тогда
		
		УдаляемыеСтроки = Новый Массив;
		Для Каждого ИдентификаторСтроки Из Элементы.Мероприятия.ВыделенныеСтроки Цикл
			
			ДанныеСтроки = Объект.Мероприятия.НайтиПоИдентификатору(ИдентификаторСтроки);
			Если Не ДанныеСтроки.Передано Тогда
				УдаляемыеСтроки.Добавить(ДанныеСтроки);
			КонецЕсли;
			
		КонецЦикла;
		
		Если УдаляемыеСтроки.Количество() < Элементы.Мероприятия.ВыделенныеСтроки.Количество() Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Допускается удалять только не принятые в ПФР мероприятия'"));
		КонецЕсли;
		
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			Объект.Мероприятия.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Перезаполнить(Команда)
	
	ЗаполнитьМероприятияСотрудника(Истина);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ЗаполнитьПодписиПоОрганизации(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
КонецПроцедуры

&НаСервере
Процедура СотрудникПриИзмененииНаСервере()
	
	Объект.Фамилия = "";
	Объект.Имя = "";
	Объект.Отчество = "";
	Объект.ДатаРождения = '00010101';
	Объект.СтраховойНомерПФР = "";
	
	ЗаполнитьМероприятияСотрудника(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМероприятияСотрудника(ЗаполнитьТолькоМероприятия)
	
	Объект.Мероприятия.Очистить();
	
	Документы.СведенияОТрудовойДеятельностиРаботникаСТД_Р.ЗаполнитьДокумент(Объект, ЗаполнитьТолькоМероприятия);
	ЭлектронныеТрудовыеКнижкиКлиентСервер.УстановитьОтображениеТаблицыМероприятия(ЭтотОбъект, Объект.Организация, Объект.Мероприятия);
	
КонецПроцедуры

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	РазрядКатегорияВидимость = ЭлектронныеТрудовыеКнижки.РазрядКатегорияВидимость();
	КодПоРееструДолжностейВидимость = ЭлектронныеТрудовыеКнижки.КодПоРееструДолжностейВидимость();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Мероприятия", Объект.Мероприятия.Выгрузить(, "НомерСтроки,ИдМероприятия,Отменено"));
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Мероприятия.ИдМероприятия КАК ИдМероприятия,
		|	Мероприятия.Отменено КАК Отменено,
		|	Мероприятия.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТМероприятияДокумента
		|ИЗ
		|	&Мероприятия КАК Мероприятия";
	
	Запрос.Выполнить();
	
	ЗапросДанныхМероприятий = Документы.СведенияОТрудовойДеятельностиРаботникаСТД_Р.ЗапросВТДанныеМероприятий("");
	ЗапросДанныхМероприятий.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	
	ДанныеМероприятий = ЗапросДанныхМероприятий.Выполнить().Выгрузить();
	Для Каждого СтрокаМероприятия Из Объект.Мероприятия Цикл
		
		СтруктураПоиска = Новый Структура("ИдМероприятия,Отменено");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаМероприятия);
		
		СтрокиДанных = ДанныеМероприятий.НайтиСтроки(СтруктураПоиска);
		Если СтрокиДанных.Количество() > 0 И ЗначениеЗаполнено(СтрокиДанных[0].ВидМероприятия) Тогда
			ЗаполнитьЗначенияСвойств(СтрокаМероприятия, СтрокиДанных[0], , "ИдМероприятия,Отменено");
		Иначе
			
			Если СтрокаМероприятия.Отменено Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не найдены сведения об отмененном мероприятии с идентификатором - %1'"), СтрокаМероприятия.ИдМероприятия);
			Иначе
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не найдены сведения о мероприятии с идентификатором - %1'"), СтрокаМероприятия.ИдМероприятия);
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Мероприятия[" + Формат(СтрокаМероприятия.НомерСтроки - 1, "ЧН=; ЧГ=") + "].ВидМероприятия", "Объект");
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЭлектронныеТрудовыеКнижкиКлиентСервер.УстановитьОтображениеТаблицыМероприятия(ЭтотОбъект, Объект.Организация, Объект.Мероприятия);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПредставленияДолжностиТаблицыМероприятий()
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Объект.Мероприятия.Передано");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Ложь;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Мероприятия");
	ОформляемоеПоле.Использование = Истина;
	
КонецПроцедуры

#КонецОбласти
