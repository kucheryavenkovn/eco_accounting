
#Область Переменные

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Параметры.Основание) 
		И ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
	
		ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Основание, "ВидОперации");
		
		Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары 
			И ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги
			И ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия Тогда
		
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Ввод акта о расхождениях возможен только для поступлений товаров или услуг.'"),,,,Отказ);
				
			Возврат;
		
		КонецЕсли;
	
	КонецЕсли; 
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	УстановитьУсловноеОформление(); // Вызываем после установки текущей страницы.
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтотОбъект,
		"БП.Документ.АктОРасхождениях",
		"ФормаДокумента",
		НСтр("ru='Новости: Акт о расхождениях'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиБП.КомандыЭДО_ФормаДокумента(ЭтотОбъект);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами	
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	// Подсистема "ОбменСКонтрагентами"
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец Подсистема "ОбменСКонтрагентами"
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
		Прочитать();
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ПредставлениеДокумента = Документы.АктОРасхождениях.ПолучитьПредставлениеДокумента(Объект.Ссылка);
	УстановитьЗаголовокФормы(ЭтотОбъект, ПредставлениеДокумента);
	
	Если Не ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Ценообразование.ОбновитьЦеныНоменклатуры(Объект.Ссылка,
			Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам,
			Объект.ВалютаДокумента,
			Объект.СуммаВключаетНДС);
	КонецЕсли;
	
	УстановитьСостояниеДокумента();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_АктОРасхождениях", ПараметрыЗаписи, Объект.Ссылка);
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиКлиент.ПослеЗаписи_ФормаДокумента(ЭтотОбъект, ПараметрыЗаписи);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПриИзмененииДаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументПоступленияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументПоступления) Тогда
		Объект.Контрагент         = Неопределено;
		Объект.ДоговорКонтрагента = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументПоступления) 
		И (Объект.Товары.Количество() > 0 ИЛИ Объект.Услуги.Количество() > 0 ИЛИ Объект.АгентскиеУслуги.Количество() > 0) Тогда
			ТекстВопроса = НСтр("ru = 'Заполнить документ по основанию?'");
			Оповещение = Новый ОписаниеОповещения("ВопросЗаполнитьДокументПоОснованиюЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, НСтр("ru = 'Заполнить документ'"));
	Иначе
		ДокументПоступленияПриИзмененииСервер(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументПоступленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Тип") Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	Если СтрокаТаблицы.Номенклатура = Неопределено Тогда
		СтрокаТаблицы.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		СтрокаТаблицы.ЕстьВДокументеПоступления      = Ложь;
		СтрокаТаблицы.ИдентификаторСтроки            = "";
		СтрокаТаблицы.КоличествоПоДокументу          = 0;
		СтрокаТаблицы.ЦенаПоДокументу                = 0;
		СтрокаТаблицы.СуммаПоДокументу               = 0;
		СтрокаТаблицы.СуммаНДСПоДокументу            = 0;
		СтрокаТаблицы.НомерГТДПоДокументу            = ПредопределенноеЗначение("Справочник.НомераГТД.ПустаяСсылка");
		СтрокаТаблицы.СтранаПроисхожденияПоДокументу = ПредопределенноеЗначение("Справочник.СтраныМира.ПустаяСсылка");
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	Если СтрокаТаблицы.ЕстьВДокументеПоступления Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Вместо удаления строки исходного документа очистите суммовые и количественные показатели.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура,
		|Количество, КоличествоПоДокументу, КоличествоОтклонение,
		|Цена, ЦенаПоДокументу, ЦенаОтклонение,
		|Сумма, СуммаПоДокументу, СуммаОтклонение,
		|СтавкаНДС,
		|СуммаНДС, СуммаНДСПоДокументу, СуммаНДСОтклонение,
		|НомерГТД, НомерГТДПоДокументу,
		|СтранаПроисхождения, СтранаПроисхожденияПоДокументу,
		|НадписьПоДокументу, НадписьПоФакту, НадписьОтклонение,
		|Всего, ВсегоПоДокументу, ВсегоОтклонение");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Склад, ДоговорКонтрагента, ТипЦен, СуммаВключаетНДС,
		|ВалютаДокумента, ПрименяютсяСтавки4и2");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеОбъекта.ПрименяютсяСтавки4и2 = ПрименяютсяСтавки4и2;
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ПриИзмененииСтавкаНДС(Элемент);
	
	СтрокаТаблицы = Элементы[Элемент.Родитель.Родитель.Имя].ТекущиеДанные;
	ЗначениеСтавкиНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС, ПрименяютсяСтавки4и2);
	
	ПриИзмененииСуммаНаКлиенте(
		СтрокаТаблицы, 
		"КоличествоПоДокументу, ЦенаПоДокументу, СуммаПоДокументу, СуммаНДСПоДокументу, ВсегоПоДокументу", 
		ЗначениеСтавкиНДС,
		0);
		
	ПересчитатьОтклонение(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ПриИзмененииКоличествоЦена(Элемент, "Товары");
	
	ПересчитатьОтклонение(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПоДокументуПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	ПриИзмененииКоличествоЦенаНаКлиенте(
		СтрокаТаблицы, 
		"КоличествоПоДокументу, ЦенаПоДокументу, СуммаПоДокументу, СуммаНДСПоДокументу, ВсегоПоДокументу", 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС(СтрокаТаблицы), ПрименяютсяСтавки4и2),
		0);
	ПересчитатьОтклонение(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ПриИзмененииКоличествоЦена(Элемент, "Товары");
	ПересчитатьОтклонение(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаДоИзмененияПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	ПриИзмененииКоличествоЦенаНаКлиенте(
		СтрокаТаблицы, 
		"КоличествоПоДокументу, ЦенаПоДокументу, СуммаПоДокументу, СуммаНДСПоДокументу, ВсегоПоДокументу", 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС(СтрокаТаблицы), ПрименяютсяСтавки4и2),
		0);
	ПересчитатьОтклонение(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ПриИзмененииСумма(Элемент);
	ПересчитатьОтклонение(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаДоИзмененияПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	ПриИзмененииСуммаНаКлиенте(
		СтрокаТаблицы, 
		"КоличествоПоДокументу, ЦенаПоДокументу, СуммаПоДокументу, СуммаНДСПоДокументу, ВсегоПоДокументу", 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС(СтрокаТаблицы), ПрименяютсяСтавки4и2),
		0);
	ПересчитатьОтклонение(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСДоИзмененияПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	ПриИзмененииСуммаНДСНаКлиенте(
		СтрокаТаблицы,
		"КоличествоПоДокументу, ЦенаПоДокументу, СуммаПоДокументу, СуммаНДСПоДокументу, ВсегоПоДокументу");
	ПересчитатьОтклонение(Элемент);
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаНДС(ЭтаФорма, "Товары");
	ПересчитатьОтклонение(Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПередНачаломИзменения(Элемент, Отказ)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
		СтрокаТаблицы.ЕстьВДокументеПоступления = Ложь;
		СтрокаТаблицы.ИдентификаторСтроки       = "";
		СтрокаТаблицы.КоличествоПоДокументу     = 0;
		СтрокаТаблицы.ЦенаПоДокументу           = 0;
		СтрокаТаблицы.СуммаПоДокументу          = 0;
		СтрокаТаблицы.СуммаНДСПоДокументу       = 0;
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПередУдалением(Элемент, Отказ)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	Если СтрокаТаблицы.ЕстьВДокументеПоступления Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр(
			"ru = 'Для удаления строки исходного документа необходимо очистить все суммовые и количественные показатели.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Содержание, 
		|Количество, КоличествоПоДокументу, КоличествоОтклонение,
		|Цена, ЦенаПоДокументу, ЦенаОтклонение,
		|Сумма, СуммаПоДокументу, СуммаОтклонение,
		|СтавкаНДС,
		|СуммаНДС, СуммаНДСПоДокументу, СуммаНДСОтклонение,
		|НадписьПоДокументу, НадписьПоФакту, НадписьОтклонение,
		|Всего, ВсегоПоДокументу, ВсегоОтклонение");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Склад, ДоговорКонтрагента, ТипЦен, СуммаВключаетНДС,
		|ВалютаДокумента, ПрименяютсяСтавки4и2");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеОбъекта.ПрименяютсяСтавки4и2 = ПрименяютсяСтавки4и2;
		
	УслугиНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
		
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	ПриИзмененииКоличествоЦена(Элемент, "Услуги");
	ПересчитатьОтклонение(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПоДокументуПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	
	ПриИзмененииКоличествоЦенаНаКлиенте(
		СтрокаТаблицы, 
		"КоличествоПоДокументу, ЦенаПоДокументу, СуммаПоДокументу, СуммаНДСПоДокументу, ВсегоПоДокументу", 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС(СтрокаТаблицы), ПрименяютсяСтавки4и2),
		1);
	ПересчитатьОтклонение(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	ПриИзмененииКоличествоЦена(Элемент, "Услуги");
	ПересчитатьОтклонение(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПоДокументуПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	
	ПриИзмененииКоличествоЦенаНаКлиенте(
		СтрокаТаблицы, 
		"КоличествоПоДокументу, ЦенаПоДокументу, СуммаПоДокументу, СуммаНДСПоДокументу, ВсегоПоДокументу", 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС(СтрокаТаблицы), ПрименяютсяСтавки4и2),
		1);
	ПересчитатьОтклонение(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	
	ПриИзмененииСумма(Элемент);
	ПересчитатьОтклонение(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПоДокументуПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	
	ПриИзмененииСуммаНаКлиенте(
		СтрокаТаблицы, 
		"КоличествоПоДокументу, ЦенаПоДокументу, СуммаПоДокументу, СуммаНДСПоДокументу, ВсегоПоДокументу", 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС(СтрокаТаблицы), ПрименяютсяСтавки4и2),
		1);
	ПересчитатьОтклонение(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	
	ПриИзмененииСтавкаНДС(Элемент);
	ПересчитатьОтклонение(Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАгентскиеУслуги

&НаКлиенте
Процедура АгентскиеУслугиПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		СтрокаТаблицы = Элементы.АгентскиеУслуги.ТекущиеДанные;
		СтрокаТаблицы.ЕстьВДокументеПоступления = Ложь;
		СтрокаТаблицы.ИдентификаторСтроки       = "";
		СтрокаТаблицы.КоличествоПоДокументу     = 0;
		СтрокаТаблицы.ЦенаПоДокументу           = 0;
		СтрокаТаблицы.СуммаПоДокументу          = 0;
		СтрокаТаблицы.СуммаНДСПоДокументу       = 0;
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиПередУдалением(Элемент, Отказ)
	
	СтрокаТаблицы = Элементы.АгентскиеУслуги.ТекущиеДанные;
	Если СтрокаТаблицы.ЕстьВДокументеПоступления Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр(
			"ru = 'Для удаления строки исходного документа необходимо очистить все суммовые и количественные показатели.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.АгентскиеУслуги.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Содержание, 
		|Количество, КоличествоПоДокументу, КоличествоОтклонение,
		|Цена, ЦенаПоДокументу, ЦенаОтклонение,
		|Сумма, СуммаПоДокументу, СуммаОтклонение,
		|СтавкаНДС,
		|СуммаНДС, СуммаНДСПоДокументу, СуммаНДСОтклонение,
		|НадписьПоДокументу, НадписьПоФакту, НадписьОтклонение,
		|Всего, ВсегоПоДокументу, ВсегоОтклонение");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Склад, ДоговорКонтрагента, ТипЦен, СуммаВключаетНДС, ВалютаДокумента");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	АгентскиеУслугиНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиКоличествоПриИзменении(Элемент)
	
	ПриИзмененииКоличествоЦена(Элемент, "АгентскиеУслуги");
	ПересчитатьОтклонение(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиКоличествоПоДокументуПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.АгентскиеУслуги.ТекущиеДанные;
	
	ПриИзмененииКоличествоЦенаНаКлиенте(
		СтрокаТаблицы, 
		"КоличествоПоДокументу, ЦенаПоДокументу, СуммаПоДокументу, СуммаНДСПоДокументу, ВсегоПоДокументу", 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС(СтрокаТаблицы), ПрименяютсяСтавки4и2),
		1);
	ПересчитатьОтклонение(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиЦенаПриИзменении(Элемент)
	
	ПриИзмененииКоличествоЦена(Элемент, "АгентскиеУслуги");
	ПересчитатьОтклонение(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиЦенаПоДокументуПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.АгентскиеУслуги.ТекущиеДанные;
	
	ПриИзмененииКоличествоЦенаНаКлиенте(
		СтрокаТаблицы, 
		"КоличествоПоДокументу, ЦенаПоДокументу, СуммаПоДокументу, СуммаНДСПоДокументу, ВсегоПоДокументу", 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС(СтрокаТаблицы), ПрименяютсяСтавки4и2),
		1);
	ПересчитатьОтклонение(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиСуммаПриИзменении(Элемент)
	
	ПриИзмененииСумма(Элемент);
	ПересчитатьОтклонение(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиСуммаПоДокументуПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.АгентскиеУслуги.ТекущиеДанные;
	
	ПриИзмененииСуммаНаКлиенте(
		СтрокаТаблицы, 
		"КоличествоПоДокументу, ЦенаПоДокументу, СуммаПоДокументу, СуммаНДСПоДокументу, ВсегоПоДокументу", 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС(СтрокаТаблицы), ПрименяютсяСтавки4и2),
		1);
	ПересчитатьОтклонение(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиСтавкаНДСПриИзменении(Элемент)
	
	ПриИзмененииСтавкаНДС(Элемент);
	ПересчитатьОтклонение(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиКонтрагентПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.АгентскиеУслуги.ТекущиеДанные;
	
	ДанныеСтрокаТаблицы = Новый Структура("Контрагент, ДоговорКонтрагента");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, СтрокаТаблицы);
	
	ПараметрыОбъекта = Новый Структура("Организация, Дата");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	Изменения = КомитентПриИзмененииСервер(ДанныеСтрокаТаблицы, ПараметрыОбъекта, "АгентскиеУслуги");
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Изменения);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.АгентскиеУслуги);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ТаблицаФормыВыбор(ЭтотОбъект, Элемент, Поле);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтотОбъект,
		Команда);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УправлениеФормой

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.Организация.ТолькоПросмотр = ЗначениеЗаполнено(Объект.ДокументПоступления);
	
	// Установить видимость реквизитов и заголовков колонок.
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийАктОРасхождениях.РасхожденияПриПриемке") Тогда
		//В этом случае внешний вид определяется видом операции исходного документа
		ЕстьТовары = Объект.Товары.Количество() > 0;
		ЕстьУслуги = Объект.Услуги.Количество() > 0;
		ЕстьАгентскиеУслуги = Объект.АгентскиеУслуги.Количество() > 0;
		
		Элементы.ГруппаТовары.Видимость          = ЕстьТовары ИЛИ НЕ (ЕстьУслуги ИЛИ ЕстьАгентскиеУслуги);
		Элементы.ГруппаУслуги.Видимость          = ЕстьУслуги;
		Элементы.ГруппаАгентскиеУслуги.Видимость = ЕстьАгентскиеУслуги;
	Иначе
		Элементы.ГруппаАгентскиеУслуги.Видимость = Форма.ВозможнаКомиссияПоЗакупке;
	КонецЕсли; 
	
	ЗаполнитьСписокВыбораСтавокНДС(Форма);
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента, "ВидДоговора, НДСПоСтавкам4и2");
	
	ВидДоговораДокумента = РеквизитыДоговора.ВидДоговора;
	ПрименяютсяСтавки4и2 = РеквизитыДоговора.НДСПоСтавкам4и2;
	
	ВозможнаКомиссияПоЗакупке = (ВидДоговораДокумента <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ПредставлениеДокумента = Документы.АктОРасхождениях.ПолучитьПредставлениеДокумента(Объект.Ссылка);
	УстановитьЗаголовокФормы(ЭтотОбъект, ПредставлениеДокумента);
	
	ЭтоРасхожденияПриПриемке = (Объект.ВидОперации = Перечисления.ВидыОперацийАктОРасхождениях.РасхожденияПриПриемке);
	
	Элементы.ДокументПоступления.ТолькоПросмотр = ЭтоРасхожденияПриПриемке;
	Элементы.Организация.ТолькоПросмотр         = ЭтоРасхожденияПриПриемке;
	
	Элементы.Товары.ТолькоПросмотр              = ЭтоРасхожденияПриПриемке;
	Элементы.Услуги.ТолькоПросмотр              = ЭтоРасхожденияПриПриемке;
	Элементы.АгентскиеУслуги.ТолькоПросмотр     = ЭтоРасхожденияПриПриемке;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокФормы(ЭтотОбъект, СтруктураПредставленияДокумента)
	
	ЭтотОбъект.Заголовок = СтруктураПредставленияДокумента.ПредставлениеДокумента;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораСтавокНДС(ЭтотОбъект)
	
	Элементы = ЭтотОбъект.Элементы;
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.ТоварыСтавкаНДС.СписокВыбора);
	МассивЭлементов.Добавить(Элементы.УслугиСтавкаНДС.СписокВыбора);
	
	Для Каждого СписокВыбора Из МассивЭлементов Цикл
		
		Если ЭтотОбъект.ПрименяютсяСтавки4и2 Тогда
			
			СписокВыбора.Очистить();
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18"), "4%");
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10"), "2%");
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
			
		Иначе
			
			СписокВыбора.Очистить();
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20_120"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18_118"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10_110"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область УсловноеОформление

&НаСервере
Процедура УстановитьУсловноеОформление()

	НастройкиУсловногоОформления = Новый Структура();

	УсловноеОформление.Элементы.Очистить();

	// Условное оформление, связанное с видимостью, устанавливаем сразу для всех колонок.
	УстановитьУсловноеОформлениеВидимость();

	// Условное оформление для полей, расположенных на страницах
	
	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУсловноеОформление(ЭтотОбъект)
	
	Элементы = ЭтотОбъект.Элементы;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаТовары Тогда
		
		НадоИнициализировать = Ложь;
		Если НЕ ЭтотОбъект.НастройкиУсловногоОформления.Свойство("ТоварыОбщееПроинициализировано") Тогда
			НадоИнициализировать = Истина;
		КонецЕсли;
		Если ЭтотОбъект.ПрименяютсяСтавки4и2
			И НЕ ЭтотОбъект.НастройкиУсловногоОформления.Свойство("ТоварыПрименяютсяСтавки4и2Проинициализировано") Тогда
			НадоИнициализировать = Истина;
		КонецЕсли;
		
		Если НадоИнициализировать Тогда
			ЭтотОбъект.УстановитьУсловноеОформлениеТовары();
		КонецЕсли;
	
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаУслуги Тогда
		
		НадоИнициализировать = Ложь;
		Если НЕ ЭтотОбъект.НастройкиУсловногоОформления.Свойство("УслугиОбщееПроинициализировано") Тогда
			НадоИнициализировать = Истина;
		КонецЕсли;
		Если ЭтотОбъект.ПрименяютсяСтавки4и2
			И НЕ ЭтотОбъект.НастройкиУсловногоОформления.Свойство("УслугиПрименяютсяСтавки4и2Проинициализировано") Тогда
			НадоИнициализировать = Истина;
		КонецЕсли;
		
		Если НадоИнициализировать Тогда
			ЭтотОбъект.УстановитьУсловноеОформлениеУслуги();
		КонецЕсли;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаАгентскиеУслуги
		И НЕ ЭтотОбъект.НастройкиУсловногоОформления.Свойство("АгентскиеУслугиПроинициализировано") Тогда
		
		ЭтотОбъект.УстановитьУсловноеОформлениеАгентскиеУслуги();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеВидимость()

	// Товары отклонение
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНадписьОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКоличествоОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЦенаОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДСОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВсегоОтклонение");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.КоличествоОтклонение", ВидСравненияКомпоновкиДанных.Равно, 0);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ЦенаОтклонение", ВидСравненияКомпоновкиДанных.Равно, 0);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.СуммаОтклонение", ВидСравненияКомпоновкиДанных.Равно, 0);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.СуммаНДСОтклонение", ВидСравненияКомпоновкиДанных.Равно, 0);
		
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Услуги отклонение
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиНадписьОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиКоличествоОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиЦенаОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаНДСОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиВсегоОтклонение");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.КоличествоОтклонение", ВидСравненияКомпоновкиДанных.Равно, 0);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.ЦенаОтклонение", ВидСравненияКомпоновкиДанных.Равно, 0);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.СуммаОтклонение", ВидСравненияКомпоновкиДанных.Равно, 0);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.СуммаНДСОтклонение", ВидСравненияКомпоновкиДанных.Равно, 0);
		
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Агентские услуги отклонение
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиНадписьОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиКоличествоОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиЦенаОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСуммаОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСуммаНДСОтклонение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиВсегоОтклонение");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.АгентскиеУслуги.КоличествоОтклонение", ВидСравненияКомпоновкиДанных.Равно, 0);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.АгентскиеУслуги.ЦенаОтклонение", ВидСравненияКомпоновкиДанных.Равно, 0);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.АгентскиеУслуги.СуммаОтклонение", ВидСравненияКомпоновкиДанных.Равно, 0);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.АгентскиеУслуги.СуммаНДСОтклонение", ВидСравненияКомпоновкиДанных.Равно, 0);
		
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеТовары() Экспорт

	Если НЕ НастройкиУсловногоОформления.Свойство("ТоварыОбщееПроинициализировано") Тогда
		УстановитьУсловноеОформлениеТоварыОбщее();
	КонецЕсли;
	
	Если НЕ НастройкиУсловногоОформления.Свойство("ТоварыПрименяютсяСтавки4и2Проинициализировано") Тогда
		УстановитьУсловноеОформлениеТоварыПрименяютсяСтавки4и2();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеТоварыОбщее()

	НастройкиУсловногоОформления.Вставить("ТоварыОбщееПроинициализировано", Истина);
	
	// Определяются из документа-основания

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНоменклатура");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ЕстьВДокументеПоступления", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	

	// ТоварыСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеТоварыПрименяютсяСтавки4и2()

	Если НЕ ПрименяютсяСтавки4и2 Тогда
		Возврат;
	КонецЕсли;

	НастройкиУсловногоОформления.Вставить("ТоварыПрименяютсяСтавки4и2Проинициализировано", Истина);

	// ТоварыСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяютсяСтавки4и2", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС18);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС18_118);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '4 %'"));


	// ТоварыСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяютсяСтавки4и2", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС10);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС10_110);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '2 %'"));

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеУслуги() Экспорт

	Если НЕ НастройкиУсловногоОформления.Свойство("УслугиОбщееПроинициализировано") Тогда
		УстановитьУсловноеОформлениеУслугиОбщее();
	КонецЕсли;
	
	Если НЕ НастройкиУсловногоОформления.Свойство("УслугиПрименяютсяСтавки4и2Проинициализировано") Тогда
		УстановитьУсловноеОформлениеУслугиПрименяютсяСтавки4и2();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеУслугиОбщее()

	НастройкиУсловногоОформления.Вставить("УслугиОбщееПроинициализировано", Истина);
	
	// УслугиСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиНоменклатура");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.ЕстьВДокументеПоступления", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// УслугиСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеУслугиПрименяютсяСтавки4и2()

	Если НЕ ПрименяютсяСтавки4и2 Тогда
		Возврат;
	КонецЕсли;

	НастройкиУсловногоОформления.Вставить("УслугиПрименяютсяСтавки4и2Проинициализировано", Истина);

		// УслугиСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСтавкаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяютсяСтавки4и2", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС18);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС18_118);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '4 %'"));


	// УслугиСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСтавкаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяютсяСтавки4и2", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС10);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС10_110);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '2 %'"));

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеАгентскиеУслуги() Экспорт

	НастройкиУсловногоОформления.Вставить("АгентскиеУслугиПроинициализировано", Истина);
	
	// АгентскиеУслугиСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиНоменклатура");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиКонтрагент");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиДоговорКонтрагента");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.АгентскиеУслуги.ЕстьВДокументеПоступления", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КорректироватьБУиНУ", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// АгентскиеУслугиСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.АгентскиеУслуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.АгентскиеУслуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормыПродолжение

&НаКлиенте
Процедура ПриИзмененииДаты()
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата,
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
	
	// Если определили, что изменение даты может повлиять на какие-либо параметры,
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииСервер();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормой(ЭтотОбъект);
	
	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьДокументПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьТабличнуюЧасть = (Результат = КодВозвратаДиалога.Да);
	
	ДокументПоступленияПриИзмененииСервер(ЗаполнитьТабличнуюЧасть);
	
КонецПроцедуры

&НаСервере
Процедура ДокументПоступленияПриИзмененииСервер(ЗаполнитьТабличныеЧасти = Истина)
	
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	ОбъектЗначение.ЗаполнитьСвойстваШапки();
	ЗначениеВРеквизитФормы(ОбъектЗначение,"Объект");
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента, "ВидДоговора, НДСПоСтавкам4и2");
	
	ВидДоговораДокумента = РеквизитыДоговора.ВидДоговора;
	ПрименяютсяСтавки4и2 = РеквизитыДоговора.НДСПоСтавкам4и2;
	
	Если ЗаполнитьТабличныеЧасти Тогда
		Документы.АктОРасхождениях.ЗаполнитьПоДокументу(Объект);
	КонецЕсли; 
	
	ОбновитьУсловноеОформление(ЭтотОбъект);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	КонецЦикла;

	Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Объект.АгентскиеУслуги Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыАгентскиеУслуги(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	УстановитьФункциональныеОпцииФормы();
	
	// Выполняем общие действия для всех документов при изменении Организация.
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(Объект, Пользователи.ТекущийПользователь());
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ПодразделениеПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
		Если НЕ ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
			Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПодразделениеПоУмолчанию, Объект.Организация) Тогда
				Объект.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПродолжение

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(ЭтотОбъект)
	
	АктОРасхождениях = ЭтотОбъект.Объект;
	
	МассивТабличныхЧастейДляРасчетаИтогов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Товары,Услуги,АгентскиеУслуги", ",");
	
	СуммаИтогов    = 0;
	СуммаНДСИтогов = 0;
	
	Для Каждого ТекущаяТабличнаяЧасть Из МассивТабличныхЧастейДляРасчетаИтогов Цикл
		СуммаИтогов    = СуммаИтогов    + АктОРасхождениях[ТекущаяТабличнаяЧасть].Итог("ВсегоОтклонение");
		СуммаНДСИтогов = СуммаНДСИтогов + АктОРасхождениях[ТекущаяТабличнаяЧасть].Итог("СуммаНДСОтклонение");
	КонецЦикла;
	
	ЭтотОбъект.ИтогиВсего    = СуммаИтогов;
	ЭтотОбъект.ИтогиВсегоНДС = СуммаНДСИтогов;
	
КонецПроцедуры

// Перегружает данные из одной коллекции в другую с переименованием ключей
//
// Параметры:
//  <Источник>            - Структура, ДанныеФормыКоллекция - коллекция из которой выгружаем
//  <ИменаПолейИсточник>  - Строка - строка свойств коллекции источника через запятую
//  <ИменаПолейИсточник>  - Строка - строка свойств коллекции источника через запятую
//
// Возвращаемое значение:
//   Структура             - структура с ключами из ИменаПолейПриемник содержащая данные исходной коллекции
//
&НаКлиенте
Функция ПреобразоватьКоллекцию(Источник, ИменаПолейИсточник, ИменаПолейПриемник)
	Приемник = Новый Структура;
	
	ПоляИсточник = СтрРазделить(ИменаПолейИсточник, ",");
	ПоляПриемник = СтрРазделить(ИменаПолейПриемник, ",");
	
	Для НомерПоля = 0 По ПоляИсточник.Количество() - 1 Цикл
		ИмяПоляИсточник = СокрЛП(ПоляИсточник[НомерПоля]);
		ИмяПоляПриемник = СокрЛП(ПоляПриемник[НомерПоля]);
		
		Если ЗначениеЗаполнено(ИмяПоляПриемник) Тогда
			Приемник.Вставить(
				ИмяПоляПриемник, 
				?(ЗначениеЗаполнено(ИмяПоляИсточник), Источник[ИмяПоляИсточник], Неопределено));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Приемник;
КонецФункции

&НаКлиенте
Процедура ПересчитатьСуммуНДС(СтрокаТабличнойЧасти, ЗначениеСтавкиНДС)
	СтрокаТабличнойЧасти.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма, Объект.СуммаВключаетНДС, ЗначениеСтавкиНДС);
	СтрокаТабличнойЧасти.Всего    = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
КонецПроцедуры 

&НаКлиенте
Процедура ПриИзмененииКоличествоЦенаНаКлиенте(СтрокаТабличнойЧасти, ИменаПолей, ЗначениеСтавкиНДС, ЗначениеПустогоКоличества)
	ПриведеннаяСтрока = ПреобразоватьКоллекцию(СтрокаТабличнойЧасти, ИменаПолей, "Количество, Цена, Сумма, СуммаНДС, Всего");
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(ПриведеннаяСтрока, ЗначениеПустогоКоличества);
	
	ПересчитатьСуммуНДС(ПриведеннаяСтрока, ЗначениеСтавкиНДС);
	
	ЗаполнитьЗначенияСвойств(
		СтрокаТабличнойЧасти, 
		ПреобразоватьКоллекцию(ПриведеннаяСтрока, "Количество, Цена, Сумма, СуммаНДС, Всего", ИменаПолей));
КонецПроцедуры
	
&НаКлиенте
Процедура ПриИзмененииСуммаНаКлиенте(СтрокаТабличнойЧасти, ИменаПолей, ЗначениеСтавкиНДС, ЗначениеПустогоКоличества)
	ПриведеннаяСтрока = ПреобразоватьКоллекцию(СтрокаТабличнойЧасти, ИменаПолей, "Количество, Цена, Сумма, СуммаНДС, Всего");
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(ПриведеннаяСтрока, ЗначениеПустогоКоличества);
	
	ПересчитатьСуммуНДС(ПриведеннаяСтрока, ЗначениеСтавкиНДС);
	
	ЗаполнитьЗначенияСвойств(
		СтрокаТабличнойЧасти, 
		ПреобразоватьКоллекцию(ПриведеннаяСтрока, "Количество, Цена, Сумма, СуммаНДС, Всего", ИменаПолей));
КонецПроцедуры 

&НаКлиенте
Процедура ПриИзмененииСуммаНДСНаКлиенте(СтрокаТабличнойЧасти, ИменаПолей)
	ПриведеннаяСтрока = ПреобразоватьКоллекцию(СтрокаТабличнойЧасти, ИменаПолей, "Количество, Цена, Сумма, СуммаНДС, Всего");
	
	ПриведеннаяСтрока.Всего = ПриведеннаяСтрока.Сумма + ?(Объект.СуммаВключаетНДС, 0, ПриведеннаяСтрока.СуммаНДС);
	
	ЗаполнитьЗначенияСвойств(
		СтрокаТабличнойЧасти, 
		ПреобразоватьКоллекцию(ПриведеннаяСтрока, "Количество, Цена, Сумма, СуммаНДС, Всего", ИменаПолей));
КонецПроцедуры 

&НаКлиенте
Процедура ПриИзмененииКоличествоЦена(Элемент, ИмяТабличнойЧасти)
	
	СтрокаТаблицы = Элементы[Элемент.Родитель.Родитель.Имя].ТекущиеДанные;
	
	Если ИмяТабличнойЧасти = "Услуги"
		ИЛИ ИмяТабличнойЧасти = "АгентскиеУслуги" Тогда
		ЗначениеПустогоКоличества = 1;
	Иначе
		ЗначениеПустогоКоличества = 0;
	КонецЕсли;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы, ЗначениеПустогоКоличества);
	
	Если СтрокаТаблицы.Свойство("СуммаНДС") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС,
			ПрименяютсяСтавки4и2 И ИмяТабличнойЧасти <> "АгентскиеУслуги");
	КонецЕсли;
	
	Если СтрокаТаблицы.Свойство("Всего") Тогда
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЕсли;
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСумма(Элемент)
	
	ИмяТЧ = Элемент.Родитель.Родитель.Имя;
	
	СтрокаТаблицы = Элементы[ИмяТЧ].ТекущиеДанные;
	
	Если СтрокаТаблицы.Свойство("Количество") Тогда
		Если СтрокаТаблицы.Количество = 0 Тогда
			СтрокаТаблицы.Цена = СтрокаТаблицы.Сумма;
		Иначе
			СтрокаТаблицы.Цена = СтрокаТаблицы.Сумма / СтрокаТаблицы.Количество;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаТаблицы.Свойство("СуммаНДС") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС, 
			ПрименяютсяСтавки4и2 И ИмяТЧ <> "АгентскиеУслуги");
	КонецЕсли;
	
	Если СтрокаТаблицы.Свойство("Всего") Тогда
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЕсли;
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСтавкаНДС(Элемент)
	
	СтрокаТаблицы = Элементы[Элемент.Родитель.Родитель.Имя].ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС, ПрименяютсяСтавки4и2);
	Если СтрокаТаблицы.Свойство("Всего") Тогда
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьОтклонение(Элемент)
	
	СтрокаТаблицы = Элементы[Элемент.Родитель.Родитель.Имя].ТекущиеДанные;
	
	СтрокаТаблицы.КоличествоОтклонение = СтрокаТаблицы.Количество - СтрокаТаблицы.КоличествоПоДокументу;
	СтрокаТаблицы.ЦенаОтклонение       = СтрокаТаблицы.Цена - СтрокаТаблицы.ЦенаПоДокументу;
	СтрокаТаблицы.СуммаОтклонение      = СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаПоДокументу;
	СтрокаТаблицы.СуммаНДСОтклонение   = СтрокаТаблицы.СуммаНДС - СтрокаТаблицы.СуммаНДСПоДокументу;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура ЗаполнитьЗаголовкиСтрок(СтрокаТаблицы)
	
	СтрокаТаблицы.НадписьПоДокументу    = НСтр("ru = 'по документу:'");
	СтрокаТаблицы.НадписьПоФакту        = НСтр("ru = 'по факту:'");
	СтрокаТаблицы.НадписьОтклонение     = НСтр("ru = 'расхождения:'");
	
КонецПроцедуры

&НаКлиенте
Функция СтавкаНДС(СтрокаТаблицы)
	
	СтавкаНДС = СтрокаТаблицы.СтавкаНДС;
	
	Возврат СтавкаНДС;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТоварыПродолжение

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам);
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("ЭтоКомиссия",
		(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОбъекта.ДоговорКонтрагента, "ВидДоговора") = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом));
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура,
		ДанныеОбъекта,
		Ложь);
		
	Если СведенияОНоменклатуре <> Неопределено Тогда
		СтрокаТабличнойЧасти.Цена                = СведенияОНоменклатуре.Цена;
		СтрокаТабличнойЧасти.СтавкаНДС           = СведенияОНоменклатуре.СтавкаНДС;
		СтрокаТабличнойЧасти.НомерГТД            = СведенияОНоменклатуре.НомерГТД;
		СтрокаТабличнойЧасти.СтранаПроисхождения = СведенияОНоменклатуре.СтранаПроисхождения;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС, ДанныеОбъекта.ПрименяютсяСтавки4и2);
		
		СтрокаТабличнойЧасти.ЦенаПоДокументу                = СтрокаТабличнойЧасти.Цена;
		СтрокаТабличнойЧасти.НомерГТДПоДокументу            = СтрокаТабличнойЧасти.НомерГТД;
		СтрокаТабличнойЧасти.СтранаПроисхожденияПоДокументу = СтрокаТабличнойЧасти.СтранаПроисхождения;
		СтрокаТабличнойЧасти.СуммаПоДокументу               = СтрокаТабличнойЧасти.Сумма;
		СтрокаТабличнойЧасти.СуммаНДСПоДокументу            = СтрокаТабличнойЧасти.СуммаНДС;
		
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КомитентПриИзмененииСервер(Знач СтрокаТаблицы, Знач Объект, Знач ИмяТабличнойЧасти)
	
	Изменения = Новый Структура;
	
	МассивВидовАгентскихДоговоров = Новый Массив;
	МассивВидовАгентскихДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
	
	Если РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
		СтрокаТаблицы.ДоговорКонтрагента,
		СтрокаТаблицы.Контрагент,
		Объект.Организация,
		МассивВидовАгентскихДоговоров) Тогда
		
		Изменения.Вставить("ДоговорКонтрагента", СтрокаТаблицы.ДоговорКонтрагента);
		
	КонецЕсли;
	
	Возврат Изменения;
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, СуммаВключаетНДС)
	
	СтрокаТаблицы.Всего                = СтрокаТаблицы.Сумма            + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	СтрокаТаблицы.ВсегоПоДокументу     = СтрокаТаблицы.СуммаПоДокументу + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДСПоДокументу);
	
	СтрокаТаблицы.ВсегоОтклонение      = СтрокаТаблицы.Всего      - СтрокаТаблицы.ВсегоПоДокументу;
	
	СтрокаТаблицы.КоличествоОтклонение = СтрокаТаблицы.Количество - СтрокаТаблицы.КоличествоПоДокументу;
	СтрокаТаблицы.ЦенаОтклонение       = СтрокаТаблицы.Цена       - СтрокаТаблицы.ЦенаПоДокументу;
	СтрокаТаблицы.СуммаОтклонение      = СтрокаТаблицы.Сумма      - СтрокаТаблицы.СуммаПоДокументу;
	СтрокаТаблицы.СуммаНДСОтклонение   = СтрокаТаблицы.СуммаНДС   - СтрокаТаблицы.СуммаНДСПоДокументу;
	
	ЗаполнитьЗаголовкиСтрок(СтрокаТаблицы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслугиПродолжение

&НаСервереБезКонтекста
Процедура УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам);
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("ЭтоКомиссия",
		(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОбъекта.ДоговорКонтрагента, "ВидДоговора") = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом));
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура,
		ДанныеОбъекта,
		Ложь);
		
	Если НЕ СведенияОНоменклатуре = Неопределено Тогда
		СтрокаТабличнойЧасти.Содержание = СведенияОНоменклатуре.НаименованиеПолное;
		СтрокаТабличнойЧасти.Цена       = СведенияОНоменклатуре.Цена;
		СтрокаТабличнойЧасти.СтавкаНДС  = СведенияОНоменклатуре.СтавкаНДС;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, 1);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС,
			ДанныеОбъекта.ПрименяютсяСтавки4и2);
			
		СтрокаТабличнойЧасти.ЦенаПоДокументу                = СтрокаТабличнойЧасти.Цена;
		СтрокаТабличнойЧасти.СуммаПоДокументу               = СтрокаТабличнойЧасти.Сумма;
		СтрокаТабличнойЧасти.СуммаНДСПоДокументу            = СтрокаТабличнойЧасти.СуммаНДС;
	
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТаблицы, СуммаВключаетНДС)
	
	СтрокаТаблицы.Всего                = СтрокаТаблицы.Сумма            + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	СтрокаТаблицы.ВсегоПоДокументу     = СтрокаТаблицы.СуммаПоДокументу + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДСПоДокументу);
	
	СтрокаТаблицы.ВсегоОтклонение      = СтрокаТаблицы.Всего      - СтрокаТаблицы.ВсегоПоДокументу;
	
	СтрокаТаблицы.КоличествоОтклонение = СтрокаТаблицы.Количество - СтрокаТаблицы.КоличествоПоДокументу;
	СтрокаТаблицы.ЦенаОтклонение       = СтрокаТаблицы.Цена       - СтрокаТаблицы.ЦенаПоДокументу;
	СтрокаТаблицы.СуммаОтклонение      = СтрокаТаблицы.Сумма      - СтрокаТаблицы.СуммаПоДокументу;
	СтрокаТаблицы.СуммаНДСОтклонение   = СтрокаТаблицы.СуммаНДС   - СтрокаТаблицы.СуммаНДСПоДокументу;
	
	ЗаполнитьЗаголовкиСтрок(СтрокаТаблицы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАгентскиеУслугиПродолжение

&НаСервереБезКонтекста
Процедура АгентскиеУслугиНоменклатураПриИзмененииНаСервере(СтрокаТаблицы, Знач ДанныеОбъекта)
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам);
	КонецЕсли;
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТаблицы.Номенклатура, ДанныеОбъекта, Ложь);
		
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы.Содержание = СведенияОНоменклатуре.НаименованиеПолное;
	СтрокаТаблицы.Цена       = СведенияОНоменклатуре.Цена;
	СтрокаТаблицы.СтавкаНДС  = СведенияОНоменклатуре.СтавкаНДС;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы, 1);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, ДанныеОбъекта.СуммаВключаетНДС);
	
	СтрокаТаблицы.ЦенаПоДокументу                = СтрокаТаблицы.Цена;
	СтрокаТаблицы.СуммаПоДокументу               = СтрокаТаблицы.Сумма;
	СтрокаТаблицы.СуммаНДСПоДокументу            = СтрокаТаблицы.СуммаНДС;
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыАгентскиеУслуги(СтрокаТаблицы, ДанныеОбъекта.СуммаВключаетНДС);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыАгентскиеУслуги(СтрокаТаблицы, СуммаВключаетНДС)
	
	СтрокаТаблицы.Всего                = СтрокаТаблицы.Сумма            + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	СтрокаТаблицы.ВсегоПоДокументу     = СтрокаТаблицы.СуммаПоДокументу + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДСПоДокументу);
	
	СтрокаТаблицы.ВсегоОтклонение      = СтрокаТаблицы.Всего      - СтрокаТаблицы.ВсегоПоДокументу;
	
	СтрокаТаблицы.КоличествоОтклонение = СтрокаТаблицы.Количество - СтрокаТаблицы.КоличествоПоДокументу;
	СтрокаТаблицы.ЦенаОтклонение       = СтрокаТаблицы.Цена       - СтрокаТаблицы.ЦенаПоДокументу;
	СтрокаТаблицы.СуммаОтклонение      = СтрокаТаблицы.Сумма      - СтрокаТаблицы.СуммаПоДокументу;
	СтрокаТаблицы.СуммаНДСОтклонение   = СтрокаТаблицы.СуммаНДС   - СтрокаТаблицы.СуммаНДСПоДокументу;
	
	ЗаполнитьЗаголовкиСтрок(СтрокаТаблицы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыПродолжение

#КонецОбласти

#Область БЭД

&НаКлиенте
Процедура ДекорацияСостояниеЭДОНажатие(Элемент)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ДекорацияСостояниеЭДОНажатие(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()

	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ПроверкаКонтрагентов

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#КонецОбласти

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()
	
	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);
	
КонецПроцедуры

#КонецОбласти
