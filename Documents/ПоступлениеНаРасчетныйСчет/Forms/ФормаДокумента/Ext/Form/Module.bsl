
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормы.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = Новый Массив;
	ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии");
	Если ПрименениеУСН Тогда
		ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии_УСН");
	КонецЕсли;
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтотОбъект,
		"БП.Документ.ПоступлениеНаРасчетныйСчет",
		"ФормаДокумента",
		НСтр("ru = 'Новости: Поступление на расчетный счет'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПоступлениеНаРасчетныйСчетФормы.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	Если ПлательщикНПД И ЧекиНПДКлиентСервер.ЧекОжидаетОтправкиВФНС(СведенияОЧекеНПД) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьСтатусОфлайнЧековНПД", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПоступлениеНаРасчетныйСчетФормы.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПоступлениеНаРасчетныйСчетФормы.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	
	Оповестить("Запись_ПоступлениеНаРасчетныйСчет", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененБанковскийСчет" И Параметр.Владелец = Объект.Организация Тогда
		ОбработкаОповещенияИзмененБанковскийСчет(ИмяСобытия, Параметр, Источник);
	ИначеЕсли ИмяСобытия = "Запись_Организации" Тогда
		Если Источник = Объект.Организация Тогда
			
			ПоступлениеНаРасчетныйСчетФормыВызовСервера.ОбработатьИзмененияВОрганизации(
				Объект.Организация,
				ИспользоватьНесколькоБанковскихСчетовОрганизации,
				ОсновнойБанковскийСчетОрганизацииЗаполнен,
				Объект.СчетОрганизации);
			
			Элементы.ПредупреждениеОЗаполненииРеквизитовСчета.Видимость =
				ПроверкаРеквизитовОрганизацииКлиентСервер.ПоказатьПредупреждениеОРеквизитахСчета(ЭтотОбъект, Объект.Организация);
			Модифицированность = Истина;
			
		КонецЕсли;
	ИначеЕсли ИмяСобытия = ЧекиНПДКлиентСервер.ИмяСобытияДляОповещенияОбИзмененииЧека()
		И Параметр.ДокументОснование = Объект.Ссылка Тогда
		
		ЧекиНПДКлиент.ДобавитьПричинуАннулированияЧекаВКомментарий(Параметр, ЭтотОбъект);
		УстановитьСведенияОЧекеНПД(Параметр);
		
	ИначеЕсли ИмяСобытия = ЧекиНПДКлиент.ИмяСобытияИзменениеСтатусаОфлайнЧека()
		И Параметр = Объект.Организация
		И ЧекиНПДКлиентСервер.ЧекОжидаетОтправкиВФНС(СведенияОЧекеНПД) Тогда
		
		ОбновитьСтатусОфлайнЧекаНПД();
		
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ОбработкаНавигационнойСсылки(
		ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперацииПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ВидОперацииАвтоПодбор(Объект.ВидОперации, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыПриОплатеПриИзменении(Элемент)
	
	Объект.БезЗакрывающихДокументов = РасчетыПриОплате = "БезДокументов";
	ВидОперацииПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата,
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
	
	// При поступлении от продажи валюты также меняется курс ЦБ на дату реализации.
	Если НЕ ТребуетсяВызовСервера Тогда
		ТребуетсяВызовСервера = Объект.ВидОперации
			= ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты");
	КонецЕсли;
	
	// Если есть договоры в у.е., то необходимо получение курсов валют.
	Если НЕ ТребуетсяВызовСервера Тогда
		ТребуетсяВызовСервера = ЕстьРасчетыВУсловныхЕдиницах;
	КонецЕсли;
	
	// Проверка на изменение сроков действия патентов.
	Если НЕ ТребуетсяВызовСервера Тогда
		ТребуетсяВызовСервера = ПрименяетсяУСНПатент;
	КонецЕсли;
	
	// Если определили, что изменение даты может повлиять на какие-либо параметры,
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииСервер();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииСервер();
	Иначе
		Элементы.ПредупреждениеОЗаполненииРеквизитовСчета.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетОрганизацииПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		Возврат;
	КонецЕсли;
	
	СчетОрганизацииПриИзмененииСервер(Новый Массив);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	ПодразделениеОрганизацииИзменение();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетБанкПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СчетБанк) Тогда
		СчетБанкПриИзмененииСервер(Новый Массив);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	СуммаДокументаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаПрочиеПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СчетУчетаПрочиеПриИзмененииКлиент(ЭтотОбъект, Элемент);
	
	Если ПрименениеУСН Тогда
		ЗаполнитьОтражениеВУСННаСервере(Истина, Истина);
		ПоступлениеНаРасчетныйСчетФормыКлиентСервер.СформироватьПрочееТекстДоходыУСН(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтПрочие1ПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СубконтоКтПрочиеПриИзменении(ЭтотОбъект, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтПрочие2ПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СубконтоКтПрочиеПриИзменении(ЭтотОбъект, 2);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтПрочие3ПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СубконтоКтПрочиеПриИзменении(ЭтотОбъект, 3);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтПрочие1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СубконтоКтПрочиеНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтПрочие2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СубконтоКтПрочиеНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтПрочие3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СубконтоКтПрочиеНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаУслугиБанкаПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СчетУчетаУслугиБанкаПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтУслугиБанка1ПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СубконтоКтУслугиБанкаПриИзменении(ЭтотОбъект, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтУслугиБанка2ПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СубконтоКтУслугиБанкаПриИзменении(ЭтотОбъект, 2);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтУслугиБанка3ПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СубконтоКтУслугиБанкаПриИзменении(ЭтотОбъект, 3);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтУслугиБанка1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СубконтоКтУслугиБанкаНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтУслугиБанка2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СубконтоКтУслугиБанкаНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтУслугиБанка3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СубконтоКтУслугиБанкаНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьРазницуВКурсеВСоставеОперационныхРасходовПокупкаВалютыПриИзменении(Элемент)
	
	ОтражатьРазницуВКурсеВСоставеОперационныхРасходовПокупкаВалютыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОтражатьРазницуВКурсеВСоставеОперационныхРасходовПокупкаВалютыПриИзмененииНаСервере()
	
	ПоступлениеНаРасчетныйСчетФормы.ОтражатьРазницуВКурсеВСоставеОперационныхРасходовПокупкаВалютыПриИзмененииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееДоходыУСНПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиентСервер.СформироватьПрочееТекстДоходыУСН(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДвиженияДенежныхСредствПрочиеПриИзменении(Элемент)
	
	Если ПрименениеУСН Тогда
		ЗаполнитьОтражениеВУСННаСервере(Ложь, Истина);
	КонецЕсли;
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СтатьяДвиженияДенежныхСредствПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СтатьяДвиженияДенежныхСредствПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПроверкаРеквизитовОрганизацииКлиент.РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Объект.Организация, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьНажатие(Элемент)
	
	УдалитьПредупреждениеПриЗагрузкеВыпискиИСпрятатьБаннер();
	ПоступлениеНаРасчетныйСчетФормыКлиент.ОповеститьОбИзмененииПредупрежденияПриЗагрузкеВыписки(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЧекНПДНажатие(Элемент)
	
	ЧекиНПДКлиент.ОткрытьФормуЧека(ЭтотОбъект, Объект.Ссылка, Объект.Организация, Объект.Контрагент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыРасшифровкаПлатежа

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаПлатежа

&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ИнициализироватьСвойстваПлатежа(ЭтотОбъект); // Только создаем структуру, если она еще не создана.
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаПриНачалеРедактирования(ЭтотОбъект, Элемент, НоваяСтрока, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаПриОкончанииРедактирования(ЭтотОбъект, Элемент, НоваяСтрока, ОтменаРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаПередУдалением(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаУслугаНПДПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(СтрокаПлатеж.СуммаПлатежа)
		Или Не ЗначениеЗаполнено(СтрокаПлатеж.УслугаНПД) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПлатеж.СуммаПлатежа = ЦенаУслугиНПД(СтрокаПлатеж.УслугаНПД, Объект.Организация, Объект.Дата);
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаСуммаПлатежаПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаУслугаНПДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.НоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаУслугаНПДАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "Услуги");
	
	РаботаСНоменклатуройКлиент.НоменклатураАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаУслугаНПДОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "Услуги");
	
	РаботаСНоменклатуройКлиент.НоменклатураОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаОткрытие(Элемент, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаДоговорКонтрагентаОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ИнициализироватьСвойстваПлатежа(ЭтотОбъект); // Только создаем структуру, если она еще не создана.
	
	Если СтрокаПлатеж.ДоговорКонтрагента = СвойстваПлатежа.ДоговорКонтрагента
		И Объект.РасшифровкаПлатежа.Индекс(СтрокаПлатеж) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РасшифровкаПлатежаДоговорКонтрагентаПриИзмененииНаСервере(СтрокаПлатеж.ПолучитьИдентификатор());
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаДоговорКонтрагентаОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаДоговорКонтрагентаАвтоПодбор(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СтатьяДвиженияДенежныхСредствПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСпособПогашенияЗадолженностиПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СпособПогашенияЗадолженностиПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СделкаНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаСуммаПлатежаПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СтавкаНДСПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаОтражениеАвансаПредставлениеПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаОтражениеАвансаПредставлениеПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаОтражениеАвансаПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаОтражениеАвансаПредставлениеОбработкаВыбора(
		ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаОтражениеДоходаПредставлениеПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаОтражениеДоходаПредставлениеПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаОтражениеДоходаПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаОтражениеДоходаПредставлениеОбработкаВыбора(
		ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИнкассация

&НаКлиенте
Процедура РасшифровкаПлатежаИнкассацияСчетУчетаРасчетовСКонтрагентомПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаИнкассацияСчетУчетаРасчетовСКонтрагентомПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаИнкассацияСубконтоКт1ПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаИнкассацияСубконтоКтПриИзменении(ЭтотОбъект, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаИнкассацияСубконтоКт2ПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаИнкассацияСубконтоКтПриИзменении(ЭтотОбъект, 2);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаИнкассацияСубконтоКт3ПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаИнкассацияСубконтоКтПриИзменении(ЭтотОбъект, 3);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаИнкассацияСубконтоКт1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаИнкассацияСубконтоКтНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаИнкассацияСубконтоКт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаИнкассацияСубконтоКтНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаИнкассацияСубконтоКт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаИнкассацияСубконтоКтНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаИнкассацияПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаИнкассацияПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаИнкассацияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаИнкассацияПриОкончанииРедактирования(ЭтотОбъект, Элемент, НоваяСтрока, ОтменаРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаИнкассацияПередУдалением(Элемент, Отказ)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаИнкассацияПередУдалением(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаИнкассацияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		СтрокаПлатеж = Элемент.ТекущиеДанные;
		Если НЕ Копирование Тогда
			ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Объект, "СчетУчетаРасчетовСКонтрагентом");
			
			ЗаполнитьДобавленныеКолонкиТаблиц();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаИнкассацияСтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ИнкассацияСтатьяДвиженияДенежныхСредствПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПокупкаВалюты

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаПокупкаВалютыПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаПокупкаВалютыПриОкончанииРедактирования(ЭтотОбъект, Элемент, НоваяСтрока, ОтменаРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыПередУдалением(Элемент, Отказ)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаПокупкаВалютыПередУдалением(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ИнициализироватьСвойстваПлатежа(ЭтотОбъект); // Только создаем структуру, если она еще не создана.
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаПокупкаВалютыПриНачалеРедактирования(ЭтотОбъект, Элемент, НоваяСтрока, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыСуммаПлатежаПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаПокупкаВалютыСуммаПлатежаПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыСуммаВзаиморасчетовПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ПокупкаВалютыСуммаВзаиморасчетовПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыКурсВзаиморасчетовПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ПокупкаВалютыКурсВзаиморасчетовПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ПокупкаВалютыКурсВзаиморасчетовНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыДоговорКонтрагентаОткрытие(Элемент, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаПокупкаВалютыДоговорКонтрагентаОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыДоговорКонтрагентаПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ПокупкаВалютыДоговорКонтрагентаПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыСтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ПокупкаВалютыСтатьяДвиженияДенежныхСредствПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПродажаВалюты

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаПродажаВалютыПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаПродажаВалютыПриОкончанииРедактирования(ЭтотОбъект, Элемент, НоваяСтрока, ОтменаРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыПередУдалением(Элемент, Отказ)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаПродажаВалютыПередУдалением(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ИнициализироватьСвойстваПлатежа(ЭтотОбъект); // Только создаем структуру, если она еще не создана.
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаПродажаВалютыПриНачалеРедактирования(ЭтотОбъект, Элемент, НоваяСтрока, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыСуммаВзаиморасчетовПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ПродажаВалютыСуммаВзаиморасчетовПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыСуммаПлатежаПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаПродажаВалютыСуммаПлатежаПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыКурсВзаиморасчетовПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ПродажаВалютыКурсВзаиморасчетовПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ПродажаВалютыКурсВзаиморасчетовНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыДоговорКонтрагентаОткрытие(Элемент, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаПродажаВалютыДоговорКонтрагентаОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыДоговорКонтрагентаПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ПродажаВалютыДоговорКонтрагентаПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыСтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ПродажаВалютыСтатьяДвиженияДенежныхСредствПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПлатежныеКарты

&НаКлиенте
Процедура РасшифровкаПлатежаПлатежныеКартыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ИнициализироватьСвойстваПлатежа(ЭтотОбъект); // Только создаем структуру, если она еще не создана.
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаПлатежныеКартыПриНачалеРедактирования(ЭтотОбъект, Элемент, НоваяСтрока, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПлатежныеКартыПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаПлатежныеКартыПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПлатежныеКартыПередУдалением(Элемент, Отказ)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаПлатежныеКартыПередУдалением(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПлатежныеКартыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаПлатежныеКартыПриОкончанииРедактирования(ЭтотОбъект, Элемент, НоваяСтрока, ОтменаРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПлатежныеКартыСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элемент.Родитель.ТекущиеДанные;
	РасшифровкаПлатежаПлатежныеКартыСуммаПлатежаПриИзмененииНаСервере(СтрокаПлатеж.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПлатежныеКартыСуммаУслугПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ПлатежныеКартыСуммаУслугПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПлатежныеКартыДоговорКонтрагентаОткрытие(Элемент, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаПлатежныеКартыДоговорКонтрагентаОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПлатежныеКартыДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элемент.Родитель.ТекущиеДанные;
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ИнициализироватьСвойстваПлатежа(ЭтотОбъект); // Только создаем структуру, если она еще не создана.
	
	Если СтрокаПлатеж.ДоговорКонтрагента = СвойстваПлатежа.ДоговорКонтрагента
		И Объект.РасшифровкаПлатежа.Индекс(СтрокаПлатеж) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РасшифровкаПлатежаПлатежныеКартыДоговорКонтрагентаПриИзмененииСервер(СтрокаПлатеж.ПолучитьИдентификатор());
	ПоступлениеНаРасчетныйСчетФормыКлиент.ПлатежныеКартыДоговорКонтрагентаПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПлатежныеКартыСтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ПлатежныеКартыСтатьяДвиженияДенежныхСредствПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПлатежныеКартыОтражениеДоходаПредставлениеПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаОтражениеДоходаПредставлениеПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПлатежныеКартыОтражениеДоходаПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаОтражениеДоходаПредставлениеОбработкаВыбора(
		ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьКурсВалютыЦБРФ(Команда)
	
	ОбновитьКурсВалютыЦБРФНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтотОбъект,
		Команда
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекНПД(Команда)
	
	Если Не ПоступлениеНаРасчетныйСчетФормыКлиент.ПроверитьЗаполнениеДляФормированияЧекаНПД(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Объект.Проведен Или Модифицированность Тогда
		ПараметрыЗаписи = Новый Структура();
		ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
		Записать(ПараметрыЗаписи);
	КонецЕсли;
	
	ЧекиНПДКлиент.ОткрытьФормуЧека(ЭтотОбъект, Объект.Ссылка, Объект.Организация, Объект.Контрагент);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбработкаОповещенияИзмененБанковскийСчет(ИмяСобытия, Параметр, Источник)
	
	ПоступлениеНаРасчетныйСчетФормы.ОбработкаОповещенияИзмененБанковскийСчет(ЭтотОбъект, Параметр.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	ПоступлениеНаРасчетныйСчетФормы.ЗаполнитьДобавленныеКолонкиТаблиц(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииСервер()
	
	ПоступлениеНаРасчетныйСчетФормы.ВидОперацииПриИзмененииСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПодразделениеОрганизацииИзменение()
	
	ПоступлениеНаРасчетныйСчетФормы.ПодразделениеОрганизацииИзменение(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	ПоступлениеНаРасчетныйСчетФормы.ДатаПриИзмененииСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	ПоступлениеНаРасчетныйСчетФормы.ОрганизацияПриИзмененииСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СчетОрганизацииПриИзмененииСервер(ПричиныИзменения)
	
	ПоступлениеНаРасчетныйСчетФормы.СчетОрганизацииПриИзмененииСервер(ЭтотОбъект, ПричиныИзменения);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	ПоступлениеНаРасчетныйСчетФормы.КонтрагентПриИзмененииСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СчетБанкПриИзмененииСервер(ПричиныИзменения)
	
	ПоступлениеНаРасчетныйСчетФормы.СчетБанкПриИзмененииСервер(ЭтотОбъект, ПричиныИзменения);
	
КонецПроцедуры

&НаСервере
Процедура СуммаДокументаПриИзмененииСервер()
	
	ПоступлениеНаРасчетныйСчетФормы.СуммаДокументаПриИзменении(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаПлатежныеКартыСуммаПлатежаПриИзмененииНаСервере(ИдСтроки);
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдСтроки);
	ПоступлениеНаРасчетныйСчетФормы.ПлатежныеКартыСуммаПлатежаПриИзмененииНаСервере(СтрокаПлатеж, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзмененииНаСервере(ИдСтроки)
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдСтроки);
	ПоступлениеНаРасчетныйСчетФормы.ДоговорКонтрагентаПриИзмененииНаСервере(СтрокаПлатеж, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаПлатежныеКартыДоговорКонтрагентаПриИзмененииСервер(ИдСтроки)
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдСтроки);
	ПоступлениеНаРасчетныйСчетФормы.ПлатежныеКартыДоговорКонтрагентаПриИзмененииНаСервере(СтрокаПлатеж, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКурсВалютыЦБРФНаСервере()
	
	ПоступлениеНаРасчетныйСчетФормы.ОбновитьКурсВалютыЦБРФ(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтражениеВУСННаСервере(ЗаполнитьСуммы = Истина, ЗаполнитьСодержание = Ложь)
	
	ПоступлениеНаРасчетныйСчетФормы.ЗаполнитьОтражениеВУСННаСервере(ЭтотОбъект, ЗаполнитьСуммы, ЗаполнитьСодержание);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОДКЛЮЧАЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()
	
	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЗАВЕРШЕНИЕ НЕМОДАЛЬНЫХ ВЫЗОВОВ

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбораЗавершение(
		ЭтотОбъект, РезультатЗакрытия, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыКурсВзаиморасчетовНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаПокупкаВалютыКурсВзаиморасчетовНачалоВыбораЗавершение(
		ЭтотОбъект, РезультатЗакрытия, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыКурсВзаиморасчетовНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаПродажаВалютыКурсВзаиморасчетовНачалоВыбораЗавершение(
		ЭтотОбъект, РезультатЗакрытия, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область ЧекиНПД

&НаСервереБезКонтекста
Функция ЦенаУслугиНПД(УслугаНПД, Организация, Дата)
	
	Возврат ЧекиНПД.ЦенаУслугиНПД(УслугаНПД, Организация, Дата);
	
КонецФункции

&НаСервере
Процедура УстановитьСведенияОЧекеНПД(НовыеСведенияОЧекеНПД)
	
	СведенияОЧекеНПД = НовыеСведенияОЧекеНПД;
	ПоступлениеНаРасчетныйСчетФормы.УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьСтатусОфлайнЧековНПД()
	
	ЧекиНПДКлиент.ОбновитьСтатусыОфлайнЧековНПД();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусОфлайнЧекаНПД()
	
	ПоступлениеНаРасчетныйСчетФормы.ОбновитьСтатусОфлайнЧекаНПД(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ПредупрежденияПриЗагрузкеВыписки

&НаСервере
Процедура УдалитьПредупреждениеПриЗагрузкеВыпискиИСпрятатьБаннер()
	
	ПоступлениеНаРасчетныйСчетФормы.УдалитьПредупреждениеПриЗагрузкеВыпискиИСпрятатьБаннер(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыАрендыИУправленияНедвижимости

//++ЭЛИАС 20141128  
&НаКлиенте
Процедура Подключаемый_ПриИзменении_ВыполнитьПереопределяемоеСобытие(Элемент)
	
	АР_МодификацияКонфигурацииКлиент.ВыполнитьПереопределяемоеСобытиеПриИзменении(ЭтаФорма, Элемент);
	
КонецПроцедуры //--ЭЛИАС 20141128

//++ЭЛИАС 20141128  
&НаКлиенте
Процедура Подключаемый_РасшифровкаПлатежаДоговорКонтрагентаПриИзменении_ВыполнитьПереопределяемоеСобытие(Элемент)
	
	РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент);
	АР_МодификацияКонфигурацииКлиент.ВыполнитьПереопределяемоеСобытиеПриИзменении(ЭтаФорма, Элемент);
	
КонецПроцедуры //--ЭЛИАС 20141128

//++ЭЛИАС 20141128  
&НаКлиенте
Процедура Подключаемый_ДатаПриИзменении_ВыполнитьПереопределяемоеСобытие(Элемент)
	
	ДатаПриИзменении(Элемент);
	АР_МодификацияКонфигурацииКлиент.ВыполнитьПереопределяемоеСобытиеПриИзменении(ЭтаФорма, Элемент);
	
КонецПроцедуры //--ЭЛИАС 20141128

//++ЭЛИАС 20141128  
&НаКлиенте
Процедура Подключаемый_ВидОперацииПриИзменении_ВыполнитьПереопределяемоеСобытие(Элемент)
	
	ВидОперацииПриИзменении(Элемент);
	АР_МодификацияКонфигурацииКлиент.ВыполнитьПереопределяемоеСобытиеПриИзменении(ЭтаФорма, Элемент);
	
КонецПроцедуры //--ЭЛИАС 20141128

//++ЭЛИАС 20141128  
&НаКлиенте
Процедура Подключаемый_КонтрагентПриИзменении_ВыполнитьПереопределяемоеСобытие(Элемент)
	
	КонтрагентПриИзменении(Элемент);
	АР_МодификацияКонфигурацииКлиент.ВыполнитьПереопределяемоеСобытиеПриИзменении(ЭтаФорма, Элемент);
	
КонецПроцедуры //--ЭЛИАС 20141128

//++ЭЛИАС 20141128  
&НаКлиенте
Процедура Подключаемый_ОрганизацияПриИзменении_ВыполнитьПереопределяемоеСобытие(Элемент)
	
	ОрганизацияПриИзменении(Элемент);
	АР_МодификацияКонфигурацииКлиент.ВыполнитьПереопределяемоеСобытиеПриИзменении(ЭтаФорма, Элемент);
	
КонецПроцедуры //--ЭЛИАС 20141128

//++ЭЛИАС 20120622
&НаСервере
Процедура ЗаполнитьРасшифровкуПлатежаПоТаблицеЗначений(АдресВременногоХранилища)
	
	ПоступлениеНаРасчетныйСчетФормы.ИнициализироватьСвойстваПлатежа(ЭтаФорма);
	ТаблицаЗначений = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	Объект.РасшифровкаПлатежа.Загрузить(ТаблицаЗначений);
	
	ВидРасчетовПоДоговору = БухгалтерскийУчетПереопределяемый.ОпределениеВидаРасчетовПоПараметрамДоговора(
		Объект.ДоговорКонтрагента);
	ВалютаВзаиморасчетов  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	ВалютаДокумента   = Объект.ВалютаДокумента;
	
	СтруктураКурсаДокумента = АР_ПроцедурыНачисления.ПолучитьКурсВалюты(ВалютаДокумента, Объект.Дата, Объект.ДоговорКонтрагента);
	
	МассивУдаляемыхСтрок = Новый Массив;
	
	Для каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
			СтрокаПлатеж.ДоговорКонтрагента = СвойстваПлатежа.ДоговорКонтрагента;
		КонецЕсли;
		
		Если НЕ ВалютаДокумента = ВалютаРегламентированногоУчета
			И НЕ СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов = ВалютаДокумента
			И НЕ СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Данные по  договору """ + СтрокаПлатеж.ДоговорКонтрагента + """ не заполнены: валюта взаиморасчетов договора должна быть Рубли или должна совпадать с валютой документа.");
			МассивУдаляемыхСтрок.Добавить(СтрокаПлатеж);
		КонецЕсли;
		
		Если СтрокаПлатеж.ДоговорКонтрагента <> СвойстваПлатежа.ДоговорКонтрагента Тогда
			ПараметрыОбъекта = ПоступлениеНаРасчетныйСчетФормы.ТекущиеПараметрыОбъекта(ЭтаФорма);
			ПараметрыОбъекта.ДоговорКонтрагента = СтрокаПлатеж.ДоговорКонтрагента;
			СвойстваПлатежа = ПоступлениеНаРасчетныйСчетФормы.СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Ложь);
			
		КонецЕсли;
		
		СтрокаПлатеж.СуммаПлатежа = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа,
			ВалютаВзаиморасчетов, ВалютаДокумента,
			СвойстваПлатежа.КурсВзаиморасчетов, СтруктураКурсаДокумента.Курс,
			СвойстваПлатежа.КратностьВзаиморасчетов, СтруктураКурсаДокумента.Кратность);
			
		СтавкаНДС = СтрокаПлатеж.СтавкаНДС;
		
		ИсключаемыеСвойства = "";
		Если СтрокаПлатеж.Свойство("СуммаПлатежа") И СвойстваПлатежа.Свойство("СуммаПлатежа") Тогда
			ИсключаемыеСвойства = ИсключаемыеСвойства + "СуммаПлатежа";
		КонецЕсли;
		Если СтрокаПлатеж.Свойство("СуммаУслуг") И СвойстваПлатежа.Свойство("СуммаУслуг") Тогда
			ИсключаемыеСвойства = ИсключаемыеСвойства + ?(ЗначениеЗаполнено(ИсключаемыеСвойства), ", ", "") + "СуммаУслуг";
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СвойстваПлатежа,, ИсключаемыеСвойства);
		
		Если ЗначениеЗаполнено(СтавкаНДС) Тогда
			СтрокаПлатеж.СтавкаНДС = СтавкаНДС;	
		КонецЕсли;
		
		ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
		ПоступлениеНаРасчетныйСчетФормы.РассчитатьКурсИСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
		
	КонецЦикла;
	
	Для К = 1 По МассивУдаляемыхСтрок.Количество() Цикл
		Объект.РасшифровкаПлатежа.Удалить(МассивУдаляемыхСтрок.Количество() - К);
	КонецЦикла;
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(ДокументОбъект);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	Для Каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
		Если СтрокаПлатеж.АР_Пени Тогда
			ПараметрыНачисленияПени = АР_ПроцедурыНачисления.ПолучитьПараметрыНачисленияПени(СтрокаПлатеж.ДоговорКонтрагента, Объект.Дата);
			ОбособленныйУчетПени = ?(ПараметрыНачисленияПени = Неопределено, Ложь, ПараметрыНачисленияПени.СпособПогашенияПени = ПредопределенноеЗначение("Перечисление.АР_СпособыПогашенияПени.ВестиОбособленныйУчетПени"));
			Если ОбособленныйУчетПени Тогда
				СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
					СтрокаПлатеж.ДоговорКонтрагента.Организация, СтрокаПлатеж.ДоговорКонтрагента.Владелец, СтрокаПлатеж.ДоговорКонтрагента);
				СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом	= СчетаУчета.СчетРасчетовПоПретензиям;
				СтрокаПлатеж.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетРасчетовПоПретензиям;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПоступлениеНаРасчетныйСчетФормы.УправлениеФормой(ЭтаФорма);

КонецПроцедуры //--ЭЛИАС 20120622

//++ЭЛИАС 20120628
&НаКлиенте
Процедура ЗаполнитьПоОстаткам(Команда)
	
	Если Объект.Проведен Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Заполнение возможно только в непроведенном документе'"));
		Возврат;
	КонецЕсли;

	Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("СпроситьОбОчисткеТабЧасти", ЭтотОбъект, Истина);
		ПоказатьВопрос(Оповещение, "Перед заполнением табличная часть будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет);
	Иначе
		ЗаполнитьПоОстаткамЗавершение();
	КонецЕсли;
	
КонецПроцедуры //--ЭЛИАС 20120628

//++ЭЛИАС 20120628
&НаКлиенте
Процедура ЗаполнитьПоОстаткамЗавершение()

	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(,, НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Организация", "Объект");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(,, НСтр("ru = 'Контрагент'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Контрагент", "Объект");
		Возврат;
	КонецЕсли;
	
	АдресВременногоХранилища = ПоместитьРасшифровкуВоВременноеХранилище();
	СтруктураПараметров = Новый Структура("Организация, Контрагент, СуммаДляПодбора, АдресВременногоХранилища", Объект.Организация, Объект.Контрагент, Объект.СуммаДокумента, АдресВременногоХранилища);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьПоОстаткамОбработкаВыбора", ЭтотОбъект);
	ОткрытьФорму("Обработка.АР_ПодборПараметровРасшифровкиПлатежаДляАренды.Форма.ПараметрыЗаполнения",СтруктураПараметров, ЭтаФорма,, ВариантОткрытияОкна.ОтдельноеОкно,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры //--ЭЛИАС 20120628

//++ЭЛИАС 20140626  
&НаСервере
Функция ПоместитьРасшифровкуВоВременноеХранилище()
	
	РасшифровкаПлатежа = Объект.РасшифровкаПлатежа.Выгрузить();
	Возврат ПоместитьВоВременноеХранилище(РасшифровкаПлатежа);
	
КонецФункции //--ЭЛИАС 20140626

//++ЭЛИАС 20140626  
&НаКлиенте
Процедура ЗаполнитьПоОстаткамОбработкаВыбора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		ЗаполнитьРасшифровкуПлатежаПоТаблицеЗначений(РезультатЗакрытия);	
		Модифицированность = Истина;
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры //--ЭЛИАС 20140626

//++ЭЛИАС 20120628
&НаКлиенте
Процедура ЗаполнитьПоСчетам(Команда)
	
	Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("СпроситьОбОчисткеТабЧасти", ЭтотОбъект, Ложь);
		ПоказатьВопрос(Оповещение, "Перед заполнением табличная часть будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет);
	Иначе
		ЗаполнитьПоСчетамЗавершение();
	КонецЕсли;
	
КонецПроцедуры //--ЭЛИАС 20120628

//++ЭЛИАС 20140625  
&НаКлиенте
Процедура СпроситьОбОчисткеТабЧасти(РезультатВопроса, ЗаполнитьПоОстаткам) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если ЗаполнитьПоОстаткам Тогда
			ЗаполнитьПоОстаткамЗавершение();
		Иначе	
			ЗаполнитьПоСчетамЗавершение();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //--ЭЛИАС 20140625

//++ЭЛИАС 20120628
&НаКлиенте
Процедура ЗаполнитьПоСчетамЗавершение()
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(,, НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Организация", "Объект");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(,, НСтр("ru = 'Контрагент'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Контрагент", "Объект");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Организация, Контрагент", Объект.Организация, Объект.Контрагент);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьПоСчетамОбработкаВыбора", ЭтотОбъект);
	ОткрытьФорму("Обработка.АР_ПодборПараметровРасшифровкиПлатежаДляАренды.Форма.ПодборПоСчетам",СтруктураПараметров, ЭтаФорма,, ВариантОткрытияОкна.ОтдельноеОкно,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры //--ЭЛИАС 20120628

//++ЭЛИАС 20140626  
&НаКлиенте
Процедура ЗаполнитьПоСчетамОбработкаВыбора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатЗакрытия = Неопределено И ЗначениеЗаполнено(РезультатЗакрытия.АдресВременногоХранилища) Тогда
		ЗаполнитьРасшифровкуПлатежаПоТаблицеЗначений(РезультатЗакрытия.АдресВременногоХранилища);
		Если НЕ ЗначениеЗаполнено(Объект.НазначениеПлатежа) Тогда
			Объект.НазначениеПлатежа = РезультатЗакрытия.НазначениеПлатежа;
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры //--ЭЛИАС 20140626

//++ЭЛИАС 20170320 
&НаКлиенте
Процедура Подключаемый_РасшифровкаПлатежаВыбор_ВыполнитьПереопределяемоеСобытие(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	АР_МодификацияКонфигурацииКлиент.ВыполнитьПереопределяемоеСобытиеВыбор(ЭтаФорма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);	
	
КонецПроцедуры //--ЭЛИАС 20170320

#КонецОбласти
