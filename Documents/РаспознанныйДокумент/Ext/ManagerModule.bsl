#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЭтоАвторизованныйПользователь(Ответственный)
	|	ИЛИ ЗначениеРазрешено(Организация)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СоздатьРаспознанныйДокумент(ДанныеСервиса, ДанныеВыборки, РезультатыОбработки, ДатаСоздания = Неопределено, ДанныеСтраниц = Неопределено) Экспорт
	
	ДесериализованноеЗначение = ДанныеСервиса.ДесериализованноеЗначение.Получить("result");
	Если ТипЗнч(ДесериализованноеЗначение) <> Тип("Соответствие") Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если ТипЗнч(ДесериализованноеЗначение.Получить("document")) = Тип("Соответствие") Тогда
		ТипДокумента = ДесериализованноеЗначение["document"].Получить("type");
	Иначе
		ТипДокумента = Неопределено;
	КонецЕсли;
	
	СоответствиеТипов = Новый Соответствие;
	СоответствиеТипов.Вставить("ACT", Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг);
	СоответствиеТипов.Вставить("SCH", Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату);
	СоответствиеТипов.Вставить("SF", Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура);
	СоответствиеТипов.Вставить("TG12", Перечисления.ТипыДокументовРаспознаваниеДокументов.ТОРГ12);
	СоответствиеТипов.Вставить("UPD", Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД);
	
	РаспознаваниеДокументовПереопределяемый.ПриСопоставленииТиповДокументов(СоответствиеТипов);
	
	ТипСсылкой = СоответствиеТипов.Получить(ТипДокумента);
	Если ТипСсылкой = Неопределено Тогда
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Идентификатор документа: %1
		|Неизвестный типа документа: ""%2""'"), ДанныеВыборки.ИдентификаторЗадания, ТипДокумента);
		СоздатьРаспознанныйДокументСОшибкой(ДанныеСервиса, ДанныеВыборки, РезультатыОбработки, ОписаниеОшибки, ДатаСоздания, ДанныеСтраниц);
		Возврат Неопределено;
	КонецЕсли;
	
	// Замер производительности
	РезультатОбратнойСвязи = РаспознаваниеДокументов.ОписаниеОбратнойСвязи("НачалоЗагрузки");
	Пакет = Новый Структура("created", РезультатОбратнойСвязи);
	РаспознаваниеДокументовКоннекторСлужебный.ПередатьОбратнуюСвязь(РезультатыОбработки.ИдентификаторРезультата, Пакет);
	
	СвойстваШапки = ДесериализованноеЗначение["Страница"];
	СоответствияШапки = СвойстваШапки["child"];
	
	НовыйДокумент = Документы.РаспознанныйДокумент.СоздатьДокумент();
	
	Если НЕ ДатаСоздания = Неопределено Тогда
		НовыйДокумент.Дата = ДатаСоздания;
	Иначе
		НовыйДокумент.Дата = ТекущаяУниверсальнаяДата();
	КонецЕсли;
	
	НовыйДокумент.ИдентификаторЗадания = ДанныеВыборки.ИдентификаторЗадания;
	НовыйДокумент.ИдентификаторРезультата = РезультатыОбработки.ИдентификаторРезультата;
	НовыйДокумент.ИмяФайла = РезультатыОбработки.ИменаФайлов;
	НовыйДокумент.ТипДокумента = ТипСсылкой;
	НовыйДокумент.Источник = Источник(РезультатыОбработки, ДанныеВыборки);
	НовыйДокумент.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий;
	НовыйДокумент.Ответственный = РегистрыСведений.ИсходныеДанныеЗаданийРаспознаваниеДокументов.ПолучитьПользователяПоИдЗадания(
		НовыйДокумент.ИдентификаторЗадания
	);
	НовыйДокумент.МобильноеПриложение = РегистрыСведений.ИсходныеДанныеЗаданийРаспознаваниеДокументов.ПолучитьМобильноеПриложениеПоИдЗадания(
		НовыйДокумент.ИдентификаторЗадания
	);
	
	НовыйДокумент.ИсходноеИзображение = РаспознаваниеДокументовСериализацияСлужебный.ИзвлечьДанныеКартинки(
		СвойстваШапки["chunk_img"]
	);
	НовыйДокумент.Миниатюра = РаспознаваниеДокументовСериализацияСлужебный.ИзвлечьДанныеКартинки(
		СвойстваШапки["thumbnail"]
	);
	НовыйДокумент.ШиринаИзображения = РаспознаваниеДокументовСериализацияСлужебный.ПривестиТип(
		СвойстваШапки["width"],
		Тип("Число")
	);
	НовыйДокумент.ВысотаИзображения = РаспознаваниеДокументовСериализацияСлужебный.ПривестиТип(
		СвойстваШапки["height"],
		Тип("Число")
	);
	
	ТекСоответствие = РаспознаваниеДокументовСлужебный.ПолучитьСопоставлениеРеквизитовИСвойствJSON(НовыйДокумент.ТипДокумента);
	Для Каждого ДанныеСопоставления Из ТекСоответствие Цикл
		Если СтрНайти(ДанныеСопоставления.Адрес, ".Строка.") Тогда
			НоваяСтрока = НовыйДокумент.РеквизитыТабличныхЧастей.Добавить();
			НоваяСтрока.НомерСтрокиТЧ = 1;
			НоваяСтрока.ИмяРеквизита = ДанныеСопоставления.ИмяРеквизита;
			НоваяСтрока.Значение = ДанныеСопоставления.ОписаниеТипа.ПривестиЗначение();
		Иначе
			НоваяСтрока = НовыйДокумент.РеквизитыДокумента.Добавить();
			НоваяСтрока.ИмяРеквизита = ДанныеСопоставления.ИмяРеквизита;
			НоваяСтрока.Значение = ДанныеСопоставления.ОписаниеТипа.ПривестиЗначение();
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьРеквизитыРекурсивно(СоответствияШапки, "", ТекСоответствие, НовыйДокумент);
	
	// Добавление строк с не распознанными колонками
	КопияТаблицы = НовыйДокумент.РеквизитыТабличныхЧастей.Выгрузить(, "НомерСтрокиТЧ");
	КопияТаблицы.Свернуть("НомерСтрокиТЧ");
	ВсеНомераСтрок = КопияТаблицы.ВыгрузитьКолонку("НомерСтрокиТЧ");
	
	Если ВсеНомераСтрок.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Ожидалось, что будет хотя бы одна строка.'");
	КонецЕсли;
	
	ВсеНомераСтрок.Удалить(ВсеНомераСтрок.Найти(1));
	
	Для Каждого ДанныеСопоставления Из ТекСоответствие Цикл
		Если СтрНайти(ДанныеСопоставления.Адрес, ".Строка.") Тогда
			Для Каждого НомерСтроки Из ВсеНомераСтрок Цикл
				Отбор = Новый Структура("НомерСтрокиТЧ, ИмяРеквизита", НомерСтроки, ДанныеСопоставления.ИмяРеквизита);
				Если НЕ НовыйДокумент.РеквизитыТабличныхЧастей.НайтиСтроки(Отбор).Количество() Тогда
					НоваяСтрока = НовыйДокумент.РеквизитыТабличныхЧастей.Добавить();
					НоваяСтрока.НомерСтрокиТЧ = НомерСтроки;
					НоваяСтрока.ИмяРеквизита = ДанныеСопоставления.ИмяРеквизита;
					НоваяСтрока.Значение = ДанныеСопоставления.ОписаниеТипа.ПривестиЗначение();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	НоваяСсылка = Документы.РаспознанныйДокумент.ПолучитьСсылку();
	НовыйДокумент.УстановитьСсылкуНового(НоваяСсылка);
	РаспознаваниеДокументов.ЗаполнитьСпискиВыбораНаСервере(НовыйДокумент, НоваяСсылка);
	ЗаполнитьЗначенияРаспознанногоДокумента(НовыйДокумент, НоваяСсылка);
	РезультатОбратнойСвязи = РаспознаваниеДокументов.ОписаниеОбратнойСвязи("Загружен");
	РаспознаваниеДокументовПереопределяемый.ПередЗаписьюРаспознанногоДокумента(НовыйДокумент, РезультатОбратнойСвязи);
	
	НовыйДокумент.Статус = Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Новый;
	
	НовыйДокумент.ДополнительныеСвойства.Вставить("Автозаполнение", Истина);
	НовыйДокумент.ДополнительныеСвойства.Вставить("ДанныеСтраниц", ДанныеСтраниц);
	НовыйДокумент.Записать();
	
	ТекущиеНастройки = РегистрыСведений.ОбщиеНастройкиРаспознаваниеДокументов.ТекущиеНастройки();
	
	УстановитьПривилегированныйРежим(Истина);
	
	КандидатыВСвязанныеДокументы = РаспознаваниеДокументовСлужебный.НайтиПотенциальныеСвязаныеДокументы(НовыйДокумент);
	
	Для Каждого Кандидат Из КандидатыВСвязанныеДокументы Цикл
		
		Если ТекущиеНастройки.ПриОбнаруженииДокументаПрикреплятьИзображениеАвтоматически Тогда 
			
			АдресКартинки = ПоместитьВоВременноеХранилище(НовыйДокумент.ИсходноеИзображение.Получить());
			РаспознаваниеДокументовСлужебный.ДобавитьПрисоединенныйФайл(НовыйДокумент, Кандидат.Ссылка, АдресКартинки);
			УдалитьИзВременногоХранилища(АдресКартинки);
			
			РегистрыСведений.СвязанныеОбъектыРаспознаниеДокументов.ЗаписатьЗначения(Кандидат.Ссылка, НовыйДокумент.Ссылка, Ложь);
			
			РезультатОбратнойСвязи = РаспознаваниеДокументов.ОписаниеОбратнойСвязи("ПрикрепилСкан");
			Пакет = Новый Структура("created", РезультатОбратнойСвязи);
			РаспознаваниеДокументовКоннекторСлужебный.ПередатьОбратнуюСвязь(НовыйДокумент.ИдентификаторРезультата, Пакет);
			
			Если ТекущиеНастройки.ПомечатьДокументОбработаннымПриПрикреаленииИзображения Тогда
				НовыйДокумент.Статус = Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Обработан;
				НовыйДокумент.Записать();
				
				РезультатОбратнойСвязи = РаспознаваниеДокументов.ОписаниеОбратнойСвязи("Проведен");
				Пакет = Новый Структура("created", РезультатОбратнойСвязи);
				РаспознаваниеДокументовКоннекторСлужебный.ПередатьОбратнуюСвязь(НовыйДокумент.ИдентификаторРезультата, Пакет);
			КонецЕсли;
			
		Иначе
			РегистрыСведений.СвязанныеОбъектыРаспознаниеДокументов.ЗаписатьЗначения(Кандидат.Ссылка, НовыйДокумент.Ссылка, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	РезультатОбратнойСвязи.НомерРаспознанногоДокумента = НовыйДокумент.Номер;
	
	Пакет = Новый Структура("created", РезультатОбратнойСвязи);
	РаспознаваниеДокументовКоннекторСлужебный.ПередатьОбратнуюСвязь(НовыйДокумент.ИдентификаторРезультата, Пакет);
	
	РегистрыСведений.РезультатыОбработкиЗаданийРаспознаваниеДокументов.ЗаписатьРезультатОбработкиДокумента(
		ДанныеВыборки.ИдентификаторЗадания,
		РезультатыОбработки
	);
	
	Возврат НовыйДокумент.Ссылка;
	
КонецФункции

Функция СоздатьРаспознанныйДокументСОшибкой(ДанныеСервиса, ДанныеВыборки, РезультатыОбработки, ОписаниеОшибки = Неопределено, ДатаСоздания = Неопределено, ДанныеСтраниц = Неопределено) Экспорт
	
	// Замер производительности
	РезультатОбратнойСвязи = РаспознаваниеДокументов.ОписаниеОбратнойСвязи("НачалоЗагрузки");
	Пакет = Новый Структура("created", РезультатОбратнойСвязи);
	РаспознаваниеДокументовКоннекторСлужебный.ПередатьОбратнуюСвязь(РезультатыОбработки.ИдентификаторРезультата, Пакет);
	
	НовыйДокумент = Документы.РаспознанныйДокумент.СоздатьДокумент();
	Если НЕ ДатаСоздания = Неопределено Тогда
		НовыйДокумент.Дата = ДатаСоздания;
	Иначе
		НовыйДокумент.Дата = ТекущаяУниверсальнаяДата();
	КонецЕсли;
	
	НовыйДокумент.ИдентификаторЗадания = ДанныеВыборки.ИдентификаторЗадания;
	НовыйДокумент.ИдентификаторРезультата = РезультатыОбработки.ИдентификаторРезультата;
	НовыйДокумент.ИмяФайла = РезультатыОбработки.ИменаФайлов;
	НовыйДокумент.Источник = Источник(РезультатыОбработки, ДанныеВыборки);
	НовыйДокумент.Статус = Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Ошибка;
	НовыйДокумент.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий;
	НовыйДокумент.Ответственный = РегистрыСведений.ИсходныеДанныеЗаданийРаспознаваниеДокументов.ПолучитьПользователяПоИдЗадания(
		НовыйДокумент.ИдентификаторЗадания
	);
	НовыйДокумент.МобильноеПриложение = РегистрыСведений.ИсходныеДанныеЗаданийРаспознаваниеДокументов.ПолучитьМобильноеПриложениеПоИдЗадания(
		НовыйДокумент.ИдентификаторЗадания
	);
	
	ДесериализованноеЗначение = ДанныеСервиса.ДесериализованноеЗначение.Получить("result");
	Если ДесериализованноеЗначение <> Неопределено И ТипЗнч(ДесериализованноеЗначение) = Тип("Соответствие") Тогда
		Если ДесериализованноеЗначение.Получить("Страница") <> Неопределено Тогда
			// Если сервис умеет распознавать этот документ, но для него нет соответствия/обработчика
			// в данной конфигурации, то chunk_img (а не full_img) и thumbnail будут внутри элемента "Страница"
			ДесериализованноеЗначение = ДесериализованноеЗначение.Получить("Страница");
		КонецЕсли;
		
		Если ДесериализованноеЗначение.Получить("thumbnail") <> Неопределено Тогда
			НовыйДокумент.Миниатюра = РаспознаваниеДокументовСериализацияСлужебный.ИзвлечьДанныеКартинки(
				ДесериализованноеЗначение["thumbnail"]
			);
		КонецЕсли;
		
		Если ДесериализованноеЗначение.Получить("full_img") <> Неопределено Тогда
			НовыйДокумент.ИсходноеИзображение = РаспознаваниеДокументовСериализацияСлужебный.ИзвлечьДанныеКартинки(
				ДесериализованноеЗначение["full_img"]
			);
		ИначеЕсли ДесериализованноеЗначение.Получить("chunk_img") <> Неопределено Тогда
			НовыйДокумент.ИсходноеИзображение = РаспознаваниеДокументовСериализацияСлужебный.ИзвлечьДанныеКартинки(
				ДесериализованноеЗначение["chunk_img"]
			);
		КонецЕсли;
	КонецЕсли;
	
	Если ОписаниеОшибки <> Неопределено Тогда
		НовыйДокумент.ОписаниеОшибки = ОписаниеОшибки;
	ИначеЕсли ТипЗнч(ДесериализованноеЗначение) = Тип("Соответствие") Тогда
		НовыйДокумент.ОписаниеОшибки = РаспознаваниеДокументовКоннекторСлужебный.ТекстОшибкиПоКоду(ДесериализованноеЗначение.Получить("error"));
	ИначеЕсли ДесериализованноеЗначение <> Неопределено Тогда
		НовыйДокумент.ОписаниеОшибки = ДесериализованноеЗначение;
	КонецЕсли;
	
	Если ДесериализованноеЗначение.Получить("error") = 71 Тогда // Нет оплаты
		НовыйДокумент.ТребуетсяОплата = Истина;
	КонецЕсли;
	
	РаспознаваниеДокументовПереопределяемый.ПередЗаписьюРаспознанногоДокумента(НовыйДокумент);
	НовыйДокумент.ДополнительныеСвойства.Вставить("Автозаполнение", Истина);
	НовыйДокумент.ДополнительныеСвойства.Вставить("ДанныеСтраниц", ДанныеСтраниц);
	
	ДокументСсылка = Неопределено;
	НачатьТранзакцию();
	Попытка
		НовыйДокумент.Записать();
		РегистрыСведений.РезультатыОбработкиЗаданийРаспознаваниеДокументов.ЗаписатьРезультатОбработкиДокумента(
			ДанныеВыборки.ИдентификаторЗадания,
			РезультатыОбработки
		);
		ЗаписьЖурналаРегистрации(
			РаспознаваниеДокументов.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.РаспознанныйДокумент,
			НовыйДокумент.Ссылка,
			НСтр("ru = 'Записан документ с идентификатором:'") + Символы.ПС + РезультатыОбработки.ИдентификаторРезультата);
		ДокументСсылка = НовыйДокумент.Ссылка;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			РаспознаваниеДокументов.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка, , ,
			НСтр("ru = 'Не удалось записать документ по причине:'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		Возврат Неопределено;
	КонецПопытки;
	
	РезультатОбратнойСвязи = РаспознаваниеДокументов.ОписаниеОбратнойСвязи("Загружен");
	РезультатОбратнойСвязи.НомерРаспознанногоДокумента = НовыйДокумент.Номер;
	
	Пакет = Новый Структура("created", РезультатОбратнойСвязи);
	
	РаспознаваниеДокументовКоннекторСлужебный.ПередатьОбратнуюСвязь(НовыйДокумент.ИдентификаторРезультата, Пакет);
	
	Возврат ДокументСсылка;
	
КонецФункции

Процедура ЗаполнитьЗначенияРаспознанногоДокумента(ДокументОбъект, ДокументСсылка) Экспорт
	
	// Значения примитивных типов заполнены ранее. По ним не идет нечеткий поиск
	Для Каждого Реквизит Из ДокументОбъект.РеквизитыДокумента Цикл
		Если Реквизит.УверенностьНайденногоЗначения >= РаспознаваниеДокументовСлужебный.ГраницаПроблемныхЗначений()
			И НЕ РаспознаваниеДокументовКлиентСервер.ЭтоПримитивныйТип(ТипЗнч(Реквизит.Значение))
			И НЕ РаспознаваниеДокументовКлиентСервер.РаспознанныйТекстСодержитПустоеЗначениеПоля(Реквизит.ИмяРеквизита, Реквизит.РаспознанныйТекст) Тогда
			
			Реквизит.Значение = Реквизит.НайденноеЗначение;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Реквизит Из ДокументОбъект.РеквизитыТабличныхЧастей Цикл
		Если Реквизит.УверенностьНайденногоЗначения >= РаспознаваниеДокументовСлужебный.ГраницаПроблемныхЗначений()
			И НЕ РаспознаваниеДокументовКлиентСервер.ЭтоПримитивныйТип(ТипЗнч(Реквизит.Значение))
			И НЕ РаспознаваниеДокументовКлиентСервер.РаспознанныйТекстСодержитПустоеЗначениеПоля(Реквизит.ИмяРеквизита, Реквизит.РаспознанныйТекст) Тогда
			
			Реквизит.Значение = Реквизит.НайденноеЗначение;
		КонецЕсли;
	КонецЦикла;
	
	РаспознаваниеДокументовПереопределяемый.ПриЗаполненииРаспознанногоДокумента(ДокументОбъект, ДокументСсылка);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыРекурсивно(СоответствиеJSON, АдресJSON, СоответствиеРеквизитов, Док, ТабличнаяЧасть = Неопределено, НомерСтрокиТЧ = 0, Знач ПредСоответствиеJSON = Неопределено)
	
	Перем СтрТабРек;
	
	Для Каждого ТекСоотв Из СоответствиеJSON Цикл
		Если ТипЗнч(ТекСоотв.Значение) = Тип("Соответствие") Тогда
			Если ТекСоотв.Значение["type"] = "container" ИЛИ НЕ ТекСоотв.Значение.Получить("child") = Неопределено Тогда
				Если ТекСоотв.Значение.Получить("postprocessed") = Истина Тогда
					ЗаполнитьЗначенияРеквизита(СтрТабРек, АдресJSON + СокрЛП(ТекСоотв.Ключ) + ".", Док, НомерСтрокиТЧ, СоответствиеРеквизитов, ТабличнаяЧасть, ТекСоотв.Значение, СоответствиеJSON);
				КонецЕсли;
				НовСоответствие = ТекСоотв.Значение["child"];
				ПредСоответствиеJSON = ТекСоотв;
			ИначеЕсли ТекСоотв.Значение["type"] = "table" Тогда
				ДанныеСтрок = ТекСоотв.Значение["rows"];
				АдресJSON = ТекСоотв.Ключ + ".Строка.";
				ИмяТаблицы = ТекСоотв.Ключ;
				
				РаспознаваниеДокументовСлужебный.ПриФормированииДанныхТабличныхЧастей(Док, ИмяТаблицы, АдресJSON, ДанныеСтрок);
				
				Для Каждого СтрокаТаблицы Из ДанныеСтрок Цикл
					ЗаполнитьРеквизитыРекурсивно(СтрокаТаблицы, АдресJSON, СоответствиеРеквизитов, Док, ИмяТаблицы, ДанныеСтрок.Найти(СтрокаТаблицы) + 1);
				КонецЦикла;
				
				ДанныеПодвала = ТекСоотв.Значение["footer"];
				ИмяТаблицы = ТекСоотв.Ключ;
				
				РаспознаваниеДокументовСлужебный.ПриФормированииДанныхТабличныхЧастей(Док, ИмяТаблицы, АдресJSON, ДанныеСтрок);
				
				Для Каждого СтрокаТаблицы Из ДанныеПодвала Цикл
					АдресJSON = ИмяТаблицы + "." + СтрокаТаблицы.Ключ + ".";
					ЗаполнитьРеквизитыРекурсивно(СтрокаТаблицы.Значение, АдресJSON, СоответствиеРеквизитов, Док);
				КонецЦикла;
				
				АдресJSON = "";
				Продолжить;
			Иначе
				НовСоответствие = ТекСоотв.Значение;
			КонецЕсли;
			ЗаполнитьРеквизитыРекурсивно(НовСоответствие, АдресJSON + СокрЛП(ТекСоотв.Ключ) + ".", СоответствиеРеквизитов, Док, ТабличнаяЧасть, НомерСтрокиТЧ, ПредСоответствиеJSON);
		Иначе
			ЗаполнитьЗначенияРеквизита(СтрТабРек, АдресJSON, Док, НомерСтрокиТЧ, СоответствиеРеквизитов, ТабличнаяЧасть, СоответствиеJSON, ПредСоответствиеJSON);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияРеквизита(СтрТабРек, Знач АдресJSON, Знач Док, Знач НомерСтрокиТЧ, Знач СоответствиеРеквизитов, Знач ТабличнаяЧасть, Знач СоответствиеJSON, Знач ПредСоответствиеJSON = Неопределено)
	
	Если СтрТабРек <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекАдрес = Лев(АдресJSON, СтрДлина(АдресJSON) - 1); // Убираем точку в конце
	СтрокиОтбора = СоответствиеРеквизитов.НайтиСтроки(Новый Структура("Адрес", ТекАдрес));
	Для Каждого ТекРеквизит Из СтрокиОтбора Цикл
		
		Если ТабличнаяЧасть = Неопределено Тогда
			Отбор = Новый Структура("ИмяРеквизита", ТекРеквизит.ИмяРеквизита);
			НайденныеСтроки = Док.РеквизитыДокумента.НайтиСтроки(Отбор);
			СтрТабРек = НайденныеСтроки[0];
		Иначе
			Если НомерСтрокиТЧ = 1 Тогда
				Отбор = Новый Структура("НомерСтрокиТЧ, ИмяРеквизита", 1, ТекРеквизит.ИмяРеквизита);
				СтрТабРек = Док.РеквизитыТабличныхЧастей.НайтиСтроки(Отбор)[0];
			Иначе
				СтрТабРек = Док.РеквизитыТабличныхЧастей.Добавить();
			КонецЕсли;
			СтрТабРек.НомерСтрокиТЧ = НомерСтрокиТЧ;
		КонецЕсли;
		
		СтрТабРек.ИмяРеквизита = ТекРеквизит.ИмяРеквизита;
		СтрТабРек.Значение = ТекРеквизит.ОписаниеТипа.ПривестиЗначение();
		
		Для Каждого ТекСоотв Из СоответствиеJSON Цикл
			Если ТипЗнч(ТекСоотв.Значение) = Тип("Соответствие") Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекСоотв.Ключ = "text" Тогда
				СтрТабРек.РаспознанныйТекст = ТекСоотв.Значение;
				ТекТипРеквизита = ТипЗнч(СтрТабРек.Значение);
				Если РаспознаваниеДокументовКлиентСервер.ЭтоПримитивныйТип(ТекТипРеквизита) Тогда
					Если ТекТипРеквизита = Тип("Строка") Тогда
						СтрТабРек.Значение = СокрЛП(ТекСоотв.Значение);
					Иначе
						СтрТабРек.Значение = РаспознаваниеДокументовСериализацияСлужебный.ПривестиТип(ТекСоотв.Значение, ТекТипРеквизита);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ТекСоотв.Ключ = "chunk_img" Тогда
				Если ТекСоотв.Значение = Неопределено Тогда
					Если ПредСоответствиеJSON = Неопределено Или ПредСоответствиеJSON.Значение["chunk_img"] = Неопределено Тогда
						СтрТабРек.СтрокВИзображении = 0;
					Иначе 
						СтрТабРек.ОбластьИзображения = РаспознаваниеДокументовСериализацияСлужебный.ИзвлечьДанныеКартинки(
							ПредСоответствиеJSON.Значение["chunk_img"]
						);
					КонецЕсли;
				Иначе
					СтрТабРек.ОбластьИзображения = РаспознаваниеДокументовСериализацияСлужебный.ИзвлечьДанныеКартинки(
						ТекСоотв.Значение
					);
				КонецЕсли;
			ИначеЕсли ТекСоотв.Ключ = "num_lines" Тогда
				СтрТабРек.СтрокВИзображении = ТекСоотв.Значение;
			ИначеЕсли ТекСоотв.Ключ = "bbox" Тогда
				Если ТипЗнч(ТекСоотв.Значение) = Тип("Массив") И ТекСоотв.Значение.Количество() = 4 Тогда
					СтрТабРек.КоординатаX0 = ТекСоотв.Значение[0];
					СтрТабРек.КоординатаY0 = ТекСоотв.Значение[1];
					СтрТабРек.КоординатаX1 = ТекСоотв.Значение[2];
					СтрТабРек.КоординатаY1 = ТекСоотв.Значение[3];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция Источник(РезультатыОбработки, ДанныеВыборки)
	
	Если РезультатыОбработки.Свойство("Источник") Тогда 
		Возврат Перечисления.ИсточникиПолученияФайлов.ВнешняяСистема;
	Иначе
		Возврат РегистрыСведений.ПредставлениеЗаданийРаспознаваниеДокументов.ИсточникПоИдентификатору(
			ДанныеВыборки.ИдентификаторЗадания
		);
	КонецЕсли;
	
КонецФункции

Процедура ПерезаписатьДокументыСозданныеМобильнымПриложением(МобильноеПриложение) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	РаспознанныйДокумент.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.РаспознанныйДокумент КАК РаспознанныйДокумент
			|ГДЕ
			|	РаспознанныйДокумент.МобильноеПриложение = &МобильноеПриложение";
		
		Запрос.УстановитьПараметр("МобильноеПриложение", МобильноеПриложение);
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

Функция СоздатьРаспознанныйДокументСОшибкойЗагрузки(
		ИдентификаторЗадания,
		ОписаниеОшибки,
		РезультатыОбработки = Неопределено
	) Экспорт
	
	Если РезультатыОбработки = Неопределено Тогда 
		
		РезультатыОбработки = РегистрыСведений.ИсходныеДанныеЗаданийРаспознаваниеДокументов
			.ПолучитьРезультатыОбработкиПоИдЗадания(ИдентификаторЗадания);
		
	КонецЕсли;
	
	НовыйДокумент = Документы.РаспознанныйДокумент.СоздатьДокумент();
	НовыйДокумент.Дата = ТекущаяУниверсальнаяДата();
	НовыйДокумент.ИдентификаторЗадания = ИдентификаторЗадания;
	НовыйДокумент.ИдентификаторРезультата = РезультатыОбработки.ИдентификаторРезультата;
	НовыйДокумент.ИмяФайла = РезультатыОбработки.ИменаФайлов;
	НовыйДокумент.Наименование = РезультатыОбработки.ИменаФайлов;
	НовыйДокумент.Источник = РегистрыСведений.ПредставлениеЗаданийРаспознаваниеДокументов
		.ИсточникПоИдентификатору(
			ИдентификаторЗадания
		);
	НовыйДокумент.Статус = Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Ошибка;
	НовыйДокумент.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий;
	НовыйДокумент.Ответственный = РегистрыСведений.ИсходныеДанныеЗаданийРаспознаваниеДокументов
		.ПолучитьПользователяПоИдЗадания(
			НовыйДокумент.ИдентификаторЗадания
		);
	НовыйДокумент.МобильноеПриложение = РегистрыСведений.ИсходныеДанныеЗаданийРаспознаваниеДокументов
		.ПолучитьМобильноеПриложениеПоИдЗадания(
			НовыйДокумент.ИдентификаторЗадания
		);
	НовыйДокумент.ОписаниеОшибки = ОписаниеОшибки;
	НовыйДокумент.Записать();
	
	РегистрыСведений.РезультатыОбработкиЗаданийРаспознаваниеДокументов
		.ЗаписатьРезультатОбработкиДокумента(
			ИдентификаторЗадания,
			РезультатыОбработки
		);
	
КонецФункции

#КонецОбласти

#КонецЕсли
