
&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Организация                      = Параметры.Отбор.Организация;
	Контрагент                       = Параметры.Отбор.Контрагент;
	СчетФактура                      = Параметры.ЗначенияЗаполнения.СчетФактура;
	Исправление                      = Параметры.ЗначенияЗаполнения.Исправление;
	ВидСчетаФактуры                  = Параметры.ЗначенияЗаполнения.ВидСчетаФактуры;

	Если Параметры.ЗначенияЗаполнения.Свойство("НаОснованииБезвозмезднаяПередача") Тогда 
		НаОснованииБезвозмезднаяПередача = Параметры.ЗначенияЗаполнения.НаОснованииБезвозмезднаяПередача;
	КонецЕсли;
	
	Если Параметры.ЗначенияЗаполнения.Свойство("ИсправляемыйСчетФактура") Тогда 
		ИсправляемыйСчетФактура = Параметры.ЗначенияЗаполнения.ИсправляемыйСчетФактура;
	КонецЕсли;
	
	Если Параметры.ЗначенияЗаполнения.Свойство("ДатаСчетаФактуры") Тогда 
		ДатаСчетаФактуры = Параметры.ЗначенияЗаполнения.ДатаСчетаФактуры;
	КонецЕсли;
	
	ЭтоСводнаяСправка = ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.СводнаяСправка;
	ЭтоКорректировочнаяСправка = ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.КорректировочнаяСправка;
	ЭтоКорректировочный = ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
	
	Если Параметры.ЗначенияЗаполнения.Свойство("СписокДокументовОснований") Тогда 
		
		ТаблицаТекущихОснований = Параметры.ЗначенияЗаполнения.СписокДокументовОснований;
		ПодразделениеОснований = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		
		Если ТаблицаТекущихОснований.Количество() > 0 Тогда 
			МетаданныеДокумента = ТаблицаТекущихОснований[0].Значение.Метаданные();
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ПодразделениеОрганизации", МетаданныеДокумента) Тогда
				ПодразделениеОснований = ТаблицаТекущихОснований[0].Значение.ПодразделениеОрганизации;
			КонецЕсли;
		КонецЕсли;
		
		ТаблицаИтоговПоОснованиям = ПолучитьТаблицуИтоговПоОснованиям(
			ТаблицаТекущихОснований, ЭтоСводнаяСправка, ЭтоКорректировочнаяСправка);
		
		Для Каждого СтрокаТаблицы Из ТаблицаТекущихОснований Цикл
			СтрокаДокументОснование = ДокументыОснования.Добавить();
			СтрокаДокументОснование.ДокументОснование = СтрокаТаблицы.Значение;
			СтрокаДокументОснование.Договор           = Параметры.Отбор.Договор;
			СтрокаДокументОснование.Валюта            = Параметры.Отбор.Валюта;
			СтрокаДокументОснование.Подразделение     = ПодразделениеОснований;
			
			Если (ЭтоСводнаяСправка ИЛИ ЭтоКорректировочнаяСправка)
				 И ЗначениеЗаполнено(ТаблицаИтоговПоОснованиям) Тогда
				
				НайденнаяСтрока = ТаблицаИтоговПоОснованиям.Найти(СтрокаДокументОснование.ДокументОснование, "ДокументОснование");
				
				Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
				
					ЗаполнитьЗначенияСвойств(СтрокаДокументОснование, НайденнаяСтрока,,"ДокументОснование");
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
	Элементы.ДокументыОснованияСклад.Видимость          = ЭтоСводнаяСправка ИЛИ ЭтоКорректировочнаяСправка;
	Элементы.ДокументыОснованияСуммаДокумента.Видимость = ЭтоСводнаяСправка ИЛИ ЭтоКорректировочнаяСправка;
	Элементы.ФормаЗаполнить.Видимость                   = ЭтоСводнаяСправка ИЛИ ЭтоКорректировочнаяСправка;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы
		И Модифицированность Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		Оповещение = Новый ОписаниеОповещения("ВопросСохранитьИзмененияЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

// Функция выполняет запрос по получению суммы документа из документов оснований
// Параметры:
//			ТаблицаОснований - массив - список оснований
//			ЭтоСводнаяСправка - если счет-фактура это сводная справка
//			ЭтоКорректировочнаяСправка - если счет-фактура это корректировочная справка
//
// Возвращаемое значение:
// ТаблицаЗначений - 
//		ДокументОснование - документ основание
//		СуммаДокумента - Сумма по документу основания, * из документа ОтчетКомиссионераОПродажах собираются
//		только суммы без счетов-фактур, у остальных документов реквизит СуммаДокумента
//		Склад - из документов ОтчетОРозничныхПродажах, ВозвратТоваровОтПокупателя записывается склад, у остальных контрагент
//
&НаСервере
Функция ПолучитьТаблицуИтоговПоОснованиям(СписокОснований, ЭтоСводнаяСправка, ЭтоКорректировочнаяСправка)

	Если НЕ ЭтоСводнаяСправка
		И НЕ ЭтоКорректировочнаяСправка Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходныйКассовыйОрдер.Ссылка КАК ДокументОснование,
	|	ПриходныйКассовыйОрдер.СуммаДокумента КАК СуммаДокумента,
	|	ПриходныйКассовыйОрдер.Контрагент КАК Склад
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|ГДЕ
	|	ПриходныйКассовыйОрдер.Ссылка В(&ДокументыОснования)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажах.Ссылка,
	|	ОтчетОРозничныхПродажах.СуммаДокумента,
	|	ОтчетОРозничныхПродажах.Склад
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Ссылка В(&ДокументыОснования)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОплатаПлатежнойКартой.Ссылка,
	|	ОплатаПлатежнойКартой.СуммаДокумента,
	|	ОплатаПлатежнойКартой.Контрагент
	|ИЗ
	|	Документ.ОплатаПлатежнойКартой КАК ОплатаПлатежнойКартой
	|ГДЕ
	|	ОплатаПлатежнойКартой.Ссылка В(&ДокументыОснования)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателя.Ссылка,
	|	ВозвратТоваровОтПокупателя.СуммаДокумента,
	|	ВозвратТоваровОтПокупателя.Склад
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.Ссылка В(&ДокументыОснования)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажах.Ссылка,
	|	СУММА(ОтчетКомиссионераОПродажахТовары.Сумма),
	|	ОтчетКомиссионераОПродажах.Контрагент
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах.Покупатели КАК ОтчетКомиссионераОПродажахПокупатели
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОПродажах.Товары КАК ОтчетКомиссионераОПродажахТовары
	|		ПО ОтчетКомиссионераОПродажахПокупатели.Ссылка = ОтчетКомиссионераОПродажахТовары.Ссылка
	|			И ОтчетКомиссионераОПродажахПокупатели.КлючСтроки = ОтчетКомиссионераОПродажахТовары.КлючСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
	|		ПО ОтчетКомиссионераОПродажахПокупатели.Ссылка = ОтчетКомиссионераОПродажах.Ссылка
	|ГДЕ
	|	&ЭтоСводнаяСправка
	|	И ОтчетКомиссионераОПродажах.Ссылка В(&ДокументыОснования)
	|	И НЕ ОтчетКомиссионераОПродажахПокупатели.ВыставленСФ
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетКомиссионераОПродажах.Ссылка,
	|	ОтчетКомиссионераОПродажах.Контрагент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажах.Ссылка,
	|	-СУММА(ОтчетКомиссионераОПродажахТоварыВозвращенные.Сумма),
	|	ОтчетКомиссионераОПродажах.Контрагент
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах.Возвраты КАК ОтчетКомиссионераОПродажахВозвраты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОПродажах.ТоварыВозвращенные КАК ОтчетКомиссионераОПродажахТоварыВозвращенные
	|		ПО ОтчетКомиссионераОПродажахВозвраты.Ссылка = ОтчетКомиссионераОПродажахТоварыВозвращенные.Ссылка
	|			И ОтчетКомиссионераОПродажахВозвраты.КлючСтроки = ОтчетКомиссионераОПродажахТоварыВозвращенные.КлючСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
	|		ПО ОтчетКомиссионераОПродажахВозвраты.Ссылка = ОтчетКомиссионераОПродажах.Ссылка
	|ГДЕ
	|	&ЭтоКорректировочнаяСправка
	|	И ОтчетКомиссионераОПродажах.Ссылка В(&ДокументыОснования)
	|	И НЕ ОтчетКомиссионераОПродажахВозвраты.ВыставленСФ
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетКомиссионераОПродажах.Ссылка,
	|	ОтчетКомиссионераОПродажах.Контрагент";

	Запрос.УстановитьПараметр("ДокументыОснования", СписокОснований.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("ЭтоСводнаяСправка", ЭтоСводнаяСправка);
	Запрос.УстановитьПараметр("ЭтоКорректировочнаяСправка", ЭтоКорректировочнаяСправка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции 

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ПеренестиДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если ДокументыОснования.Количество() <> 0 Тогда
		ТекстВопроса = НСтр("ru = 'Табличная часть будет очищена. Заполнить?'");
		Оповещение = Новый ОписаниеОповещения("ВопросЗаполнитьДокументЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьДокумент();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПеренестиДанные(Отказ = Ложь)
	
	ОчиститьСообщения();
	
	СписокДокументовОснований = Новый СписокЗначений;
	ПерваяСтрока = Истина;
	
	РазныеДоговора 		= Ложь;
	РазныеВалюты 		= Ложь;
	РазныеПодразделения	= Ложь;
	
	Для Индекс = 0 По ДокументыОснования.Количество() - 1 Цикл
		
		СтрокаТаблицы = ДокументыОснования[Индекс];
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОснование) Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В строке %1 не выбран документ.'"),
				Индекс + 1);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				,
				"ДокументыОснования["+Индекс+"].ДокументОснование",
				,
				Отказ);
		КонецЕсли;
		
		Если Не ЭтоКорректировочный Тогда
			
			Если СписокДокументовОснований.НайтиПоЗначению(СтрокаТаблицы.ДокументОснование) <> Неопределено
			 И ЗначениеЗаполнено(СтрокаТаблицы.ДокументОснование) Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В строке %1 повторно указан документ %2.'"),
					Индекс + 1,
					СтрокаТаблицы.ДокументОснование);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					,
					"ДокументыОснования["+Индекс+"].ДокументОснование",
					,
					Отказ);
			КонецЕсли;
			
		КонецЕсли;
			
		Если ЗначениеЗаполнено(ДокументыОснования[Индекс].ДокументОснование) Тогда 
			Если ПерваяСтрока Тогда
				
				Договор 		= ДокументыОснования[Индекс].Договор;
				Валюта 			= ДокументыОснования[Индекс].Валюта;
				Подразделение 	= ДокументыОснования[Индекс].Подразделение;
				
				ПерваяСтрока = Ложь;
				
			ИначеЕсли НЕ ЭтоСводнаяСправка Тогда
				
				// Договор, валюту и подразделение имеет смысл сравнивать только для заполненных значений.
				
				Если ЗначениеЗаполнено(Договор)
					И ЗначениеЗаполнено(ДокументыОснования[Индекс].Договор) Тогда
					РазныеДоговора = РазныеДоговора ИЛИ Договор <> ДокументыОснования[Индекс].Договор;
				ИначеЕсли ЗначениеЗаполнено(ДокументыОснования[Индекс].Договор) Тогда 
					Договор = ДокументыОснования[Индекс].Договор;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Валюта)
					И ЗначениеЗаполнено(ДокументыОснования[Индекс].Валюта) Тогда 
					РазныеВалюты = РазныеВалюты ИЛИ Валюта <> ДокументыОснования[Индекс].Валюта;
				ИначеЕсли ЗначениеЗаполнено(ДокументыОснования[Индекс].Валюта) Тогда
					Валюта = ДокументыОснования[Индекс].Валюта;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Подразделение)
					И ЗначениеЗаполнено(ДокументыОснования[Индекс].Подразделение) Тогда
					РазныеПодразделения = РазныеПодразделения ИЛИ Подразделение <> ДокументыОснования[Индекс].Подразделение;
				ИначеЕсли ЗначениеЗаполнено(ДокументыОснования[Индекс].Подразделение) Тогда
					Подразделение = ДокументыОснования[Индекс].Подразделение;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
						
		СписокДокументовОснований.Добавить(СтрокаТаблицы.ДокументОснование);
		
	КонецЦикла;
	
	Если РазныеДоговора ИЛИ РазныеВалюты ИЛИ РазныеПодразделения Тогда
		
		Отказ = Истина;
		ТекстСообщения = НСтр("ru='В список документов-оснований можно выбирать документы с одинаковым договором, валютой и подразделением'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ДокументыОснования"); 
		
	КонецЕсли;
				
	Если НЕ Отказ Тогда
		Модифицированность = Ложь;
		ОповеститьОВыборе(СписокДокументовОснований);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура();
		
	СтруктураПараметров.Вставить("ПодобранныеОснования", Новый СписокЗначений);
	Для Каждого СтрокаТаблицы Из ДокументыОснования Цикл
		СтруктураПараметров.ПодобранныеОснования.Добавить(СтрокаТаблицы.ДокументОснование)
	КонецЦикла;
	
	СтруктураПараметров.Вставить("СчетФактура",                      СчетФактура);
	СтруктураПараметров.Вставить("ВидСчетаФактуры",                  ВидСчетаФактуры);
	СтруктураПараметров.Вставить("Исправление",                      Исправление);
	СтруктураПараметров.Вставить("ТипСчетаФактуры",                  "Выданный");
	СтруктураПараметров.Вставить("НаОснованииБезвозмезднаяПередача", НаОснованииБезвозмезднаяПередача);
	СтруктураПараметров.Вставить("Организация",                      Организация);
	СтруктураПараметров.Вставить("Контрагент",                       Контрагент);
	
	СтрокаДокумента = Элементы.ДокументыОснования.ТекущиеДанные;
	ТекущийДокумент = Неопределено;
	Если СтрокаДокумента <> Неопределено Тогда 
		ТекущийДокумент = СтрокаДокумента.ДокументОснование;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ТекущийДокумент", ТекущийДокумент);
	
	ОткрытьФорму("Обработка.ПодборОснованийСчетаФактуры.Форма.ФормаПодбораОснованийСчетаФактуры", СтруктураПараметров, Элемент, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияДокументОснованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекСтрока = Элементы.ДокументыОснования.ТекущиеДанные;
	ТекСтрока.ДокументОснование = ВыбранноеЗначение.Документ;
	ЭлементКоллекции = ДокументыОснования.НайтиПоИдентификатору(ТекСтрока.ПолучитьИдентификатор());
	
	Если ЭлементКоллекции <> Неопределено Тогда 
		ЭлементКоллекции.Подразделение 	= ВыбранноеЗначение.Подразделение;
		ЭлементКоллекции.Договор 		= ВыбранноеЗначение.Договор;
		ЭлементКоллекции.Валюта 		= ВыбранноеЗначение.Валюта;
		Если ЭтоСводнаяСправка 
			ИЛИ (ЭтоКорректировочнаяСправка 
				И ТипЗнч(ТекСтрока.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")) Тогда
			ЭлементКоллекции.Склад          = ВыбранноеЗначение.Склад;
			ЭлементКоллекции.СуммаДокумента = ВыбранноеЗначение.СуммаДокумента;
		КонецЕсли;
	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьИзмененияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПеренестиДанные();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#Область ЗаполнениеДокумента

&НаКлиенте
Процедура ВопросЗаполнитьДокументЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьДокумент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДокумент()
	
	Результат = ЗаполнитьДокументНаСервере();
	
	Если Результат.ЗаданиеВыполнено Тогда
		ОповеститьОбИзменении(СчетФактура);
	Иначе
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДокументНаСервере()
	
	СтруктураПараметров = Новый Структура("Дата,Организация,Ссылка,ИсправляемыйСчетФактура",
		ДатаСчетаФактуры, Организация, СчетФактура, ИсправляемыйСчетФактура);
		
	ДокументыОснования.Очистить();
		
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Если ЭтоСводнаяСправка Тогда
			Документы.СчетФактураВыданный.ПодготовитьДанныеДляЗаполненияСводнойСправки(
				СтруктураПараметров, АдресХранилища);
		Иначе
			Документы.СчетФактураВыданный.ПодготовитьДанныеДляЗаполненияКорректировочнойСправки(
				СтруктураПараметров, АдресХранилища);
		КонецЕсли;
		Результат = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		
		Если ЭтоСводнаяСправка Тогда
			
			НаименованиеЗадания = НСтр("ru = 'Заполнение документа ""Сводная справка по розничным продажам""'");
			
			Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Документы.СчетФактураВыданный.ПодготовитьДанныеДляЗаполненияСводнойСправки",
			СтруктураПараметров,
			НаименованиеЗадания);
			
		Иначе
			
			НаименованиеЗадания = НСтр("ru = 'Заполнение документа ""Корректировочная справка по розничным продажам""'");
			
			Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Документы.СчетФактураВыданный.ПодготовитьДанныеДляЗаполненияКорректировочнойСправки",
			СтруктураПараметров,
			НаименованиеЗадания);
			
		КонецЕсли;
		
		АдресХранилища = Результат.АдресХранилища;
	КонецЕсли;

	Если Результат.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ДокументыОснования") Тогда
		ДокументыОснования.Загрузить(СтруктураДанных.ДокументыОснования);
	КонецЕсли;
	
	Для Каждого СтрокаДокументОснование Из ДокументыОснования Цикл
		Если ТипЗнч(СтрокаДокументОснование.ДокументОснование) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
			ИЛИ ТипЗнч(СтрокаДокументОснование.ДокументОснование) = Тип("ДокументСсылка.ОплатаПлатежнойКартой")
			ИЛИ ТипЗнч(СтрокаДокументОснование.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			СтрокаДокументОснование.Склад = СтрокаДокументОснование.ДокументОснование.Контрагент;
		ИначеЕсли ТипЗнч(СтрокаДокументОснование.ДокументОснование) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
			СтрокаДокументОснование.Склад = СтрокаДокументОснование.ДокументОснование.Склад;
		КонецЕсли;
		
		Если НЕ ТипЗнч(СтрокаДокументОснование.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			СтрокаДокументОснование.СуммаДокумента = СтрокаДокументОснование.ДокументОснование.СуммаДокумента;
		КонецЕсли;
		
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти