#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура заполняет данные шапки по данным документа основания
Процедура ЗаполнитьСвойстваШапки() Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, ДокументОснование);
		ДатаЗаключенияДоговора = ДокументОснование.ДатаЗаключенияДоговора;
		ДатаОкончанияДоговора = ДокументОснование.ДатаОкончанияДоговора;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет документ текущими данными
Процедура ЗаполнитьТекущимиДанными(ОчищатьГрафикиСтавок = Истина) Экспорт
	
	ДокументУсловий = АР_ОбщиеПроцедуры.ПолучитьАктуальныйДокументУсловий(ДоговорКонтрагента, Дата);
	Если ДокументУсловий = Неопределено Тогда
		ДокументУсловий = ДокументОснование;
	ИначеЕсли ТипЗнч(ДокументУсловий) = Тип("ДокументСсылка.АР_ЗаключениеДоговораАренды") Тогда
		ДокументОснование = ДокументУсловий;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДокументУсловий,, "Дата, Номер, Проведен, ПометкаУдаления, НомерПротокола, ДатаПротокола, НомерАкта, ДатаАкта, НомерАссортимента, ДатаНачалаАссортимента, ДатаОкончанияАссортимента");
	СрокиОплаты.Загрузить(ДокументУсловий.СрокиОплаты.Выгрузить());
	
	ДокументПоСтатусам = АР_ОбщиеПроцедуры.ПолучитьАктуальныйДокументПоСтатусам(ДоговорКонтрагента, Дата);
	Если ДокументПоСтатусам = Неопределено Тогда
		ДокументПоСтатусам = ДокументОснование;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДокументПоСтатусам, "УчитыватьЗалог, СпособРасчетаЗалога, СуммаЗалога, ВалютаДепозита, СтавкаНДСЗалога");
	
	ДатаОкончанияДоговора = АР_ОбщиеПроцедуры.ПолучитьДатуОкончанияДоговора(ДоговорКонтрагента);
	Если ЗначениеЗаполнено(ДатаОкончанияДоговора) Тогда
		ЗаполнитьТабличныеЧасти();
		Если ОчищатьГрафикиСтавок Тогда
			ОчиститьГрафикиСтавок();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет данные табличных частей по данным документа основания
Процедура ЗаполнитьТабличныеЧасти() Экспорт
	
	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончанияДоговора);
	Запрос.УстановитьПараметр("ЗаключениеДоговора", ДокументОснование);
	Запрос.УстановитьПараметр("МоментВремени", ?(ЭтоНовый(), КонецДня(?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата())), Новый Граница(МоментВремени(), ВидГраницы.Исключая)));
	Запрос.УстановитьПараметр("ДатаСреза", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата()));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатусыОбъектовАренды.Услуга КАК Услуга,
	|	СтатусыОбъектовАренды.ОбъектАренды КАК ОбъектАренды,
	|	СтатусыОбъектовАренды.ДатаНачалаАренды КАК ДатаНачалаСрокаАренды,
	|	ВЫБОР
	|		КОГДА СтатусыОбъектовАренды.ДатаОкончанияАренды < &ДатаОкончания
	|			ТОГДА СтатусыОбъектовАренды.ДатаОкончанияАренды
	|		ИНАЧЕ &ДатаОкончания
	|	КОНЕЦ КАК ДатаОкончанияСрокаАренды,
	|	АР_СтавкиСрезПоследних.Ставка КАК Ставка,
	|	АР_СтавкиСрезПоследних.СпособНачисления КАК СпособНачисления,
	|	АР_СтавкиСрезПоследних.Площадь КАК Количество,
	|	СтатусыОбъектовАренды.Услуга.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА СтатусыОбъектовАренды.Счетчик ССЫЛКА Справочник.АР_СпискиСчетчиков
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ СтатусыОбъектовАренды.Счетчик
	|	КОНЕЦ КАК Счетчик,
	|	СтатусыОбъектовАренды.КоэффициентОтнесенияСчетчика КАК КоэффициентОтнесенияСчетчика,
	|	ЕСТЬNULL(АР_ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.НомерСтроки, ЕСТЬNULL(АР_ЗаключениеДоговораАрендыПеременнаяЧастьАренднойПлаты.НомерСтроки, 9999)) КАК НомерСтрокиТЧ,
	|	АР_СтавкиСрезПоследних.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	РегистрСведений.АР_СтатусыОбъектовАренды.СрезПоследних(
	|			&МоментВремени,
	|			ЗаключениеДоговора = &ЗаключениеДоговора
	|				И Услуга.АР_ПостояннаяЧастьОплаты = &ПостояннаяЧасть) КАК СтатусыОбъектовАренды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АР_Ставки.СрезПоследних(
	|				&МоментВремени,
	|				СрокДействия >= &ДатаСреза
	|					ИЛИ СрокДействия = ДАТАВРЕМЯ(1, 1, 1)) КАК АР_СтавкиСрезПоследних
	|		ПО СтатусыОбъектовАренды.Договор = АР_СтавкиСрезПоследних.Договор
	|			И СтатусыОбъектовАренды.ОбъектАренды = АР_СтавкиСрезПоследних.ОбъектАренды
	|			И СтатусыОбъектовАренды.Услуга = АР_СтавкиСрезПоследних.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АР_ЗаключениеДоговораАренды.ПостояннаяЧастьАренднойПлаты КАК АР_ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты
	|		ПО СтатусыОбъектовАренды.ОбъектАренды = АР_ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.ОбъектАренды
	|			И СтатусыОбъектовАренды.Услуга = АР_ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Услуга
	|			И СтатусыОбъектовАренды.ЗаключениеДоговора = АР_ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АР_ЗаключениеДоговораАренды.ПеременнаяЧастьАренднойПлаты КАК АР_ЗаключениеДоговораАрендыПеременнаяЧастьАренднойПлаты
	|		ПО СтатусыОбъектовАренды.ОбъектАренды = АР_ЗаключениеДоговораАрендыПеременнаяЧастьАренднойПлаты.ОбъектАренды
	|			И СтатусыОбъектовАренды.Услуга = АР_ЗаключениеДоговораАрендыПеременнаяЧастьАренднойПлаты.Услуга
	|			И СтатусыОбъектовАренды.ЗаключениеДоговора = АР_ЗаключениеДоговораАрендыПеременнаяЧастьАренднойПлаты.Ссылка
	|ГДЕ
	|	СтатусыОбъектовАренды.ДатаНачалаАренды < &ДатаОкончания
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиТЧ";
	
	Запрос.УстановитьПараметр("ПостояннаяЧасть", Истина);
	ПостояннаяЧастьАренднойПлаты.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Запрос.УстановитьПараметр("ПостояннаяЧасть", Ложь);
	ПеременнаяЧастьАренднойПлаты.Загрузить(Запрос.Выполнить().Выгрузить());
		
КонецПроцедуры

Процедура ОчиститьГрафикиСтавок() Экспорт
	
	Для каждого СтрокаТЧ Из ПостояннаяЧастьАренднойПлаты Цикл
		Если ТипЗнч(СтрокаТЧ.Ставка) = Тип("СправочникСсылка.АР_ГрафикиИзмененияСтавокНаУслуги") Тогда
			СтрокаТЧ.Ставка = Неопределено;
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаТЧ Из ПеременнаяЧастьАренднойПлаты Цикл
		Если ТипЗнч(СтрокаТЧ.Ставка) = Тип("СправочникСсылка.АР_ГрафикиИзмененияСтавокНаУслуги") Тогда
			СтрокаТЧ.Ставка = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура предназначена для проверки статуса объекта аренды (объект должен быть свободным в течение
//всего срока аренды)
Процедура ПроверитьСтатусыОбъектовАренды(ИмяТабличнойЧасти, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ИмяСписка = ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВТТабличнаяЧасть
	|ИЗ
	|	&ТабличнаяЧасть КАК ТабличнаяЧасть";
	Запрос.УстановитьПараметр("ТабличнаяЧасть", ЭтотОбъект[ИмяТабличнойЧасти].Выгрузить());
	Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("ЗаключениеДоговора", ДокументОснование);
	Запрос.УстановитьПараметр("МоментВремени", Новый МоментВремени(Дата, Ссылка));
	
	// Проверим, что нет повторяющихся пар объект аренды и услуга     
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВТТабличнаяЧасть.ОбъектАренды КАК ОбъектАренды,
	|	ВЫБОР
	|		КОГДА ВТТабличнаяЧасть.Услуга.АР_УслугаАренды
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		ИНАЧЕ ВТТабличнаяЧасть.Услуга
	|	КОНЕЦ КАК Услуга,
	|	СУММА(1) КАК Количество
	|ИЗ
	|	ВТТабличнаяЧасть КАК ВТТабличнаяЧасть
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТТабличнаяЧасть.ОбъектАренды,
	|	ВЫБОР
	|		КОГДА ВТТабличнаяЧасть.Услуга.АР_УслугаАренды
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		ИНАЧЕ ВТТабличнаяЧасть.Услуга
	|	КОНЕЦ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Количество > 1 Тогда
			Если ЗначениеЗаполнено(Выборка.Услуга) Тогда
				ТекстСообщения = НСтр("ru = 'Для объекта аренды """ + Выборка.ОбъектАренды + """ с услугой """ + Выборка.Услуга + """ имеются повторяющиеся строки'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Для объекта аренды """ + Выборка.ОбъектАренды + """ выбрано несколько услуг по аренде недвижимости'");
			КонецЕсли;
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Список", "Корректность",
			,, ИмяСписка, ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,
			ИмяТабличнойЧасти, "Объект", Отказ);
		КонецЕсли;   		
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДополнительноеСоглашение.ОбъектАренды КАК ОбъектАренды,
	|	ДополнительноеСоглашение.ОбъектАренды.НеКонтролироватьЗанятость КАК НеКонтролироватьЗанятость,
	|	СтатусыОбъектовАренды.Статус,
	|	ВЫБОР
	|		КОГДА СтатусыОбъектовАренды.Услуга.АР_УслугаАренды
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ СтатусыОбъектовАренды.Услуга
	|	КОНЕЦ КАК Услуга,
	|	ДополнительноеСоглашение.НомерСтроки,
	|	СтатусыОбъектовАренды.ДатаНачалаАренды КАК ДатаНачала,
	|	СтатусыОбъектовАренды.ДатаОкончанияАренды КАК ДатаОкончания,
	|	СтатусыОбъектовАренды.ЗаключениеДоговора
	|ИЗ
	|	ВТТабличнаяЧасть КАК ДополнительноеСоглашение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АР_СтатусыОбъектовАренды.СрезПоследних(&МоментВремени, НЕ ЗаключениеДоговора = &ЗаключениеДоговора) КАК СтатусыОбъектовАренды
	|		ПО ДополнительноеСоглашение.ОбъектАренды = СтатусыОбъектовАренды.ОбъектАренды
	|			И (СтатусыОбъектовАренды.ДатаНачалаАренды <= ДополнительноеСоглашение.ДатаОкончанияСрокаАренды)
	|			И (СтатусыОбъектовАренды.ДатаОкончанияАренды = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ИЛИ СтатусыОбъектовАренды.ДатаОкончанияАренды >= ДополнительноеСоглашение.ДатаНачалаСрокаАренды)
	|			И (ДополнительноеСоглашение.Услуга = СтатусыОбъектовАренды.Услуга
	|				ИЛИ СтатусыОбъектовАренды.Услуга = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				ИЛИ (ДополнительноеСоглашение.Услуга.АР_УслугаАренды
	|					И СтатусыОбъектовАренды.Услуга.АР_УслугаАренды))"; 
	                                
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Префикс = ИмяТабличнойЧасти + "[" + Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		Если ЗначениеЗаполнено(Выборка.Услуга) ИЛИ Выборка.Услуга = Неопределено Тогда // Объект в аренде
			Если Не Выборка.НеКонтролироватьЗанятость Тогда
				Если ЗначениеЗаполнено(Выборка.Услуга) Тогда
					ТекстСообщения = НСтр("ru = 'Услуга """ + Выборка.Услуга + """ по объекту """ + Выборка.ОбъектАренды.Наименование + 
					""" с " + Формат(Выборка.ДатаНачала, "ДФ = дд.ММ.гггг") +
					" по " + Формат(Выборка.ДатаОкончания, "ДФ = дд.ММ.гггг")+ " имеет статус """ + Выборка.Статус + """" + ".
					|Заключение договора невозможно'");
				Иначе
					ТекстСообщения = НСтр("ru = 'По объекту """ + Выборка.ОбъектАренды.Наименование + 
					""" площади сданы в аренду с " + Формат(Выборка.ДатаНачала, "ДФ = дд.ММ.гггг") +
					" по " + Формат(Выборка.ДатаОкончания, "ДФ = дд.ММ.гггг")+ ".
					|Заключение договора невозможно'");
				КонецЕсли;
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", НСтр("ru = 'Услуга'"),
				Выборка.НомерСтроки, ИмяСписка, ТекстСообщения);
				Поле = Префикс + "Услуга";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
		Иначе // У объекта другой статус
			ТекстСообщения = НСтр("ru = 'Объект """ + Выборка.ОбъектАренды.Наименование + 
			""" с " + Формат(Выборка.ДатаНачала, "ДФ = дд.ММ.гггг") +
			" по "+ Формат(Выборка.ДатаОкончания, "ДФ = дд.ММ.гггг")+ " имеет статус """ + Выборка.Статус + """" + "
			|Для изменения статуса необходимо установить соответстующую дату окончания в документе """ + Выборка.ЗаключениеДоговора + """'");
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", НСтр("ru = 'Объект аренды'"),
			Выборка.НомерСтроки, ИмяСписка, ТекстСообщения);
			Поле = Префикс + "ОбъектАренды";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
	КонецЦикла;    
		
КонецПроцедуры

Процедура ПроверитьПризнакСдачиВАренду(ИмяТабличнойЧасти, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ИмяСписка = ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();    
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки,
	|	ТабличнаяЧасть.ОбъектАренды
	|ПОМЕСТИТЬ ВТТабличнаяЧасть
	|ИЗ
	|	&ТабличнаяЧасть КАК ТабличнаяЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки,
	|	ТабличнаяЧасть.ОбъектАренды,
	|	ЕСТЬNULL(ОбъектыПодлежащиеСдачеВАренду.ПодлежитСдачеВАренду, ЛОЖЬ) КАК ПодлежитСдачеВАренду
	|ИЗ
	|	ВТТабличнаяЧасть КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АР_ОбъектыПодлежащиеСдачеВАренду.СрезПоследних(&Период, ) КАК ОбъектыПодлежащиеСдачеВАренду
	|		ПО ТабличнаяЧасть.ОбъектАренды = ОбъектыПодлежащиеСдачеВАренду.ОбъектАренды
	|ГДЕ
	|	НЕ ЕСТЬNULL(ОбъектыПодлежащиеСдачеВАренду.ПодлежитСдачеВАренду, ЛОЖЬ)";

	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("ТабличнаяЧасть", ЭтотОбъект[ИмяТабличнойЧасти].Выгрузить());
	                                
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Префикс = ИмяТабличнойЧасти + "[" + Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		ТекстСообщения = НСтр("ru = 'Для объекта недвижимости """ + Выборка.ОбъектАренды.Наименование + """ на дату " + Формат(Дата, "ДФ=dd.MM.yyyy") + 
		" не установлен признак ""Объект подлежит сдаче в аренду""'");
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", НСтр("ru = 'Объект аренды'"),
		Выборка.НомерСтроки, ИмяСписка, ТекстСообщения);
		Поле = Префикс + "ОбъектАренды";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
	КонецЦикла;    
		
КонецПроцедуры

Процедура ПроверитьПлощадьОбъектовАренды(Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|   &Ссылка КАК Ссылка,
	|	*
	|ПОМЕСТИТЬ ВТТабличнаяЧасть
	|ИЗ
	|	&ТабличнаяЧасть КАК ТабличнаяЧасть";
	Запрос.УстановитьПараметр("ТабличнаяЧасть", ЭтотОбъект.ПостояннаяЧастьАренднойПлаты.Выгрузить());
	Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("МоментВремени", Новый МоментВремени(Дата, Ссылка));
	Запрос.УстановитьПараметр("ЗаключениеДоговора", ДокументОснование);
	Запрос.УстановитьПараметр("ДатаСреза", Дата);
	
	// Проверим, что нет повторяющихся пар объект аренды и услуга     
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПостояннаяЧастьАренднойПлаты.НомерСтроки КАК НомерСтроки,
	|	ПостояннаяЧастьАренднойПлаты.ОбъектАренды КАК ОбъектАренды,
	|	ПостояннаяЧастьАренднойПлаты.Количество КАК ПлощадьПоТекущемуДокументу,
	|	ЕСТЬNULL(Ставки.Площадь, 0) КАК ПлощадьПоДокументам,
	|	ПостояннаяЧастьАренднойПлаты.ОбъектАренды.ЗначениеХарактеристики КАК Площадь
	|ИЗ
	|	ВТТабличнаяЧасть КАК ПостояннаяЧастьАренднойПлаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АР_СтатусыОбъектовАренды.СрезПоследних(
	|				&МоментВремени,
	|				Услуга.АР_УслугаАренды
	|					И ЗаключениеДоговора <> &ЗаключениеДоговора) КАК СтатусыОбъектовАренды
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АР_Ставки.СрезПоследних(
	|					&МоментВремени,
	|					СрокДействия >= &ДатаСреза
	|						ИЛИ СрокДействия = ДАТАВРЕМЯ(1, 1, 1)) КАК Ставки
	|			ПО СтатусыОбъектовАренды.Договор = Ставки.Договор
	|				И СтатусыОбъектовАренды.ОбъектАренды = Ставки.ОбъектАренды
	|				И СтатусыОбъектовАренды.Услуга = Ставки.Услуга
	|		ПО ПостояннаяЧастьАренднойПлаты.ОбъектАренды = СтатусыОбъектовАренды.ОбъектАренды
	|			И (ВЫБОР
	|				КОГДА ПостояннаяЧастьАренднойПлаты.Ссылка.Дата > ПостояннаяЧастьАренднойПлаты.ДатаНачалаСрокаАренды
	|					ТОГДА ПостояннаяЧастьАренднойПлаты.Ссылка.Дата
	|				ИНАЧЕ ПостояннаяЧастьАренднойПлаты.ДатаНачалаСрокаАренды
	|			КОНЕЦ <= СтатусыОбъектовАренды.ДатаОкончанияАренды)
	|			И (ПостояннаяЧастьАренднойПлаты.ДатаОкончанияСрокаАренды >= ВЫБОР
	|				КОГДА НАЧАЛОПЕРИОДА(СтатусыОбъектовАренды.Регистратор.Дата, ДЕНЬ) >= СтатусыОбъектовАренды.ДатаНачалаАренды
	|					ТОГДА НАЧАЛОПЕРИОДА(СтатусыОбъектовАренды.Регистратор.Дата, ДЕНЬ)
	|				ИНАЧЕ СтатусыОбъектовАренды.ДатаНачалаАренды
	|			КОНЕЦ)
	|ГДЕ
	|	ПостояннаяЧастьАренднойПлаты.Услуга.АР_УслугаАренды
	|	И НЕ ПостояннаяЧастьАренднойПлаты.ОбъектАренды.НеКонтролироватьПлощадь
	|ИТОГИ
	|	МАКСИМУМ(НомерСтроки),
	|	МАКСИМУМ(ПлощадьПоТекущемуДокументу),
	|	СУММА(ПлощадьПоДокументам),
	|	МАКСИМУМ(Площадь)
	|ПО
	|	ОбъектАренды";
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ИмяСписка = "Постоянная часть арендной платы";
	Пока Выборка.Следующий() Цикл
		Префикс = "ПостояннаяЧастьАренднойПлаты[" + Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		Если Выборка.Площадь < Выборка.ПлощадьПоДокументам + Выборка.ПлощадьПоТекущемуДокументу Тогда
			ТекстСообщения = НСтр("ru = 'Для объекта аренды """ + Выборка.ОбъектАренды + """ сдаваемая площадь с учетом текущего документа
			|составляет: " + Формат(Выборка.ПлощадьПоДокументам + Выборка.ПлощадьПоТекущемуДокументу, "ЧДЦ=2; ЧРД=.") + " м2, что превышает площадь объекта аренды: " + Формат(Выборка.Площадь, "ЧДЦ=2; ЧРД=.") + " м2'");
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", НСтр("ru = 'Площадь'"),
			Выборка.НомерСтроки, ИмяСписка, ТекстСообщения);
			Поле = Префикс + "Количество";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
	КонецЦикла;   
		
КонецПроцедуры

// Процедура предназначена для корректности сроков аренды относительно начала аренды и конца
Процедура ПроверитьЗаполнениеСроковАренды(ИмяТабличнойЧасти, Отказ)
	
	ИмяСписка = ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
	
	// Проверим, что дата начала аренды в строках табличной части соответствует дате начала в заключении договора
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВТТабличнаяЧасть
	|ИЗ
	|	&ТабличнаяЧасть КАК ТабличнаяЧасть";
	Запрос.УстановитьПараметр("ТабличнаяЧасть", ЭтотОбъект[ИмяТабличнойЧасти].Выгрузить());
	Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("ЗаключениеДоговора", ДокументОснование);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДопСоглашениеТабличнаяЧасть.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТТабличнаяЧасть КАК ДопСоглашениеТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АР_СтатусыОбъектовАренды.СрезПоследних(
	|				&Дата,
	|				ЗаключениеДоговора = &ЗаключениеДоговора
	|					И Регистратор <> &Регистратор) КАК СтатусыОбъектов
	|		ПО ДопСоглашениеТабличнаяЧасть.ОбъектАренды = СтатусыОбъектов.ОбъектАренды
	|			И ДопСоглашениеТабличнаяЧасть.Услуга = СтатусыОбъектов.Услуга
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &Дата >= ДопСоглашениеТабличнаяЧасть.ДатаНачалаСрокаАренды
	|				ТОГДА &Дата
	|			ИНАЧЕ ДопСоглашениеТабличнаяЧасть.ДатаНачалаСрокаАренды
	|		КОНЕЦ >= СтатусыОбъектов.ДатаНачалаАренды
	|	И ДопСоглашениеТабличнаяЧасть.ДатаНачалаСрокаАренды <> СтатусыОбъектов.ДатаНачалаАренды";
	Выборка = Запрос.Выполнить().Выбрать();
	ЕстьОшибки = Ложь;
	Пока Выборка.Следующий() Цикл
		Префикс = ИмяТабличнойЧасти + "[" + Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", НСтр("ru = 'Дата начала'"),
		Выборка.НомерСтроки, ИмяСписка, ТекстСообщения);
		Поле = Префикс + "ДатаНачалаСрокаАренды";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", ЕстьОшибки);
	КонецЦикла;
	Если ЕстьОшибки Тогда
		ТекстСообщения = "Дата начала и окончания означают период действия самой услуги, а не период действия новых условий (например, ставок) по этой услуге. Рекомендуется оставить дату начала такую же, как в заключении договора аренды.
		|Условия дополнительного соглашения действуют, начиная с  даты его регистрации и до конца договора или до ввода следующего дополнительного соглашения.";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , "Объект");
	КонецЕсли;
	
	// Если доп.соглашение ограничено по сроку действия, 
	// то срок действия новых услуг не может превышать срок действия ДС
	Если ЗначениеЗаполнено(СрокДействия) Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВТТабличнаяЧасть.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТТабличнаяЧасть КАК ВТТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АР_Ставки.СрезПоследних(
		|				&Период,
		|				Договор = &Договор
		|					И (СрокДействия >= &Период
		|						ИЛИ СрокДействия = ДАТАВРЕМЯ(1, 1, 1))
		|					И Регистратор <> &Регистратор) КАК Ставки
		|		ПО ВТТабличнаяЧасть.ОбъектАренды = Ставки.ОбъектАренды
		|			И ВТТабличнаяЧасть.Услуга = Ставки.Услуга
		|ГДЕ
		|	ВТТабличнаяЧасть.ДатаОкончанияСрокаАренды > &СрокДействия
		|	И ЕСТЬNULL(Ставки.Ставка, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО";
		Запрос.УстановитьПараметр("СрокДействия", СрокДействия);
		Запрос.УстановитьПараметр("Период", СрокДействия + 24*60*60);
		Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);
		Запрос.УстановитьПараметр("Регистратор", Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Префикс = ИмяТабличнойЧасти + "[" + Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
			ТекстСообщения = "В дополнительных соглашениях с ограниченным сроком действия для новых услуг дата окончания не должна превышать срок действия соглашения.";
			Поле = Префикс + "ДатаОкончанияСрокаАренды";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтавки(ПостояннаяЧасть) Экспорт
	
	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АР_СтавкиСрезПоследних.Услуга КАК Услуга,
	|	АР_СтавкиСрезПоследних.ОбъектАренды КАК ОбъектАренды,
	|	АР_СтавкиСрезПоследних.Ставка КАК Ставка
	|ИЗ
	|	РегистрСведений.АР_Ставки.СрезПоследних(
	|			&Период,
	|			Договор = &Договор
	|				И Услуга.АР_ПостояннаяЧастьОплаты = &ПостояннаяЧасть
	|				И (СрокДействия >= &Период
	|					ИЛИ СрокДействия = ДАТАВРЕМЯ(1, 1, 1))) КАК АР_СтавкиСрезПоследних";
	
	Запрос.УстановитьПараметр("Период", КонецДня(Дата));
	Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ПостояннаяЧасть", ПостояннаяЧасть);
	
	Ставки = Запрос.Выполнить().Выгрузить();
	ТабличнаяЧасть = ?(ПостояннаяЧасть, ПостояннаяЧастьАренднойПлаты, ПеременнаяЧастьАренднойПлаты);
	
	СтруктураОтбора = Новый Структура("ОбъектАренды, Услуга");
	Для каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ОбъектАренды)
			ИЛИ Не ЗначениеЗаполнено(СтрокаТЧ.Услуга) Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТЧ.Ставка)
			И ТипЗнч(СтрокаТЧ.Ставка) = Тип("СправочникСсылка.АР_ГрафикиИзмененияСтавокНаУслуги") Тогда
			СтавкаОбъект = СтрокаТЧ.Ставка.ПолучитьОбъект();
			СтавкаОбъект.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТЧ);
		НайденныеСтроки = Ставки.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Ставка = НайденныеСтроки[0].Ставка;
			Если ТипЗнч(Ставка) = Тип("Число") Тогда
				СтрокаТЧ.Ставка = Ставка;
			ИначеЕсли ТипЗнч(Ставка) = Тип("СправочникСсылка.АР_ГрафикиИзмененияСтавокНаУслуги") Тогда
				СтарыйГрафик = Ставка.ГрафикСтавок.Выгрузить();
				СтарыйГрафик.Сортировать("Дата");
				Сч = 0;
				Пока Сч < СтарыйГрафик.Количество()-1 Цикл
					СтрокаГрафика = СтарыйГрафик[Сч];
					СледующаяСтрокаГрафика = СтарыйГрафик[Сч+1];
					Если СледующаяСтрокаГрафика.Дата <= НачалоДня(Дата) Тогда
						СтарыйГрафик.Удалить(Сч);
					Иначе
						Сч = Сч + 1;
					КонецЕсли;
				КонецЦикла;
				Если СтарыйГрафик.Количество() = 1 Тогда
					СтрокаТЧ.Ставка = СтарыйГрафик[0].Ставка;
				Иначе
					Если СтарыйГрафик[0].Дата < НачалоДня(Дата) Тогда
						СтарыйГрафик[0].Дата = НачалоДня(Дата);
					КонецЕсли;
					НовыйГрафик = Справочники.АР_ГрафикиИзмененияСтавокНаУслуги.СоздатьЭлемент();
					НовыйГрафик.Наименование = Ставка.Наименование;
					НовыйГрафик.Владелец = ДоговорКонтрагента;
					НовыйГрафик.Документ = Ссылка;
					НовыйГрафик.ГрафикСтавок.Загрузить(СтарыйГрафик);
					НовыйГрафик.Записать();
					СтрокаТЧ.Ставка = НовыйГрафик.Ссылка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСчетчики() Экспорт
	
	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АР_СтавкиСрезПоследних.Услуга КАК Услуга,
	|	АР_СтавкиСрезПоследних.ОбъектАренды,
	|	АР_СтавкиСрезПоследних.Счетчик
	|ИЗ
	|	РегистрСведений.АР_СтатусыОбъектовАренды.СрезПоследних(
	|			&Период,
	|			Договор = &ДоговорКонтрагента
	|				И НЕ Услуга.АР_ПостояннаяЧастьОплаты) КАК АР_СтавкиСрезПоследних";
	
	Запрос.УстановитьПараметр("Период", КонецДня(Дата));
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	
	Счетчики = Запрос.Выполнить().Выгрузить();
	
	СтруктураОтбора = Новый Структура("ОбъектАренды, Услуга");
	Для каждого СтрокаТЧ Из ПеременнаяЧастьАренднойПлаты Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ОбъектАренды)
			ИЛИ Не ЗначениеЗаполнено(СтрокаТЧ.Услуга) Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТЧ.Счетчик)
			И ТипЗнч(СтрокаТЧ.Счетчик) = Тип("СправочникСсылка.АР_СпискиСчетчиков") Тогда
			СчетчикОбъект = СтрокаТЧ.Счетчик.ПолучитьОбъект();
			СчетчикОбъект.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТЧ);
		НайденныеСтроки = Счетчики.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Счетчик = НайденныеСтроки[0].Счетчик;
			Если ТипЗнч(Счетчик) = Тип("СправочникСсылка.АР_Счетчики") Тогда
				СтрокаТЧ.Счетчик = Счетчик;
			ИначеЕсли ТипЗнч(Счетчик) = Тип("СправочникСсылка.АР_СпискиСчетчиков") Тогда
				НовыйСписокСчетчиков = Справочники.АР_СпискиСчетчиков.СоздатьЭлемент();
				НовыйСписокСчетчиков.Наименование = Счетчик.Наименование;
				НовыйСписокСчетчиков.Владелец = ДоговорКонтрагента;
				НовыйСписокСчетчиков.Документ = Ссылка;
				НовыйСписокСчетчиков.СписокСчетчиков.Загрузить(Счетчик.СписокСчетчиков.Выгрузить());
				НовыйСписокСчетчиков.Записать();
				СтрокаТЧ.Счетчик = НовыйСписокСчетчиков.Ссылка;
				СтрокаТЧ.КоэффициентОтнесенияСчетчика = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьПризнакНДС(Отказ)
	
	Если Не ПолучитьФункциональнуюОпцию("АР_ИспользоватьСхемуОпределенияСтавокНДСПоАрендеНаОсновеДоговора") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АР_СтатусыОбъектовАрендыСрезПоследних.ОбъектАренды КАК ОбъектАренды,
	|	АР_СтатусыОбъектовАрендыСрезПоследних.Услуга КАК Услуга,
	|	АР_СтатусыОбъектовАрендыСрезПоследних.Регистратор.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	АР_СтатусыОбъектовАрендыСрезПоследних.Услуга.АР_ПостояннаяЧастьОплаты КАК ПостояннаяЧасть
	|ИЗ
	|	РегистрСведений.АР_СтатусыОбъектовАренды.СрезПоследних(&Период, ЗаключениеДоговора = &ЗаключениеДоговора) КАК АР_СтатусыОбъектовАрендыСрезПоследних
	|ГДЕ
	|	АР_СтатусыОбъектовАрендыСрезПоследних.ДатаОкончанияАренды >= &Дата
	|	И (АР_СтатусыОбъектовАрендыСрезПоследних.Регистратор.ДокументБезНДС <> &ДокументБезНДС
	|			ИЛИ &ДокументБезНДС = ЛОЖЬ
	|				И АР_СтатусыОбъектовАрендыСрезПоследних.Регистратор.СуммаВключаетНДС <> &СуммаВключаетНДС)";
	
	Запрос.УстановитьПараметр("Период", Новый Граница(МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ЗаключениеДоговора", ДокументОснование);
	Запрос.УстановитьПараметр("Дата", НачалоДня(Дата));
	Запрос.УстановитьПараметр("СуммаВключаетНДС", СуммаВключаетНДС);
	Запрос.УстановитьПараметр("ДокументБезНДС", ДокументБезНДС);
	
	Выборка = Запрос.Выполнить().Выбрать();
	СтруктураПоиска = Новый Структура("ОбъектАренды, Услуга");
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		Если Выборка.ПостояннаяЧасть Тогда
			НайденныеСтроки = ПостояннаяЧастьАренднойПлаты.НайтиСтроки(СтруктураПоиска);
		Иначе
			НайденныеСтроки = ПеременнаяЧастьАренднойПлаты.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;
		Если НайденныеСтроки.Количество() = 0 Тогда
			ТекстСообщения = "Вариант учета НДС может быть изменен только для всех действующих услуг по договору";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , "Объект", Отказ);
			Прервать;
		КонецЕсли;   			
	КонецЦикла;             	
		
КонецПроцедуры

Процедура ПроверитьПараметрыНачисленияПеней(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВТТабличнаяЧасть
	|ИЗ
	|	&ТабличнаяЧасть КАК ТабличнаяЧасть";
	Запрос.УстановитьПараметр("ТабличнаяЧасть", СрокиОплаты.Выгрузить());
	Запрос.Выполнить();
	
	// Проверим, что нет повторяющихся пар Назначение срока и услуга     
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВТТабличнаяЧасть.НазначениеСрока КАК НазначениеСрока,
	|	ВТТабличнаяЧасть.Услуга КАК Услуга,
	|	СУММА(1) КАК Количество
	|ИЗ
	|	ВТТабличнаяЧасть КАК ВТТабличнаяЧасть
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТТабличнаяЧасть.НазначениеСрока,
	|	ВТТабличнаяЧасть.Услуга ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Количество > 1 Тогда
			ИмяСписка = "Сроки оплаты";
			Если ЗначениеЗаполнено(Выборка.Услуга) Тогда
				ТекстСообщения = НСтр("ru = 'Для услуги """ + Выборка.Услуга + """ имеется несколько строк сроков оплаты'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Для назначения срока """ + Выборка.НазначениеСрока + """ имеется несколько строк сроков оплаты'");
			КонецЕсли;
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Список", "Корректность",
			,, ИмяСписка, ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,
			"СрокиОплаты", "Объект", Отказ);
		КонецЕсли;   		
	КонецЦикла;
	
	Для каждого СтрокаТЧ Из СрокиОплаты Цикл
		Префикс = "СрокиОплаты[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		Если СтрокаТЧ.НазначениеСрока = Перечисления.АР_ВариантыНазначенияСрокаОплаты.ДляУслуги И Не ЗначениеЗаполнено(СтрокаТЧ.Услуга) Тогда
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Заполнение", НСтр("ru = 'Услуга'"), СтрокаТЧ.НомерСтроки, "Сроки оплаты");
			Поле = Префикс + "Услуга";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ДокументБезНДС = НЕ УчетнаяПолитика.ПлательщикНДС(Организация, Дата);
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ДокументОснование = ДанныеЗаполнения;
		ДоговорКонтрагента = ДокументОснование.ДоговорКонтрагента;
		Дата = ТекущаяДата();
		ЗаполнитьТекущимиДанными();
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") И ДанныеЗаполнения.Свойство("ДоговорКонтрагента") Тогда
		Если ДанныеЗаполнения.Свойство("Период") Тогда
			Дата = ДанныеЗаполнения.Период;
		Иначе
			Дата = ТекущаяДата();
		КонецЕсли;
		ДоговорКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента;
		ЗаполнитьТекущимиДанными(Ложь);
	Иначе
		СуммаВключаетНДС = Истина;
	КонецЕсли;
	
	врДокументБезНДС = ДокументБезНДС;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	ДокументБезНДС = врДокументБезНДС;

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ДетализацияСроковОплаты = Перечисления.АР_ДетализацииСроковОплаты.ОбщиеУсловия Тогда
		Пока СрокиОплаты.Количество() > 1 Цикл
			СрокиОплаты.Удалить(1);
		КонецЦикла;
		Если СрокиОплаты.Количество() < 1 Тогда
			СрокиОплаты.Добавить();
		КонецЕсли;
		СрокиОплаты[0].НазначениеСрока = Перечисления.АР_ВариантыНазначенияСрокаОплаты.Общий;
		СрокиОплаты[0].Услуга = Неопределено;
	ИначеЕсли ДетализацияСроковОплаты = Перечисления.АР_ДетализацииСроковОплаты.РаздельныеУсловия Тогда
		Пока СрокиОплаты.Количество() > 2 Цикл
			СрокиОплаты.Удалить(1);
		КонецЦикла;
		Пока СрокиОплаты.Количество() < 2 Цикл
			СрокиОплаты.Добавить();
		КонецЦикла;
		СрокиОплаты[0].НазначениеСрока = Перечисления.АР_ВариантыНазначенияСрокаОплаты.ПостояннаяЧасть;
		СрокиОплаты[1].НазначениеСрока = Перечисления.АР_ВариантыНазначенияСрокаОплаты.ПеременнаяЧасть;
		СрокиОплаты[0].Услуга = Неопределено;
		СрокиОплаты[1].Услуга = Неопределено;
	Иначе
		Для каждого СтрокаТЧ Из СрокиОплаты Цикл
			Если СтрокаТЧ.НазначениеСрока <> Перечисления.АР_ВариантыНазначенияСрокаОплаты.ДляУслуги Тогда
				СтрокаТЧ.Услуга = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Для каждого СтрокаСрокОплаты Из СрокиОплаты Цикл
		Если СтрокаСрокОплаты.СпособОпределенияСрокаОплаты = Перечисления.АР_СпособыРасчетаПросрочки.ПоПериодуНачисления Тогда
			СтрокаСрокОплаты.КоличествоДнейОтДатыСчетаАкта = 0;
		Иначе
			СтрокаСрокОплаты.СрокОплаты = 0;
			СтрокаСрокОплаты.ПериодСрокаОплаты = 0;
		КонецЕсли;
		СтрокаСрокОплаты.СпособПогашенияПени = СрокиОплаты[0].СпособПогашенияПени;
		СтрокаСрокОплаты.УчитыватьТолькоРабочиеДниПриРасчетеПени = СрокиОплаты[0].УчитыватьТолькоРабочиеДниПриРасчетеПени;
	КонецЦикла;
	
	Если ИспользоватьСпециальныйКурсВалюты Тогда
		Если СпособРасчета = Перечисления.АР_СпособыРасчетаКурсаВалюты.Фиксированный Тогда
			Коэффициент = 0;
			ВерхняяГраница = 0;
			НижняяГраница = 0;
		ИначеЕсли СпособРасчета = Перечисления.АР_СпособыРасчетаКурсаВалюты.Расчетный Тогда
			Курс = 0;
			Кратность = 0;
		КонецЕсли;
	Иначе
		СпособРасчета = Перечисления.АР_СпособыРасчетаКурсаВалюты.ПустаяСсылка();
		Коэффициент = 0;
		ВерхняяГраница = 0;
		НижняяГраница = 0;
		Курс = 0;
		Кратность = 0;
	КонецЕсли;
	
	Если ПометкаУдаления Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Документ", Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	АР_ГрафикиИзмененияСтавокНаУслуги.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.АР_ГрафикиИзмененияСтавокНаУслуги КАК АР_ГрафикиИзмененияСтавокНаУслуги
		|ГДЕ
		|	АР_ГрафикиИзмененияСтавокНаУслуги.Документ = &Документ";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ГрафикОбъект = Выборка.Ссылка.Получитьобъект();	
			ГрафикОбъект.ПометкаУдаления = ПометкаУдаления;
			ГрафикОбъект.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Исключаем из проверки реквизиты, заполнение которых стало необязательным:
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	Если ИспользоватьСпециальныйКурсВалюты Тогда
		Если Не СпособРасчета = Перечисления.АР_СпособыРасчетаКурсаВалюты.Фиксированный Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Курс");
			МассивНепроверяемыхРеквизитов.Добавить("Кратность");
		КонецЕсли;
		Если Не СпособРасчета = Перечисления.АР_СпособыРасчетаКурсаВалюты.Расчетный Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Коэффициент");
		КонецЕсли;
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("ВалютаСпособаНачисления");
		МассивНепроверяемыхРеквизитов.Добавить("СпособРасчета");
		МассивНепроверяемыхРеквизитов.Добавить("Курс");
		МассивНепроверяемыхРеквизитов.Добавить("Кратность");
		МассивНепроверяемыхРеквизитов.Добавить("Коэффициент");
	КонецЕсли;
		
	// Проверим, что доп.соглашение введено позднее Заключения договора
	Если ЗначениеЗаполнено(ДокументОснование) И МоментВремени().Сравнить(ДокументОснование.МоментВремени()) = -1 Тогда
		ТекстСообщения = НСтр("ru = 'Дополнительное соглашение должно быть введено позднее заключения договора'");
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, "Корректность",
				НСтр("ru = 'Дата'"),,, ТекстСообщения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,
			"Дата", "Объект", Отказ);
	КонецЕсли;
	
	Если ДатаЗаключенияДоговора > ДатаОкончанияДоговора Тогда
		ТекстСообщения = НСтр("ru = 'Дата заключения договора превышает дату окончания действия договора'");
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, "Корректность",
				НСтр("ru = 'Дата заключения договора'"),,, ТекстСообщения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,
			"ДатаЗаключенияДоговора", "Объект", Отказ);
	КонецЕсли;
	
	Если СпособРасчета = Перечисления.АР_СпособыРасчетаКурсаВалюты.Расчетный 
		И ЗначениеЗаполнено(ВерхняяГраница)
		И ВерхняяГраница < НижняяГраница Тогда
		ТекстСообщения = НСтр("ru = 'Нижняя граница курса валюты не может превышать верхнюю границу'");
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, "Корректность",
				НСтр("ru = 'Нижняя граница'"),,, ТекстСообщения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,
			"НижняяГраница", "Объект", Отказ);
	КонецЕсли;
	
	ПроверитьПризнакНДС(Отказ);
	
	// Сроки оплаты
	Если Не ДоговорКонтрагента.АР_ВестиВзаиморасчетыПоУслугам
		И ДетализацияСроковОплаты <> Перечисления.АР_ДетализацииСроковОплаты.ОбщиеУсловия Тогда
		ТекстСообщения = "Настройки сроков оплаты постоянной и переменной части могут различаться только при условии ведения взаиморасчетов по услугам (установлен соответствующий признак в карточке договора контрагента).";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;
	
	// Проверяем табличную часть "Постоянная часть арендной платы":
	ИмяСписка = НСтр("ru = 'Постоянная часть арендной платы'");
	Для каждого СтрокаТЧ Из ПостояннаяЧастьАренднойПлаты Цикл
		Префикс = "ПостояннаяЧастьАренднойПлаты[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		
		Если ЗначениеЗаполнено(СтрокаТЧ.ДатаНачалаСрокаАренды) И ЗначениеЗаполнено(СтрокаТЧ.ДатаОкончанияСрокаАренды) Тогда
			
			Если СтрокаТЧ.ДатаНачалаСрокаАренды < ДатаЗаключенияДоговора Тогда
				ТекстСообщения = НСтр("ru = 'Дата начала аренды объекта меньше даты заключения договора'");
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", НСтр("ru = 'Дата начала срока аренды'"),
				СтрокаТЧ.НомерСтроки, ИмяСписка, ТекстСообщения);
				Поле = Префикс + "ДатаНачалаСрокаАренды";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			
			Если СтрокаТЧ.ДатаОкончанияСрокаАренды > ДатаОкончанияДоговора Тогда
				ТекстСообщения = НСтр("ru = 'Дата окончания аренды объекта больше даты окончания действия договора'");
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", НСтр("ru = 'Дата окончания срока аренды'"),
				СтрокаТЧ.НомерСтроки, ИмяСписка, ТекстСообщения);
				Поле = Префикс + "ДатаОкончанияСрокаАренды";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			
			// Проверим заполнение сроков аренды
			Если СтрокаТЧ.ДатаНачалаСрокаАренды > СтрокаТЧ.ДатаОкончанияСрокаАренды Тогда
				ТекстСообщения = НСтр("ru = 'Дата начала аренды не может превышать дату окончания'");
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", НСтр("ru = 'Дата начала срока аренды'"),
				СтрокаТЧ.НомерСтроки, ИмяСписка, ТекстСообщения);
				Поле = Префикс + "ДатаНачалаСрокаАренды";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;	
						
		КонецЕсли;
		
		// Проверим корректность заполнения услуг
		Если Не СтрокаТЧ.Услуга.АР_ПостояннаяЧастьОплаты Тогда
			ТекстСообщения = НСтр("ru = 'Указанная услуга не соответствует назначению табличной части'");
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", НСтр("ru = 'Услуга'"),
					СтрокаТЧ.НомерСтроки, ИмяСписка, ТекстСообщения);
			Поле = Префикс + "Услуга";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
				
		// Проверим корректность заполнения способов начисления
		Если СтрокаТЧ.СпособНачисления.ВариантРасчета = Перечисления.АР_ВариантыРасчета.РасчетПоПроизвольнойФормуле Тогда
			ТекстСообщения = НСтр("ru = 'В способе начисления указан недопустимый вариант расчета'");
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", НСтр("ru = 'Способ начисления'"),
					СтрокаТЧ.НомерСтроки, ИмяСписка, ТекстСообщения);
			Поле = Префикс + "СпособНачисления";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		// Проверим, что если ставка - это график, то он соответствует текущему документу
		Если ТипЗнч(СтрокаТЧ.Ставка) = Тип("СправочникСсылка.АР_ГрафикиИзмененияСтавокНаУслуги") Тогда
			Если СтрокаТЧ.Ставка.Документ <> Ссылка Тогда
				ТекстСообщения = НСтр("ru = 'Ставка не соответствует текущему документу'");
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", НСтр("ru = 'Ставка'"),
						СтрокаТЧ.НомерСтроки, ИмяСписка, ТекстСообщения);
				Поле = Префикс + "Ставка";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
		ИначеЕсли СтрокаТЧ.Ставка = Неопределено Тогда // Запретим неопределенную ставку
			ТекстСообщения = НСтр("ru = 'Необходимо выбрать тип ставки'");
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", НСтр("ru = 'Ставка'"),
				СтрокаТЧ.НомерСтроки, ИмяСписка, ТекстСообщения);
			Поле = Префикс + "Ставка";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверяем табличную часть "Переменнач часть арендной платы":
	ИмяСписка = НСтр("ru = 'Переменная часть арендной платы'");
	Для каждого СтрокаТЧ Из ПеременнаяЧастьАренднойПлаты Цикл
		
		Префикс = "ПеременнаяЧастьАренднойПлаты[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
				
		// Проверим, что если ставка - это график, то он соответствует текущему документу
		Если ТипЗнч(СтрокаТЧ.Ставка) = Тип("СправочникСсылка.АР_ГрафикиИзмененияСтавокНаУслуги") Тогда
			Если СтрокаТЧ.Ставка.Документ <> Ссылка Тогда
				ТекстСообщения = НСтр("ru = 'Ставка не соответствует текущему документу'");
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", НСтр("ru = 'Ставка'"),
						СтрокаТЧ.НомерСтроки, ИмяСписка, ТекстСообщения);
				Поле = Префикс + "Ставка";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
		ИначеЕсли СтрокаТЧ.Ставка = Неопределено Тогда // Запретим неопределенную ставку
			ТекстСообщения = НСтр("ru = 'Необходимо выбрать тип ставки'");
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", НСтр("ru = 'Ставка'"),
				СтрокаТЧ.НомерСтроки, ИмяСписка, ТекстСообщения);
			Поле = Префикс + "Ставка";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	ПроверитьЗаполнениеСроковАренды("ПостояннаяЧастьАренднойПлаты", Отказ);
	ПроверитьСтатусыОбъектовАренды("ПостояннаяЧастьАренднойПлаты", Отказ);
	ПроверитьПризнакСдачиВАренду("ПостояннаяЧастьАренднойПлаты", Отказ);
	ПроверитьПлощадьОбъектовАренды(Отказ);

	// Проверяем табличную часть "Переменную часть арендной платы":
	ИмяСписка = НСтр("ru = 'Переменная часть арендной платы'");
	Для каждого СтрокаТЧ Из ПеременнаяЧастьАренднойПлаты Цикл
		Префикс = "ПеременнаяЧастьАренднойПлаты[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		
		Если ЗначениеЗаполнено(СтрокаТЧ.ДатаНачалаСрокаАренды) И ЗначениеЗаполнено(СтрокаТЧ.ДатаОкончанияСрокаАренды) Тогда
			
			Если СтрокаТЧ.ДатаНачалаСрокаАренды < ДатаЗаключенияДоговора Тогда
				ТекстСообщения = НСтр("ru = 'Дата начала аренды объекта меньше даты заключения договора'");
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", НСтр("ru = 'Дата начала срока аренды'"),
				СтрокаТЧ.НомерСтроки, ИмяСписка, ТекстСообщения);
				Поле = Префикс + "ДатаНачалаСрокаАренды";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			
			Если СтрокаТЧ.ДатаОкончанияСрокаАренды > ДатаОкончанияДоговора Тогда
				ТекстСообщения = НСтр("ru = 'Дата окончания аренды объекта больше даты окончания действия договора'");
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", НСтр("ru = 'Дата окончания срока аренды'"),
				СтрокаТЧ.НомерСтроки, ИмяСписка, ТекстСообщения);
				Поле = Префикс + "ДатаОкончанияСрокаАренды";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			
			// Проверим заполнение сроков аренды
			Если СтрокаТЧ.ДатаНачалаСрокаАренды > СтрокаТЧ.ДатаОкончанияСрокаАренды Тогда
				ТекстСообщения = НСтр("ru = 'Дата начала аренды не может превышать дату окончания'");
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", НСтр("ru = 'Дата начала срока аренды'"),
				СтрокаТЧ.НомерСтроки, ИмяСписка, ТекстСообщения);
				Поле = Префикс + "ДатаНачалаСрокаАренды";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;	
			
		КонецЕсли;
		
		// Проверим корректность заполнения услуг
		Если СтрокаТЧ.Услуга.АР_ПостояннаяЧастьОплаты Тогда
			ТекстСообщения = НСтр("ru = 'Указанная услуга не соответствует назначению табличной части'");
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", НСтр("ru = 'Услуга'"),
					СтрокаТЧ.НомерСтроки, ИмяСписка, ТекстСообщения);
			Поле = Префикс + "Услуга";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
				
		// Проверим, что если ставка - это график, то он соответствует текущему документу
		Если ТипЗнч(СтрокаТЧ.Ставка) = Тип("СправочникСсылка.АР_ГрафикиИзмененияСтавокНаУслуги") Тогда
			Если СтрокаТЧ.Ставка.Документ <> Ссылка Тогда
				ТекстСообщения = НСтр("ru = 'Ставка не соответствует текущему документу'");
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", НСтр("ru = 'Ставка'"),
						СтрокаТЧ.НомерСтроки, ИмяСписка, ТекстСообщения);
				Поле = Префикс + "Ставка";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ПроверитьЗаполнениеСроковАренды("ПеременнаяЧастьАренднойПлаты", Отказ);
	ПроверитьСтатусыОбъектовАренды("ПеременнаяЧастьАренднойПлаты", Отказ);
	ПроверитьПризнакСдачиВАренду("ПеременнаяЧастьАренднойПлаты", Отказ);
	ПроверитьПараметрыНачисленияПеней(Отказ);
	
	// Удаляем из проверяемых реквизитов все, по которым автоматическая проверка не нужна:
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПроведения = Документы.АР_ДополнительноеСоглашение.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ

	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	АР_ОбщиеПроцедуры.СформироватьДвиженияПоРегистру(ПараметрыПроведения.СтатусыОбъектовАрендыПостояннаяЧасть, Движения, "АР_СтатусыОбъектовАренды", Отказ);
	АР_ОбщиеПроцедуры.СформироватьДвиженияПоРегистру(ПараметрыПроведения.СтатусыОбъектовАрендыПеременнаяЧасть, Движения, "АР_СтатусыОбъектовАренды", Отказ);
	
	АР_ОбщиеПроцедуры.СформироватьДвиженияПоРегистру(ПараметрыПроведения.СтавкиПостояннаяЧасть, Движения, "АР_Ставки", Отказ);
	АР_ОбщиеПроцедуры.СформироватьДвиженияПоРегистру(ПараметрыПроведения.СтавкиПеременнаяЧасть, Движения, "АР_Ставки", Отказ);
		
	АР_ОбщиеПроцедуры.СформироватьДвиженияПоРегистру(ПараметрыПроведения.ПараметрыНачисленияПени, Движения, "АР_СрокиОплатыИПараметрыНачисленияПеней", Отказ);
	
	АР_ОбщиеПроцедуры.СформироватьДвиженияПоРегистру(ПараметрыПроведения.КурсыВалют, Движения, "АР_КурсыВалютДляРасчетовСАрендаторами", Отказ);
		
	ПроведениеСервер.УстановитьЗаписьОчищаемыхНаборовЗаписей(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

КонецПроцедуры

#КонецЕсли
