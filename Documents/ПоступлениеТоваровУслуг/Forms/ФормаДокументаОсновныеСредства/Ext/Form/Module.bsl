
#Область ОписаниеПеременных

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;
&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПоступлениеТоваровУслугФормы.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	УстановитьВидимостьСчетовУчета();
	
	УстановитьУсловноеОформление();
	
	УчетНДС.ПрименитьПраваДоступаСчетаФактуры(
		СчетФактура,
		Элементы.СчетФактураПросмотр,
		Элементы.СчетФактураРедактирование);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтотОбъект,
		"БП.Документ.ПоступлениеТоваровУслуг",
		"ФормаДокументаОсновныеСредства",
		НСтр("ru='Новости: Поступление (акт, накладная)'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	// ИнтеграцияС1СДокументооборотом
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборот = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот");
		МодульИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВыборПорядкаУчетаРасчетов" Тогда
		ОбработкаВыбораПорядокУчетаРасчетовНаСервере(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.УниверсальныйПередаточныйДокумент" Тогда
		ОбработкаВыбораУниверсальныйПередаточныйДокументНаСервере(ВыбранноеЗначение);
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Запись_СчетФактураПолученный"
	   И ТипЗнч(Параметр) = Тип("Структура") 
	   И Параметр.Свойство("ДокументыОснования") 
	   И Параметр.ДокументыОснования.Найти(Объект.Ссылка) <> Неопределено Тогда
		
		ПоступлениеТоваровУслугФормыКлиентСервер.ЗаполнитьРеквизитыПроСчетФактуру(ЭтотОбъект, Параметр.РеквизитыСФ);
		СтатусыОригиналовДокументов = СтатусыОригиналовДокументов(Объект.Ссылка, СчетФактура);
		ОригиналСчетаФактуры = СтатусыОригиналовДокументов[СчетФактура];
		УправлениеФормой(ЭтотОбъект);
		
	ИначеЕсли ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
		
		Прочитать();
		
	ИначеЕсли ИмяСобытия = "ИзмененСтатусДокументов" Тогда
		
		// Статус документа изменен в форме списка поступлений или счетов-фактур.
		Если Не Объект.Ссылка.Пустая() 
			И (Параметр.Найти(Объект.Ссылка) <> Неопределено ИЛИ Параметр.Найти(СчетФактура) <> Неопределено) Тогда
			СтатусыОригиналовДокументов = СтатусыОригиналовДокументов(Объект.Ссылка, СчетФактура);
			ОригиналПолучен      = СтатусыОригиналовДокументов[Объект.Ссылка];
			ОригиналСчетаФактуры = СтатусыОригиналовДокументов[СчетФактура];
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_ДоговорыКонтрагентов" И Объект.ДоговорКонтрагента = Источник Тогда
		
		ТребуетсяПерерасчитатьСрокОплаты =
			ИспользуетсяПланированиеПлатежей И АвторасчетСрокаОплаты;
			
		Если ТребуетсяПерерасчитатьСрокОплаты Тогда
			ОбновитьСрокОплатыНаСервере();
		КонецЕсли;

	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ПоступлениеТоваровУслугФормы.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПоступлениеТоваровУслугФормыКлиент.ПередЗаписью(
		ЭтотОбъект, Отказ, ПараметрыЗаписи);
		
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПоступлениеТоваровУслугФормы.ПослеЗаписиНаСервере(
		ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
		
	УчетНДСКлиентСервер.ОтобразитьПолеУПД(ЭтотОбъект, ТекущийОбъект.ЭтоУниверсальныйДокумент);
		
	УстановитьСостояниеДокумента();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	РаботаСДоговорамиКонтрагентовБП.СохранитьПараметрыДоговора(
		ТекущийОбъект.ДоговорКонтрагента,
		ТекущийОбъект.ЭтоУниверсальныйДокумент,
		ТекущийОбъект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтеграцияС1СДокументооборотом
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборот = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот");
		МодульИнтеграцияС1СДокументооборот.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец ИнтеграцияС1СДокументооборотом
	
	ПоступлениеТоваровУслугФормы.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПоступлениеТоваровУслугФормы.ПриЗаписиНаСервере(
		ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПоступлениеТоваровУслугФормыКлиент.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	Оповестить("ИзмененаИнформацияОС", Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	ПоступлениеТоваровУслугФормыКлиент.ПередЗакрытием(ЭтотОбъект, Отказ, ЗавершениеРаботы);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	ПоступлениеТоваровУслугФормыКлиент.ПриЗакрытии(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НомерВходящегоДокументаПриИзменении(Элемент)
	
	ПоступлениеТоваровУслугФормыКлиент.НомерВходящегоДокументаПриИзменении(ЭтотОбъект, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДатаВходящегоДокументаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента) И НЕ Объект.Проведен Тогда
		Объект.Дата = Объект.ДатаВходящегоДокумента + (Объект.Дата - НачалоДня(Объект.Дата));
		ДатаПриИзмененииНаКлиенте();
	КонецЕсли;
	
	ПоступлениеТоваровУслугФормыКлиент.ДатаВходящегоДокументаПриИзменении(ЭтотОбъект);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	ДатаПриИзмененииНаКлиенте();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МестонахождениеОСПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.МестонахождениеОС) Тогда
		ПараметрыЗаполненияСчетовУчета = ПоступлениеТоваровУслугФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
			"МестонахождениеОС",
			Объект);

		СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(ПараметрыЗаполненияСчетовУчета);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ОткрытиеФормыВыбораКонтрагенты");
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		
		ДоговорКонтрагентаПриИзмененииНаСервере();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГруппаОСПриИзменении(Элемент)
	
	Если Объект.ОсновныеСредства.Количество() > 0 Тогда
	
		ТекстВопроса = НСтр("ru='Изменить группу учета ОС для указанных
								|в документе основных средств?'");
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ВыбранноеЗначение", Объект.ГруппаОС);

		Оповещение = Новый ОписаниеОповещения("ВопросИзменитьГруппуУчетаОСЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВопросИзменитьГруппуУчетаОСЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбработкаИзмененияГруппыУчетаОС(ДополнительныеПараметры.ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаИзмененияГруппыУчетаОС(ВыбранноеЗначение)
	
	Для каждого СтрокаОС из Объект.ОсновныеСредства Цикл
		Если Не ЗначениеЗаполнено(СтрокаОС.ОсновноеСредство) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектОС = СтрокаОС.ОсновноеСредство.ПолучитьОбъект();
		ОбъектОС.ГруппаОС = ВыбранноеЗначение;
		ОбъектОС.Записать();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокУчетаРасчетовНажатие(Элемент, СтандартнаяОбработка)
	
	АдресХранилищаЗачетАвансов = ПоместитьЗачетАвансовВоВременноеХранилищеНаСервере();

	ПоступлениеТоваровУслугФормыКлиент.ПорядокУчетаРасчетовНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка, АдресХранилищаЗачетАвансов);

КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)

	ПоступлениеТоваровУслугФормыКлиент.ЦеныИВалютаНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерСчетаФактурыПолученногоПриИзменении(Элемент)

	ПоступлениеТоваровУслугФормыКлиент.НомерСчетаФактурыПолученногоПриИзменении(ЭтотОбъект, Элемент);	
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	БухгалтерскийУчетКлиентПереопределяемый.ОткрытьСчетФактуру(ЭтотОбъект, СчетФактура, "СчетФактураПолученный");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыПредназначеныДляСдачиВАрендуПриИзменении(Элемент)
	
	ОбъектыПредназначеныДляСдачиВАрендуПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УПДПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, ЭтотОбъект.Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеУПДНажатие(Элемент, СтандартнаяОбработка)
	
	АдресХранилищаПродавцы = ПоместитьТаблицуПродавцыВоВременноеХранилищеНаСервере();
	УчетНДСКлиент.ОткрытьФормуРеквизитовУПД(ЭтотОбъект, СтандартнаяОбработка, АдресХранилищаПродавцы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОсновныеСредства

&НаКлиенте
Процедура ОсновныеСредстваПриИзменении(Элемент)

	ОбновитьИтоги(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваОсновноеСредствоПриИзменении(Элемент)

	ЭлементКоллекции = Элементы.ОсновныеСредства.ТекущиеДанные;
	
	ПараметрыЗаполненияСчетовУчета = ПоступлениеТоваровУслугФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
		"ОсновныеСредства.ОсновноеСредство",
		Объект,
		ЭлементКоллекции);

	СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(ПараметрыЗаполненияСчетовУчета);

	Если ЗначениеЗаполнено(ЭлементКоллекции.ОсновноеСредство) Тогда
		ЭлементКоллекции.ИнвентарныйНомер = ПолучитьКод(ЭлементКоллекции.ОсновноеСредство);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	ОбновитьИтоги(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваСуммаПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтотОбъект, "ОсновныеСредства",, ПрименяютсяСтавки4и2);

КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваСтавкаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтотОбъект, "ОсновныеСредства", ПрименяютсяСтавки4и2);

КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваСуммаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаНДС(ЭтотОбъект, "ОсновныеСредства");

КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваОсновноеСредствоАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПриобретениеЗемельныхУчастков") Тогда
		ПараметрыПолученияДанных.Вставить("ГруппаОС", ПредопределенноеЗначение("Перечисление.ГруппыОС.ЗемельныеУчастки"));
	Иначе
		ПараметрыПолученияДанных.Вставить("ГруппаОС", Объект.ГруппаОС);
	КонецЕсли;
	
	РаботаСОсновнымиСредствамиКлиент.ОсновноеСредствоАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваОсновноеСредствоОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПриобретениеЗемельныхУчастков") Тогда
		ПараметрыПолученияДанных.Вставить("ГруппаОС", ПредопределенноеЗначение("Перечисление.ГруппыОС.ЗемельныеУчастки"));
	Иначе
		ПараметрыПолученияДанных.Вставить("ГруппаОС", Объект.ГруппаОС);
	КонецЕсли;
	
	РаботаСОсновнымиСредствамиКлиент.ОсновноеСредствоОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваОсновноеСредствоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСОсновнымиСредствамиКлиент.ОсновноеСредствоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗарегистрироватьСчетФактуру(Команда)
	
	ПоступлениеТоваровУслугФормыКлиент.ЗарегистрироватьСчетФактуру(ЭтотОбъект, Команда);
	УправлениеФормой(ЭтотОбъект);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.НадписьСчетФактура);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере() Экспорт
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) 
		и ЗначениеЗаполнено(Объект.Контрагент)
		и НЕ ЗначениеЗаполнено(Объект.Ссылка) 
		и НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ПоступлениеТоваровУслугФормы.КонтрагентПриИзменении(ЭтотОбъект);
	ИначеЕсли ВестиУчетПоДоговорам И ПоступлениеТоваровУслугФормы.ДоступноСозданиеОсновногоДоговораПоВидуОперации(Объект.ВидОперации) Тогда
		ПредлагатьНовыйДоговор = РаботаСДоговорамиКонтрагентовБП.ПредлагатьНовыйДоговор(Объект.Организация, Объект.Контрагент);
	КонецЕсли;
	
	ПоступлениеТоваровУслугФормы.УстановитьПараметрыПоДоговору(ЭтотОбъект);
	
	ПоступлениеТоваровУслугФормы.УстановитьПараметрыВыбора(ЭтотОбъект);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ПоступлениеТоваровУслугФормы.УстановитьПорядокУчетаРасчетов(ЭтотОбъект);
	
	ОбновитьИтоги(ЭтотОбъект);
	
	ПоступлениеТоваровУслугФормыКлиентСервер.УстановитьТребуетсяСчетФактура(ЭтотОбъект);
	ПоступлениеТоваровУслугФормыКлиентСервер.ЗаполнитьРеквизитыПроСчетФактуру(ЭтотОбъект);
	ПоступлениеТоваровУслугФормы.ЗаполнитьРеквизитыУПД(ЭтотОбъект);
	
	СтатусыОригиналовДокументов = СтатусыОригиналовДокументов(Объект.Ссылка, СчетФактура);
	ОригиналПолучен      = СтатусыОригиналовДокументов[Объект.Ссылка];
	ОригиналСчетаФактуры = СтатусыОригиналовДокументов[СчетФактура];
	
	УправлениеФормой(ЭтотОбъект);
	
	УстановитьВидимость();
	
	ПоступлениеТоваровУслугФормы.УстановитьЗаголовокФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы() Экспорт

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтотОбъект);

	ПлательщикНДС                    = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	ПрименениеУСНДоходы              = УчетнаяПолитика.ПрименяетсяУСНДоходы(Объект.Организация, Объект.Дата);
	РаздельныйУчетНДС                = УчетнаяПолитика.РаздельныйУчетНДС(Объект.Организация, Объект.Дата);
	РаздельныйУчетНДСНаСчете19       = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Объект.Организация, Объект.Дата);
	ЕстьВалютныйУчет                 = БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет();
	ИспользуетсяПланированиеПлатежей = ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеПлатежейПоставщикам");
	ВестиУчетПоДоговорам             = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
	ОбратноеНачислениеНДС            = БухгалтерскийУчетПереопределяемый.ИспользуетсяОбратноеНачислениеНДС();

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц(ИмяТаблицы = "") Экспорт

	ПараметрыОбъекта = Неопределено;
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтотОбъект, ПараметрыОбъекта);

	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "ОсновныеСредства" Тогда
		Для Каждого СтрокаТаблицы Из Объект.ОсновныеСредства Цикл
			ЗаполнитьДобавленныеКолонкиСтрокиТаблицыОсновныеСредства(СтрокаТаблицы, ПараметрыОбъекта);
		КонецЦикла;
	КонецЕслИ;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(Знач Форма, ПараметрыОбъекта)

	Объект = Форма.Объект;
	
	Если ТипЗнч(ПараметрыОбъекта) <> Тип("Структура") Тогда
		ПараметрыОбъекта = Новый Структура;
	КонецЕсли;
	
	ПараметрыОбъекта.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыОсновныеСредства(СтрокаТаблицы, Знач ПараметрыОбъекта)
	
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(ПараметрыОбъекта.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;

	Форма.ИтогиВсего    = Объект.ОсновныеСредства.Итог("Всего");
	Форма.ИтогиВсегоНДС = Объект.ОсновныеСредства.Итог("СуммаНДС");

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПриобретениеЗемельныхУчастков") Тогда
		
		Элементы.ОсновныеСредстваОсновноеСредство.Заголовок = НСтр("ru = 'Земельный участок'");
		
		Элементы.ОсновныеСредства.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		
		Элементы.СпособОтраженияРасходовПоАмортизации.Видимость = Ложь;
		Элементы.ГруппаОС.Видимость = Ложь;
		
		Элементы.ОсновныеСредстваСтавкаНДС.Видимость = Ложь;
		Элементы.ОсновныеСредстваСуммаНДС.Видимость = Ложь;
		Элементы.ОсновныеСредстваВсего.Видимость = Ложь;
		Элементы.ОсновныеСредстваСчетНачисленияАмортизации.Видимость = Ложь;
		Элементы.ОсновныеСредстваСчетУчетаНДС.Видимость = Ложь;
		Элементы.ОсновныеСредстваСпособУчетаНДС.Видимость = Ложь;
		Элементы.ОсновныеСредстваСрокПолезногоИспользования.Видимость = Ложь;
		
		Элементы.ИтогиВсегоНДС.Видимость = Ложь;
		
	Иначе
		
		Элементы.ИтогиВсегоНДС.Видимость = Не Объект.НДСНеВыделять;
		
	КонецЕсли;
	
	Если Объект.ЭтоУниверсальныйДокумент Тогда
		НеОтображатьРеквизитыСчетаФактуры = Истина;
	Иначе
		НеОтображатьРеквизитыСчетаФактуры = Объект.НДСНеВыделять;
	КонецЕсли;
	
	// Счет-фактура
	УчетНДСКлиентСервер.НастроитьПоляСчетаФактуры(
		Элементы.СчетФактураКнопка,
		Элементы.СчетФактураСсылка,
		Элементы.НадписьСчетФактура,
		НеОтображатьРеквизитыСчетаФактуры,
		Форма.ТребуетсяСчетФактура,
		Форма.СчетФактура);
		
	Элементы.ОригиналСчетаФактуры.Видимость = Форма.ТребуетсяСчетФактура И Не НеОтображатьРеквизитыСчетаФактуры;
	
	УчетНДСКлиентСервер.НастроитьПолеПродавецПоСчетуФактуре(
		Элементы.Продавец,
		Форма.ЭтоКомиссияНаЗакупку);
		
	УчетНДСКлиентСервер.ОтобразитьПолеУПД(Форма, НеОтображатьРеквизитыСчетаФактуры);
	
	ПоступлениеТоваровУслугФормыКлиентСервер.СформироватьНадписьЦеныИВалюта(Форма);
	
	Элементы.ДоговорКонтрагента.Доступность = 
		ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);
		
	Элементы.МестонахождениеОС.Доступность = ЗначениеЗаполнено(Объект.Организация);
	
	ДоступностьПорядокУчетаРасчетов = (НЕ Форма.ВестиУчетПоДоговорам И ЗначениеЗаполнено(Объект.Контрагент)) ИЛИ ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	Элементы.ПорядокУчетаРасчетов.Доступность = ДоступностьПорядокУчетаРасчетов;
	Элементы.ПорядокУчетаРасчетов.Гиперссылка = ДоступностьПорядокУчетаРасчетов;
		
	ЗаполнитьСписокВыбораСтавокНДС(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораСтавокНДС(Форма)

	Элементы = Форма.Элементы;
	
	СписокВыбораСтавок = Элементы.ОсновныеСредстваСтавкаНДС.СписокВыбора;
	СписокВыбораСтавок.Очистить();
	
	Если Форма.ПрименяютсяСтавки4и2 Тогда
		
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18"), "4%");
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10"), "2%");
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
		
	Иначе
		
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18_118"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10_110"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20_120"));
		
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	ПоказыватьКонтрагентаСчетаФактуры = (НЕ ЗначениеЗаполнено(ЭтотОбъект.СчетФактура)) И ЭтоКомиссияНаЗакупку;
	Если Элементы.Продавец.Видимость <> ПоказыватьКонтрагентаСчетаФактуры Тогда
		Элементы.Продавец.Видимость = ПоказыватьКонтрагентаСчетаФактуры;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив();
	
	ЭлементыСчетов.Добавить("ОсновныеСредстваСчетУчета");

	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОсновныеСредства Тогда
		ЭлементыСчетов.Добавить("СпособОтраженияРасходовПоАмортизации");
		ЭлементыСчетов.Добавить("ОсновныеСредстваСчетНачисленияАмортизации");
		ЭлементыСчетов.Добавить("ОсновныеСредстваСчетУчетаНДС");
		ЭлементыСчетов.Добавить("ОсновныеСредстваСпособУчетаНДС");
	КонецЕсли;
	
	// Поле формы ПорядокУчетаРасчетов содержит счета и другие реквизиты.
	// Поэтому видимостью этого поля управляем в УчетВзаиморасчетовФормы.УстановитьПорядокУчетаРасчетов()
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтогиНаСервере() Экспорт

	ОбновитьИтоги(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Функция ПолучитьМассивВидовДоговоров() Экспорт

	СписокВидовДоговоров = Новый Массив;
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	
	Возврат СписокВидовДоговоров;

КонецФункции

&НаКлиенте
Процедура ПриИзмененииЦеныИВалюты(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь) Экспорт

	Если ПерезаполнитьЦены ИЛИ ПересчитатьЦены ИЛИ ПересчитатьНДС Тогда
		ПриИзмененииЦеныИВалютыНаСервере(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС);
	КонецЕсли;
	
	ПоступлениеТоваровУслугФормыКлиентСервер.УстановитьТребуетсяСчетФактура(ЭтотОбъект);
	ОбновитьИтоги(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойНаСервере() Экспорт
	
	УправлениеФормой(ЭтотОбъект);
	ПоступлениеТоваровУслугФормы.УстановитьПорядокУчетаРасчетов(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетовУчета() Экспорт
	
	// В форме основных средств параметры выбора счетов учета не используются.
	// Процедура необходима для совместимости с другими формами документа.
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	ПоступлениеТоваровУслугФормы.ОрганизацияПриИзменении(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзмененииНаКлиенте()

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
		
	ТребуетсяПерерасчитатьСрокОплаты = 
		ИспользуетсяПланированиеПлатежей И АвторасчетСрокаОплаты И (НачалоДня(Объект.Дата) <> НачалоДня(ТекущаяДатаДокумента));
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера ИЛИ ТребуетсяПерерасчитатьСрокОплаты Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	ПоступлениеТоваровУслугФормы.ДатаПриИзменении(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()

	ПоступлениеТоваровУслугФормы.КонтрагентПриИзменении(ЭтотОбъект);
	УстановитьВидимость();

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()

	ПоступлениеТоваровУслугФормы.ДоговорКонтрагентаПриИзменении(ЭтотОбъект);
	УстановитьВидимость();

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПорядокУчетаРасчетовНаСервере(ВыбранноеЗначение)

	ПоступлениеТоваровУслугФормы.ОбработкаВыбораПорядокУчетаРасчетов(ЭтотОбъект, ВыбранноеЗначение);

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораУниверсальныйПередаточныйДокументНаСервере(ВыбранноеЗначение)
	
	ПоступлениеТоваровУслугФормы.ОбработкаВыбораУниверсальныйПередаточныйДокумент(ЭтотОбъект, ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТаблицуПродавцыВоВременноеХранилищеНаСервере()

	Возврат ПоместитьВоВременноеХранилище(ЭтотОбъект.Продавцы.Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Процедура ПриИзмененииЦеныИВалютыНаСервере(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь)

	ПоступлениеТоваровУслугФормы.ЗаполнитьРассчитатьСуммы(
		ЭтотОбъект,
		ВалютаДоИзменения,
		КурсДоИзменения,
		КратностьДоИзменения,
		ПерезаполнитьЦены,
		ПересчитатьЦены,
		ПересчитатьНДС,
		ПрименяютсяСтавки4и2);


КонецПроцедуры

&НаСервере
Функция ПоместитьЗачетАвансовВоВременноеХранилищеНаСервере()

	Возврат ПоместитьВоВременноеХранилище(Объект.ЗачетАвансов.Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Процедура ОбновитьСрокОплатыНаСервере()
	
	ПоступлениеТоваровУслугФормы.УстановитьПорядокУчетаРасчетов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Истина;
	ОбщегоНазначенияБПКлиент.ОткрытьДоговорКонтрагента(ЭтотОбъект, Элемент, Объект.ДоговорКонтрагента);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКод(Знач ОсновноеСредство)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновноеСредство, "Код");
	
КонецФункции

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтотОбъект,
		Команда
	);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ОбъектыПредназначеныДляСдачиВАрендуПриИзмененииНаСервере()
	
	ПараметрыЗаполнения = ПоступлениеТоваровУслугФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
		"ОбъектыПредназначеныДляСдачиВАренду",
		Объект);
	
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполнения);
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	МодульИнтеграцияС1СДокументооборотКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияС1СДокументооборотКлиент");
	МодульИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура ДоговорКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПараметрыДоговора = Новый Структура;
	ПараметрыДоговора.Вставить("Организация", Объект.Организация);
	ПараметрыДоговора.Вставить("Владелец", Объект.Контрагент);
	ПараметрыДоговора.Вставить("ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ДоговорОбработкаВыбора(Элемент, ВыбранноеЗначение, ПараметрыДоговора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ЗаполнитьСписокВыбора(Элемент, Текст, ПредлагатьНовыйДоговор, СтандартнаяОбработка);
	
КонецПроцедуры

#Область ПроверкаКонтрагентов

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#КонецОбласти

#Область УсловноеОформление

&НаСервере
Процедура УстановитьУсловноеОформление() Экспорт

	НастройкиУсловногоОформления = Новый Структура();

	УсловноеОформление.Элементы.Очистить();

	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУсловноеОформление(Форма)

	НадоИнициализировать = Ложь;

	Если НЕ Форма.НастройкиУсловногоОформления.Свойство("ОбщееПроинициализировано") Тогда
		НадоИнициализировать = Истина;
	КонецЕсли;
	
	Если НЕ Форма.НастройкиУсловногоОформления.Свойство("ПрименяютсяСтавки4и2Проинициализировано") Тогда
		НадоИнициализировать = Истина;
	КонецЕсли;
	
	Если НадоИнициализировать Тогда
		Форма.УстановитьУсловноеОформлениеДокумента();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьУсловноеОформлениеНаСервере() Экспорт

	Если ТипЗнч(НастройкиУсловногоОформления) = Тип("Структура") Тогда
		// При смене вида операции процедура вызывается из общего модуля 
		// ПоступлениеТоваровУслугФормы раньше, чем отработает 
		// УстановитьУсловноеОформление(). Поэтому вызываем обновление только
		// тогда, когда структура НастройкиУсловногоОформления уже была инициализирована.
		ОбновитьУсловноеОформление(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеДокумента() Экспорт

	Если НЕ НастройкиУсловногоОформления.Свойство("ОбщееПроинициализировано") Тогда
		УстановитьУсловноеОформлениеОбщее();
	КонецЕсли;	

	Если НЕ НастройкиУсловногоОформления.Свойство("ПрименяютсяСтавки4и2Проинициализировано") Тогда
		УстановитьУсловноеОформлениеПрименяютсяСтавки4и2();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеОбщее()

	НастройкиУсловногоОформления.Вставить("ОбщееПроинициализировано", Истина);
	
	ПоступлениеТоваровУслугФормы.УстановитьУсловноеОформлениеРеквизитыДокумента(ЭтотОбъект);

	// ОсновныеСредстваСчетУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОсновныеСредстваСчетУчетаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.НДСВключенВСтоимость", ВидСравненияКомпоновкиДанных.Равно, Истина);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"УчетАгентскогоНДС", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ОсновныеСредства.СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	// ОсновныеСредстваСчетУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОсновныеСредстваСчетУчетаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.НДСВключенВСтоимость", ВидСравненияКомпоновкиДанных.Равно, Истина);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"УчетАгентскогоНДС", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ЭтоКомиссия", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// ОсновныеСредстваСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОсновныеСредстваСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ОсновныеСредства.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ОсновныеСредства.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// ПорядокУчетаРасчетов

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПорядокУчетаРасчетов");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СчетаРасчетовЗаполнены", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);


	// ОсновныеСредстваСпособУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОсновныеСредстваСпособУчетаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ОсновныеСредства.СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ОсновныеСредства.СпособУчетаНДС", ВидСравненияКомпоновкиДанных.Заполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Скрыть НДС при применении УСН доходы

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОсновныеСредстваСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОсновныеСредстваСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОсновныеСредстваВсего");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.НДСНеВыделять", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПрименяютсяСтавки4и2()

	Если НЕ ПрименяютсяСтавки4и2 Тогда
		Возврат;
	КонецЕсли;	

	НастройкиУсловногоОформления.Вставить("ПрименяютсяСтавки4и2Проинициализировано", Истина);


	// ОсновныеСредстваСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОсновныеСредстваСтавкаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяютсяСтавки4и2", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.ОсновныеСредства.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС18);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.ОсновныеСредства.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС18_118);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '4%'"));


	// ОсновныеСредстваСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОсновныеСредстваСтавкаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяютсяСтавки4и2", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.ОсновныеСредства.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС10);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.ОсновныеСредства.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС10_110);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '2%'"));

КонецПроцедуры

#КонецОбласти

#Область СтатусыДокументов

&НаСервереБезКонтекста
Функция СтатусыОригиналовДокументов(Знач Ссылка, Знач СчетФактура)
	
	ДокументыДляПолученияСтатуса = Новый Массив;
	ДокументыДляПолученияСтатуса.Добавить(Ссылка);
	ДокументыДляПолученияСтатуса.Добавить(СчетФактура);
	
	КоллекцияСтатусов = РегистрыСведений.СтатусыДокументов.ПолучитьСтатусыДокументов(ДокументыДляПолученияСтатуса);
	
	СтатусыОригиналовДокументов = Новый Соответствие;
	СтатусПоступления  = КоллекцияСтатусов[Ссылка].Статус = Перечисления.СтатусыДокументовПоступления.ОригиналПолучен;
	СтатусСчетаФактуры = КоллекцияСтатусов[СчетФактура].Статус = Перечисления.СтатусыДокументовПоступления.ОригиналПолучен;
	СтатусыОригиналовДокументов.Вставить(Ссылка, СтатусПоступления);
	СтатусыОригиналовДокументов.Вставить(СчетФактура, СтатусСчетаФактуры);
	
	Возврат СтатусыОригиналовДокументов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

