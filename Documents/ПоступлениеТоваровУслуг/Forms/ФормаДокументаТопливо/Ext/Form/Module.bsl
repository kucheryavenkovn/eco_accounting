#Область ОписаниеПеременных

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПоступлениеТоваровУслугФормы.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	// Изменение вида операции: Товары -> Топливо
	Если ЗначениеЗаполнено(Объект.Товары) И Не ЗначениеЗаполнено(Объект.Топливо) Тогда
		Объект.Топливо.Загрузить(Объект.Товары.Выгрузить());
		ОчиститьНеиспользуемыеРеквизиты();
	КонецЕсли;
	
	УстановитьВидимостьСчетовУчета();
	УстановитьУсловноеОформление();
	
	УчетНДС.ПрименитьПраваДоступаСчетаФактуры(
		СчетФактура,
		Элементы.СчетФактураПросмотр,
		Элементы.СчетФактураРедактирование);
	
	// Поступление топлива для валютных договоров не поддерживается
	ПараметрыВыбораДоговора = Новый Массив;
	ПараметрыВыбораДоговора.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора",
		Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком));
	ПараметрыВыбораДоговора.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов",
		Константы.ВалютаРегламентированногоУчета.Получить()));
	Элементы.ДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораДоговора);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтотОбъект,
		"БП.Документ.ПоступлениеТоваровУслуг",
		"ФормаДокументаТопливо",
		НСтр("ru='Новости: Поступление (акт, накладная)'"),
		ИдентификаторыСобытийПриОткрытии);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиБП.КомандыЭДО_ФормаДокумента(ЭтотОбъект);
	// Конец подсистема "ОбменСКонтрагентами".
	
	// ИнтеграцияС1СДокументооборотом
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборот = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот");
		МодульИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетНаОплатуПоставщика.Форма.ФормаВыбора" Тогда
		ОбработкаЗаполненияПоСчетуНаКлиенте(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВыборПорядкаУчетаРасчетов" Тогда
		ОбработкаВыбораПорядокУчетаРасчетовНаСервере(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.УниверсальныйПередаточныйДокумент" Тогда
		ОбработкаВыбораУниверсальныйПередаточныйДокументНаСервере(ВыбранноеЗначение);
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Запись_СчетФактураПолученный"
		И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("ДокументыОснования")
		И Параметр.ДокументыОснования.Найти(Объект.Ссылка) <> Неопределено Тогда
	
		ПоступлениеТоваровУслугФормыКлиентСервер.ЗаполнитьРеквизитыПроСчетФактуру(ЭтотОбъект, Параметр.РеквизитыСФ);
		СтатусыОригиналовДокументов = СтатусыОригиналовДокументов(Объект.Ссылка, СчетФактура);
		ОригиналСчетаФактуры = СтатусыОригиналовДокументов[СчетФактура];
		УправлениеФормой(ЭтотОбъект);
	
	ИначеЕсли ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
	
		Прочитать();
	
	ИначеЕсли ИмяСобытия = "ИзмененСтатусДокументов" Тогда
	
		// Статус документа изменен в форме списка поступлений или счетов-фактур.
		Если Не Объект.Ссылка.Пустая() 
			И (Параметр.Найти(Объект.Ссылка) <> Неопределено ИЛИ Параметр.Найти(СчетФактура) <> Неопределено) Тогда
			СтатусыОригиналовДокументов = СтатусыОригиналовДокументов(Объект.Ссылка, СчетФактура);
			ОригиналПолучен      = СтатусыОригиналовДокументов[Объект.Ссылка];
			ОригиналСчетаФактуры = СтатусыОригиналовДокументов[СчетФактура];
		КонецЕсли;
	
	ИначеЕсли ИмяСобытия = "Запись_ДоговорыКонтрагентов" И Объект.ДоговорКонтрагента = Источник Тогда
	
		ТребуетсяПерерасчитатьСрокОплаты =
			ИспользуетсяПланированиеПлатежей И АвторасчетСрокаОплаты;
			
		Если ТребуетсяПерерасчитатьСрокОплаты Тогда
			ОбновитьСрокОплатыНаСервере();
		КонецЕсли;
	
	ИначеЕсли ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда
	
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);
	
	Иначе
	
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма                 = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка        = Объект.Ссылка;
	ПараметрыОповещения.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО    = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	// Подсистема "ОбменСКонтрагентами"
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец Подсистема "ОбменСКонтрагентами"
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПоступлениеТоваровУслугФормы.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПоступлениеТоваровУслугФормыКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПоступлениеТоваровУслугФормы.ПослеЗаписиНаСервере(
		ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
		
	УчетНДСКлиентСервер.ОтобразитьПолеУПД(ЭтотОбъект, ТекущийОбъект.ЭтоУниверсальныйДокумент);
		
	УстановитьСостояниеДокумента();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец подсистема "ОбменСКонтрагентами".
	
	РаботаСДоговорамиКонтрагентовБП.СохранитьПараметрыДоговора(
		ТекущийОбъект.ДоговорКонтрагента,
		ТекущийОбъект.ЭтоУниверсальныйДокумент,
		ТекущийОбъект.Ссылка);
		
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтеграцияС1СДокументооборотом
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборот = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот");
		МодульИнтеграцияС1СДокументооборот.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец ИнтеграцияС1СДокументооборотом
	
	ПоступлениеТоваровУслугФормы.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПоступлениеТоваровУслугФормы.ПриЗаписиНаСервере(
		ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПоступлениеТоваровУслугФормыКлиент.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
		
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиКлиент.ПослеЗаписи_ФормаДокумента(ЭтотОбъект, ПараметрыЗаписи);
	// Конец подсистема "ОбменСКонтрагентами".
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НомерВходящегоДокументаПриИзменении(Элемент)

	ПоступлениеТоваровУслугФормыКлиент.НомерВходящегоДокументаПриИзменении(ЭтотОбъект, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДатаВходящегоДокументаПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента) И Не Объект.Проведен Тогда
		Объект.Дата = Объект.ДатаВходящегоДокумента + (Объект.Дата - НачалоДня(Объект.Дата));
		ДатаПриИзмененииНаКлиенте();
	КонецЕсли;
	
	ПоступлениеТоваровУслугФормыКлиент.ДатаВходящегоДокументаПриИзменении(ЭтотОбъект);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	ДатаПриИзмененииНаКлиенте();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ОткрытиеФормыВыбораКонтрагенты");

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		
		ДоговорКонтрагентаПриИзмененииНаСервере();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПорядокУчетаРасчетовНажатие(Элемент, СтандартнаяОбработка)

	АдресХранилищаЗачетАвансов = ПоместитьЗачетАвансовВоВременноеХранилищеНаСервере();

	ПоступлениеТоваровУслугФормыКлиент.ПорядокУчетаРасчетовНажатие(
		ЭтотОбъект, Элемент, СтандартнаяОбработка, АдресХранилищаЗачетАвансов);

КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)

	ПоступлениеТоваровУслугФормыКлиент.ЦеныИВалютаНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСостояниеЭДОНажатие(Элемент)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ДекорацияСостояниеЭДОНажатие(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура НомерСчетаФактурыПолученногоПриИзменении(Элемент)
	
	ПоступлениеТоваровУслугФормыКлиент.НомерСчетаФактурыПолученногоПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УПДПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, ЭтотОбъект.Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеУПДНажатие(Элемент, СтандартнаяОбработка)
	
	АдресХранилищаПродавцы = ПоместитьТаблицуПродавцыВоВременноеХранилищеНаСервере();
	УчетНДСКлиент.ОткрытьФормуРеквизитовУПД(ЭтотОбъект, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТопливо

&НаКлиенте
Процедура ТопливоПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТопливоПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если Не НоваяСтрока Или Копирование Тогда
		Возврат;
	КонецЕсли;

	СтрокаТаблицы = Элементы.Топливо.ТекущиеДанные;
	СтрокаТаблицы.ОтражениеВУСН = ПоступлениеТоваровУслугФормыКлиентСервер.ОтражениеВУСН(Объект.ВидОперации, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ТопливоПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если Объект.НДСНеВыделять Тогда
		ТекущиеДанные = Элементы.Топливо.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено
			И Не ЗначениеЗаполнено(ТекущиеДанные.СтавкаНДС) Тогда
			ТекущиеДанные.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС");
		КонецЕсли;
	КонецЕсли;

	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

	ОбновитьИтоги(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ТопливоТранспортноеСредствоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Топливо.ТекущиеДанные;
	
	ТекущиеДанные.Номенклатура = ТопливоТранспортногоСредства(ТекущиеДанные.ТранспортноеСредство);
	
КонецПроцедуры

&НаКлиенте
Процедура ТопливоНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Топливо.ТекущиеДанные;

	// Получим общие параметры обработки для реквизитов документа
	ПараметрыОбработки = ПоступлениеТоваровУслугФормыКлиент.ПодготовитьПараметрыОбработкиТоварыНоменклатураПриИзменении(
		ЭтотОбъект, ТекущиеДанные);

	// Дополнительные поля, требующиеся для заполнения добавленных колонок табличного поля текущей формы.
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Всего", ТекущиеДанные.Всего);
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтотОбъект, ПараметрыОбработки.ДанныеОбъекта);

	ТопливоНоменклатураПриИзмененииНаСервере(
		ПараметрыОбработки.ДанныеСтрокиТаблицы,
		ПараметрыОбработки.ДанныеОбъекта);

	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыОбработки.ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ТопливоНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ОткрытиеФормыВыбораНоменклатура");

КонецПроцедуры

&НаКлиенте
Процедура ТопливоНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.НоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТопливоНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "Топливо");
	
	РаботаСНоменклатуройКлиент.НоменклатураАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТопливоНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "Топливо");
	
	РаботаСНоменклатуройКлиент.НоменклатураОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТопливоКоличествоПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(
		ЭтотОбъект, ИмяТекущейТабличнойЧасти(), 1, ПрименяютсяСтавки4и2);

КонецПроцедуры

&НаКлиенте
Процедура ТопливоЦенаПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(
		ЭтотОбъект, ИмяТекущейТабличнойЧасти(), 1, ПрименяютсяСтавки4и2);

КонецПроцедуры

&НаКлиенте
Процедура ТопливоСуммаПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(
		ЭтотОбъект, ИмяТекущейТабличнойЧасти(), 1, ПрименяютсяСтавки4и2);

КонецПроцедуры

&НаКлиенте
Процедура ТопливоСтавкаНДСПриИзменении(Элемент)

	ИмяТабличнойЧасти = ИмяТекущейТабличнойЧасти();
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтотОбъект, ИмяТабличнойЧасти, ПрименяютсяСтавки4и2);
	РаботаСДоговорамиКонтрагентовБПКлиент.НастроитьСпособЗаполненияСтавкиНДС(ЭтотОбъект, ИмяТабличнойЧасти);

КонецПроцедуры

&НаКлиенте
Процедура ТопливоСуммаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаНДС(ЭтотОбъект, ИмяТекущейТабличнойЧасти());

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	БухгалтерскийУчетКлиентПереопределяемый.ОткрытьСчетФактуру(ЭтотОбъект, СчетФактура, "СчетФактураПолученный");

КонецПроцедуры

&НаКлиенте
Процедура ПодборТопливо(Команда)

	ПодборНоменклатуры();

КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если ЗначениеЗаполнено(Объект.Топливо) Тогда
	
		Оповещение   = Новый ОписаниеОповещения("ВопросПередЗаполнениемТабличнойЧастиЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	
	Иначе
	
		ЗаполнитьНаСервере();
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСчетФактуру(Команда)
	
	ПоступлениеТоваровУслугФормыКлиент.ЗарегистрироватьСчетФактуру(ЭтотОбъект, Команда);
	УправлениеФормой(ЭтотОбъект);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.НадписьСчетФактура);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц(ИмяТаблицы = "") Экспорт

	ПараметрыОбъекта = Неопределено;
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтотОбъект, ПараметрыОбъекта);

	Если ПустаяСтрока(ИмяТаблицы) Или ИмяТаблицы = ИмяТекущейТабличнойЧасти() Тогда
		Для Каждого СтрокаТаблицы Из Объект.Топливо Цикл
			ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТопливо(СтрокаТаблицы, ПараметрыОбъекта);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьИтогиНаСервере() Экспорт

	ОбновитьИтоги(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере() Экспорт
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ПредлагатьНовыйДоговор = Не ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	
	Если ПредлагатьНовыйДоговор
		И ЗначениеЗаполнено(Объект.Контрагент)
		И Не ЗначениеЗаполнено(Объект.Ссылка) 
		И Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		
		ПоступлениеТоваровУслугФормы.КонтрагентПриИзменении(ЭтотОбъект);
	
	КонецЕсли;
	
	УстановитьПараметрыПоДоговору();
	
	УстановитьПараметрыВыбора();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();

	ПоступлениеТоваровУслугФормы.УстановитьПорядокУчетаРасчетов(ЭтотОбъект);

	ПоступлениеТоваровУслугФормыКлиентСервер.СформироватьНадписьЦеныИВалюта(ЭтотОбъект);
	
	ОбновитьИтоги(ЭтотОбъект);
	
	ПоступлениеТоваровУслугФормыКлиентСервер.УстановитьТребуетсяСчетФактура(ЭтотОбъект);
	ПоступлениеТоваровУслугФормыКлиентСервер.ЗаполнитьРеквизитыПроСчетФактуру(ЭтотОбъект);
	ПоступлениеТоваровУслугФормы.ЗаполнитьРеквизитыУПД(ЭтотОбъект);
	
	СтатусыОригиналовДокументов = СтатусыОригиналовДокументов(Объект.Ссылка, СчетФактура);
	ОригиналПолучен      = СтатусыОригиналовДокументов[Объект.Ссылка];
	ОригиналСчетаФактуры = СтатусыОригиналовДокументов[СчетФактура];
	
	УправлениеФормой(ЭтотОбъект);
	
	ПоступлениеТоваровУслугФормы.УстановитьЗаголовокФормы(ЭтотОбъект);
	
	// Проверка буфера обмена на наличие скопированных строк
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыПоДоговору()

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.ДоговорКонтрагента,
			"ВидДоговора, ВалютаВзаиморасчетов, УчетАгентскогоНДС, РасчетыВУсловныхЕдиницах, НДСПоСтавкам4и2, ВидАгентскогоДоговора, ЭлектронныеУслуги");
		ВидДоговора           = РеквизитыДоговора.ВидДоговора;
		УчетАгентскогоНДС     = РеквизитыДоговора.УчетАгентскогоНДС;
		ВидАгентскогоДоговора = РеквизитыДоговора.ВидАгентскогоДоговора;
		ВалютаВзаиморасчетов  = РеквизитыДоговора.ВалютаВзаиморасчетов;
		РасчетыВУЕ            = РеквизитыДоговора.РасчетыВУсловныхЕдиницах;
		ПрименяютсяСтавки4и2  = РеквизитыДоговора.НДСПоСтавкам4и2;
		ЭлектронныеУслуги     = РеквизитыДоговора.ЭлектронныеУслуги;
	Иначе
		ВидДоговора           = Неопределено;
		УчетАгентскогоНДС     = Ложь;
		РасчетыВУЕ            = Ложь;
		ПрименяютсяСтавки4и2  = Ложь;
		ЭлектронныеУслуги     = Ложь;
	КонецЕсли;

	СпособЗаполненияСтавкиНДС = РаботаСДоговорамиКонтрагентовБП.СпособЗаполненияСтавкиНДСПоДоговору(
		Объект.ДоговорКонтрагента);

КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбора()

	МассивВидовДоговоров = Новый ФиксированныйМассив(ПолучитьМассивВидовДоговоров());

	НовыйМассивПараметров = Новый Массив();
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", МассивВидовДоговоров));
	
	ПоступлениеТоваровУслугФормы.ПараметрыВыбораПоВидуОперации(НовыйМассивПараметров, Объект.ВидОперации);

	НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.ДоговорКонтрагента.ПараметрыВыбора = НовыеПараметрыВыбора;

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивВидовДоговоров() Экспорт

	СписокВидовДоговоров = Новый Массив;
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));

	Возврат СписокВидовДоговоров;

КонецФункции

&НаКлиенте
Процедура ПриИзмененииЦеныИВалюты(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения,
	ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь) Экспорт

	Если ПерезаполнитьЦены Или ПересчитатьЦены Или ПересчитатьНДС Тогда
		ПриИзмененииЦеныИВалютыНаСервере(ВалютаДоИзменения,
			КурсДоИзменения,
			КратностьДоИзменения,
			ПерезаполнитьЦены,
			ПересчитатьЦены,
			ПересчитатьНДС);
	КонецЕсли;
	
	ПоступлениеТоваровУслугФормыКлиентСервер.УстановитьТребуетсяСчетФактура(ЭтотОбъект);
	
	ОбновитьИтоги(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура УправлениеФормойНаСервере() Экспорт
	
	УправлениеФормой(ЭтотОбъект);
	ПоступлениеТоваровУслугФормы.УстановитьПорядокУчетаРасчетов(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетовУчета() Экспорт
	
	// В форме услуг параметры выбора счетов учета не используются.
	// Процедура необходима для совместимости с другими формами документа.
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы() Экспорт

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтотОбъект);
	
	ПлательщикНДС                     = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	РаздельныйУчетНДС                 = УчетнаяПолитика.РаздельныйУчетНДС(Объект.Организация, Объект.Дата);
	РаздельныйУчетНДСНаСчете19        = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Объект.Организация, Объект.Дата);
	ПлательщикНалогаНаПрибыль         = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	ПрименениеУСН                     = УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация, Объект.Дата);
	ПрименениеУСНДоходы               = УчетнаяПолитика.ПрименяетсяУСНДоходы(Объект.Организация, Объект.Дата);
	ИспользоватьТипыЦенНоменклатуры   = ПолучитьФункциональнуюОпцию("ИспользоватьТипыЦенНоменклатуры");
	ЕстьВалютныйУчет                  = БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет();
	ИспользуетсяПланированиеПлатежей  = ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеПлатежейПоставщикам");
	ВестиУчетПоДоговорам              = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
	ОбратноеНачислениеНДС             = БухгалтерскийУчетПереопределяемый.ИспользуетсяОбратноеНачислениеНДС();

КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьУсловноеОформление()

	НастройкиУсловногоОформления = Новый Структура();

	УсловноеОформление.Элементы.Очистить();

	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУсловноеОформление(Форма)

	НадоИнициализировать = Ложь;
	
	Если Не Форма.НастройкиУсловногоОформления.Свойство("ОбщееПроинициализировано") Тогда
		НадоИнициализировать = Истина;
	КонецЕсли;

	Если Не Форма.НастройкиУсловногоОформления.Свойство("ПрименяютсяСтавки4и2Проинициализировано") Тогда
		НадоИнициализировать = Истина;
	КонецЕсли;
	
	Если НадоИнициализировать Тогда
		Форма.УстановитьУсловноеОформлениеДокумента();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьУсловноеОформлениеНаСервере() Экспорт

	Если ТипЗнч(НастройкиУсловногоОформления) = Тип("Структура") Тогда
		// При смене вида операции процедура вызывается из общего модуля 
		// ПоступлениеТоваровУслугФормы раньше, чем отработает 
		// УстановитьУсловноеОформление(). Поэтому вызываем обновление только
		// тогда, когда структура НастройкиУсловногоОформления уже была инициализирована.
		ОбновитьУсловноеОформление(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеДокумента() Экспорт

	Если Не НастройкиУсловногоОформления.Свойство("ОбщееПроинициализировано") Тогда
		УстановитьУсловноеОформлениеОбщее();
	КонецЕсли;
	
	Если Не НастройкиУсловногоОформления.Свойство("ПрименяютсяСтавки4и2Проинициализировано") Тогда
		УстановитьУсловноеОформлениеПрименяютсяСтавки4и2();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеОбщее()

	НастройкиУсловногоОформления.Вставить("ОбщееПроинициализировано", Истина);
	Равно = ВидСравненияКомпоновкиДанных.Равно;

	ПоступлениеТоваровУслугФормы.УстановитьУсловноеОформлениеРеквизитыДокумента(ЭтотОбъект);
	
	// СуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТопливоСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Топливо.СтавкаНДС", Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Топливо.СтавкаНДС", Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// ПорядокУчетаРасчетов

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПорядокУчетаРасчетов");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СчетаРасчетовЗаполнены", Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);
	
	// Скрыть НДС при применении УСН доходы

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТопливоСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТопливоСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТопливоВсего");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.НДСНеВыделять", Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	// ОтражениеВУСН

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТопливоОтражениеВУСН");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
		"ПрименениеУСН", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
		"ПрименениеУСНДоходы", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// СпособУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТопливоСпособУчетаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
	ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
		"Объект.Топливо.СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
		"Объект.Топливо.СпособУчетаНДС", ВидСравненияКомпоновкиДанных.Заполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТопливоСпособУчетаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"РаздельныйУчетНДСНаСчете19", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПрименяютсяСтавки4и2()

	Если Не ПрименяютсяСтавки4и2 Тогда
		Возврат;
	КонецЕсли;

	НастройкиУсловногоОформления.Вставить("ПрименяютсяСтавки4и2Проинициализировано", Истина);

	ГруппаИ   = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ГруппаИли = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Равно     = ВидСравненияКомпоновкиДанных.Равно;

	// ТопливоСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТопливоСтавкаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ГруппаИ);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
		"ПрименяютсяСтавки4и2", Равно, Истина);

	ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ГруппаИли);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
		"Объект.Топливо.СтавкаНДС", Равно, Перечисления.СтавкиНДС.НДС18);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
		"Объект.Топливо.СтавкаНДС", Равно, Перечисления.СтавкиНДС.НДС18_118);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '4 %'"));


	// ТопливоСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТопливоСтавкаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ГруппаИ);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
		"ПрименяютсяСтавки4и2", Равно, Истина);

	ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ГруппаИли);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
		"Объект.Топливо.СтавкаНДС", Равно, Перечисления.СтавкиНДС.НДС10);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
		"Объект.Топливо.СтавкаНДС", Равно, Перечисления.СтавкиНДС.НДС10_110);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '2 %'"));

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если Объект.ЭтоУниверсальныйДокумент Тогда
		НеОтображатьРеквизитыСчетаФактуры = Истина;
	Иначе
		НеОтображатьРеквизитыСчетаФактуры = Объект.НДСНеВыделять;
	КонецЕсли;
	
	// Счет-фактура
	УчетНДСКлиентСервер.НастроитьПоляСчетаФактуры(
		Элементы.СчетФактураКнопка,
		Элементы.СчетФактураСсылка,
		Элементы.НадписьСчетФактура,
		НеОтображатьРеквизитыСчетаФактуры,
		Форма.ТребуетсяСчетФактура,
		Форма.СчетФактура);
		
	Элементы.ОригиналСчетаФактуры.Видимость = Форма.ТребуетсяСчетФактура И Не НеОтображатьРеквизитыСчетаФактуры;
	
	УчетНДСКлиентСервер.ОтобразитьПолеУПД(Форма, НеОтображатьРеквизитыСчетаФактуры);
	
	Элементы.ИтогиВсегоНДС.Видимость = Не Объект.НДСНеВыделять;
	
	ПоступлениеТоваровУслугФормыКлиентСервер.СформироватьНадписьЦеныИВалюта(Форма);
	
	ОрганизацияЗаполнена = ЗначениеЗаполнено(Объект.Организация);
	КонтрагентЗаполнен   = ЗначениеЗаполнено(Объект.Контрагент);
	
	Элементы.ДоговорКонтрагента.Доступность = ОрганизацияЗаполнена И КонтрагентЗаполнен;
	Элементы.ПодразделениеОрганизации.Доступность = ОрганизацияЗаполнена;
	
	ДоступностьПорядокУчетаРасчетов = (Не Форма.ВестиУчетПоДоговорам И КонтрагентЗаполнен)
		Или ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	
	Элементы.ПорядокУчетаРасчетов.Доступность = ДоступностьПорядокУчетаРасчетов;
	Элементы.ПорядокУчетаРасчетов.Гиперссылка = ДоступностьПорядокУчетаРасчетов;
	
	ЗаполнитьСписокВыбораСтавокНДС(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораСтавокНДС(Форма)

	Элементы = Форма.Элементы;
	
	СписокВыбораСтавок = Элементы.ТопливоСтавкаНДС.СписокВыбора;
	СписокВыбораСтавок.Очистить();
	
	Если Форма.ПрименяютсяСтавки4и2 Тогда
		
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18"), "4%");
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10"), "2%");
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
		
	Иначе
		
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18_118"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10_110"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20_120"));
		
	КонецЕсли; 

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТопливоНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	ПараметрыЗаполнения = ПоступлениеТоваровУслугФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
		"Топливо.Номенклатура",
		ДанныеОбъекта,
		СтрокаТабличнойЧасти,
		ДанныеОбъекта,
		СтрокаТабличнойЧасти);
	
	СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ПоступлениеТоваровУслуг,
		ПараметрыЗаполнения.КЗаполнению,
		ДанныеОбъекта,
		ИмяТекущейТабличнойЧасти(),
		СтрокаТабличнойЧасти);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТопливо(СтрокаТабличнойЧасти, ДанныеОбъекта);
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта, Ложь);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СведенияОНоменклатуре);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;

	Форма.ИтогиВсего    = Объект.Топливо.Итог("Всего");
	Форма.ИтогиВсегоНДС = Объект.Топливо.Итог("СуммаНДС");

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	ПоступлениеТоваровУслугФормы.ОрганизацияПриИзменении(ЭтотОбъект);
	ЗаполнитьДобавленныеКолонкиТаблиц();

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзмененииНаКлиенте()

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
		
	ТребуетсяПерерасчитатьСрокОплаты = ИспользуетсяПланированиеПлатежей И АвторасчетСрокаОплаты 
		И НачалоДня(Объект.Дата) <> НачалоДня(ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Или ТребуетсяПерерасчитатьСрокОплаты Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	ПоступлениеТоваровУслугФормы.ДатаПриИзменении(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()

	ПоступлениеТоваровУслугФормы.КонтрагентПриИзменении(ЭтотОбъект);
	ЗаполнитьДобавленныеКолонкиТаблиц();

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()

	ПоступлениеТоваровУслугФормы.ДоговорКонтрагентаПриИзменении(ЭтотОбъект);
	ЗаполнитьДобавленныеКолонкиТаблиц();

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТопливо(СтрокаТаблицы, Знач ПараметрыОбъекта)
	
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(ПараметрыОбъекта.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(Знач Форма, ПараметрыОбъекта)

	Объект = Форма.Объект;
	
	Если ТипЗнч(ПараметрыОбъекта) <> Тип("Структура") Тогда
		ПараметрыОбъекта = Новый Структура;
	КонецЕсли;
	
	ПараметрыОбъекта.Вставить("СуммаВключаетНДС",               Объект.СуммаВключаетНДС);
	ПараметрыОбъекта.Вставить("НДСВключенВСтоимость",           Объект.НДСВключенВСтоимость);
	ПараметрыОбъекта.Вставить("ПлательщикНалогаНаПрибыль",      Форма.ПлательщикНалогаНаПрибыль);
	ПараметрыОбъекта.Вставить("ПрименениеУСН",                  Форма.ПрименениеУСН);
	ПараметрыОбъекта.Вставить("ПрименениеУСНДоходы",            Форма.ПрименениеУСНДоходы);
	ПараметрыОбъекта.Вставить("СчетУчетаРасчетовСКонтрагентом", Объект.СчетУчетаРасчетовСКонтрагентом);
	ПараметрыОбъекта.Вставить("УчетАгентскогоНДС",              Форма.УчетАгентскогоНДС);
	ПараметрыОбъекта.Вставить("РаздельныйУчетНДСНаСчете19",     Форма.РаздельныйУчетНДСНаСчете19);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЦеныИВалютыНаСервере(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения,
	ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь)

	ПоступлениеТоваровУслугФормы.ЗаполнитьРассчитатьСуммы(
		ЭтотОбъект,
		ВалютаДоИзменения,
		КурсДоИзменения,
		КратностьДоИзменения,
		ПерезаполнитьЦены,
		ПересчитатьЦены,
		ПересчитатьНДС,
		ПрименяютсяСтавки4и2);

	ЗаполнитьДобавленныеКолонкиТаблиц();

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПорядокУчетаРасчетовНаСервере(ВыбранноеЗначение)

	ПоступлениеТоваровУслугФормы.ОбработкаВыбораПорядокУчетаРасчетов(ЭтотОбъект, ВыбранноеЗначение);
	ЗаполнитьДобавленныеКолонкиТаблиц();

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораУниверсальныйПередаточныйДокументНаСервере(ВыбранноеЗначение)
	
	ПоступлениеТоваровУслугФормы.ОбработкаВыбораУниверсальныйПередаточныйДокумент(ЭтотОбъект, ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТаблицуПродавцыВоВременноеХранилищеНаСервере()

	Возврат ПоместитьВоВременноеХранилище(ЭтотОбъект.Продавцы.Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция ПоместитьЗачетАвансовВоВременноеХранилищеНаСервере()

	Возврат ПоместитьВоВременноеХранилище(Объект.ЗачетАвансов.Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаКлиенте
Процедура ОбработкаЗаполненияПоСчетуНаКлиенте(ВыбранноеЗначение, ТабличнаяЧасть)

	ТекстВопроса = "Заполнить документ по счету?";
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
	ДополнительныеПараметры.Вставить("ТабличнаяЧасть", ТабличнаяЧасть);

	Оповещение = Новый ОписаниеОповещения("ВопросЗаполнитьДокументПоСчетуЗавершение",
		ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьДокументПоСчетуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбработкаЗаполненияПоСчетуНаСервере(ДополнительныеПараметры.ВыбранноеЗначение,
			ДополнительныеПараметры.ТабличнаяЧасть);
	Иначе
		Объект.СчетНаОплатуПоставщика = ДополнительныеПараметры.ВыбранноеЗначение;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаЗаполненияПоСчетуНаСервере(ВыбранноеЗначение, ТабличнаяЧасть)

	ПоступлениеТоваровУслугФормы.ОбработкаЗаполненияПоСчету(ЭтотОбъект, ВыбранноеЗначение, ТабличнаяЧасть);
	ЗаполнитьДобавленныеКолонкиТаблиц();
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура СчетНаОплатуПоставщикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоступлениеТоваровУслугФормыКлиент.ОткрытьФормуВыбораСчетаНаОплату(
		ЭтотОбъект, ИмяТекущейТабличнойЧасти());
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСрокОплатыНаСервере()
	
	ПоступлениеТоваровУслугФормы.УстановитьПорядокУчетаРасчетов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборНоменклатуры()

	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("СчетУчета", ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ТопливоВБаке"));
	ПараметрыПодбора.Вставить("ПоказыватьОстатки", Истина);
	ПараметрыПодбора.Вставить("ЕстьКоличество",    Истина);
	ПараметрыПодбора.Вставить("Организация",       Объект.Организация);
	ПараметрыПодбора.Вставить("ИмяТаблицы",        ИмяТекущейТабличнойЧасти());
	ПараметрыПодбора.Вставить("Услуги",            Ложь);
	
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма",
			ПараметрыПодбора,
			ЭтотОбъект,
			УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаполнениемТабличнойЧастиЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Топливо.Очистить();
		ЗаполнитьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	// Выбираем остаток по счету 76.15: топливо, которое было куплено по топливным картам и по которому не предоставлены документы от поставщика,
	// в системе будет с отрицательным остатком
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДанныеЗаполнения.Номенклатура КАК Номенклатура,
	|	ДанныеЗаполнения.ТранспортноеСредство КАК ТранспортноеСредство,
	|	СУММА(ДанныеЗаполнения.Количество) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
	|		ХозрасчетныйОстатки.Субконто2 КАК ТранспортноеСредство,
	|		-ХозрасчетныйОстатки.КоличествоОстаток КАК Количество
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаДокумента, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТопливныеКарты), &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СубконтоНоменклатура.Значение,
	|		СубконтоТранспортныеСредства.Значение,
	|		Хозрасчетный.КоличествоДт
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК СубконтоНоменклатура
	|			ПО Хозрасчетный.Регистратор = СубконтоНоменклатура.Регистратор
	|				И Хозрасчетный.НомерСтроки = СубконтоНоменклатура.НомерСтроки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК СубконтоТранспортныеСредства
	|			ПО Хозрасчетный.Регистратор = СубконтоТранспортныеСредства.Регистратор
	|				И Хозрасчетный.НомерСтроки = СубконтоТранспортныеСредства.НомерСтроки
	|	ГДЕ
	|		Хозрасчетный.Регистратор = &Регистратор
	|		И Хозрасчетный.МоментВремени < &ДатаДокумента
	|		И СубконтоНоменклатура.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|		И СубконтоТранспортныеСредства.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ТранспортныеСредства)
	|		И Хозрасчетный.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТопливныеКарты)
	|		И СубконтоНоменклатура.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
	|		И СубконтоТранспортныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
	|		И Хозрасчетный.Активность) КАК ДанныеЗаполнения
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеЗаполнения.Номенклатура,
	|	ДанныеЗаполнения.ТранспортноеСредство
	|
	|ИМЕЮЩИЕ
	|	СУММА(ДанныеЗаполнения.Количество) > 0");
	
	Если Объект.Ссылка.Пустая() Тогда
		ДатаДокумента = Новый МоментВремени(КонецДня(Объект.Дата), Объект.Ссылка);
	Иначе
		ДатаДокумента = Новый МоментВремени(Объект.Дата, Объект.Ссылка);
	КонецЕсли;
	
	ВидыСубконто  = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ТранспортныеСредства);
	
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	Запрос.УстановитьПараметр("Регистратор",   Объект.Ссылка);
	Запрос.УстановитьПараметр("Организация",   Объект.Организация);
	Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);
	ОтражениеВУСН = ПоступлениеТоваровУслугФормыКлиентСервер.ОтражениеВУСН(Объект.ВидОперации, Ложь);
	
	Объект.Топливо.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Для Каждого ТекущаяСтрока Из Объект.Топливо Цикл
		
		ТекущаяСтрока.ОтражениеВУСН = ОтражениеВУСН;
		ТопливоНоменклатураПриИзмененииНаСервере(ТекущаяСтрока, Объект);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТопливоТранспортногоСредства(ТранспортноеСредство)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТранспортноеСредство, "Топливо");
	
КонецФункции

#Область ПроверкаКонтрагентов

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#КонецОбласти

#Область СчетаУчета

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив();
	ЭлементыСчетов.Добавить("ТопливоСчетУчетаНДС");
	ЭлементыСчетов.Добавить("ТопливоСпособУчетаНДС");
	
	// Поле формы ПорядокУчетаРасчетов содержит счета и другие реквизиты.
	// Поэтому видимостью этого поля управляем в УчетВзаиморасчетовФормы.УстановитьПорядокУчетаРасчетов()
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
КонецПроцедуры

#КонецОбласти

#Область СтатусыДокументов

&НаСервереБезКонтекста
Функция СтатусыОригиналовДокументов(Знач Ссылка, Знач СчетФактура)
	
	ДокументыДляПолученияСтатуса = Новый Массив;
	ДокументыДляПолученияСтатуса.Добавить(Ссылка);
	ДокументыДляПолученияСтатуса.Добавить(СчетФактура);
	
	КоллекцияСтатусов = РегистрыСведений.СтатусыДокументов.ПолучитьСтатусыДокументов(ДокументыДляПолученияСтатуса);
	
	СтатусыОригиналовДокументов = Новый Соответствие;
	СтатусПоступления  = КоллекцияСтатусов[Ссылка].Статус = Перечисления.СтатусыДокументовПоступления.ОригиналПолучен;
	СтатусСчетаФактуры = КоллекцияСтатусов[СчетФактура].Статус = Перечисления.СтатусыДокументовПоступления.ОригиналПолучен;
	СтатусыОригиналовДокументов.Вставить(Ссылка, СтатусПоступления);
	СтатусыОригиналовДокументов.Вставить(СчетФактура, СтатусСчетаФактуры);
	
	Возврат СтатусыОригиналовДокументов;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ДоговорКонтрагентаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Истина;
	ОбщегоНазначенияБПКлиент.ОткрытьДоговорКонтрагента(ЭтотОбъект, Элемент, Объект.ДоговорКонтрагента);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(ЭтотОбъект, Команда);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(
		ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()

	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);

КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	МодульИнтеграцияС1СДокументооборотКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияС1СДокументооборотКлиент");
	МодульИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура ДоговорКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ДоговорСПоставщиком = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком");
	
	ПараметрыДоговора = Новый Структура;
	ПараметрыДоговора.Вставить("Организация", Объект.Организация);
	ПараметрыДоговора.Вставить("Владелец",    Объект.Контрагент);
	ПараметрыДоговора.Вставить("ВидДоговора", ДоговорСПоставщиком);
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ДоговорОбработкаВыбора(
		Элемент, ВыбранноеЗначение, ПараметрыДоговора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ЗаполнитьСписокВыбора(
		Элемент, Текст, ПредлагатьНовыйДоговор, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ИмяТаблицы = ИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ПараметрыОбъекта = Неопределено;
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтотОбъект, ПараметрыОбъекта);

	ДобавленныеСтроки = ПоступлениеТоваровУслугФормы.ОбработкаВыбораПодборВставкаИзБуфера(
		ЭтотОбъект, ВыбранноеЗначение, ИмяТаблицы);
	
	Для Каждого СтрокаТаблицы Из ДобавленныеСтроки.Топливо Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТопливо(СтрокаТаблицы, ПараметрыОбъекта);
	КонецЦикла;
	
	ОбновитьИтоги(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ОчиститьНеиспользуемыеРеквизиты()

	НеИспользуемыеТаблицы = Документы.ПоступлениеТоваровУслуг.НеИспользуемыеТабличныеЧасти(
		Объект.ВидОперации, Ложь, Ложь);
	
	Для Каждого ИмяТаблицы Из НеИспользуемыеТаблицы Цикл
		
		Если Объект.Свойство(ИмяТаблицы) Тогда
			Объект[ИмяТаблицы].Очистить();
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.Грузоотправитель = Неопределено;
	Объект.Грузополучатель  = Неопределено;

КонецПроцедуры

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)

	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы],
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяТекущейТабличнойЧасти()
	
	Возврат "Топливо";
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)

	СписокСвойств = Новый Массив;
	СписокСвойств.Добавить("ТранспортноеСредство");
	СписокСвойств.Добавить("Номенклатура");
	СписокСвойств.Добавить("Количество");
	СписокСвойств.Добавить("Цена");
	СписокСвойств.Добавить("СтавкаНДС");
	СписокСвойств.Добавить("Сумма");
	СписокСвойств.Добавить("СуммаНДС");
	СписокСвойств.Добавить("ОтражениеВУСН");
	
	Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах И ПараметрыВставки.ИсточникИДокументОдногоВида Тогда
		
		СписокСвойств.Добавить("СчетУчетаНДС");
		СписокСвойств.Добавить("СпособУчетаНДС");
		
	КонецЕсли;
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
		ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)

	Элементы = Форма.Элементы;
	Доступность = Не Форма.ТолькоПросмотр И Доступность;
	
	Элементы.ТопливоВставитьСтроки.Доступность                = Доступность;
	Элементы.ТопливоКонтекстноеМенюВставитьСтроки.Доступность = Доступность;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
