#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура предназначена для автоматического заполнения списка работ по данным технологических карт
Процедура ЗаполнитьРаботы() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АР_ПараметрыЭксплуатацииОбъектовСрезПоследних.Организация,
	|	АР_ПараметрыЭксплуатацииОбъектовСрезПоследних.ОбъектАренды,
	|	АР_ПараметрыЭксплуатацииОбъектовСрезПоследних.ЭлементОбъекта,
	|	АР_ПараметрыЭксплуатацииОбъектовСрезПоследних.КомплексРабот,
	|	АР_ПараметрыЭксплуатацииОбъектовСрезПоследних.Спецификация,
	|	АР_ПараметрыЭксплуатацииОбъектовСрезПоследних.ТипОбслуживания,
	|	АР_ПараметрыЭксплуатацииОбъектовСрезПоследних.ГрафикОбслуживания,
	|	АР_ПараметрыЭксплуатацииОбъектовСрезПоследних.ПоказательВыработки,
	|	АР_ПараметрыЭксплуатацииОбъектовСрезПоследних.ПороговоеЗначениеВыработки,
	|	АР_ПараметрыЭксплуатацииОбъектовСрезПоследних.ТехнологическаяКарта,
	|	АР_ТехнологическиеКартыТехОбслуживанияМаршрут.Операция КАК ТехОперация,
	|	АР_ТехнологическиеКартыТехОбслуживанияМаршрут.ВремяВыполнения,
	|	АР_ТехнологическиеКартыТехОбслуживанияМаршрут.Количество,
	|	АР_ТехнологическиеКартыТехОбслуживанияМаршрут.Работа,
	|	АР_ТехнологическиеКартыТехОбслуживанияМаршрут.ВнутренняяРабота,
	|	АР_ТехнологическиеКартыТехОбслуживанияМаршрут.Операция.Расценка КАК Цена,
	|	АР_ТехнологическиеКартыТехОбслуживанияМаршрут.Операция.Расценка * АР_ТехнологическиеКартыТехОбслуживанияМаршрут.Количество КАК Сумма,
	|	АР_ТехнологическиеКартыТехОбслуживанияМаршрут.Операция.СтатьяЗатрат КАК СтатьяЗатрат
	|ИЗ
	|	РегистрСведений.АР_ПараметрыЭксплуатацииОбъектов.СрезПоследних(&МоментВремени, Организация = &Организация) КАК АР_ПараметрыЭксплуатацииОбъектовСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АР_ТехнологическиеКартыТехОбслуживания.Маршрут КАК АР_ТехнологическиеКартыТехОбслуживанияМаршрут
	|		ПО АР_ПараметрыЭксплуатацииОбъектовСрезПоследних.ТехнологическаяКарта = АР_ТехнологическиеКартыТехОбслуживанияМаршрут.Ссылка";
	
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
	Запрос.УстановитьПараметр("Организация", Организация);
		
	РезультатЗапроса = Запрос.Выполнить();
	
	//определим, сколько раз необходимо выполнить комплексные работы по каждому графику в заданном периоде
	ТаблицаГрафиков =ПроверитьТребованиеВыполненияРаботПоГрафикамОбслуживания(РезультатЗапроса);
			
	//теперь пройдемся по всем объектам и их элементам	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Для каждого дня из периода планирования затрат необходимо получить подтверждение необходимости выполнения
		// операций по обслуживанию.
		СтрокаГрафика = ТаблицаГрафиков.Найти(Выборка.ГрафикОбслуживания,"ГрафикОбслуживания");
		КоличествоКомплексныхРабот = СтрокаГрафика.КоличествоКомплексныхРабот;
		
		Если КоличествоКомплексныхРабот <> 0 Тогда
			//добавляем работу в табличную часть
			СтрокаТЧ = Работы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ,Выборка);
			СтрокаТЧ.Количество = СтрокаТЧ.Количество*КоличествоКомплексныхРабот;
			СтрокаТЧ.Сумма = СтрокаТЧ.Количество*СтрокаТЧ.Цена;
		КонецЕсли;
				
	КонецЦикла;
		
КонецПроцедуры

// Процедура предназначена для автоматического заполнения списка работ по данным спецификаций
Процедура ЗаполнитьМатериалы() Экспорт
	
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ РАЗЛИЧНЫЕ
	 |	Материалы.Номенклатура,
	 |	Материалы.Количество,
	 |	Материалы.КомплексРабот,
	 |	Материалы.ГрафикОбслуживания,
	 |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	 |	Материалы.ОбъектАренды,
	 |	Материалы.ЭлементОбъекта,
	 |	Материалы.Номенклатура.СтатьяЗатрат КАК СтатьяЗатрат
	 |ИЗ
	 |	(ВЫБРАТЬ
	 |		СпецификацииНоменклатурыИсходныеКомплектующие.Номенклатура КАК Номенклатура,
	 |		СУММА(СпецификацииНоменклатурыИсходныеКомплектующие.Количество) КАК Количество,
	 |		ВложенныйЗапрос.КомплексРабот КАК КомплексРабот,
	 |		ВложенныйЗапрос.ГрафикОбслуживания КАК ГрафикОбслуживания,
	 |		ВложенныйЗапрос.ОбъектАренды КАК ОбъектАренды,
	 |		ВложенныйЗапрос.ЭлементОбъекта КАК ЭлементОбъекта
	 |	ИЗ
	 |		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	 |			ПараметрыЭксплуатации.ОбъектАренды КАК ОбъектАренды,
	 |			ПараметрыЭксплуатации.ЭлементОбъекта КАК ЭлементОбъекта,
	 |			ПараметрыЭксплуатации.КомплексРабот КАК КомплексРабот,
	 |			ПараметрыЭксплуатации.Спецификация КАК Спецификация,
	 |			ПараметрыЭксплуатации.ГрафикОбслуживания КАК ГрафикОбслуживания,
	 |			ПараметрыЭксплуатации.ТехнологическаяКарта КАК ТехнологическаяКарта
	 |		ИЗ
	 |			РегистрСведений.АР_ПараметрыЭксплуатацииОбъектов.СрезПоследних(&МоментВремени, Организация = &Организация) КАК ПараметрыЭксплуатации) КАК ВложенныйЗапрос
	 |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СпецификацииНоменклатуры.ИсходныеКомплектующие КАК СпецификацииНоменклатурыИсходныеКомплектующие
	 |			ПО ВложенныйЗапрос.Спецификация = СпецификацииНоменклатурыИсходныеКомплектующие.Ссылка
	 |	
	 |	СГРУППИРОВАТЬ ПО
	 |		ВложенныйЗапрос.КомплексРабот,
	 |		СпецификацииНоменклатурыИсходныеКомплектующие.Номенклатура,
	 |		ВложенныйЗапрос.ГрафикОбслуживания,
	 |		ВложенныйЗапрос.ОбъектАренды,
	 |		ВложенныйЗапрос.ЭлементОбъекта) КАК Материалы
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&МоментВремени, ТипЦен = &ПлановыеЦены) КАК ЦеныНоменклатурыСрезПоследних
	 |		ПО Материалы.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура";
	 
 	Запрос.УстановитьПараметр("МоментВремени",МоментВремени());
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("ПлановыеЦены", Константы.АР_ТипЦенПлановойСебестоимостиМатериалов.Получить());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	//определим, сколько раз необходимо выполнить комплексные работы по каждому графику в заданном периоде
	ТаблицаГрафиков = ПроверитьТребованиеВыполненияРаботПоГрафикамОбслуживания(РезультатЗапроса);
			
	//теперь пройдемся по всем объектам и их элементам	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Для каждого дня из периода планирования затрат необходимо получить подтверждение необходимости
		// выполнения операций по обслуживанию.
		СтрокаГрафика = ТаблицаГрафиков.Найти(Выборка.ГрафикОбслуживания,"ГрафикОбслуживания");
		КоличествоКомплексныхРабот = СтрокаГрафика.КоличествоКомплексныхРабот;
		
		Если КоличествоКомплексныхРабот <> 0 Тогда
			//добавляем работу в табличную часть
			СтрокаТЧ = Материалы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, Выборка);
			СтрокаТЧ.Количество = СтрокаТЧ.Количество * КоличествоКомплексныхРабот;
			Если Не ЗначениеЗаполнено(СтрокаТЧ.Цена) Тогда
				Сообщить("В строке " + СтрокаТЧ.НомерСтроки + ": Для материала """ + Выборка.Номенклатура + """ не назначена плановая цена себестоимости!");
			Иначе
				СтрокаТЧ.Сумма = СтрокаТЧ.Количество * СтрокаТЧ.Цена;
			КонецЕсли;
		КонецЕсли;
				
	КонецЦикла;
  	
КонецПроцедуры

Функция ПроверитьТребованиеВыполненияРаботПоГрафикамОбслуживания(РезультатЗапроса)
	
	//определим, сколько раз необходимо выполнить комплексные работы по каждому графику в заданном периоде
	ТаблицаГрафиков = РезультатЗапроса.Выгрузить();
	ТаблицаГрафиков.Свернуть("ГрафикОбслуживания, КомплексРабот, ОбъектАренды, ЭлементОбъекта");
	Для Каждого Стр Из ТаблицаГрафиков Цикл
		Расписание = Стр.ГрафикОбслуживания.Расписание.Получить();
		Если ТипЗнч(Расписание)<>Тип("РасписаниеРегламентногоЗадания") Тогда
			ТекстСообщения = СтрШаблон("Не указан график обслуживания для комплекса работ ""%1"" по объекту ""%2""", Стр.КомплексРабот, Стр.ОбъектАренды)
				+ ?(ЗначениеЗаполнено(Стр.ЭлементОбъекта), СтрШаблон(" (элемент ""%1"")", Стр.ЭлементОбъекта), "");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаГрафиков.Свернуть("ГрафикОбслуживания");
	ТаблицаГрафиков.Колонки.Добавить("КоличествоКомплексныхРабот");
	
	МассивДат = СформироватьМассивДат(НачалоПериода,ОкончаниеПериода);
	
	Для Каждого Стр Из ТаблицаГрафиков Цикл
		ПоследняяДатаВыполнения = Дата(1,1,1);
		КоличествоКомплексныхРабот = 0;
		Стр.КоличествоКомплексныхРабот = 0;
		
		// Для каждого дня из периода планирования затрат необходимо получить подтверждение необходимости
		// выполнения операций по обслуживанию.
		Расписание = Стр.ГрафикОбслуживания.Расписание.Получить();
		Если ТипЗнч(Расписание)<>Тип("РасписаниеРегламентногоЗадания") Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого День Из МассивДат Цикл
			ТребуетсяВыполнение = Расписание.ТребуетсяВыполнение(День,ПоследняяДатаВыполнения,);
			Если ТребуетсяВыполнение Тогда
				КоличествоКомплексныхРабот = КоличествоКомплексныхРабот+1;
				ПоследняяДатаВыполнения = День;
			КонецЕсли;
		КонецЦикла;
		
		Стр.КоличествоКомплексныхРабот = КоличествоКомплексныхРабот;
	КонецЦикла;
	
	Возврат ТаблицаГрафиков;

КонецФункции

Функция СформироватьМассивДат(НачалоПериода, ОкончаниеПериода)
	
	День = 60*60*24;
	МассивДат = Новый Массив();
	ОчереднаяДата = НачалоДня(НачалоПериода);
	
	Пока ОчереднаяДата<=ОкончаниеПериода Цикл
		МассивДат.Добавить(ОчереднаяДата);
		ОчереднаяДата = ОчереднаяДата + День;
	КонецЦикла;
	
	Возврат МассивДат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Исключаем из проверки реквизиты, заполнение которых стало необязательным:
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	Если НачалоПериода > ОкончаниеПериода Тогда
		ТекстСообщения = НСтр("ru = 'Окончание периода превышает начало периода планирования'");
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, "Корректность",
				НСтр("ru = 'Окончание периода'"),,, ТекстСообщения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,
			"ОкончаниеПериода", "Объект", Отказ);
	КонецЕсли;
	
	// Удаляем из проверяемых реквизитов все, по которым автоматическая проверка не нужна:
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПроведения = Документы.АР_ПланированиеЗатратНаЭксплуатацию.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ

	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	АР_ОбщиеПроцедуры.СформироватьДвиженияПоРегистру(ПараметрыПроведения.ЗатратыРаботы, Движения, "АР_ПланируемыеЗатратыНаОбслуживаниеОбъектов", Отказ);
	АР_ОбщиеПроцедуры.СформироватьДвиженияПоРегистру(ПараметрыПроведения.ЗатратыМатериалы, Движения, "АР_ПланируемыеЗатратыНаОбслуживаниеОбъектов", Отказ);
			
	ПроведениеСервер.УстановитьЗаписьОчищаемыхНаборовЗаписей(ЭтотОбъект);
		
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

КонецПроцедуры


#КонецЕсли
