
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма, "ПФР");
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтметитьКакПрочтенное(Объект.Ссылка);
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗапрашиваемыеЗначенияПервоначальногоЗаполнения());
		ТекущийОбъект = РеквизитФормыВЗначение("Объект");
		ПриПолученииДанныхНаСервере(ТекущийОбъект);
		
		Если Параметры.Свойство("Сотрудник") Тогда
			// Заполнение по сотруднику
			ЗаполнитьМероприятиеПоДокументуСотрудника(Параметры.Сотрудник);
			ЭлектронныйДокументооборотДоступен = ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(Объект.Организация, "ПФР", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаПечатьПереопределенная;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	СервисЭлектронныхТрудовыхКнижек.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД_ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "РедактированиеМероприятийПоСотруднику" И Источник.ВладелецФормы = ЭтаФорма Тогда
		ПриИзмененииДанныхДокументаПоСотруднику(Параметр.АдресВоВременномХранилище);
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "Завершение отправки в контролирующий орган"
		И Параметр.Ссылка = Объект.Ссылка Тогда
		ОповеститьОбИзмененииДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ЗаписатьПровестиОтправитьПриСоздании Тогда
		ПроверкаЗаполненияДокумента(Отказ);
		ПараметрыЗаписи.РежимЗаписи = ?(Отказ, РежимЗаписиДокумента.Запись, РежимЗаписиДокумента.Проведение);
		ЗаписатьПровестиОтправитьПриСоздании = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьМероприятияСотрудников();
	УстановитьДоступностьДанныхФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОповеститьОбИзмененииДокумента(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ЗаписатьПровестиОтправитьПриСоздании Тогда
		Записать();
		Если Объект.Проведен И ЭлектронныйДокументооборотДоступен Тогда
			РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтотОбъект, "ПФР");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетныйПериодПредставлениеПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ОтчетныйПериод", "ОтчетныйПериодПредставление", Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетныйПериодПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ОтчетныйПериод", "ОтчетныйПериодПредставление");
КонецПроцедуры

&НаКлиенте
Процедура ОтчетныйПериодПредставлениеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.ОтчетныйПериод", "ОтчетныйПериодПредставление", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетныйПериодПредставлениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетныйПериодПредставлениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ФлагБлокировкиДокументаПриИзменении(Элемент)
	
	Если Объект.Проведен
		И Не ФлагБлокировкиДокумента
		И Не Объект.ДокументПринятВПФР Тогда
		
		// Когда документ принят частично, первая очистка флага приводит лишь к отмене блокировки документа
		ФлагБлокировкиДокументаПриИзмененииЗавершение(КодВозвратаДиалога.Да);
		
	Иначе
		
		Если ЕстьПоРазномуОтмеченныеСтрокиСотрудников() Тогда
			
			Если ФлагБлокировкиДокумента Тогда
				
				ТекстВопроса = НСтр("ru = 'Среди сотрудников есть строки, отмеченные принятыми в ПФР.
					|Установка флага приведет к тому, что принятыми в ПФР станут все строки сотрудников.
					|Продолжить?'");
				
			Иначе
				
				ТекстВопроса = НСтр("ru = 'Среди сотрудников есть строки, отмеченные принятыми в ПФР.
					|Очистка флага приведет к тому, что эти строки перестанут считаться принятыми в ПФР.
					|Продолжить?'");
				
			КонецЕсли;
			
			Оповещение = Новый ОписаниеОповещения("ФлагБлокировкиДокументаПриИзмененииЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
			
		Иначе
			ФлагБлокировкиДокументаПриИзмененииЗавершение(КодВозвратаДиалога.Да);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФлагБлокировкиДокументаПриИзмененииЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ФлагБлокировкиДокументаПриИзмененииНаСервере(Истина);
	Иначе
		ФлагБлокировкиДокумента = Не ФлагБлокировкиДокумента;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьПоРазномуОтмеченныеСтрокиСотрудников()
	
	ЕстьОтмеченныеСтроки = Ложь;
	ЕстьСтрокиБезОтметки = Ложь;
	Для Каждого СтрокаСотрудники Из Объект.Сотрудники Цикл
		
		Если СтрокаСотрудники.ПринятоВПФР Тогда
			ЕстьОтмеченныеСтроки = Истина;
		Иначе
			ЕстьСтрокиБезОтметки = Истина;
		КонецЕсли;
		
		Если ЕстьОтмеченныеСтроки И ЕстьСтрокиБезОтметки Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСотрудники

&НаКлиенте
Процедура СотрудникиСотрудникПриИзменении(Элемент)
	
	СотрудникиСотрудникПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиСтраховойНомерПФРПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПерсонифицированныйУчетКлиентСервер.УстановитьФорматСтраховогоНомераПФР(ТекущиеДанные.СтраховойНомерПФР);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Сотрудник) Тогда
		Возврат;
	КонецЕсли;	
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуРедактированияКарточкиДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СотрудникиСотрудник",
		"ТолькоПросмотр",
		Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СотрудникиСотрудник",
		"ТолькоПросмотр",
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;	
	
	СтандартнаяОбработка = Ложь;
	
	СписокСотрудников = Новый Массив;
	Для Каждого Сотрудник Из ВыбранноеЗначение Цикл
		СписокСотрудников.Добавить(Сотрудник);
	КонецЦикла;
	
	ЗаполнитьДанныеСотрудников(СписокСотрудников, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПередУдалением(Элемент, Отказ)
	
	СотрудникиПередУдалениемНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПринятоВПФРПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если Не ТекущиеДанные.ПринятоВПФР Тогда
			ФлагБлокировкиДокумента = Ложь;
			ФлагБлокировкиДокументаПриИзмененииНаСервере(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьКадровымиИзменениями(Команда)
	
	ОчиститьСообщения();
	ЗаполнитьКадровымиИзменениямиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	СтруктураОтбора = Новый Структура;
	Если ИспользуетсяСервисЭлектронныхТрудовыхКнижек Тогда
		СтруктураОтбора.Вставить("ГоловнаяОрганизация", Объект.Организация);
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("РежимВыбора", Истина);
		ПараметрыОткрытияФормы.Вставить("МножественныйВыбор", Истина);
		ПараметрыОткрытияФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
		ПараметрыОткрытияФормы.Вставить("АдресСпискаПодобранныхСотрудников", АдресСпискаПодобранныхСотрудников());
		ПараметрыОткрытияФормы.Вставить("Отбор", СтруктураОтбора);
	
		ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрыОткрытияФормы, Элементы.Сотрудники);	
	Иначе
		СтруктураОтбора.Вставить("МесяцПримененияОтбора", Объект.ОтчетныйПериод);
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Отбор", СтруктураОтбора);
		ПараметрыОткрытияФормы.Вставить("ТолькоПросмотр", Истина);
		
		КадровыйУчетКлиент.ПодобратьФизическихЛицОрганизации(
			Элементы.Сотрудники,
			Объект.Организация,
			АдресСпискаПодобранныхСотрудников(),
			,
			ПараметрыОткрытияФормы);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Проверить(Команда)
	
	ОчиститьСообщения();	
	
	Отказ = Ложь;
	ПроверкаЗаполненияДокумента(Отказ);
	ПроверкаСтороннимиПрограммами(Отказ);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	Оповещение = Новый ОписаниеОповещения("ВыполнитьПодключаемуюКомандуЗавершение", ЭтотОбъект, Команда);
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодключаемуюКомандуЗавершение(Результат, Команда) Экспорт
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ЗаписатьНаДиск(Команда)
	Оповещение = Новый ОписаниеОповещения("ЗаписатьНаДискЗавершение", ЭтотОбъект);	
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);			
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаДискЗавершение(Результат, Параметры) Экспорт
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;

	ДанныеФайла = ПолучитьДанныеФайлаНаСервере(Объект.Ссылка, УникальныйИдентификатор);
	РаботаСФайламиКлиент.СохранитьФайлКак(ДанныеФайла);	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;

	ДанныеФайла = ПолучитьДанныеФайлаНаСервере(Объект.Ссылка, УникальныйИдентификатор);
	Если ДанныеФайла <> Неопределено Тогда
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, Ложь);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	Оповещение = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);	
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Результат, Параметры) Экспорт
	Если Модифицированность Или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Записать();
	КонецЕсли;

	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ПФР");	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;

	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма, "ПФР");	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьПротоколПриема(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПрочитатьПротоколПриемаЗавершение", ЭтотОбъект);
	
	ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузки.ИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыЗагрузки.Диалог.Фильтр      = НСтр("ru = 'Файл протокола приемки(*.xml)|*.xml'");
	ПараметрыЗагрузки.Диалог.Заголовок   = НСтр("ru = 'Выберите файл протокола приема ПФР'");
	
	ФайловаяСистемаКлиент.ЗагрузитьФайл(Оповещение, ПараметрыЗагрузки , , );
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект)
	
	ДанныеОбъектаВДанныеФормы(ТекущийОбъект);
	УстановитьДоступностьДанныхФормы();
	
КонецПроцедуры

&НаСервере
Процедура ДанныеОбъектаВДанныеФормы(ТекущийОбъект)
	
	ФлагБлокировкиДокумента = Объект.ДокументПринятВПФР;	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтотОбъект, "Объект.ОтчетныйПериод", "ОтчетныйПериодПредставление");
	
	ЗаполнитьМероприятияСотрудников();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьДанныхФормы()
	
	Если Объект.Проведен Тогда
		
		Если Объект.ДокументПринятВПФР Тогда
			ЧастичноПринятыйВПФРДокументДекорацияВидимость = Ложь;
			НеПринятыйВПФРДокументДекорацияВидимость = Ложь;
			ТолькоПросмотрФормы = Истина;
		Иначе
			
			ЧастичноПринятыеСотрудники = Объект.Сотрудники.НайтиСтроки(Новый Структура("ПринятоВПФР", Истина));
			Если ЧастичноПринятыеСотрудники.Количество() > 0 Тогда
				ЧастичноПринятыйВПФРДокументДекорацияВидимость = Истина;
				НеПринятыйВПФРДокументДекорацияВидимость = Ложь;
				ТолькоПросмотрФормы = Истина;
			Иначе
				ЧастичноПринятыйВПФРДокументДекорацияВидимость = Ложь;
				НеПринятыйВПФРДокументДекорацияВидимость = Истина;
				ТолькоПросмотрФормы = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ЧастичноПринятыйВПФРДокументДекорацияВидимость = Ложь;
		НеПринятыйВПФРДокументДекорацияВидимость = Истина;
		ТолькоПросмотрФормы = Ложь;
		
	КонецЕсли;
	
	Если ТолькоПросмотрФормы И ЧастичноПринятыйВПФРДокументДекорацияВидимость Тогда
		ФлагБлокировкиДокументаЗаголовок = НСтр("ru = 'Документ частично принят в ПФР (не редактируется)'");
		ФлагБлокировкиДокумента = Истина;
	Иначе
		ФлагБлокировкиДокументаЗаголовок = НСтр("ru = 'Документ принят в ПФР (не редактируется)'");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФлагБлокировкиДокумента",
		"Заголовок",
		ФлагБлокировкиДокументаЗаголовок);
	
	ТолькоПросмотр = ТолькоПросмотрФормы;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЧастичноПринятыйВПФРДокументДекорация",
		"Видимость",
		ЧастичноПринятыйВПФРДокументДекорацияВидимость);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НеПринятыйВПФРДокументДекорация",
		"Видимость",
		НеПринятыйВПФРДокументДекорацияВидимость);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапрашиваемыеЗначенияПервоначальногоЗаполнения()
	
	ЗапрашиваемыеЗначения = ЗапрашиваемыеЗначенияЗаполненияПоОрганизации();
	ЗапрашиваемыеЗначения.Вставить("Организация", "Объект.Организация");
	ЗапрашиваемыеЗначения.Вставить("ПредыдущийМесяц", "Объект.ОтчетныйПериод");
	ЗапрашиваемыеЗначения.Вставить("Ответственный", "Объект.Ответственный");
	
	Возврат ЗапрашиваемыеЗначения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗапрашиваемыеЗначенияЗаполненияПоОрганизации()
	
	ЗапрашиваемыеЗначения = Новый Структура;
	ЗапрашиваемыеЗначения.Вставить("Руководитель", "Объект.Руководитель");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьРуководителя", "Объект.ДолжностьРуководителя");
	
	Возврат ЗапрашиваемыеЗначения;
	
КонецФункции 

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ОчиститьДокумент();
	
	Объект.Руководитель = Справочники.ФизическиеЛица.ПустаяСсылка();
	Объект.ДолжностьРуководителя = Справочники.Должности.ПустаяСсылка();
	
	ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗапрашиваемыеЗначенияПервоначальногоЗаполнения());	
	Объект.ИмяФайлаДляПФР = Документы.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ИмяФайла(Объект.Организация, Объект.Дата);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДокумент()
	
	Объект.Сотрудники.Очистить();
	Объект.Мероприятия.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ФлагБлокировкиДокументаПриИзмененииНаСервере(Знач ПрименитьКСтрокамСотрудников)
	
	Модифицированность = Истина;
	
	Если Не ФлагБлокировкиДокумента И Не Объект.ДокументПринятВПФР Тогда
		ПрименитьКСтрокамСотрудников = Ложь;
	КонецЕсли;
	
	Объект.ДокументПринятВПФР = ФлагБлокировкиДокумента;
	
	Если Не ФлагБлокировкиДокумента Тогда
		
		ТолькоПросмотр = Ложь;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ФлагБлокировкиДокумента",
			"Заголовок",
			НСтр("ru = 'Документ принят в ПФР (не редактируется)'"));
		
	КонецЕсли;
	
	Если ПрименитьКСтрокамСотрудников Тогда
		
		Для Каждого СтрокаСотрудника Из Объект.Сотрудники Цикл
			СтрокаСотрудника.ПринятоВПФР = Объект.ДокументПринятВПФР;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКадровымиИзменениямиНаСервере()
	
	ЗаполнитьНаСервере(Не ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет"));
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьНаСервере(ЗаполнитьВсемиСотрудниками)
	
	ОчиститьДокумент();
	
	ПеренестиДанныеТрудовойДеятельностиСотрудниковВДокумент(
		ЭлектронныеТрудовыеКнижки.ДанныеТрудовойДеятельностиСотрудниковОрганизации(
			Истина, Объект.Организация, ЭлектронныеТрудовыеКнижки.ДатаНачалаУчета(),
			Мин(КонецМесяца(Объект.ОтчетныйПериод), Объект.Дата),
			ЗаполнитьВсемиСотрудниками, Объект.Ссылка),
		ЗаполнитьВсемиСотрудниками);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСотрудников(СписокСотрудников, ЗаполнитьВсемиСотрудниками = Ложь)
	
	ПеренестиДанныеТрудовойДеятельностиСотрудниковВДокумент(
		ЭлектронныеТрудовыеКнижки.ДанныеТрудовойДеятельностиСотрудников(
			Истина, Объект.Организация, СписокСотрудников, Объект.ОтчетныйПериод,
			Мин(КонецМесяца(Объект.ОтчетныйПериод), Объект.Дата), ЗаполнитьВсемиСотрудниками),
		ЗаполнитьВсемиСотрудниками);
		
	ДозаполнитьНепринятымиСотрудниками(СписокСотрудников);
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиДанныеТрудовойДеятельностиСотрудниковВДокумент(ДанныеЗаполнения, ЗаполнитьВсемиСотрудниками)
	
	Для Каждого ДанныеЗаполненияСотрудника Из ДанныеЗаполнения Цикл
		
		ПеренестиСведения = ЗаполнитьВсемиСотрудниками
			Или ДанныеЗаполненияСотрудника.ТрудоваяДеятельность.Количество() > 0
			Или ЗначениеЗаполнено(ДанныеЗаполненияСотрудника.ЗаявлениеОПродолжении)
			Или ЗначениеЗаполнено(ДанныеЗаполненияСотрудника.ЗаявлениеОПредоставлении);
		
		Если ПеренестиСведения Тогда
			СтрокаСотрудника = Объект.Сотрудники.Добавить();
			ЗаполнитьСтрокуСотрудникаДаннымиМероприятий(СтрокаСотрудника, ДанныеЗаполненияСотрудника);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуСотрудникаДаннымиМероприятий(СтрокаСотрудника, ДанныеЗаполненияСотрудника)
	
	ЗаполнитьЗначенияСвойств(СтрокаСотрудника, ДанныеЗаполненияСотрудника);
	СтрокаСотрудника.Сотрудник = ДанныеЗаполненияСотрудника.ФизическоеЛицо;
	Для Каждого ЗаписьТрудовойДеятельности Из ДанныеЗаполненияСотрудника.ТрудоваяДеятельность Цикл
		СтрокаМероприятия = Объект.Мероприятия.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаМероприятия, ЗаписьТрудовойДеятельности);
		СтрокаМероприятия.Сотрудник = ДанныеЗаполненияСотрудника.ФизическоеЛицо;
	КонецЦикла;
	
	ЗаполнитьМероприятияВСтроке(СтрокаСотрудника, ДанныеЗаполненияСотрудника.ТрудоваяДеятельность);
	
КонецПроцедуры

&НаСервере
Процедура ДозаполнитьНепринятымиСотрудниками(СписокСотрудников)
	
	Если НЕ ИспользуетсяСервисЭлектронныхТрудовыхКнижек Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ДанныеСотрудника Из СписокСотрудников Цикл
		МассивСотрудников = Объект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", ДанныеСотрудника));
		Если МассивСотрудников.Количество() = 0 Тогда
			СтрокаСотрудника = Объект.Сотрудники.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСотрудника, ДанныеСотрудника);
			СтрокаСотрудника.Сотрудник = ДанныеСотрудника;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СотрудникиСотрудникПриИзмененииНаСервере()
	
	СтрокаСотрудника = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
	Если Не ЗначениеЗаполнено(СтрокаСотрудника.Сотрудник) Тогда
		ЗаполнитьДанныеСтрокиПустымиЗначениями(СтрокаСотрудника);
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = ЭлектронныеТрудовыеКнижки.ДанныеТрудовойДеятельностиСотрудника(
		Истина, СтрокаСотрудника.Сотрудник, Объект.Организация, Объект.ОтчетныйПериод,
		Мин(КонецМесяца(Объект.ОтчетныйПериод), Объект.Дата), Объект.Ссылка);
	
	Если ДанныеЗаполнения <> Неопределено Тогда
		ЗаполнитьСтрокуСотрудникаДаннымиМероприятий(СтрокаСотрудника, ДанныеЗаполнения);
	ИначеЕсли ИспользуетсяСервисЭлектронныхТрудовыхКнижек Тогда
		ЗаполнитьЗначенияСвойств(СтрокаСотрудника, СтрокаСотрудника.Сотрудник);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСтрокиПустымиЗначениями(ДанныеСтроки)
	
	ДанныеСтроки.Фамилия = "";
	ДанныеСтроки.Имя = "";
	ДанныеСтроки.Отчество = "";
	ДанныеСтроки.СтраховойНомерПФР = "";
	
КонецПроцедуры	

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Сотрудники.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник"), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ПроверкаЗаполненияДокумента(Отказ = Ложь)
		
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	Объект.ИмяФайлаДляПФР = Документы.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ИмяФайла(Объект.Организация, Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействия(ОповещениеЗавершения = Неопределено)
	
	ОчиститьСообщения();
	
	ДополнительныеПараметры = Новый Структура("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Если Не Объект.Проведен Или Модифицированность Тогда 
		ТекстВопроса = НСтр("ru = 'Для выполнения команды необходимо предварительно провести документ. Выполнить проведение документа и продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ПроверитьСЗапросомДальнейшегоДействияПродолжение", ЭтотОбъект, ДополнительныеПараметры);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки);
	Иначе 
		ПроверитьСЗапросомДальнейшегоДействияПродолжение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействияПродолжение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;			
	
	Если Не Объект.Проведен Или Модифицированность Тогда
		Если Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Отказ = Ложь;
	ПроверкаЗаполненияДокумента(Отказ);	
	
	Если Отказ Тогда 
		ТекстВопроса = НСтр("ru = 'В комплекте обнаружены ошибки.
							|Продолжить (не рекомендуется)?'");
		Оповещение = Новый ОписаниеОповещения("ПроверитьСЗапросомДальнейшегоДействияЗавершение", ЭтотОбъект, ДополнительныеПараметры);					
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НСтр("ru = 'Предупреждение.'"));
	Иначе 
		ПроверитьСЗапросомДальнейшегоДействияЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);				
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействияЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;			
	
	Если ДополнительныеПараметры.ОповещениеЗавершения <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПроверкаСтороннимиПрограммами(Отказ)
	
	Если Отказ Тогда
		ТекстВопроса = НСтр("ru = 'При проверке встроенной проверкой обнаружены ошибки.
		|Выполнить проверку сторонними программами?'")
	Иначе	
		ТекстВопроса = НСтр("ru = 'При проверке встроенной проверкой ошибок не обнаружено.
		|Выполнить проверку сторонними программами?'");
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПроверкаСтороннимиПрограммамиЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСтороннимиПрограммамиЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда 
		ПроверитьСтороннимиПрограммами();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСтороннимиПрограммами()
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	
	ПроверяемыеОбъекты = Новый Массив;
	ПроверяемыеОбъекты.Добавить(Объект.Ссылка);
	
	ПараметрыОткрытия.Вставить("СсылкиНаПроверяемыеОбъекты", ПроверяемыеОбъекты);
	
	ОткрытьФорму("ОбщаяФорма.ПроверкаФайловОтчетностиПерсУчетаПФР", ПараметрыОткрытия, ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайлаНаСервере(Ссылка, УникальныйИдентификатор)
	
	Возврат ЗарплатаКадры.ПолучитьДанныеФайла(Ссылка, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииДанныхДокументаПоСотруднику(АдресВоВременномХранилище)
	
	ДанныеТекущегоДокументаПоСотрудникуВДанныеФормы(АдресВоВременномХранилище);
	
КонецПроцедуры	

&НаСервере
Процедура ДанныеТекущегоДокументаПоСотрудникуВДанныеФормы(АдресВоВременномХранилище)
	
	ДанныеШапкиДокумента = Объект;
	
	ДанныеТекущегоДокумента = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Если ДанныеТекущегоДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеТекущейСтрокиПоСотруднику = Неопределено;
	НайденныеСтроки = Объект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", ДанныеТекущегоДокумента.Сотрудник));
		
	Если НайденныеСтроки.Количество() > 0 Тогда
		ДанныеТекущейСтрокиПоСотруднику = НайденныеСтроки[0];
		Если ДанныеТекущейСтрокиПоСотруднику.Сотрудник <> ДанныеТекущегоДокумента.Сотрудник Тогда
			ДанныеТекущейСтрокиПоСотруднику = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеТекущейСтрокиПоСотруднику = Неопределено  Тогда
		ВызватьИсключение НСтр("ru = 'В текущем документе не найдены данные по редактируемому сотруднику.'");
	КонецЕсли;
	
	ДанныеТекущейСтрокиПоСотруднику = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
	ЗаполнитьЗначенияСвойств(ДанныеТекущейСтрокиПоСотруднику, ДанныеТекущегоДокумента);
		
	СтруктураПоиска = Новый Структура("Сотрудник", ДанныеТекущейСтрокиПоСотруднику.Сотрудник);
	
	СтрокиМероприятий = Объект.Мероприятия.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаМероприятия Из СтрокиМероприятий Цикл
		Объект.Мероприятия.Удалить(Объект.Мероприятия.Индекс(СтрокаМероприятия));
	КонецЦикла;
	
	Для Каждого СтрокаМероприятия Из ДанныеТекущегоДокумента.Мероприятия Цикл
		СтрокаМероприятияОбъекта = Объект.Мероприятия.Добавить();
		СтрокаМероприятияОбъекта.Сотрудник = ДанныеТекущейСтрокиПоСотруднику.Сотрудник;
		ЗаполнитьЗначенияСвойств(СтрокаМероприятияОбъекта, СтрокаМероприятия);
	КонецЦикла;
	
	ЗаполнитьМероприятияВСтроке(ДанныеТекущейСтрокиПоСотруднику, ДанныеТекущегоДокумента.Мероприятия);
	
	Если ДанныеТекущегоДокумента.Модифицированность Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	ДанныеТекущейСтрокиПоСотруднику.СообщенияМероприятий.Очистить();
		
КонецПроцедуры

&НаСервере
Процедура СотрудникиПередУдалениемНаСервере()
	
	Для Каждого Идентификатор Из Элементы.Сотрудники.ВыделенныеСтроки Цикл
		СтрокаСотрудник = Объект.Сотрудники.НайтиПоИдентификатору(Идентификатор);
		Если СтрокаСотрудник <> Неопределено Тогда 
			УдалитьСтрокиМероприятий(СтрокаСотрудник.Сотрудник);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиМероприятий(Сотрудник) Экспорт
	
	УдаляемыеСтроки = Объект.Мероприятия.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Объект.Мероприятия.Удалить(Объект.Мероприятия.Индекс(УдаляемаяСтрока));
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОткрытьФормуРедактированияКарточкиДокумента()
	
	ДанныеТекущейСтроки = Элементы.Сотрудники.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки <> Неопределено Тогда	
		
		ДанныеТекущегоДокументаПоСотрудникуВоВременноеХранилище();
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("АдресВоВременномХранилище", АдресДанныхТекущегоДокументаВХранилище);
		ПараметрыОткрытияФормы.Вставить("РедактируемыйДокументСсылка", Объект.Ссылка);
		ПараметрыОткрытияФормы.Вставить("Сотрудник", ДанныеТекущейСтроки.Сотрудник);
		ПараметрыОткрытияФормы.Вставить("Организация", Объект.Организация);
		ПараметрыОткрытияФормы.Вставить("ДатаДокумента", Объект.Дата);
		ПараметрыОткрытияФормы.Вставить("ОтчетныйПериод", Объект.ОтчетныйПериод);
		ПараметрыОткрытияФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
		
		ОткрытьФорму("Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Форма.ФормаРедактированияМероприятий", ПараметрыОткрытияФормы, ЭтаФорма);	
		
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ДанныеТекущегоДокументаПоСотрудникуВоВременноеХранилище()
	
	Если Элементы.Сотрудники.ТекущаяСтрока = Неопределено Тогда
		АдресДанныхТекущегоДокументаВХранилище = "";
		Возврат;
	КонецЕсли;	
	
	ДанныеТекущейСтрокиПоСотруднику = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
	
	Если ДанныеТекущейСтрокиПоСотруднику = Неопределено Тогда
		АдресДанныхТекущегоДокументаВХранилище = "";
		Возврат;
	КонецЕсли;
	
	ДанныеСотрудника = Новый Структура;
	ДанныеСотрудника.Вставить("Сотрудник", ДанныеТекущейСтрокиПоСотруднику.Сотрудник);
	ДанныеСотрудника.Вставить("СтраховойНомерПФР", ДанныеТекущейСтрокиПоСотруднику.СтраховойНомерПФР);
	ДанныеСотрудника.Вставить("Фамилия", ДанныеТекущейСтрокиПоСотруднику.Фамилия);
	ДанныеСотрудника.Вставить("Имя", ДанныеТекущейСтрокиПоСотруднику.Имя);
	ДанныеСотрудника.Вставить("Отчество", ДанныеТекущейСтрокиПоСотруднику.Отчество);
	ДанныеСотрудника.Вставить("ДатаРождения", ДанныеТекущейСтрокиПоСотруднику.ДатаРождения);
	ДанныеСотрудника.Вставить("ЗаявлениеОПродолжении", ДанныеТекущейСтрокиПоСотруднику.ЗаявлениеОПродолжении);
	ДанныеСотрудника.Вставить("ЗаявлениеОПредоставлении", ДанныеТекущейСтрокиПоСотруднику.ЗаявлениеОПредоставлении);
	ДанныеСотрудника.Вставить("ЗаявлениеОПродолженииОтмена", ДанныеТекущейСтрокиПоСотруднику.ЗаявлениеОПродолженииОтмена);
	ДанныеСотрудника.Вставить("ЗаявлениеОПредоставленииОтмена", ДанныеТекущейСтрокиПоСотруднику.ЗаявлениеОПредоставленииОтмена);
	ДанныеСотрудника.Вставить("Мероприятия", Новый Массив);
	ДанныеСотрудника.Вставить("СообщенияМероприятий", ДанныеТекущейСтрокиПоСотруднику.СообщенияМероприятий);
	
	СтруктураПоиска = Новый Структура("Сотрудник", ДанныеТекущейСтрокиПоСотруднику.Сотрудник);
	СтрокиМероприятий = Объект.Мероприятия.НайтиСтроки(СтруктураПоиска);
	
	СтруктураПолейМероприятия = Документы.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.СтруктураПолейМероприятий();
	Для Каждого СтрокаМероприятия Из СтрокиМероприятий Цикл
		СтруктураПолей = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПолейМероприятия);
		ЗаполнитьЗначенияСвойств(СтруктураПолей, СтрокаМероприятия);
		ДанныеСотрудника.Мероприятия.Добавить(СтруктураПолей);
	КонецЦикла;	
	
	Если ЗначениеЗаполнено(АдресДанныхТекущегоДокументаВХранилище) Тогда
		ПоместитьВоВременноеХранилище(ДанныеСотрудника, АдресДанныхТекущегоДокументаВХранилище);	
	Иначе	
		АдресДанныхТекущегоДокументаВХранилище = ПоместитьВоВременноеХранилище(ДанныеСотрудника, УникальныйИдентификатор);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМероприятияСотрудников()
	
	Для Каждого СтрокаСотрудника Из Объект.Сотрудники Цикл 
		СтрокиМероприятий = Объект.Мероприятия.НайтиСтроки(Новый Структура("Сотрудник", СтрокаСотрудника.Сотрудник));
		ЗаполнитьМероприятияВСтроке(СтрокаСотрудника, СтрокиМероприятий);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМероприятияВСтроке(СтрокаСотрудника, СтрокиМероприятий)
	
	Для Сч = 1 По 3 Цикл 
		СтрокаСотрудника["Мероприятие" + Сч] = "";
	КонецЦикла;
	
	Если СтрокиМероприятий.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	КоличествоСтрок = Мин(СтрокиМероприятий.Количество(), 3);
	
	Для Сч = 1 По КоличествоСтрок Цикл
		СтрокаМероприятия = СтрокиМероприятий[Сч - 1];
		СтрокаСотрудника["Мероприятие" + Сч] = Строка(СтрокаМероприятия.ВидМероприятия) + " (" + Формат(СтрокаМероприятия.ДатаМероприятия, "ДЛФ=Д") + ")";
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбИзмененииДокумента(ПараметрыЗаписи = Неопределено)
	
	Если ПараметрыЗаписи = Неопределено Тогда
		ПараметрыЗаписи = Новый Структура;
	КонецЕсли;
	
	МассивСотрудников = Новый Массив;
	Для Каждого ЗаписьМероприятия ИЗ Объект.Мероприятия Цикл
		МассивСотрудников.Добавить(ЗаписьМероприятия.СотрудникЗаписи);
	КонецЦикла;
	
	ПараметрыЗаписи.Вставить("Организация", Объект.Организация);
	ПараметрыЗаписи.Вставить("Сотрудники",  Новый ФиксированныйМассив(МассивСотрудников));
	Оповестить("Запись_СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМероприятиеПоДокументуСотрудника(Сотрудник)
	
	Объект.ОтчетныйПериод = НачалоМесяца(ТекущаяДатаСеанса());
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтотОбъект, "Объект.ОтчетныйПериод", "ОтчетныйПериодПредставление");
	СписокСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник);
	ЗаполнитьДанныеСотрудников(СписокСотрудников, Истина);
	ЗаписатьПровестиОтправитьПриСоздании = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьПротоколПриемаЗавершение(ОписаниеФайла, ДополнительныеПараметры) Экспорт
	
	Если ОписаниеФайла = Неопределено Или Не ЗначениеЗаполнено(ОписаниеФайла.Хранение) Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
		
	РезультатПроверки = ПрочитатьПротоколПриемаНаСервере(ОписаниеФайла.Хранение, ОписаниеФайла.Имя);
	
	Если Не ЗначениеЗаполнено(РезультатПроверки) Тогда
		ТекстПредупреждения = НСтр("ru = 'Файл не содержит результатов приема файла'");
	Иначе
		ТекстПредупреждения = РезультатПроверки;
	КонецЕсли;
	
	ПоказатьПредупреждение(, ТекстПредупреждения);
	
КонецПроцедуры

&НаСервере
Функция ПрочитатьПротоколПриемаНаСервере(АдресДанныхПротоколаПриемки, ИмяФайла)
	
	Возврат Документы.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ПрочитатьПротоколПриема(
		Объект, АдресДанныхПротоколаПриемки, ИмяФайла);
	
КонецФункции

#КонецОбласти
