#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ВремяДокументаПоУмолчанию() Экспорт
	
	Возврат Новый Структура("Часы, Минуты", 16, 0);
	
КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Вызывается документом СчетФактураВыданный на аванс при вводе на основании
//
Функция ТекстЗапросаСчетФактураВыданныйНаАвансРасшифровкаПлатежа(НомераТаблиц) Экспорт
	
	НомераТаблиц.Вставить("ВТ_РасшифровкаПлатежа", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка.Дата КАК Дата,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка КАК ДокументОснование,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка.Организация КАК Организация,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка.Контрагент КАК Контрагент,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	"""" КАК ИдентификаторГосКонтракта,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс КАК Номенклатура,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.СпособПогашенияЗадолженности КАК СпособПогашенияЗадолженности,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ОплатаПлатежнойКартойРасшифровкаПлатежа.СуммаПлатежа) КАК Сумма
	|ПОМЕСТИТЬ РасшифровкаПлатежа
	|ИЗ
	|	Документ.ОплатаПлатежнойКартой.РасшифровкаПлатежа КАК ОплатаПлатежнойКартойРасшифровкаПлатежа
	|ГДЕ
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка.Дата,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка.Организация,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка.Контрагент,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.ДоговорКонтрагента,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.СчетНаОплату,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.СпособПогашенияЗадолженности,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.СтавкаНДС,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

//Обработчики проведения
Функция ПодготовитьПараметрыФормированияПрочиеРасчеты(ТаблицаРеквизиты, ТаблицаВзаиморасчеты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Взаиморасчеты
	СписокОбязательныхКолонок = ""
	+ "ДокументРасчетов,"	// <ДокументСсылка.*>
	+ "СуммаРуб,"		// <Число, 15, 2> - сумма выручки с НДС в рублях
	+ "КорСчет," 		// <ПланСчетовСсылка.Хозрасчетный> - счет учета 
	+ "КорСубконто1," 		// <Характеристика.ВидыСубконтоХозрасчетные>
	+ "КорСубконто2" 		// <Характеристика.ВидыСубконтоХозрасчетные>
	;
	Параметры.Вставить("ТаблицаВзаиморасчетов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчеты, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Взаиморасчеты
	СписокОбязательныхКолонок = ""
	+ "Организация,"				// <СправочникСсылка.Организации>
	+ "Период,"						// <Дата>
	+ "Регистратор,"				// <ДокументСсылка>
	+ "ВидОперации,"				// <ПеречислениеСсылка.ВидыОперацийОплатаПлатежнойКартой>
	+ "Контрагент,"					// <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"			// <СправочникСсылка.ДоговорыКонтрагентов>
	+ "Эквайер,"					// <СправочникСсылка.Контрагенты>
	+ "ДоговорЭквайринга,"			// <СправочникСсылка.ДоговорыКонтрагентов>
	+ "СчетКасса,"					// <ПланСчетовСсылка.Хозрасчетный>
	+ "СуммаПлатежаВсего"			// <Число, 15, 2>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции 

Функция ОстаткиАвансовПрочихРасчетовИП(Реквизиты)
	
	// Установка управляемой блокировки РегистрНакопления.ПрочиеРасчеты
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПрочиеРасчеты");
	ЭлементБлокировки.УстановитьЗначение("Организация",        Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период",             Новый Диапазон(, Реквизиты.Период));
	ЭлементБлокировки.УстановитьЗначение("Контрагент",         Реквизиты.Контрагент);
	ЭлементБлокировки.УстановитьЗначение("ДоговорКонтрагента", Реквизиты.ДоговорКонтрагента);
	ЭлементБлокировки.УстановитьЗначение("СчетУчета",          Реквизиты.СчетКасса);
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",        Реквизиты.Организация);
	Запрос.УстановитьПараметр("СчетУчета",          Реквизиты.СчетКасса);
	Запрос.УстановитьПараметр("Контрагент",         Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Реквизиты.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Период",             Реквизиты.Период);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрочиеРасчетыОстатки.Контрагент КАК Контрагент,
	|	ПрочиеРасчетыОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПрочиеРасчетыОстатки.СуммаОстаток КАК СуммаРуб,
	|	ПрочиеРасчетыОстатки.СчетУчета КАК СчетУчета,
	|	ПрочиеРасчетыОстатки.РасчетныйДокумент КАК ДокументРасчетов
	|ИЗ
	|	РегистрНакопления.ПрочиеРасчеты.Остатки(
	|			&Период,
	|			Организация = &Организация
	|				И СчетУчета = &СчетУчета
	|				И Контрагент = &Контрагент
	|				И ДоговорКонтрагента = &ДоговорКонтрагента) КАК ПрочиеРасчетыОстатки";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПодготовитьТаблицуПрочиеРасчетыИП(ТаблицаРеквизиты, ТаблицаВзаиморасчеты, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыФормированияПрочиеРасчеты(ТаблицаРеквизиты, ТаблицаВзаиморасчеты);
	
	ТаблицаВзаиморасчетов = Параметры.ТаблицаВзаиморасчетов;
	
	Результат = УчетВзаиморасчетов.ПустаяТаблицаПоПрочимРасчетам();
	
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;	
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Организация			= Реквизиты.Организация;
	Регистратор			= Реквизиты.Регистратор;
	Период				= Реквизиты.Период;
	ВидОперации			= Реквизиты.ВидОперации;
	СуммаДокумента		= Реквизиты.СуммаПлатежаВсего;
	СчетУчета			= Реквизиты.СчетКасса;
	Эквайер				= Реквизиты.Эквайер;
	ДоговорЭквайринга	= Реквизиты.ДоговорЭквайринга;
	
	ПлательщикНДФЛ = УчетнаяПолитика.ПлательщикНДФЛ(Организация, Период);
	
	Если Не ПлательщикНДФЛ Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПрименяетсяУСНПатент        = УчетнаяПолитика.ПрименяетсяУСНПатент(Организация, Период);
	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, Период);
	
	Если ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка
		И Не ПрименяетсяУСНПатент
		И СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости Тогда
		// Отражение выручки в НТТ при учете по продажным ценам в КУДиР ИП на ОСНО не поддерживается.
		Возврат Результат;
	КонецЕсли;
	
	СуммаДляРаспределения = СуммаДокумента;
	
	ЭтоВозврат = (ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ВозвратПокупателю);
	Если ЭтоВозврат Тогда
		
		ОстаткиАвансов = ОстаткиАвансовПрочихРасчетовИП(Реквизиты);
		Для Каждого СтрокаАвансов Из ОстаткиАвансов Цикл
			
			// Если есть остатки авансов контрагента, то перенесем их обратно на банк-эквайер.
			
			РаспределеннаяСумма = Мин(СуммаДляРаспределения, СтрокаАвансов.СуммаРуб);
			Если СуммаДляРаспределения = 0 Тогда
				Прервать;
			КонецЕсли;
			
			// Убираем остаток авансов контрагента с документа оплаты.
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.Регистратор = Регистратор;
			НоваяСтрока.Период      = Период;
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
			НоваяСтрока.СчетУчета   = СчетУчета;
			НоваяСтрока.Сумма       = РаспределеннаяСумма;
			НоваяСтрока.Контрагент         = Реквизиты.Контрагент;
			НоваяСтрока.ДоговорКонтрагента = Реквизиты.ДоговорКонтрагента;
			НоваяСтрока.РасчетныйДокумент  = СтрокаАвансов.ДокументРасчетов;
			
			// Формируем движение по возврату на банк-эквайер.
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.Регистратор = Регистратор;
			НоваяСтрока.Период      = Период;
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
			НоваяСтрока.СчетУчета   = СчетУчета;
			НоваяСтрока.Сумма       = РаспределеннаяСумма;
			НоваяСтрока.Контрагент         = Эквайер;
			НоваяСтрока.ДоговорКонтрагента = ДоговорЭквайринга;
			НоваяСтрока.РасчетныйДокумент  = Регистратор;
			
			СуммаДляРаспределения = СуммаДляРаспределения - РаспределеннаяСумма;
		
		КонецЦикла;
	КонецЕсли;
	
	ВидДвижения = ?(ЭтоВозврат, ВидДвиженияНакопления.Расход, ВидДвиженияНакопления.Приход);
	
	Для Каждого СтрокаВзаиморасчетов Из ТаблицаВзаиморасчетов Цикл
		
		РаспределеннаяСумма = Мин(СуммаДляРаспределения, СтрокаВзаиморасчетов.СуммаРуб);
		Если СуммаДляРаспределения = 0 Тогда
			Прервать;
		КонецЕсли;
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Организация = Организация;
		НоваяСтрока.Регистратор = Регистратор;
		НоваяСтрока.Период      = Период;
		НоваяСтрока.ВидДвижения = ВидДвижения;
		НоваяСтрока.СчетУчета   = СчетУчета;
		НоваяСтрока.Сумма       = РаспределеннаяСумма;
		
		НоваяСтрока.Контрагент         = Эквайер;
		НоваяСтрока.ДоговорКонтрагента = ДоговорЭквайринга;
		Если ЭтоВозврат Тогда
			НоваяСтрока.РасчетныйДокумент  = Регистратор;
		Иначе
			НоваяСтрока.РасчетныйДокумент  = СтрокаВзаиморасчетов.ДокументРасчетов;
		КонецЕсли;
		
		СуммаДляРаспределения = СуммаДляРаспределения - РаспределеннаяСумма;
		
	КонецЦикла;
	
	Если СуммаДляРаспределения > 0 Тогда
		
		НоваяСтрока = Результат.Добавить();
		
		НоваяСтрока.Организация = Организация;
		НоваяСтрока.Регистратор = Регистратор;
		НоваяСтрока.Период      = Период;
		НоваяСтрока.ВидДвижения = ВидДвижения;
		
		НоваяСтрока.Контрагент         = Эквайер;
		НоваяСтрока.ДоговорКонтрагента = ДоговорЭквайринга;
		НоваяСтрока.СчетУчета          = СчетУчета;
		
		НоваяСтрока.РасчетныйДокумент  = Регистратор;
		НоваяСтрока.Сумма              = СуммаДляРаспределения;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область ЧекиНПД

// Вызывается при обновлении цен документа из Ценообразование.ОбновитьЦеныНоменклатуры
//
// Возвращаемое значение:
//   Строка
//
Функция ТекстЗапросаДанныеДляОбновленияЦенДокументов() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаНоменклатуры.УслугаНПД КАК Номенклатура,
	|	ТаблицаНоменклатуры.СуммаПлатежа КАК Цена,
	|	&Валюта КАК Валюта,
	|	&СпособЗаполненияЦены КАК СпособЗаполненияЦены,
	|	&ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Документ.ОплатаПлатежнойКартой.РасшифровкаПлатежа КАК ТаблицаНоменклатуры
	|ГДЕ
	|	ТаблицаНоменклатуры.Ссылка = &Ссылка";
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

// См. ЧекиНПД.ПараметрыФормированияЧека
Функция ПараметрыФормированияЧекаНПД(ДокументОснование, Организация) Экспорт
	
	ПараметрыЧека = ЧекиНПД.НовыйПараметрыФормированияЧека();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	Документ.ОплатаПлатежнойКартой КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.УслугаНПД КАК Услуга,
	|	МАКСИМУМ(ДанныеДокумента.НомерСтроки) КАК НомерСтроки,
	|	СУММА(ДанныеДокумента.СуммаПлатежа) КАК Цена
	|ИЗ
	|	Документ.ОплатаПлатежнойКартой.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.УслугаНПД
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ВыборкаРеквизитыШапки = Результаты[0].Выбрать();
	Если ВыборкаРеквизитыШапки.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыЧека, ВыборкаРеквизитыШапки);
	КонецЕсли;
	
	ВыборкаТаблицаУслуг = Результаты[1].Выбрать();
	Пока ВыборкаТаблицаУслуг.Следующий() Цикл
		
		НоваяУслуга = ПараметрыЧека.Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяУслуга, ВыборкаТаблицаУслуг);
		НоваяУслуга.Количество = 1;
		
	КонецЦикла;
	
	Возврат ПараметрыЧека;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

Процедура СформироватьДвиженияРозничнаяВыручка(ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Если Реквизиты.ВидОперации <> Перечисления.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Реквизиты.УчитыватьЗадолженностьУСН И Не Реквизиты.УчитыватьЗадолженностьУСНПатент Тогда
		Возврат;
	КонецЕсли;
	
	// Движения регистра "Прочие расчеты".
	
	ПрименяетсяУСН = УчетнаяПолитика.ПрименяетсяУСН(Реквизиты.Организация, Реквизиты.Период);
	ПрименяетсяТолькоУСНПатент = УчетнаяПолитика.ПрименяетсяТолькоУСНПатент(Реквизиты.Организация, Реквизиты.Период);
	
	Если ПрименяетсяУСН Или ПрименяетсяТолькоУСНПатент Тогда
		
		// При совмещении патентной системы и ОСНО движения "Прочих расчетов" формируются при проведении по регистрам ИП.
		// При ОСНО у юрлица отражение расчетов с эквайером в разрезе документов не требуется, регистр не используется.
		
		НоваяСтрока = Движения.ПрочиеРасчеты.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
		
		НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
		
		НоваяСтрока.Контрагент         = Реквизиты.Эквайер;
		НоваяСтрока.ДоговорКонтрагента = Реквизиты.ДоговорЭквайринга;
		НоваяСтрока.СчетУчета          = Реквизиты.СчетКасса;
		НоваяСтрока.РасчетныйДокумент  = Реквизиты.Регистратор;
		НоваяСтрока.Сумма              = Реквизиты.СуммаПлатежаВсего;
		
		Движения.ПрочиеРасчеты.Записывать = Истина;
		
	КонецЕсли;
	
	// Проводки по счетам вспомогательных расчетов УСН.*
	
	УчетПоПродажнойСтоимости = Реквизиты.УчетПоПродажнойСтоимости;
	РозничнаяТорговляОблагаетсяЕНВД = УчетнаяПолитика.РозничнаяТорговляОблагаетсяЕНВД(
		Реквизиты.Организация, Реквизиты.Период);
	СчетаДоходовРасходов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаВНТТ(
		Реквизиты.Организация,
		Реквизиты.Контрагент,
		Реквизиты.Период,
		Новый Структура("РозничнаяТорговляОблагаетсяЕНВД", РозничнаяТорговляОблагаетсяЕНВД));
	
	ЕНВД = УчетнаяПолитика.ПлательщикЕНВД(Реквизиты.Организация, Реквизиты.Период)
		И БухгалтерскийУчетПовтИсп.СчетОтноситсяКДеятельностиЕНВД(СчетаДоходовРасходов.СчетДоходовОтРеализации);
	ОперацияПоПатенту           = Реквизиты.ОперацияПоПатенту И УчетПоПродажнойСтоимости;
	ДеятельностьНаТорговомСборе = Реквизиты.ДеятельностьНаТорговомСборе И УчетПоПродажнойСтоимости;
	
	Если ЕНВД Или ОперацияПоПатенту Или ДеятельностьНаТорговомСборе Тогда
		
		НужноСоздаватьПроводку = Ложь;
		СчетВПроводку          = Неопределено;
		СуммаВПроводку         = 0;
		СодержаниеВПроводку    = "";
		
		Если ОперацияПоПатенту Тогда
			СчетВПроводку          = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиПатент;
			СуммаВПроводку         = Реквизиты.СуммаПлатежаВсего;
			СодержаниеВПроводку    = "Расчеты с эквайером по деятельности на патенте";
			НужноСоздаватьПроводку = Истина;
		ИначеЕсли ЕНВД Тогда
			СчетВПроводку          = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД;
			СуммаВПроводку         = Реквизиты.СуммаПлатежаВсего;
			СодержаниеВПроводку    = "Расчеты с эквайером по деятельности ЕНВД";
			НужноСоздаватьПроводку = Истина;
		ИначеЕсли ДеятельностьНаТорговомСборе Тогда
			СчетВПроводку          = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиТорговыйСбор;
			СуммаВПроводку         = Реквизиты.СуммаПлатежаВсего;
			СодержаниеВПроводку    = "Расчеты с эквайером по деятельности на торговом сборе";
			НужноСоздаватьПроводку = Истина;
		ИначеЕсли УчетПоПродажнойСтоимости Тогда
			СчетВПроводку          = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент;
			СуммаВПроводку         = Реквизиты.СуммаПлатежаВсего - Реквизиты.ДоходУСН;
			СодержаниеВПроводку    = "Расчеты с эквайером за товары и услуги комитента";
			НужноСоздаватьПроводку = Истина;
		КонецЕсли;
		
		НужноСоздаватьПроводку = СуммаВПроводку <> 0 И НужноСоздаватьПроводку;
		
		Если НужноСоздаватьПроводку Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = СодержаниеВПроводку;
			
			Проводка.СчетДт                                     = СчетВПроводку;
			Проводка.СубконтоДт.Контрагенты                     = Реквизиты.Эквайер;
			Проводка.СубконтоДт.Договоры                        = Реквизиты.ДоговорЭквайринга;
			Проводка.СубконтоДт.ДокументыРасчетовСКонтрагентами = Реквизиты.Регистратор;
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Реквизиты.ПодразделениеОрганизации;
			КонецЕсли;
			
			Проводка.Сумма = СуммаВПроводку;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СчетаУчета

Процедура УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	// Для следующих операций правила заполнения пока не используются:
	// РозничнаяВыручка
	
	// учет денег
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетКасса", "ПродажиПоПлатежнымКартам");
	
	// учет расчетов
	// - расчеты с покупателем (разрешено погашать задолженность)
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентом", "РасчетыСПокупателем");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента",           "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СпособПогашенияЗадолженности", "СпособПогашенияЗадолженности");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Сделка",                       "Сделка");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ОплатаПокупателя");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПогашатьЗадолженность");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовПоАвансам", "АвансыПокупателя", Ложь);
	
	// - расчеты с покупателем
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентом", "РасчетыСПокупателем");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента",           "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВозвратПокупателю");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовПоАвансам", "АвансыПокупателя", Ложь);
	
	// - аванс покупателя
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовПоАвансам", "АвансыПокупателя", Ложь);
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента",           "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СпособПогашенияЗадолженности", "СпособПогашенияЗадолженности");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ОплатаПокупателя");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ПогашатьЗадолженность");
	
	// - валютный учет
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентом", "РасчетыСПокупателямиУЕ");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "РасчетыСПокупателямиУЕ");
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "ВалютаДокумента");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Подразделение", "ПодразделениеОрганизации");
		
	Для каждого ИмяВидаОперации Из ВидыОперацийСчетаУчета() Цикл
		СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, ИмяВидаОперации, "ВидОперации");
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияСчетовУчета(ДанныеЗаполнения) Экспорт
	
	Для каждого ИмяВидаОперации Из ВидыОперацийСчетаУчета() Цикл
		Если ДанныеЗаполнения.Свойство(ИмяВидаОперации) Тогда
			ДанныеЗаполнения[ИмяВидаОперации] = ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой[ИмяВидаОперации];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает имена видов операции, для которых применяется логика заполнения счетов.
//
// Возвращаемое значение:
//   ФиксированныйМассив.
//
Функция ВидыОперацийСчетаУчета() Экспорт
	
	ВидыОпераций = Новый Массив;
	ВидыОпераций.Добавить("ОплатаПокупателя");
	ВидыОпераций.Добавить("ВозвратПокупателю");
	
	Возврат Новый ФиксированныйМассив(ВидыОпераций);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаДокумента"
		И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Константы.ИспользоватьТабличныеФормыБанковскихДокументов.Получить() Тогда
		ВыбраннаяФорма = "ФормаДокумента";
	Иначе
		ВыбраннаяФорма = "ФормаДокументаОднострочная";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПараметрыОбъектаДляЗаполненияПатента(ДокументОбъект) Экспорт
	
	ПараметрыОбъекта = УчетПСН.НовыеПараметрыВходящегоПлатежа();
	
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, ДокументОбъект);
	
	ПараметрыОбъекта.ЗначенияОтраженияДоходов
		= ОбщегоНазначения.ВыгрузитьКолонку(ДокументОбъект.РасшифровкаПлатежа, "ПорядокОтраженияАванса", Истина);
	
	Если УчетДенежныхСредствКлиентСервер.ЕстьРозничнаяВыручка(ДокументОбъект.ВидОперации)
		И ТипЗнч(ДокументОбъект.Контрагент) = Тип("СправочникСсылка.Склады")
		И ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
		
		ТипСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Контрагент, "ТипСклада");
		ПараметрыОбъекта.ВыручкаСНТТ = (ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);
		
	КонецЕсли;
	
	Возврат ПараметрыОбъекта;
	
КонецФункции

// Заполняет реквизит "ДеятельностьНаТорговомСборе" по данным учета и данным документа.
//
Процедура УстановитьДеятельностьНаТорговомСборе(Объект) Экспорт
	
	Если Объект.ДеятельностьНаПатенте 
		Или Объект.ВидОперации <> Перечисления.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка
		Или Не УчетнаяПолитика.РаздельныйУчетТорговыйСборПриУСН(Объект.Организация, Объект.Дата) Тогда
		ВозможнаДеятельностьНаТорговомСборе = Ложь;
	Иначе
		УчетВПродажныхЦенах = (УчетнаяПолитика.СпособОценкиТоваровВРознице(Объект.Организация, Объект.Дата) = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
		РозничнаяТорговляОблагаетсяЕНВД = УчетнаяПолитика.РозничнаяТорговляОблагаетсяЕНВД(Объект.Организация, Объект.Дата);
		ТипСклада = ?(Не ЗначениеЗаполнено(Объект.Контрагент), Неопределено,
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ТипСклада"));
		СчетаДоходовРасходов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаВНТТ(
			Объект.Организация,
			Объект.Контрагент, 
			Объект.Дата,
			Новый Структура("РозничнаяТорговляОблагаетсяЕНВД", РозничнаяТорговляОблагаетсяЕНВД));
		
		НТТнаЕНВД = УчетнаяПолитика.ПлательщикЕНВД(Объект.Организация, Объект.Дата)
			И УчетВПродажныхЦенах
			И БухгалтерскийУчетПовтИсп.СчетОтноситсяКДеятельностиЕНВД(СчетаДоходовРасходов.СчетДоходовОтРеализации) 
			И (ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);
		
		ВозможнаДеятельностьНаТорговомСборе = Не НТТнаЕНВД;
	КонецЕсли;
	
	Если ВозможнаДеятельностьНаТорговомСборе Тогда
		Объект.ДеятельностьНаТорговомСборе = ТорговыйСбор.ДеятельностьНаТорговомСбореПриУСНДоходы(
			Объект.Организация, Объект.Контрагент, Объект.Дата);
	ИначеЕсли Объект.ДеятельностьНаТорговомСборе Тогда
		Объект.ДеятельностьНаТорговомСборе = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает список возможных значений для расчетов при оплате: по документам, без закрывающих документов.
//
// Параметры:
//    ВидОперации - ПеречислениеСсылка.ВидыОперацийОплатаПлатежнойКартой
//
// Возвращаемое значение:
//    Список значений
//
Функция РежимыРасчетовПриОплате(ВидОперации) Экспорт
	
	СписокРезультат = Новый СписокЗначений;
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка") Тогда
		СписокРезультат.Добавить("ПоДокументам", "По отчетам о продажах");
	Иначе
		СписокРезультат.Добавить("ПоДокументам", "По актам и накладным");
	КонецЕсли;
	СписокРезультат.Добавить("БезДокументов", "Без закрывающих документов");
	
	Возврат СписокРезультат;
	
КонецФункции

#Область ПроверкаЗаполнения

Функция ПодготовитьСообщенияПроверкиЗаполненияРасшифровкаПлатежа(Объект, ФормаРасшифровкаПлатежа = Неопределено, Отказ,
	ПроверяемыеРеквизиты, ПроверятьСчетаУчета = Истина) Экспорт

	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ВидОперации           = Объект.ВидОперации;
	РасшифровкаПлатежа    = ДанныеТабличнойЧасти(Объект, ФормаРасшифровкаПлатежа);
	ЭтоПроверкаВТаблице   = ДанныеОтображаютсяВТаблицеНаФорме(Объект, ФормаРасшифровкаПлатежа);
	
	// Отключаем стандартную проверку реквизитов ТЧ РасшифровкаПлатежа,
	// выполняем ее в зависимости от того, из какой формы она вызвана.
	Для Каждого Реквизит Из ПроверяемыеРеквизиты Цикл
		Если СтрНайти(Реквизит, "РасшифровкаПлатежа") = 1 Тогда

			Если Не ПроверятьСчетаУчета Тогда
				Если СтрНайти(Реквизит, "СчетУчетаРасчетовСКонтрагентом") > 0
					Или СтрНайти(Реквизит, "СчетУчетаРасчетовПоАвансам") > 0 Тогда
					// Счета проверять будем не в этой процедуре, поэтому их не исключаем из проверяемых реквизитов.
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			МассивНепроверяемыхРеквизитов.Добавить(Реквизит);
		КонецЕсли;
	КонецЦикла;
	
	// Построчная проверка заполнения отдельных реквизитов ТЧ РасшифровкаПлатежа
	
	ЕстьРасчетыСПоставщикамиПокупателями = ОплатаПлатежнойКартойКлиентСервер.ЭтоРасчетыСКонтрагентом(ВидОперации)
		И Не Объект.БезЗакрывающихДокументов;
	
	ПрименяетсяПатент = УчетнаяПолитика.ПрименяетсяУСНПатент(Объект.Организация, Объект.Дата);
	ПрименяетсяТолькоПатент = УчетнаяПолитика.ПрименяетсяТолькоУСНПатент(Объект.Организация, Объект.Дата);
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Объект.Организация, Объект.Дата);
	УчетПоПродажнойСтоимости =
		СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
	ЕстьАвансы = УчетДенежныхСредствКлиентСервер.ЕстьАвансыПолученные(Объект.ВидОперации);
	ВестиУчетПоДоговорам = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") И Не Объект.БезЗакрывающихДокументов;
	ЭтоРасшифровкаВыручки = ОплатаПлатежнойКартойКлиентСервер.ЭтоРозничнаяВыручка(ВидОперации);
	
	СообщенияПроверки = ПроверкаЗаполненияДокументов.НовыйРезультатПроверки();
	
	ПатентАванса = Неопределено;
	
	Для Каждого СтрокаПлатежа Из РасшифровкаПлатежа Цикл
		
		Если ЭтоРасшифровкаВыручки
			И ПлательщикНДС И УчетПоПродажнойСтоимости И Не ЗначениеЗаполнено(СтрокаПлатежа.СтавкаНДС) Тогда
			Сообщение = СообщенияПроверки.Добавить();
			Сообщение.ПолноеИмяРеквизита = "РасшифровкаПлатежа.СтавкаНДС";
			Сообщение.НомерСтроки        = СтрокаПлатежа.НомерСтроки;
		КонецЕсли;
		
		// ДоговорКонтрагента
		Если Не ЭтоРасшифровкаВыручки И ВестиУчетПоДоговорам И Не ЗначениеЗаполнено(СтрокаПлатежа.ДоговорКонтрагента) Тогда
			Сообщение = СообщенияПроверки.Добавить();
			Сообщение.ПолноеИмяРеквизита = "РасшифровкаПлатежа.ДоговорКонтрагента";
			Сообщение.НомерСтроки        = СтрокаПлатежа.НомерСтроки;
		КонецЕсли;
		
		// СпособПогашенияЗадолженности И Сделка
		Если ЕстьРасчетыСПоставщикамиПокупателями Тогда
			
			Если Не ЗначениеЗаполнено(СтрокаПлатежа.СпособПогашенияЗадолженности) Тогда
				Сообщение = СообщенияПроверки.Добавить();
				Сообщение.ПолноеИмяРеквизита = "РасшифровкаПлатежа.СпособПогашенияЗадолженности";
				Сообщение.НомерСтроки        = СтрокаПлатежа.НомерСтроки;
			КонецЕсли;
			
			Если СтрокаПлатежа.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу
				И Не ЗначениеЗаполнено(СтрокаПлатежа.Сделка) Тогда
				
				Сообщение = СообщенияПроверки.Добавить();
				Сообщение.ПолноеИмяРеквизита = "РасшифровкаПлатежа.Сделка";
				Сообщение.НомерСтроки        = СтрокаПлатежа.НомерСтроки;
				
			КонецЕсли;
			
		КонецЕсли;
	
		// СуммаПлатежа
		Если Не ЗначениеЗаполнено(СтрокаПлатежа.СуммаПлатежа) Тогда
			// Проверку суммы платежа не в таблице не осуществляем,
			// т.к. в этом случае она совпадает с реквизитом шапки СуммаДокумента,
			// и будет проверяться он.
			Если ЭтоПроверкаВТаблице Тогда
				Сообщение = СообщенияПроверки.Добавить();
				Сообщение.ПолноеИмяРеквизита = "РасшифровкаПлатежа.СуммаПлатежа";
				Сообщение.НомерСтроки        = СтрокаПлатежа.НомерСтроки;
			КонецЕсли;
		КонецЕсли;
		
		// Сумма взаиморасчетов
		Если Не ЭтоРасшифровкаВыручки И Не ЗначениеЗаполнено(СтрокаПлатежа.ДоговорКонтрагента)
			И СтрокаПлатежа.СуммаПлатежа > 0
			И СтрокаПлатежа.СуммаВзаиморасчетов = 0 Тогда
			
			Сообщение = СообщенияПроверки.Добавить();
			Сообщение.ПолноеИмяРеквизита = "РасшифровкаПлатежа.СуммаВзаиморасчетов";
			Сообщение.НомерСтроки        = СтрокаПлатежа.НомерСтроки;
			
		КонецЕсли;
		
		// Допустимо отражение аванса только по одному патенту.
		Если ЕстьАвансы И ПрименяетсяПатент
			И ТипЗнч(СтрокаПлатежа.ПорядокОтраженияАванса) = Тип("СправочникСсылка.Патенты") Тогда
			
			Если Не ЗначениеЗаполнено(ПатентАванса) Тогда
				ПатентАванса = СтрокаПлатежа.ПорядокОтраженияАванса;
			КонецЕсли;
			
			Если СтрокаПлатежа.ПорядокОтраженияАванса <> ПатентАванса Тогда
				Сообщение = СообщенияПроверки.Добавить();
				Сообщение.ПолноеИмяРеквизита = "РасшифровкаПлатежа.ОтражениеАвансаПредставление";
				Сообщение.НомерСтроки        = СтрокаПлатежа.НомерСтроки;
				Сообщение.Ошибка             = НСтр("ru = 'Отражение аванса в НУ допустимо только по одному патенту'");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Счета учета в строках проверяем с помощью общего механизма для всех счетов.
	Если ПроверятьСчетаУчета И Не Объект.БезЗакрывающихДокументов Тогда
		
		ПроверяемыеРеквизитыРасшифровкаПлатежа = Новый Массив;
		ПроверяемыеРеквизитыРасшифровкаПлатежа.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		
		Если ФормаРасшифровкаПлатежа <> Неопределено Тогда
			// Общие механизмы проверки счетов учета обращаются к табличной части внутри самого объекта.
			Объект.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
		КонецЕсли;
		
		СчетаУчетаВДокументах.ПроверитьЗаполнение(Объект, Отказ, ПроверяемыеРеквизитыРасшифровкаПлатежа,, СообщенияПроверки, Ложь);
		
		Если ФормаРасшифровкаПлатежа <> Неопределено Тогда
			// Более табличная часть внутри Объекта не требуется.
			Объект.Удалить("РасшифровкаПлатежа");
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	Возврат СообщенияПроверки;

КонецФункции

Процедура СообщитьРезультатПроверки(Объект, Отказ, СообщенияПроверки, МетаданныеТабличнойЧасти, ФормаСТаблицей = Неопределено) Экспорт
	
	Если СообщенияПроверки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	// Для сохранения порядка сортировки пронумеруем строки.
	СообщенияПроверки.Колонки.Добавить("НомерППДляСортировки", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	
	НомерПП = 1;
	Для каждого СтрокаСообщения Из СообщенияПроверки Цикл
		СтрокаСообщения.НомерППДляСортировки = НомерПП;
		НомерПП = НомерПП + 1;
	КонецЦикла;
	
	СообщенияПроверки.Сортировать("НомерСтроки, НомерППДляСортировки");

	КэшСинонимовРеквизитов = Новый Соответствие;
	
	ИспользоватьТабличныеФормыБанковскихДокументов = Константы.ИспользоватьТабличныеФормыБанковскихДокументов.Получить();
	ЭтоПроверкаВТаблице = ДанныеОтображаютсяВТаблицеНаФорме(Объект, ФормаСТаблицей);
	
	Для каждого СтрокаСообщения Из СообщенияПроверки Цикл
		ИмяРеквизитаДетально = ОбщегоНазначенияБПКлиентСервер.РазложитьПолноеИмяРеквизита(СтрокаСообщения.ПолноеИмяРеквизита);
		СинонимРеквизита     = КэшСинонимовРеквизитов[ИмяРеквизитаДетально.Реквизит];
		Если СинонимРеквизита = Неопределено Тогда
			Если ИмяРеквизитаДетально.Реквизит = "ОтражениеАвансаПредставление" Тогда
				СинонимРеквизита = НСтр("ru = 'Аванс в НУ'");
				КэшСинонимовРеквизитов.Вставить(ИмяРеквизитаДетально.Реквизит, СинонимРеквизита);
			Иначе
				СинонимРеквизита = МетаданныеТабличнойЧасти.Реквизиты.Найти(ИмяРеквизитаДетально.Реквизит).Синоним;
				КэшСинонимовРеквизитов.Вставить(ИмяРеквизитаДетально.Реквизит, СинонимРеквизита);
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоПроверкаВТаблице Тогда
			Если ПустаяСтрока(СтрокаСообщения.Ошибка) Тогда
				ШаблонТекстаСообщенияКолонка = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Колонка",
					?(ЗначениеЗаполнено(СтрокаСообщения.Ошибка), "Корректность", "Заполнение"),
					"%1",
					"%2",
					МетаданныеТабличнойЧасти.Синоним,
					СтрокаСообщения.Ошибка);
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонТекстаСообщенияКолонка, СинонимРеквизита, СтрокаСообщения.НомерСтроки);
			Иначе
				ТекстСообщения = СокрЛП(СтрокаСообщения.Ошибка);
			КонецЕсли;
			
			Если ИспользоватьТабличныеФормыБанковскихДокументов Тогда
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					ИмяРеквизитаДетально.ТабличнаяЧасть,
					СтрокаСообщения.НомерСтроки,
					ИмяРеквизитаДетально.Реквизит);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, Поле, "Объект", Отказ);
			ИначеЕсли ФормаСТаблицей <> Неопределено Тогда
				// При вызове из доп. формы не указываем КлючДанных,
				// иначе при двойном щелчке по сообщению будет переход в основную форму документа.
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					ИмяРеквизитаДетально.ТабличнаяЧасть,
					СтрокаСообщения.НомерСтроки,
					ИмяРеквизитаДетально.Реквизит);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Поле, "", Отказ);
			Иначе
				// При проверке в таблице в момент вызова из основной формы документа
				// сообщение показываем возле гиперссылки.
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "НадписьСуммаДокумента",, Отказ);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(СтрокаСообщения.Ошибка) Тогда
				ШаблонТекстаСообщенияПоле = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле",
					?(ЗначениеЗаполнено(СтрокаСообщения.Ошибка), "Корректность", "Заполнение"),
					"%1",
					СтрокаСообщения.Ошибка);
				
				// Сообщения показываем возле полей ввода на основной форме,
				// связанных с первой строкой табличной части.
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаСообщенияПоле, СинонимРеквизита);
			Иначе
				ТекстСообщения = СокрЛП(СтрокаСообщения.Ошибка);
			КонецЕсли;
			
			Поле = СтрЗаменить(СтрокаСообщения.ПолноеИмяРеквизита, ".", "");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, Поле,, Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеТабличнойЧасти(Объект, ФормаРасшифровкаПлатежа)

	Если ФормаРасшифровкаПлатежа <> Неопределено Тогда
		РасшифровкаПлатежа  = ФормаРасшифровкаПлатежа.РасшифровкаПлатежа;
	Иначе
		РасшифровкаПлатежа  = Объект.РасшифровкаПлатежа;
	КонецЕсли;

	Возврат РасшифровкаПлатежа;

КонецФункции

Функция ДанныеОтображаютсяВТаблицеНаФорме(Объект, ФормаРасшифровкаПлатежа)

	РасшифровкаПлатежа = ДанныеТабличнойЧасти(Объект, ФормаРасшифровкаПлатежа);

	Если ФормаРасшифровкаПлатежа <> Неопределено Тогда
		Результат = Истина;
	Иначе
		// Если в табличной части 1 строка, то сообщение о проверках ее полей
		// выводятся как для полей ввода на основной форме документа.
		Результат = Константы.ИспользоватьТабличныеФормыБанковскихДокументов.Получить()
			ИЛИ РасшифровкаПлатежа.Количество() > 1;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

// ПОДГОТОВКА ПАРАМЕТРОВ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ПодготовитьПараметрыРеквизитыДокумента(Запрос, ПараметрыПроведения, Отказ)
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.СчетКасса КАК СчетКасса,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеКт,
	|	Реквизиты.СуммаДокумента КАК СуммаДокумента,
	|	Реквизиты.Эквайер КАК Эквайер,
	|	Реквизиты.ДоговорЭквайринга КАК ДоговорЭквайринга,
	|	Реквизиты.ДоговорЭквайринга.ВидДоговора КАК ВидДоговораЭквайринга,
	|	Реквизиты.ДоговорЭквайринга.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетовДоговораЭквайринга,
	|	""Поступление"" КАК НаправлениеДвижения,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя)
	|				ИЛИ Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОплатаПлатежнойКартой.ВозвратПокупателю)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РасчетыПоРеализации,
	|	ВЫРАЗИТЬ(Реквизиты.Контрагент КАК Справочник.Склады).НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВалютаДокумента = &ВалютаРеглУчета
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДокументВРублях,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОплатаПлатежнойКартой.ВозвратПокупателю)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозврат,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОплатаПлатежнойКартой.ВозвратПокупателю)
	|			ТОГДА &СодержаниеВозврат
	|		ИНАЧЕ &СодержаниеОплата
	|	КОНЕЦ КАК Содержание,
	|	Реквизиты.ДеятельностьНаПатенте КАК ДеятельностьНаПатенте,
	|	Реквизиты.ДеятельностьНаТорговомСборе,
	|	&ЭтоОтложенноеПроведение КАК ЭтоОтложенноеПроведение,
	|	Реквизиты.БезЗакрывающихДокументов КАК БезЗакрывающихДокументов
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ОплатаПлатежнойКартой КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.СчетКасса КАК СчетКасса,
	|	Реквизиты.РасчетыПоРеализации КАК РасчетыПоРеализации,
	|	Реквизиты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Реквизиты.ДокументВРублях КАК ДокументВРублях,
	|	Реквизиты.Эквайер КАК Эквайер,
	|	Реквизиты.ДоговорЭквайринга КАК ДоговорЭквайринга,
	|	Реквизиты.ВидДоговораЭквайринга КАК ВидДоговораЭквайринга,
	|	Реквизиты.ВалютаВзаиморасчетовДоговораЭквайринга КАК ВалютаВзаиморасчетовДоговораЭквайринга,
	|	1 КАК КоэффициентРуб,
	|	Реквизиты.Содержание КАК Содержание,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОплатаПлатежнойКартой.ВозвратПокупателю)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозврат,
	|	Реквизиты.ДеятельностьНаПатенте КАК ДеятельностьНаПатенте,
	|	Реквизиты.ДеятельностьНаТорговомСборе,
	|	Реквизиты.ЭтоОтложенноеПроведение КАК ЭтоОтложенноеПроведение,
	|	Реквизиты.БезЗакрывающихДокументов КАК БезЗакрывающихДокументов
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	ТаблицаРеквизиты = Запрос.Выполнить().Выгрузить();
	Реквизиты        = ТаблицаРеквизиты[0];
	
	// Коэффициент пересчета сумм из валюты документа в рубли
	Если Реквизиты.ДокументВРублях Тогда
		КоэффициентРуб = 1;
	Иначе
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Реквизиты.ВалютаДокумента, Реквизиты.Дата);
		
		Если СтруктураКурсаДокумента.Кратность = 0 Тогда
			Отказ           = Истина;	
			ШаблонСообщения = НСтр("ru = 'Документ %1 не может быть проведен.
				|Не задана кратность валюты %2 на дату %3'");
			ТекстСообщения  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, Реквизиты.Ссылка, Реквизиты.ВалютаДокумента, Формат(Реквизиты.Дата, "ДФ=dd.MM.yy"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ПараметрыПроведения.ДокументСсылка);
			ПараметрыПроведения.Вставить("ТаблицаРеквизиты", ТаблицаРеквизиты);
			
			Возврат;
		КонецЕсли;
		
		КоэффициентРуб           = СтруктураКурсаДокумента.Курс / СтруктураКурсаДокумента.Кратность;
		Реквизиты.КоэффициентРуб = КоэффициентРуб;
	КонецЕсли;
	
	ПараметрыПроведения.Вставить("ТаблицаРеквизиты", ТаблицаРеквизиты);
	
КонецПроцедуры

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ, ДоговорДляОтложенногоПроведения = Неопределено) Экспорт
	
	ВалютаРеглУчета     = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ЭтоОтложенноеПроведение = ЗначениеЗаполнено(ДоговорДляОтложенногоПроведения);
	
	ПараметрыПроведения = Новый Структура;
	ПараметрыПроведения.Вставить("ВалютаРеглУчета", ВалютаРеглУчета);
	ПараметрыПроведения.Вставить("ДокументСсылка",  ДокументСсылка);
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц  = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРеглУчета);
	Запрос.УстановитьПараметр("ЭтоОтложенноеПроведение", 			ЭтоОтложенноеПроведение);
	Запрос.УстановитьПараметр("ДоговорДляОтложенногоПроведения", 	ДоговорДляОтложенногоПроведения);
	Запрос.УстановитьПараметр("СодержаниеВозврат", НСтр("ru = 'Отражен возврат на платежную карту'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СодержаниеОплата", НСтр("ru = 'Отражена оплата платежной картой'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ПодготовитьПараметрыРеквизитыДокумента(Запрос, ПараметрыПроведения, Отказ);
	
	Реквизиты = ПараметрыПроведения.ТаблицаРеквизиты[0];
	Если Отказ ИЛИ НЕ УчетнаяПолитика.Существует(Реквизиты.Организация, Реквизиты.Дата, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	ПлательщикНДС                 = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация,                    Реквизиты.Дата);
	ПлательщикНДФЛ                = УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация,                   Реквизиты.Дата);
	ПрименяетсяУСН                = УчетнаяПолитика.ПрименяетсяУСН(Реквизиты.Организация,                   Реквизиты.Дата);
	ПрименяетсяУСНДоходыРасходы   = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Дата);
	СпособОценкиТоваровВРознице   = УчетнаяПолитика.СпособОценкиТоваровВРознице(Реквизиты.Организация,      Реквизиты.Дата);
	ОрганизацияПрименяетУСНПатент = УчетнаяПолитика.ПрименяетсяУСНПатент(Реквизиты.Организация,             Реквизиты.Дата);
	РаздельныйУчетУСНТорговыйСбор = УчетнаяПолитика.РаздельныйУчетТорговыйСборПриУСН(Реквизиты.Организация, Реквизиты.Дата);
	ОперацияПоПатенту  = ОрганизацияПрименяетУСНПатент И Реквизиты.ДеятельностьНаПатенте;
	
	ПараметрыПроведения.Вставить("ПлательщикНДС",   ПлательщикНДС);
	ПараметрыПроведения.Вставить("ПлательщикНДФЛ",  ПлательщикНДФЛ);
	ПараметрыПроведения.Вставить("ПрименяетсяУСН",  ПрименяетсяУСН);
	ПараметрыПроведения.Вставить("ПрименяетсяУСНДоходыРасходы",
		ПрименяетсяУСНДоходыРасходы);
	ПараметрыПроведения.Вставить("УчетПоПродажнойСтоимости",
		СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
	
	Запрос.УстановитьПараметр("ВалютаДокумента",                 Реквизиты.ВалютаДокумента);
	Запрос.УстановитьПараметр("ТорговаяТочка",                   Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("ВалютаРеглУчета",                 ВалютаРеглУчета);
	Запрос.УстановитьПараметр("ПлательщикНДС",                   ПлательщикНДС);
	Запрос.УстановитьПараметр("ОрганизацияПрименяетУСН",         УчетнаяПолитика.ПрименяетсяУСН(Реквизиты.Организация,                  Реквизиты.Дата));
	Запрос.УстановитьПараметр("ОрганизацияПрименяетУСНПатент",   ОрганизацияПрименяетУСНПатент);
	Запрос.УстановитьПараметр("РаздельныйУчетУСНТорговыйСбор",   РаздельныйУчетУСНТорговыйСбор);
	Запрос.УстановитьПараметр("ОперацияПоПатенту",               ОперацияПоПатенту);
	Запрос.УстановитьПараметр("РозничнаяТорговляОблагаетсяЕНВД", УчетнаяПолитика.РозничнаяТорговляОблагаетсяЕНВД(Реквизиты.Организация, Реквизиты.Дата));
	Запрос.УстановитьПараметр("МассивСчетовВыручкиЕНВД",         БухгалтерскийУчетПовтИсп.СчетаВыручкиЕНВД());
	Запрос.УстановитьПараметр("УчетПоПродажнойСтоимости",        СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
	Запрос.УстановитьПараметр("Содержание",                      Реквизиты.Содержание);
	
	СодержаниеКУДиР = НСтр("ru = 'Продажа в розницу в торговой точке ""%1"": себестоимость реализованных товаров включена в расходы.'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	СодержаниеКУДиР = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СодержаниеКУДиР, Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("СодержаниеКУДиР", СодержаниеКУДиР);
	
	Для каждого Колонка Из ПараметрыПроведения.ТаблицаРеквизиты.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
		+ ТекстЗапросаТаблицыДокумента(НомераТаблиц,       ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПогашениеЗадолженности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРозничнаяВыручка(НомераТаблиц,       ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРозничнаяВыручкаНДС(НомераТаблиц,    ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаКУДиР(НомераТаблиц,                  ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаОплатаСчетов(НомераТаблиц,           ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРегистрацияОтложенныхРасчетовСКонтрагентами(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРегистрацияОтложенныхРасчетовВПоследовательности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		;
	
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.Эквайер КАК Эквайер,
	|	Реквизиты.СчетКасса КАК СчетКасса,
	|	Реквизиты.ДоговорЭквайринга КАК ДоговорЭквайринга,
	|	&УчетПоПродажнойСтоимости КАК УчетПоПродажнойСтоимости,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОплатаПлатежнойКартой.ВозвратПокупателю)
	|			ТОГДА ""Выбытие""
	|		ИНАЧЕ ""Поступление""
	|	КОНЕЦ КАК НаправлениеДвижения,
	|	&Содержание КАК Содержание,
	|	ИСТИНА КАК РасчетыПоРеализации,
	|	&ОрганизацияПрименяетУСН КАК УчитыватьЗадолженностьУСН,
	|	&ОрганизацияПрименяетУСНПатент КАК УчитыватьЗадолженностьУСНПатент,
	|	&РаздельныйУчетУСНТорговыйСбор КАК РаздельныйУчетУСНТорговыйСбор,
	|	&ОперацияПоПатенту КАК ОперацияПоПатенту,
	|	ВЫБОР
	|		КОГДА &РаздельныйУчетУСНТорговыйСбор
	|			ТОГДА Реквизиты.ДеятельностьНаТорговомСборе
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДеятельностьНаТорговомСборе,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОплатаПлатежнойКартой.ВозвратПокупателю)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозврат,
	|	Реквизиты.Графа5_УСН КАК ДоходУСН,
	|	Реквизиты.СуммаДокумента КАК СуммаПлатежаВсего
	|ИЗ
	|	Документ.ОплатаПлатежнойКартой КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаТаблицыДокумента(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаРасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	&Дата КАК РеквизитыДата,
	|	&Организация КАК РеквизитыОрганизация,
	|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
	|	ТаблицаРасшифровкаПлатежа.СпособПогашенияЗадолженности КАК СпособПогашенияЗадолженности,
	|	&Контрагент КАК РеквизитыКонтрагент,
	|	ТаблицаРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.Сделка КАК Сделка,
	|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам,
	|	ТаблицаРасшифровкаПлатежа.ПорядокОтраженияАванса КАК ПорядокОтраженияАванса,
	|	ТаблицаРасшифровкаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
	|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаРасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
	|	&СчетКасса КАК РеквизитыСчетКасса,
	|	&ПодразделениеОрганизации КАК РеквизитыПодразделениеОрганизации,
	|	&Эквайер КАК Эквайер,
	|	&ДоговорЭквайринга КАК ДоговорЭквайринга,
	|	ВЫБОР
	|		КОГДА ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаРеглУчета
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РасчетыВВалюте,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА &ДокументВРублях
	|				ТОГДА ТаблицаРасшифровкаПлатежа.СуммаПлатежа
	|			ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаПлатежа * &КоэффициентРуб
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРуб,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА &ДокументВРублях
	|				ТОГДА ТаблицаРасшифровкаПлатежа.СуммаНДС
	|			ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаНДС * &КоэффициентРуб
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСРуб,
	|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ВЫРАЗИТЬ(&Содержание КАК СТРОКА(150)) КАК Содержание
	|ПОМЕСТИТЬ ТаблицаРасшифровкаПлатежа
	|ИЗ
	|	Документ.ОплатаПлатежнойКартой.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|ГДЕ
	|	ТаблицаРасшифровкаПлатежа.Ссылка = &Ссылка
	|	И (НЕ &ЭтоОтложенноеПроведение
	|			ИЛИ ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента = &ДоговорДляОтложенногоПроведения)
	|	И НЕ &БезЗакрывающихДокументов";
	
	НомераТаблиц.Вставить("ВременнаяТаблицаРасшифровкаПлатежа", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПогашениеЗадолженности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	// Процедура погашения задолженности выполняется для операций:
	// - ОплатаПокупателя
	// - ВозвратПокупателю
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	НЕОПРЕДЕЛЕНО КАК Подразделение,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыКонтрагент КАК Контрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ВидДоговора КАК ВидДоговора,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВВалюте КАК РасчетыВВалюте,
		|	ТаблицаРасшифровкаПлатежа.СпособПогашенияЗадолженности КАК СпособПогашенияЗадолженности,
		|	ТаблицаРасшифровкаПлатежа.Сделка КАК ДокументРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
		|	ТаблицаРасшифровкаПлатежа.ПорядокОтраженияАванса КАК ПорядокОтраженияАванса,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетКасса КАК КорСчет,
		|	ТаблицаРасшифровкаПлатежа.Эквайер КАК КорСубконто1,
		|	ТаблицаРасшифровкаПлатежа.ДоговорЭквайринга КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК КорПодразделение,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб,
		|	ВЫРАЗИТЬ(&Содержание КАК СТРОКА(150)) КАК Содержание
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ВозвратПокупателю Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	НЕОПРЕДЕЛЕНО КАК Подразделение,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыКонтрагент КАК Контрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ВидДоговора КАК ВидДоговора,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВВалюте КАК РасчетыВВалюте,
		|	ТаблицаРасшифровкаПлатежа.СпособПогашенияЗадолженности КАК СпособПогашенияЗадолженности,
		|	ТаблицаРасшифровкаПлатежа.Сделка КАК ДокументРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетАвансов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам КАК СчетРасчетов,
		|	ТаблицаРасшифровкаПлатежа.ПорядокОтраженияАванса КАК ПорядокОтраженияАванса,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетКасса КАК КорСчет,
		|	ТаблицаРасшифровкаПлатежа.Эквайер КАК КорСубконто1,
		|	ТаблицаРасшифровкаПлатежа.ДоговорЭквайринга КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК КорПодразделение,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб,
		|	ВЫРАЗИТЬ(&Содержание КАК СТРОКА(150)) КАК Содержание
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки";
	Иначе
		ПараметрыПроведения.Вставить("РасшифровкаПлатежа", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("РасшифровкаПлатежа", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаРозничнаяВыручка(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации <> Перечисления.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка Тогда
		ПараметрыПроведения.Вставить("РозничнаяВыручка", Неопределено);
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПорядокНалогообложенияТорговыхТочек.Период КАК Период,
	|	ПорядокНалогообложенияТорговыхТочек.Склад КАК ТорговаяТочка,
	|	ВЫБОР
	|		КОГДА ПорядокНалогообложенияТорговыхТочек.ОсобыйПорядокНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыручкаЕНВД)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыручкаНеЕНВД)
	|	КОНЕЦ КАК СчетДоходовОтРеализации,
	|	ВЫБОР
	|		КОГДА ПорядокНалогообложенияТорговыхТочек.ОсобыйПорядокНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажЕНВД)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД)
	|	КОНЕЦ КАК СчетРасходовОтРеализации
	|ПОМЕСТИТЬ ВременнаяТаблицаСчетаУчетаВНТТ
	|ИЗ
	|	РегистрСведений.ПорядокНалогообложенияТорговыхТочек.СрезПоследних(&Дата, Склад = &ТорговаяТочка) КАК ПорядокНалогообложенияТорговыхТочек
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
	|	ТаблицаРасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	ТаблицаРасшифровкаПлатежа.РеквизитыДата КАК Период,
	|	ТаблицаРасшифровкаПлатежа.РеквизитыОрганизация КАК Организация,
	|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК Подразделение,
	|	ТаблицаРасшифровкаПлатежа.РеквизитыКонтрагент КАК Склад,
	|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетКасса КАК СчетУчетаДенежныхСредств,
	|	ТаблицаРасшифровкаПлатежа.Эквайер КАК Эквайер,
	|	ТаблицаРасшифровкаПлатежа.ДоговорЭквайринга КАК ДоговорЭквайринга,
	|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаРасшифровкаПлатежа.СуммаПлатежа КАК СуммаВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб,
	|	ТаблицаРасшифровкаПлатежа.СуммаНДСРуб КАК СуммаНДСРуб,
	|	ВЫБОР
	|		КОГДА СчетаУчетаВНТТ.СчетДоходовОтРеализации ЕСТЬ НЕ NULL 
	|				И СчетаУчетаВНТТ.СчетДоходовОтРеализации <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ТОГДА СчетаУчетаВНТТ.СчетДоходовОтРеализации
	|		ИНАЧЕ ВЫБОР
	|				КОГДА &РозничнаяТорговляОблагаетсяЕНВД
	|					ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыручкаЕНВД)
	|				ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыручкаНеЕНВД)
	|			КОНЕЦ
	|	КОНЕЦ КАК СчетДоходов,
	|	ВЫБОР
	|		КОГДА СчетаУчетаВНТТ.СчетРасходовОтРеализации ЕСТЬ НЕ NULL 
	|				И СчетаУчетаВНТТ.СчетРасходовОтРеализации <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ТОГДА СчетаУчетаВНТТ.СчетРасходовОтРеализации
	|		ИНАЧЕ ВЫБОР
	|				КОГДА &РозничнаяТорговляОблагаетсяЕНВД
	|					ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажЕНВД)
	|				ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД)
	|			КОНЕЦ
	|	КОНЕЦ КАК СчетРасходов,
	|	&НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
	|ПОМЕСТИТЬ РозничнаяВыручка
	|ИЗ
	|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСчетаУчетаВНТТ КАК СчетаУчетаВНТТ
	|		ПО (СчетаУчетаВНТТ.ТорговаяТочка = &ТорговаяТочка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РозничнаяВыручка.НомерСтроки КАК НомерСтроки,
	|	РозничнаяВыручка.Подразделение КАК Подразделение,
	|	РозничнаяВыручка.Склад КАК Склад,
	|	РозничнаяВыручка.СчетУчетаДенежныхСредств КАК СчетУчетаДенежныхСредств,
	|	РозничнаяВыручка.Эквайер КАК Эквайер,
	|	РозничнаяВыручка.ДоговорЭквайринга КАК ДоговорЭквайринга,
	|	РозничнаяВыручка.СтавкаНДС КАК СтавкаНДС,
	|	РозничнаяВыручка.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	РозничнаяВыручка.СуммаРуб КАК СуммаРуб,
	|	РозничнаяВыручка.СуммаНДСРуб КАК СуммаНДСРуб,
	|	РозничнаяВыручка.СчетДоходов КАК СчетДоходов,
	|	РозничнаяВыручка.СчетРасходов КАК СчетРасходов,
	|	РозничнаяВыручка.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
	|ИЗ
	|	РозничнаяВыручка КАК РозничнаяВыручка
	|
	|УПОРЯДОЧИТЬ ПО
	|	РозничнаяВыручка.НомерСтроки";
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСчетаУчетаВНТТ", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРозничнаяВыручка", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("РозничнаяВыручка", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаРозничнаяВыручкаНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации <> Перечисления.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка
		ИЛИ НЕ ПараметрыПроведения.ПлательщикНДС Тогда
		ПараметрыПроведения.Вставить("РозничнаяВыручкаНДС", Неопределено);
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДС) КАК СчетУчетаНДС,
	|	СУММА(ТаблицаДокумента.СуммаРуб - ТаблицаДокумента.СуммаНДСРуб) КАК СуммаБезНДС,
	|	СУММА(ТаблицаДокумента.СуммаНДСРуб) КАК НДС,
	|	&Содержание КАК Содержание,
	|	ТаблицаДокумента.НоменклатурнаяГруппа КАК Субконто,
	|	ТаблицаДокумента.СчетДоходов КАК СчетДоходов,
	|	ТаблицаДокумента.Период КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Подразделение КАК Подразделение,
	|	ТаблицаДокумента.Ссылка КАК ДокументОснование
	|ИЗ
	|	РозничнаяВыручка КАК ТаблицаДокумента
	|ГДЕ
	|	(НЕ ТаблицаДокумента.СчетДоходов В (&МассивСчетовВыручкиЕНВД)
	|			ИЛИ ТаблицаДокумента.СуммаНДСРуб <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Подразделение,
	|	ТаблицаДокумента.СтавкаНДС,
	|	ТаблицаДокумента.СчетДоходов,
	|	ТаблицаДокумента.НоменклатурнаяГруппа";
	
	НомераТаблиц.Вставить("РозничнаяВыручкаНДС", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаОплатаСчетов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя
		И НЕ Реквизиты.ЭтоОтложенноеПроведение Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату,
		|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПокупателю.ВалютаДокумента = &ВалютаРеглУчета
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаРуб
		|		ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПокупателю.ВалютаДокумента = &ВалютаРеглУчета
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаНДСРуб
		|		КОГДА СчетНаОплатуПокупателю.ВалютаДокумента = &ВалютаДокумента
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаНДС
		|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаРасшифровкаПлатежа.СуммаНДСРуб * ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов / ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК СуммаНДС,
		|	СчетНаОплатуПокупателю.ВалютаДокумента КАК Валюта
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
		|		ПО ТаблицаРасшифровкаПлатежа.СчетНаОплату = СчетНаОплатуПокупателю.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки";
	Иначе
		ПараметрыПроведения.Вставить("ОплатаСчетов", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ОплатаСчетов", НомераТаблиц.Количество());
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаКУДиР(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Не ПараметрыПроведения.ПрименяетсяУСНДоходыРасходы
		Или Не ПараметрыПроведения.УчетПоПродажнойСтоимости
		Или Реквизиты.ВидОперации <> Перечисления.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка Тогда
		
		ПараметрыПроведения.Вставить("ТаблицаКУДиР", Неопределено);
		Возврат "";
		
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОплатаПлатежнойКартой.Дата КАК Период,
	|	ОплатаПлатежнойКартой.Номер КАК Номер,
	|	ОплатаПлатежнойКартой.Ссылка КАК Регистратор,
	|	ОплатаПлатежнойКартой.Организация,
	|	0 КАК Графа4,
	|	0 КАК Графа5,
	|	0 КАК Графа6,
	|	ОплатаПлатежнойКартой.Графа7_УСН КАК Графа7,
	|	ОплатаПлатежнойКартой.НДС_УСН КАК НДС,
	|	&СодержаниеКУДиР КАК Содержание,
	|	"""" КАК НомерГТД
	|ИЗ
	|	Документ.ОплатаПлатежнойКартой КАК ОплатаПлатежнойКартой
	|ГДЕ
	|	ОплатаПлатежнойКартой.Ссылка = &Ссылка
	|	И ОплатаПлатежнойКартой.Графа7_УСН <> 0
	|	И НЕ &БезЗакрывающихДокументов";
	
	НомераТаблиц.Вставить("ТаблицаКУДиР", НомераТаблиц.Количество());
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

// ОТЛОЖЕННОЕ ПРОВЕДЕНИЕ

Функция ТекстЗапросаРегистрацияОтложенныхРасчетовСКонтрагентами(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если Реквизиты.ЭтоОтложенноеПроведение
		ИЛИ НЕ ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Реквизиты.Организация, Реквизиты.Дата) Тогда
		ПараметрыПроведения.Вставить("РасчетыСКонтрагентамиОтложенноеПроведение", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("РасчетыСКонтрагентамиОтложенноеПроведение", НомераТаблиц.Количество());

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Эквайер КАК Контрагент,
	|	&ДоговорЭквайринга КАК ДоговорКонтрагента,
	|	&ВалютаВзаиморасчетовДоговораЭквайринга КАК ВалютаВзаиморасчетов,
	|	&ВидДоговораЭквайринга КАК ВидДоговора,
	|	&Дата КАК Дата";
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаРасшифровкаПлатежа.РеквизитыКонтрагент КАК Контрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.ВидДоговора КАК ВидДоговора,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыДата КАК Дата
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа";
	КонецЕсли;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаРегистрацияОтложенныхРасчетовВПоследовательности(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если Реквизиты.ЭтоОтложенноеПроведение
		ИЛИ НЕ ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Реквизиты.Организация, Реквизиты.Дата) Тогда
		ПараметрыПроведения.Вставить("РеквизитыРегистрацияВПоследовательности", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("РеквизитыРегистрацияВПоследовательности", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&ВидОперации КАК ВидОперации
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Процедура ЗарегистрироватьОтложенныеРасчетыВПоследовательности(Объект, ПараметрыПроведения, Отказ) Экспорт

	// Для вида операции "Розничная выручка" в последовательности регистрируем
	// всегда, т.к. в дальнейшем потребуется актуальные остатки по забалансовым счетам РВ
	// при проведении отчета о розничных продажах.
	
	ОбязательноРегистрироватьВПоследовательности = Истина;
	
	Параметры = ПодготовитьПараметрыЗарегистрироватьОтложенныеРасчетыВПоследовательности(
		ПараметрыПроведения.РеквизитыРегистрацияВПоследовательности);
	
	Если Параметры.Реквизиты.Количество() > 0 Тогда

		// Если параметры проведения для регистрации в последовательности заполнены, то анализируем их, 
		// иначе безусловно регистрируем в последовательности.
		Реквизиты = Параметры.Реквизиты[0];
		
		Если Реквизиты.ВидОперации <> Перечисления.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка Тогда
			ОбязательноРегистрироватьВПоследовательности = Ложь;
		КонецЕсли;
		
	КонецЕсли;

	Если ОбязательноРегистрироватьВПоследовательности Тогда
		РаботаСПоследовательностями.ЗарегистрироватьВПоследовательности(Объект, Отказ, Ложь);
	Иначе
		РаботаСПоследовательностями.ЗарегистрироватьОтложенныеРасчетыВПоследовательности(
			Объект, Отказ, ПараметрыПроведения.РасчетыСКонтрагентамиОтложенноеПроведение);
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыЗарегистрироватьОтложенныеРасчетыВПоследовательности(ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	СписокОбязательныхКолонок = ""
	+ "ВидОперации";			// <Перечисление.ВидыОперацийОплатаПлатежнойКартой> - вид операции документа

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура ОбработкаОтложенногоПроведения(Параметры, Отказ) Экспорт
	
	ПараметрыПроведения = ПодготовитьПараметрыПроведения(
		Параметры.Регистратор,
		Отказ,
		Параметры.ДоговорКонтрагента);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	

	ТаблицаВзаиморасчеты = УчетВзаиморасчетовОтложенноеПроведение.ПодготовитьТаблицуВзаиморасчетовПогашениеЗадолженности(
		Параметры,
		ПараметрыПроведения.РасшифровкаПлатежа,
		ПараметрыПроведения.Реквизиты,
		Отказ);

	УчетВзаиморасчетовОтложенноеПроведение.СформироватьДвиженияПогашениеЗадолженности(
		Параметры,
		ТаблицаВзаиморасчеты, 
		ПараметрыПроведения.Реквизиты,
		Отказ);

	// Для УСН отложенное проведение оплаты платежной картой не поддерживается.

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "Реестр";
	КомандаПечати.Представление  = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Реестр документов ""Оплата платежной картой""'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
	
КонецПроцедуры

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Контрагент");
	
	Возврат Результат;
	
КонецФункции

#Область ПечатьЧека

Функция ТекстЗапросаПараметрыПечатиЧека(ДокументСсылка, ИменаТаблиц, СообщениеОбОшибке) Экспорт
	
	ТекстЗапроса = ТекстЗапросаРеквизитыПечатиЧека(ИменаТаблиц);
	
	ПараметрыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "ДокументОснование, ВидОперации");
	
	Если ПараметрыДокумента.ВидОперации <> Перечисления.ВидыОперацийОплатаПлатежнойКартой.ВозвратПокупателю Тогда
		// Чек на предоплату по счету
		ТекстЗапроса = ТекстЗапроса 
			+ТекстЗапросаДанныеРасшифровкаПлатежа(ИменаТаблиц)
			+ Документы.РеализацияТоваровУслуг.ТекстЗапросаРеализацииПоСчету(ИменаТаблиц)
			+ Документы.СчетНаОплатуПокупателю.ТекстЗапросаДанныеДляПечатиЧека(ИменаТаблиц)
			+ Документы.РеализацияТоваровУслуг.ТекстЗапросаДанныеДляПечатиЧека(ИменаТаблиц);
	ИначеЕсли ТипЗнч(ПараметрыДокумента.ДокументОснование) = Тип("ДокументСсылка.ОплатаПлатежнойКартой") Тогда
		// Чек на возврат предоплаты по счету
		ТекстЗапроса = ТекстЗапроса
			+ Документы.РеализацияТоваровУслуг.ТекстЗапросаРеализацииПоСчету(ИменаТаблиц)
			+ ТекстЗапросаДанныеРасшифровкаПлатежаВозвратПоСчету(ИменаТаблиц) 
			+ Документы.СчетНаОплатуПокупателю.ТекстЗапросаДанныеДляПечатиЧека(ИменаТаблиц)
			+ Документы.РеализацияТоваровУслуг.ТекстЗапросаДанныеДляПечатиЧека(ИменаТаблиц);
	Иначе
		// Чек на возврат по документу "Возврат товаров от покупателя"
		ТекстЗапроса = ТекстЗапроса
			+ ТекстЗапросаДанныеРасшифровкаПлатежа(ИменаТаблиц) 
			+ Документы.ВозвратТоваровОтПокупателя.ТекстЗапросаДанныеДляПечатиЧека(ИменаТаблиц);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаРеквизитыПечатиЧека(ИменаТаблиц)
	ИменаТаблиц.Добавить("ВТ_ДоговорПлатежногоАгента");
	ИменаТаблиц.Добавить("ВТ_ДоговорПлатежногоАгентаСводно");
	ИменаТаблиц.Добавить("ВТ_РеквизитыШапки");
	ИменаТаблиц.Добавить("ВТ_РеализацииПоСчету");
	ИменаТаблиц.Добавить("РеквизитыПечатиЧека");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорПлатежногоАгента,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.ДоговорКонтрагента.Владелец КАК ПлатежныйАгент,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ДоговораПлатежногоАгента
	|ИЗ
	|	Документ.ОплатаПлатежнойКартой.РасшифровкаПлатежа КАК ОплатаПлатежнойКартойРасшифровкаПлатежа
	|ГДЕ
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка = &ДокументСсылка
	|	И ОплатаПлатежнойКартойРасшифровкаПлатежа.ДоговорКонтрагента.ПлатежныйАгент
	|
	|СГРУППИРОВАТЬ ПО
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.ДоговорКонтрагента,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.ДоговорКонтрагента.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДоговораПлатежногоАгента.Ссылка КАК Ссылка,
	|	МАКСИМУМ(ВТ_ДоговораПлатежногоАгента.ДоговорПлатежногоАгента) КАК ДоговорПлатежногоАгента,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ДоговораПлатежногоАгента.ДоговорПлатежногоАгента) КАК КоличествоДоговоров,
	|	ВТ_ДоговораПлатежногоАгента.ПлатежныйАгент КАК ПлатежныйАгент
	|ПОМЕСТИТЬ ВТ_ДоговораПлатежногоАгентаСводно
	|ИЗ
	|	ВТ_ДоговораПлатежногоАгента КАК ВТ_ДоговораПлатежногоАгента
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДоговораПлатежногоАгента.Ссылка,
	|	ВТ_ДоговораПлатежногоАгента.ПлатежныйАгент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОплатаПлатежнойКартой.Ссылка КАК Ссылка,
	|	ОплатаПлатежнойКартой.Организация КАК Организация,
	|	ОплатаПлатежнойКартой.ДокументОснование КАК ДокументОснование,
	|	ОплатаПлатежнойКартой.СуммаДокумента КАК СуммаДокумента,
	|	ОплатаПлатежнойКартой.Контрагент КАК Контрагент,
	|	ОплатаПлатежнойКартой.Дата КАК Дата,
	|	ОплатаПлатежнойКартой.Номер КАК Номер,
	|	ОплатаПлатежнойКартой.ВидОперации КАК ВидОперации,
	|	ОплатаПлатежнойКартой.Патент КАК Патент,
	|	ОплатаПлатежнойКартой.ВалютаДокумента КАК ВалютаДокумента,
	|	ОплатаПлатежнойКартой.СтавкаНДС КАК СтавкаНДС,
	|	ОплатаПлатежнойКартой.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОплатаПлатежнойКартой.ВозвратПокупателю) КАК ЭтоВозврат,
	|	ЕСТЬNULL(ВТ_ДоговораПлатежногоАгента.ДоговорПлатежногоАгента, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК ДоговорПлатежногоАгента,
	|	ЕСТЬNULL(ВТ_ДоговораПлатежногоАгента.КоличествоДоговоров, 0) > 1 КАК НесколькоДоговоровПлатежногоАгента,
	|	ЕСТЬNULL(ВТ_ДоговораПлатежногоАгента.ПлатежныйАгент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК ПлатежныйАгент
	|ПОМЕСТИТЬ ВТ_РеквизитыШапки
	|ИЗ
	|	Документ.ОплатаПлатежнойКартой КАК ОплатаПлатежнойКартой
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДоговораПлатежногоАгентаСводно КАК ВТ_ДоговораПлатежногоАгента
	|		ПО ОплатаПлатежнойКартой.Ссылка = ВТ_ДоговораПлатежногоАгента.Ссылка
	|ГДЕ
	|	ОплатаПлатежнойКартой.Ссылка = &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеализацияТоваровУслуг.Ссылка КАК РеализацияТоваров,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату
	|ПОМЕСТИТЬ ВТ_РеализацииПоСчету
	|ИЗ
	|	Документ.ОплатаПлатежнойКартой.РасшифровкаПлатежа КАК ОплатаПлатежнойКартойРасшифровкаПлатежа
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО ОплатаПлатежнойКартойРасшифровкаПлатежа.СчетНаОплату = РеализацияТоваровУслуг.СчетНаОплатуПокупателю
	|ГДЕ
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка = &ДокументСсылка
	|	И ЕСТЬNULL(РеализацияТоваровУслуг.Проведен, ЛОЖЬ)
	|	И ОплатаПлатежнойКартойРасшифровкаПлатежа.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуПокупателю.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РеквизитыШапки.Ссылка КАК Ссылка,
	|	ВТ_РеквизитыШапки.Организация КАК Организация,
	|	ВТ_РеквизитыШапки.СуммаДокумента КАК СуммаДокумента,
	|	ВТ_РеквизитыШапки.Контрагент КАК Контрагент,
	|	ИСТИНА КАК ВыводитьКонтрагентаВЧеке,
	|	ВТ_РеквизитыШапки.Дата КАК Дата,
	|	ВТ_РеквизитыШапки.Номер КАК Номер,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Электронно) КАК ТипОплаты,
	|	ВЫБОР ВТ_РеквизитыШапки.ВидОперации
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОплатаПлатежнойКартой.ВозвратПокупателю)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств)
	|	КОНЕЦ КАК ТипРасчета,
	|	ВТ_РеквизитыШапки.Патент КАК Патент,
	|	ВТ_РеквизитыШапки.ВалютаДокумента КАК ВалютаДокумента,
	|	ВТ_РеквизитыШапки.СтавкаНДС КАК СтавкаНДС,
	|	ВТ_РеквизитыШапки.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента,
	|	ВТ_РеквизитыШапки.НесколькоДоговоровПлатежногоАгента КАК НесколькоДоговоровПлатежногоАгента,
	|	ВТ_РеквизитыШапки.ПлатежныйАгент КАК ПлатежныйАгент,
	|	ВТ_РеквизитыШапки.ВидОперации КАК ВидОперации
	|ИЗ
	|	ВТ_РеквизитыШапки КАК ВТ_РеквизитыШапки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
КонецФункции

// Текст запроса таблиц  расшифровки платежа для печати чека 
// при возврате по документу "Оплата платежной картой" с указанным счетом покупателю.
Функция ТекстЗапросаДанныеРасшифровкаПлатежаВозвратПоСчету(ИменаТаблиц)
	
	ИменаТаблиц.Добавить("ВТ_СуммыВозвратаПоСтавкамНДС");
	ИменаТаблиц.Добавить("ВТ_РасшифровкаПлатежаРеализация");
	ИменаТаблиц.Добавить("ВТ_СуммыРеализацииПоСтавкамНДС");
	ИменаТаблиц.Добавить("ВТ_РасшифровкаПлатежа");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОплатаПлатежнойКартойВозвратРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ОплатаПлатежнойКартойВозвратРасшифровкаПлатежа.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ОплатаПлатежнойКартойВозвратРасшифровкаПлатежа.СуммаПлатежа) КАК СуммаПлатежа
	|ПОМЕСТИТЬ ВТ_СуммыВозвратаПоСтавкамНДС
	|ИЗ
	|	Документ.ОплатаПлатежнойКартой.РасшифровкаПлатежа КАК ОплатаПлатежнойКартойВозвратРасшифровкаПлатежа
	|ГДЕ
	|	ОплатаПлатежнойКартойВозвратРасшифровкаПлатежа.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОплатаПлатежнойКартойВозвратРасшифровкаПлатежа.СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОплатаПлатежнойКартойПоступлениеРасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	ОплатаПлатежнойКартойПоступлениеРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ОплатаПлатежнойКартойПоступлениеРасшифровкаПлатежа.Сделка КАК Сделка,
	|	СУММА(ОплатаПлатежнойКартойПоступлениеРасшифровкаПлатежа.СуммаПлатежа) КАК СуммаПлатежа,
	|	СУММА(ОплатаПлатежнойКартойПоступлениеРасшифровкаПлатежа.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	ОплатаПлатежнойКартойПоступлениеРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ОплатаПлатежнойКартойПоступлениеРасшифровкаПлатежа.СуммаНДС) КАК СуммаНДС,
	|	ОплатаПлатежнойКартойПоступлениеРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату
	|ПОМЕСТИТЬ ВТ_РасшифровкаПлатежаРеализация
	|ИЗ
	|	Документ.ОплатаПлатежнойКартой.РасшифровкаПлатежа КАК ОплатаПлатежнойКартойПоступлениеРасшифровкаПлатежа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОплатаПлатежнойКартой КАК ОплатаПлатежнойКартойВозврат
	|		ПО (ОплатаПлатежнойКартойВозврат.ДокументОснование = ОплатаПлатежнойКартойПоступлениеРасшифровкаПлатежа.Ссылка)
	|ГДЕ
	|	ОплатаПлатежнойКартойВозврат.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОплатаПлатежнойКартойПоступлениеРасшифровкаПлатежа.Ссылка,
	|	ОплатаПлатежнойКартойПоступлениеРасшифровкаПлатежа.ДоговорКонтрагента,
	|	ОплатаПлатежнойКартойПоступлениеРасшифровкаПлатежа.Сделка,
	|	ОплатаПлатежнойКартойПоступлениеРасшифровкаПлатежа.СтавкаНДС,
	|	ОплатаПлатежнойКартойПоступлениеРасшифровкаПлатежа.СчетНаОплату
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РасшифровкаПлатежаРеализация.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ВТ_РасшифровкаПлатежаРеализация.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ВТ_РасшифровкаПлатежаРеализация.СуммаПлатежа) КАК СуммаПлатежа
	|ПОМЕСТИТЬ ВТ_СуммыРеализацииПоСтавкамНДС
	|ИЗ
	|	ВТ_РасшифровкаПлатежаРеализация КАК ВТ_РасшифровкаПлатежаРеализация
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_РасшифровкаПлатежаРеализация.СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РасшифровкаПлатежаРеализация.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_РасшифровкаПлатежаРеализация.СуммаПлатежа КАК СуммаПлатежа,
	|	ВТ_РасшифровкаПлатежаРеализация.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ВТ_РасшифровкаПлатежаРеализация.Сделка КАК Документ.РеализацияТоваровУслуг)) <> ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)
	|			ТОГДА ВТ_РасшифровкаПлатежаРеализация.Сделка
	|		ИНАЧЕ ВТ_РасшифровкаПлатежаРеализация.СчетНаОплату
	|	КОНЕЦ КАК Сделка,
	|	ВТ_РасшифровкаПлатежаРеализация.СтавкаНДС КАК СтавкаНДС,
	|	ВТ_РасшифровкаПлатежаРеализация.СуммаНДС КАК СуммаНДС,
	|	ВТ_РасшифровкаПлатежаРеализация.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_РасшифровкаПлатежа
	|ИЗ
	|	ВТ_РасшифровкаПлатежаРеализация КАК ВТ_РасшифровкаПлатежаРеализация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СуммыВозвратаПоСтавкамНДС КАК ВТ_СуммыВозвратаПоСтавкамНДС
	|		ПО ВТ_РасшифровкаПлатежаРеализация.СтавкаНДС = ВТ_СуммыВозвратаПоСтавкамНДС.СтавкаНДС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СуммыРеализацииПоСтавкамНДС КАК ВТ_СуммыРеализацииПоСтавкамНДС
	|		ПО ВТ_РасшифровкаПлатежаРеализация.СтавкаНДС = ВТ_СуммыРеализацииПоСтавкамНДС.СтавкаНДС
	|ГДЕ // Делаем возврат по номенклатуре только в случае если сумма реализации и сумма возврата по номенклатуре совпадает с учетом сумм НДС
	|	ВТ_СуммыВозвратаПоСтавкамНДС.СуммаНДС = ВТ_СуммыРеализацииПоСтавкамНДС.СуммаНДС 
	|	И ВТ_СуммыВозвратаПоСтавкамНДС.СуммаПлатежа = ВТ_СуммыРеализацииПоСтавкамНДС.СуммаПлатежа";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
КонецФункции

// Текст запроса таблиц расшифровки платежа для печати чека 
// при оплате по документу "Счет на оплату покупателю" 
// и возврате по документу "Возврат товаров от покупателя"
Функция ТекстЗапросаДанныеРасшифровкаПлатежа(ИменаТаблиц)
	ИменаТаблиц.Добавить("ВТ_РасшифровкаПлатежа");
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.ДоговорКонтрагента,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.СтавкаНДС,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.СуммаНДС,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ОплатаПлатежнойКартойРасшифровкаПлатежа.Сделка КАК Документ.РеализацияТоваровУслуг)) <> ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)
	|			ТОГДА ОплатаПлатежнойКартойРасшифровкаПлатежа.Сделка
	|		ИНАЧЕ ОплатаПлатежнойКартойРасшифровкаПлатежа.СчетНаОплату
	|	КОНЕЦ КАК Сделка,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.СуммаПлатежа,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.СуммаВзаиморасчетов
	|ПОМЕСТИТЬ ВТ_РасшифровкаПлатежа
	|ИЗ
	|	Документ.ОплатаПлатежнойКартой.РасшифровкаПлатежа КАК ОплатаПлатежнойКартойРасшифровкаПлатежа
	|ГДЕ
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка = &ДокументСсылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
КонецФункции

Функция НаименованиеВСтрокеЧека(Реквизиты) Экспорт
	НаименованиеВСтрокеЧека = "";
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя Тогда
		СведенияОПокупателе     = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Реквизиты.Контрагент, Реквизиты.Дата);
		ПредставлениеПокупателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "НаименованиеДляПечатныхФорм");
		НаименованиеВСтрокеЧека = НСтр("ru = 'Оплата от:'") + " " + ПредставлениеПокупателя;
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ВозвратПокупателю Тогда
		СведенияОПокупателе     = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Реквизиты.Контрагент, Реквизиты.Дата);
		ПредставлениеПокупателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "НаименованиеДляПечатныхФорм");
		НаименованиеВСтрокеЧека = НСтр("ru = 'Возврат:'") + " " + ПредставлениеПокупателя;
	Иначе
		НаименованиеВСтрокеЧека = НСтр("ru = 'Оплата платежной картой'");
	КонецЕсли;
	
	Возврат НаименованиеВСтрокеЧека;
КонецФункции

#КонецОбласти 

#Область ОбработчикиОбновления

// Обработчик обновления 3.0.82.4.
// Переносит значения реквизита "УслугаНПД" из реквизитов объекта в реквизиты табличной части "РасшифровкаПлатежа".
//
Процедура ПеренестиУслугиНПДВТабличнуюЧасть(Параметры) Экспорт
	
	ПустаяУслугаНПД = Справочники.Номенклатура.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустаяУслугаНПД", ПустаяУслугаНПД);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	ОплатаПлатежнойКартой.Ссылка КАК Документ,
	|	ОплатаПлатежнойКартой.УдалитьУслугаНПД КАК УслугаНПД
	|ИЗ
	|	Документ.ОплатаПлатежнойКартой КАК ОплатаПлатежнойКартой
	|ГДЕ
	|	ОплатаПлатежнойКартой.УдалитьУслугаНПД <> &ПустаяУслугаНПД
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОплатаПлатежнойКартой.Дата УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
			
			Если ДокументОбъект.РасшифровкаПлатежа.Количество() = 0 Тогда
				СтрокаПлатежа = ДокументОбъект.РасшифровкаПлатежа.Добавить();
				СтрокаПлатежа.СуммаПлатежа = ДокументОбъект.СуммаДокумента;
			КонецЕсли;
			
			Для Каждого СтрокаПлатежа Из ДокументОбъект.РасшифровкаПлатежа Цикл
				СтрокаПлатежа.УслугаНПД = Выборка.УслугаНПД;
			КонецЦикла;
			
			ДокументОбъект.УдалитьУслугаНПД = ПустаяУслугаНПД;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось перенести услугу НПД в табличную часть в документе ""%1"" по причине:
				|%2'"), 
				Выборка.Документ,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, ,
				Выборка.Документ,
				ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано + ПроблемныхОбъектов = 0 Тогда
		
		Параметры.ОбработкаЗавершена = Истина;
		
	Иначе
		
		Параметры.ОбработкаЗавершена = Ложь;
		
		Если ОбъектовОбработано = 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедуре ОплатаПлатежнойКартой.ПеренестиУслугиНПДВТабличнуюЧасть
				|не удалось перенести услуги НПД в табличную часть в %1 документах Операция по платежной карте.'"), 
				ПроблемныхОбъектов);
			ВызватьИсключение ТекстСообщения;
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура ОплатаПлатежнойКартой.ПеренестиУслугиНПДВТабличнуюЧасть
				|обработала очередную порцию документов Операция по платежной карте: %1 элементов'"), 
				ОбъектовОбработано);
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Информация, , ,
				ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
