
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗагрузитьПараметрыВРеквизитыФормы();
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтотОбъект);
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	БанкИКассаФормы.НастроитьВыборОтраженияДоходов(ЭтотОбъект,
		ОплатаПлатежнойКартойКлиентСервер.ИменаЭлементовОтраженияДохода());
	
	ОплатаПлатежнойКартойФормы.УстановитьВидимостьСчетовУчета(ЭтотОбъект);
	
	ОплатаПлатежнойКартойФормы.ЗаполнитьДобавленныеКолонкиТаблиц(ЭтотОбъект);
	
	ОплатаПлатежнойКартойКлиентСервер.УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтотОбъект);
	ОплатаПлатежнойКартойФормы.УстановитьУсловноеОформление(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы
		И (Модифицированность ИЛИ ПеренестиВДокумент) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ ПеренестиВДокумент Тогда
		
		Отказ = Истина;
		
		Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Да);
		
	ИначеЕсли ПеренестиВДокумент Тогда
		
		Отказ = НЕ ПроверитьЗаполнение();
		
		Если Отказ Тогда
			Модифицированность = Истина;
			ПеренестиВДокумент = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ПеренестиВДокумент Тогда
		ИсходящиеПараметры = Новый Структура;
		ИсходящиеПараметры.Вставить("СвойстваПлатежа",СвойстваПлатежа);
		ИсходящиеПараметры.Вставить("СуммаДокумента", Объект.СуммаДокумента);
		ИсходящиеПараметры.Вставить("Графа5_УСН",     Объект.Графа5_УСН);
		ИсходящиеПараметры.Вставить("АдресХранилищаРасшифровкаПлатежа", АдресХранилищаРасшифровкаПлатежа);
		Модифицированность = Ложь;
		ОповеститьОВыборе(ИсходящиеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// Чтобы дважды не вызывать сервер, сразу поместим во временное хранилище 
	// таблицу РасшифровкаПлатежа.
	Если НЕ Отказ Тогда
		АдресХранилищаРасшифровкаПлатежа = ПоместитьРасшифровкаПлатежаВоВременноеХранилище();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыРасшифровкаПлатежа

&НаКлиенте
Процедура РасшифровкаПлатежаУслугаНПДПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(СтрокаПлатеж.СуммаПлатежа)
		Или Не ЗначениеЗаполнено(СтрокаПлатеж.УслугаНПД) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПлатеж.СуммаПлатежа = ЦенаУслугиНПД(СтрокаПлатеж.УслугаНПД, Организация, ТекущаяДатаДокумента);
	ОплатаПлатежнойКартойКлиент.СуммаПлатежаПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаУслугаНПДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.НоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаУслугаНПДАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "Услуги");
	
	РаботаСНоменклатуройКлиент.НоменклатураАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаУслугаНПДОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "Услуги");
	
	РаботаСНоменклатуройКлиент.НоменклатураОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаОткрытие(Элемент, СтандартнаяОбработка)
	
	ОплатаПлатежнойКартойКлиент.ДоговорКонтрагентаОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ОплатаПлатежнойКартойКлиентСервер.ИнициализироватьСвойстваПлатежа(ЭтотОбъект);
	
	Если СтрокаПлатеж.ДоговорКонтрагента = СвойстваПлатежа.ДоговорКонтрагента Тогда
		Возврат;
	КонецЕсли;
	
	РасшифровкаПлатежаДоговорКонтрагентаПриИзмененииНаСервере(СтрокаПлатеж.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСпособПогашенияЗадолженностиПриИзменении(Элемент)
	
	ОплатаПлатежнойКартойКлиент.СпособПогашенияЗадолженностиПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОплатаПлатежнойКартойКлиент.СделкаНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	ОплатаПлатежнойКартойКлиент.СуммаПлатежаПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)
	
	Строка = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если Строка <> Неопределено Тогда
		ОплатаПлатежнойКартойКлиент.СтавкаНДСПриИзменении(ЭтотОбъект, Строка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Элемент)
	
	ОплатаПлатежнойКартойКлиент.КурсВзаиморасчетовПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ОплатаПлатежнойКартойКлиент.КурсВзаиморасчетовВыборЗавершение(ЭтотОбъект, РезультатЗакрытия, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	ОплатаПлатежнойКартойКлиент.СуммаВзаиморасчетовПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаОтражениеАвансаПредставлениеПриИзменении(Элемент)
	
	ОплатаПлатежнойКартойКлиент.ОтражениеАвансаПредставлениеПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаОтражениеАвансаПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОплатаПлатежнойКартойКлиент.ОтражениеАвансаПредставлениеОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриИзменении(Элемент)
	
	ОплатаПлатежнойКартойКлиент.РасшифровкаПлатежаПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОплатаПлатежнойКартойКлиент.РасшифровкаПлатежаПриНачалеРедактирования(ЭтотОбъект, Элемент, НоваяСтрока, Копирование);
	
	// В качестве источника данных для поля на форме выступает таблица значений,
	// поэтому ведем нумерацию ее строк самостоятельно.
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
		ТекущиеДанные.НомерСтроки = РасшифровкаПлатежа.Количество();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Отказ = РасшифровкаПлатежа.Количество() = 1;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗакрытьИСохранить(Команда)
	
	Если Модифицированность Тогда
		ПеренестиВДокумент = Истина;
		Закрыть(КодВозвратаДиалога.OK);
	Иначе
		ПеренестиВДокумент = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Модифицированность = Ложь;
	ПеренестиВДокумент = Ложь;
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗагрузитьПараметрыВРеквизитыФормы()
	
	Объект = ОплатаПлатежнойКартойКлиентСервер.ИнициализироватьСтруктуруРеквизитовДокумента();
	
	Объект.Вставить("ДополнительныеСвойства", Новый Структура()); // Используется при проверке заполнения.
	ЗаполнитьЗначенияСвойств(Объект,     Параметры.ПараметрыФормы.Шапка);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры.ПараметрыФормы.Шапка);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры.ПараметрыФормы);
	
	Если ЗначениеЗаполнено(Параметры.ПараметрыФормы.АдресХранилищаРасшифровкаПлатежа) Тогда
		РасшифровкаПлатежа.Загрузить(ПолучитьИзВременногоХранилища(
			Параметры.ПараметрыФормы.АдресХранилищаРасшифровкаПлатежа));
	КонецЕсли;
	
	Ссылка = Параметры.Ключ;
	
	Если Не ЗначениеЗаполнено(РасшифровкаПлатежа) Тогда
		РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	ОплатаПлатежнойКартойФормы.ЗаполнитьДобавленныеКолонкиТаблиц(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Модифицированность = Ложь;
		ПеренестиВДокумент = Истина;
		Закрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		ПеренестиВДокумент = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьРасшифровкаПлатежаВоВременноеХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(РасшифровкаПлатежа.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзмененииНаСервере(НомерСтроки)
	
	СтрокаПлатеж = РасшифровкаПлатежа.НайтиПоИдентификатору(НомерСтроки);
	ОплатаПлатежнойКартойФормы.ДоговорКонтрагентаПриИзменении(ЭтотОбъект, СтрокаПлатеж);
	ОплатаПлатежнойКартойКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(ЭтотОбъект, Истина, СтрокаПлатеж);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	ВидимостьЭлементов = Не ОплатаПлатежнойКартойКлиентСервер.ЭтоРозничнаяВыручка(Объект.ВидОперации);
	Элементы.РасшифровкаПлатежаДоговорКонтрагента.Видимость = ВидимостьЭлементов;
	Элементы.РасшифровкаПлатежаСпособПогашенияЗадолженности.Видимость = ВидимостьЭлементов;
	Элементы.РасшифровкаПлатежаГруппаСчетаРасчетов.Видимость = ВидимостьЭлементов;
	
	ВидимостьЭлементовНПД = Форма.ПлательщикНПД;
	ЭтоВозвратПокупателю  = ОплатаПлатежнойКартойКлиентСервер.ЭтоВозвратПокупателю(Форма.ВидОперации);
	ДоступнаИнтеграция    = ЧекиНПДВызовСервера.ДоступнаИнтеграцияСПлатформойСамозанятые();
	
	Элементы.РасшифровкаПлатежаУслугаНПД.Видимость =
		ВидимостьЭлементовНПД И ДоступнаИнтеграция И Не ЭтоВозвратПокупателю;
	
КонецПроцедуры

#Область ЧекиНПД

&НаСервереБезКонтекста
Функция ЦенаУслугиНПД(УслугаНПД, Организация, Дата)
	
	Возврат ЧекиНПД.ЦенаУслугиНПД(УслугаНПД, Организация, Дата);
	
КонецФункции

#КонецОбласти

#КонецОбласти
