#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура заполняет документ по данным документа основания
Процедура ЗаполнитьДокументПоОснованию() Экспорт
	
	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.АР_ЗаключениеДоговораАренды") Тогда
		
		Организация = ДокументОснование.Организация;
		Контрагент = ДокументОснование.Контрагент;
		ДоговорКонтрагента = ДокументОснование.ДоговорКонтрагента;
		НачалоПериода = ДокументОснование.ДатаЗаключенияДоговора;
		ОкончаниеПериода = НачалоДня(ТекущаяДата());
		ВидОперации = Перечисления.АР_ВидыОперацийАктСнятияПоказанийСчетчика.ПоказаниеСчетчика;
		СпособЗаполнения = 1;
		
		ЗаполнитьСтрокиПоказания();
		
		Если Показания.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("За указанный период нет действующих договоров на тарифицированные услуги");
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.АР_АктСнятияПоказанийсчетчика") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДокументОснование,, "Дата, Номер, ДокументОснование");
		СдвинутьПериод();
		
		Показания.Загрузить(ДокументОснование.Показания.Выгрузить());
		Для Каждого СтрокаТЧ Из Показания Цикл
			СтрокаТЧ.ПоказаниеНаНачалоПериода = СтрокаТЧ.ПоказаниеНаКонецПериода;
			СтрокаТЧ.ПоказаниеНаКонецПериода = 0;
			СтрокаТЧ.ФактическоеНачало = НачалоПериода;
			СтрокаТЧ.ФактическоеОкончание = ОкончаниеПериода;
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьСтрокиПоказания(АдресВременногоХранилища =  Неопределено, Здание = Неопределено) Экспорт
	
	ДанныеПоказаний = ПолучитьДанныеПоказаний(АдресВременногоХранилища, Здание);
	
	Показания.Очистить();
	Для Каждого СтрокаТаб Из ДанныеПоказаний Цикл
		Если ТипЗнч(СтрокаТаб.Ставка) = Тип("СправочникСсылка.АР_ГрафикиИзмененияСтавокНаУслуги") Тогда
			ТаблицаПериодов = Новый ТаблицаЗначений;
			ТаблицаПериодов.Колонки.Добавить("НачалоПериода");
			ТаблицаПериодов.Колонки.Добавить("КонецПериода");
			СтрокаПериода = ТаблицаПериодов.Добавить();
			СтрокаПериода.НачалоПериода = СтрокаТаб.ФактическоеНачало;
			СтрокаПериода.КонецПериода = СтрокаТаб.ФактическоеОкончание;
			Для Каждого СтрокаГрафика Из СтрокаТаб.Ставка.ГрафикСтавок Цикл
				СтрокаПериода = ТаблицаПериодов[ТаблицаПериодов.Количество() - 1];
				Если СтрокаГрафика.Дата > СтрокаПериода.НачалоПериода И СтрокаГрафика.Дата < СтрокаПериода.КонецПериода Тогда
					СтрокаПериода.КонецПериода = СтрокаГрафика.Дата - 86400;
					СтрокаПериода = ТаблицаПериодов.Добавить();
					СтрокаПериода.НачалоПериода = СтрокаГрафика.Дата;
					СтрокаПериода.КонецПериода = СтрокаТаб.ФактическоеОкончание;
				КонецЕсли;
			КонецЦикла;
			Для Каждого СтрокаПериода Из ТаблицаПериодов Цикл
				НоваяСтрока = Показания.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаб);
				НоваяСтрока.ФактическоеНачало = СтрокаПериода.НачалоПериода;
				НоваяСтрока.ФактическоеОкончание = СтрокаПериода.КонецПериода;
				НоваяСтрока.Цена = АР_ОбщиеПроцедуры.ПолучитьСтавку(СтрокаТаб.Ставка, НоваяСтрока.ФактическоеНачало);
			КонецЦикла;
		Иначе
			НоваяСтрока = Показания.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаб);
			НоваяСтрока.Цена = АР_ОбщиеПроцедуры.ПолучитьСтавку(СтрокаТаб.Ставка, СтрокаТаб.ФактическоеНачало);
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ Здание = Неопределено Тогда
		Для Каждого СтрокаТаб Из ДанныеПоказаний Цикл
			ДнейВПолномПериоде = (КонецДня(ОкончаниеПериода)  + 1 - НачалоПериода) / 86400;
			ДнейПоДоговору = (КонецДня(СтрокаТаб.ФактическоеОкончание)  + 1 - СтрокаТаб.ФактическоеНачало) / 86400;
			СтрокаТаб.Площадь = Окр(СтрокаТаб.Площадь * ДнейПоДоговору / ДнейВПолномПериоде, 2);
		КонецЦикла;
		ЗанятаяПлощадь = Показания.Итог("Площадь");
		Если Здание.ЗначениеХарактеристики > ЗанятаяПлощадь Тогда
			НоваяСтрока = Показания.Добавить();
			НоваяСтрока.ОбъектАренды = Здание;
			НоваяСтрока.Площадь = Здание.ЗначениеХарактеристики - ЗанятаяПлощадь;
			НоваяСтрока.ФактическоеНачало = НачалоПериода;
			НоваяСтрока.ФактическоеОкончание = ОкончаниеПериода;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеПоказаний(АдресВременногоХранилища =  Неопределено, Здание = Неопределено)
	
	Если НЕ Здание = Неопределено Тогда
		СписокДоговоров = Новый СписокЗначений;
		СписокОбъектовАренды = ПолучитьСписокОбъектовПоРодителю(Здание);
	ИначеЕсли АдресВременногоХранилища =  Неопределено Тогда
		СписокДоговоров = Новый СписокЗначений;
		СписокОбъектовАренды = Новый СписокЗначений;
	Иначе
		СписокДоговоров = Новый СписокЗначений;
		СписокОбъектовАренды = Новый СписокЗначений;
		ТаблицаЗначений = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
		СписокДоговоров.ЗагрузитьЗначения(ТаблицаЗначений.ВыгрузитьКолонку("ДоговорСсылка"));
		СписокОбъектовАренды.ЗагрузитьЗначения(ТаблицаЗначений.ВыгрузитьКолонку("ОбъектАрендыСсылка"));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Ставки.Договор КАК Договор,
	|	НАЧАЛОПЕРИОДА(Ставки.Период, ДЕНЬ) КАК Период,
	|	Ставки.Услуга КАК Услуга,
	|	Ставки.ОбъектАренды КАК ОбъектАренды,
	|	Ставки.Ставка КАК Ставка,
	|	Ставки.Площадь КАК Площадь
	|ПОМЕСТИТЬ ВТСтавки
	|ИЗ
	|	РегистрСведений.АР_Ставки.СрезПоследних(
	|			КОНЕЦПЕРИОДА(&НачалоПериода, ДЕНЬ),
	|			СрокДействия >= &НачалоПериода
	|				ИЛИ СрокДействия = ДАТАВРЕМЯ(1, 1, 1)) КАК Ставки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АР_Ставки.Договор,
	|	НАЧАЛОПЕРИОДА(АР_Ставки.Период, ДЕНЬ),
	|	АР_Ставки.Услуга,
	|	АР_Ставки.ОбъектАренды,
	|	АР_Ставки.Ставка,
	|	АР_Ставки.Площадь
	|ИЗ
	|	РегистрСведений.АР_Ставки КАК АР_Ставки
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(АР_Ставки.Период, ДЕНЬ) > &НачалоПериода
	|	И НАЧАЛОПЕРИОДА(АР_Ставки.Период, ДЕНЬ) <= &КонецПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПредыдущееЗначение.Договор,
	|	ДОБАВИТЬКДАТЕ(ВложенныйЗапрос.СрокДействия, ДЕНЬ, 1),
	|	ВложенныйЗапрос.Услуга,
	|	ВложенныйЗапрос.ОбъектАренды,
	|	ПредыдущееЗначение.Ставка,
	|	ПредыдущееЗначение.Площадь
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ПредыдущееЗначение.Период) КАК Период,
	|		АР_Ставки.Договор КАК Договор,
	|		АР_Ставки.СрокДействия КАК СрокДействия,
	|		АР_Ставки.Услуга КАК Услуга,
	|		АР_Ставки.ОбъектАренды КАК ОбъектАренды
	|	ИЗ
	|		РегистрСведений.АР_Ставки КАК АР_Ставки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АР_Ставки КАК ПредыдущееЗначение
	|			ПО АР_Ставки.Услуга = ПредыдущееЗначение.Услуга
	|				И АР_Ставки.ОбъектАренды = ПредыдущееЗначение.ОбъектАренды
	|				И АР_Ставки.Договор = ПредыдущееЗначение.Договор
	|				И АР_Ставки.СрокДействия > ПредыдущееЗначение.Период
	|				И (ПредыдущееЗначение.СрокДействия = ДАТАВРЕМЯ(1, 1, 1)
	|					ИЛИ ПредыдущееЗначение.СрокДействия > АР_Ставки.СрокДействия)
	|	ГДЕ
	|		АР_Ставки.СрокДействия >= &НачалоПериода
	|		И АР_Ставки.СрокДействия < &КонецПериода
	|		И АР_Ставки.СрокДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		АР_Ставки.Договор,
	|		АР_Ставки.СрокДействия,
	|		АР_Ставки.Услуга,
	|		АР_Ставки.ОбъектАренды) КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АР_Ставки КАК ПредыдущееЗначение
	|		ПО ВложенныйЗапрос.Услуга = ПредыдущееЗначение.Услуга
	|			И ВложенныйЗапрос.ОбъектАренды = ПредыдущееЗначение.ОбъектАренды
	|			И ВложенныйЗапрос.Договор = ПредыдущееЗначение.Договор
	|			И ВложенныйЗапрос.Период = ПредыдущееЗначение.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусыОбъектовАренды.Услуга КАК Услуга,
	|	СтатусыОбъектовАренды.ОбъектАренды КАК ОбъектАренды,
	|	ВТСтавки.Ставка КАК Ставка,
	|	ВТСтавки.Площадь КАК Площадь,
	|	ВЫБОР
	|		КОГДА ВТСтавки.Период < &НачалоПериода
	|			ТОГДА ВЫБОР
	|					КОГДА СтатусыОбъектовАренды.ДатаНачалаАренды < &НачалоПериода
	|						ТОГДА &НачалоПериода
	|					ИНАЧЕ СтатусыОбъектовАренды.ДатаНачалаАренды
	|				КОНЕЦ
	|		КОГДА ВТСтавки.Период < СтатусыОбъектовАренды.ДатаНачалаАренды
	|			ТОГДА СтатусыОбъектовАренды.ДатаНачалаАренды
	|		ИНАЧЕ ВТСтавки.Период
	|	КОНЕЦ КАК ФактическоеНачало,
	|	СтатусыОбъектовАренды.ДатаНачалаАренды КАК ДатаНачалаАренды,
	|	СтатусыОбъектовАренды.ДатаОкончанияАренды КАК ДатаОкончанияАренды,
	|	СтатусыОбъектовАренды.Услуга.ВидСтавкиНДС КАК ВидСтавкиНДС,
	|	СтатусыОбъектовАренды.Договор КАК ДоговорКонтрагента,
	|	СтатусыОбъектовАренды.Договор.Владелец КАК Контрагент,
	|	ВЫБОР
	|		КОГДА &НетОтбораПоЗданию
	|			ТОГДА ЕСТЬNULL(СпискиСчетчиков.Счетчик, СтатусыОбъектовАренды.Счетчик)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.АР_Счетчики.ПустаяСсылка)
	|	КОНЕЦ КАК Счетчик,
	|	ВЫБОР
	|		КОГДА &НетОтбораПоЗданию
	|			ТОГДА ЕСТЬNULL(СпискиСчетчиков.КоэффициентОтнесенияСчетчика, СтатусыОбъектовАренды.КоэффициентОтнесенияСчетчика)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоэффициентОтнесенияСчетчика
	|ИЗ
	|	РегистрСведений.АР_СтатусыОбъектовАренды.СрезПоследних(&КонецПериода, &Фильтр) КАК СтатусыОбъектовАренды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтавки КАК ВТСтавки
	|		ПО СтатусыОбъектовАренды.Услуга = ВТСтавки.Услуга
	|			И СтатусыОбъектовАренды.ОбъектАренды = ВТСтавки.ОбъектАренды
	|			И СтатусыОбъектовАренды.Договор = ВТСтавки.Договор
	|			И (СтатусыОбъектовАренды.Статус = &ВАренде)
	|			И (СтатусыОбъектовАренды.ДатаНачалаАренды <= &КонецПериода)
	|			И (СтатусыОбъектовАренды.ДатаОкончанияАренды >= &НачалоПериода)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АР_СпискиСчетчиков.СписокСчетчиков КАК СпискиСчетчиков
	|		ПО СтатусыОбъектовАренды.Счетчик = СпискиСчетчиков.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Услуга,
	|	ОбъектАренды,
	|	ФактическоеНачало
	|ИТОГИ ПО
	|	ДоговорКонтрагента,
	|	Счетчик,
	|	Услуга,
	|	ОбъектАренды
	|";
	
	//Если СпособЗаполнения = 1 Тогда
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Фильтр", "Договор = &Договор И НЕ Услуга.АР_ПостояннаяЧастьОплаты");
	//Иначе
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Фильтр", "Договор.Организация = &Организация И Услуга = &Услуга И НЕ Услуга.АР_ПостояннаяЧастьОплаты 
	//		|И (&НетОтбора ИЛИ (Договор В (&СписокДоговоров) И ОбъектАренды В (&СписокОбъектовАренды)))
	//		|И (&НетОтбораПоЗданию ИЛИ ОбъектАренды В (&СписокОбъектовАренды))");
	//КонецЕсли;
	
	Если СпособЗаполнения = 1 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Фильтр", "Договор.Организация = &Организация и (Договор.Деятельность=&Деятельность или Договор.Деятельность=&ДеятельностьИные) И НЕ Услуга.АР_ПостояннаяЧастьОплаты");
		Запрос.УстановитьПараметр("Деятельность",  Справочники.НоменклатурныеГруппы.НайтиПоНаименованию("Деятельность полигона"));
		Запрос.УстановитьПараметр("ДеятельностьИные",  Справочники.НоменклатурныеГруппы.НайтиПоНаименованию("Деятельность полигона - иные виды отходов"));
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Фильтр", "Договор.Организация = &Организация И Договор.Факт = Истина И НЕ Услуга.АР_ПостояннаяЧастьОплаты И (&НетОтбора ИЛИ (Договор В (&СписокДоговоров) И ОбъектАренды В (&СписокОбъектовАренды)))");
	КонецЕсли;		
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", ОкончаниеПериода);
	Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Услуга",Услуга);
	Запрос.УстановитьПараметр("СписокДоговоров", СписокДоговоров);
	Запрос.УстановитьПараметр("СписокОбъектовАренды", СписокОбъектовАренды);
	Запрос.УстановитьПараметр("НетОтбора", СписокДоговоров.Количество() = 0);
	Запрос.УстановитьПараметр("НетОтбораПоЗданию", Здание = Неопределено);
	Запрос.УстановитьПараметр("ВАренде", Перечисления.АР_СтатусыОбъектовАренды.ВАренде);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ВыборкаДоговоры = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	КвЧисло15_2 = Новый КвалификаторыЧисла(15, 2);
	КвЧисло10_7 = Новый КвалификаторыЧисла(10, 7);
	КвЧисло20_7 = Новый КвалификаторыЧисла(20, 7);
	КвДаты = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
	
	ДанныеУчета = Новый ТаблицаЗначений;
	ДанныеУчета.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ДанныеУчета.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ДанныеУчета.Колонки.Добавить("Услуга", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ДанныеУчета.Колонки.Добавить("ОбъектАренды", Новый ОписаниеТипов("СправочникСсылка.АР_ОбъектыАренды"));
	ДанныеУчета.Колонки.Добавить("ФактическоеНачало", Новый ОписаниеТипов("Дата", КвДаты));
	ДанныеУчета.Колонки.Добавить("ФактическоеОкончание", Новый ОписаниеТипов("Дата", КвДаты));
	ДанныеУчета.Колонки.Добавить("Ставка", Новый ОписаниеТипов("Число, СправочникСсылка.АР_ГрафикиИзмененияСтавокНаУслуги", КвЧисло20_7));
	ДанныеУчета.Колонки.Добавить("Площадь", Новый ОписаниеТипов("Число", КвЧисло15_2));
	ДанныеУчета.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ДанныеУчета.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", КвЧисло15_2));
	ДанныеУчета.Колонки.Добавить("Счетчик", Новый ОписаниеТипов("СправочникСсылка.АР_Счетчики"));
	ДанныеУчета.Колонки.Добавить("КоэффициентОтнесенияСчетчика", Новый ОписаниеТипов("Число", КвЧисло10_7));
	
	Пока ВыборкаДоговоры.Следующий() Цикл
		ВыборкаСчетчики = ВыборкаДоговоры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСчетчики.Следующий() Цикл
			ВыборкаУслуги = ВыборкаСчетчики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаУслуги.Следующий() Цикл
				//обход по услугам
				ВыборкаОбъектов = ВыборкаУслуги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаОбъектов.Следующий() Цикл
					//обход по объектам аренды
					ВыборкаДанных = ВыборкаОбъектов.Выбрать();
					
					КоличествоПериодов = ВыборкаДанных.Количество();
					КоличествоОбработанныхПериодов = 0;
					
					Пока ВыборкаДанных.Следующий() Цикл
						//обход по периодам изменения параметров начисления арендной платы
						Если КоличествоОбработанныхПериодов>0 Тогда
							ДанныеУчета[ДанныеУчета.Количество()-1].ФактическоеОкончание = НачалоДня(ВыборкаДанных.ФактическоеНачало-1);	
						КонецЕсли;
						
						Стр = ДанныеУчета.Добавить();
						ЗаполнитьЗначенияСвойств(Стр,ВыборкаДанных);
						Стр.СтавкаНДС = АР_ОбщиеПроцедуры.ПолучитьСтавкуНДСНоменклатуры(ВыборкаДанных.Услуга, Дата);
						
						КоличествоОбработанныхПериодов = КоличествоОбработанныхПериодов+1;
						Если КоличествоОбработанныхПериодов = КоличествоПериодов Тогда
							Стр.ФактическоеОкончание = Мин(ВыборкаДанных.ДатаОкончанияАренды,ОкончаниеПериода);
						КонецЕсли;
						
					КонецЦикла;	
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// для услуг телефонной связи получим номера телефонов
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДанныеУчета", ДанныеУчета);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеУчета.ДоговорКонтрагента КАК ДоговорСвязи,
	|	ДанныеУчета.Услуга КАК УслугаСвязи,
	|	*  // прочие поля
	|ПОМЕСТИТЬ ВТ_ДанныеУчета
	|ИЗ
	|	&ДанныеУчета КАК ДанныеУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(АР_ТелефоныКонтрагентов.Ссылка, ЗНАЧЕНИЕ(Справочник.АР_ТелефоныКонтрагентов.ПустаяСсылка)) КАК НомерТелефона,
	|	*  // прочие поля
	|ИЗ
	|	ВТ_ДанныеУчета КАК ВТ_ДанныеУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АР_ТелефоныКонтрагентов КАК АР_ТелефоныКонтрагентов
	|		ПО (ВТ_ДанныеУчета.ДоговорСвязи = АР_ТелефоныКонтрагентов.Владелец
	|				И ВЫРАЗИТЬ(ВТ_ДанныеУчета.УслугаСвязи КАК Справочник.Номенклатура).АР_ТелефонИнтернет)";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура РаспределитьПоказанияСчетчиков() Экспорт
	
	// Проверим, что все счетчики различные
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаПоказаний", Показания.Выгрузить());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоказанияСчетчиков.Счетчик,
	|	ПоказанияСчетчиков.ПоказаниеНаКонецПериода - ПоказанияСчетчиков.ПоказаниеНаНачалоПериода КАК Разница,
	|	ПоказанияСчетчиков.ПоказаниеНаКонецПериода,
	|	ПоказанияСчетчиков.ПоказаниеНаНачалоПериода
	|ПОМЕСТИТЬ ВТПоказанияСчетчика
	|ИЗ
	|	&ТаблицаПоказаний КАК ПоказанияСчетчиков";
	Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(Показания.Счетчик) КАК КоличествоРазличных,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Показания.Счетчик) КАК Количество
	|ИЗ
	|	ВТПоказанияСчетчика КАК Показания";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Не Выборка.КоличествоРазличных = Выборка.Количество Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Счетчики не должны повторяться в строках табличной части");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Делаем распределение показаний
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АР_СтатусыОбъектовАрендыСрезПоследних.ОбъектАренды КАК ОбъектАренды,
	|	АР_СтатусыОбъектовАрендыСрезПоследних.Договор КАК Договор,
	|	АР_СтатусыОбъектовАрендыСрезПоследних.ЗаключениеДоговора КАК ЗаключениеДоговора,
	|	АР_СтатусыОбъектовАрендыСрезПоследних.ДатаНачалаАренды КАК ДатаНачалаАренды,
	|	АР_СтатусыОбъектовАрендыСрезПоследних.ДатаОкончанияАренды КАК ДатаОкончанияАренды,
	|	АР_СтатусыОбъектовАрендыСрезПоследних.Услуга КАК Услуга,
	|	ЕСТЬNULL(АР_СпискиСчетчиковСписокСчетчиков.Счетчик, АР_СтатусыОбъектовАрендыСрезПоследних.Счетчик) КАК Счетчик,
	|	ЕСТЬNULL(АР_СпискиСчетчиковСписокСчетчиков.КоэффициентОтнесенияСчетчика, АР_СтатусыОбъектовАрендыСрезПоследних.КоэффициентОтнесенияСчетчика) КАК КоэффициентОтнесенияСчетчика,
	|	АР_СтатусыОбъектовАрендыСрезПоследних.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТАктуальныеПериодыАренды
	|ИЗ
	|	РегистрСведений.АР_СтатусыОбъектовАренды.СрезПоследних(&КонецПериода, Услуга = &Услуга) КАК АР_СтатусыОбъектовАрендыСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АР_СпискиСчетчиков.СписокСчетчиков КАК АР_СпискиСчетчиковСписокСчетчиков
	|		ПО АР_СтатусыОбъектовАрендыСрезПоследних.Счетчик = АР_СпискиСчетчиковСписокСчетчиков.Ссылка
	|ГДЕ
	|	(АР_СтатусыОбъектовАрендыСрезПоследних.ДатаНачалаАренды МЕЖДУ &НачалоПериода И &КонецПериода
	|			ИЛИ АР_СтатусыОбъектовАрендыСрезПоследних.ДатаОкончанияАренды МЕЖДУ &НачалоПериода И &КонецПериода
	|			ИЛИ АР_СтатусыОбъектовАрендыСрезПоследних.ДатаНачалаАренды <= &НачалоПериода
	|				И АР_СтатусыОбъектовАрендыСрезПоследних.ДатаОкончанияАренды >= &КонецПериода)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТАктуальныеПериодыАренды.ОбъектАренды КАК ОбъектАренды,
	|	ВТАктуальныеПериодыАренды.Договор КАК Договор,
	|	ВТАктуальныеПериодыАренды.ЗаключениеДоговора КАК ЗаключениеДоговора,
	|	ВТАктуальныеПериодыАренды.ДатаНачалаАренды КАК ДатаНачалаАренды,
	|	ВТАктуальныеПериодыАренды.ДатаОкончанияАренды КАК ДатаОкончанияАренды,
	|	ВТАктуальныеПериодыАренды.Услуга КАК Услуга,
	|	ВТАктуальныеПериодыАренды.Счетчик КАК Счетчик,
	|	ВТАктуальныеПериодыАренды.КоэффициентОтнесенияСчетчика КАК КоэффициентОтнесенияСчетчика,
	|	ВТАктуальныеПериодыАренды.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТПоследнийПериодАренды
	|ИЗ
	|	ВТАктуальныеПериодыАренды КАК ВТАктуальныеПериодыАренды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВТАктуальныеПериодыАренды.ОбъектАренды КАК ОбъектАренды,
	|			ВТАктуальныеПериодыАренды.ЗаключениеДоговора КАК ЗаключениеДоговора,
	|			ВТАктуальныеПериодыАренды.Услуга КАК Услуга,
	|			МАКСИМУМ(ВТАктуальныеПериодыАренды.ДатаНачалаАренды) КАК ДатаНачалаАренды
	|		ИЗ
	|			ВТАктуальныеПериодыАренды КАК ВТАктуальныеПериодыАренды
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВТАктуальныеПериодыАренды.ЗаключениеДоговора,
	|			ВТАктуальныеПериодыАренды.ОбъектАренды,
	|			ВТАктуальныеПериодыАренды.Услуга) КАК ВложенныйЗапрос
	|		ПО ВТАктуальныеПериодыАренды.ОбъектАренды = ВложенныйЗапрос.ОбъектАренды
	|			И ВТАктуальныеПериодыАренды.Услуга = ВложенныйЗапрос.Услуга
	|			И ВТАктуальныеПериодыАренды.ЗаключениеДоговора = ВложенныйЗапрос.ЗаключениеДоговора
	|			И ВТАктуальныеПериодыАренды.ДатаНачалаАренды = ВложенныйЗапрос.ДатаНачалаАренды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПоследнийПериодАренды.ОбъектАренды КАК ОбъектАренды,
	|	ВТПоследнийПериодАренды.Договор КАК ДоговорКонтрагента,
	|	ВТПоследнийПериодАренды.Услуга КАК Услуга,
	|	ВТПоказанияСчетчика.Счетчик КАК Счетчик,
	|	ВТПоследнийПериодАренды.КоэффициентОтнесенияСчетчика КАК КоэффициентОтнесенияСчетчика,
	|	АР_Ставки.Ставка КАК Ставка,
	|	АР_Ставки.Площадь КАК Площадь,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(АР_Ставки.Период, ДЕНЬ) <= &НачалоПериода
	|				И ВТПоследнийПериодАренды.ДатаНачалаАренды <= &НачалоПериода
	|			ТОГДА &НачалоПериода
	|		КОГДА НАЧАЛОПЕРИОДА(АР_Ставки.Период, ДЕНЬ) <= ВТПоследнийПериодАренды.ДатаНачалаАренды
	|				И &НачалоПериода <= ВТПоследнийПериодАренды.ДатаНачалаАренды
	|			ТОГДА ВТПоследнийПериодАренды.ДатаНачалаАренды
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(АР_Ставки.Период, ДЕНЬ)
	|	КОНЕЦ КАК ФактическоеНачало,
	|	ВЫБОР
	|		КОГДА ВТПоследнийПериодАренды.ДатаОкончанияАренды < &КонецПериода
	|			ТОГДА ВТПоследнийПериодАренды.ДатаОкончанияАренды
	|		ИНАЧЕ &КонецПериода
	|	КОНЕЦ КАК ФактическоеОкончание,
	|	ВТПоследнийПериодАренды.Договор.Владелец КАК Контрагент,
	|	ВТПоказанияСчетчика.Разница * ВЫБОР
	|		КОГДА ВТПоследнийПериодАренды.КоэффициентОтнесенияСчетчика = 0
	|			ТОГДА 1
	|		ИНАЧЕ ВТПоследнийПериодАренды.КоэффициентОтнесенияСчетчика
	|	КОНЕЦ КАК Количество,
	|	ВТПоказанияСчетчика.ПоказаниеНаНачалоПериода КАК ПоказаниеНаНачалоПериода,
	|	ВТПоказанияСчетчика.ПоказаниеНаКонецПериода КАК ПоказаниеНаКонецПериода
	|ИЗ
	|	ВТПоказанияСчетчика КАК ВТПоказанияСчетчика
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоследнийПериодАренды КАК ВТПоследнийПериодАренды
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АР_Ставки.СрезПоследних(
	|					&КонецПериода,
	|					СрокДействия >= &КонецПериода
	|						ИЛИ СрокДействия = ДАТАВРЕМЯ(1, 1, 1)) КАК АР_Ставки
	|			ПО ВТПоследнийПериодАренды.Договор = АР_Ставки.Договор
	|				И ВТПоследнийПериодАренды.ОбъектАренды = АР_Ставки.ОбъектАренды
	|				И ВТПоследнийПериодАренды.Услуга = АР_Ставки.Услуга
	|		ПО (ВТПоследнийПериодАренды.Счетчик = ВТПоказанияСчетчика.Счетчик)";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", ОкончаниеПериода);
	Запрос.УстановитьПараметр("Услуга", Услуга);
	
	Показания.Очистить();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.Ставка) = Тип("СправочникСсылка.АР_ГрафикиИзмененияСтавокНаУслуги") Тогда
			ТаблицаПериодов = Новый ТаблицаЗначений;
			ТаблицаПериодов.Колонки.Добавить("НачалоПериода");
			ТаблицаПериодов.Колонки.Добавить("КонецПериода");
			СтрокаПериода = ТаблицаПериодов.Добавить();
			СтрокаПериода.НачалоПериода = Выборка.ФактическоеНачало;
			СтрокаПериода.КонецПериода = Выборка.ФактическоеОкончание;
			Для Каждого СтрокаГрафика Из Выборка.Ставка.ГрафикСтавок Цикл
				СтрокаПериода = ТаблицаПериодов[ТаблицаПериодов.Количество() - 1];
				Если СтрокаГрафика.Дата > СтрокаПериода.НачалоПериода И СтрокаГрафика.Дата < СтрокаПериода.КонецПериода Тогда
					СтрокаПериода.КонецПериода = СтрокаГрафика.Дата - 86400;
					СтрокаПериода = ТаблицаПериодов.Добавить();
					СтрокаПериода.НачалоПериода = СтрокаГрафика.Дата;
					СтрокаПериода.КонецПериода = Выборка.ФактическоеОкончание;
				КонецЕсли;
			КонецЦикла;
			Для Каждого СтрокаПериода Из ТаблицаПериодов Цикл
				НоваяСтрока = Показания.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.ФактическоеНачало = СтрокаПериода.НачалоПериода;
				НоваяСтрока.ФактическоеОкончание = СтрокаПериода.КонецПериода;
				НоваяСтрока.Цена = АР_ОбщиеПроцедуры.ПолучитьСтавку(Выборка.Ставка, НоваяСтрока.ФактическоеНачало);
				НоваяСтрока.Сумма = НоваяСтрока.Цена * Выборка.Количество;
			КонецЦикла;
		Иначе
			НоваяСтрока = Показания.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			Если ЗначениеЗаполнено(Выборка.Ставка) Тогда
				НоваяСтрока.Цена = АР_ОбщиеПроцедуры.ПолучитьСтавку(Выборка.Ставка, Выборка.ФактическоеНачало);
				НоваяСтрока.Сумма = НоваяСтрока.Цена * Выборка.Количество;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//|ИЗ
	//|	РегистрСведений.АР_Ставки.СрезПоследних(
	//|			&Период,
	//|			Договор = &Договор
	//|				И ОбъектАренды = &ОбъектАренды
	//|				И Услуга = &Услуга
	//|				И (СрокДействия >= НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
	//|					ИЛИ СрокДействия = ДАТАВРЕМЯ(1, 1, 1))) КАК Ставки";
	//Запрос.УстановитьПараметр("Период", КонецДня(СтрокаТЧ.ФактическоеОкончание));
	//Запрос.УстановитьПараметр("Договор", Договор);
	//Запрос.УстановитьПараметр("ОбъектАренды", СтрокаТЧ.ОбъектАренды);
	//Запрос.УстановитьПараметр("Услуга", СтрокаТЧ.Услуга);
	//Если Выборка.Следующий() Тогда
	//	СпособНачисления = Выборка.СпособНачисления;
	//Иначе
КонецПроцедуры

//Процедура предназначена для сдвига периода в зависимости от размера периода и шага
Процедура СдвинутьПериод()
	
	ПериодНачисления = Константы.АР_ПериодНачисленияАренднойПлаты.Получить();
	Если Не ЗначениеЗаполнено(ПериодНачисления) Тогда
		Сообщить("Не заполнена константа ""Период начисления арендной платы!""");
		Возврат;
	КонецЕсли;
	
	ДлинаДня = 60*60*24;
	НачалоПериода = КонецДня(ОкончаниеПериода)+1;
	
	Если ПериодНачисления = Перечисления.Периодичность.День Тогда
		ОкончаниеПериода = НачалоПериода;
	ИначеЕсли ПериодНачисления = Перечисления.Периодичность.Неделя Тогда
		ОкончаниеПериода = НачалоПериода + ДлинаДня*7 - 1;
	ИначеЕсли ПериодНачисления = Перечисления.Периодичность.Месяц Тогда
		ОкончаниеПериода = ДобавитьМесяц(НачалоПериода,1) - 1;
	ИначеЕсли ПериодНачисления = Перечисления.Периодичность.Квартал Тогда
		ОкончаниеПериода = ДобавитьМесяц(НачалоПериода,3) - 1;
	ИначеЕсли ПериодНачисления = Перечисления.Периодичность.Полугодие Тогда
		ОкончаниеПериода = ДобавитьМесяц(НачалоПериода,6) - 1;
	ИначеЕсли ПериодНачисления = Перечисления.Периодичность.Год Тогда
		ОкончаниеПериода = ДобавитьМесяц(НачалоПериода,12) - 1;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧасти(Отказ)
    
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Возврат;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ОкончаниеПериода));
	Запрос.УстановитьПараметр("Услуга", Услуга);
	Запрос.УстановитьПараметр("СпособЗаполнения", СпособЗаполнения);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВТТабличнаяЧасть
	|ИЗ
	|	&ТабличнаяЧасть КАК ТабличнаяЧасть
	|ГДЕ
	|	НЕ ТабличнаяЧасть.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	И НЕ ТабличнаяЧасть.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)";
	Запрос.УстановитьПараметр("ТабличнаяЧасть", ЭтотОбъект.Показания.Выгрузить());
	Запрос.Выполнить();
	
	// Проверим, заполнены ли счетчики, если они заполнены в договоре.
	ЕстьСчетчики = ПолучитьФункциональнуюОпцию("АР_ВестиУчетТарифицируемыхУслугПоСчетчикам");
	Если ЕстьСчетчики Тогда
				
		Запрос.Текст =
		"ВЫБРАТЬ
		|	АР_АктСнятияПоказанийСчетчикаПоказания.НомерСтроки,
		|	ВЫБОР
		|		КОГДА &СпособЗаполнения = 1
		|			ТОГДА АР_АктСнятияПоказанийСчетчикаПоказания.Услуга
		|		ИНАЧЕ &Услуга
		|	КОНЕЦ КАК Услуга,
		|	АР_АктСнятияПоказанийСчетчикаПоказания.ОбъектАренды,
		|	ВЫБОР
		|		КОГДА &СпособЗаполнения = 1
		|			ТОГДА &ДоговорКонтрагента
		|		ИНАЧЕ АР_АктСнятияПоказанийСчетчикаПоказания.ДоговорКонтрагента
		|	КОНЕЦ КАК Договор,
		|	АР_АктСнятияПоказанийСчетчикаПоказания.Счетчик,
		|	АР_АктСнятияПоказанийСчетчикаПоказания.КоэффициентОтнесенияСчетчика
		|ИЗ
		|	ВТТабличнаяЧасть КАК АР_АктСнятияПоказанийСчетчикаПоказания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АР_СтатусыОбъектовАренды.СрезПоследних(
		|				&КонецПериода,
		|				ДатаНачалаАренды МЕЖДУ &НачалоПериода И &КонецПериода
		|					ИЛИ ДатаОкончанияАренды МЕЖДУ &НачалоПериода И &КонецПериода
		|					ИЛИ ДатаНачалаАренды <= &НачалоПериода
		|						И ДатаОкончанияАренды >= &КонецПериода) КАК АР_СтатусыОбъектовАрендыСрезПоследних
		|		ПО АР_АктСнятияПоказанийСчетчикаПоказания.ОбъектАренды = АР_СтатусыОбъектовАрендыСрезПоследних.ОбъектАренды
		|			И (ВЫБОР
		|				КОГДА &СпособЗаполнения = 1
		|					ТОГДА АР_АктСнятияПоказанийСчетчикаПоказания.Услуга
		|				ИНАЧЕ &Услуга
		|			КОНЕЦ = АР_СтатусыОбъектовАрендыСрезПоследних.Услуга)
		|			И (ВЫБОР
		|				КОГДА &СпособЗаполнения = 1
		|					ТОГДА &ДоговорКонтрагента
		|				ИНАЧЕ АР_АктСнятияПоказанийСчетчикаПоказания.ДоговорКонтрагента
		|			КОНЕЦ = АР_СтатусыОбъектовАрендыСрезПоследних.Договор)
		|ГДЕ
		|	(НЕ АР_СтатусыОбъектовАрендыСрезПоследних.Счетчик = ЗНАЧЕНИЕ(Справочник.АР_Счетчики.ПустаяСсылка))";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Префикс = "Показания[" + Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
			Если Не ЗначениеЗаполнено(Выборка.Счетчик) Тогда
				ТекстСообщения = НСтр("ru = 'Внимание! В строке не указан счетчик, в то время как его наличие предусмотрено договором'");
				Поле = Префикс + "Счетчик";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Сделаем проверку на то, что объект по данному договору находится в аренде
	Запрос.УстановитьПараметр("Период", КонецДня(ОкончаниеПериода));
	Запрос.УстановитьПараметр("ВАренде", Перечисления.АР_СтатусыОбъектовАренды.ВАренде);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АктСнятияПоказаний.ОбъектАренды,
	|	ВЫБОР
	|		КОГДА &СпособЗаполнения = 1
	|			ТОГДА АктСнятияПоказаний.Услуга
	|		ИНАЧЕ &Услуга
	|	КОНЕЦ КАК Услуга,
	|	АктСнятияПоказаний.НомерСтроки,
	|	ЕСТЬNULL(АР_СтатусыОбъектовАрендыСрезПоследних.Статус, ""Не установлен"") КАК Статус,
	|	ВЫБОР
	|		КОГДА &СпособЗаполнения = 1
	|			ТОГДА &ДоговорКонтрагента
	|		ИНАЧЕ АктСнятияПоказаний.ДоговорКонтрагента
	|	КОНЕЦ КАК ДоговорКонтрагента
	|ИЗ
	|	ВТТабличнаяЧасть КАК АктСнятияПоказаний
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АР_СтатусыОбъектовАренды.СрезПоследних(&Период, ) КАК АР_СтатусыОбъектовАрендыСрезПоследних
	|		ПО АктСнятияПоказаний.ОбъектАренды = АР_СтатусыОбъектовАрендыСрезПоследних.ОбъектАренды
	|			И (ВЫБОР
	|				КОГДА &СпособЗаполнения = 1
	|					ТОГДА АктСнятияПоказаний.Услуга
	|				ИНАЧЕ &Услуга
	|			КОНЕЦ = АР_СтатусыОбъектовАрендыСрезПоследних.Услуга)
	|			И (ВЫБОР
	|				КОГДА &СпособЗаполнения = 1
	|					ТОГДА &ДоговорКонтрагента
	|				ИНАЧЕ АктСнятияПоказаний.ДоговорКонтрагента
	|			КОНЕЦ = АР_СтатусыОбъектовАрендыСрезПоследних.Договор)
	|			И (АР_СтатусыОбъектовАрендыСрезПоследних.ДатаНачалаАренды <= &Период
	|				И АР_СтатусыОбъектовАрендыСрезПоследних.ДатаОкончанияАренды >= &НачалоПериода)
	|ГДЕ
	|	(НЕ ЕСТЬNULL(АР_СтатусыОбъектовАрендыСрезПоследних.Статус, ""Не установлен"") = &ВАренде)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		Префикс = "Показания[" + Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		ТекстСообщения = НСтр("ru = 'Услуга """ + Выборка.Услуга + """ по объекту аренды """ + Выборка.ОбъектАренды + """ не предусмотрена для арендатора """ + Выборка.ДоговорКонтрагента.Владелец + """ по договору """ + Выборка.ДоговорКонтрагента + """'");
		Поле = Префикс + "ОбъектАренды";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьТабЧастьНаДублиСтрок() Экспорт
	
	ОбнаруженыДубли = Ложь;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Показания", Показания.Выгрузить());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Показания.Контрагент,
	|	Показания.ДоговорКонтрагента,
	|	Показания.ОбъектАренды,
	|	Показания.НомерСтроки
	|ПОМЕСТИТЬ ВТ_Показания
	|ИЗ
	|	&Показания КАК Показания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Показания.Контрагент КАК Контрагент,
	|	Показания.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Показания.ОбъектАренды КАК ОбъектАренды,
	|	ПоказанияСтроки.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТ_Показания КАК Показания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Показания КАК ПоказанияСтроки
	|		ПО Показания.ОбъектАренды = ПоказанияСтроки.ОбъектАренды
	|			И Показания.ДоговорКонтрагента = ПоказанияСтроки.ДоговорКонтрагента
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Контрагент,
	|	ДоговорКонтрагента,
	|	ОбъектАренды";
	ВыборкаКонтрагент = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаКонтрагент.Следующий() Цикл 
		ВыборкаДоговор = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДоговор.Следующий() Цикл
			ВыборкаОбъекты = ВыборкаДоговор.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаОбъекты.Следующий() Цикл
				Выборка = ВыборкаОбъекты.Выбрать();
				МассивСтрок = Новый Массив;
				Пока Выборка.Следующий() Цикл
					МассивСтрок.Добавить(Выборка.НомерСтроки);	
				КонецЦикла;
				Если МассивСтрок.Количество() > 1 Тогда
					ОбнаруженыДубли = Истина;
					Строки = СтрСоединить(МассивСтрок, ", ");
					СтрокаНачалаСообщенияОбОшибке = "В строках " + Строки + " обнаружены дублирующиеся данные: ";
					ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + " контрагент """ + ВыборкаОбъекты.Контрагент
						+ """, договор """ + ВыборкаОбъекты.ДоговорКонтрагента + """, объект """ + ВыборкаОбъекты.ОбъектАренды + """";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ОбнаруженыДубли;
	
КонецФункции

Функция ПолучитьСписокОбъектовПоРодителю(Родитель)
	
	СписокОбъектов = Новый СписокЗначений;
	СписокОбъектов.Добавить(Родитель);
	
	Выборка = Справочники.АР_ОбъектыАренды.Выбрать(Родитель);
	Пока Выборка.Следующий() Цикл
		СписокПодчиненных = ПолучитьСписокОбъектовПоРодителю(Выборка.Ссылка);
		Для Каждого Элемент Из СписокПодчиненных Цикл
			СписокОбъектов.Добавить(Элемент.Значение);
		КонецЦикла;
	КонецЦикла;
	
	Возврат СписокОбъектов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	АР_ОбщиеПроцедуры.ЗаполнитьПериодПоУмолчанию(ЭтотОбъект);
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ДокументОснование = ДанныеЗаполнения;
		ЗаполнитьДокументПоОснованию();
	КонецЕсли;

	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ЭтотОбъект);
	
	//// Очистим контрагентов и договоры в ТЧ либо в шапке в зависимости от способа заполнения
	//Если СпособЗаполнения = 1 Тогда
	//	Для Каждого СтрокаТЧ Из Показания Цикл
	//		СтрокаТЧ.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	//		СтрокаТЧ.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	//	КонецЦикла;
	//Иначе 
	//	Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	//	ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	//КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Исключаем из проверки реквизиты, заполнение которых стало необязательным:
	
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	МассивНепроверяемыхРеквизитов.Добавить("Услуга");
	МассивНепроверяемыхРеквизитов.Добавить("Показания.Услуга");
	МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
	МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
	МассивНепроверяемыхРеквизитов.Добавить("Показания.НомерТелефона");
	МассивНепроверяемыхРеквизитов.Добавить("Показания.Контрагент");
	МассивНепроверяемыхРеквизитов.Добавить("Показания.ДоговорКонтрагента");
	
	//Если СпособЗаполнения = 1 Тогда
	//	МассивНепроверяемыхРеквизитов.Добавить("Услуга");
	//Иначе
	//	МассивНепроверяемыхРеквизитов.Добавить("Показания.Услуга");
	//КонецЕсли;
	//
	//Если СпособЗаполнения = 1 Тогда
	//	//Если НЕ ЗначениеЗаполнено(Контрагент) И НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
	//	//	МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
	//	//	МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
	//	//КонецЕсли;
	//Иначе
	//	МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
	//	МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
	//	Если ВидОперации = Перечисления.АР_ВидыОперацийАктСнятияПоказанийСчетчика.ПоказаниеСчетчика
	//		И (СпособРасчета = Перечисления.АР_СпособыРасчетаУслуг.СуммаПропорциональноПлощадиОбъектов
	//		ИЛИ СпособРасчета = Перечисления.АР_СпособыРасчетаУслуг.СуммаРавномерноПоДоговорам) Тогда
	//		МассивНепроверяемыхРеквизитов.Добавить("Показания.ПоказаниеНаКонецПериода");
	//	КонецЕсли;
	//	Для Каждого СтрокаТЧ Из Показания Цикл
	//		Префикс = "Показания[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";	
	//		Если ЗначениеЗаполнено(СтрокаТЧ.Контрагент) И НЕ ЗначениеЗаполнено(СтрокаТЧ.ДоговорКонтрагента) Тогда
	//			Поле = Префикс + "ДоговорКонтрагента";
	//			ТекстСообщения = "Не заполнена колонка ""Договор контрагента"" в строке " + Формат(СтрокаТЧ.НомерСтроки, "ЧГ=0") + " списка ""Показания""";
	//			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
	//		ИначеЕсли ЗначениеЗаполнено(СтрокаТЧ.ДоговорКонтрагента) И НЕ ЗначениеЗаполнено(СтрокаТЧ.Контрагент) Тогда	
	//			Поле = Префикс + "Контрагент";
	//			ТекстСообщения = "Не заполнена колонка ""Контрагент"" в строке " + Формат(СтрокаТЧ.НомерСтроки, "ЧГ=0") + " списка ""Показания""";
	//			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	//
	//Если НЕ ВидОперации = Перечисления.АР_ВидыОперацийАктСнятияПоказанийСчетчика.ТрафикТелефонныхНомеров Тогда
	//	МассивНепроверяемыхРеквизитов.Добавить("Показания.НомерТелефона");
	//КонецЕсли;
	//
	//// Проверим, что период заполнен корректно
	//Если ЗначениеЗаполнено(ОкончаниеПериода) Тогда
	//	Если НачалоПериода > ОкончаниеПериода Тогда
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Окончание периода превышает начало периода действия договора",, "Объект.ОкончаниеПериода");
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//// Сделаем проверку на вид услуг
	//Если СпособЗаполнения = 0 Тогда
	//	Если Услуга.АР_ТелефонИнтернет И ВидОперации = Перечисления.АР_ВидыОперацийАктСнятияПоказанийСчетчика.ПоказаниеСчетчика Тогда
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Услуга """ + Услуга + """ может использоваться только для вида операции ""Трафик телефонных номеров""", ЭтотОбъект, "Услуга", "Объект", Отказ);
	//	ИначеЕсли Не Услуга.АР_ТелефонИнтернет И ВидОперации = Перечисления.АР_ВидыОперацийАктСнятияПоказанийСчетчика.ТрафикТелефонныхНомеров Тогда 
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Услуга """ + Услуга + """ может использоваться только для вида операции ""Показания счетчика""", ЭтотОбъект, "Услуга", "Объект", Отказ);
	//	КонецЕсли;
	//Иначе
	//	Для Каждого СтрокаТЧ Из Показания Цикл
	//		Префикс = "Показания[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";	
	//		Поле = Префикс + "Услуга";
	//		Если СтрокаТЧ.Услуга.АР_ТелефонИнтернет И ВидОперации = Перечисления.АР_ВидыОперацийАктСнятияПоказанийСчетчика.ПоказаниеСчетчика Тогда
	//			ТекстСообщения = "Услуга """ + Услуга + """ может использоваться только для вида операции ""Трафик телефонных номеров""";
	//			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
	//		ИначеЕсли Не СтрокаТЧ.Услуга.АР_ТелефонИнтернет И ВидОперации = Перечисления.АР_ВидыОперацийАктСнятияПоказанийСчетчика.ТрафикТелефонныхНомеров Тогда 
	//			ТекстСообщения = "Услуга """ + Услуга + """ может использоваться только для вида операции ""Показания счетчика""";
	//			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	//
	//// Проверим, что заполнены показания, если указана сумма
	//Для Каждого СтрокаТЧ Из Показания Цикл
	//	Если СпособЗаполнения = 0
	//		И ВидОперации = Перечисления.АР_ВидыОперацийАктСнятияПоказанийСчетчика.ПоказаниеСчетчика
	//		И (СпособРасчета = Перечисления.АР_СпособыРасчетаУслуг.СуммаПропорциональноПлощадиОбъектов
	//		ИЛИ СпособРасчета = Перечисления.АР_СпособыРасчетаУслуг.СуммаРавномерноПоДоговорам) Тогда
	//		Количество = 1;
	//	Иначе
	//		Количество = (СтрокаТЧ.ПоказаниеНаКонецПериода - СтрокаТЧ.ПоказаниеНаНачалоПериода) * ?(ЗначениеЗаполнено(СтрокаТЧ.КоэффициентОтнесенияСчетчика), СтрокаТЧ.КоэффициентОтнесенияСчетчика, 1);
	//	КонецЕсли;
	//	Если Не ЗначениеЗаполнено(Количество) И ЗначениеЗаполнено(СтрокаТЧ.Сумма) Тогда
	//		Префикс = "Показания[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";	
	//		Поле = Префикс + "ПоказаниеНаКонецПериода";
	//		ТекстСообщения = "Разница показаний счетчика должна быть ненулевой, при указанной сумме";
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
	//	КонецЕсли;
	//КонецЦикла;
	//
	//ПроверитьЗаполнениеТабличнойЧасти(Отказ);
	
	// Удаляем из проверяемых реквизитов все, по которым автоматическая проверка не нужна:
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	//ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	//Если РучнаяКорректировка Тогда
	//	Возврат;
	//КонецЕсли;

	//ПараметрыПроведения = Документы.АР_АктСнятияПоказанийСчетчика.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	//Если Отказ Тогда
	//	Возврат;
	//КонецЕсли;

	//// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ

	//// ФОРМИРОВАНИЕ ДВИЖЕНИЙ                                           
	//
	//АР_ОбщиеПроцедуры.СформироватьДвиженияПоРегистру(ПараметрыПроведения.Начисления, Движения, "АР_НачисленияПоТарифицируемымУслугам", Отказ);
	//		
	//ПроведениеСервер.УстановитьЗаписьОчищаемыхНаборовЗаписей(ЭтотОбъект);
			
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

КонецПроцедуры

#КонецЕсли
