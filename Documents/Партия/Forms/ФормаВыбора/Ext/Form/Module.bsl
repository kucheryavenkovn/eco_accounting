
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	РежимыОтбораДокументов = Новый Структура;
	РежимыОтбораДокументов.Вставить("ПоРеквизитам", Перечисления.РежимОтбораДокументов.ПоРеквизитам);
	РежимыОтбораДокументов.Вставить("ПоОстаткам", Перечисления.РежимОтбораДокументов.ПоОстаткам);
	РежимыОтбораДокументов.Вставить("ПоОборотам", Перечисления.РежимОтбораДокументов.ПоОборотам);
	
	Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	НаСчетеВедетсяУчетПоСкладам      = БухгалтерскийУчет.ВедетсяУчетПоСкладам(СчетУчета);
	ИспользоватьНесколькоСкладов     = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладовБухгалтерскийУчет");
	ИспользоватьНесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийБухгалтерскийУчет");
	
	Если Параметры.Свойство("ПараметрыОбъекта") Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры.ПараметрыОбъекта);
		Если ТипЗнч(Параметры.ПараметрыОбъекта.ТипыДокументов) = Тип("Строка") Тогда
			ТипыДокументов = Вычислить(Параметры.ПараметрыОбъекта.ТипыДокументов);
		Иначе
			ТипыДокументов = Параметры.ПараметрыОбъекта.ТипыДокументов;
		КонецЕсли;
		
		// Если в списке документов нет партии, то и добавлять ее не нужно
		Элементы.СписокДобавить.Видимость = ТипыДокументов.СодержитТип(Тип("ДокументСсылка.Партия"));
	КонецЕсли;
	
	// КонПериода
	Если НЕ ЗначениеЗаполнено(КонецПериода) Тогда
		КонецПериода = КонецМесяца(ТекущаяДатаСеанса());
	КонецЕсли;

	// НачПериода
	Если НЕ ЗначениеЗаполнено(НачалоПериода) Тогда
		НачалоПериода = НачалоМесяца(КонецПериода);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РежимОтбораДокументов) Тогда
		РежимОтбораДокументов = Перечисления.РежимОтбораДокументов.ПоРеквизитам;
	КонецЕсли;
	
	Если СчетУчета = Неопределено Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТипыДокументов) тогда
		ТипыДокументов = Новый ОписаниеТипов("ДокументСсылка.Партия");
	КонецЕсли;
	
	Если ФормироватьСписокПриОткрытии Тогда
		СформироватьСервер();
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Параметры.Свойство("РежимОтбораДокументов") Тогда
		Настройки.Очистить();
	КонецЕсли;
	
	// Если в сохраненных настройках есть признак формирования
	// при открытии, то сформируем список.
	Если (Настройки["ФормироватьСписокПриОткрытии"] = Истина) 
		И НЕ ФормироватьСписокПриОткрытии Тогда
		
		СохраненныйРежимОтбораДокументов = Настройки["РежимОтбораДокументов"];
		Если ЗначениеЗаполнено(СохраненныйРежимОтбораДокументов) Тогда
			РежимОтбораДокументов = СохраненныйРежимОтбораДокументов;
		КонецЕсли;
		СформироватьСервер();
		
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Если НЕ СохранятьРежимОтбораДокументов Тогда
		Настройки.Удалить("РежимОтбораДокументов");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	ОповеститьОВыборе(НовыйОбъект);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РежимОтбораПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РежимОтбораОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаПриИзменении(Элемент)
	
	НаСчетеВедетсяУчетПоСкладам = ВедетсяУчетПоСкладам(СчетУчета);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура СписокВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		СтандартнаяОбработка = Ложь;
		Возврат; 
	КонецЕсли;

	ТекущийДокумент = ТекущиеДанные.Документ;
	Если НЕ ЗначениеЗаполнено(ТекущийДокумент) Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;

	ОповеститьОВыборе(ТекущийДокумент);

КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Дата", КонецПериода);
	ЗначенияЗаполнения.Вставить("Организация", Организация);
	
	ОткрытьФорму("Документ.Партия.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)

	Отказ = Истина;

	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат; 
	КонецЕсли;

	ТекущийДокумент = ТекущиеДанные.Документ;
	Если НЕ ЗначениеЗаполнено(ТекущийДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение( , ТекущийДокумент);

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сформировать(Команда)
	
	СформироватьСервер();
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.Организация.Видимость = Форма.ИспользоватьНесколькоОрганизаций;
	
	Если НЕ Форма.ИспользоватьНесколькоСкладов Тогда
		Элементы.Склад.Видимость = Ложь;
	ИначеЕсли Форма.НаСчетеВедетсяУчетПоСкладам Тогда
		Элементы.Склад.Доступность = Истина;
	Иначе
		Элементы.Склад.Доступность     = Форма.Склад <> Неопределено;
	КонецЕсли;
	
	Элементы.СчетУчета.Доступность = (Форма.РежимОтбораДокументов <> Форма.РежимыОтбораДокументов.ПоРеквизитам);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОграничениеСпискаДокументовПоТипу(Результат, ТипыДокументов)

	СтрокиКУдалению = Новый Массив();
	Результат.Колонки.Добавить("Сумма");
	Результат.Колонки.Добавить("Дата");
	Результат.Колонки.Добавить("Номер");
	Результат.Колонки.Добавить("ДатаВходящегоДокумента");
	Результат.Колонки.Добавить("НомерВходящегоДокумента");
	Результат.Колонки.Добавить("Проведен");
	Результат.Колонки.Добавить("ПометкаУдаления");
	Результат.Колонки.Добавить("СостояниеДокумента");
	Результат.Колонки.Добавить("ВидДокумента");
	Результат.Колонки.Добавить("ВидОперации");
	Результат.Колонки.Добавить("Валюта");
	Результат.Колонки.Добавить("Ответственный");
	
	ТаблицаТипов = Новый ТаблицаЗначений;
	ТаблицаТипов.Колонки.Добавить("ТипДокумента");
	ТаблицаТипов.Колонки.Добавить("ВидДокумента");
	ТаблицаТипов.Колонки.Добавить("НомерПараметра");
	ТаблицаТипов.Колонки.Добавить("МассивДокументов");
	ТаблицаТипов.Индексы.Добавить("ТипДокумента");
	
	НомерПараметра = 0;
	
	РеквизитыДокумента = Новый Структура;
	РеквизитыДокумента.Вставить("СуммаДокумента",  "0");
	РеквизитыДокумента.Вставить("ВидОперации",     "НЕОПРЕДЕЛЕНО");
	РеквизитыДокумента.Вставить("ВалютаДокумента", "НЕОПРЕДЕЛЕНО");
	РеквизитыДокумента.Вставить("Ответственный",   "НЕОПРЕДЕЛЕНО");
	
	ЧастиЗапроса = Новый Массив;
	
	ШаблонЗапросаПоДокумента = 
	"ВЫБРАТЬ
	|	ДокументПартии.Ссылка КАК Ссылка,
	|	ДокументПартии.Дата КАК Дата,
	|	ДокументПартии.Номер КАК Номер,
	|	ДокументПартии.Проведен КАК Проведен,
	|	ДокументПартии.ПометкаУдаления КАК ПометкаУдаления,
	|	ВЫБОР
	|		КОГДА ДокументПартии.ПометкаУдаления
	|			ТОГДА 2
	|		КОГДА ДокументПартии.Проведен
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СостояниеДокумента,
	|	&СуммаДокумента КАК Сумма,
	|	&ВидОперации КАК ВидОперации,
	|	&ВалютаДокумента КАК ВалютаДокумента,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, НЕОПРЕДЕЛЕНО) КАК ДатаВходящегоДокумента,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, НЕОПРЕДЕЛЕНО) КАК НомерВходящегоДокумента,
	|	&Ответственный КАК Ответственный
	|ИЗ
	|	Документ.Партия КАК ДокументПартии
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ДокументПартии.Ссылка = ДанныеПервичныхДокументов.Документ
	|			И ДокументПартии.Организация = ДанныеПервичныхДокументов.Организация
	|ГДЕ
	|	ДокументПартии.Ссылка В(&СписокДокументов)";

	Для каждого СтрокаВыборки Из Результат Цикл

		Если НЕ ТипыДокументов.СодержитТип(ТипЗнч(СтрокаВыборки.Документ)) ИЛИ НЕ ЗначениеЗаполнено(СтрокаВыборки.Документ) Тогда
			СтрокиКУдалению.Добавить(СтрокаВыборки);
		Иначе
			ТипДокумента  	= ТипЗнч(СтрокаВыборки.Документ);
			СтрокаТипов 	= ТаблицаТипов.Найти(ТипДокумента, "ТипДокумента");	
			Если СтрокаТипов <> Неопределено Тогда
				СтрокаТипов.МассивДокументов.Добавить(СтрокаВыборки.Документ);
			Иначе
				МД_Документа                     = Метаданные.НайтиПоТипу(ТипДокумента);
				
				НомерПараметра 					 = НомерПараметра + 1;
				
				СтрокаТипов 					 = ТаблицаТипов.Добавить();
				СтрокаТипов.ТипДокумента		 = ТипДокумента;
				СтрокаТипов.НомерПараметра		 = НомерПараметра;
				СтрокаТипов.ВидДокумента		 = МД_Документа.Представление();
				СтрокаТипов.МассивДокументов	 = Новый Массив;
				СтрокаТипов.МассивДокументов.Добавить(СтрокаВыборки.Документ);
				
				ТекстЗапросаПоДокументу = СтрЗаменить(ШаблонЗапросаПоДокумента, "Документ.Партия", "Документ."+МД_Документа.Имя);
				ТекстЗапросаПоДокументу = СтрЗаменить(ТекстЗапросаПоДокументу,  "&СписокДокументов", "&СписокДокументов" + Формат(НомерПараметра, "ЧГ="));
				
				Если ЧастиЗапроса.Количество() = 0 Тогда
					ТекстЗапросаПоДокументу = СтрЗаменить(ТекстЗапросаПоДокументу, "ВЫБРАТЬ", "ВЫБРАТЬ РАЗРЕШЕННЫЕ");
				КонецЕсли; 
				
				Для каждого РеквизитДокумента Из РеквизитыДокумента Цикл
					Если ОбщегоНазначения.ЕстьРеквизитОбъекта(РеквизитДокумента.Ключ, МД_Документа) Тогда
						ТекстЗапросаПоДокументу = СтрЗаменить(ТекстЗапросаПоДокументу, "&"+РеквизитДокумента.Ключ, "ДокументПартии."+РеквизитДокумента.Ключ);
					Иначе
						ТекстЗапросаПоДокументу = СтрЗаменить(ТекстЗапросаПоДокументу, "&"+РеквизитДокумента.Ключ, РеквизитДокумента.Значение);
					КонецЕсли; 
				КонецЦикла; 
				
				ЧастиЗапроса.Добавить(ТекстЗапросаПоДокументу);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Для Каждого СтрокаВыборки Из СтрокиКУдалению Цикл
		Результат.Удалить(СтрокаВыборки);
	КонецЦикла;
	
	Если Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС+"ОБЪЕДИНИТЬ ВСЕ"+Символы.ПС);
	
	// Установим параметры запроса 
	Для Каждого СтрокаТаблицы Из ТаблицаТипов Цикл
		Запрос.УстановитьПараметр("СписокДокументов" + Формат(СтрокаТаблицы.НомерПараметра, "ЧГ="), СтрокаТаблицы.МассивДокументов);
	КонецЦикла;
	
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	ТаблицаДокументов.Индексы.Добавить("Ссылка");
	
	Для каждого СтрокаВыборки Из Результат Цикл

		СтрокаДокумента = ТаблицаДокументов.Найти(СтрокаВыборки.Документ, "Ссылка");
		Если СтрокаДокумента <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаВыборки, СтрокаДокумента);
		КонецЕсли;

		СтрокаТипов = ТаблицаТипов.Найти(ТипЗнч(СтрокаВыборки.Документ), "ТипДокумента");
		Если СтрокаТипов <> Неопределено Тогда
			СтрокаВыборки.ВидДокумента		 = СтрокаТипов.ВидДокумента;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// Организация

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Организация");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"РежимОтбораДокументов", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.РежимОтбораДокументов.ПоРеквизитам);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Организация", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);


	// СчетУчета

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетУчета");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"РежимОтбораДокументов", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.РежимОтбораДокументов.ПоРеквизитам);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СчетУчета", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	
	// СписокОстаток

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокОстаток");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"РежимОтбораДокументов", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.РежимОтбораДокументов.ПоОстаткам);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// СписокКоличествоОстаток

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокКоличествоОстаток");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"РежимОтбораДокументов", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.РежимОтбораДокументов.ПоОстаткам);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// СписокЦена

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокЦена");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"РежимОтбораДокументов", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.РежимОтбораДокументов.ПоОстаткам);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	// СписокСумма

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокСумма");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"РежимОтбораДокументов", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.РежимОтбораДокументов.ПоОстаткам);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВедетсяУчетПоСкладам(СчетУчета)
	
	БухгалтерскийУчет.ВедетсяСуммовойУчетПоСкладам(СчетУчета);
	
КонецФункции

#Область ПолучениеДанныхСписка

&НаСервере
Процедура СформироватьСервер()
	Перем ТаблицаИсточник;
	
	СтруктураОтбора = Новый Структура;
	Если ПомеченныеНаУдаление.СкрыватьПомеченныеНаУдаление() Тогда
		СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
	КонецЕсли;
	
	Если РежимОтбораДокументов = Перечисления.РежимОтбораДокументов.ПоРеквизитам Тогда
		
		СтруктураОтбора.Вставить("НачПериода",     НачалоПериода);
		СтруктураОтбора.Вставить("КонПериода",     КонецПериода);
		СтруктураОтбора.Вставить("Организация",    Организация);
		СтруктураОтбора.Вставить("Контрагент",     Контрагент);
		СтруктураОтбора.Вставить("ТипыДокументов", ТипыДокументов);
	
		ТаблицаИсточник = ПолучитьДанныеСпискаПоРеквизитам(СтруктураОтбора);
	ИначеЕсли РежимОтбораДокументов = Перечисления.РежимОтбораДокументов.ПоОборотам Тогда
		
		СтруктураОтбора.Вставить("НачПериода",     НачалоПериода);
		СтруктураОтбора.Вставить("КонПериода",     КонецПериода);
		СтруктураОтбора.Вставить("Организация",    Организация);
		СтруктураОтбора.Вставить("Номенклатура",   Номенклатура);
		СтруктураОтбора.Вставить("Склад",          Склад);
		СтруктураОтбора.Вставить("СчетУчета",      СчетУчета);
		СтруктураОтбора.Вставить("ТипыДокументов", ТипыДокументов);
		
		ТаблицаИсточник = ПолучитьДанныеСпискаПоОборотам(СтруктураОтбора);
	ИначеЕсли РежимОтбораДокументов = Перечисления.РежимОтбораДокументов.ПоОстаткам Тогда
		
		СтруктураОтбора.Вставить("НачПериода",     НачалоПериода);
		СтруктураОтбора.Вставить("КонПериода",     КонецПериода);
		СтруктураОтбора.Вставить("Организация",    Организация);
		СтруктураОтбора.Вставить("Номенклатура",   Номенклатура);
		СтруктураОтбора.Вставить("Склад",          Склад);
		СтруктураОтбора.Вставить("СчетУчета",      СчетУчета);
		СтруктураОтбора.Вставить("ТипыДокументов", ТипыДокументов);
		
		ТаблицаИсточник = ПолучитьДанныеСпискаПоОстаткам(СтруктураОтбора);
	КонецЕсли;
	
	Список.Очистить();
	Если ТаблицаИсточник <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаИсточник, Список);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеСпискаПоРеквизитам(СтруктураОтбора)
	
	НачПериода      = СтруктураОтбора["НачПериода"];
	КонПериода      = СтруктураОтбора["КонПериода"];
	Организация     = СтруктураОтбора["Организация"];
	Контрагент      = СтруктураОтбора["Контрагент"];
	ОграничениеТипа = СтруктураОтбора["ТипыДокументов"];
	
	Запрос = Новый Запрос;

	// Определим типы документов, которые могут являться партиями и по ним по всем сформируем текст запроса
	ТипыСубконтоПартии = ОграничениеТипа.Типы();
	
	СписокУсловий = Новый Массив;
	СписокУсловий.Добавить("ДокументПартии.Дата >= &НачПериода");
	
	Если ЗначениеЗаполнено(КонПериода) Тогда
		СписокУсловий.Добавить("ДокументПартии.Дата <= &КонПериода");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		СписокУсловий.Добавить("ДокументПартии.Организация = &Организация");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		СписокУсловий.Добавить("ДокументПартии.Контрагент = &Контрагент");
	КонецЕсли;
	
	Если СтруктураОтбора.Свойство("ПометкаУдаления") Тогда
		СписокУсловий.Добавить("ДокументПартии.ПометкаУдаления = "
			+ ?(СтруктураОтбора.ПометкаУдаления, "ИСТИНА", "ЛОЖЬ"));
	КонецЕсли;
	
	РеквизитыДокумента = Новый Структура;
	РеквизитыДокумента.Вставить("СуммаДокумента",  "0");
	РеквизитыДокумента.Вставить("ВидОперации",     "НЕОПРЕДЕЛЕНО");
	РеквизитыДокумента.Вставить("ВалютаДокумента", "НЕОПРЕДЕЛЕНО");
	РеквизитыДокумента.Вставить("Ответственный",   "НЕОПРЕДЕЛЕНО");
	
	ЧастиЗапроса = Новый Массив;
	
	ШаблонЗапросаПоДокументу = 
	"ВЫБРАТЬ
	|	ДокументПартии.Ссылка КАК Документ,
	|	ДокументПартии.Дата КАК Дата,
	|	ДокументПартии.Номер КАК Номер,
	|	ДокументПартии.Проведен КАК Проведен,
	|	ДокументПартии.ПометкаУдаления КАК ПометкаУдаления,
	|	ВЫБОР
	|		КОГДА ДокументПартии.ПометкаУдаления
	|			ТОГДА 2
	|		КОГДА ДокументПартии.Проведен
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СостояниеДокумента,
	|	""&ВидДокумента"" КАК ВидДокумента,
	|	&СуммаДокумента КАК Сумма,
	|	&ВидОперации КАК ВидОперации,
	|	&ВалютаДокумента КАК Валюта,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, НЕОПРЕДЕЛЕНО) КАК ДатаВходящегоДокумента,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, НЕОПРЕДЕЛЕНО) КАК НомерВходящегоДокумента,
	|	&Ответственный КАК Ответственный
	|ИЗ
	|	Документ.Партия КАК ДокументПартии
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ДокументПартии.Ссылка = ДанныеПервичныхДокументов.Документ
	|			И ДокументПартии.Организация = ДанныеПервичныхДокументов.Организация
	|ГДЕ
	|	&Условия";
	
	ШаблонЗапросаПоДокументу = СтрЗаменить(ШаблонЗапросаПоДокументу, "&Условия", СтрСоединить(СписокУсловий, " И "));

	Для Каждого ТипДокумента Из ТипыСубконтоПартии Цикл

		МД_Документа = Метаданные.НайтиПоТипу(ТипДокумента);
		Если ЗначениеЗаполнено(Организация) 
			И МД_Документа.Реквизиты.Найти("Организация") = Неопределено Тогда
			// В документе нет поля "Организация". Отбор по документу не производим.
			Продолжить;
		КонецЕсли;
	
		Если ЗначениеЗаполнено(Контрагент) 
			И  МД_Документа.Реквизиты.Найти("Контрагент") = Неопределено Тогда
			// В документе нет поля "Контрагент".  Отбор по документу не производим.
			Продолжить;
		КонецЕсли;

		ВидДокумента = СтрЗаменить(МД_Документа.Представление(), """", """""");
		
		ТекстЗапросаПоДокументу = СтрЗаменить(ШаблонЗапросаПоДокументу, "Документ.Партия", "Документ." + МД_Документа.Имя);
		ТекстЗапросаПоДокументу = СтрЗаменить(ТекстЗапросаПоДокументу, "&ВидДокумента", ВидДокумента);
		
		Если ЧастиЗапроса.Количество() = 0 Тогда
			ТекстЗапросаПоДокументу = СтрЗаменить(ТекстЗапросаПоДокументу, "ВЫБРАТЬ", "ВЫБРАТЬ РАЗРЕШЕННЫЕ");
			ТекстЗапросаПоДокументу = СтрЗаменить(ТекстЗапросаПоДокументу, "ИЗ", "ПОМЕСТИТЬ ВТ_ТаблицаПартий"+Символы.ПС+"ИЗ");
		КонецЕсли; 
		
		Для каждого РеквизитДокумента Из РеквизитыДокумента Цикл
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта(РеквизитДокумента.Ключ, МД_Документа) Тогда
				ТекстЗапросаПоДокументу = СтрЗаменить(ТекстЗапросаПоДокументу, "&"+РеквизитДокумента.Ключ, "ДокументПартии."+РеквизитДокумента.Ключ);
			Иначе
				ТекстЗапросаПоДокументу = СтрЗаменить(ТекстЗапросаПоДокументу, "&"+РеквизитДокумента.Ключ, РеквизитДокумента.Значение);
			КонецЕсли; 
		КонецЦикла; 
		
		ЧастиЗапроса.Добавить(ТекстЗапросаПоДокументу);
	КонецЦикла;

	КонецЗапроса = 
	";
	|
	|ВЫБРАТЬ
	|	ТаблицаПартий.Документ,
	|	ТаблицаПартий.Дата,
	|	ТаблицаПартий.Номер,
	|	ТаблицаПартий.Проведен,
	|	ТаблицаПартий.ПометкаУдаления,
	|	ТаблицаПартий.СостояниеДокумента КАК СостояниеДокумента,
	|	ТаблицаПартий.ВидДокумента КАК ВидДокумента, 
	|	ТаблицаПартий.Сумма КАК Сумма,
	|	ТаблицаПартий.ВидОперации КАК ВидОперации,
	|	ТаблицаПартий.Валюта КАК Валюта,
	|	ТаблицаПартий.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	ТаблицаПартий.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ТаблицаПартий.Ответственный КАК Ответственный
	|ИЗ
	|	ВТ_ТаблицаПартий КАК ТаблицаПартий
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаПартий.Документ
	|АВТОУПОРЯДОЧИВАНИЕ";

	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС+"ОБЪЕДИНИТЬ ВСЕ"+Символы.ПС) + КонецЗапроса;
	
	Запрос.УстановитьПараметр("НачПериода",  НачалоДня(НачПериода));
	Запрос.УстановитьПараметр("КонПериода",  КонПериода);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент",  Контрагент);

	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеСпискаПоОборотам(СтруктураОтбора)
	
	НачПериода      = СтруктураОтбора["НачПериода"];
	КонПериода      = СтруктураОтбора["КонПериода"];
	Организация     = СтруктураОтбора["Организация"];
	Номенклатура    = СтруктураОтбора["Номенклатура"];
	Склад           = СтруктураОтбора["Склад"];
	СчетУчета       = СтруктураОтбора["СчетУчета"];
	ОграничениеТипа = СтруктураОтбора["ТипыДокументов"];
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачПериода",   НачалоДня(НачПериода));
	Запрос.УстановитьПараметр("КонПериода",   КонПериода);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);

	УсловиеВТекстеЗапроса = ?(НЕ ЗначениеЗаполнено(Организация), "Субконто1 = &Номенклатура", "Субконто1 = &Номенклатура И Организация = &Организация");
	
	// Если указан счет учета, то необходимо отобрать партии по счету учета
	Если ЗначениеЗаполнено(СчетУчета) Тогда
		Запрос.УстановитьПараметр("Счет", СчетУчета);
		УсловиеВыбораСчетаВТекстеЗапроса = "Счет В (&Счет)";
	Иначе
		УсловиеВыбораСчетаВТекстеЗапроса = "";
	КонецЕсли;
	
	НаСчетеВедетсяУчетПоСкладам = ЗначениеЗаполнено(СчетУчета) И БухгалтерскийУчет.ВедетсяУчетПоСкладам(СчетУчета);

	// Если указан склад, то необходимо отобрать партии по складу
	Если ЗначениеЗаполнено(Склад) И НаСчетеВедетсяУчетПоСкладам Тогда
		Запрос.УстановитьПараметр("Склад", Склад);
		Видысубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
		УсловиеВТекстеЗапроса = УсловиеВТекстеЗапроса + " И Субконто3 = &Склад";
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОсновнойОбороты.Субконто2.Ссылка КАК Документ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачПериода, &КонПериода, , " + УсловиеВыбораСчетаВТекстеЗапроса + ", &ВидыСубконто, " + УсловиеВТекстеЗапроса + ", , ) КАК ОсновнойОбороты";
	Результат = Запрос.Выполнить().Выгрузить();

	ОграничениеСпискаДокументовПоТипу(Результат, ОграничениеТипа);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеСпискаПоОстаткам(СтруктураОтбора)

	НачПериода      = СтруктураОтбора["НачПериода"];
	КонПериода      = СтруктураОтбора["КонПериода"];
	Организация     = СтруктураОтбора["Организация"];
	Номенклатура    = СтруктураОтбора["Номенклатура"];
	Склад           = СтруктураОтбора["Склад"];
	СчетУчета       = СтруктураОтбора["СчетУчета"];
	ОграничениеТипа = СтруктураОтбора["ТипыДокументов"];
	
	ВидыСубконто = Новый Массив;
	Видысубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Видысубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонПериода",   КонПериода);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);

	УсловиеВТекстеЗапроса = ?(НЕ ЗначениеЗаполнено(Организация), "Субконто1 = &Номенклатура", "Субконто1 = &Номенклатура И Организация = &Организация");
	
	// Если указан склад, то необходимо отобрать партии по складу
	Если ЗначениеЗаполнено(СчетУчета) Тогда
		Запрос.УстановитьПараметр("Счет", БухгалтерскийУчетПовтИсп.СчетаВИерархии(СчетУчета));
		УсловиеВыбораСчетаВТекстеЗапроса = "Счет В (&Счет)";
	Иначе 
		УсловиеВыбораСчетаВТекстеЗапроса = "";
	КонецЕсли;
	
	НаСчетеВедетсяУчетПоСкладам = ЗначениеЗаполнено(СчетУчета) И БухгалтерскийУчет.ВедетсяУчетПоСкладам(СчетУчета);

	// Если указан склад, то необходимо отобрать партии по складу
	Если ЗначениеЗаполнено(Склад) И НаСчетеВедетсяУчетПоСкладам Тогда
		Запрос.УстановитьПараметр("Склад", Склад);
		Видысубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
		УсловиеВТекстеЗапроса = УсловиеВТекстеЗапроса + " И Субконто3 = &Склад";
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОсновнойОстатки.Субконто2 КАК Документ,
	|	ОсновнойОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|	ОсновнойОстатки.СуммаОстаток КАК Остаток,
	|	ВЫБОР КОГДА	ОсновнойОстатки.КоличествоОстаток > 0
	|	ТОГДА ОсновнойОстатки.СуммаОстаток / ОсновнойОстатки.КоличествоОстаток
	|	ИНАЧЕ 0
	|	КОНЕЦ КАК Цена
	|ИЗ  
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонПериода, "+ УсловиеВыбораСчетаВТекстеЗапроса + ", &ВидыСубконто, " + УсловиеВТекстеЗапроса + ") КАК ОсновнойОстатки";
	
	Результат = Запрос.Выполнить().Выгрузить();
	ОграничениеСпискаДокументовПоТипу(Результат, ОграничениеТипа);
	
	Возврат Результат;

КонецФункции

#КонецОбласти 

#КонецОбласти 
