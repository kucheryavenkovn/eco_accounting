&НаКлиенте
Процедура Заполнить(Команда)
	ЗаполнитьНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.Расчеты.Очистить();
	ИтогоЗадолженность = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента",Объект.Договоры.Выгрузить().ВыгрузитьКолонку("Договор"));
	Запрос.УстановитьПараметр("НачалоПериода", Объект.НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", Объект.ОкончаниеПериода);
	Запрос.УстановитьПараметр("КоличествоДнейОтсрочки", Объект.КоличествоДнейОтсрочки);
	
	ВидыСубконтоВзаиморасчетов = Новый Массив;
	ВидыСубконтоВзаиморасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоВзаиморасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ВидыСубконтоВзаиморасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	Запрос.УстановитьПараметр("ВидыСубконтоВзаиморасчетов", ВидыСубконтоВзаиморасчетов);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	АР_НачислениеАренднойПлаты.Дата КАК Дата,
	|	АР_НачислениеАренднойПлаты.Ссылка КАК Ссылка,
	|	АР_НачислениеАренднойПлаты.НачалоПериода КАК Месяц,
	|	ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(АР_НачислениеАренднойПлаты.НачалоПериода, МЕСЯЦ), ДЕНЬ, &КоличествоДнейОтсрочки) КАК ДатаОплатыПоДоговору,
	|	АР_НачислениеАренднойПлаты.НачалоПериода КАК НачалоПериода,
	|	АР_НачислениеАренднойПлаты.ОкончаниеПериода КАК ОкончаниеПериода,
	|	АР_НачислениеАренднойПлаты.СуммаДокумента КАК СуммаДокумента
	|ПОМЕСТИТЬ втНачисления
	|ИЗ
	|	Документ.АР_НачислениеАренднойПлаты КАК АР_НачислениеАренднойПлаты
	|ГДЕ
	|	АР_НачислениеАренднойПлаты.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И АР_НачислениеАренднойПлаты.Проведен
	|	И АР_НачислениеАренднойПлаты.Организация = &Организация
	|	И АР_НачислениеАренднойПлаты.Контрагент = &Контрагент
	|	И АР_НачислениеАренднойПлаты.ДоговорКонтрагента В(&ДоговорКонтрагента)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.Период КАК Период,
	|	ХозрасчетныйОборотыДтКт.Регистратор КАК Регистратор,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК СубконтоДт1,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК СубконтоДт2,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт3 КАК СубконтоДт3,
	|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот,
	|	ХозрасчетныйОборотыДтКт.СубконтоКт3 КАК СубконтоКт3,
	|	втНачисления.Месяц КАК Месяц,
	|	втНачисления.ДатаОплатыПоДоговору КАК ДатаОплатыПоДоговору,
	|	втНачисления.НачалоПериода КАК НачалоПериода,
	|	втНачисления.ОкончаниеПериода КАК ОкончаниеПериода,
	|	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетДт,
	|	ХозрасчетныйОборотыДтКт.СчетКт КАК СчетКт
	|ПОМЕСТИТЬ втОплаты
	|ИЗ
	|	втНачисления КАК втНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|				&НачалоПериода,
	|				&ОкончаниеПериода,
	|				Регистратор,
	|				,
	|				,
	|				СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателями),
	|				&ВидыСубконтоВзаиморасчетов,
	|				СубконтоКт3 В
	|						(ВЫБРАТЬ
	|							втНачисления.Ссылка КАК Ссылка
	|						ИЗ
	|							втНачисления КАК втНачисления)
	|					И СубконтоКт2 В (&ДоговорКонтрагента)) КАК ХозрасчетныйОборотыДтКт
	|		ПО втНачисления.Ссылка = ХозрасчетныйОборотыДтКт.СубконтоКт3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХозрасчетныйОборотыДтКт.Период КАК Период,
	|	ХозрасчетныйОборотыДтКт.Регистратор КАК Регистратор,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт3 КАК СубконтоДт3,
	|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот,
	|	ХозрасчетныйОборотыДтКт.СубконтоКт3 КАК СубконтоКт3,
	|	втНачисления.Месяц КАК Месяц,
	|	втНачисления.ДатаОплатыПоДоговору КАК ДатаОплатыПоДоговору,
	|	втНачисления.НачалоПериода КАК НачалоПериода,
	|	втНачисления.ОкончаниеПериода КАК ОкончаниеПериода
	|ПОМЕСТИТЬ втКорректировки
	|ИЗ
	|	втНачисления КАК втНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|				&НачалоПериода,
	|				&ОкончаниеПериода,
	|				Регистратор,
	|				СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателями),
	|				&ВидыСубконтоВзаиморасчетов,
	|				,
	|				,
	|				СубконтоДт3 В
	|						(ВЫБРАТЬ
	|							втНачисления.Ссылка КАК Ссылка
	|						ИЗ
	|							втНачисления КАК втНачисления)
	|					И СубконтоДт2 В (&ДоговорКонтрагента)) КАК ХозрасчетныйОборотыДтКт
	|		ПО втНачисления.Ссылка = ХозрасчетныйОборотыДтКт.СубконтоДт3
	|ГДЕ
	|	ХозрасчетныйОборотыДтКт.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КорректировкаРеализации.Ссылка КАК Ссылка,
	|	КорректировкаРеализации.СуммаДокумента КАК СуммаДокумента,
	|	втНачисления.Месяц КАК Месяц,
	|	втНачисления.ДатаОплатыПоДоговору КАК ДатаОплатыПоДоговору,
	|	втНачисления.НачалоПериода КАК НачалоПериода,
	|	КорректировкаРеализации.Дата КАК Дата,
	|	втНачисления.ОкончаниеПериода КАК ОкончаниеПериода,
	|	втНачисления.Ссылка КАК ДокументОснованиеКорректировки
	|ПОМЕСТИТЬ втКорректировкиРеализаций
	|ИЗ
	|	втКорректировки КАК втКорректировки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНачисления КАК втНачисления
	|		ПО втКорректировки.СубконтоДт3 = втНачисления.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|		ПО втКорректировки.Регистратор = КорректировкаРеализации.Ссылка
	|ГДЕ
	|	КорректировкаРеализации.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втКорректировкиРеализаций.Дата КАК Дата,
	|	втКорректировкиРеализаций.Ссылка КАК Ссылка,
	|	втКорректировкиРеализаций.СуммаДокумента КАК СуммаДокумента,
	|	втКорректировкиРеализаций.Месяц КАК Месяц,
	|	втКорректировкиРеализаций.ДатаОплатыПоДоговору КАК ДатаОплатыПоДоговору,
	|	втКорректировкиРеализаций.НачалоПериода КАК НачалоПериода,
	|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот,
	|	втКорректировкиРеализаций.ОкончаниеПериода КАК ОкончаниеПериода,
	|	втКорректировкиРеализаций.ДокументОснованиеКорректировки КАК ДокументОснованиеКорректировки
	|ПОМЕСТИТЬ втДвиженияКорректоровок
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &ОкончаниеПериода, Регистратор, СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателями), &ВидыСубконтоВзаиморасчетов, СчетКт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Выручка)), , ) КАК ХозрасчетныйОборотыДтКт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКорректировкиРеализаций КАК втКорректировкиРеализаций
	|		ПО ХозрасчетныйОборотыДтКт.Регистратор = втКорректировкиРеализаций.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисления.Ссылка КАК Начисление,
	|	СчетФактураВыданныйДокументыОснования.Ссылка КАК СчетФактура,
	|	ЖурналУчетаСчетовФактур.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерСчетаФактуры КАК НомерСчетаФактуры
	|ПОМЕСТИТЬ втРеквизитыСчетаФактуры
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНачисления КАК втНачисления
	|		ПО СчетФактураВыданныйДокументыОснования.ДокументОснование = втНачисления.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактур
	|		ПО СчетФактураВыданныйДокументыОснования.Ссылка = ЖурналУчетаСчетовФактур.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисления.Дата КАК Дата,
	|	втНачисления.Ссылка КАК Ссылка,
	|	втНачисления.Месяц КАК Месяц,
	|	втНачисления.ДатаОплатыПоДоговору КАК ДатаОплатыПоДоговору,
	|	втНачисления.НачалоПериода КАК НачалоПериода,
	|	втНачисления.ОкончаниеПериода КАК ОкончаниеПериода,
	|	втНачисления.СуммаДокумента КАК Начислено,
	|	NULL КАК Период,
	|	NULL КАК Регистратор,
	|	NULL КАК Оплачено,
	|	NULL КАК СубконтоДт3,
	|	NULL КАК СчетДт,
	|	NULL КАК СчетКт,
	|	NULL КАК ДокументОснованиеКорректировки
	|ПОМЕСТИТЬ втВыборка
	|ИЗ
	|	втНачисления КАК втНачисления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	втОплаты.СубконтоКт3,
	|	втОплаты.Месяц,
	|	втОплаты.ДатаОплатыПоДоговору,
	|	втОплаты.НачалоПериода,
	|	втОплаты.ОкончаниеПериода,
	|	0,
	|	втОплаты.Период,
	|	втОплаты.Регистратор,
	|	втОплаты.СуммаОборот,
	|	втОплаты.СубконтоДт3,
	|	втОплаты.СчетДт,
	|	втОплаты.СчетКт,
	|	NULL
	|ИЗ
	|	втОплаты КАК втОплаты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втДвиженияКорректоровок.Дата,
	|	втДвиженияКорректоровок.ДокументОснованиеКорректировки,
	|	втДвиженияКорректоровок.Месяц,
	|	втДвиженияКорректоровок.ДатаОплатыПоДоговору,
	|	втДвиженияКорректоровок.НачалоПериода,
	|	втДвиженияКорректоровок.ОкончаниеПериода,
	|	втДвиженияКорректоровок.СуммаОборот,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	втДвиженияКорректоровок.ДокументОснованиеКорректировки
	|ИЗ
	|	втДвиженияКорректоровок КАК втДвиженияКорректоровок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВыборка.Месяц КАК Месяц,
	|	втВыборка.ДатаОплатыПоДоговору КАК ДатаОплатыПоДоговору,
	|	втВыборка.НачалоПериода КАК НачалоПериода,
	|	втВыборка.ОкончаниеПериода КАК ОкончаниеПериода,
	|	СУММА(втВыборка.Начислено) КАК СтоимостьОказанныйУслуг,
	|	втВыборка.Период КАК ДатаФактическойОплаты,
	|	СУММА(втВыборка.Оплачено) КАК СуммаОплаты,
	|	втВыборка.СубконтоДт3 КАК СубконтоДт3,
	|	втВыборка.Ссылка КАК Ссылка,
	|	втРеквизитыСчетаФактуры.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
	|	втРеквизитыСчетаФактуры.НомерСчетаФактуры КАК НомерСчетаФактуры,
	|	втВыборка.СчетДт КАК СчетДт,
	|	втВыборка.СчетКт КАК СчетКт
	|ИЗ
	|	втВыборка КАК втВыборка
	|		ЛЕВОЕ СОЕДИНЕНИЕ втРеквизитыСчетаФактуры КАК втРеквизитыСчетаФактуры
	|		ПО втВыборка.Ссылка = втРеквизитыСчетаФактуры.Начисление
	|
	|СГРУППИРОВАТЬ ПО
	|	втВыборка.Месяц,
	|	втВыборка.НачалоПериода,
	|	втВыборка.ОкончаниеПериода,
	|	втВыборка.ДатаОплатыПоДоговору,
	|	втВыборка.Период,
	|	втВыборка.СубконтоДт3,
	|	втВыборка.Ссылка,
	|	втРеквизитыСчетаФактуры.ДатаСчетаФактуры,
	|	втРеквизитыСчетаФактуры.НомерСчетаФактуры,
	|	втВыборка.СчетДт,
	|	втВыборка.СчетКт
	|
	|УПОРЯДОЧИТЬ ПО
	|	Месяц
	|ИТОГИ
	|	СУММА(СтоимостьОказанныйУслуг),
	|	СУММА(СуммаОплаты)
	|ПО
	|	Месяц,
	|	Ссылка";
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ОстатокЗадолженности = 0;
		//КлючеваяСтавка = 5.5/100;
		ВыборкаПоМесяцам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоМесяцам.Следующий() Цикл
			ВыборкаПоНачислениям = ВыборкаПоМесяцам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			НачалоПериодаПросрочки = '00010101';
			Пока ВыборкаПоНачислениям.Следующий() Цикл
				ИтогоОплачено = 0;
				ЭтоПерваяСтрока = Истина;
				СтрокаТЧ = ДокОбъект.Расчеты.Добавить();
				
				Выборка = ВыборкаПоНачислениям.Выбрать();
				СтоимостьОказанныйУслуг=0;
				Пока Выборка.Следующий() Цикл
					//Если ЭтоПерваяСтрока Тогда
					//    ЭтоПерваяСтрока = Ложь;
					//КонецЕсли;
					
					Если Выборка.СтоимостьОказанныйУслуг = 0 Тогда
						Если Не ЭтоПерваяСтрока Тогда 
							СтрокаТЧ = ДокОбъект.Расчеты.Добавить();
						Иначе
							СтоимостьОказанныйУслуг = ВыборкаПоНачислениям.СтоимостьОказанныйУслуг; 
							ОстатокЗадолженности = ВыборкаПоНачислениям.СтоимостьОказанныйУслуг;
						КонецЕсли;
						ЭтоПерваяСтрока = Ложь;
					Иначе
						Если ЭтоПерваяСтрока Тогда 
							СтоимостьОказанныйУслуг = ВыборкаПоНачислениям.СтоимостьОказанныйУслуг; 
							ОстатокЗадолженности = ВыборкаПоНачислениям.СтоимостьОказанныйУслуг;
						КонецЕсли;
						//СтоимостьОказанныйУслуг = ВыборкаПоНачислениям.СтоимостьОказанныйУслуг; 
						//ОстатокЗадолженности = ВыборкаПоНачислениям.СтоимостьОказанныйУслуг;
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(СтрокаТЧ, Выборка,,"СтоимостьОказанныйУслуг");
					//ЗаполнитьЗначенияСвойств(СтрокаТЧ, Выборка);
					СтрокаТЧ.ДатаИНомерСчетаФактуры = "С/ф №"+СокрЛП(Выборка.НомерСчетаФактуры) + " от "+СокрЛП(Формат(Выборка.ДатаСчетаФактуры, "ДФ=dd.MM.yyyy")+"г.");
					СтрокаТЧ.СтоимостьОказанныйУслуг = СтоимостьОказанныйУслуг;
					
					СтрокаТЧ.СуммаУчтеннойОплаты = СтрокаТЧ.СуммаОплаты;
					Если Не ЗначениеЗаполнено(НачалоПериодаПросрочки) Тогда
						СтрокаТЧ.НачалоПериодаПросрочки = СтрокаТЧ.ДатаОплатыПоДоговору+86400;
					Иначе
						СтрокаТЧ.НачалоПериодаПросрочки = НачалоПериодаПросрочки;
					КонецЕсли;
					
					СтрокаТЧ.КонецПериодаПросрочки = Макс(СтрокаТЧ.ДатаФактическойОплаты,СтрокаТЧ.НачалоПериодаПросрочки-1);
					
					//Если (СтрокаТЧ.НачалоПериодаПросрочки = СтрокаТЧ.КонецПериодаПросрочки) и (ДокОбъект.Расчеты.Количество()-2 > 0) Тогда
					//	ПредыдущаяСтрока = ДокОбъект.Расчеты[ДокОбъект.Расчеты.Количество()-2];
					//	СтрокаТЧ.НачалоПериодаПросрочки = ПредыдущаяСтрока.НачалоПериодаПросрочки
					//КонецЕсли;
					//
					//НачалоПериодаПросрочки = СтрокаТЧ.КонецПериодаПросрочки;
					Если СтрокаТЧ.СуммаУчтеннойОплаты = 0 Тогда
						СтрокаТЧ.КонецПериодаПросрочки = ДокОбъект.ОкончаниеПериода;
					КонецЕсли;
					СтрокаТЧ.КоличествоДнейПросрочки = (КонецДня(СтрокаТЧ.КонецПериодаПросрочки) - НачалоДня(СтрокаТЧ.НачалоПериодаПросрочки))/86400; //+1;
					Если СтрокаТЧ.КоличествоДнейПросрочки < 0 Тогда СтрокаТЧ.КоличествоДнейПросрочки = 0 КонецЕсли;
					ОстатокЗадолженности = ОстатокЗадолженности - СтрокаТЧ.СуммаУчтеннойОплаты;
					Если ОстатокЗадолженности < 0 Тогда
						СтрокаТЧ.ОстатокЗадолжненности = 0;
						СтрокаТЧ.Аванс = -ОстатокЗадолженности
					Иначе
						СтрокаТЧ.ОстатокЗадолжненности = ОстатокЗадолженности;
					КонецЕсли;
					
					
					//СтрокаТЧ.РазмерНеустойкиЗаДеньПросрочки = Окр(СтрокаТЧ.СтоимостьОказанныйУслуг/1000,2);
					//СтрокаТЧ.РазмерНеустойкиЗаДеньПросрочки = Окр(СтрокаТЧ.СтоимостьОказанныйУслуг/300*КлючеваяСтавка,2);
					//СтрокаТЧ.СуммаПроцентов = СтрокаТЧ.РазмерНеустойкиЗаДеньПросрочки * СтрокаТЧ.КоличествоДнейПросрочки;
					СтрокаТЧ.СуммаПроцентов = экоДоработки.РассчитатьНеустойку(Объект.Дата,ОстатокЗадолженности,СтрокаТЧ.НачалоПериодаПросрочки,СтрокаТЧ.КонецПериодаПросрочки,Объект.ПорядокРасчетаПени, СтрокаТЧ, Объект.ПроцентНеустойкиПоДоговору);
					
					Если СтрокаТЧ.СуммаУчтеннойОплаты = 0 или СтрокаТЧ.СуммаУчтеннойОплаты = null Тогда
						ИтогоЗадолженность = ИтогоЗадолженность + СтрокаТЧ.ОстатокЗадолжненности - СтрокаТЧ.СуммаУчтеннойОплаты
					КонецЕсли;
					
					Если Выборка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным Тогда
						СтрокаТЧ.Аванс = -СтрокаТЧ.СуммаОплаты;
					КонецЕсли;
					
					
				КонецЦикла;
				//			 Если итого начислено больше, чем оплачено - добавляем новую строку с просрочкой
				Если ОстатокЗадолженности > 0 Тогда
					ПредыдущаяСтрока = ДокОбъект.Расчеты[ДокОбъект.Расчеты.Количество()-1];
					Если ПредыдущаяСтрока.СуммаУчтеннойОплаты = 0 Тогда 
						Продолжить;
					КонецЕсли;
					
					СтрокаТЧ = ДокОбъект.Расчеты.Добавить();
					
					СтоимостьОказанныйУслуг = ВыборкаПоНачислениям.СтоимостьОказанныйУслуг; 
					ЗаполнитьЗначенияСвойств(СтрокаТЧ, ПредыдущаяСтрока, "Месяц,ДатаИНомерСчетаФактуры,ДатаОплатыПоДоговору,СтоимостьОказанныйУслуг,ДатаФактическойОплаты");
					//СтрокаТЧ.НачалоПериодаПросрочки = ПредыдущаяСтрока.КонецПериодаПросрочки;
					СтрокаТЧ.НачалоПериодаПросрочки = ПредыдущаяСтрока.НачалоПериодаПросрочки;
					СтрокаТЧ.КонецПериодаПросрочки = ДокОбъект.ОкончаниеПериода;
					//СтрокаТЧ.КоличествоДнейПросрочки = (НачалоДня(СтрокаТЧ.КонецПериодаПросрочки) - НачалоДня(СтрокаТЧ.НачалоПериодаПросрочки))/86400+1;
					СтрокаТЧ.КоличествоДнейПросрочки = (КонецДня(СтрокаТЧ.КонецПериодаПросрочки) - НачалоДня(СтрокаТЧ.НачалоПериодаПросрочки))/86400; //+1;
					Если СтрокаТЧ.КоличествоДнейПросрочки < 0 Тогда СтрокаТЧ.КоличествоДнейПросрочки = 0 КонецЕсли;
					СтрокаТЧ.ОстатокЗадолжненности = ОстатокЗадолженности;
					//СтрокаТЧ.РазмерНеустойкиЗаДеньПросрочки = Окр(СтрокаТЧ.ОстатокЗадолжненности/1000,2);
					//СтрокаТЧ.РазмерНеустойкиЗаДеньПросрочки = Окр(СтрокаТЧ.ОстатокЗадолжненности/300*КлючеваяСтавка,2);
					СтрокаТЧ.СуммаПроцентов = экоДоработки.РассчитатьНеустойку(Объект.Дата,ОстатокЗадолженности,СтрокаТЧ.НачалоПериодаПросрочки,СтрокаТЧ.КонецПериодаПросрочки,Объект.ПорядокРасчетаПени, СтрокаТЧ, Объект.ПроцентНеустойкиПоДоговору);
					
				КонецЕсли;
				
				Если СтрокаТЧ.СуммаУчтеннойОплаты = 0 или СтрокаТЧ.СуммаУчтеннойОплаты = null Тогда
					ИтогоЗадолженность = ИтогоЗадолженность + СтрокаТЧ.ОстатокЗадолжненности - СтрокаТЧ.СуммаУчтеннойОплаты
				КонецЕсли;
				
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	ЗадолженностьПоДокументам = Новый ТаблицаЗначений;
	ЗадолженностьПоДокументам.Колонки.Добавить("ДатаИНомерСчетаФактуры");
	ЗадолженностьПоДокументам.Колонки.Добавить("Сумма");
	
	Для Каждого СтрокаТЧ Из ДокОбъект.Расчеты Цикл
		НайденныеСтроки = ЗадолженностьПоДокументам.НайтиСтроки(Новый Структура("ДатаИНомерСчетаФактуры",СтрокаТЧ.ДатаИНомерСчетаФактуры));
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].Сумма = НайденныеСтроки[0].Сумма - СтрокаТЧ.СуммаУчтеннойОплаты + ?(СтрокаТЧ.Аванс>0,СтрокаТЧ.Аванс, 0);
		Иначе
			СтрокаТЗ = ЗадолженностьПоДокументам.Добавить();
			СтрокаТЗ.ДатаИНомерСчетаФактуры = СтрокаТЧ.ДатаИНомерСчетаФактуры;
			СтрокаТЗ.Сумма = СтрокаТЧ.СтоимостьОказанныйУслуг - СтрокаТЧ.СуммаУчтеннойОплаты + ?(СтрокаТЧ.Аванс>0,СтрокаТЧ.Аванс, 0)
		КонецЕсли;
		
	КонецЦикла;
	
	ДокОбъект.РазмерНеустойки = ДокОбъект.Расчеты.Итог("СуммаПроцентов");
	ДокОбъект.ЗадолженностьКонтрагента = ЗадолженностьПоДокументам.Итог("Сумма");
	ДокОбъект.ВсегоЗадолженность = ДокОбъект.РазмерНеустойки + ДокОбъект.ЗадолженностьКонтрагента;
	
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Организация = Справочники.Организации.НайтиОрганизацию("2223592509");
		Объект.КоличествоДнейОтсрочки = 10;
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры


&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры


&НаКлиенте
Процедура ДоговорНажатие(Элемент, СтандартнаяОбработка)
	ОткрытьФорму("Документ.Претензия.Форма.ФормаВыбораДоговоров");
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьДоговоры(Команда)
	ЗаполнитьДоговорыНаСервере();
	ОбновитьИтогоЗадолженность();
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьДоговорыНаСервере()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	Запрос.УстановитьПараметр("МассивСубконто", МассивСубконто);
	Запрос.УстановитьПараметр("Период", Новый Граница(КонецДня(Объект.ОкончаниеПериода), ВидГраницы.Включая));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Договор
	|ПОМЕСТИТЬ втДоговорыКонтрагента
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.Владелец = &Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ Различные
	|	ХозрасчетныйОстатки.Субконто1 КАК Договор,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК Задолженность
	|ПОМЕСТИТЬ втОстатки
	|ИЗ
	|	втДоговорыКонтрагента КАК втДоговорыКонтрагента,
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Период,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателями),
	|			&МассивСубконто,
	|			Субконто2 = &Контрагент
	|				И Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						втДоговорыКонтрагента.Договор КАК Договор
	|					ИЗ
	|						втДоговорыКонтрагента КАК втДоговорыКонтрагента)) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДоговорыКонтрагента.Договор КАК Договор,
	|	ЕСТЬNULL(втОстатки.Задолженность, 0) КАК Задолженность
	|ИЗ
	|	втДоговорыКонтрагента КАК втДоговорыКонтрагента
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОстатки КАК втОстатки
	|		ПО втДоговорыКонтрагента.Договор = втОстатки.Договор";
	
	Объект.Договоры.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры


&НаКлиенте
Процедура ДоговорыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьИтогоЗадолженность();
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ОбновитьИтогоЗадолженность()
	
	Задолженность = 0;
	Для Каждого СтрокаТЧ ИЗ Объект.Договоры Цикл
		Задолженность = Задолженность + СтрокаТЧ.Задолженность;
	КонецЦикла;
	
	Элементы.Договоры.ПодчиненныеЭлементы.ДоговорыЗадолженность.ТекстПодвала = Формат(Задолженность, "ЧЦ=15; ЧДЦ=2");
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорыПослеУдаления(Элемент)
	ОбновитьИтогоЗадолженность();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКакОсновной(Команда)
	ТекущиеДанные = Элементы.Договоры.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		Объект.Договор = ТекущиеДанные.Договор;
	КонецЕсли;
КонецПроцедуры
