// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Претензия") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Претензия", "Претензия",
		ПечатьПретензии(МассивОбъектов, ОбъектыПечати),, "Документ.Претензия.ПФ_MXL_Претензия");
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасчетПени") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РасчетПени", "Расчет пени",
		ПечатьСправкаРасчетПеней(МассивОбъектов, ОбъектыПечати),, "Документ.Претензия.ПФ_MXL_РасчетПени");
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);	
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Функция формирует табличный документ с печатной формой расчет пеней
//
// Возвращаемое значение:
//  Табличный документ - сформированная печатная форма
//
Функция ПечатьСправкаРасчетПеней(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб         = Истина;
	ТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасчетПени";
	
	ДанныеШапки = Новый Структура;
	ДанныеПодвал = Новый Структура;
	ДанныеСтроки = Новый Структура;
	
	МакетРасчета = УправлениеПечатью.МакетПечатнойФормы("Документ.Претензия.ПФ_MXL_РасчетПени");
	
	Для КАждого Ссылка Из МассивОбъектов Цикл
		
		
		ОбластьШапкаРасчет = МакетРасчета.ПолучитьОбласть("Шапка|ОбщаяЧасть");
		ОбластьШапкаРасчет.Параметры.Контрагент = Ссылка.Контрагент.НаименованиеПолное;
		ОбластьШапкаРасчет.Параметры.НомерДоговора = Ссылка.Договор.Номер;
		ОбластьШапкаРасчет.Параметры.ДатаДоговора = Формат(Ссылка.Договор.Дата,"ДФ=dd.MM.yyyy");
		ОбластьШапкаРасчет.Параметры.ДатаДокумента = Формат(Ссылка.ОкончаниеПериода,"ДФ=dd.MM.yyyy");
		
		ПорядокРасчетаПени = Ссылка.ПорядокРасчетаПени;
		
		ОбластьШапка= МакетРасчета.ПолучитьОбласть("Шапка");
		
		ТабличныйДокумент.Вывести(ОбластьШапкаРасчет);
		
		//ТабличныйДокумент.Присоединить(ОбластьШапкаРасчет,1,"Общая");
		Если ПорядокРасчетаПени = 0 или ПорядокРасчетаПени = 3 или ПорядокРасчетаПени = 4 Тогда
			ТабличныйДокумент.Присоединить(МакетРасчета.ПолучитьОбласть("Шапка|РасчетНеустойкиЮрЛицо"),1);
		Иначе
			ТабличныйДокумент.Присоединить(МакетРасчета.ПолучитьОбласть("Шапка|РасчетНеустойкиУК"),1);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(МакетРасчета.ПолучитьОбласть("Шапка|Итог"),1);
		
		ПериодНачисления = '00010101';
		ИтогоНачислено =  0; ИтогоЗадолженность = 0;
		Для Каждого СтрокаТЧ Из Ссылка.Расчеты Цикл
			
			Если Не ПериодНачисления = СтрокаТЧ.Месяц Тогда
				ИтогоНачислено = ИтогоНачислено + СтрокаТЧ.СтоимостьОказанныйУслуг;
				ПериодНачисления = СтрокаТЧ.Месяц;
			КонецЕсли;
			
			Если СтрокаТЧ.СуммаУчтеннойОплаты = 0 Тогда
				ИтогоЗадолженность = ИтогоЗадолженность + СтрокаТЧ.ОстатокЗадолжненности
			КонецЕсли;
			
			
			ОбластьСтрока = МакетРасчета.ПолучитьОбласть("Строка|ОбщаяЧасть");
			ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры,СтрокаТЧ);
			ТабличныйДокумент.Вывести(ОбластьСтрока);
			
			Если ПорядокРасчетаПени = 0 или ПорядокРасчетаПени = 3 или ПорядокРасчетаПени = 4 Тогда
				ОбластьСтрокаРасчетНеустойки = МакетРасчета.ПолучитьОбласть("Строка|РасчетНеустойкиЮрЛицо");
				ЗаполнитьЗначенияСвойств(ОбластьСтрокаРасчетНеустойки.Параметры,СтрокаТЧ);				
			Иначе
				ОбластьСтрокаРасчетНеустойки = МакетРасчета.ПолучитьОбласть("Строка|РасчетНеустойкиУК");
				ЗаполнитьЗначенияСвойств(ОбластьСтрокаРасчетНеустойки.Параметры,СтрокаТЧ);
			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьСтрокаРасчетНеустойки,1);
			
			ОбластьСтрокаИтог = МакетРасчета.ПолучитьОбласть("Строка|Итог");
			ЗаполнитьЗначенияСвойств(ОбластьСтрокаИтог.Параметры,СтрокаТЧ);
			
			ТабличныйДокумент.Присоединить(ОбластьСтрокаИтог,1);
			
		КонецЦикла;
		
		Расчеты = Ссылка.Расчеты;
		
		ОбластьПодвалРасчет = МакетРасчета.ПолучитьОбласть("Подвал|ОбщаяЧасть");
		
		ОтветственныеЛицаОрганизации = ОтветственныеЛицаБП.ОтветственныеЛица(Ссылка.Организация, Ссылка.Дата);
		ОбластьПодвалРасчет.Параметры.ФИОГлавногоБухгалтера = ОтветственныеЛицаОрганизации.ГлавныйБухгалтерПредставление;
		
		ОбластьПодвалРасчет.Параметры.ИтогоСтоимостьОказанныйУслуг = ИтогоНачислено;
		ОбластьПодвалРасчет.Параметры.ИтогоСуммаОплаты = Расчеты.Итог("СуммаОплаты");
		ОбластьПодвалРасчет.Параметры.ИтогоСуммаУчтеннойОплаты = Расчеты.Итог("СуммаУчтеннойОплаты");
		
		ЗадолженностьПоДокументам = Новый ТаблицаЗначений;
		ЗадолженностьПоДокументам.Колонки.Добавить("ДатаИНомерСчетаФактуры");
		ЗадолженностьПоДокументам.Колонки.Добавить("Сумма");
		
		Для Каждого СтрокаТЧ Из Ссылка.Расчеты Цикл
			НайденныеСтроки = ЗадолженностьПоДокументам.НайтиСтроки(Новый Структура("ДатаИНомерСчетаФактуры",СтрокаТЧ.ДатаИНомерСчетаФактуры));
			Если НайденныеСтроки.Количество() > 0 Тогда
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				//НайденныеСтроки[0].Сумма = НайденныеСтроки[0].Сумма - СтрокаТЧ.СуммаУчтеннойОплаты + ?(СтрокаТЧ.Аванс>0,СтрокаТЧ.Аванс, 0);
				НайденнаяСтрока.Сумма = НайденнаяСтрока.Сумма - СтрокаТЧ.СуммаУчтеннойОплаты + ?(СтрокаТЧ.Аванс>0,СтрокаТЧ.Аванс, 0);
				КонецЦикла;
			Иначе
				СтрокаТЗ = ЗадолженностьПоДокументам.Добавить();
				СтрокаТЗ.ДатаИНомерСчетаФактуры = СтрокаТЧ.ДатаИНомерСчетаФактуры;
				СтрокаТЗ.Сумма = СтрокаТЧ.СтоимостьОказанныйУслуг - СтрокаТЧ.СуммаУчтеннойОплаты + ?(СтрокаТЧ.Аванс>0,СтрокаТЧ.Аванс, 0)
			КонецЕсли;
			
		КонецЦикла;
		
		ОбластьПодвалРасчет.Параметры.ИтогоЗадолженность = ЗадолженностьПоДокументам.Итог("Сумма");
		ОбластьПодвалРасчет.Параметры.ВсегоЗадолженность = Ссылка.ВсегоЗадолженность;
		ТабличныйДокумент.Вывести(ОбластьПодвалРасчет);
		
		Если ПорядокРасчетаПени = 0 или ПорядокРасчетаПени = 3 или ПорядокРасчетаПени = 4 Тогда
			ОбластьПодвалРасчетНеустойки = МакетРасчета.ПолучитьОбласть("Подвал|РасчетНеустойкиЮрЛицо");
		Иначе
			ОбластьПодвалРасчетНеустойки = МакетРасчета.ПолучитьОбласть("Подвал|РасчетНеустойкиУК");
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьПодвалРасчетНеустойки);
		
		ОбластьПодвалИтог = МакетРасчета.ПолучитьОбласть("Подвал|Итог");
		ОбластьПодвалИтог.Параметры.ИтогоСуммаПроцентов = Расчеты.Итог("СуммаПроцентов");
		ТабличныйДокумент.Присоединить(ОбластьПодвалИтог);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
КонецФункции

Функция ПечатьПретензии(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб         = Истина;
	ТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Претензия";
	
	ДанныеШапки  = Новый Структура;
	ДанныеПодвал = Новый Структура;
	ДанныеСтроки = Новый Структура;
	
	Для Каждого Ссылка Из МассивОбъектов Цикл
		Если Ссылка.ВидПечатнойФормы = 1 Тогда
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Претензия.ПФ_MXL_Претензия");
			
			
			ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
			
			//ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
			
			
			ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры, Ссылка);
			//ОбластьШапка.Параметры.Контрагент = Ссылка.Контрагент.НаименованиеПолное;
			// В табличном документе зададим имя области, в которую был 
			// выведен объект. Нужно для возможности печати покомплектно.
			//УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
			//	НомерСтрокиНачало, ОбъектыПечати, Ссылка);
			//
			
			МестаНакопленияТКО = "";
			Для Каждого СтрокаТЧ Из Ссылка.Площадки Цикл
				Если Не ПустаяСтрока(МестаНакопленияТКО) Тогда
					МестаНакопленияТКО = МестаНакопленияТКО + " ,";
				КонецЕсли;
				МестаНакопленияТКО = МестаНакопленияТКО + СтрокаТЧ.Площадка;
				
			КонецЦикла;
			
			ОбластьШапка.Параметры.МестаНакопленияТКО = МестаНакопленияТКО;
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			ТабличныйДокумент.Вывести(ОбластьШапка);
			
			
		Иначе
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Претензия.ПФ_MXL_ПретензияПоИмеющемусяДоговору");
			
			
			ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
			
			//ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
			
			
			ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры, Ссылка);
			ОбластьШапка.Параметры.Контрагент = Ссылка.Контрагент.НаименованиеПолное;
			// В табличном документе зададим имя области, в которую был 
			// выведен объект. Нужно для возможности печати покомплектно.
			//УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
			//	НомерСтрокиНачало, ОбъектыПечати, Ссылка);
			//
			
			//МестаНакопленияТКО = "";
			//Для Каждого СтрокаТЧ Из Ссылка.Площадки Цикл
			//	Если Не ПустаяСтрока(МестаНакопленияТКО) Тогда
			//		МестаНакопленияТКО = МестаНакопленияТКО + " ,";
			//	КонецЕсли;
			//	МестаНакопленияТКО = МестаНакопленияТКО + СтрокаТЧ.Площадка;
			//	
			//КонецЦикла;
			
			//ОбластьШапка.Параметры.МестаНакопленияТКО = МестаНакопленияТКО;
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			ТабличныйДокумент.Вывести(ОбластьШапка);
			
			
		КонецЕсли;	
	КонецЦикла;
	
	
	Возврат ТабличныйДокумент;
КонецФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Претензия";
	КомандаПечати.Представление = НСтр("ru = 'Претензия'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "РасчетПени";
	КомандаПечати.Представление = НСтр("ru = 'Расчет пени'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
КонецПроцедуры
