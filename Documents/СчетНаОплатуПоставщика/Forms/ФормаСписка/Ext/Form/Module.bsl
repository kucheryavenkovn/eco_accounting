#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ОбщегоНазначенияБПВызовСервера.УстановитьОтборПоОсновнойОрганизации(ЭтаФорма);
	
	МожноРедактировать = ПравоДоступа("Редактирование", Метаданные.Документы.СчетНаОплатуПоставщика);
	Элементы.СписокКонтекстноеМенюИзменитьВыделенные.Видимость = МожноРедактировать;
	
	ОбщегоНазначенияБП.УстановитьВидимостьКолонокДополнительнойИнформации(ЭтотОбъект);
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиБП.КомандыЭДО_ФормаСписка(ЭтотОбъект);
	// Конец подсистема "ОбменСКонтрагентами".
	
	Список.Параметры.УстановитьЗначениеПараметра(
		"СтатусОплатыПоУмолчанию", Перечисления.СтатусОплатыСчета.СтатусНовогоДокумента());
	Список.Параметры.УстановитьЗначениеПараметра(
		"СтатусПоступленияПоУмолчанию", Перечисления.СтатусыПоступленияПоСчету.СтатусНовогоДокумента());
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Документ.СчетНаОплатуПоставщика",
		"ФормаСписка",
		НСтр("ru='Новости: Счета от поставщиков'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	ТарификацияБП.РазместитьИнформациюОбОграниченииПоКоличествуОбъектов(ЭтотОбъект);
	
	АдресХранилищаНастройкиДинСпискаДляРеестра = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ПомеченныеНаУдаление.СкрытьПомеченныеНаУдаление(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеОсновнойОрганизации" Тогда
		ОбщегоНазначенияБПКлиент.ИзменитьОтборПоОсновнойОрганизации(Список, ,Параметр);
	ИначеЕсли ИмяСобытия = "ИзмененСтатусДокументов" Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
	ПрисоединенныеФайлыБПКлиент.ОбновитьСписокПослеДобавленияФайла(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыОповещенияЭДО = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаСписка();
	ПараметрыОповещенияЭДО.Форма = ЭтотОбъект;
	ПараметрыОповещенияЭДО.ИмяДинамическогоСписка = "Список";
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаСписка(ИмяСобытия, Параметр, Источник, ПараметрыОповещенияЭДО);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РеквизитыОрганизацииЗаполнены = ОбщегоНазначенияБПКлиент.ПроверитьНаличиеОрганизаций();
	
	Если РеквизитыОрганизацииЗаполнены Тогда
		
		// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
		ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
		// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
		
	КонецЕсли;
	
	Если ОтображатьСтатусыДокументов Тогда
		
		// Подсистема "ОбменСКонтрагентами"
		ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
		// Конец Подсистема "ОбменСКонтрагентами"
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	
	ПомеченныеНаУдалениеКлиент.ПриИзмененииСписка(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)

	КлючеваяОперация = "СозданиеФормыСчетНаОплатуПоставщика";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	КлючеваяОперация = "ОткрытиеФормыСчетНаОплатуПоставщика";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
КонецПроцедуры

&НаСервере
Процедура СписокПередЗагрузкойПользовательскихНастроекНаСервере(Элемент, Настройки)
	
	ОбщегоНазначенияБП.ВосстановитьОтборСписка(Список, Настройки, "Организация");
	
	ПомеченныеНаУдаление.УдалитьОтборПометкаУдаления(Настройки);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка <> Неопределено Тогда
		
		Если ПрисоединенныеФайлыБПКлиент.ПараметрыПеретаскиванияСодержатФайлы(ПараметрыПеретаскивания) Тогда
			
			СтандартнаяОбработка = Ложь;
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Ссылка"                 , Строка);
			ДополнительныеПараметры.Вставить("ПараметрыПеретаскивания", ПараметрыПеретаскивания);
			ДополнительныеПараметры.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПеретаскиваниеФайловОтветПолучен",
				ПрисоединенныеФайлыБПКлиент,
				ДополнительныеПараметры);
			ШаблонВопроса = НСтр("ru='Присоединить файлы к документу %1?'");
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонВопроса, Строка);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса,РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСтатус(Команда)
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	
	СписокДокументов = Новый СписокЗначений;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		
		Если ТипЗнч(ВыделеннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяСтрока = Элементы.Список.ДанныеСтроки(ВыделеннаяСтрока);
		
		Если ТекущаяСтрока <> Неопределено Тогда
			СписокДокументов.Добавить(ТекущаяСтрока.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Если СписокДокументов.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта'"));
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Документ.СчетНаОплатуПоставщика.Форма.ИзменитьСтатус",
		Новый Структура("СписокДокументов", СписокДокументов),
		ЭтотОбъект,
		КлючУникальности);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	Если Команда.Имя = "ПодменюПечатьОбычное_Реестр" Тогда
		НастройкиДинамическогоСписка();
	КонецЕсли;
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ЗагрузитьСчетНаОплатуXMLИзЭлектроннойПочты(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить(
		"ВариантЗагрузкиЭД", ПредопределенноеЗначение("Перечисление.ВариантыЗагрузкиЭД.СчетНаОплату"));
	ДополнительныеПараметры.Вставить("ГлубинаПоиска" , 7);
	ДополнительныеПараметры.Вставить("ИдентификаторФормыВладельца", УникальныйИдентификатор);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьСчетНаОплатуXMLПоПочтеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.ПрямойОбменЭД.Форма.Форма", ДополнительныеПараметры, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСчетНаОплатуXMLИзФайла(Команда)
	
	Если Не ЭлектронноеВзаимодействиеБПВызовСервера.ИмеетсяВозможностьЗагрузкиДанныхИзФайла() Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Недостаточно прав для просмотра'"));
		Возврат;
		
	КонецЕсли;
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ЗагрузкаСчетаНаОплатуИзФайла");
	
	РасширениеФайла = "*.zip";
	ЗаголовокФормыВыбораФайла = НСтр("ru = 'Выберите счет на оплату'");
	
	ОповещениеОЗавершенииЗагрузки = Новый ОписаниеОповещения("ЗагрузитьСчетНаОплатуXMLИзФайлаЗавершение", ЭтотОбъект);
	РаботаСФайламиБПКлиент.ЗагрузитьФайл(
		ОповещениеОЗавершенииЗагрузки,
		УникальныйИдентификатор,
		РасширениеФайла,
		ЗаголовокФормыВыбораФайла);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеФункцииИПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()

	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура НастройкиДинамическогоСписка()
	
	Отчеты.РеестрДокументов.НастройкиДинамическогоСписка(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСчетНаОплатуXMLПоПочтеЗавершение(РеквизитыСчета, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(РеквизитыСчета) Тогда
		Возврат;
	КонецЕсли;
	
	Если РеквизитыСчета.НесопоставленнаяНоменклатура.Количество() > 0 Тогда
		ОбработкаЗавершенияСопоставления = Новый ОписаниеОповещения(
			"СопоставлениеНоменклатурыЗавершение", ЭтотОбъект, РеквизитыСчета);
		ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьСопоставлениеНоменклатуры(
			РеквизитыСчета.НесопоставленнаяНоменклатура, , ОбработкаЗавершенияСопоставления);
	Иначе
		СопоставлениеНоменклатурыЗавершение(Неопределено, РеквизитыСчета);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСчетНаОплатуXMLИзФайлаЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат.ПользовательОтказалсяОтЗагрузки Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат.ФайлЗагружен Тогда
		ПоказатьПредупреждение(, Результат.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	ПрочитатьЗагруженныеФайлы(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьЗагруженныеФайлы(РезультатВыбораФайла) Экспорт
	
	АдресаФайловXML = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РезультатВыбораФайла.АдресФайла);
	РеквизитыСчета = ПрочитатьРеквизитыИзФайлаСчетаXMLНаСервере(АдресаФайловXML, УникальныйИдентификатор);
	
	СтруктураОбмена = Новый Структура();
	СтруктураОбмена.Вставить("НаправлениеЭД",           ПредопределенноеЗначение("Перечисление.НаправленияЭД.Входящий"));
	СтруктураОбмена.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	СтруктураОбмена.Вставить("АдресХранилища",          РезультатВыбораФайла.АдресФайла);
	СтруктураОбмена.Вставить("СсылкаНаДокумент",        Неопределено);
	СтруктураОбмена.Вставить("ИмяФайла",                РезультатВыбораФайла.ПутьКФайлу);
	СтруктураОбмена.Вставить("ФайлАрхива",              Истина);
	
	ПараметрыФормыОбмена = Новый Структура("СтруктураЭД", СтруктураОбмена);
	
	ОткрытьФорму(
			"Обработка.ОбменСКонтрагентами.Форма.ЗагрузкаПросмотрЭлектронногоДокумента",
			ПараметрыФормыОбмена,
			,
			СтруктураОбмена.УникальныйИдентификатор);
	
	Возврат;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПрочитатьРеквизитыИзФайлаСчетаXMLНаСервере(АдресаФайловXML, УникальныйИдентификатор)
	
	РеквизитыСчета = Документы.СчетНаОплатуПокупателю.РазобратьСчетаНаОплатуПокупателюXML(АдресаФайловXML);
	Если ЗначениеЗаполнено(РеквизитыСчета) Тогда
		
		ЕстьОшибки = Ложь;
		НайденныеРеквизиты = РеквизитыСчета[0].ДанныеДокумента;
		АдресФайлаДанных = ПоместитьВоВременноеХранилище(НайденныеРеквизиты.ФайлДанных, УникальныйИдентификатор);
		
		СтруктураЭД = ЭлектронноеВзаимодействиеБП.ПолучитьСтруктуруЭД(
			НайденныеРеквизиты.ДанныеРазбора,
			УникальныйИдентификатор,
			АдресФайлаДанных,
			РеквизитыСчета[0].Наименование);
		НайденныеРеквизиты.ДанныеРазбора = СтруктураЭД.ДанныеФайлаРазбора;
		Обработки.ПрямойОбменЭД.ДополнитьСтруктуруРеквизитовСчета(НайденныеРеквизиты, ЕстьОшибки);
		
		Если ЕстьОшибки Тогда
			Возврат Неопределено;
		Иначе
			Возврат НайденныеРеквизиты;
		КонецЕсли;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СопоставлениеНоменклатурыЗавершение(Результат, РеквизитыСчета) Экспорт
	
	Отказ = Ложь;
	СчетСсылка = СоздатьСчетПоставщикаНаСервере(РеквизитыСчета, УникальныйИдентификатор, Отказ);
	Если Не Отказ Тогда
		ПараметрыФормы = Новый Структура("Ключ", СчетСсылка);
		ОткрытьФорму("Документ.СчетНаОплатуПоставщика.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьСчетПоставщикаНаСервере(Реквизиты, ИдентификаторФормы, Отказ)
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("АдресСтруктурыРазбораЭД",  "");
	ПараметрыФормирования.Вставить("ВидЭД",                    Неопределено);
	ПараметрыФормирования.Вставить("ДанныеФайлаРазбора",       Реквизиты.ДанныеРазбора);
	ПараметрыФормирования.Вставить("ДанныеФайлаКартинок",      Неопределено);
	ПараметрыФормирования.Вставить("ДанныеФайлаДопДанных",     Неопределено);
	ПараметрыФормирования.Вставить("ДокументИБ",               Неопределено);
	ПараметрыФормирования.Вставить("ИмяОбъектаМетаданных",     "");
	ПараметрыФормирования.Вставить("Контрагент",               Реквизиты.Контрагент);
	ПараметрыФормирования.Вставить("СпособЗагрузкиДокумента",  2);
	
	ДокументСсылка = Неопределено;
	
	ОбменСКонтрагентамиВнутренний.СформироватьДокументИБ(ПараметрыФормирования, ДокументСсылка, 
		"", Истина, Ложь, Отказ);
	
	Возврат ДокументСсылка;
	
КонецФункции

#КонецОбласти





























