#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	СпособУчетаНДСПриНачисленииПеней = ПолучитьСпособУчетаНДС();
		
	УстановитьУсловноеОформлениеВидимость();
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			РассчитатьСрокОплаты();
		КонецЕсли;
	КонецЕсли;
	
	ТекущийПериодАренды = Объект.НачалоПериода;
	ТекущийВидПериода = Объект.ВидПериода;
	
	ДоступныПолныеПрава = Пользователи.РолиДоступны("ПолныеПрава");
	ПолучитьПризнакФиксированнаяСуммаПени();
	УправлениеФормой(ЭтаФорма);

	ПравоРедактированияСрокаОплаты  = СрокиОплатыДокументов.ПравоРедактирования();
	Если Не ПравоРедактированияСрокаОплаты Тогда
		Элементы.СрокОплаты.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		Элементы.СрокОплаты.ТолькоПросмотр       = Истина;
	КонецЕсли;
	Если НЕ ПравоДоступа("Просмотр", Метаданные.ОбщиеФормы.СрокиОплатыПокупателями) Тогда
		// В подсказке отображается ссылка на общую форму СрокиОплатыПокупателям.
		// Без этой ссылки подсказка теряет смысл, поэтому в случае, если пользователю
		// недоступна форма, то не показываем подсказку.
		Элементы.СрокОплаты.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	КонецЕсли;
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиБП.КомандыЭДО_ФормаДокумента(ЭтотОбъект);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ЗаполнитьДобавленныеКолонкиТаблиц();

	ОтветственныеЛицаБП.УстановитьПодписиПоУмолчанию(ТекущийОбъект.Ссылка, ПараметрыЗаписи);
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец подсистема "ОбменСКонтрагентами". 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПодготовитьФормуНаСервере();
		РассчитатьСрокОплаты();
	КонецЕсли;
	
	ОтключитьВключитьКомандыПечатиДляРасчетаПеней();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СтруктураРеквизитовПодписи = Новый Структура;

	СтруктураРеквизитовПодписи.вставить("Руководитель",		"ЗаРуководителяНаОсновании");
	СтруктураРеквизитовПодписи.вставить("ГлавныйБухгалтер", "ЗаГлавногоБухгалтераНаОсновании");
	
	ОтветственныеЛицаБП.ПроверитьИзменениеПодписейДокумента(ТекущийОбъект,СтруктураРеквизитовПодписи,ПараметрыЗаписи);
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьСтатусДокумента(ТекущийОбъект.Ссылка);
	
	СрокиОплатыДокументов.ЗаписатьСрокОплатыДокумента(ТекущийОбъект.Ссылка, СрокОплаты);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Документ.АР_СчетНаАренду.Форма.ФормаРеквизитыОрганизацииКонтрагента" Тогда
		Модифицированность = Истина;
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененСтатусДокументов" Тогда
		// Статус документа изменен в форме списка или при проведении оплаты от покупателя
		Если Не Объект.Ссылка.Пустая() И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
			СтатусДокумента = ПолучитьСтатусДокумента(Объект.Организация, Объект.Ссылка);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ИзменениеНастроекПараметровУчета" Тогда
		
		ОбработатьОповещениеОбИзмененииНастроекПараметровУчета();
		
	КонецЕсли;

	// Подсистема "ОбменСКонтрагентами".
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец подсистема "ОбменСКонтрагентами".
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ВидОперацииПриИзмененииНаСервере();
	ОтключитьВключитьКомандыПечатиДляРасчетаПеней();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	ТребуетсяПерерасчитатьСрокОплаты = ПравоРедактированияСрокаОплаты 
		И Объект.Ссылка.Пустая() 
		И (НачалоДня(Объект.Дата) <> НачалоДня(ТекущаяДатаДокумента));
	
	Объект.ДатаКурса = Объект.Дата;
	ДатаПриИзмененииНаСервере(ТребуетсяПерерасчитатьСрокОплаты);

	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ДоговорКонтрагентаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработатьИзмененияПоКнопкеЦеныИВалюты();

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");

КонецПроцедуры

&НаКлиенте
Процедура ДатаКурсаПриИзменении(Элемент)
	
	ДатаКурсаПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРеквизитыОрганизацииКонтрагентаНажатие(Элемент)

	Если НЕ ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр", 				ТолькоПросмотр);
	ПараметрыФормы.Вставить("Контрагент",					Объект.Контрагент);
	ПараметрыФормы.Вставить("ГлавныйБухгалтер",				Объект.ГлавныйБухгалтер);
	ПараметрыФормы.Вставить("Организация",					Объект.Организация);
	ПараметрыФормы.Вставить("ДатаДокумента",				Объект.Дата);
	ПараметрыФормы.Вставить("ЗаГлавногоБухгалтераНаОсновании",Объект.ЗаГлавногоБухгалтераНаОсновании);
	ПараметрыФормы.Вставить("ЗаРуководителяНаОсновании", 	Объект.ЗаРуководителяНаОсновании);
	ПараметрыФормы.Вставить("Руководитель",					Объект.Руководитель);
	
	ОткрытьФорму("Документ.АР_СчетНаАренду.Форма.ФормаРеквизитыОрганизацииКонтрагента", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСостояниеЭДОНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	ОбменСКонтрагентамиКлиент.ОткрытьДеревоЭД(Объект.Ссылка);
	
КонецПроцедуры

#Область РаботаСПериодом

&НаКлиенте
Процедура ПериодНачалоВыбораЗавершение(СтруктураПериода, ДополнительныеПараметры) Экспорт
	
	// Установим полученный период
	Если СтруктураПериода <> Неопределено Тогда
		Объект.ВидПериода = СтруктураПериода.ВидПериода;
		Период = СтруктураПериода.Период;
		Объект.НачалоПериода = СтруктураПериода.НачалоПериода;
		Объект.ОкончаниеПериода = СтруктураПериода.КонецПериода;
		РассчитатьСрокОплаты();
		
		ОбновитьСодержаниеУслуг();
		ТекущийПериодАренды = Объект.НачалоПериода;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВидПериодаПриИзменении(Элемент)
	
	ВыборПериодаКлиент.ВидПериодаПриИзменении(Элемент, Объект.ВидПериода, Объект.НачалоПериода, Объект.ОкончаниеПериода, Период);
	ВыборПериодаКлиентСервер.ПереключитьТекущуюСтраницуВыбораПериода(Объект.ВидПериода, Элементы.ГруппаПоляВводаПериода);
	РассчитатьСрокОплаты();
	
	ОбновитьСодержаниеУслуг();
	ТекущийВидПериода = Объект.ВидПериода;
	ТекущийПериодАренды = Объект.НачалоПериода;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ВыборПериодаКлиент.ПериодПриИзменении(Элемент, Период, Объект.НачалоПериода, Объект.ОкончаниеПериода);
	РассчитатьСрокОплаты();
	
	ОбновитьСодержаниеУслуг();
	ТекущийПериодАренды = Объект.НачалоПериода;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПериодНачалоВыбораЗавершение", ЭтотОбъект);
	ВыборПериодаКлиент.ПериодНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка, 
		Объект.ВидПериода, Объект.НачалоПериода, ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура ПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВыборПериодаКлиент.ПериодОбработкаВыбора(
		Элемент, ВыбранноеЗначение, СтандартнаяОбработка,
		Объект.ВидПериода, Период, Объект.НачалоПериода, Объект.ОкончаниеПериода);
	
	РассчитатьСрокОплаты();
	
	ОбновитьСодержаниеУслуг();
	ТекущийПериодАренды = Объект.НачалоПериода;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ВыборПериодаКлиент.ПериодАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка,
		Объект.ВидПериода, Период, Объект.НачалоПериода, Объект.ОкончаниеПериода);
	
	ОбновитьСодержаниеУслуг();
	ТекущийПериодАренды = Объект.НачалоПериода;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборПериодаКлиент.ПериодОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка,
		Объект.ВидПериода, Период, Объект.НачалоПериода, Объект.ОкончаниеПериода);
	
	ОбновитьСодержаниеУслуг();
	ТекущийПериодАренды = Объект.НачалоПериода;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	РассчитатьСрокОплаты();
	
	ОбновитьСодержаниеУслуг();
	ТекущийПериодАренды = Объект.НачалоПериода;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСостав

&НаКлиенте
Процедура СоставПриИзменении(Элемент)
	
	РассчитатьСрокОплаты();
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Состав.ТекущиеДанные;
	ДанныеСтрокаТаблицы = Новый Структура("Номенклатура, ОбъектАренды, Контрагент, ДоговорКонтрагента, СтавкаНДС, СчетРасчетов, СчетДоходов, СчетУчета");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация, Ссылка, ОкончаниеПериода, СуммаВключаетНДС, Дата, НачалоПериода, ВидПериода, ВидОперации");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.АР_ВидыОперацийСчетНаАренду.ОплатаАренды") Тогда
		ПараметрыОбъекта.Дата = Объект.НачалоПериода;
	КонецЕсли;
	
	СоставНоменклатураПриИзмененииНаСервере(ДанныеСтрокаТаблицы, ПараметрыОбъекта);	
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокаТаблицы);
	
	ПриИзмененииСумма(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставСодержаниеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Состав.ТекущиеДанные;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.АР_ВидыОперацийСчетНаАренду.ОплатаАренды") Тогда
		РаботаСНоменклатуройКлиент.СодержаниеПриИзменении(ТекущиеДанные, Объект.НачалоПериода);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставОбъектАрендыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Состав.ТекущиеДанные;
	ТекущаяСтрока.Коэффициент = 1;
	ДанныеСтрокаТаблицы = Новый Структура("Номенклатура, СчетРасчетов, ОбъектАренды, Контрагент, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, ТекущаяСтрока);
	
	АР_ПроцедурыНачисления.ЗаполнитьДанныеПоАгентскимУслугам(ДанныеСтрокаТаблицы, Объект.Организация, Объект.ОкончаниеПериода);
	
	ЗаполнитьЗначенияСвойств(Элементы.Состав.ТекущиеДанные, ДанныеСтрокаТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПериодНачисленияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Состав.ТекущиеДанные;
	ПривестиКНачалуПериода(ТекущаяСтрока.ПериодАренды, Объект.ДоговорКонтрагента);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставСпособНачисленияПриИзменении(Элемент)

	РассчитатьСумму(Элементы.Состав.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставКоличествоПриИзменении(Элемент)
	
	РассчитатьСумму(Элементы.Состав.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставКоличествоДнейПриИзменении(Элемент)
	
	РассчитатьСумму(Элементы.Состав.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставСтавкаСпособаНачисленияПриИзменении(Элемент)
	
	РассчитатьСумму(Элементы.Состав.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Состав.ТекущиеДанные;
	ТекущиеДанные.Цена = ТекущиеДанные.Сумма / ?(ТекущиеДанные.Количество = 0, 1, ТекущиеДанные.Количество);
	ПриИзмененииСумма(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Состав.ТекущиеДанные;
	ПриИзмененииСумма(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура СоставСуммаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Состав.ТекущиеДанные;
	ПриИзмененииСуммаНДС(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьПостояннуюЧастьОплаты(Команда)
	
	ЗаполнитьСтрокиНаСервере(Истина);
	РассчитатьСрокОплаты();
	УстановитьСпециальныйКурс();
	
	ОбновитьИтоги(ЭтаФорма);
	СформироватьНадписьЦеныИВалюта(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПеременнуюЧастьОплаты(Команда)
	
	ЗаполнитьСтрокиНаСервере(Ложь);
	РассчитатьСрокОплаты();
	УстановитьСпециальныйКурс();
	
	ОбновитьИтоги(ЭтаФорма);
	СформироватьНадписьЦеныИВалюта(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСостав(Команда)
	
	Если Объект.Состав.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("СпроситьОбОчисткеТабЧасти", ЭтотОбъект, Истина);
		ПоказатьВопрос(Оповещение, "Табличная часть будет перезаполнена. Продолжить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

	Иначе	
		ЗаполнитьСтрокиНаСервере();
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСостав(Команда)
	
	Если Объект.Состав.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("СпроситьОбОчисткеТабЧасти", ЭтотОбъект, Ложь);
		ПоказатьВопрос(Оповещение, "Очистить табличную часть?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

	Иначе	
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаРеквизитовНаСервере

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	
	ВидОперацииОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииОбработатьИзменение()
	
	Если Объект.ВидОперации = Перечисления.АР_ВидыОперацийСчетНаАренду.ОплатаПени Тогда
		СпособУчетаНДС = Константы.АР_СпособУчетаНДСПриНачисленииПеней.Получить();
		Объект.СуммаВключаетНДС = ?(СпособУчетаНДС = Перечисления.АР_СпособыУчетаНДСПриНачисленииПеней.НДССверху, Ложь, Истина);
		Объект.ДокументБезНДС = ?(СпособУчетаНДС = Перечисления.АР_СпособыУчетаНДСПриНачисленииПеней.НеУчитыватьНДС, Истина, Ложь);
	Иначе
		Объект.ДокументБезНДС = НЕ ПлательщикНДС;
	КонецЕсли;
	РассчитатьСрокОплаты();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ТребуетсяПерерасчитатьСрокОплаты)
	
	УстановитьФункциональныеОпцииФормы();
	
	ПениПоАрендеБезНДС = Объект.ВидОперации = Перечисления.АР_ВидыОперацийСчетНаАренду.ОплатаПени 
		И СпособУчетаНДСПриНачисленииПеней = Перечисления.АР_СпособыУчетаНДСПриНачисленииПеней.НеУчитыватьНДС;
	
	Если ПлательщикНДС И НЕ ПениПоАрендеБезНДС Тогда 
		Объект.ДокументБезНДС = Ложь;
		СпособУчетаНДСПриНачисленииПеней = ПолучитьСпособУчетаНДС();
	КонецЕсли;
	
	Если (Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета) Тогда
		СтруктураКурсаДокумента        = АР_ПроцедурыНачисления.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.ДатаКурса, Объект.ДоговорКонтрагента);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	Если ТребуетсяПерерасчитатьСрокОплаты Тогда
		РассчитатьСрокОплаты();
	КонецЕсли;
	
	ПолучитьПризнакФиксированнаяСуммаПени();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДатаКурсаПриИзмененииНаСервере()
	
	Если (Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета) Тогда
		СтруктураКурсаДокумента        = АР_ПроцедурыНачисления.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.ДатаКурса, Объект.ДоговорКонтрагента);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ОрганизацияОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияОбработатьИзменение()

	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
		
	УстановитьФункциональныеОпцииФормы();

	ПениПоАрендеБезНДС = Объект.ВидОперации = Перечисления.АР_ВидыОперацийСчетНаАренду.ОплатаПени 
		И СпособУчетаНДСПриНачисленииПеней = Перечисления.АР_СпособыУчетаНДСПриНачисленииПеней.НеУчитыватьНДС;
	
	Если ПлательщикНДС И НЕ ПениПоАрендеБезНДС Тогда 
		Объект.ДокументБезНДС = Ложь;
		СпособУчетаНДСПриНачисленииПеней = ПолучитьСпособУчетаНДС();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентОбработатьИзменение();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	КонтрагентОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменение()

	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
		Объект.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация); 

	ДоговорКонтрагентаОбработатьИзменение();

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()
	
	ДоговорКонтрагентаОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение()

	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаДоИзменения = Объект.ВалютаДокумента;
	КурсДоИзменения   = Объект.КурсВзаиморасчетов;
	КратностьДоИзменения = Объект.КратностьВзаиморасчетов;
	СуммаВключаетНДСДоИзменения = Объект.СуммаВключаетНДС;

	РеквизитыДоговора = АР_ОбщиеПроцедуры.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов,Владелец, ТипЦен, РасчетыВУсловныхЕдиницах");

	Объект.ВалютаДокумента = РеквизитыДоговора.ВалютаВзаиморасчетов;
	ВалютаВзаиморасчетов = РеквизитыДоговора.ВалютаВзаиморасчетов;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Контрагент = РеквизитыДоговора.Владелец;	
	КонецЕсли;
	
	Если ВалютаДоИзменения <> Объект.ВалютаДокумента Тогда
		СтруктураКурсаДокумента        = АР_ПроцедурыНачисления.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.ДатаКурса, Объект.ДоговорКонтрагента);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("АР_ИспользоватьСхемуОпределенияСтавокНДСПоАрендеНаОсновеДоговора") И Объект.ВидОперации = Перечисления.АР_ВидыОперацийСчетНаАренду.ОплатаАренды Тогда
		ЗаполнитьПризнакиНДСПоДоговору();
	ИначеЕсли ЗначениеЗаполнено(РеквизитыДоговора.ТипЦен) И НЕ Объект.ВидОперации = Перечисления.АР_ВидыОперацийСчетНаАренду.ОплатаПени Тогда
		 Объект.СуммаВключаетНДС = РеквизитыДоговора.ТипЦен.ЦенаВключаетНДС;
	КонецЕсли;
	 
	ПересчитатьЦены = Объект.ВалютаДокумента <> ВалютаДоИзменения
		ИЛИ Объект.КурсВзаиморасчетов <> КурсДоИзменения;
	ПересчитатьНДС = Объект.СуммаВключаетНДС <> СуммаВключаетНДСДоИзменения;
	
	//ЗаполнитьРассчитатьСуммы(ВалютаДоИзменения, Ложь, ПересчитатьЦены, ПересчитатьНДС);
	
	ПараметрыОбъекта = Новый Структура("ВалютаДокумента,ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов, ДатаКурса, СуммаВключаетНДС, НачалоПериода, ОкончаниеПериода");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	ПараметрыОбъекта.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	Если Объект.ВидОперации = Перечисления.АР_ВидыОперацийСчетНаАренду.ОплатаДепозита Тогда
		ПараметрыОбъекта.Вставить("ЭтоДепозит");
	КонецЕсли;
	
	Если РеквизитыДоговора.РасчетыВУсловныхЕдиницах Тогда
		ВалютаОплаты = ВалютаРегламентированногоУчета;
	Иначе
		ВалютаОплаты = РеквизитыДоговора.ВалютаВзаиморасчетов;
	КонецЕсли;
	
	УчетДенежныхСредствБП.УстановитьБанковскийСчет(
		Объект.СчетОрганизации, Объект.Организация, ВалютаОплаты, Истина);
		
	ПересчитатьЦены = ВалютаДоИзменения <> Объект.ВалютаДокумента;
	ЗаполнитьРассчитатьСуммы(ВалютаДоИзменения, Ложь, ПересчитатьЦены, Ложь);	
	
	Если ПересчитатьНДС Тогда
		Для Каждого СтрокаТаблицы Из Объект.Состав Цикл
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС);
			СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
			ПостояннаяЧастьОплаты = АР_ОбщиеПроцедуры.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Номенклатура, "АР_ПостояннаяЧастьОплаты");
			СтрокаТаблицы.ВсегоКомУслуг = ?(ПостояннаяЧастьОплаты = Ложь, СтрокаТаблицы.Сумма, 0);
		КонецЦикла;
	КонецЕсли;
	
	РассчитатьСрокОплаты();
	ПолучитьПризнакФиксированнаяСуммаПени();
	
КонецПроцедуры

#КонецОбласти

#Область СтатусыДокументов

&НаСервереБезКонтекста
Функция ПолучитьСтатусДокумента(Знач Организация, Знач Ссылка)
	
	Возврат РегистрыСведений.СтатусыДокументов.ПолучитьСтатусыДокумента(Ссылка, Организация).Статус;
	
КонецФункции

&НаСервере
Процедура УстановитьСтатусДокумента(Ссылка)
	
	СтатусыДокумента = РегистрыСведений.СтатусыДокументов.НовыеСтатусыДокумента();
	СтатусыДокумента.Статус = СтатусДокумента;
		
	РегистрыСведений.СтатусыДокументов.УстановитьСтатусыДокумента(Ссылка, СтатусыДокумента);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	Если НЕ (Параметры.Свойство("Основание") И ЗначениеЗаполнено(Параметры.Основание) И ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.АР_НачислениеПени")) Тогда
		СпособУчетаНДСПриНачисленииПеней = Константы.АР_СпособУчетаНДСПриНачисленииПеней.Получить();
	КонецЕсли;
	
	СтатусДокумента = ПолучитьСтатусДокумента(Объект.Организация, Объект.Ссылка);
	СрокОплаты = СрокиОплатыДокументов.СрокОплатыСчетаПокупателю(Объект.Ссылка, Объект.Дата);
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.ДоговорКонтрагента, "ВидДоговора, РасчетыВУсловныхЕдиницах, ВалютаВзаиморасчетов");
		ВалютаВзаиморасчетов = РеквизитыДоговора.ВалютаВзаиморасчетов;
	Иначе	
		ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьПараметрыВыбора(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокиНаСервере(ПостояннаяЧастьОплаты = Истина, Основание = Неопределено)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.АР_ВидыОперацийСчетНаАренду.ОплатаДепозита") Тогда
		ДокументОбъект.ЗаполнитьСтрокиДепозит(Основание);	
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.АР_ВидыОперацийСчетНаАренду.ОплатаПени") Тогда
		ДокументОбъект.ЗаполнитьСтрокиПени();
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.АР_ВидыОперацийСчетНаАренду.ОплатаАренды") Тогда
		ДокументОбъект.ЗаполнитьСтроки(ПостояннаяЧастьОплаты, Ложь);	
	КонецЕсли;
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		
	// при данном способе ввода не была вызвана процедура ЗаполнитьДобавленныеКолонкиТаблиц
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

 	Для Каждого СтрокаТаблицы Из Объект.Состав Цикл
		
		СтрокаТаблицы.Всего 		= СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
		СтрокаТаблицы.ВсегоКомУслуг = ?(СтрокаТаблицы.Номенклатура.АР_ПостояннаяЧастьОплаты, 0, СтрокаТаблицы.Сумма);
		
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	ВидОперацииОплатаАренды = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.АР_ВидыОперацийСчетНаАренду.ОплатаАренды"));
	ВидОперацииОплатаПени = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.АР_ВидыОперацийСчетНаАренду.ОплатаПени"));
	ВидОперацииОплатаДепозита = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.АР_ВидыОперацийСчетНаАренду.ОплатаДепозита"));
	
	Элементы.ГруппаПериод.Видимость = ВидОперацииОплатаАренды;
	
	Элементы.Состав.КоманднаяПанель.ПодчиненныеЭлементы.СоставГруппаДобавить.Видимость = ВидОперацииОплатаАренды;
	Элементы.Состав.КоманднаяПанель.ПодчиненныеЭлементы.СоставЗаполнитьСостав.Видимость = НЕ ВидОперацииОплатаАренды;
	
	//Колонки, доступные только с видом операции "Оплата аренды"
	Элементы.СоставСпособНачисления.Видимость = ВидОперацииОплатаАренды;
	Элементы.СоставСтавкаСпособаНачисления.Видимость = ВидОперацииОплатаАренды;
	Элементы.СоставЦена.Видимость = ВидОперацииОплатаАренды ИЛИ ВидОперацииОплатаДепозита;
	Элементы.СоставКоличество.Видимость = ВидОперацииОплатаАренды ИЛИ ВидОперацииОплатаДепозита;
	Элементы.СоставКоличествоДней.Видимость = ВидОперацииОплатаАренды;
	
	//Колонки, доступные только с видом операции "Оплата пени"
	Элементы.СоставСтавкаПени.Заголовок = ?(Форма.ФиксированнаяСуммаПени, "Ставка пени", "Ставка пени, %");
	Элементы.СоставСрокОплаты.Видимость = ВидОперацииОплатаПени;
	Элементы.СоставКоличествоДнейПросрочки.Видимость = ВидОперацииОплатаПени;
	Элементы.СоставДолгЗаПериод.Видимость = ВидОперацииОплатаПени;
	Элементы.СоставСтавкаПени.Видимость = ВидОперацииОплатаПени;
	Элементы.СоставДокументРасчетов.Видимость = ВидОперацииОплатаПени;
	
	Элементы.СоставПериодНачисления.Видимость = ВидОперацииОплатаАренды ИЛИ ВидОперацииОплатаПени;
	
	Элементы.НеКонтролироватьСоответствиеСодержаниюДоговора.Доступность = Форма.ДоступныПолныеПрава;
	
	Элементы.ДатаКурса.Видимость = НЕ Форма.ВалютаРегламентированногоУчета = Объект.ВалютаДокумента;
	
	// для счетов на оплату депозита доступно изменение ставки
	Элементы.СоставЦена.ТолькоПросмотр = Не ВидОперацииОплатаДепозита;
	
	Элементы.ИтогиВсегоНДС.Видимость = Не Объект.ДокументБезНДС;
	
	ОбновитьИтоги(Форма);
	СформироватьНадписьЦеныИВалюта(Форма);
	
	Форма.Период = ВыборПериодаКлиентСервер.ПолучитьПредставлениеПериодаОтчета(
		Объект.ВидПериода, Объект.НачалоПериода, Объект.ОкончаниеПериода);
		
	ВыборПериодаКлиентСервер.ПереключитьТекущуюСтраницуВыбораПериода(Объект.ВидПериода, Элементы.ГруппаПоляВводаПериода);
	
	Элементы.СоставОбъектАренды.АвтоОтметкаНезаполненного = НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.АР_ВидыОперацийСчетНаАренду.ОплатаДепозита");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеВидимость()
	
	// СоставСтавкаНДС, СоставСуммаНДС
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СоставСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СоставСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СоставВсего");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ДокументБезНДС", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Форма.ИтогиВсего    		= Форма.Объект.Состав.Итог("Всего");
	Форма.ИтогиВсегоКомУслуги 	= Форма.Объект.Состав.Итог("ВсегоКомУслуг");
	Форма.ИтогиВсегоНДС 		= Форма.Объект.Состав.Итог("СуммаНДС");

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
	СтруктураНадписи = Новый Структура(
		"ВалютаДокумента, Курс, Кратность, СуммаВключаетНДС, ДокументБезНДС",
		Объект.ВалютаДокумента,
		Объект.КурсВзаиморасчетов,
		Объект.КратностьВзаиморасчетов,
		Объект.СуммаВключаетНДС,
		Объект.ДокументБезНДС);
	Форма.ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);

КонецПроцедуры 

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(ПересчитатьЦены = Ложь, ПерезаполнитьЦены = Ложь)

	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",      Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",                 Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность",            Объект.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",     Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("ДокументБезНДС",       Объект.ДокументБезНДС);
	СтруктураПараметров.Вставить("Контрагент",           Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",              Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация",          Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",        Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",    ПерезаполнитьЦены);
	СтруктураПараметров.Вставить("ПересчитатьЦены",      ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", Ложь);
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.АР_ВидыОперацийСчетНаАренду.ОплатаПени") Тогда 
		СтруктураПараметров.Вставить("ПениПоАрендеБезНДС",   Истина);
	КонецЕсли;

	// 2. Открываем форму "Цены и Валюта".
	ДополнительныеПараметры = Новый Структура;
	
	Если ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета Тогда 
		ОткрыватьИзМеню = Ложь;
	Иначе
		ОткрыватьИзМеню = Истина;
		ДополнительныеПараметры.Вставить("СтруктураПараметровКоманды", СтруктураПараметров);
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ОткрыватьИзМеню Тогда
		
		СписокКоманд = Новый СписокЗначений;
		
		Если НЕ ПлательщикНДС ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.АР_ВидыОперацийСчетНаАренду.ОплатаПени") Тогда 
			СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.ДокументБезНДС"));
		КонецЕсли;
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДССверху"));
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме"));
		
		ПоказатьВыборИзМеню(ОповещениеОЗакрытии, СписокКоманд, Элементы.ЦеныИВалюта);		
	Иначе
		ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,, ОповещениеОЗакрытии);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("СтруктураПараметровКоманды") Тогда
		
		СтруктураЦеныИВалюта = ДополнительныеПараметры.СтруктураПараметровКоманды;
		
		СуммаВключаетНДСДоИзменения = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Если РезультатЗакрытия = Неопределено Тогда 
			Возврат;
		ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.ДокументБезНДС") Тогда
			СтруктураЦеныИВалюта.ДокументБезНДС 	= Истина;
		ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме") Тогда
			СтруктураЦеныИВалюта.ДокументБезНДС 	= Ложь;
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Истина;
		Иначе
			СтруктураЦеныИВалюта.ДокументБезНДС 	= Ложь;
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Ложь;
		КонецЕсли;
		
		СтруктураЦеныИВалюта.Вставить("ПерезаполнитьЦены",    Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьЦены",      Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьНДС",       СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС
			ИЛИ Объект.ДокументБезНДС <> СтруктураЦеныИВалюта.ДокументБезНДС);
		СтруктураЦеныИВалюта.Вставить("БылиВнесеныИзменения", СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС
			ИЛИ Объект.ДокументБезНДС <> СтруктураЦеныИВалюта.ДокументБезНДС);
			
	Иначе
		СтруктураЦеныИВалюта = РезультатЗакрытия;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") Тогда

		ВалютаДоИзменения    = Объект.ВалютаДокумента;
		КурсДоИзменения      = Объект.КурсВзаиморасчетов;
		КратностьДоИзменения = Объект.КратностьВзаиморасчетов;
		
		Объект.ВалютаДокумента         = СтруктураЦеныИВалюта.ВалютаДокумента;
		Объект.КурсВзаиморасчетов      = СтруктураЦеныИВалюта.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.Кратность;
		Объект.СуммаВключаетНДС        = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Объект.ДокументБезНДС		   = СтруктураЦеныИВалюта.ДокументБезНДС;
		
		Модифицированность = Истина;

		ПересчитатьНДС = СтруктураЦеныИВалюта.ПересчитатьНДС;
		ПересчитатьЦены = ВалютаДоИзменения <> СтруктураЦеныИВалюта.ВалютаДокумента;
		
		ЗаполнитьРассчитатьСуммы(ВалютаДоИзменения, 
			Ложь, // в аренде нет заполнения цен по ценам номенклатуры 
			ПересчитатьЦены, 
			Ложь, // не используем типовой пересчет НДС
			Объект.ДокументБезНДС);
			
		Если ПересчитатьНДС Тогда
			Для Каждого Стр Из Объект.Состав Цикл
				ПриИзмененииСумма(Стр);	
			КонецЦикла;
		КонецЕсли;
		
		ОбновитьИтоги(ЭтаФорма);
		СформироватьНадписьЦеныИВалюта(ЭтаФорма);
				
	КонецЕсли;
	СпособУчетаНДСПриНачисленииПеней = ПолучитьСпособУчетаНДС();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммы(Знач ВалютаДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь, ДокументБезНДС = Ложь)

	Если НЕ (ПерезаполнитьЦены ИЛИ ПересчитатьЦены ИЛИ ПересчитатьНДС ИЛИ ДокументБезНДС) Тогда
		Возврат;
	КонецЕсли;

	Если ПерезаполнитьЦены Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Дата",            Объект.Дата);
		Запрос.УстановитьПараметр("Состав",          Объект.Состав.Выгрузить());

		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокумента.Номенклатура
		|ПОМЕСТИТЬ ТаблицаСостав
		|ИЗ
		|	&Состав КАК ТаблицаДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаСостав.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ТаблицаНоменклатуры
		|ИЗ
		|	ТаблицаСостав КАК ТаблицаТовары
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Курс КАК Курс,
		|	КурсыВалютСрезПоследних.Кратность КАК Кратность,
		|	КурсыВалютСрезПоследних.Валюта КАК Валюта
		|ПОМЕСТИТЬ КурсыВалют
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Цена,
		|	ЦеныНоменклатурыСрезПоследних.Валюта КАК Валюта,
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура
		|ПОМЕСТИТЬ ЦеныНоменклатуры
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНоменклатуры.Номенклатура,
		|	КурсыВалют.Курс,
		|	КурсыВалют.Кратность,
		|	ЦеныНоменклатуры.Цена,
		|	ЦеныНоменклатуры.Валюта
		|ИЗ
		|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|		ПО ТаблицаНоменклатуры.Номенклатура = ЦеныНоменклатуры.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|		ПО (ЦеныНоменклатуры.Валюта = КурсыВалют.Валюта)";

		Результат = Запрос.Выполнить().Выбрать();
	ИначеЕсли ПересчитатьЦены Тогда
		СтруктураКурса = АР_ПроцедурыНачисления.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.ДатаКурса, Объект.ДоговорКонтрагента);
	КонецЕсли;

	Для Каждого Строка Из Объект.Состав Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, Результат, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 1, ДокументБезНДС);
	КонецЦикла;

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммыВСтроке(Строка, Результат, ВалютаПередИзменением, СтруктураКурса,
										ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, ЕстьНДС,
										ЗначениеПустогоКоличества, ДокументБезНДС = Ложь)

	Если ПерезаполнитьЦены Тогда // в нашем случае не используется, нет типа цен
		Результат.Сбросить();
		Если Результат.НайтиСледующий(Строка.Номенклатура, "Номенклатура") Тогда

			Сумма = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
				Результат.Сумма, Результат.Валюта, Объект.ВалютаДокумента, Результат.Курс,
				Результат.Кратность, Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов);

		Иначе
			Сумма = 0;
		КонецЕсли;
		// Признак того, что цена включает НДС, хранится в реквизите ЦенаВключаетНДС типа цен
		ЦенаВключаетНДС = Ложь;
	Иначе
		Если ПересчитатьЦены Тогда

			Сумма = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
				Строка.Сумма, ВалютаПередИзменением, Объект.ВалютаДокумента, СтруктураКурса.Курс,
				СтруктураКурса.Кратность, Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов);

		Иначе
			Сумма = Строка.Сумма;
		КонецЕсли;
		// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа
		ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);
	КонецЕсли;

	Если ДокументБезНДС Тогда
		Строка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
	
	Если ЕстьНДС Тогда

		Строка.Сумма = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			Сумма, ЦенаВключаетНДС, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));

		Строка.Цена = Строка.Сумма / ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
		Строка.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(Строка.Сумма, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
		Строка.Всего 	= Строка.Сумма + ?(Объект.СуммаВключаетНДС, 0, Строка.СуммаНДС);

	Иначе
		Строка.Сумма = Сумма;
		Строка.Цена = Строка.Сумма / ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПересчитатьЦеныВалНаСервере(ТекущиеДанные, ВалютаСпособа)

	СтруктураКурса = АР_ПроцедурыНачисления.ПолучитьКурсВалюты(ВалютаСпособа, Объект.ДатаКурса, Объект.ДоговорКонтрагента);
	ЗаполнитьРассчитатьСуммыВСтроке(ТекущиеДанные, Неопределено, ВалютаСпособа, СтруктураКурса, Ложь, Истина, Ложь, Истина, 0);

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСумма(СтрокаТаблицы)

	СтрокаТаблицы.Цена = СтрокаТаблицы.Сумма / ?(СтрокаТаблицы.Количество = 0, 1, СтрокаТаблицы.Количество);
	
	Если СтрокаТаблицы.Свойство("СуммаНДС") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	КонецЕсли;

	Если СтрокаТаблицы.Свойство("Всего") Тогда
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЕсли;

	Если СтрокаТаблицы.Свойство("ВсегоКомУслуг") Тогда
		ПостояннаяЧастьОплаты = АР_ОбщиеПроцедуры.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Номенклатура, "АР_ПостояннаяЧастьОплаты");
		СтрокаТаблицы.ВсегоКомУслуг = ?(ПостояннаяЧастьОплаты = Ложь, СтрокаТаблицы.Сумма, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСуммаНДС(СтрокаТаблицы)

	Если СтрокаТаблицы.Свойство("Всего") Тогда
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЕсли;

	Если СтрокаТаблицы.Свойство("ВсегоКомУслуг") Тогда
		ПостояннаяЧастьОплаты = АР_ОбщиеПроцедуры.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Номенклатура, "АР_ПостояннаяЧастьОплаты");
		СтрокаТаблицы.ВсегоКомУслуг = ?(ПостояннаяЧастьОплаты = Ложь, СтрокаТаблицы.Сумма, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоставНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ПараметрыОбъекта)

	МетаданныеДокумента = ПараметрыОбъекта.Ссылка.Метаданные();
	
	НаименованиеПолное = СтрокаТабличнойЧасти.Номенклатура.НаименованиеПолное;
	Если ПустаяСтрока(НаименованиеПолное) Тогда
		СтрокаТабличнойЧасти.Вставить("Содержание", СтрокаТабличнойЧасти.Номенклатура.Наименование);
	Иначе
		СтрокаТабличнойЧасти.Вставить("Содержание", НаименованиеПолное);
	КонецЕсли;
	Если ПараметрыОбъекта.ВидОперации = Перечисления.АР_ВидыОперацийСчетНаАренду.ОплатаАренды Тогда
		СтрокаТабличнойЧасти.Содержание = РаботаСНоменклатуройКлиентСервер.СодержаниеУслуги(СтрокаТабличнойЧасти.Содержание, СтрокаТабличнойЧасти.Номенклатура.ПериодичностьУслуги, 
			ПараметрыОбъекта.НачалоПериода, Истина, ПараметрыОбъекта.ВидПериода);
	КонецЕсли;
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ПараметрыОбъекта, Ложь, Ложь);
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(ПараметрыОбъекта.Организация, ПараметрыОбъекта.Дата);
	ПрименяетсяОсвобождениеОтУплатыНДС = УчетнаяПолитика.ПрименяетсяОсвобождениеОтУплатыНДС(ПараметрыОбъекта.Организация, ПараметрыОбъекта.Дата);
	Если НЕ ПлательщикНДС ИЛИ ПрименяетсяОсвобождениеОтУплатыНДС Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	ИначеЕсли СведенияОНоменклатуре <> Неопределено Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = СведенияОНоменклатуре.СтавкаНДС;
	КонецЕсли;

	АР_ПроцедурыНачисления.ЗаполнитьДанныеПоАгентскимУслугам(СтрокаТабличнойЧасти, ПараметрыОбъекта.Организация, ПараметрыОбъекта.ОкончаниеПериода);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ПрименяетсяУСН = УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация, Объект.Дата);
	ПлательщикНДС  = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура ПривестиКНачалуПериода(Дата, Договор) 
	
	Если ТипЗнч(Дата) = Тип("Дата") Тогда
		Если ЗначениеЗаполнено(Договор) Тогда 
			Дата = АР_ОбщиеПроцедуры.ОпределитьНачалоПериодаОплатыПоДоговору(Дата, Договор);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбора(Форма)

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСпециальныйКурс()
	
	Если Объект.Состав.Количество() > 0 Тогда
		Если Объект.ВалютаДокумента = АР_ОбщиеПроцедуры.ЗначениеРеквизитаОбъекта(Объект.Состав[0].СпособНачисления, "Валюта") Тогда
			СтруктураКурса = АР_ПроцедурыНачисления.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.ДатаКурса, Объект.ДоговорКонтрагента);
			Если СтруктураКурса.СпециальныйКурс И Объект.КурсВзаиморасчетов <> СтруктураКурса.Курс Тогда
				Объект.КурсВзаиморасчетов = СтруктураКурса.Курс;
				Объект.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
				СформироватьНадписьЦеныИВалюта(ЭтаФорма);
			КонецЕсли;
		КонецЕсли;  
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьВидЭД()
	
	ДоступныеЗначения = Новый СписокЗначений;
	ДоступныеЗначения.Добавить(Перечисления.ВидыЭД.АктИсполнитель, "Акт об оказании услуг");
	ДоступныеЗначения.Добавить(Перечисления.ВидыЭД.АктНаПередачуПрав, "Акт на передачу прав");
	
	Элементы.ВидЭД.СписокВыбора.Очистить();
	Для Каждого ЭлементСписка Из ДоступныеЗначения Цикл 
		Элементы.ВидЭД.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ВидЭлектронногоДокумента = Перечисления.ВидыЭД.АктИсполнитель; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакиНДСПоДоговору()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	АР_СтавкиСрезПоследних.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.АР_Ставки.СрезПоследних(
	|			&Период,
	|			Договор = &Договор
	|				И (СрокДействия >= &Период
	|					ИЛИ СрокДействия = ДАТАВРЕМЯ(1, 1, 1))) КАК АР_СтавкиСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	АР_СтавкиСрезПоследних.Период УБЫВ";
	
	Запрос.УстановитьПараметр("Договор", Объект.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Объект.СуммаВключаетНДС = Выборка.Регистратор.СуммаВключаетНДС;
		Объект.ДокументБезНДС = Выборка.Регистратор.ДокументБезНДС;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСпособУчетаНДС()
	
	Если НЕ Объект.ВидОперации = Перечисления.АР_ВидыОперацийСчетНаАренду.ОплатаПени Тогда
		Возврат Перечисления.АР_СпособыУчетаНДСПриНачисленииПеней.ПустаяСсылка();
	КонецЕсли;
	
	Если Объект.ДокументБезНДС Тогда
		Возврат Перечисления.АР_СпособыУчетаНДСПриНачисленииПеней.НеУчитыватьНДС;
	ИначеЕсли Объект.СуммаВключаетНДС Тогда
		Возврат Перечисления.АР_СпособыУчетаНДСПриНачисленииПеней.НДСВСумме;
	Иначе
		Возврат Перечисления.АР_СпособыУчетаНДСПриНачисленииПеней.НДССверху;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СпроситьОбОчисткеТабЧасти(РезультатВопроса, ЗаполнитьТабЧасть) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Состав.Очистить();	
		Если ЗаполнитьТабЧасть Тогда
			ЗаполнитьСтрокиНаСервере();
		КонецЕсли;
		РассчитатьСрокОплаты();
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСумму(ТекущиеДанные)
	
	ДанныеСтрокаТаблицы = Новый Структура("Номенклатура, СтавкаСпособаНачисления, Цена, СпособНачисления, Сумма, Количество, КоличествоДней, СтавкаНДС, СуммаНДС, Всего");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("НачалоПериода", Объект.НачалоПериода);
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.АР_ВидыОперацийСчетНаАренду.ОплатаДепозита") Тогда
		ПараметрыОбъекта.Вставить("ЭтоДепозит");
	КонецЕсли;
	
	АР_ОбщиеПроцедурыКлиентСервер.РассчитатьСумму(ДанныеСтрокаТаблицы, ПараметрыОбъекта);
	
	ВалютаСпособа = АР_ОбщиеПроцедуры.ЗначениеРеквизитаОбъекта(ДанныеСтрокаТаблицы.СпособНачисления, "Валюта");
	Если ЗначениеЗаполнено(ВалютаСпособа) И НЕ ВалютаСпособа = Объект.ВалютаДокумента Тогда
		ПересчитатьЦеныВалНаСервере(ДанныеСтрокаТаблицы, ВалютаСпособа);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокаТаблицы);
	
	ПриИзмененииСумма(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()

	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ОбработатьОповещениеОбИзмененииНастроекПараметровУчета()
	
	
КонецПроцедуры

&НаКлиенте
Процедура СрокОплатыРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ПараметрыОткрытия", Новый Структура("АктивныйЭлемент", "СрокОплатыВыставленныхСчетов"));
	
	ОткрытьФорму("ОбщаяФорма.СрокиОплатыПокупателями", ПараметрыОткрытия);
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьВключитьКомандыПечатиДляРасчетаПеней(ВключитьКоманды = Ложь)
	
	Если Объект.ВидОперации = Перечисления.АР_ВидыОперацийСчетНаАренду.ОплатаПени Тогда
		ВключитьКоманды = Истина;
	Иначе
		ВключитьКоманды = Ложь;
	КонецЕсли;
	
	СписокОтключаемыхКоманд = Новый Массив;
	СписокОтключаемыхКоманд.Добавить("СправкаРасчетПеней");
	
	ПодменюПечать = ЭтаФорма.Элементы.Найти("ПодменюПечать");
	Если НЕ ПодменюПечать = Неопределено Тогда
		Для Каждого Элемент Из СписокОтключаемыхКоманд Цикл
			АР_МодификацияКонфигурации.ОтключитьКомандыПечати(ПодменюПечать, Элемент, ВключитьКоманды);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСрокОплаты()
	
	Если Объект.Ссылка.Пустая() Тогда
		СрокОплаты = АР_ПроцедурыНачисления.ПолучитьСрокОплатыСчетаНаАренду(Объект);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПолучитьПризнакФиксированнаяСуммаПени()
	
	ПараметрыПени = АР_ПроцедурыНачисления.ПолучитьПараметрыНачисленияПени(Объект.ДоговорКонтрагента, Объект.Дата);
	Если ПараметрыПени = Неопределено Тогда
		ФиксированнаяСуммаПени = Ложь;
	Иначе
		ФиксированнаяСуммаПени = ПараметрыПени.СпособНачисленияПени = Перечисления.АР_СпособыНачисленияПени.Суммой;
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));

КонецПроцедуры

&НаСервере
Процедура ОбновитьСодержаниеУслуг()
	РаботаСНоменклатурой.ОбновитьСодержаниеУслуг(Объект.Состав, Объект.НачалоПериода, ТекущийПериодАренды, Объект.ВидПериода, ТекущийВидПериода);
КонецПроцедуры

