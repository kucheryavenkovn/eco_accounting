
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	ИспользоватьГрафикСтавок = ПолучитьФункциональнуюОпцию("АР_ИспользоватьГрафикИзмененияСтавокВДоговорахАренды");
	ИспользоватьСписокСчетчиков = ПолучитьФункциональнуюОпцию("АР_ИспользоватьНесколькоСчетчиковДляУслуги");
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ОчиститьГрафикиСтавокСпискиСчетчиков(Ложь);
	КонецЕсли;
	ЗаполнитьСуммыПостояннойЧасти();
	ЗаполнитьДобавленныеКолонки();
	
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ИспользоватьВалютныйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьВалютныйУчет");
	
	ВестиВзаиморасчетыПоУслугам = Объект.ДоговорКонтрагента.АР_ВестиВзаиморасчетыПоУслугам;
	
	СформироватьНадписьЦеныИВалюта(ЭтаФорма);
	НастроитьТекстИнформацииОНовойСхемеНДС();
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Документ.АР_ЗаключениеДоговораАренды",
		"ФормаДокумента",
		НСтр("ru='Новости: Заключение договора аренды'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьФункциональныеОпцииФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимость();
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьСуммыПостояннойЧасти();
	ЗаполнитьДобавленныеКолонки();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ЗаписьИзФормы", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ГрафикСтавок" И Параметр.Документ = Объект.Ссылка Тогда
		Если Параметр.ЭтоПостояннаяЧасть Тогда
			ТекущиеДанные = Элементы.ПостояннаяЧастьАренднойПлаты.ТекущиеДанные;
		Иначе
			ТекущиеДанные = Элементы.ПеременнаяЧастьАренднойПлаты.ТекущиеДанные;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Ставка) Тогда
			ТекущиеДанные.Ставка = Параметр.График;
		КонецЕсли;
		Если Параметр.ЭтоПостояннаяЧасть Тогда
			ЗаполнитьСуммыПостояннойЧасти();
		КонецЕсли;
		СформироватьНадписьГрафикаСтавок(ТекущиеДанные.Ставка);
	ИначеЕсли ИмяСобытия = "Запись_СписокСчетчиков" И Параметр.Документ = Объект.Ссылка Тогда
		ТекущиеДанные = Элементы.ПеременнаяЧастьАренднойПлаты.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Счетчик) Тогда
			ТекущиеДанные.Счетчик = Параметр.СписокСчетчиков;
			ТекущиеДанные.КоэффициентОтнесенияСчетчика = 0;
			ТекущиеДанные.ЗаполненСписокСчетчиков = Истина;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ИзмененаСхемаОпределенияСтавокНДС" Тогда
		НастроитьТекстИнформацииОНовойСхемеНДС();
	КонецЕсли;
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Для Каждого Элемент Из ВыбранноеЗначение Цикл
			Если ТипЗнч(Элемент) = Тип("СправочникСсылка.АР_ОбъектыАренды") Тогда
				ЭтоПостояннаяЧасть = Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПостояннаяЧастьАренднойПлаты;
				ИмяТабЧасти = ?(ЭтоПостояннаяЧасть, "ПостояннаяЧастьАренднойПлаты", "ПеременнаяЧастьАренднойПлаты");
				СтрокаТЧ = Объект[ИмяТабЧасти].Добавить();
				Если ЭтоПостояннаяЧасть Тогда
					СтрокаТЧ.Услуга = ПолучитьУслугуАренда();
					СтрокаТЧ.СпособНачисления = ПолучитьОсновнойСпособНачисления();
					СтрокаТЧ.ДатаНачалаСрокаАренды = Объект.ДатаЗаключенияДоговора;
					СтрокаТЧ.ДатаОкончанияСрокаАренды = Объект.ДатаОкончанияДоговора;
				Иначе
					СтрокаТЧ.СпособНачисления = ПолучитьОсновнойСпособНачисления();
					СтрокаТЧ.ДатаНачалаСрокаАренды = Объект.ДатаЗаключенияДоговора;
					СтрокаТЧ.ДатаОкончанияСрокаАренды = Объект.ДатаОкончанияДоговора;
					СтрокаТЧ.КоэффициентОтнесенияСчетчика = 1;
				КонецЕсли;
				СтрокаТЧ.ОбъектАренды = Элемент;
				ПриВыбореОбъектаАренды(СтрокаТЧ);
				ПриИзмененииУслуги(СтрокаТЧ);
			КонецЕсли;
		КонецЦикла;
		ЗаполнитьСуммыПостояннойЧасти();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиенте
Процедура НастроитьЭлементСтавки(Элемент, Значение)
	
	Элемент.КнопкаОткрытия = ИспользоватьГрафикСтавок И (ТипЗнч(Значение) = Тип("СправочникСсылка.АР_ГрафикиИзмененияСтавокНаУслуги"));
	
КонецПроцедуры

&НаСервере
//Процедура создает новый договор для заданной в шапке документа организации и арендатора
Процедура СоздатьНовыйДоговорНаСервере(Отказ = Неопределено)
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = "Не указан арендатор";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Контрагент",, Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = "Не указана организация";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Организация",, Отказ);
	КонецЕсли;
	
	Если Не Отказ Тогда
		НовоеНаименование = "№ "+ ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Объект.Номер, Истина, Истина) + " от " + Формат(Объект.Дата, "ДФ=""дд ММММ гггг""");
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
		Запрос.УстановитьПараметр("Наименование", НовоеНаименование);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Организация = &Организация
		|	И ДоговорыКонтрагентов.Владелец = &Контрагент
		|	И ДоговорыКонтрагентов.Наименование = &Наименование
		|	И ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
		|	И ДоговорыКонтрагентов.АР_АрендныйДоговор
		|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Сообщить("Договор для этого документа уже существует!");
		Иначе	
			НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			НовыйДоговор.Владелец = Объект.Контрагент;
			НовыйДоговор.Наименование = НовоеНаименование;
										
			НовыйДоговор.Организация = Объект.Организация;
			НовыйДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
			НовыйДоговор.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
			НовыйДоговор.АР_АрендныйДоговор = Истина;
			
		    Попытка
				НовыйДоговор.Записать();
				Объект.ДоговорКонтрагента = НовыйДоговор.Ссылка;
				ОчиститьГрафикиСтавокСпискиСчетчиков();
			Исключение
				Сообщить("Не удалось записать договор контрагента", СтатусСообщения.Важное);
			КонецПопытки;
			
			УстановитьПризнакВеденияВзаиморасчетовПоУслугам();
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьГрафикиСтавокСпискиСчетчиков(ПоДоговору = Истина)
	
	Для Каждого СтрокаТЧ Из Объект.ПостояннаяЧастьАренднойПлаты Цикл
		Если ТипЗнч(СтрокаТЧ.Ставка) = Тип("СправочникСсылка.АР_ГрафикиИзмененияСтавокНаУслуги")
			И (СтрокаТЧ.Ставка.Владелец <> Объект.ДоговорКонтрагента ИЛИ Не ПоДоговору) Тогда
			СтрокаТЧ.Ставка = Неопределено;
		КонецЕсли;		
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из Объект.ПеременнаяЧастьАренднойПлаты Цикл
		Если ТипЗнч(СтрокаТЧ.Ставка) = Тип("СправочникСсылка.АР_ГрафикиИзмененияСтавокНаУслуги")
			И (СтрокаТЧ.Ставка.Владелец <> Объект.ДоговорКонтрагента ИЛИ Не ПоДоговору) Тогда
			СтрокаТЧ.Ставка = Неопределено;
		КонецЕсли;		
		Если ТипЗнч(СтрокаТЧ.Счетчик) = Тип("СправочникСсылка.АР_СпискиСчетчиков")
			И (СтрокаТЧ.Счетчик.Владелец <> Объект.ДоговорКонтрагента ИЛИ Не ПоДоговору) Тогда
			СтрокаТЧ.Счетчик = Неопределено;
		КонецЕсли;		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	КонтрагентОбработатьИзменение();

КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменение()

	СписокВидовДоговоров = Новый Массив;
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	
	СтруктураОтбора = Новый Структура("ЗначениеОтбора", Истина); 
	СтруктураПараметров = Новый Структура("АР_АрендныйДоговор", СтруктураОтбора);
	
	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
		Объект.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация, 
		СписокВидовДоговоров, СтруктураПараметров);
	УстановитьПризнакВеденияВзаиморасчетовПоУслугам();

КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореОбъектаАренды(ТекСтрока)
	
	ТекСтрока.Количество = АР_ОбщиеПроцедуры.ЗначениеРеквизитаОбъекта(ТекСтрока.ОбъектАренды, "ЗначениеХарактеристики");
	Если Не ЗначениеЗаполнено(ТекСтрока.Ставка) Тогда
		ОбновитьСтавку(ТекСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтавкуНаСервере(СтруктураСвойств)
	
	Если (ТипЗнч(СтруктураСвойств.Ставка) = Тип("Число") ИЛИ СтруктураСвойств.Ставка = Неопределено) И ЗначениеЗаполнено(СтруктураСвойств.ОбъектАренды.КатегорияЦен) И ЗначениеЗаполнено(СтруктураСвойств.Услуга) Тогда
		ПараметрыОтбора = Новый Структура("КатегорияЦен, Услуга", СтруктураСвойств.ОбъектАренды.КатегорияЦен, СтруктураСвойств.Услуга);
		СтруктураЗаписи = РегистрыСведений.АР_ЦеныНаАренду.ПолучитьПоследнее(КонецДня(Объект.Дата), ПараметрыОтбора);
		СтруктураСвойств.ПривестиКЧислу = НЕ СтруктураСвойств.Ставка = Неопределено;
		Если ЗначениеЗаполнено(СтруктураЗаписи.Ставка) Тогда
			СтруктураСвойств.Ставка = СтруктураЗаписи.Ставка;
			СтруктураСвойств.СпособНачисления = СтруктураЗаписи.СпособНачисления;
			СтруктураСвойств.ПривестиКЧислу = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтавку(ТекущиеДанные)
	
	СтруктураСвойств = Новый Структура("Ставка, СпособНачисления, ОбъектАренды, Услуга, ПривестиКЧислу");
	ЗаполнитьЗначенияСвойств(СтруктураСвойств, ТекущиеДанные);
	ОбновитьСтавкуНаСервере(СтруктураСвойств);
	Если НЕ СтруктураСвойств.ПривестиКЧислу = Неопределено И СтруктураСвойств.ПривестиКЧислу Тогда
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураСвойств);
	КонецЕсли;
	ЗаполнитьСуммыПостояннойЧасти();
	
КонецПроцедуры

 &НаКлиенте
//Процедура предназначена для выравнивания сроков аренды объектов на границы действия договора
Процедура ОбновитьСрокиАренды(ТипИзмененияСроков = 1) // 1 - изменены и даты начала и дата окончания; 2 - только дата начала; 3 - только дата окончания
	
	Для Каждого СтрокаТЧ Из Объект.ПостояннаяЧастьАренднойПлаты Цикл
		Если ТипИзмененияСроков = 1 Тогда
			СтрокаТЧ.ДатаНачалаСрокаАренды = Объект.ДатаЗаключенияДоговора;
			СтрокаТЧ.ДатаОкончанияСрокаАренды = Объект.ДатаОкончанияДоговора;
		ИначеЕсли ТипИзмененияСроков = 2 Тогда
			СтрокаТЧ.ДатаНачалаСрокаАренды = Объект.ДатаЗаключенияДоговора;
		Иначе
			СтрокаТЧ.ДатаОкончанияСрокаАренды = Объект.ДатаОкончанияДоговора;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из Объект.ПеременнаяЧастьАренднойПлаты Цикл
		Если ТипИзмененияСроков = 1 Тогда
			СтрокаТЧ.ДатаНачалаСрокаАренды = Объект.ДатаЗаключенияДоговора;
			СтрокаТЧ.ДатаОкончанияСрокаАренды = Объект.ДатаОкончанияДоговора;
		ИначеЕсли ТипИзмененияСроков = 2 Тогда
			СтрокаТЧ.ДатаНачалаСрокаАренды = Объект.ДатаЗаключенияДоговора;
		Иначе
			СтрокаТЧ.ДатаОкончанияСрокаАренды = Объект.ДатаОкончанияДоговора;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СпроситьОбИзменении(ТекстВопроса, ВариантДействия)
	
	ДополнительныеПараметры = Новый Структура("ВариантДействия", ВариантДействия);
	Оповещение = Новый ОписаниеОповещения("СпроситьОбИзмененииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет, "Вопрос");	
	
КонецПроцедуры

&НаКлиенте
Процедура СпроситьОбИзмененииЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОбновитьСрокиАренды(ДополнительныеПараметры.ВариантДействия);		
	КонецЕсли;                                                       	
		
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьСоСрокамиДоговора(Значение)
	
	Если Значение < Объект.ДатаЗаключенияДоговора Тогда
		Значение = Объект.ДатаЗаключенияДоговора;
	ИначеЕсли Значение > Объект.ДатаОкончанияДоговора Тогда
		Значение = Объект.ДатаОкончанияДоговора;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоСпециальномуКурсуНаСервере()
	
	Если Объект.ПостояннаяЧастьАренднойПлаты.Количество() > 0 Тогда
		Объект.ВалютаСпособаНачисления = Объект.ПостояннаяЧастьАренднойПлаты[0].СпособНачисления.Валюта;
	ИначеЕсли Объект.ПеременнаяЧастьАренднойПлаты.Количество() > 0 Тогда
		Объект.ВалютаСпособаНачисления = Объект.ПеременнаяЧастьАренднойПлаты[0].СпособНачисления.Валюта;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.СпособРасчета) Тогда
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаСпособаНачисления, Объект.Дата);
		СпособРасчета = Перечисления.АР_СпособыРасчетаКурсаВалюты.Фиксированный;
		Объект.Курс = СтруктураКурса.Курс;
		Объект.Кратность = СтруктураКурса.Кратность;
		Объект.Коэффициент = 1;
		Объект.НижняяГраница = 0;
		Объект.ВерхняяГраница = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНадписьГрафикаСтавок(Ставка)
	
	Если ИспользоватьГрафикСтавок Тогда
		Если ТипЗнч(Ставка) = Тип("Число") Тогда
			НадписьГрафикСтавок = "Ставка " + " с " + Формат(Объект.Дата, "ДФ=dd.MM.yyyy") + " - " + Формат(Ставка, "ЧДЦ=2");
		ИначеЕсли ТипЗнч(Ставка) = Тип("СправочникСсылка.АР_ГрафикиИзмененияСтавокНаУслуги") Тогда
			Если Ставка.ГрафикСтавок.Количество() = 0 Тогда
				НадписьГрафикСтавок = "График ставок не задан!";
			Иначе
				ТекстСтавки = "";
				Для Каждого СтрокаТЧ Из Ставка.ГрафикСтавок Цикл
					ТекстСтавки = ТекстСтавки + " с " + Формат(СтрокаТЧ.Дата, "ДФ=dd.MM.yyyy") + " - " + Формат(СтрокаТЧ.Ставка, "ЧДЦ=2") + "; ";
				КонецЦикла;
				ТекстСтавки = "Ставки " + ТекстСтавки;
				НадписьГрафикСтавок = ТекстСтавки;
			КонецЕсли;
		Иначе
			НадписьГрафикСтавок = "";
		КонецЕсли;
	Иначе
		НадписьГрафикСтавок = "";
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииУслуги(ТекущиеДанные)
	
	ОбновитьСтавку(ТекущиеДанные);
	Если ПолучитьФункциональнуюОпциюФормы("АР_ИспользоватьСхемуОпределенияСтавокНДСПоАрендеНаОсновеДоговора") Тогда
		Если Объект.ДокументБезНДС Тогда
			ТекущиеДанные.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС");
		Иначе
			ТекущиеДанные.СтавкаНДС = АР_ОбщиеПроцедуры.ПолучитьСтавкуНДСНоменклатуры(ТекущиеДанные.Услуга, Объект.Дата);
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Количество) Тогда
		ТекущиеДанные.Количество = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСуммыПостояннойЧасти()
	
	ИтогоСумма = 0;
	ИтогоСуммаНДС = 0;
	ИтогоВсего = 0;
	Для Каждого СтрокаТЧ Из Объект.ПостояннаяЧастьАренднойПлаты Цикл
		Если Объект.ДокументБезНДС Тогда
			СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
		СтрокаТЧ.Сумма = Окр(АР_ОбщиеПроцедуры.ПолучитьСтавку(СтрокаТЧ.Ставка) * 
			?(СтрокаТЧ.СпособНачисления.ВариантРасчета = Перечисления.АР_ВариантыРасчета.ПоСтавкеЗаОбъектВЦелом, 1, СтрокаТЧ.Количество), 2);
		ИтогоСумма = ИтогоСумма + СтрокаТЧ.Сумма;
		ПересчитатьСуммуНДС(СтрокаТЧ, Объект.СуммаВключаетНДС);
		ИтогоСуммаНДС = ИтогоСуммаНДС + СтрокаТЧ.СуммаНДС;
		ИтогоВсего = ИтогоВсего + СтрокаТЧ.Всего;
	КонецЦикла;
	ОбщаяСуммаПостояннойЧасти = ИтогоСумма;
	
	Если Объект.ДокументБезНДС Тогда
		Для Каждого СтрокаТЧ Из Объект.ПеременнаяЧастьАренднойПлаты Цикл
			СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонки()
	
	Для Каждого СтрокаТЧ Из Объект.ПеременнаяЧастьАренднойПлаты Цикл
		СтрокаТЧ.ЗаполненСписокСчетчиков = ЗначениеЗаполнено(СтрокаТЧ.Счетчик) И ТипЗнч(СтрокаТЧ.Счетчик) = Тип("СправочникСсылка.АР_СпискиСчетчиков");	
	КонецЦикла;
	Для каждого СтрокаСрокОплаты Из Объект.СрокиОплаты Цикл
		СтрокаСрокОплаты.ДатаНачалаНачисленияПени = ?(СтрокаСрокОплаты.КоличествоДнейОтсрочки = 0, 0, 1);
		Если СтрокаСрокОплаты.ПериодСрокаОплаты = -1 Тогда
			СтрокаСрокОплаты.ПериодСрокаОплатыПредставление = "Предыдущий";
		ИначеЕсли СтрокаСрокОплаты.ПериодСрокаОплаты = 0 Тогда
			СтрокаСрокОплаты.ПериодСрокаОплатыПредставление = "Текущий";
		ИначеЕсли СтрокаСрокОплаты.ПериодСрокаОплаты = 1 Тогда
			СтрокаСрокОплаты.ПериодСрокаОплатыПредставление = "Следующий";
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьУслугуАренда()
	
	Возврат Константы.АР_ОсновнаяУслугаПоАренде.Получить();
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОсновнойСпособНачисления()
	
	Возврат Константы.АР_ОсновнойСпособНачисленияАрендойПлаты.Получить();
	
КонецФункции

&НаКлиенте
Процедура ВыборПериодаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Объект.ДатаЗаключенияДоговора = Результат.ДатаНачала;
		Объект.ДатаОкончанияДоговора = Результат.ДатаОкончания;	
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДатаОкончанияДоговора) И Объект.ДатаОкончанияДоговора < Объект.ДатаЗаключенияДоговора Тогда
		ТекстСообщения = "Дата окончания договора не может быть меньше даты заключения договора";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "ДатаЗаключенияДоговора");
		Объект.ДатаЗаключенияДоговора = '00010101';
		Возврат;
	КонецЕсли;		
	
	Если (Объект.ПостояннаяЧастьАренднойПлаты.Количество()>0 ИЛИ
		Объект.ПеременнаяЧастьАренднойПлаты.Количество()>0) Тогда
		СпроситьОбИзменении("Выровнять сроки аренды по периоду действия договора?", 1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(ПересчитатьЦены = Ложь, ПерезаполнитьЦены = Ложь)

	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",      Неопределено);
	СтруктураПараметров.Вставить("Курс",                 1);
	СтруктураПараметров.Вставить("Кратность",            1);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",     Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("ДокументБезНДС",       Объект.ДокументБезНДС);
	СтруктураПараметров.Вставить("Контрагент",           Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",              Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация",          Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",        Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",    ПерезаполнитьЦены);
	СтруктураПараметров.Вставить("ПересчитатьЦены",      ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", Ложь);

	// 2. Открываем форму "Цены и Валюта".
	ДополнительныеПараметры = Новый Структура;
	
	ОткрыватьИзМеню = Истина;
	ДополнительныеПараметры.Вставить("СтруктураПараметровКоманды", СтруктураПараметров);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ОткрыватьИзМеню Тогда
		
		СписокКоманд = Новый СписокЗначений;
		
		Если Не ПлательщикНДС Тогда
			СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.ДокументБезНДС"));
		КонецЕсли;
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДССверху"));
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме"));
		
		ПоказатьВыборИзМеню(ОповещениеОЗакрытии, СписокКоманд, Элементы.ЦеныИВалюта);		
	Иначе
		ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,, ОповещениеОЗакрытии);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("СтруктураПараметровКоманды") Тогда
		
		СтруктураЦеныИВалюта = ДополнительныеПараметры.СтруктураПараметровКоманды;
		
		СуммаВключаетНДСДоИзменения = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Если РезультатЗакрытия = Неопределено Тогда 
			Возврат;
		ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.ДокументБезНДС") Тогда
			СтруктураЦеныИВалюта.ДокументБезНДС 	= Истина;
		ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме") Тогда
			СтруктураЦеныИВалюта.ДокументБезНДС 	= Ложь;
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Истина;
		Иначе
			СтруктураЦеныИВалюта.ДокументБезНДС 	= Ложь;
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Ложь;
		КонецЕсли;
		
		СтруктураЦеныИВалюта.Вставить("ПерезаполнитьЦены",    Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьЦены",      Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьНДС",       СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС
			ИЛИ Объект.ДокументБезНДС <> СтруктураЦеныИВалюта.ДокументБезНДС);
		СтруктураЦеныИВалюта.Вставить("БылиВнесеныИзменения", СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС
			ИЛИ Объект.ДокументБезНДС <> СтруктураЦеныИВалюта.ДокументБезНДС);
			
	Иначе
		СтруктураЦеныИВалюта = РезультатЗакрытия;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") Тогда

		Объект.СуммаВключаетНДС        = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Объект.ДокументБезНДС		   = СтруктураЦеныИВалюта.ДокументБезНДС;
		
		Модифицированность = Истина;

		ЗаполнитьСуммыПостояннойЧасти();
		СформироватьНадписьЦеныИВалюта(ЭтаФорма);
				
	КонецЕсли;
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
	СтруктураНадписи = Новый Структура(
		"ВалютаДокумента, Курс, Кратность, СуммаВключаетНДС, ДокументБезНДС",
		Неопределено,
		1,
		1,
		Объект.СуммаВключаетНДС,
		Объект.ДокументБезНДС);
	Форма.ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИндексСтроки(Элемент)
	
	Если Найти(Элемент.Имя, "ПостояннаяЧасть") > 0 Тогда
		ИндексСтроки = 0;
	Иначе
		ИндексСтроки = 1;
	КонецЕсли;
	Возврат ИндексСтроки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

&НаКлиенте
Процедура УстановитьВидимость()
	
	//Видимость элементов формы на закладке "Срок оплаты и начисление пени"
	ОбщиеУсловия = Объект.ДетализацияСроковОплаты = ПредопределенноеЗначение("Перечисление.АР_ДетализацииСроковОплаты.ОбщиеУсловия");
	РаздельныеУсловия = Объект.ДетализацияСроковОплаты = ПредопределенноеЗначение("Перечисление.АР_ДетализацииСроковОплаты.РаздельныеУсловия");
	ДетализацияДоУслуг = Объект.ДетализацияСроковОплаты = ПредопределенноеЗначение("Перечисление.АР_ДетализацииСроковОплаты.ДетализацияДоУслуг");
	КоличествоСтрок = Объект.СрокиОплаты.Количество();
	
	//Элементы.ДетализацияСроковОплаты.Доступность = ВестиВзаиморасчетыПоУслугам ИЛИ НЕ ОбщиеУсловия;
	
	Элементы.ГруппаОбщиеУсловия.Видимость = ОбщиеУсловия ИЛИ РаздельныеУсловия;
	Элементы.ГруппаДетализацияДоУслуг.Видимость = ДетализацияДоУслуг;
	Элементы.ГруппаСрокОплатыПеременнаяЧасть.Видимость = РаздельныеУсловия;
	Элементы.ГруппаНачислениеПениПеременнаяЧасть.Видимость = РаздельныеУсловия;
	Элементы.ГруппаСрокОплатыПостояннаяЧасть.ОтображатьЗаголовок = РаздельныеУсловия;
	
	Элементы.СрокОплатыПостояннаяЧасть.Видимость = ?(КоличествоСтрок > 0, Объект.СрокиОплаты[0].СпособОпределенияСрокаОплаты = ПредопределенноеЗначение("Перечисление.АР_СпособыРасчетаПросрочки.ПоПериодуНачисления"), Ложь);
	Элементы.СрокОплатыПеременнаяЧасть.Видимость = ?(КоличествоСтрок > 1, Объект.СрокиОплаты[1].СпособОпределенияСрокаОплаты = ПредопределенноеЗначение("Перечисление.АР_СпособыРасчетаПросрочки.ПоПериодуНачисления"), Ложь);
	
	Элементы.ПериодСрокаОплатыПостояннаяЧасть.Видимость = ?(КоличествоСтрок > 0, Объект.СрокиОплаты[0].СпособОпределенияСрокаОплаты = ПредопределенноеЗначение("Перечисление.АР_СпособыРасчетаПросрочки.ПоПериодуНачисления"), Ложь);
	Элементы.ПериодСрокаОплатыПеременнаяЧасть.Видимость = ?(КоличествоСтрок > 1, Объект.СрокиОплаты[1].СпособОпределенияСрокаОплаты = ПредопределенноеЗначение("Перечисление.АР_СпособыРасчетаПросрочки.ПоПериодуНачисления"), Ложь);
		
	Элементы.УчитыватьТолькоРабочиеДниОтсрочкиПостояннаяЧасть.Доступность = ?(КоличествоСтрок > 0, Объект.СрокиОплаты[0].КоличествоДнейОтсрочки > 0, Ложь);
	Элементы.УчитыватьТолькоРабочиеДниОтсрочкиПеременнаяЧасть.Доступность = ?(КоличествоСтрок > 1, Объект.СрокиОплаты[1].КоличествоДнейОтсрочки > 0, Ложь);
	
	Элементы.УчитыватьТолькоРабочиеДниОтДатыСчетаАктаПостояннаяЧасть.Доступность = ?(КоличествоСтрок > 0, Объект.СрокиОплаты[0].КоличествоДнейОтДатыСчетаАкта > 0, Ложь);
	Элементы.УчитыватьТолькоРабочиеДниОтДатыСчетаАктаПеременнаяЧасть.Доступность = ?(КоличествоСтрок > 1, Объект.СрокиОплаты[1].КоличествоДнейОтДатыСчетаАкта > 0, Ложь);
	
	Элементы.ГруппаКоличествоДнейОтДатыСчетаАктаПостояннаяЧасть.Видимость = ?(КоличествоСтрок > 0, 
		Объект.СрокиОплаты[0].СпособОпределенияСрокаОплаты = ПредопределенноеЗначение("Перечисление.АР_СпособыРасчетаПросрочки.ПоДатеНачисления")
		ИЛИ Объект.СрокиОплаты[0].СпособОпределенияСрокаОплаты = ПредопределенноеЗначение("Перечисление.АР_СпособыРасчетаПросрочки.ПоДатеСчета"), Ложь);
	Элементы.ГруппаКоличествоДнейОтДатыСчетаАктаПеременнаяЧасть.Видимость = ?(КоличествоСтрок > 1, 
		Объект.СрокиОплаты[1].СпособОпределенияСрокаОплаты = ПредопределенноеЗначение("Перечисление.АР_СпособыРасчетаПросрочки.ПоДатеНачисления")
		ИЛИ Объект.СрокиОплаты[1].СпособОпределенияСрокаОплаты = ПредопределенноеЗначение("Перечисление.АР_СпособыРасчетаПросрочки.ПоДатеСчета"), Ложь);
	
	Если КоличествоСтрок > 0 Тогда
		Если Объект.СрокиОплаты[0].СпособОпределенияСрокаОплаты = ПредопределенноеЗначение("Перечисление.АР_СпособыРасчетаПросрочки.ПоДатеНачисления") Тогда
			Элементы.КоличествоДнейОтДатыСчетаАктаПостояннаяЧасть.Заголовок = "Количество дней от даты акта";
		ИначеЕсли Объект.СрокиОплаты[0].СпособОпределенияСрокаОплаты = ПредопределенноеЗначение("Перечисление.АР_СпособыРасчетаПросрочки.ПоДатеСчета") Тогда
			Элементы.КоличествоДнейОтДатыСчетаАктаПостояннаяЧасть.Заголовок = "Количество дней от даты счета";
		КонецЕсли;
	КонецЕсли;
	Если КоличествоСтрок > 1 Тогда
		Если Объект.СрокиОплаты[1].СпособОпределенияСрокаОплаты = ПредопределенноеЗначение("Перечисление.АР_СпособыРасчетаПросрочки.ПоДатеНачисления") Тогда
			Элементы.КоличествоДнейОтДатыСчетаАктаПеременнаяЧасть.Заголовок = "Количество дней от даты акта";
		ИначеЕсли Объект.СрокиОплаты[1].СпособОпределенияСрокаОплаты = ПредопределенноеЗначение("Перечисление.АР_СпособыРасчетаПросрочки.ПоДатеСчета") Тогда
			Элементы.КоличествоДнейОтДатыСчетаАктаПеременнаяЧасть.Заголовок = "Количество дней от даты счета";
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ГруппаКоличествоДнейПросрочкиПостояннаяЧасть.Видимость = ?(КоличествоСтрок > 0, Объект.СрокиОплаты[0].ДатаНачалаНачисленияПени = 1, Ложь);
	Элементы.ГруппаКоличествоДнейПросрочкиПеременнаяЧасть.Видимость = ?(КоличествоСтрок > 1, Объект.СрокиОплаты[1].ДатаНачалаНачисленияПени = 1, Ложь);
	
	Если ВестиВзаиморасчетыПоУслугам Тогда
		Элементы.ГруппаСрокОплатыПеременнаяЧасть.Подсказка = "Переменная часть";
		Элементы.ГруппаСрокОплатыПеременнаяЧасть.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
	Иначе
		Элементы.ГруппаСрокОплатыПеременнаяЧасть.Подсказка = "Настройки сроков оплаты постоянной и переменной части могут различаться только при условии 
		|ведения взаиморасчетов по услугам (установлен соответствующий признак в карточке договора контрагента).";
		Элементы.ГруппаСрокОплатыПеременнаяЧасть.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	КонецЕсли;
	
	Элементы.ГруппаОбщиеПараметры.ОтображатьЗаголовок = РаздельныеУсловия;
	
	//Видимость элементов формы на закладке "Депозит"
	Элементы.СпособРасчетаЗалога.Видимость = Объект.УчитыватьЗалог;
	Элементы.РассчитатьДепозит.Видимость = Объект.УчитыватьЗалог;
	Элементы.СуммаЗалога.Видимость = Объект.УчитыватьЗалог;
	Элементы.ВалютаДепозита.Видимость = Объект.УчитыватьЗалог;
	Элементы.СтавкаНДСЗалога.Видимость = Объект.УчитыватьЗалог;
	
	// Видимость элементов на закладке "Курсы валюты"
	ВидимостьФиксированная = (Объект.ИспользоватьСпециальныйКурсВалюты И (Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.АР_СпособыРасчетаКурсаВалюты.Фиксированный")));
	ВидимостьРасчетная = (Объект.ИспользоватьСпециальныйКурсВалюты И (Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.АР_СпособыРасчетаКурсаВалюты.Расчетный")));
	Элементы.ВалютаСпособаНачисления.Видимость = Объект.ИспользоватьСпециальныйКурсВалюты;
	Элементы.СпособРасчета.Видимость = Объект.ИспользоватьСпециальныйКурсВалюты;
	Элементы.Коэффициент.Видимость = ВидимостьРасчетная;
	Элементы.НижняяГраница.Видимость = ВидимостьРасчетная;
	Элементы.ВерхняяГраница.Видимость = ВидимостьРасчетная;
	Элементы.Кратность.Видимость = ВидимостьФиксированная;
	Элементы.Курс.Видимость = ВидимостьФиксированная;

	// Видимость расшифровки ставки
	Элементы.НадписьГрафикСтавок.Видимость = Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПостояннаяЧастьАренднойПлаты ИЛИ Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПеременнаяЧастьАренднойПлаты;
	
	// Видимость элементов НДС
	//Элементы.СуммаВключаетНДС.Видимость = НЕ Объект.ДокументБезНДС;
	Элементы.ПостояннаяЧастьАренднойПлатыСтавкаНДС.Видимость = НЕ Объект.ДокументБезНДС;
	Элементы.ПостояннаяЧастьАренднойПлатыСуммаНДС.Видимость = НЕ Объект.ДокументБезНДС;
	Элементы.ПостояннаяЧастьАренднойПлатыВсего.Видимость = НЕ Объект.ДокументБезНДС;
	Элементы.ПеременнаяЧастьАренднойПлатыСтавкаНДС.Видимость = НЕ Объект.ДокументБезНДС;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ПлательщикНДС			= УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);	
	
КонецПроцедуры

&НаСервере
Процедура НастроитьТекстИнформацииОНовойСхемеНДС()
	
	Если ПолучитьФункциональнуюОпцию("АР_ИспользоватьСхемуОпределенияСтавокНДСПоАрендеНаОсновеДоговора") Тогда
		Элементы.ИнформацияОНовойСхемеНДС.Видимость = Ложь;
	Иначе
		Элементы.ИнформацияОНовойСхемеНДС.Видимость = Истина;
		
		Элементы.ТекстИнформацияОНовойСхемеНДС.Заголовок = "Добавлена возможность явного указания ставок НДС по услугам в договоре аренды. 
			|Рекомендуется выполнить переход на новую схему определения ставок НДС.
			|";
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// Заполнен список счетчиков 
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПеременнаяЧастьАренднойПлатыКоэффициентОтнесенияСчетчика");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПеременнаяЧастьАренднойПлаты.ЗаполненСписокСчетчиков");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	// СрокиОплатыУслуга

	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокиОплатыУслуга");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СрокиОплаты.НазначениеСрока", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.АР_ВариантыНазначенияСрокаОплаты.ДляУслуги);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
		
	// СрокиОплатыСрокОплаты

	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокиОплатыСрокОплаты");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокиОплатыПериодСрокаОплатыПредставление");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СрокиОплаты.СпособОпределенияСрокаОплаты", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.АР_СпособыРасчетаПросрочки.ПоПериодуНачисления);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
	// СрокиОплатыКоличествоДнейОтДатыСчетаАкта

	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокиОплатыКоличествоДнейОтДатыСчетаАкта");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокиОплатыУчитыватьТолькоРабочиеДниОтДатыСчетаАкта");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СрокиОплаты.СпособОпределенияСрокаОплаты", ВидСравненияКомпоновкиДанных.Равно, Перечисления.АР_СпособыРасчетаПросрочки.ПоПериодуНачисления);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)

	Оповещение = Новый ОписаниеОповещения("ВыборПериодаЗавершение", ЭтотОбъект);
	АР_ОбщиеПроцедурыКлиент.ВыборПериодаПоДоговору(Объект.ДатаЗаключенияДоговора, Объект.ДатаОкончанияДоговора, Объект.ДоговорКонтрагента, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДоговор(Команда)
	
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Оповещение = Новый ОписаниеОповещения("СообщитьОЗаписиДокумента", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, "Перед созданием договора необходимо записать документ. Записать?", РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да, "Подтверждение записи документа");
	Иначе
		Оповещение = Новый ОписаниеОповещения("СоздатьДоговорЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, "Создать договор аренды?", РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет, "Подтверждение создания договора");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОЗаписиДокумента(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Попытка
			Записать();
			Оповещение = Новый ОписаниеОповещения("СоздатьДоговорЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, "Создать договор аренды?", РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет, "Подтверждение создания договора");
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДоговорЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СоздатьНовыйДоговорНаСервере();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьДепозит(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ВалютаДепозита) И ИспользоватьВалютныйУчет Тогда
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(,, НСтр("ru = 'Валюта депозита'"),,, ТекстСообщения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ВалютаДепозита", "Объект", );
		Возврат;
	ИначеЕсли НЕ ИспользоватьВалютныйУчет Тогда
		Объект.ВалютаДепозита = ВалютаРеглУчета;
	КонецЕсли;
	
	Если Модифицированность ИЛИ Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Оповещение = новый ОписаниеОповещения("СпроситьОЗаписиДокумента", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, "Автоматически рассчитать размер депозита можно только после записи документа. Записать?", РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		РассчитатьДепозитПродолжение();
		РассчитатьДепозитЗавершение();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпроситьОЗаписиДокумента(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если Записать() Тогда
			РассчитатьДепозитПродолжение();
		КонецЕсли;
	КонецЕсли;
	
	РассчитатьДепозитЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьДепозитПродолжение()
	
	СуммаЗалога = АР_ОбщиеПроцедуры.РассчитатьЗалог(Объект.Ссылка, Объект.ВалютаДепозита, Объект.СпособРасчетаЗалога, "Депозит");
	Если ЗначениеЗаполнено(СуммаЗалога) Тогда
		Объект.СуммаЗалога = СуммаЗалога;
		Модифицированность = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьДепозитЗавершение()
	
	Если Объект.ПостояннаяЧастьАренднойПлаты.Количество()<>0 тогда 
		Если Не ЗначениеЗаполнено(Объект.СтавкаНДСЗалога) И ЗначениеЗаполнено(Объект.ПостояннаяЧастьАренднойПлаты[0].Услуга) тогда
			Объект.СтавкаНДСЗалога = АР_ОбщиеПроцедуры.ПолучитьСтавкуНДСНоменклатуры(Объект.ПостояннаяЧастьАренднойПлаты[0].Услуга, Объект.Дата);
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;   
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("РежимПодбора", Истина);
	
	ОткрытьФорму("Справочник.АР_ОбъектыАренды.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКолонку(Команда)
	
	ПараметрыФормы = Новый Структура("ИмяДокумента", "АР_ЗаключениеДоговораАренды");
	ПараметрыФормы.Вставить("ЭтоПостояннаяЧасть", Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПостояннаяЧастьАренднойПлаты);
	ОткрытьФорму("ОбщаяФорма.АР_ФормаЗаполненияКолонки", ПараметрыФормы,,,,, Новый ОписаниеОповещения("ЗаполнитьКолонкуЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработатьИзмененияПоКнопкеЦеныИВалюты();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииНаСервере();
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	УстановитьПризнакВеденияВзаиморасчетовПоУслугам();
	ОчиститьГрафикиСтавокСпискиСчетчиков();
	УстановитьВидимость();

КонецПроцедуры

&НаКлиенте
Процедура ДатаЗаключенияДоговораПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.ДатаЗаключенияДоговора) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДатаОкончанияДоговора) И Объект.ДатаОкончанияДоговора < Объект.ДатаЗаключенияДоговора Тогда
		ТекстСообщения = "Дата окончания договора не может быть меньше даты заключения договора";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "ДатаЗаключенияДоговора");
		Объект.ДатаЗаключенияДоговора = '00010101';
		Возврат;
	КонецЕсли;
	
	Если (Объект.ПостояннаяЧастьАренднойПлаты.Количество()>0 ИЛИ
		Объект.ПеременнаяЧастьАренднойПлаты.Количество()>0) Тогда
		СпроситьОбИзменении("Выровнять сроки в табличной части на дату начала срока действия?", 2);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияДоговораПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.ДатаОкончанияДоговора) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ДатаОкончанияДоговора < Объект.ДатаЗаключенияДоговора Тогда
		ТекстСообщения = "Дата окончания договора не может быть меньше даты заключения договора";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "ДатаОкончанияДоговора");
		Объект.ДатаЗаключенияДоговора = '00010101';
		Возврат;
	КонецЕсли;		
	
	Если (Объект.ПостояннаяЧастьАренднойПлаты.Количество()>0 ИЛИ
		Объект.ПеременнаяЧастьАренднойПлаты.Количество()>0) Тогда
		СпроситьОбИзменении("Выровнять сроки в табличной части на дату окончания срока действия?", 3);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаПостояннаяЧастьАренднойПлаты Тогда
		ТекущиеДанные = Элементы.ПостояннаяЧастьАренднойПлаты.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			СформироватьНадписьГрафикаСтавок(Неопределено);
		Иначе
			СформироватьНадписьГрафикаСтавок(ТекущиеДанные.Ставка);
		КонецЕсли;
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаПеременнаяЧастьАренднойПлаты Тогда
		ТекущиеДанные = Элементы.ПеременнаяЧастьАренднойПлаты.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			СформироватьНадписьГрафикаСтавок(Неопределено);
		Иначе
			СформироватьНадписьГрафикаСтавок(ТекущиеДанные.Ставка);
		КонецЕсли;
	Иначе
		СформироватьНадписьГрафикаСтавок(Неопределено);
	КонецЕсли;
	
	УстановитьВидимость();

КонецПроцедуры

&НаКлиенте
Процедура СуммаВключаетНДСПриИзменении(Элемент)
	
	ЗаполнитьСуммыПостояннойЧасти();
	
КонецПроцедуры

//////////////////////////////////////////////////////
// Пени

&НаКлиенте
Процедура СпособОпределенияСрокаОплатыПриИзменении(Элемент)
	
	ИндексСтроки = ПолучитьИндексСтроки(Элемент);
	СтрокаСрокОплаты = Объект.СрокиОплаты[ИндексСтроки];
	
	Если СтрокаСрокОплаты.СпособОпределенияСрокаОплаты = ПредопределенноеЗначение("Перечисление.АР_СпособыРасчетаПросрочки.ПоПериодуНачисления") Тогда
		СтрокаСрокОплаты.СрокОплаты = 1;
	КонецЕсли;
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаНачисленияПениПриИзменении(Элемент)
	
	ИндексСтроки = ПолучитьИндексСтроки(Элемент);
	СтрокаСрокОплаты = Объект.СрокиОплаты[ИндексСтроки];
		
	СтрокаСрокОплаты.КоличествоДнейОтсрочки = СтрокаСрокОплаты.ДатаНачалаНачисленияПени;
	Если СтрокаСрокОплаты.КоличествоДнейОтсрочки = 0 Тогда
		СтрокаСрокОплаты.УчитыватьТолькоРабочиеДниОтсрочки = Ложь;		
	КонецЕсли;
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоДнейПросрочкиПриИзменении(Элемент)
	
	ИндексСтроки = ПолучитьИндексСтроки(Элемент);
	СтрокаСрокОплаты = Объект.СрокиОплаты[ИндексСтроки];
	
	Если СтрокаСрокОплаты.КоличествоДнейОтсрочки = 0 Тогда
		СтрокаСрокОплаты.ДатаНачалаНачисленияПени = 0;
		СтрокаСрокОплаты.УчитыватьТолькоРабочиеДниОтсрочки = Ложь;		
	Иначе
		СтрокаСрокОплаты.ДатаНачалаНачисленияПени = 1;		
	КонецЕсли;
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоДнейОтДатыСчетаАктаПриИзменении(Элемент)
	
	ИндексСтроки = ПолучитьИндексСтроки(Элемент);
	СтрокаСрокОплаты = Объект.СрокиОплаты[ИндексСтроки];
	
	Если СтрокаСрокОплаты.КоличествоДнейОтДатыСчетаАкта = 0 Тогда
		СтрокаСрокОплаты.УчитыватьТолькоРабочиеДниОтДатыСчетаАкта = Ложь;		
	КонецЕсли;
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ДетализацияСроковОплатыПриИзменении(Элемент)
	
	Если Не ВестиВзаиморасчетыПоУслугам Тогда
		Если Объект.ДетализацияСроковОплаты <> ПредопределенноеЗначение("Перечисление.АР_ДетализацииСроковОплаты.ОбщиеУсловия") Тогда
			Объект.ДетализацияСроковОплаты = ПредопределенноеЗначение("Перечисление.АР_ДетализацииСроковОплаты.ОбщиеУсловия");
			ТекстСообщения = "Настройки сроков оплаты постоянной и переменной части могут различаться только при условии ведения взаиморасчетов по услугам (установлен соответствующий признак в карточке договора контрагента).";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект.ДетализацияСроковОплаты");
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ДетализацияСроковОплаты = ПредопределенноеЗначение("Перечисление.АР_ДетализацииСроковОплаты.ОбщиеУсловия") Тогда
		Пока Объект.СрокиОплаты.Количество() > 1 Цикл
			Объект.СрокиОплаты.Удалить(1);
		КонецЦикла;
		Если Объект.СрокиОплаты.Количество() < 1 Тогда
			Объект.СрокиОплаты.Добавить();
		КонецЕсли;
		Объект.СрокиОплаты[0].НазначениеСрока = ПредопределенноеЗначение("Перечисление.АР_ВариантыНазначенияСрокаОплаты.Общий");
		Объект.СрокиОплаты[0].Услуга = Неопределено;
	ИначеЕсли Объект.ДетализацияСроковОплаты = ПредопределенноеЗначение("Перечисление.АР_ДетализацииСроковОплаты.РаздельныеУсловия") Тогда
		Пока Объект.СрокиОплаты.Количество() > 2 Цикл
			Объект.СрокиОплаты.Удалить(1);
		КонецЦикла;
		Пока Объект.СрокиОплаты.Количество() < 2 Цикл
			Объект.СрокиОплаты.Добавить();
		КонецЦикла;
		Объект.СрокиОплаты[0].НазначениеСрока = ПредопределенноеЗначение("Перечисление.АР_ВариантыНазначенияСрокаОплаты.ПостояннаяЧасть");
		Объект.СрокиОплаты[1].НазначениеСрока = ПредопределенноеЗначение("Перечисление.АР_ВариантыНазначенияСрокаОплаты.ПеременнаяЧасть");
		Объект.СрокиОплаты[0].Услуга = Неопределено;
		Объект.СрокиОплаты[1].Услуга = Неопределено;
	Иначе
		Для каждого СтрокаСрокОплаты Из Объект.СрокиОплаты Цикл
			Если СтрокаСрокОплаты.НазначениеСрока = ПредопределенноеЗначение("Перечисление.АР_ВариантыНазначенияСрокаОплаты.Общий") Тогда
				СтрокаСрокОплаты.НазначениеСрока = ПредопределенноеЗначение("Перечисление.АР_ВариантыНазначенияСрокаОплаты.ПостояннаяЧасть");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура СрокиОплатыНазначениеСрокаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СрокиОплаты.ТекущиеДанные;
	Если ТекущиеДанные.НазначениеСрока <> ПредопределенноеЗначение("Перечисление.АР_ВариантыНазначенияСрокаОплаты.ДляУслуги") Тогда
		ТекущиеДанные.Услуга = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокиОплатыПериодСрокаОплатыПредставлениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СрокиОплаты.ТекущиеДанные;
	Если ТекущиеДанные.ПериодСрокаОплатыПредставление = "Предыдущий" Тогда
		ТекущиеДанные.ПериодСрокаОплаты = -1;
	ИначеЕсли ТекущиеДанные.ПериодСрокаОплатыПредставление = "Текущий" Тогда
		ТекущиеДанные.ПериодСрокаОплаты = 0;
	ИначеЕсли ТекущиеДанные.ПериодСрокаОплатыПредставление = "Следующий" Тогда
		ТекущиеДанные.ПериодСрокаОплаты = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокиОплатыСпособОпределенияСрокаОплатыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СрокиОплаты.ТекущиеДанные;
	Если ТекущиеДанные.СпособОпределенияСрокаОплаты = ПредопределенноеЗначение("Перечисление.АР_СпособыРасчетаПросрочки.ПоПериодуНачисления") Тогда
		ТекущиеДанные.КоличествоДнейОтДатыСчетаАкта = 0;
		ТекущиеДанные.УчитыватьТолькоРабочиеДниОтДатыСчетаАкта = Ложь;
	Иначе
		ТекущиеДанные.СрокОплаты = 0;
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////
// Депозит

&НаКлиенте
Процедура УчитыватьЗалогПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.СтавкаНДСЗалога) Тогда
		УстановитьСтавкуНДСЗалога();
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтавкуНДСЗалога()

	Если ПолучитьФункциональнуюОпциюФормы("АР_ИспользоватьСхемуОпределенияСтавокНДСПоАрендеНаОсновеДоговора") Тогда
		УслугаДепозита = Константы.АР_ОсновнаяУслугаДляНачисленияДепозита.Получить();
		Если НЕ Объект.ДокументБезНДС И ЗначениеЗаполнено(УслугаДепозита)  Тогда
			Объект.СтавкаНДСЗалога = АР_ОбщиеПроцедуры.ПолучитьСтавкуНДСНоменклатуры(УслугаДепозита, Объект.Дата);
		Иначе
			Объект.СтавкаНДСЗалога = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

//////////////////////////////////////////////////////
// Курсы валют

&НаКлиенте
Процедура ИспользоватьСпециальныйКурсВалютыПриИзменении(Элемент)
	
	Если Объект.ИспользоватьСпециальныйКурсВалюты Тогда
		Если Объект.ПостояннаяЧастьАренднойПлаты.Количество() = 0 И Объект.ПеременнаяЧастьАренднойПлаты.Количество() = 0 Тогда
			ТекстСообщения = "Не заполнена ни одна из табличных частей";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
			Объект.ИспользоватьСпециальныйКурсВалюты = Ложь;
		Иначе
			ЗаполнитьДанныеПоСпециальномуКурсуНаСервере();
		КонецЕсли;
	КонецЕсли;
	УстановитьВидимость();

КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ЧАСТЕЙ

//////////////////////////////////////////////////////
// Постоянная часть

&НаКлиенте
Процедура ПостояннаяЧастьАренднойПлатыПриАктивизацииСтроки(Элемент)
	
	Если НЕ Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПостояннаяЧастьАренднойПлаты Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ПостояннаяЧастьАренднойПлаты.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		СформироватьНадписьГрафикаСтавок(ТекущиеДанные.Ставка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПостояннаяЧастьАренднойПлатыСтавкаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтавкаОткрытие(Элемент, СтандартнаяОбработка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПостояннаяЧастьАренднойПлатыСтавкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтавкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПостояннаяЧастьАренднойПлатыСтавкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтавкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПостояннаяЧастьАренднойПлатыСтавкаОчистка(Элемент, СтандартнаяОбработка)
	
	СтавкаОчистка(Элемент, СтандартнаяОбработка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПостояннаяЧастьАренднойПлатыПриИзменении(Элемент)
	
	ЗаполнитьСуммыПостояннойЧасти();
	
КонецПроцедуры

&НаКлиенте
Процедура ПостояннаяЧастьАренднойПлатыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.ПостояннаяЧастьАренднойПлаты.ТекущиеДанные;
		Если Не ИспользоватьГрафикСтавок И Не Копирование Тогда
			ТекущиеДанные.Ставка = 0;
		ИначеЕсли Копирование И ИспользоватьГрафикСтавок Тогда
			Если ТипЗнч(ТекущиеДанные.Ставка) = Тип("СправочникСсылка.АР_ГрафикиИзмененияСтавокНаУслуги") Тогда
				ТекущиеДанные.Ставка = Неопределено;
			КонецЕсли;
		КонецЕсли;
		ТекущиеДанные.Услуга = ПолучитьУслугуАренда();
		ТекущиеДанные.СпособНачисления = ПолучитьОсновнойСпособНачисления();
		ТекущиеДанные.ДатаНачалаСрокаАренды = Объект.ДатаЗаключенияДоговора;
		ТекущиеДанные.ДатаОкончанияСрокаАренды = Объект.ДатаОкончанияДоговора;
		ПриИзмененииУслуги(ТекущиеДанные);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПостояннаяЧастьАренднойПлатыПриАктивизацииЯчейки(Элемент)
	
	Если Элементы.ПостояннаяЧастьАренднойПлаты.ТекущийЭлемент = Элементы.ПостояннаяЧастьАренднойПлатыСтавка Тогда
		ТекущиеДанные = Элементы.ПостояннаяЧастьАренднойПлаты.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			НастроитьЭлементСтавки(Элементы.ПостояннаяЧастьАренднойПлатыСтавка, ТекущиеДанные.Ставка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПостояннаяЧастьАренднойПлатыСтавкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПостояннаяЧастьАренднойПлаты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		НастроитьЭлементСтавки(Элементы.ПостояннаяЧастьАренднойПлатыСтавка, ТекущиеДанные.Ставка);
		СформироватьНадписьГрафикаСтавок(ТекущиеДанные.Ставка);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПостояннаяЧастьАренднойПлатыСпособНачисленияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПостояннаяЧастьАренднойПлаты.ТекущиеДанные;
	Если ТекущиеДанные.НомерСтроки = 1 
		И АР_ОбщиеПроцедуры.ЗначениеРеквизитаОбъекта(ТекущиеДанные.СпособНачисления, "Валюта") <> Объект.ВалютаСпособаНачисления Тогда
		Объект.ВалютаСпособаНачисления = АР_ОбщиеПроцедуры.ЗначениеРеквизитаОбъекта(ТекущиеДанные.СпособНачисления, "Валюта");
		ЗаполнитьДанныеПоСпециальномуКурсуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПостояннаяЧастьАренднойПлатыУслугаПриИзменении(Элемент)
		
	ТекущиеДанные = Элементы.ПостояннаяЧастьАренднойПлаты.ТекущиеДанные;
	ПриИзмененииУслуги(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПостояннаяЧастьАренднойПлатыДатаНачалаСрокаАрендыПриИзменении(Элемент)
	
	СопоставитьСоСрокамиДоговора(Элементы.ПостояннаяЧастьАренднойПлаты.ТекущиеДанные.ДатаНачалаСрокаАренды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПостояннаяЧастьАренднойПлатыДатаОкончанияСрокаАрендыПриИзменении(Элемент)
	
	СопоставитьСоСрокамиДоговора(Элементы.ПостояннаяЧастьАренднойПлаты.ТекущиеДанные.ДатаОкончанияСрокаАренды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПостояннаяЧастьАренднойПлатыОбъектАрендыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПостояннаяЧастьАренднойПлаты.ТекущиеДанные;
	ПриВыбореОбъектаАренды(ТекущиеДанные);
	
КонецПроцедуры

//////////////////////////////////////////////////////
// Переменная часть

&НаКлиенте
Процедура ПеременнаяЧастьАренднойПлатыПриАктивизацииСтроки(Элемент)
	
	Если НЕ Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПеременнаяЧастьАренднойПлаты Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ПеременнаяЧастьАренднойПлаты.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		СформироватьНадписьГрафикаСтавок(ТекущиеДанные.Ставка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеременнаяЧастьАренднойПлатыСтавкаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтавкаОткрытие(Элемент, СтандартнаяОбработка, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеременнаяЧастьАренднойПлатыСтавкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтавкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеременнаяЧастьАренднойПлатыСтавкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтавкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеременнаяЧастьАренднойПлатыСтавкаОчистка(Элемент, СтандартнаяОбработка)
	
	СтавкаОчистка(Элемент, СтандартнаяОбработка, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеременнаяЧастьАренднойПлатыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ПеременнаяЧастьАренднойПлаты.ТекущиеДанные;
	Если НоваяСтрока Тогда
		Если Не ИспользоватьГрафикСтавок И Не Копирование Тогда
			ТекущиеДанные.Ставка = 0;
		ИначеЕсли Копирование И ИспользоватьГрафикСтавок Тогда
			Если ТипЗнч(ТекущиеДанные.Ставка) = Тип("СправочникСсылка.АР_ГрафикиИзмененияСтавокНаУслуги") Тогда
				ТекущиеДанные.Ставка = Неопределено;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ИспользоватьСписокСчетчиков И Не Копирование Тогда
			ТекущиеДанные.Счетчик = ПредопределенноеЗначение("Справочник.АР_Счетчики.ПустаяСсылка");
		ИначеЕсли Копирование И ИспользоватьСписокСчетчиков Тогда
			Если ТипЗнч(ТекущиеДанные.Счетчик) = Тип("СправочникСсылка.АР_СпискиСчетчиков") Тогда
				ТекущиеДанные.Счетчик = Неопределено;	
			КонецЕсли;
		КонецЕсли;
		ТекущиеДанные.СпособНачисления = ПолучитьОсновнойСпособНачисления();
		ТекущиеДанные.ДатаНачалаСрокаАренды = Объект.ДатаЗаключенияДоговора;
		ТекущиеДанные.ДатаОкончанияСрокаАренды = Объект.ДатаОкончанияДоговора;
		ТекущиеДанные.КоэффициентОтнесенияСчетчика = 1;
	Иначе
		Если НЕ ИспользоватьСписокСчетчиков И ТекущиеДанные.Счетчик = Неопределено Тогда
			ТекущиеДанные.Счетчик = ПредопределенноеЗначение("Справочник.АР_Счетчики.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПеременнаяЧастьАренднойПлатыПриАктивизацииЯчейки(Элемент)
	
	Если Элементы.ПеременнаяЧастьАренднойПлаты.ТекущийЭлемент = Элементы.ПеременнаяЧастьАренднойПлатыСтавка Тогда
		ТекущиеДанные = Элементы.ПеременнаяЧастьАренднойПлаты.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			НастроитьЭлементСтавки(Элементы.ПеременнаяЧастьАренднойПлатыСтавка, ТекущиеДанные.Ставка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеременнаяЧастьАренднойПлатыСтавкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПеременнаяЧастьАренднойПлаты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		НастроитьЭлементСтавки(Элементы.ПеременнаяЧастьАренднойПлатыСтавка, ТекущиеДанные.Ставка);
		СформироватьНадписьГрафикаСтавок(ТекущиеДанные.Ставка);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПеременнаяЧастьАренднойПлатыУслугаПриИзменении(Элемент)
		
	ТекущиеДанные = Элементы.ПеременнаяЧастьАренднойПлаты.ТекущиеДанные;
	ПриИзмененииУслуги(ТекущиеДанные);
	Если ЗначениеЗаполнено(ТекущиеДанные.Услуга) Тогда
		ТекущиеДанные.ЕдиницаИзмерения = АР_ОбщиеПроцедуры.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Услуга, "ЕдиницаИзмерения");
	Иначе
		ТекущиеДанные.ЕдиницаИзмерения = ПредопределенноеЗначение("Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеременнаяЧастьАренднойПлатыДатаНачалаСрокаАрендыПриИзменении(Элемент)
	
	СопоставитьСоСрокамиДоговора(Элементы.ПеременнаяЧастьАренднойПлаты.ТекущиеДанные.ДатаНачалаСрокаАренды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеременнаяЧастьАренднойПлатыДатаОкончанияСрокаАрендыПриИзменении(Элемент)
	
	СопоставитьСоСрокамиДоговора(Элементы.ПеременнаяЧастьАренднойПлаты.ТекущиеДанные.ДатаОкончанияСрокаАренды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеременнаяЧастьАренднойПлатыОбъектАрендыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПеременнаяЧастьАренднойПлаты.ТекущиеДанные;
	ПриВыбореОбъектаАренды(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеременнаяЧастьАренднойПлатыСчетчикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СчетчикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПеременнаяЧастьАренднойПлатыСчетчикОчистка(Элемент, СтандартнаяОбработка)
	
	СчетчикОчистка(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеременнаяЧастьАренднойПлатыСчетчикОткрытие(Элемент, СтандартнаяОбработка)
	
	СчетчикОткрытие(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеременнаяЧастьАренднойПлатыСчетчикОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СчетчикОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКолонкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
	ЭтоПостояннаяЧасть = Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПостояннаяЧастьАренднойПлаты;
	ИмяТабЧасти = ?(ЭтоПостояннаяЧасть, "ПостояннаяЧастьАренднойПлаты", "ПеременнаяЧастьАренднойПлаты");
	Если Результат <> Неопределено Тогда
        Для Каждого СтрокаТЧ Из Объект[ИмяТабЧасти] Цикл
            СтрокаТЧ[Результат.Реквизит] = Результат.Значение;
			Если Результат.Реквизит = "Услуга" Тогда
				ПриИзмененииУслуги(СтрокаТЧ);	
				Если НЕ ЭтоПостояннаяЧасть Тогда
					Если ЗначениеЗаполнено(СтрокаТЧ.Услуга) Тогда
						СтрокаТЧ.ЕдиницаИзмерения = АР_ОбщиеПроцедуры.ЗначениеРеквизитаОбъекта(СтрокаТЧ.Услуга, "ЕдиницаИзмерения");
					Иначе
						СтрокаТЧ.ЕдиницаИзмерения = ПредопределенноеЗначение("Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка");
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли Результат.Реквизит = "СпособНачисления" И ЭтоПостояннаяЧасть Тогда	
				Если СтрокаТЧ.НомерСтроки = 1 
					И АР_ОбщиеПроцедуры.ЗначениеРеквизитаОбъекта(СтрокаТЧ.СпособНачисления, "Валюта") <> Объект.ВалютаСпособаНачисления Тогда
					Объект.ВалютаСпособаНачисления = АР_ОбщиеПроцедуры.ЗначениеРеквизитаОбъекта(СтрокаТЧ.СпособНачисления, "Валюта");
					ЗаполнитьДанныеПоСпециальномуКурсуНаСервере();
				КонецЕсли;
			ИначеЕсли Результат.Реквизит = "ДатаНачалаСрокаАренды" ИЛИ Результат.Реквизит = "ДатаОкончанияСрокаАренды" Тогда
				СопоставитьСоСрокамиДоговора(Результат.Значение);
	            СтрокаТЧ[Результат.Реквизит] = Результат.Значение;
			ИначеЕсли Результат.Реквизит = "Ставка" И НЕ ЗначениеЗаполнено(Результат.Значение) Тогда
				ОбновитьСтавку(СтрокаТЧ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЭтоПостояннаяЧасть Тогда
		ЗаполнитьСуммыПостояннойЧасти();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаОткрытие(Элемент, СтандартнаяОбработка, ЭтоПостояннаяЧасть)
	
	СтандартнаяОбработка = Ложь;
	Если ЭтоПостояннаяЧасть Тогда
		ТекущиеДанные = Элементы.ПостояннаяЧастьАренднойПлаты.ТекущиеДанные;
	Иначе
		ТекущиеДанные = Элементы.ПеременнаяЧастьАренднойПлаты.ТекущиеДанные;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("Объект, Форма, ТекущиеДанные, Элемент, ЭтоПостояннаяЧасть", Объект, ЭтаФорма, ТекущиеДанные, Элемент, ЭтоПостояннаяЧасть);
	
	АР_ОбщиеПроцедурыКлиент.ОткрытиеСтавки(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, ЭтоПостояннаяЧасть)
	
	Если ЭтоПостояннаяЧасть Тогда
		ТекущиеДанные = Элементы.ПостояннаяЧастьАренднойПлаты.ТекущиеДанные;
	Иначе
		ТекущиеДанные = Элементы.ПеременнаяЧастьАренднойПлаты.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекущиеДанные.Ставка = Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(0, "Число");
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Справочник.АР_ГрафикиИзмененияСтавокНаУслуги.ПустаяСсылка"), "График ставок");
		
	ИначеЕсли ТипЗнч(ТекущиеДанные.Ставка) = Тип("СправочникСсылка.АР_ГрафикиИзмененияСтавокНаУслуги") Тогда
		
		СтандартнаяОбработка = Ложь;
		ДополнительныеПараметры = Новый Структура("Объект, Форма, ТекущиеДанные, Элемент, ЭтоПостояннаяЧасть", Объект, ЭтаФорма, ТекущиеДанные, Элемент, ЭтоПостояннаяЧасть);
		АР_ОбщиеПроцедурыКлиент.НачалоВыбораГрафика(ДополнительныеПараметры);
		
	ИначеЕсли ЭтоПостояннаяЧасть И ТипЗнч(ТекущиеДанные.Ставка) = Тип("Число") Тогда	
		Элемент.ОграничениеТипа	= Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	ИначеЕсли НЕ ЭтоПостояннаяЧасть И ТипЗнч(ТекущиеДанные.Ставка) = Тип("Число") Тогда	
		Элемент.ОграничениеТипа	= Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 7));
	КонецЕсли;
	
	НастроитьЭлементСтавки(Элемент, ТекущиеДанные.Ставка);
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, ЭтоПостояннаяЧасть)
	
	Если ЭтоПостояннаяЧасть Тогда
		ТекущиеДанные = Элементы.ПостояннаяЧастьАренднойПлаты.ТекущиеДанные;
	Иначе
		ТекущиеДанные = Элементы.ПеременнаяЧастьАренднойПлаты.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекущиеДанные.Ставка = Неопределено И ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.АР_ГрафикиИзмененияСтавокНаУслуги") Тогда
		ТекущиеДанные.Ставка = ВыбранноеЗначение;
		СтавкаНачалоВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, ЭтоПостояннаяЧасть);
		Возврат;	
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.Ставка) = Тип("СправочникСсылка.АР_ГрафикиИзмененияСтавокНаУслуги") Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
			ТекущиеДанные.Ставка = ВыбранноеЗначение;
			Если ЭтоПостояннаяЧасть Тогда
				ЗаполнитьСуммыПостояннойЧасти();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Число") Тогда
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные.Ставка = ВыбранноеЗначение;
		Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
			ОбновитьСтавку(ТекущиеДанные);
		КонецЕсли;
	КонецЕсли;
	
	СформироватьНадписьГрафикаСтавок(ТекущиеДанные.Ставка);
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаОчистка(Элемент, СтандартнаяОбработка, ЭтоПостояннаяЧасть)
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	МассивТипов.Добавить(Тип("СправочникСсылка.АР_ГрафикиИзмененияСтавокНаУслуги"));

	Элемент.ОграничениеТипа	= Новый ОписаниеТипов(МассивТипов, ?(ЭтоПостояннаяЧасть, Новый КвалификаторыЧисла(15, 2), Новый КвалификаторыЧисла(20, 7)));

КонецПроцедуры

&НаКлиенте
Процедура СчетчикОткрытие(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПеременнаяЧастьАренднойПлаты.ТекущиеДанные;
	
	Если ТипЗнч(ТекущиеДанные.Счетчик) = Тип("СправочникСсылка.АР_СпискиСчетчиков") Тогда
		
		СтандартнаяОбработка = Ложь;
		ДополнительныеПараметры = Новый Структура("Объект, Форма, ТекущиеДанные, Элемент", Объект, ЭтаФорма, ТекущиеДанные, Элемент);
		АР_ОбщиеПроцедурыКлиент.ОткрытиеСчетчика(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетчикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПеременнаяЧастьАренднойПлаты.ТекущиеДанные;
	
	Если ТекущиеДанные.Счетчик = Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Справочник.АР_Счетчики.ПустаяСсылка"), "Счетчик");
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Справочник.АР_СпискиСчетчиков.ПустаяСсылка"), "Список счетчиков");
		
	ИначеЕсли ТипЗнч(ТекущиеДанные.Счетчик) = Тип("СправочникСсылка.АР_СпискиСчетчиков") Тогда
		
		СтандартнаяОбработка = Ложь;
		ДополнительныеПараметры = Новый Структура("Объект, Форма, ТекущиеДанные, Элемент, СписокСчетчиков", Объект, ЭтаФорма, ТекущиеДанные, Элемент, Истина);
		АР_ОбщиеПроцедурыКлиент.НачалоВыбораСчетчика(ДополнительныеПараметры);

	ИначеЕсли ТипЗнч(ТекущиеДанные.Счетчик) = Тип("СправочникСсылка.АР_Счетчики") Тогда
		
		СтандартнаяОбработка = Ложь;
		ДополнительныеПараметры = Новый Структура("Объект, Форма, ТекущиеДанные, Элемент, СписокСчетчиков", Объект, ЭтаФорма, ТекущиеДанные, Элемент, Ложь);
		АР_ОбщиеПроцедурыКлиент.НачалоВыбораСчетчика(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетчикОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПеременнаяЧастьАренднойПлаты.ТекущиеДанные;
	
	Если ТекущиеДанные.Счетчик = Неопределено И ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.АР_СпискиСчетчиков") Тогда
		ТекущиеДанные.Счетчик = ПредопределенноеЗначение("Справочник.АР_СпискиСчетчиков.ПустаяСсылка");
		ТекущиеДанные.КоэффициентОтнесенияСчетчика = 0;
		ТекущиеДанные.ЗаполненСписокСчетчиков = Истина;
		СчетчикНачалоВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
		Возврат;	
	ИначеЕсли ЗначениеЗаполнено(ВыбранноеЗначение) И ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.АР_СпискиСчетчиков") Тогда
		ТекущиеДанные.КоэффициентОтнесенияСчетчика = 0;
		ТекущиеДанные.ЗаполненСписокСчетчиков = Истина;
	ИначеЕсли ЗначениеЗаполнено(ВыбранноеЗначение) И ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.АР_Счетчики") Тогда
		ТекущиеДанные.ЗаполненСписокСчетчиков = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетчикОчистка(Элемент, СтандартнаяОбработка)
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.АР_Счетчики"));
	
	Если ИспользоватьСписокСчетчиков Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.АР_СпискиСчетчиков"));
	КонецЕсли;
	
	Элемент.ОграничениеТипа	= Новый ОписаниеТипов(МассивТипов);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьВсего(ТекущиеДанные, СуммаВключаетНДС)

	Если СуммаВключаетНДС Тогда
		ТекущиеДанные.Всего = ТекущиеДанные.Сумма;
	Иначе
		ТекущиеДанные.Всего = ТекущиеДанные.Сумма + ТекущиеДанные.СуммаНДС;
	КонецЕсли;

КонецПроцедуры // ПересчитатьВсего()

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьСуммуНДС(ТекущиеДанные, СуммаВключаетНДС)

	СтавкаНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС);	
	ТекущиеДанные.СуммаНДС = Окр(ТекущиеДанные.Сумма / (100 + ?(СуммаВключаетНДС, СтавкаНДС, 0)) * СтавкаНДС, 2);
	ПересчитатьВсего(ТекущиеДанные, СуммаВключаетНДС);

КонецПроцедуры // ПересчитатьСуммуНДС()

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	УстановитьФункциональныеОпцииФормы();
	
	Если ПлательщикНДС Тогда
		Объект.ДокументБезНДС = Ложь;
	КонецЕсли;
	СформироватьНадписьЦеныИВалюта(ЭтаФорма);
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	УстановитьФункциональныеОпцииФормы();
	
	Если ПлательщикНДС Тогда
		Объект.ДокументБезНДС = Ложь;
	КонецЕсли;
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаНовуюСхемуНДС(Команда)
	ОткрытьФорму("Обработка.АР_ПереходНаНовуюСхемуОпределенияСтавокНДС.Форма");
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакВеденияВзаиморасчетовПоУслугам()
	
	Если ВестиВзаиморасчетыПоУслугам <> Объект.ДоговорКонтрагента.АР_ВестиВзаиморасчетыПоУслугам Тогда
		ВестиВзаиморасчетыПоУслугам = Объект.ДоговорКонтрагента.АР_ВестиВзаиморасчетыПоУслугам;
		Если Не ВестиВзаиморасчетыПоУслугам Тогда
			Объект.ДетализацияСроковОплаты = Перечисления.АР_ДетализацииСроковОплаты.ОбщиеУсловия;
			Пока Объект.СрокиОплаты.Количество() > 1 Цикл
				Объект.СрокиОплаты.Удалить(1);
			КонецЦикла;
			Если Объект.СрокиОплаты.Количество() < 1 Тогда
				Объект.СрокиОплаты.Добавить();
			КонецЕсли;
			Объект.СрокиОплаты[0].НазначениеСрока = ПредопределенноеЗначение("Перечисление.АР_ВариантыНазначенияСрокаОплаты.Общий");
			Объект.СрокиОплаты[0].Услуга = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры




