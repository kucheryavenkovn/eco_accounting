#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если ЗначениеЗаполнено(Параметры.Основание) Тогда
		Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.АР_СчетНаАренду")
			И Не Параметры.Основание.ВидОперации = Перечисления.АР_ВидыОперацийСчетНаАренду.ОплатаПени Тогда
			ТекстСообщения = "Ввод документа ""Начисление пени"" возможен только на основании счета на аренду с видом операции ""Оплата пени""";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Параметры.Основание,
				"ВидОперации", "Объект", Отказ);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	СпособУчетаНДСПриНачисленииПеней = ПолучитьСпособУчетаНДС();
		
	УстановитьУсловноеОформление();
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ПодготовитьФормуНаСервере();
		
	КонецЕсли;
	
	ОтключитьВалютныеКомандыПечати();

	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиБП.КомандыЭДО_ФормаДокумента(ЭтотОбъект);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Запись_СчетФактураВыданный"
		И ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ДокументыОснования") И Параметр.ДокументыОснования.Найти(Объект.Ссылка) <> Неопределено Тогда
		РеализацияТоваровУслугФормыКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтотОбъект, Параметр.РеквизитыСФ);
		УправлениеФормой(ЭтотОбъект);
	ИначеЕсли ИмяСобытия = "ИзмененСтатусДокументов" Тогда
		// Статус документа изменен в форме списка
		Если Не Объект.Ссылка.Пустая() И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
			СтатусДокумента = ПолучитьСтатусДокумента(Объект.Организация, Объект.Ссылка);
		КонецЕсли;
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;

	// Подсистема "ОбменСКонтрагентами".
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец подсистема "ОбменСКонтрагентами".
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.АР_НачислениеПени.Форма.ФормаРеквизитыОрганизацииКонтрагентаУслуги" Тогда
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		Модифицированность = Истина;
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.Патенты.Форма.ФормаЭлемента" Тогда
		ЗаполнитьПатентОбработкаВыбора(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.УниверсальныйПередаточныйДокумент" Тогда
		РеализацияТоваровУслугФормыКлиент.ОбработкаВыбораУниверсальныйПередаточныйДокумент(ЭтотОбъект, ВыбранноеЗначение);
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПечатьФискальныхДокументовКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылка, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ЗаполнитьДобавленныеКолонкиТаблиц();

	УчетНДСКлиентСервер.ОтобразитьПолеУПДВыданный(ЭтотОбъект, ТекущийОбъект.ЭтоУниверсальныйДокумент);
	
	ОтветственныеЛицаБП.УстановитьПодписиПоУмолчанию(Объект.Ссылка, ПараметрыЗаписи);
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(ТекущийОбъект.Ссылка);
	СчетаФактурыНеТребуются = Документы.АР_НачислениеПени.СчетаФактурыНеТребуются(МассивДокументов);
	
	Если ТекущийОбъект.ЭтоУниверсальныйДокумент
	   И СчетаФактурыНеТребуются.Количество() = 0 Тогда
		ПараметрыЗаписи.Вставить("ВыписатьСчетФактуру", Истина);
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ВыписатьСчетФактуру") 
		И ПараметрыЗаписи.ВыписатьСчетФактуру Тогда 
		
		ПараметрыСоздания = УчетНДСКлиентСервер.НовыеПараметрыСозданияВыданногоСчетаФактуры();
		ПараметрыСоздания.Основание = ТекущийОбъект.Ссылка;
		ПараметрыСоздания.ЭтоУниверсальныйДокумент = ТекущийОбъект.ЭтоУниверсальныйДокумент;
		ПараметрыСоздания.КодВидаОперации = ЭтаФорма.КодВидаОперации;
		ПараметрыСоздания.УникальныйИдентификатор = ЭтаФорма.УникальныйИдентификатор;
		
		Результат = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(ПараметрыСоздания);
		
		Если Результат <> Неопределено
			И Результат.Свойство("ФоновоеВыполнение") Тогда // обработать выполнение в фоновом задании
			
			Результат.ДлительнаяОперация.Вставить("АдресХранилищаСОшибками", Результат.АдресХранилищаСОшибками);
			ПараметрыЗаписи.Вставить("ДлительнаяОперация", Результат.ДлительнаяОперация);
			
		Иначе
			
			РеализацияТоваровУслугФормыКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтаФорма, Результат);
			
			УправлениеФормой(ЭтаФорма);
			
		КонецЕсли;
		
	КонецЕсли;
	
	УчетНДСКлиентСервер.ОтобразитьПолеУПДВыданный(ЭтотОбъект, ТекущийОбъект.ЭтоУниверсальныйДокумент);
	
	УстановитьСостояниеДокумента();
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец подсистема "ОбменСКонтрагентами".
	
	РаботаСДоговорамиКонтрагентовБП.СохранитьСпособВыставленияДокументов(
		ТекущийОбъект.ДоговорКонтрагента,
		ТекущийОбъект.ЭтоУниверсальныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СтруктураРеквизитовПодписи = Новый Структура;
	СтруктураРеквизитовПодписи.вставить("Руководитель",		"ЗаРуководителяНаОсновании");
	СтруктураРеквизитовПодписи.вставить("ГлавныйБухгалтер", "ЗаГлавногоБухгалтераНаОсновании");
	
	ОтветственныеЛицаБП.ПроверитьИзменениеПодписейДокумента(ТекущийОбъект,СтруктураРеквизитовПодписи,ПараметрыЗаписи);
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// Дополнительные свойства для установки статусов по документу
	ЕстьСчетФактура = ЗначениеЗаполнено(СчетФактура) 
		ИЛИ ПараметрыЗаписи.Свойство("ВыписатьСчетФактуру") 
		И ПараметрыЗаписи.ВыписатьСчетФактуру;
	ТекущийОбъект.ДополнительныеСвойства.Вставить("СтатусДокумента",      СтатусДокумента);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ТребуетсяСчетФактура", ТребуетсяСчетФактура И НЕ Объект.ДокументБезНДС);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ЕстьСчетФактура",      ЕстьСчетФактура);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("НомерСчетаФактуры",    НомерСчетаФактуры);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("ВыписатьСчетФактуру") 
		И ПараметрыЗаписи.ВыписатьСчетФактуру
		И ПараметрыЗаписи.Свойство("ДлительнаяОперация") Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Основание", Объект.Ссылка);
		ДополнительныеПараметры.Вставить("АдресХранилищаСОшибками", ПараметрыЗаписи.ДлительнаяОперация.АдресХранилищаСОшибками);
		ДополнительныеПараметры.Вставить("ВыписыватьСчетаФактурыСпецРежимы",
			ПолучитьФункциональнуюОпциюИнтерфейса("ВыписыватьСчетаФактурыСпецРежимы"));
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("Подключаемый_ОбработатьВыпискуСчетаФактуры", ЭтаФорма, ДополнительныеПараметры);
			
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтаФорма);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Актуализация расчетов с контрагентами'");
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ПараметрыЗаписи.ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
	КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение  Тогда
		
		СчетаНаОплатуПокупателю = Новый Массив;
		Для каждого СтрокаУслуги Из Объект.Состав Цикл
			Если ЗначениеЗаполнено(СтрокаУслуги.СчетНаАренду) 
				И СчетаНаОплатуПокупателю.Найти(СтрокаУслуги.СчетНаАренду) = Неопределено Тогда
			
				СчетаНаОплатуПокупателю.Добавить(СтрокаУслуги.СчетНаАренду);
			КонецЕсли; 
		КонецЦикла; 
		Если СчетаНаОплатуПокупателю.Количество() = 0 
			И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			
			СчетаНаОплатуПокупателю.Добавить(Объект.ДокументОснование);
		КонецЕсли;
		
		Для каждого СчетНаОплатуПокупателю Из СчетаНаОплатуПокупателю Цикл
			ОповеститьОбИзменении(СчетНаОплатуПокупателю);
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииНаСервере();
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
	ПечатьФискальныхДокументовФормыКлиентСервер.ПоказатьПредупреждениеПечатьЧека(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ДоговорКонтрагентаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособЗачетаАвансовПриИзменении(Элемент)
	
	СпособЗачетаАвансовПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	БухгалтерскийУчетКлиентПереопределяемый.ОткрытьСчетФактуру(ЭтаФорма, СчетФактура, "СчетФактураВыданный");

КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработатьИзмененияПоКнопкеЦеныИВалюты();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");

КонецПроцедуры

&НаКлиенте
Процедура ДатаКурсаПриИзменении(Элемент)
	
	ДатаКурсаПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРеквизитыОрганизацииКонтрагентаНажатие(Элемент)
	
	Если НЕ ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр", 				ТолькоПросмотр);
	ПараметрыФормы.Вставить("Организация", 					Объект.Организация);
	ПараметрыФормы.Вставить("Контрагент",					Объект.Контрагент);
	ПараметрыФормы.Вставить("СчетОрганизации", 				Объект.СчетОрганизации);
	ПараметрыФормы.Вставить("ДатаДокумента",				Объект.Дата);
	ПараметрыФормы.Вставить("Руководитель",					Объект.Руководитель);
	ПараметрыФормы.Вставить("ЗаРуководителяНаОсновании", 	Объект.ЗаРуководителяНаОсновании);
	ПараметрыФормы.Вставить("ГлавныйБухгалтер",				Объект.ГлавныйБухгалтер);
	ПараметрыФормы.Вставить("ЗаГлавногоБухгалтераНаОсновании",Объект.ЗаГлавногоБухгалтераНаОсновании);
	ПараметрыФормы.Вставить("ДоверенностьЧерезКого",		Объект.ДоверенностьЧерезКого);
	ПараметрыФормы.Вставить("ЗаЗаказчикаНаОсновании",		Объект.ЗаЗаказчикаНаОсновании);
	ПараметрыФормы.Вставить("ОтветственныйЗаОформление",	Объект.ОтветственныйЗаОформление);
	
	ОткрытьФорму("Документ.АР_НачислениеПени.Форма.ФормаРеквизитыОрганизацииКонтрагентаУслуги", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСостояниеЭДОНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	ОбменСКонтрагентамиКлиент.ОткрытьДеревоЭД(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьДепозитПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗачетАвансовДокументАвансаПриИзменении(Элемент)

	Строка = Элементы.ЗачетАвансов.ТекущиеДанные;
	Строка.СуммаЗачета = 0;

КонецПроцедуры

&НаКлиенте
Процедура ЗачетАвансовДокументАвансаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ЗачетАвансов.ТекущиеДанные;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата"                 , Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента"   , Объект.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент"           , Объект.Контрагент);
	ПараметрыОбъекта.Вставить("СчетУчета"            , Объект.СчетУчетаРасчетовПоАвансам);
	ПараметрыОбъекта.Вставить("Организация"          , Объект.Организация);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты"       , "Кт");
	ПараметрыОбъекта.Вставить("ТипыДокументов"       , "Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.ЗачетАвансов.Реквизиты.ДокументАванса.Тип");
	ПараметрыОбъекта.Вставить("РежимОтбораДокументов", ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоОстаткам"));

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)

	ВыбранноеЗначение = Объект.ДокументОснование;
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	КонтрагентДоИзменения = Объект.Контрагент;
	ДоговорКонтрагентаДоИзменения = Объект.ДоговорКонтрагента;

	РеквизитыСчетаНаОплату = АР_ОбщиеПроцедуры.ЗначенияРеквизитовОбъекта(
		ВыбранноеЗначение, "Контрагент, ДоговорКонтрагента");

	Объект.Контрагент 				= РеквизитыСчетаНаОплату.Контрагент;
	Объект.ДоговорКонтрагента 		= РеквизитыСчетаНаОплату.ДоговорКонтрагента;
	
	Если КонтрагентДоИзменения <> Объект.Контрагент Тогда
		КонтрагентОбработатьИзменение();
	КонецЕсли;	
	
	Если ДоговорКонтрагентаДоИзменения <> Объект.ДоговорКонтрагента Тогда
		ДоговорКонтрагентаОбработатьИзменение();
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСостав

&НаКлиенте
Процедура СоставПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
	ПечатьФискальныхДокументовФормыКлиентСервер.ПоказатьПредупреждениеПечатьЧека(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Состав.ТекущиеДанные;
	ДанныеСтрокаТаблицы = Новый Структура("Номенклатура, СтавкаНДС, СчетДоходов, Субконто, СчетРасходов, СчетУчетаНДСПоРеализации,
			| ОбъектАренды, Контрагент, ДоговорКонтрагента, СчетРасчетов");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация, Ссылка, ОкончаниеПериода, СуммаВключаетНДС, Дата");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	ПараметрыОбъекта.ОкончаниеПериода = Объект.Дата;
	
	СоставНоменклатураПриИзмененииНаСервере(ДанныеСтрокаТаблицы, ПараметрыОбъекта);	
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокаТаблицы);
	
	ПриИзмененииСумма(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставСодержаниеПриИзменении(Элемент)
	
	
КонецПроцедуры

&НаКлиенте
Процедура СоставОбъектАрендыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Состав.ТекущиеДанные;
	ДанныеСтрокаТаблицы = Новый Структура("Номенклатура, СчетДоходов, СчетРасходов, СчетРасчетов, СчетУчетаНДСПоРеализации, Субконто, ОбъектАренды, Контрагент, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, ТекущаяСтрока);
	
	ПараметрыОбъекта = Новый Структура("Организация, Ссылка, ОкончаниеПериода, СуммаВключаетНДС, Дата");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	ПараметрыОбъекта.ОкончаниеПериода = Объект.Дата;
	
	АР_ПроцедурыНачисления.ЗаполнитьДанныеПоАгентскимУслугам(ДанныеСтрокаТаблицы, Объект.Организация, ПараметрыОбъекта.ОкончаниеПериода);
	
	СоставОбъектАрендыПриИзмененииНаСервере(ДанныеСтрокаТаблицы, ПараметрыОбъекта);	
	
	ЗаполнитьЗначенияСвойств(Элементы.Состав.ТекущиеДанные, ДанныеСтрокаТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПериодНачисленияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Состав.ТекущиеДанные;
	ПривестиКНачалуПериода(ТекущаяСтрока.ПериодАренды, Объект.ДоговорКонтрагента);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Состав.ТекущиеДанные;
	ПриИзмененииСумма(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставСуммаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Состав.ТекущиеДанные;
	ПриИзмененииСуммаНДС(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Состав.ТекущиеДанные;
	ПриИзмененииСумма(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставКонтрагентПриИзменении(Элемент)
	
	ДанныеСтрокаТаблицы = Новый Структура("ДоговорКонтрагента, Контрагент, СчетРасчетов");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, Элементы.Состав.ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	СоставКонтрагентПриИзмененииНаСервере(ДанныеСтрокаТаблицы, ПараметрыОбъекта);
	
	ЗаполнитьЗначенияСвойств(Элементы.Состав.ТекущиеДанные, ДанныеСтрокаТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставДоговорКонтрагентаПриИзменении(Элемент)
	
	ДанныеСтрокаТаблицы = Новый Структура("ДоговорКонтрагента, Контрагент, СчетРасчетов");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, Элементы.Состав.ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	СоставДоговорКонтрагентаПриИзмененииНаСервере(ДанныеСтрокаТаблицы, ПараметрыОбъекта);
	
	ЗаполнитьЗначенияСвойств(Элементы.Состав.ТекущиеДанные, ДанныеСтрокаТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеятельностьНаПатентеПриИзменении(Элемент)
	
	ДеятельностьНаПатентеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПатентПриИзменении(Элемент)
	
	РеализацияТоваровУслугФормыКлиент.ПатентПриИзменении(ЭтотОбъект, Элемент);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстНеобходимоЗаполнитьПатентОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	РеализацияТоваровУслугФормыКлиент.ТекстНеобходимоЗаполнитьПатентОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьСостав(Команда)
	
	Если Объект.Проведен Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Необходимо отменить проведение документа для автоматического заполнения!'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.Состав.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("СпроситьОбОчисткеТабЧасти", ЭтотОбъект, Истина);
		ПоказатьВопрос(Оповещение, "Табличная часть будет перезаполнена. Продолжить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

	Иначе	
		ЗаполнитьСтрокиНаСервере();
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСостав(Команда)
	
	Если Объект.Состав.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("СпроситьОбОчисткеТабЧасти", ЭтотОбъект, Ложь);
		ПоказатьВопрос(Оповещение, "Очистить табличную часть?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

	Иначе	
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыписатьСчетФактуру(Команда)
	
	РеализацияТоваровУслугФормыКлиент.ВыписатьСчетФактуру(ЭтотОбъект, Команда);
	Если СчетФактура.Пустая() Тогда
		Возврат;
	КонецЕсли;
		
	УправлениеФормой(ЭтотОбъект);
	
	Оповестить("Запись_СчетФактураВыданный");
	
КонецПроцедуры

 &НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьВыпискуСчетаФактуры(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Результат.Вставить("ФоновоеВыполнение", Истина);
	КонецЕсли;
	РеквизитыСФ = УчетНДСКлиент.ОбработатьВыпискуСчетаФактуры(ЭтаФорма, Результат, ДополнительныеПараметры);
	
	Если РеквизитыСФ <> Неопределено Тогда 
		УчетНДСКлиентСервер.ЗаполнитьРеквизитыФормыПроСчетФактуруВыданный(ЭтаФорма, РеквизитыСФ);
	КонецЕсли;
	
	Если СчетФактура.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаРеквизитовНаСервере

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	Если (Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета) Тогда
		СтруктураКурсаДокумента        = АР_ПроцедурыНачисления.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.ДатаКурса, Объект.ДоговорКонтрагента);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	УстановитьФункциональныеОпцииФормы();
	
	ПениПоАрендеБезНДС = СпособУчетаНДСПриНачисленииПеней = ПредопределенноеЗначение("Перечисление.АР_СпособыУчетаНДСПриНачисленииПеней.НеУчитыватьНДС");
	
	Если ПлательщикНДС И НЕ ПениПоАрендеБезНДС Тогда 
		Объект.ДокументБезНДС = Ложь;
	КонецЕсли;
	
	УчетПСН.ДатаПриИзменении(Объект);
	
	ПолучитьПризнакФиксированнаяСуммаПени();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДатаКурсаПриИзмененииНаСервере()
	
	Если (Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета) Тогда
		СтруктураКурсаДокумента        = АР_ПроцедурыНачисления.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.ДатаКурса, Объект.ДоговорКонтрагента);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ОрганизацияОбработатьИзменение();
	УстановитьВидимостьАгентскойСхемы();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияОбработатьИзменение()

	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
		
	УстановитьФункциональныеОпцииФормы();
	
	ПениПоАрендеБезНДС = СпособУчетаНДСПриНачисленииПеней = ПредопределенноеЗначение("Перечисление.АР_СпособыУчетаНДСПриНачисленииПеней.НеУчитыватьНДС");
	
	Если ПлательщикНДС И НЕ ПениПоАрендеБезНДС Тогда 
		Объект.ДокументБезНДС = Ложь;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, НалоговыйУчетУСН.ДеятельностьНаПатентеПоУмолчанию(Объект.Организация, Объект.Дата));
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);

	КонтрагентОбработатьИзменение();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	КонтрагентОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменение()

	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
		Объект.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация); 

	ДоговорКонтрагентаОбработатьИзменение();

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()
	
	ДоговорКонтрагентаОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение()

	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаДоИзменения = Объект.ВалютаДокумента;
	КурсДоИзменения   = Объект.КурсВзаиморасчетов;
	СуммаВключаетНДСДоИзменения = Объект.СуммаВключаетНДС;

	РеквизитыДоговора = АР_ОбщиеПроцедуры.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов,Владелец, ТипЦен, РасчетыВУсловныхЕдиницах");

	Объект.ВалютаДокумента         = РеквизитыДоговора.ВалютаВзаиморасчетов;
	ВалютаВзаиморасчетов 		   = РеквизитыДоговора.ВалютаВзаиморасчетов;
	
	ПараметрыДоговора = РаботаСДоговорамиКонтрагентовБП.ПараметрыДоговора(Объект.ДоговорКонтрагента);
	Объект.ЭтоУниверсальныйДокумент     = ПараметрыДоговора.ЭтоУниверсальныйДокумент;
	
	СтруктураКурсаДокумента        = АР_ПроцедурыНачисления.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.ДатаКурса, Объект.ДоговорКонтрагента);
	Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
	Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	
	ЗаполнитьСчетаУчетаВТабличнойЧасти();
	
	Документы.АР_НачислениеПени.ЗаполнитьСчетаУчетаРасчетов(Объект);
	
	УстановитьСпособЗачетаАвансов();
	
	Если РеквизитыДоговора.РасчетыВУсловныхЕдиницах Тогда
		ВалютаОплаты = ВалютаРегламентированногоУчета;
	Иначе
		ВалютаОплаты = РеквизитыДоговора.ВалютаВзаиморасчетов;
	КонецЕсли;
	
	УчетДенежныхСредствБП.УстановитьБанковскийСчет(
		Объект.СчетОрганизации, Объект.Организация, ВалютаОплаты, Истина);
		
	ПересчитатьЦены = ВалютаДоИзменения <> Объект.ВалютаДокумента;
	ЗаполнитьРассчитатьСуммы(ВалютаДоИзменения, Ложь, ПересчитатьЦены, Ложь, Объект.ДокументБезНДС);	
		
	ТребуетсяСчетФактура = Истина;
	ПолучитьПризнакФиксированнаяСуммаПени();
	
КонецПроцедуры

&НаСервере
Процедура СпособЗачетаАвансовПриИзмененииНаСервере()
	
	СпособЗачетаАвансовОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);

	Если Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЗачетАвансов;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СпособЗачетаАвансовОбработатьИзменение()

	Объект.СчетУчетаРасчетовПоАвансам = Неопределено;
	Объект.ЗачетАвансов.Очистить();

	Если Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически
		ИЛИ Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
			Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
		ПараметрыНачисленияПени = АР_ПроцедурыНачисления.ПолучитьПараметрыНачисленияПени(Объект.ДоговорКонтрагента, Объект.Дата);
		ОбособленныйУчетПени = ?(ПараметрыНачисленияПени = Неопределено, Ложь, ПараметрыНачисленияПени.СпособПогашенияПени = Перечисления.АР_СпособыПогашенияПени.ВестиОбособленныйУчетПени);
		Если ОбособленныйУчетПени Тогда
			Объект.СчетУчетаРасчетовПоАвансам = Объект.СчетУчетаРасчетовСКонтрагентом;
		Иначе
			Объект.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансовПокупателя;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОтражениеДоходовПриИзмененииНаСервере()
	
	Если ТипЗнч(ЭтаФорма.ОтражениеДоходов) = Тип("СправочникСсылка.Патенты") Тогда
		Объект.Патент                      = ЭтаФорма.ОтражениеДоходов;
	Иначе
		Объект.Патент                      = Справочники.Патенты.ПустаяСсылка();
	КонецЕсли;
	
	Объект.ДеятельностьНаПатенте = ЗначениеЗаполнено(Объект.Патент);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоставНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ПараметрыОбъекта)
	
	НаименованиеПолное = СтрокаТабличнойЧасти.Номенклатура.НаименованиеПолное;
	Если ПустаяСтрока(НаименованиеПолное) Тогда
		СтрокаТабличнойЧасти.Вставить("Содержание", СтрокаТабличнойЧасти.Номенклатура.Наименование);
	Иначе
		СтрокаТабличнойЧасти.Вставить("Содержание", НаименованиеПолное);
	КонецЕсли;
	
	МетаданныеДокумента = ПараметрыОбъекта.Ссылка.Метаданные();
	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ПараметрыОбъекта, "Состав", МетаданныеДокумента);
	
	АР_ПроцедурыНачисления.ЗаполнитьДанныеПоАгентскимУслугам(СтрокаТабличнойЧасти, ПараметрыОбъекта.Организация, ПараметрыОбъекта.ОкончаниеПериода);
	
	Документы.АР_НачислениеПени.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(ПараметрыОбъекта, СтрокаТабличнойЧасти);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоставОбъектАрендыПриИзмененииНаСервере(СтрокаТабличнойЧасти, ПараметрыОбъекта)
	
	Документы.АР_НачислениеПени.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(ПараметрыОбъекта, СтрокаТабличнойЧасти);

КонецПроцедуры

&НаСервере
Процедура СоставКонтрагентПриИзмененииНаСервере(СтрокаТабличнойЧасти, ПараметрыОбъекта)
	
	Если РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(СтрокаТабличнойЧасти.ДоговорКонтрагента, СтрокаТабличнойЧасти.Контрагент, ПараметрыОбъекта.Организация, Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) Тогда
		СоставДоговорКонтрагентаПриИзмененииНаСервере(СтрокаТабличнойЧасти, ПараметрыОбъекта);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СоставДоговорКонтрагентаПриИзмененииНаСервере(СтрокаТабличнойЧасти, ПараметрыОбъекта)
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДоговорКонтрагента) И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Контрагент) Тогда
		СтрокаТабличнойЧасти.Контрагент = СтрокаТабличнойЧасти.ДоговорКонтрагента.Владелец;
	КонецЕсли;
	
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(ПараметрыОбъекта.Организация, СтрокаТабличнойЧасти.Контрагент, СтрокаТабличнойЧасти.ДоговорКонтрагента);
    СтрокаТабличнойЧасти.СчетРасчетов = СчетаУчета.СчетРасчетовСКомитентом;
	
КонецПроцедуры

#КонецОбласти

// Обслуживание типа цен - валюты - НДС:

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(ПересчитатьЦены = Ложь, ПерезаполнитьЦены = Ложь)

	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",      Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",                 Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность",            Объект.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",     Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("ДокументБезНДС",       Объект.ДокументБезНДС);
	СтруктураПараметров.Вставить("Контрагент",           Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",              Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация",          Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",        Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",    ПерезаполнитьЦены);
	СтруктураПараметров.Вставить("ПересчитатьЦены",      ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", Ложь);
	СтруктураПараметров.Вставить("ПениПоАрендеБезНДС", 	Истина);
	
	// 2. Открываем форму "Цены и Валюта".
	ДополнительныеПараметры = Новый Структура;
	
	Если ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета Тогда 
		ОткрыватьИзМеню = Ложь;
	Иначе
		ОткрыватьИзМеню = Истина;
		ДополнительныеПараметры.Вставить("СтруктураПараметровКоманды", СтруктураПараметров);
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ОткрыватьИзМеню Тогда
		
		СписокКоманд = Новый СписокЗначений;
		
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.ДокументБезНДС"));
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДССверху"));
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме"));
		
		ПоказатьВыборИзМеню(ОповещениеОЗакрытии, СписокКоманд, Элементы.ЦеныИВалюта);		
	Иначе
		ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,, ОповещениеОЗакрытии);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("СтруктураПараметровКоманды") Тогда
		
		СтруктураЦеныИВалюта = ДополнительныеПараметры.СтруктураПараметровКоманды;
		
		СуммаВключаетНДСДоИзменения = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Если РезультатЗакрытия = Неопределено Тогда 
			Возврат;
		ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.ДокументБезНДС") Тогда
			СтруктураЦеныИВалюта.ДокументБезНДС 	= Истина;
		ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме") Тогда
			СтруктураЦеныИВалюта.ДокументБезНДС 	= Ложь;
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Истина;
		Иначе
			СтруктураЦеныИВалюта.ДокументБезНДС 	= Ложь;
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Ложь;
		КонецЕсли;
		
		СтруктураЦеныИВалюта.Вставить("ПерезаполнитьЦены",    Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьЦены",      Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьНДС",       СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС
			ИЛИ Объект.ДокументБезНДС <> СтруктураЦеныИВалюта.ДокументБезНДС);
		СтруктураЦеныИВалюта.Вставить("БылиВнесеныИзменения", СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС
			ИЛИ Объект.ДокументБезНДС <> СтруктураЦеныИВалюта.ДокументБезНДС);
			
	Иначе
		СтруктураЦеныИВалюта = РезультатЗакрытия;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") Тогда

		ВалютаДоИзменения    = Объект.ВалютаДокумента;
		КурсДоИзменения      = Объект.КурсВзаиморасчетов;
		КратностьДоИзменения = Объект.КратностьВзаиморасчетов;
		
		Объект.ВалютаДокумента         = СтруктураЦеныИВалюта.ВалютаДокумента;
		Объект.КурсВзаиморасчетов      = СтруктураЦеныИВалюта.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.Кратность;
		Объект.СуммаВключаетНДС        = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Объект.ДокументБезНДС		   = СтруктураЦеныИВалюта.ДокументБезНДС;
		
		Модифицированность = Истина;

		ПересчитатьНДС = СтруктураЦеныИВалюта.ПересчитатьНДС;
		ПересчитатьЦены = ВалютаДоИзменения <> СтруктураЦеныИВалюта.ВалютаДокумента;
		
		ЗаполнитьРассчитатьСуммы(ВалютаДоИзменения, 
			Ложь, // в аренде нет заполнения цен по ценам номенклатуры 
			ПересчитатьЦены, 
			Ложь, // не используем типовой пересчет НДС
			Объект.ДокументБезНДС);
		
		Если ПересчитатьНДС Тогда
			Для Каждого Стр Из Объект.Состав Цикл
				ПриИзмененииСумма(Стр);	
			КонецЦикла;
		КонецЕсли;
		
		ОбновитьИтоги(ЭтаФорма);
		СформироватьНадписьЦеныИВалюта(ЭтаФорма);
				
	КонецЕсли;
	СпособУчетаНДСПриНачисленииПеней = ПолучитьСпособУчетаНДС();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммы(Знач ВалютаДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь, ДокументБезНДС = Ложь)

	Если НЕ (ПерезаполнитьЦены ИЛИ ПересчитатьЦены ИЛИ ПересчитатьНДС ИЛИ ДокументБезНДС) Тогда
		Возврат;
	КонецЕсли;

	Если ПерезаполнитьЦены Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Дата",            Объект.Дата);
		Запрос.УстановитьПараметр("Состав",          Объект.Состав.Выгрузить());

		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокумента.Номенклатура
		|ПОМЕСТИТЬ ТаблицаСостав
		|ИЗ
		|	&Состав КАК ТаблицаДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаСостав.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ТаблицаНоменклатуры
		|ИЗ
		|	ТаблицаСостав КАК ТаблицаТовары
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Курс КАК Курс,
		|	КурсыВалютСрезПоследних.Кратность КАК Кратность,
		|	КурсыВалютСрезПоследних.Валюта КАК Валюта
		|ПОМЕСТИТЬ КурсыВалют
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Цена,
		|	ЦеныНоменклатурыСрезПоследних.Валюта КАК Валюта,
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура
		|ПОМЕСТИТЬ ЦеныНоменклатуры
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНоменклатуры.Номенклатура,
		|	КурсыВалют.Курс,
		|	КурсыВалют.Кратность,
		|	ЦеныНоменклатуры.Цена,
		|	ЦеныНоменклатуры.Валюта
		|ИЗ
		|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|		ПО ТаблицаНоменклатуры.Номенклатура = ЦеныНоменклатуры.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|		ПО (ЦеныНоменклатуры.Валюта = КурсыВалют.Валюта)";

		Результат = Запрос.Выполнить().Выбрать();
	ИначеЕсли ПересчитатьЦены Тогда
		СтруктураКурса = АР_ПроцедурыНачисления.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.ДатаКурса, Объект.ДоговорКонтрагента);
	КонецЕсли;

	Для Каждого Строка Из Объект.Состав Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, Результат, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 1, Объект.ДокументБезНДС);
	КонецЦикла;

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммыВСтроке(Строка, Результат, ВалютаПередИзменением, СтруктураКурса,
										ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, ЕстьНДС,
										ЗначениеПустогоКоличества, ДокументБезНДС)

	Если ПерезаполнитьЦены Тогда // в нашем случае не используется, нет типа цен
		Результат.Сбросить();
		Если Результат.НайтиСледующий(Строка.Номенклатура, "Номенклатура") Тогда

			Цена = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
				Результат.Цена, Результат.Валюта, Объект.ВалютаДокумента, Результат.Курс,
				Результат.Кратность, Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов);

		Иначе
			Цена = 0;
		КонецЕсли;
		// Признак того, что цена включает НДС, хранится в реквизите ЦенаВключаетНДС типа цен
		ЦенаВключаетНДС = Ложь;
	Иначе
		Если ПересчитатьЦены Тогда

			Цена = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
				Строка.Сумма, ВалютаПередИзменением, Объект.ВалютаДокумента, СтруктураКурса.Курс,
				СтруктураКурса.Кратность, Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов);

		Иначе
			Цена = Строка.Сумма;
		КонецЕсли;
		// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа
		ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);
	КонецЕсли;

	Если ДокументБезНДС Тогда
		Строка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
	
	Если ЕстьНДС Тогда

		Строка.Сумма = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));

		Строка.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(Строка.Сумма, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
		Строка.Всего 	= Строка.Сумма + ?(Объект.СуммаВключаетНДС, 0, Строка.СуммаНДС);

	Иначе
		Строка.Сумма = Цена;
	КонецЕсли;

КонецПроцедуры

// Серверная обработка изменения реквизитов:

&НаСервере
Процедура УстановитьСпособЗачетаАвансов()

	Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	
	СпособЗачетаАвансовОбработатьИзменение();

КонецПроцедуры

// Пересчеты реквизитов в строках табличных частей

&НаКлиенте
Процедура ПриИзмененииСумма(СтрокаТаблицы)

	Если СтрокаТаблицы.Свойство("СуммаНДС") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	КонецЕсли;

	Если СтрокаТаблицы.Свойство("Всего") Тогда
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЕсли;

	Если СтрокаТаблицы.Свойство("ВсегоКомУслуг") Тогда
		ПостояннаяЧастьОплаты = АР_ОбщиеПроцедуры.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Номенклатура, "АР_ПостояннаяЧастьОплаты");
		СтрокаТаблицы.ВсегоКомУслуг = ?(ПостояннаяЧастьОплаты = Ложь, СтрокаТаблицы.Сумма, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСуммаНДС(СтрокаТаблицы)

	Если СтрокаТаблицы.Свойство("Всего") Тогда
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЕсли;

	Если СтрокаТаблицы.Свойство("ВсегоКомУслуг") Тогда
		ПостояннаяЧастьОплаты = АР_ОбщиеПроцедуры.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Номенклатура, "АР_ПостояннаяЧастьОплаты");
		СтрокаТаблицы.ВсегоКомУслуг = ?(ПостояннаяЧастьОплаты = Ложь, СтрокаТаблицы.Сумма, 0);
	КонецЕсли;
	
КонецПроцедуры

// Внешний вид, содержание надписей и т.п.

&НаСервере
Процедура УстановитьУсловноеОформление()

	// СоставСтавкаНДС, УслугиСуммаНДС, УслугиВсего

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СоставСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СоставСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СоставВсего");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ДокументБезНДС", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ПлательщикЕНВД			= УчетнаяПолитика.ПлательщикЕНВД(Объект.Организация, Объект.Дата);
	ПлательщикНДС			= УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);	
	ПлательщикНДФЛ			= УчетнаяПолитика.ПлательщикНДФЛ(Объект.Организация, Объект.Дата);
	ПрименяетсяУСНПатент	= УчетнаяПолитика.ПрименяетсяУСНПатент(Объект.Организация, Объект.Дата);
	
	Если ПрименяетсяУСНПатент Тогда
		ПрименяетсяНесколькоПатентов = Справочники.Патенты.ИспользуетсяНесколькоПатентов(Объект.Организация, Объект.Дата);
	КонецЕсли;
	
	ПрименяетсяТолькоУСНПатент       = УчетнаяПолитика.ПрименяетсяТолькоУСНПатент(Объект.Организация, Объект.Дата);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	// Управление видимостью патента.
	Элементы.ТекстНеобходимоЗаполнитьПатент.Видимость =
		УчетПСНКлиентСервер.ПоказатьПредупреждениеНеобходимоЗаполнитьПатент(
			Объект.Организация,
			Объект.Патент,
			Форма.ПрименяетсяТолькоУСНПатент,
			Форма.ПрименяетсяНесколькоПатентов);
	
	Элементы.Патент.Доступность = Объект.ДеятельностьНаПатенте ИЛИ Форма.ПрименяетсяТолькоУСНПатент;
	Элементы.Патент.Видимость   = Форма.ПрименяетсяНесколькоПатентов ИЛИ Не Форма.ПрименяетсяТолькоУСНПатент;
	
	// Если только патент, то флаг избыточен - патент должен быть доступен для выбора всегда.
	Элементы.ДеятельностьНаПатенте.Видимость = НЕ Форма.ПрименяетсяТолькоУСНПатент;
	
	Элементы.ГруппаДеятельностьНаПатенте.Видимость = Форма.ПрименяетсяУСНПатент;
	
	Элементы.ГруппаСчетаУчетаРасчетов.Видимость   = Форма.ПоказыватьВДокументахСчетаУчета;
	Элементы.ГруппаЗачетАвансов.Видимость    = Объект.СпособЗачетаАвансов = ПредопределенноеЗначение("Перечисление.СпособыЗачетаАвансов.ПоДокументу");

	Элементы.ДатаКурса.Видимость = НЕ Форма.ВалютаРегламентированногоУчета = Объект.ВалютаДокумента;
	
	Элементы.СоставСтавкаПени.Заголовок = ?(Форма.ФиксированнаяСуммаПени, "Ставка пени", "Ставка пени, %");
	
	// Установка видимости колонок если отражаем в рег. учете.
	Элементы.СоставСчетДоходов.Видимость            = Форма.ПоказыватьВДокументахСчетаУчета;
	Элементы.СоставСубконто.Видимость               = Форма.ПоказыватьВДокументахСчетаУчета;
	Элементы.СоставСчетРасходов.Видимость           = Форма.ПоказыватьВДокументахСчетаУчета;
	Элементы.СоставСчетУчетаНДСПоРеализации.Видимость = Форма.ПоказыватьВДокументахСчетаУчета;
	
	Элементы.ДоговорКонтрагента.Доступность       = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.СпособЗачетаАвансов.Доступность      = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);

	Элементы.СоставКонтрагент.Видимость = Форма.ВидимостьАгентскойСхемы;
	Элементы.СоставДоговорКонтрагента.Видимость = Форма.ВидимостьАгентскойСхемы;
	Элементы.СоставСчетРасчетов.Видимость = Форма.ВидимостьАгентскойСхемы И Форма.ПоказыватьВДокументахСчетаУчета;
	
	Элементы.СчетУчетаДепозита.Видимость = Объект.УчитыватьДепозит;
	
	Если Объект.ЭтоУниверсальныйДокумент Тогда
		НеОтображатьРеквизитыСчетаФактуры = Истина;
	Иначе
		НеОтображатьРеквизитыСчетаФактуры = Объект.ДокументБезНДС;
	КонецЕсли;
	
	// Счет-фактура
	УчетНДСКлиентСервер.НастроитьПоляСчетаФактуры(
		Форма.Элементы.СчетФактураКнопка,
		Форма.Элементы.СчетФактураСсылка,
		Форма.Элементы.НадписьСчетФактура,
		НеОтображатьРеквизитыСчетаФактуры,
		Форма.ТребуетсяСчетФактура,
		Форма.СчетФактура);
		
	УчетНДСКлиентСервер.ОтобразитьПолеУПДВыданный(Форма, НеОтображатьРеквизитыСчетаФактуры);
	
	Элементы.ИтогиВсегоНДС.Видимость 		= Не Объект.ДокументБезНДС;
	
	ОбновитьИтоги(Форма);
	СформироватьНадписьЦеныИВалюта(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Форма.ИтогиВсего    		= Форма.Объект.Состав.Итог("Всего");
	Форма.ИтогиВсегоКомУслуги 	= Форма.Объект.Состав.Итог("ВсегоКомУслуг");
	Форма.ИтогиВсегоНДС 		= Форма.Объект.Состав.Итог("СуммаНДС");

КонецПроцедуры

&НаСервере
Процедура ДеятельностьНаПатентеПриИзмененииНаСервере()
	
	РеализацияТоваровУслугФормы.ОбработатьИзменениеДеятельностьНаПатенте(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПатентОбработкаВыбора(ВыбранныйПатент)
	
	Если ТипЗнч(ВыбранныйПатент) <> Тип("СправочникСсылка.Патенты") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПатентОбработкаВыбораНаСервере(ВыбранныйПатент);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПатентОбработкаВыбораНаСервере(ВыбранныйПатент)
	
	Если Не УчетПСН.ПатентДоступенДляВыбора(ВыбранныйПатент, Объект.Организация, Объект.Дата) Тогда
		ВыбранныйПатент = Справочники.Патенты.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыбранныйПатент) Тогда
		Объект.ДеятельностьНаПатенте       = Истина;
		Объект.Патент                      = ВыбранныйПатент;
		
		ДеятельностьНаПатентеПриИзмененииНаСервере();
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
	СтруктураНадписи = Новый Структура(
		"ВалютаДокумента, Курс, Кратность, СуммаВключаетНДС, ДокументБезНДС",
		Объект.ВалютаДокумента,
		Объект.КурсВзаиморасчетов,
		Объект.КратностьВзаиморасчетов,
		Объект.СуммаВключаетНДС,
		Объект.ДокументБезНДС);
	Форма.ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);

КонецПроцедуры 

&НаКлиенте
Процедура ПривестиКНачалуПериода(Дата, Договор) 
	
	Если ТипЗнч(Дата) = Тип("Дата") Тогда
		Если ЗначениеЗаполнено(Договор) Тогда 
			Дата = АР_ОбщиеПроцедуры.ОпределитьНачалоПериодаОплатыПоДоговору(Дата, Договор);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокиНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьСтроки();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

 	Для Каждого СтрокаТаблицы Из Объект.Состав Цикл
		
		СтрокаТаблицы.Всего 		= СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
		СтрокаТаблицы.ВсегоКомУслуг = ?(СтрокаТаблицы.Номенклатура.АР_ПостояннаяЧастьОплаты, 0, СтрокаТаблицы.Сумма);
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетНаАренду) Тогда
			Если СтрокаТаблицы.Номенклатура.АР_ПостояннаяЧастьОплаты И Объект.ДоговорКонтрагента.АР_ВестиВзаиморасчетыПоСчетамПост ИЛИ
				НЕ СтрокаТаблицы.Номенклатура.АР_ПостояннаяЧастьОплаты И Объект.ДоговорКонтрагента.АР_ВестиВзаиморасчетыПоСчетамПерем Тогда
				Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
					СтрокаТаблицы.СчетНаАренду = Объект.ДокументОснование;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	Если НЕ (Параметры.Свойство("Основание") И ЗначениеЗаполнено(Параметры.Основание) И ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.АР_СчетНаАренду")) Тогда
		СпособУчетаНДСПриНачисленииПеней = Константы.АР_СпособУчетаНДСПриНачисленииПеней.Получить();
	КонецЕсли;
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	УстановитьСостояниеДокумента();
	
	СтатусДокумента = ПолучитьСтатусДокумента(Объект.Организация, Объект.Ссылка);
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.ДоговорКонтрагента, "ВидДоговора, РасчетыВУсловныхЕдиницах, ВалютаВзаиморасчетов");
		ВалютаВзаиморасчетов = РеквизитыДоговора.ВалютаВзаиморасчетов;
	Иначе	
		ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	ВыписыватьСчетФактуру = Истина;
	СчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(Объект.Ссылка);
		
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ПоказыватьВДокументахСчетаУчета	= Истина;
	
	УстановитьПараметрыВыбора(ЭтаФорма);
	
	УстановитьВидимостьАгентскойСхемы();
	
	ЭтаФорма.ТребуетсяСчетФактура = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.СчетФактураВыданный) Тогда
		РеализацияТоваровУслугФормыКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтотОбъект);
	КонецЕсли;
	
	РеализацияТоваровУслугФормы.ЗаполнитьРеквизитыУПД(ЭтотОбъект);
	
	ПолучитьПризнакФиксированнаяСуммаПени();
	
	УправлениеФормой(ЭтаФорма);
	
	ПечатьФискальныхДокументовФормыКлиентСервер.ПодготовитьФормуНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти()

	Документы.АР_НачислениеАренднойПлаты.ЗаполнитьСчетаУчетаВТабЧасти(Объект);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбора(Форма)

КонецПроцедуры

&НаКлиенте
Процедура СпроситьОбОчисткеТабЧасти(РезультатВопроса, ЗаполнитьТабЧасть) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Состав.Очистить();	
		Если ЗаполнитьТабЧасть Тогда
			ЗаполнитьСтрокиНаСервере();
		КонецЕсли;
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьВалютныеКомандыПечати()
	
	Если НЕ Объект.ВалютаДокумента = ЭтаФорма.ВалютаРегламентированногоУчета Тогда
		Возврат;
	КонецЕсли;
	
	СписокОтключаемыхКоманд = Новый Массив;
	СписокОтключаемыхКоманд.Добавить("АктРуб");
	СписокОтключаемыхКоманд.Добавить("АктСводныйРуб");
	
	ПодменюПечать = ЭтаФорма.Элементы.Найти("ПодменюПечать");
	Если НЕ ПодменюПечать = Неопределено Тогда
		Для Каждого Элемент Из СписокОтключаемыхКоманд Цикл
			АР_МодификацияКонфигурации.ОтключитьКомандыПечати(ПодменюПечать, Элемент);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()

	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Функция ПолучитьСпособУчетаНДС()
	
	Если Объект.ДокументБезНДС Тогда
		Возврат Перечисления.АР_СпособыУчетаНДСПриНачисленииПеней.НеУчитыватьНДС;
	ИначеЕсли Объект.СуммаВключаетНДС Тогда
		Возврат Перечисления.АР_СпособыУчетаНДСПриНачисленииПеней.НДСВСумме;
	Иначе
		Возврат Перечисления.АР_СпособыУчетаНДСПриНачисленииПеней.НДССверху;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьАгентскойСхемы()
	 	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(АР_СобственникиОбъектовАренды.Собственник, АР_СобственникиОбъектовАрендыВсе.Собственник) КАК Собственник,
		|	АР_ОбъектыАренды.Ссылка КАК ОбъектАренды
		|ПОМЕСТИТЬ ВТДействующиеСобственники
		|ИЗ
		|	Справочник.АР_ОбъектыАренды КАК АР_ОбъектыАренды
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АР_СобственникиОбъектовАренды.СрезПоследних(&Период, ) КАК АР_СобственникиОбъектовАренды
		|		ПО АР_ОбъектыАренды.Ссылка = АР_СобственникиОбъектовАренды.ОбъектАренды
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АР_СобственникиОбъектовАренды.СрезПоследних(&Период, ОбъектАренды = ЗНАЧЕНИЕ(Справочник.АР_ОбъектыАренды.ПустаяСсылка)) КАК АР_СобственникиОбъектовАрендыВсе
		|		ПО (ИСТИНА)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(АР_СобственникиОбъектовАренды.Собственник, АР_СобственникиОбъектовАрендыВсе.Собственник),
		|	АР_ОбъектыАренды.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВТДействующиеСобственники.ОбъектАренды КАК ОбъектАренды,
		|	ВТДействующиеСобственники.Собственник КАК Собственник,
		|	АР_СобственникиОбъектовНедвижимостиСобственники.Доля КАК Доля,
		|	АР_СобственникиОбъектовНедвижимостиСобственники.НомерЗаписиВЕГРП КАК НомерЗаписиВЕГРП,
		|	АР_СобственникиОбъектовНедвижимостиСобственники.ДатаЗаписиВЕГРП КАК ДатаЗаписиВЕГРП,
		|	АР_СобственникиОбъектовНедвижимостиСобственники.АгентскаяСхема КАК АгентскаяСхема,
		|	АР_СобственникиОбъектовНедвижимостиСобственники.АгентскийДоговор КАК ДоговорПринципала,
		|	АР_СобственникиОбъектовНедвижимостиСобственники.Собственник КАК Контрагент
		|ИЗ
		|	ВТДействующиеСобственники КАК ВТДействующиеСобственники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АР_СобственникиОбъектовНедвижимости.Собственники КАК АР_СобственникиОбъектовНедвижимостиСобственники
		|		ПО ВТДействующиеСобственники.Собственник = АР_СобственникиОбъектовНедвижимостиСобственники.Ссылка
		|ГДЕ
		|	АР_СобственникиОбъектовНедвижимостиСобственники.АгентскийДоговор.Организация = &Организация
		|	И АР_СобственникиОбъектовНедвижимостиСобственники.АгентскаяСхема = ИСТИНА
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТДействующиеСобственники.ОбъектАренды,
		|	ВТДействующиеСобственники.Собственник,
		|	АР_СобственникиОбъектовНедвижимостиСобственники.Доля,
		|	АР_СобственникиОбъектовНедвижимостиСобственники.НомерЗаписиВЕГРП,
		|	АР_СобственникиОбъектовНедвижимостиСобственники.ДатаЗаписиВЕГРП,
		|	АР_СобственникиОбъектовНедвижимостиСобственники.АгентскаяСхема,
		|	АР_СобственникиОбъектовНедвижимостиСобственники.АгентскийДоговор,
		|	АР_СобственникиОбъектовНедвижимостиСобственники.Собственник";
	
	Запрос.УстановитьПараметр("Период",      КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВидимостьАгентскойСхемы = Выборка.Следующий();

КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));

КонецПроцедуры

&НаСервере
Процедура ПолучитьПризнакФиксированнаяСуммаПени()
	
	ПараметрыПени = АР_ПроцедурыНачисления.ПолучитьПараметрыНачисленияПени(Объект.ДоговорКонтрагента, Объект.Дата);
	Если ПараметрыПени = Неопределено Тогда
		ФиксированнаяСуммаПени = Ложь;
	Иначе
		ФиксированнаяСуммаПени = ПараметрыПени.СпособНачисленияПени = Перечисления.АР_СпособыНачисленияПени.Суммой;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УПДПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, ЭтотОбъект.Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеУПДНажатие(Элемент, СтандартнаяОбработка)
	
	УчетНДСКлиент.ОткрытьФормуРеквизитовУПДВыданный(ЭтотОбъект, СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти

#Область СтатусыДокументов

&НаСервереБезКонтекста
Функция ПолучитьСтатусДокумента(Знач Организация, Знач Ссылка)
	
	Возврат (РегистрыСведений.СтатусыДокументов.ПолучитьСтатусыДокумента(Ссылка, Организация).Статус =
		Перечисления.СтатусыДокументовРеализации.Подписан);
	
КонецФункции

#КонецОбласти

