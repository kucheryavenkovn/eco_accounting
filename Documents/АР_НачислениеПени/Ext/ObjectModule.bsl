#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура предназначена для автоматического заполнения строк табличной части
Процедура ЗаполнитьСтроки() Экспорт
	
	Данные = АР_ПроцедурыНачисления.НачислениеПени(ДоговорКонтрагента, КонецДня(Дата), ДокументБезНДС);
	Данные = АР_ПроцедурыНачисления.РазбитьСуммуПоСобственникамУчета(ЭтотОбъект, Данные);
	Если ЗначениеЗаполнено(Данные) Тогда
		Состав.Загрузить(Данные);
	Иначе
		Состав.Очистить();
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Состав Цикл
		
		НаименованиеПолное = СтрокаТЧ.Номенклатура.НаименованиеПолное;
		Если ПустаяСтрока(НаименованиеПолное) Тогда
			СтрокаТЧ.Содержание = СтрокаТЧ.Номенклатура.Наименование;
		Иначе
			СтрокаТЧ.Содержание = НаименованиеПолное;
		КонецЕсли;
		
		Документы.АР_НачислениеПени.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(ЭтотОбъект, СтрокаТЧ);
		
	КонецЦикла;
			
КонецПроцедуры

// Функция готовит пакетный запрос для ОбработкиПроверкиЗаполнения.
//	Табличные части объекта (еще не сохраненного в информационной базе) выгружаются во временные таблицы,
//	соединяются с другими нужными талицами.
//
//Параметры:
//	СтруктураРезультатов - <Структура> - описание пакета запросов. Ключ - имя результата запроса, значение - индекс этого результата
//
//Возвращает массив результатов запроса
Функция ПолучитьДанныеОбъектаДляПроверкиЗаполнения(СтруктураРезультатов)

	Запрос = Новый Запрос;

	Запрос.Текст = "";


	Если Состав.Количество() > 0 Тогда
		Запрос.УстановитьПараметр("ТаблицаСостав", Состав.Выгрузить());

		СтруктураРезультатов.Вставить("ТаблицаСостав", СтруктураРезультатов.Количество());
		СтруктураРезультатов.Вставить("Состав", СтруктураРезультатов.Количество());

		Запрос.Текст = Запрос.Текст + ?(ПустаяСтрока(Запрос.Текст), "", Символы.ПС + ";" + Символы.ПС) +
		"ВЫБРАТЬ
		|	ВремТаблица.НомерСтроки,
		|	ВремТаблица.Номенклатура,
		|	ВремТаблица.ОбъектАренды,
		|	ВремТаблица.СрокОплаты,
		|	ВремТаблица.КоличествоДнейПросрочки,
		|	ВремТаблица.ДолгЗаПериод,
		|	ВремТаблица.Сумма,
		|	ВремТаблица.СтавкаНДС,
		|	ВремТаблица.СуммаНДС,
		|	ВремТаблица.СчетНаАренду,
		|	ВремТаблица.СчетУчетаНДСПоРеализации,
		|	ВремТаблица.СчетДоходов,
		|	ВремТаблица.СчетРасходов,
		|	ВремТаблица.Субконто,
		|	ВремТаблица.ПериодАренды,
		|	ВремТаблица.Контрагент,
		|	ВремТаблица.ДоговорКонтрагента,
		|	ВремТаблица.СчетРасчетов,
		|	ВремТаблица.Содержание
		|ПОМЕСТИТЬ ТаблицаСостав
		|ИЗ
		|	&ТаблицаСостав КАК ВремТаблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСостав.НомерСтроки КАК НомерСтроки,
		|	ТаблицаСостав.Номенклатура,
		|	ЕСТЬNULL(ТаблицаСостав.Номенклатура.АР_ПостояннаяЧастьОплаты, ЛОЖЬ) КАК АР_ПостояннаяЧастьОплаты,
		|	ТаблицаСостав.ОбъектАренды,
		|	ТаблицаСостав.СрокОплаты,
		|	ТаблицаСостав.КоличествоДнейПросрочки,
		|	ТаблицаСостав.ДолгЗаПериод,
		|	ТаблицаСостав.Сумма,
		|	ТаблицаСостав.СтавкаНДС,
		|	ТаблицаСостав.СуммаНДС,
		|	ТаблицаСостав.СчетНаАренду,
		|	ТаблицаСостав.СчетУчетаНДСПоРеализации,
		|	ТаблицаСостав.СчетДоходов,
		|	ТаблицаСостав.СчетРасходов,
		|	ТаблицаСостав.Субконто,
		|	ТаблицаСостав.ПериодАренды,
		|	ТаблицаСостав.Контрагент,
		|	ТаблицаСостав.ДоговорКонтрагента,
		|	ТаблицаСостав.СчетРасчетов,
		|	ТаблицаСостав.Содержание
		|ИЗ
		|	ТаблицаСостав КАК ТаблицаСостав
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	КонецЕсли;

	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Возврат Запрос.ВыполнитьПакет();
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Процедура СкопироватьСостав(Основание)
	
	Состав.Очистить();
	
	СписокСчетовНаОплату = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Основание);
	ТаблицаРеализацийПоСчету = Документы.АР_НачислениеПени.РеализацииПоСчетам(СписокСчетовНаОплату);
	
	Для каждого СчетНаОплату Из СписокСчетовНаОплату Цикл
		
		РеализацииПоСчетуНаОплату = ОбщегоНазначения.ВыгрузитьКолонку(
			ТаблицаРеализацийПоСчету.Скопировать(Новый Структура("СчетНаОплату", СчетНаОплату)),
			"Реализация");
	
		ЭтаРеализация = РеализацииПоСчетуНаОплату.Найти(Ссылка);
		Если ЭтаРеализация <> Неопределено Тогда
			РеализацииПоСчетуНаОплату.Удалить(ЭтаРеализация);
		КонецЕсли;
		
		ПокупательНалоговыйАгентПоНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "УчетАгентскогоНДСПокупателем");
		ВедетсяУчетНДСПоФЗ335 = УчетНДС.ВедетсяУчетНДСПоФЗ335(Дата);
		
		ТоварыУслугиКРеализации = Документы.АР_НачислениеПени.ТоварыУслугиКРеализацииПоСчету(СчетНаОплату, РеализацииПоСчетуНаОплату);
		
		Для Каждого СтрокаОснования Из ТоварыУслугиКРеализации Цикл
			
			Если СтрокаОснования.ЭтоУслуга Тогда
				СтрокаУслуги = Состав.Добавить();
				СтрокаУслуги.СчетНаАренду = СчетНаОплату;
				ЗаполнитьЗначенияСвойств(СтрокаУслуги, СтрокаОснования);
			КонецЕсли;
			
		КонецЦикла;
		
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СчетНаОплату, "ДокументБезНДС, СуммаВключаетНДС");
		ДокументБезНДС = РеквизитыОснования.ДокументБезНДС;
		
		// Пересчет сумм в табличной части Услуги
		Если РеквизитыОснования.СуммаВключаетНДС <> СуммаВключаетНДС Тогда
			Для Каждого СтрокаТЧ Из Состав Цикл
				СтрокаТЧ.Сумма = СтрокаТЧ.Сумма + ?(СуммаВключаетНДС, СтрокаТЧ.СуммаНДС, -СтрокаТЧ.СуммаНДС);
				СтрокаТЧ.Цена = СтрокаТЧ.Сумма + ?(СуммаВключаетНДС, СтрокаТЧ.СуммаНДС, -СтрокаТЧ.СуммаНДС);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, СуммаВключаетНДС);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(Основание)

	ДокументОснование = Основание;
	
	Если ТипЗнч(Основание)=Тип("ДокументСсылка.АР_СчетНаАренду") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
		
		СкопироватьСостав(Основание);
		
		Для Каждого Стр Из Состав Цикл
			Стр.СчетНаАренду = Основание;	
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	Иначе
		СпособУчетаНДС = Константы.АР_СпособУчетаНДСПриНачисленииПеней.Получить();
		СуммаВключаетНДС = ?(СпособУчетаНДС = Перечисления.АР_СпособыУчетаНДСПриНачисленииПеней.НДССверху, Ложь, Истина);
		ДокументБезНДС = ?(СпособУчетаНДС = Перечисления.АР_СпособыУчетаНДСПриНачисленииПеней.НеУчитыватьНДС, Истина, Ложь);
	КонецЕсли;
	врСуммаВключаетНДС = СуммаВключаетНДС;
	врДокументБезНДС = ДокументБезНДС;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	СуммаВключаетНДС = врСуммаВключаетНДС;
	ДокументБезНДС = врДокументБезНДС;

	// Заполнение реквизитов, специфичных для документа:
	ДатаКурса = Дата;		
		
	Данные = АР_ПроцедурыНачисления.РазбитьСуммуПоСобственникамУчета(ЭтотОбъект, Состав.Выгрузить());
	Состав.Загрузить(Данные);
	
	Документы.АР_НачислениеПени.ЗаполнитьСчетаУчетаРасчетов(ЭтотОбъект);
    Документы.АР_НачислениеПени.ЗаполнитьСчетаУчетаВТабЧасти(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПроведения = Документы.АР_НачислениеПени.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ

	// Таблица взаиморасчетов с учетом зачета авансов
	ТаблицаВзаиморасчеты = УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
		ПараметрыПроведения.ЗачетАвансовТаблицаДокумента, ПараметрыПроведения.ЗачетАвансовТаблицаАвансов,
		ПараметрыПроведения.ЗачетАвансовРеквизиты, Отказ);

	// Таблицы расчетов по авансам с учетом зачисления платежей через посредника
	ТаблицыЗачетаАвансовКассовыйМетод = УчетВзаиморасчетов.ПодготовитьТаблицыЗачетаАвансовКассовыйМетод(
		ПараметрыПроведения.ЗачетАвансовТаблицаДокумента, ТаблицаВзаиморасчеты,
		ПараметрыПроведения.ЗачетАвансовРеквизиты, Отказ);
	
	СтруктураТаблицДляИП = 
		Документы.АР_НачислениеПени.ПодготовитьСтруктуруТаблицИП(
			ПараметрыПроведения.Реквизиты, ТаблицаВзаиморасчеты);
			
	ТаблицаВзаиморасчетыИП  = СтруктураТаблицДляИП.ТаблицаВзаиморасчетыИП;
			
	// Таблицы выручки от реализации: собственных товаров и услуг и отдельно комиссионных
	ТаблицыРеализация = УчетДоходовРасходов.ПодготовитьТаблицыВыручкиОтРеализации(
		ПараметрыПроведения.РеализацияТаблицаДокумента, ТаблицаВзаиморасчеты, Неопределено,
		ПараметрыПроведения.Реквизиты, Отказ);

	ТаблицаСобственныеТоварыУслуги = ТаблицыРеализация.СобственныеТоварыУслуги;
	ТаблицаТоварыУслугиКомитентов = ТаблицыРеализация.ТоварыУслугиКомитентов;
 	ТаблицаРеализованныеТоварыКомитентов = ТаблицыРеализация.РеализованныеТоварыКомитентов;

	Документы.АР_НачислениеПени.ДобавитьКолонкуСодержание(ТаблицыРеализация.СобственныеТоварыУслуги, СчетУчетаРасчетовСКонтрагентом);

	// Структура таблиц для отражения в налоговом учете УСН
	СтруктураТаблицУСН = Новый Структура("ТаблицаРасчетов", ТаблицыЗачетаАвансовКассовыйМетод.ТаблицаВзаиморасчетов);
	
	// Учет доходов и расходов ИП
	Если ПараметрыПроведения.Реквизиты[0].ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		СписанныеМПЗ = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуСписанныеМПЗ(
			Неопределено, ПараметрыПроведения.РеализацияТаблицаДокумента, ПараметрыПроведения.Реквизиты)
	КонецЕсли;
	
	ТаблицыСписанияТоваровИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыСписанияМПЗ(
		СписанныеМПЗ, ПараметрыПроведения.Реквизиты, Отказ);
	ТаблицаОказаниеУслугИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуОказаниеУслуг(
		ТаблицыРеализация.СобственныеТоварыУслуги, ПараметрыПроведения.Реквизиты);
		
	Если Не ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		ТаблицаСтатусовСчетов = СтатусыДокументов.ПодготовитьТаблицуСтатусовОтгрузкиПоСчетам(
			ПараметрыПроведения.ТаблицаСчетовНаОплату,
			ПараметрыПроведения.ОтгрузкаТоваровОказаниеУслугПоСчету,
			ПараметрыПроведения.ОтгрузкаВозвратнойТарыПоСчету,
			ПараметрыПроведения.Реквизиты);
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ

	УчетВзаиморасчетов.СформироватьДвиженияЗачетАвансов(ТаблицаВзаиморасчеты,
		ПараметрыПроведения.ЗачетАвансовРеквизиты, Движения, Отказ);
	УчетВзаиморасчетов.СформироватьДвиженияЗачетАвансовКомитентов(ТаблицаТоварыУслугиКомитентов,
		ПараметрыПроведения.ЗачетАвансовКомитентовРеквизиты, Движения, Отказ);
	
	УчетВзаиморасчетов.СформироватьДвиженияРасчетыПоЭквайрингуЗачетАвансов(
		ТаблицыЗачетаАвансовКассовыйМетод.ТаблицаПрочихРасчетов,
		ТаблицыЗачетаАвансовКассовыйМетод.ТаблицаПроводокВспомогательныеРасчеты,
		ПараметрыПроведения.ЗачетАвансовРеквизиты,
		Движения, Отказ);

	УчетДоходовРасходов.СформироватьДвиженияРеализация(
		ТаблицаСобственныеТоварыУслуги, ТаблицаТоварыУслугиКомитентов, ТаблицаРеализованныеТоварыКомитентов,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	РегистрыНакопления.РеализацияУслуг.ДобавитьДвижения(
		Движения.РеализацияУслуг,
		ПараметрыПроведения.ТаблицаРеализацияУслуг,
		ТаблицаСобственныеТоварыУслуги,
		ПараметрыПроведения.Реквизиты);
	
	УчетНДС.СформироватьДвиженияРеализацияТоваровУслуг(
		ТаблицаСобственныеТоварыУслуги, Неопределено, Неопределено,  
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	//Движения регистра "Рублевые суммы документов в валюте"
	УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалюте(ТаблицаСобственныеТоварыУслуги, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетНДС.СформироватьДвиженияРеализацияКомиссионныхТоваров(
		Неопределено, 
		ТаблицаТоварыУслугиКомитентов,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	НалоговыйУчетУСН.СформироватьДвиженияУСН(ЭтотОбъект, СтруктураТаблицУСН);
		
	// Учет доходов и расходов ИП
	ТаблицаИПМПЗОтгруженные	= УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияСписаниеМПЗ(
		ТаблицыСписанияТоваровИП,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	ТаблицаИПМПЗОтгруженныеУслуги = УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияОказаниеУслуг(
		ТаблицаОказаниеУслугИП,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаИПМПЗОтгруженныеУслуги, ТаблицаИПМПЗОтгруженные);
		
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияЗачетОплатыПокупателя(
		ТаблицаИПМПЗОтгруженные,
		СтруктураТаблицДляИП.ТаблицаВзаиморасчетыИП, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	АР_ОбщиеПроцедуры.СформироватьДвиженияЗачетАвансов(ТаблицаВзаиморасчеты, ПараметрыПроведения.ЗачетАвансовРеквизиты, Движения, Отказ);
	АР_ОбщиеПроцедуры.СформироватьДвиженияРеализация(ТаблицаСобственныеТоварыУслуги, ПараметрыПроведения.Реквизиты, Движения, Отказ);
	АР_ОбщиеПроцедуры.СформироватьДвиженияРеализация(ТаблицаТоварыУслугиКомитентов, ПараметрыПроведения.Реквизиты, Движения, Отказ);
	АР_ОбщиеПроцедуры.СформироватьДвиженияПоРегистру(ПараметрыПроведения.ПродажиПоАренде, Движения, "АР_ПродажиПоАренде", Отказ);
 	АР_ОбщиеПроцедуры.СвернутьСформированныеПроводки(Движения.Хозрасчетный);
	
	// ПЕРЕОЦЕНКА ВАЛЮТНЫХ ОСТАТКОВ
	ТаблицаПереоценка = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкаВалютныхОстатковПоПроводкамДокумента(
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетУСН.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	Если Не ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		СтатусыДокументов.СформироватьДвиженияСтатусовДокументов(
			ТаблицаСтатусовСчетов, ПараметрыПроведения.Реквизиты);
	КонецЕсли;
	
	ПроведениеСервер.УстановитьЗаписьОчищаемыхНаборовЗаписей(ЭтотОбъект);
		
	Движения.Записать();
	
	ПараметрыДействия = УчетНДСПереопределяемый.НовыеПараметрыСостоянияСчетаФактуры("Проведен", ЭтотОбъект);	
	УчетНДСПереопределяемый.УстановитьСостояниеСчетаФактуры(ПараметрыДействия, Отказ);
		
	Если Состав.Итог("Сумма") = 0 Тогда
		Для Каждого Движение Из Движения Цикл
			Если НЕ ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.АР_ВзаиморасчетыПоАренде") Тогда
				Движение.Очистить();	
				Движение.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ЭтотОбъект);
	
	Если ПравоДоступа("Изменение", Метаданные.Документы.КорректировкаРеализации) Тогда
		Документы.КорректировкаРеализации.ОбновитьРеквизитыСвязанныхДокументовКорректировки(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	ВидЭлектронногоДокумента = Перечисления.ВидыЭД.АктИсполнитель;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	УстановитьСтатусДокумента();
КонецПроцедуры

Процедура УстановитьСтатусДокумента() Экспорт
	
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда 
		Возврат;
	КонецЕсли;
		
	Если ДополнительныеСвойства.Свойство("СтатусДокумента") Тогда
		//Запись из формы документа
		СтатусДокумента = ?(ДополнительныеСвойства.СтатусДокумента,
			Перечисления.СтатусыДокументовРеализации.Подписан, 
			Перечисления.СтатусыДокументовРеализации.НеПодписан);
		Если НЕ ДополнительныеСвойства.ТребуетсяСчетФактура Тогда
			СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.НеТребуется;
		ИначеЕсли ДополнительныеСвойства.ЕстьСчетФактура Тогда
			Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда 
				СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.Проведен;
			ИначеЕсли ПометкаУдаления Тогда
				СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.Отсутствует;
			Иначе
				СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.НеПроведен;
			КонецЕсли;
		Иначе
			СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.Отсутствует;
		КонецЕсли;
	Иначе
		// Необходимо сделать запись состояния счета фактуры для случаев "Отсутствует", "Не требуется".
		СчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(ЭтотОбъект.Ссылка);
		Если ЗначениеЗаполнено(СчетФактура) Тогда
			// Движения по статусам сформирует счет-фактура
			Возврат;
		КонецЕсли;
		
		СтатусДокумента = Неопределено;
		ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговора");
		Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента)
			ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером 
			ИЛИ ДокументБезНДС Тогда 
			СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.НеТребуется;
		Иначе
			СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.Отсутствует;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановленСтатусДокумента = Истина;
	СтатусыДокумента = РегистрыСведений.СтатусыДокументов.НовыеСтатусыДокумента();
	СтатусыДокумента.Статус            = СтатусДокумента;
	СтатусыДокумента.СтатусСФ          = СтатусСчетаФактуры;
	РегистрыСведений.СтатусыДокументов.УстановитьСтатусыДокумента(ЭтотОбъект.Ссылка, СтатусыДокумента);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
			
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

	УчетНДСПереопределяемый.УстановкаПроведенияУСчетаФактуры(Ссылка, "СчетФактураВыданный", Ложь, Отказ);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
	ЗачетАвансов.Очистить();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	// Исключаем из проверки реквизиты, заполнение которых стало необязательным:
	МассивНепроверяемыхРеквизитов = Новый Массив();

	ВестиВзаиморасчетыПоОбъектам = ДоговорКонтрагента.АР_ВестиВзаиморасчетыПоОбъектам;
	ВестиВзаиморасчетыПоУслугам = ДоговорКонтрагента.АР_ВестиВзаиморасчетыПоУслугам;
	ВестиВзаиморасчетыПоПериодам = ДоговорКонтрагента.АР_ВестиВзаиморасчетыПоПериодам;
	ВестиВзаиморасчетыПоСчетамПост = ДоговорКонтрагента.АР_ВестиВзаиморасчетыПоСчетамПост;	
	ВестиВзаиморасчетыПоСчетамПерем = ДоговорКонтрагента.АР_ВестиВзаиморасчетыПоСчетамПерем;	
	
	Если СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовПоАвансам");
	КонецЕсли;

	// Проверяем корректность заполнения реквизитов шапки:

	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ТекстСообщения = "";
		Если НЕ УчетВзаиморасчетов.ПроверитьВозможностьПроведенияВРеглУчете(
			ЭтотОбъект, ДоговорКонтрагента, ТекстСообщения) Тогда
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, "Корректность",
				НСтр("ru = 'Договор'"),,, ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,
				"ДоговорКонтрагента", "Объект", Отказ);
		КонецЕсли;
	КонецЕсли;

	Если НЕ ВестиВзаиморасчетыПоОбъектам Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Состав.ОбъектАренды");
	КонецЕсли;
	Если НЕ ВестиВзаиморасчетыПоУслугам Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Состав.Номенклатура");
	КонецЕсли;
	Если НЕ ВестиВзаиморасчетыПоПериодам Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Состав.ПериодАренды");
	КонецЕсли;
	
	Если НЕ ДеятельностьНаПатенте Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Патент");
	КонецЕсли;
	
	// Получаем содержимое табличных частей объекта с вспомогательными реквизитами:
	СтруктураРезультатов = Новый Структура;
	ТаблицыДокумента =  ПолучитьДанныеОбъектаДляПроверкиЗаполнения(СтруктураРезультатов);
	
	// Проверка заполнения табличной части "Состав"
	Если Состав.Количество() > 0 Тогда

		ВыборкаУслуг = ТаблицыДокумента[СтруктураРезультатов.Состав].Выбрать();
		ИмяСписка = НСтр("ru = 'Начисление'");

		Пока ВыборкаУслуг.Следующий() Цикл
			Префикс = "Состав[" + Формат(ВыборкаУслуг.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";

			Если ВыборкаУслуг.СуммаНДС <> 0
					И НЕ ЗначениеЗаполнено(ВыборкаУслуг.СчетУчетаНДСПоРеализации) Тогда
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка",,
					НСтр("ru = 'Счет учета НДС по реализации'"), ВыборкаУслуг.НомерСтроки, ИмяСписка);
				Поле = Префикс + "СчетУчетаНДСПоРеализации";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			
			//Проверим, заполнены ли счета на оплату услуг аренды
			НеобходимостьПроверки = (ВестиВзаиморасчетыПоСчетамПост И ВыборкаУслуг.АР_ПостояннаяЧастьОплаты)
				ИЛИ (ВестиВзаиморасчетыПоСчетамПерем И НЕ ВыборкаУслуг.АР_ПостояннаяЧастьОплаты);
							
			Если НеобходимостьПроверки И НЕ ЗначениеЗаполнено(ВыборкаУслуг.СчетНаАренду) Тогда
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка",,
					НСтр("ru = 'Счет на оплату'"), ВыборкаУслуг.НомерСтроки, ИмяСписка);
				Поле = Префикс + "СчетНаАренду";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			
			// Проверим, что если заполнен Принципал, то договор и счет расчетов тоже должны быть заполнены
			Если ЗначениеЗаполнено(ВыборкаУслуг.Контрагент) Тогда
				
				// Проверим, чтобы не был заполнен Принципал для объектов, по-которым взаиморасчеты не ведутся по агентской схеме
				Если НЕ АР_ОбщиеПроцедуры.ПолучитьДанныеСобственника(ВыборкаУслуг.ОбъектАренды, ВыборкаУслуг.Контрагент, Дата).АгентскаяСхема Тогда
					
					ТекстСообщения = "Для объекта аренды """ + ВыборкаУслуг.ОбъектАренды + """ взаиморасчеты не ведутся по агентской схеме. Принципал не должен быть заполнен!";
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "КОРРЕКТНОСТЬ",
						НСтр("ru = 'Контрагент'"), ВыборкаУслуг.НомерСтроки, ИмяСписка, ТекстСообщения);
					Поле = Префикс + "Контрагент";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
					
					// дальнейшая проверка контрагента не нужна
					Продолжить;
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ВыборкаУслуг.ДоговорКонтрагента) Тогда
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка",,
						НСтр("ru = 'Договор принципала'"), ВыборкаУслуг.НомерСтроки, ИмяСписка);
					Поле = Префикс + "ДоговорКонтрагента";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ВыборкаУслуг.СчетРасчетов) Тогда
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка",,
						НСтр("ru = 'Счет расчетов'"), ВыборкаУслуг.НомерСтроки, ИмяСписка);
					Поле = Префикс + "СчетРасчетов";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
				
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	МассивНепроверяемыхРеквизитов.Добавить("Состав.СчетУчетаНДСПоРеализации");
	
	// Проверка заполнения табличной части "Зачет авансов"
	Если НЕ СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ЗачетАвансов");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) И НЕ ДоговорКонтрагента.АР_АрендныйДоговор Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выбранный договор не является договором аренды.", ЭтотОбъект, "ДоговорКонтрагента", "Объект", Отказ);	
	КонецЕсли;
	
	// Удаляем из проверяемых реквизитов все, по которым автоматическая проверка не нужна:
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры


#КонецЕсли

