#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Форматная строка даты покупки на кассовом чеке.
// Дата включет время без секунд: секунды в кассовом чеке не содержатся
// 
// Возвращаемое значение:
//  Строка
//
Функция ФорматнаяСтрокаДатаПокупки() Экспорт
	Возврат НСтр("ru = 'ДФ=''dd.MM.yyyy HH:mm'''");
КонецФункции

// Обеспечивает наличие готового к обработке документа с указанным QR-кодом:
// находит, при отсутствии - создает документ.
// Контроль прав не выполняется.
// 
// Параметры:
//  QRКод - Строка - текст QR-кода
//  ПользовательШиныМобильныхПриложений
//     - Неопределено, если чек отсканирован без использования шины.
//       Чек записывается как отсканированный текущим пользователем
//     - ОпределяемыйТип.ПользовательШиныМобильныхПриложений - пользователь, отсканировавший чек.
// 
// Возвращаемое значение:
//  ДокументыСсылка.КассовыйЧекПодотчетногоЛица - найденный (созданный) документ.
//    При некорректных параметрах возвращается пустая ссылка.
//
Функция ПолучитьПоQRКоду(QRКод, ПользовательШиныМобильныхПриложений = Неопределено) Экспорт
	
	Если ПустаяСтрока(QRКод) Тогда
		Возврат ПустаяСсылка();
	КонецЕсли;
	
	Ссылка = НайтиПоРеквизиту("QRКод", QRКод);
	
	ИспользуетсяШинаМобильныхПриложений = (ПользовательШиныМобильныхПриложений <> Неопределено);
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		РегистрыСведений.СканированиеКассовыхЧековПодотчетныхЛиц.Включить(
			Ссылка,
			ПользовательШиныМобильныхПриложений);
		
		Возврат Ссылка;
		
	КонецЕсли;
	
	РеквизитыЧека = КассовыеЧекиQRКоды.РеквизитыЧека(QRКод);
	Если Не КассовыеЧекиQRКоды.РеквизитыЧекаЗаполнены(РеквизитыЧека) Тогда
		Возврат ПустаяСсылка();
	КонецЕсли;
	
	Запись = СоздатьДокумент();
	
	Запись.Заполнить(QRКод);
	
	Если ПустаяСтрока(Запись.QRКод) Тогда
		// Невалидный QR-код
		Возврат ПустаяСсылка();
	КонецЕсли;
	
	Если ИспользуетсяШинаМобильныхПриложений Тогда
		// Запрос выполнен (будет выполен) шиной, ожидаем сообщение от шины с содержимым кассового чека
		РегистрыСведений.СканированиеКассовыхЧековПодотчетныхЛиц.УстановитьПользовательШиныОтсканировалЧек(
			Запись,
			ПользовательШиныМобильныхПриложений);
	Иначе
		РегистрыСведений.КассовыеЧекиПодотчетныхЛицЗапросыДетальныхДанных.УстановитьТребуетсяЗапрос(Запись);
		РегистрыСведений.СканированиеКассовыхЧековПодотчетныхЛиц.УстановитьТекущийПользовательОтсканировалЧек(Запись);
	КонецЕсли;
	
	Запись.Записать(РежимЗаписиДокумента.Запись);
	
	Возврат Запись.Ссылка;
	
КонецФункции

// Исключает чек из числа отсканированных пользователем.
// Если после этого чек становится "ничей", он помечается на удаление.
//
// Параметры:
//  КассовыйЧек - ДокументСсылка.КассовыйЧекПодотчетногоЛица
//              - Строка - QR-код
//  Пользователь - ОпределяемыйТип.ПользовательШиныМобильныхПриложений
//               - Неопределено - текущий пользователь
// 
// Возвращаемое значение:
//  Булево - Истина, если чек принадлежал пользователю
//
Функция УдалитьЧекПользователя(КассовыйЧек, Пользователь = Неопределено) Экспорт
	
	Если ТипЗнч(КассовыйЧек) = Тип("ДокументСсылка.КассовыйЧекПодотчетногоЛица") Тогда
		Ссылка = КассовыйЧек;
	Иначе
		Ссылка = НайтиПоРеквизиту("QRКод", КассовыйЧек);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Документ.КассовыйЧекПодотчетногоЛица");
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СканированиеКассовыхЧековПодотчетныхЛиц");
	ЭлементБлокировки.УстановитьЗначение("КассовыйЧек", Ссылка);
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	ЧекНайден = Ложь;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка.Заблокировать();
		
		УстановитьПривилегированныйРежим(Истина);
		ЧекНайден = РегистрыСведений.СканированиеКассовыхЧековПодотчетныхЛиц.НайтиЧекПользователя(Ссылка, Пользователь);
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ЧекНайден Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			РегистрыСведений.СканированиеКассовыхЧековПодотчетныхЛиц.Исключить(Ссылка, Пользователь);
			УстановитьПривилегированныйРежим(Ложь);
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка",       Ссылка);
			Запрос.УстановитьПараметр("Пользователь", Пользователь);
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	КассовыеЧеки.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.КассовыйЧекПодотчетногоЛица КАК КассовыеЧеки
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СканированиеКассовыхЧековПодотчетныхЛиц КАК Сканирование
			|		ПО КассовыеЧеки.Ссылка = Сканирование.КассовыйЧек
			|			И (Сканирование.Пользователь <> &Пользователь)
			|ГДЕ
			|	КассовыеЧеки.Ссылка = &Ссылка
			|	И НЕ КассовыеЧеки.ПометкаУдаления
			|	И Сканирование.КассовыйЧек ЕСТЬ NULL";
			
			УстановитьПривилегированныйРежим(Истина);
			Если Не Запрос.Выполнить().Пустой() Тогда
				
				Запись = Ссылка.ПолучитьОбъект();
				Запись.УстановитьПометкуУдаления(Истина);
				
			КонецЕсли;
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ЧекНайден;
	
КонецФункции

// Текстовое сокращенное представление содержимого чека - в виде, имитирующем напечатанный чек.
// Предназначено для предварительного просмотра пользователем, чтобы идентифицировать смысл покупки.
//
// Параметры:
//  Ссылка - ДокументСсылка.КассовыйЧекПодотчетногоЛица
// 
// Возвращаемое значение:
//  Строка
//
Функция ПредварительныйПросмотрЧека(Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КассовыйЧек.Ссылка КАК Ссылка,
	|	КассовыйЧек.Статус КАК Статус,
	|	КассовыйЧек.Номер КАК Номер,
	|	КассовыйЧек.Дата КАК Дата,
	|	КассовыйЧек.ПоставщикНаименование КАК ПоставщикНаименование,
	|	КассовыйЧек.ПоставщикИНН КАК ПоставщикИНН,
	|	КассовыйЧек.СуммаДокумента КАК СуммаДокумента,
	|	КассовыйЧек.Товары.(
	|		НомерСтроки КАК НомерСтроки,
	|		НоменклатураНаименование КАК Наименование,
	|		Количество КАК Количество,
	|		Сумма КАК Сумма
	|	) КАК Товары
	|ИЗ
	|	Документ.КассовыйЧекПодотчетногоЛица КАК КассовыйЧек
	|ГДЕ
	|	КассовыйЧек.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка,
	|	НомерСтроки";
	
	ДлинаСтрокиЧека              = 35;
	МинимальнаяДлинаНаименования = 10;
	Пробел = Символы.НПП;
	Разделитель = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("-", ДлинаСтрокиЧека);
	
	ВыборкаСсылка = Запрос.Выполнить().Выбрать();
	Пока ВыборкаСсылка.Следующий() Цикл
		
		СтрокиЧека = Новый ТаблицаЗначений;
		СтрокиЧека.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
		СтрокиЧека.Колонки.Добавить("Количество",   Новый ОписаниеТипов("Строка"));
		СтрокиЧека.Колонки.Добавить("Сумма",        Новый ОписаниеТипов("Строка"));
		
		МаксимальнаяДлинаСумма      = 0;
		МаксимальнаяДлинаКоличество = 0;
		
		ВыборкаТовары = ВыборкаСсылка.Товары.Выбрать();
		Пока ВыборкаТовары.Следующий() Цикл
			
			ДанныеСтроки = СтрокиЧека.Добавить();
			
			ДанныеСтроки.Наименование = ВыборкаТовары.Наименование;
			
			ДанныеСтроки.Сумма = ОбщегоНазначенияБПВызовСервера.ФорматСумм(ВыборкаТовары.Сумма);
			МаксимальнаяДлинаСумма = Макс(СтрДлина(ДанныеСтроки.Сумма), МаксимальнаяДлинаСумма);
			
			Если ВыборкаТовары.Количество <> 1 И ВыборкаТовары.Количество <> 0 Тогда
				ДанныеСтроки.Количество = Строка(ВыборкаТовары.Количество);
			КонецЕсли;
			
		КонецЦикла;
		
		ТелоЧека = Новый Массив;
		ЕстьКоличество = Ложь;
		
		Для Каждого ДанныеСтроки Из СтрокиЧека Цикл
			
			// Пример:
			// Молоток                1 000.00
			// Гвозди           x3.25   160.50
			// Жидкость для снятия ла   216.50
			// Пакет                      1.50
			
			// Суммы дополняем так, чтобы они отделялись от наименования и были выровнены в колонку.
			// Так, в примере выше нужно получить " 1 000.00" и "     1.50"
			Сумма = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ДанныеСтроки.Сумма, МаксимальнаяДлинаСумма, Пробел);
			Сумма = СтрШаблон(НСтр("ru = ' %1'"), Сумма);
			
			Количество = "";
			Если Не ПустаяСтрока(ДанныеСтроки.Количество) Тогда
				Количество     = СтрШаблон(НСтр("ru = ' x%1'"), ДанныеСтроки.Количество);
				ЕстьКоличество = Истина;
			КонецЕсли;
			
			// От наименования нужно оставить такую часть, чтобы суммы были выровнены, а перед суммой помещалось количество.
			// Если оставшаяся часть наименования окажется слишком короткой, то информацию о товаре разделим на две строки:
			// в первой будет только наимнование, а во второй - количество и сумма
			ДлинаНаименование             = СтрДлина(ДанныеСтроки.Наименование);
			ДлинаНаименованиеОднойСтрокой = Макс(0, ДлинаСтрокиЧека - СтрДлина(Сумма) - СтрДлина(Количество));
			
			Если ДлинаНаименование <= ДлинаНаименованиеОднойСтрокой Тогда
				
				// Наименование короткое, его выравниваем так, чтобы количества и суммы образовывали колонки
				// Пример:
				// Пакет*****************     1.50
				// (символом * показаны добавленные пробелы)
				
				Наименование = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(
					ДанныеСтроки.Наименование,
					ДлинаНаименованиеОднойСтрокой,
					Пробел,
					"Справа");
				
			ИначеЕсли ДлинаНаименованиеОднойСтрокой >= МинимальнаяДлинаНаименования Тогда
				// Наименование длинное, но и обрезанное наименование получится достаточно понятным
				// Пример:
				// Жидкость для снятия ла   216.50
				Наименование = Лев(ДанныеСтроки.Наименование, ДлинаНаименованиеОднойСтрокой);
				
			Иначе
				// С учетом места, оставшегося под наименование, оно будет нести мало информации, например:
				// Прибор оц x2  48 151 623 420.00
				
				// Поэтому разбиваем на две строки:
				// Прибор оценки проходимости Марс
				//           x2  48 151 623 420.00
				
				Отступ = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов(Пробел, ДлинаНаименованиеОднойСтрокой);
				Наименование = Лев(ДанныеСтроки.Наименование, ДлинаСтрокиЧека) + Символы.ПС + Отступ;
				
			КонецЕсли;
			
			ТелоЧека.Добавить("" + Наименование + Количество + Сумма);
			
		КонецЦикла;
		
		// Пример:
		// КАССОВЫЙ ЧЕК № 99999
		// 01.01.2021 00:00
		// АО "Ромашка" ИНН 9999999999
		//
		// Товары, услуги      Кол-во    Итого
		// -----------------------------------
		// <тут товары, см. выше>
		// -----------------------------------
		// ИТОГ:                      9 999.99
		
		ПредварительныйПросмотр = Новый Массив;
		
		// Заголовок чека
		ПредварительныйПросмотр.Добавить(СтрШаблон(НСтр("ru = 'КАССОВЫЙ ЧЕК № %1'"), ВыборкаСсылка.Номер));
		ПредварительныйПросмотр.Добавить(Формат(
			ВыборкаСсылка.Дата,
			ФорматнаяСтрокаДатаПокупки()));
		ПредставлениеОрганизации = Новый Массив;
		Если Не ПустаяСтрока(ВыборкаСсылка.ПоставщикНаименование) Тогда
			ПредставлениеОрганизации.Добавить(ВыборкаСсылка.ПоставщикНаименование);
		КонецЕсли;
		Если Не ПустаяСтрока(ВыборкаСсылка.ПоставщикИНН) Тогда
			ПредставлениеОрганизации.Добавить(СтрШаблон(НСтр("ru = 'ИНН %1'"), ВыборкаСсылка.ПоставщикИНН));
		КонецЕсли;
		Если ЗначениеЗаполнено(ПредставлениеОрганизации) Тогда
			ПредставлениеОрганизацииТекст = СтрСоединить(ПредставлениеОрганизации, " ");
			Если СтрДлина(ПредставлениеОрганизацииТекст) > ДлинаСтрокиЧека
				И ПредставлениеОрганизации.Количество() > 1 Тогда
				// Слишком длинное представление, его можно разбить на строки
				ПредставлениеОрганизацииТекст = СтрСоединить(ПредставлениеОрганизации, Символы.ПС);
			КонецЕсли;
			ПредварительныйПросмотр.Добавить(ПредставлениеОрганизацииТекст);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТелоЧека) Тогда
		
			// Заголовок списка
			ЗаголовокКоличество = "";
			Если ЕстьКоличество Тогда
				ЗаголовокКоличество = НСтр("ru = 'Кол-во'") + Пробел;
			КонецЕсли;
			
			ЗаголовокИтого = НСтр("ru = 'Итого'");
			Если СтрДлина(ЗаголовокИтого) < МаксимальнаяДлинаСумма Тогда
				ЗаголовокИтого = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ЗаголовокИтого, МаксимальнаяДлинаСумма, Пробел);
			КонецЕсли;
			
			ЗаголовокТоварыУслуги = НСтр("ru = 'Товары, услуги'");
			МаксимальнаяДлинаЗаголовокТоварыУслуги = ДлинаСтрокиЧека - СтрДлина(ЗаголовокКоличество) - СтрДлина(ЗаголовокИтого);
			Если СтрДлина(ЗаголовокТоварыУслуги) >= МаксимальнаяДлинаЗаголовокТоварыУслуги Тогда
				ЗаголовокТоварыУслуги = "";
			КонецЕсли;
			ЗаголовокТоварыУслуги = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(
				ЗаголовокТоварыУслуги,
				МаксимальнаяДлинаЗаголовокТоварыУслуги,
				Пробел,
				"Справа");
				
			ПредварительныйПросмотр.Добавить("");
			ПредварительныйПросмотр.Добавить(ЗаголовокТоварыУслуги + ЗаголовокКоличество + ЗаголовокИтого);
			
			// Список
			ПредварительныйПросмотр.Добавить(Разделитель);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПредварительныйПросмотр, ТелоЧека);
			
		КонецЕсли;
		
		// Итог
		ПредварительныйПросмотр.Добавить(Разделитель);
		ЗаголовокИтого = НСтр("ru = 'ИТОГ:'"); // см. Приказ ФНС ММВ-7-20/229@ от 21.03.2017, Таблица 4 "Перечень реквизитов ФД"
		ДлинаСумма = ДлинаСтрокиЧека - СтрДлина(ЗаголовокИтого);
		Сумма = ОбщегоНазначенияБПВызовСервера.ФорматСумм(ВыборкаСсылка.СуммаДокумента);
		Сумма = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Сумма, ДлинаСумма, Пробел);
		ПредварительныйПросмотр.Добавить(ЗаголовокИтого + Сумма);
		
		Если ВыборкаСсылка.Статус <> Перечисления.СтатусыКассовыхЧековПодотчетныхЛиц.Получен Тогда
			ПредварительныйПросмотр.Добавить(Символы.ПС);
			ПредварительныйПросмотр.Добавить(СтрШаблон(НСтр("ru = 'Статус чека: %1'"), ВыборкаСсылка.Статус));
		КонецЕсли;
		
		Возврат СтрСоединить(ПредварительныйПросмотр, Символы.ПС);
		
	КонецЦикла;
	
КонецФункции

// Определяет перечень и основные данные кассовых чеков, которые можно загрузить в документ
// (пользователь их отсканировал и отправил для загрузки, но они еще не включены ни в один записанный документ)
//
// Параметры:
//  ЧекиКЗагрузке - ТаблицаЗначений - см. УчетКассовыхЧековПодотчетныхЛиц.НовыйЧекиКЗагрузке,
//                                    заполняемая коллекция
//
Процедура ПрочитатьЧекиКЗагрузке(ЧекиКЗагрузке) Экспорт
	
	РегистрыСведений.МобильноеПриложениеСканированиеЧеков.НачатьПроверкуСообщений();
	
	ЧекиКЗагрузке.Очистить();
	
	СтатусыЧеков = Новый Массив;
	СтатусыЧеков.Добавить(Перечисления.СтатусыКассовыхЧековПодотчетныхЛиц.Получен);
	СтатусыЧеков.Добавить(Перечисления.СтатусыКассовыхЧековПодотчетныхЛиц.Отменен);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтатусыЧеков", СтатусыЧеков);
	// Пользователем мобильного приложения может быть как пользователь программы (справочник Пользователи),
	// так и иной сотрудник (справочник ФизическиеЛица)
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КассовыеЧеки.Ссылка КАК Ссылка,
	|	КассовыеЧеки.Дата КАК Дата,
	|	КассовыеЧеки.СуммаДокумента КАК Сумма,
	|	КассовыеЧеки.ПоставщикНаименование КАК Поставщик,
	|	ВЫБОР
	|		КОГДА Сканирование.Пользователь ССЫЛКА Справочник.Пользователи
	|				И Пользователи.ФизическоеЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА Пользователи.ФизическоеЛицо
	|		ИНАЧЕ Сканирование.Пользователь
	|	КОНЕЦ КАК Пользователь,
	|	ВЫБОР
	|		КОГДА Сканирование.Пользователь ССЫЛКА Справочник.Пользователи
	|				И Пользователи.ФизическоеЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА Пользователи.ФизическоеЛицо
	|		ИНАЧЕ Сканирование.Пользователь
	|	КОНЕЦ КАК КоличествоПользователей,
	|	ВЫБОР
	|		КОГДА Сканирование.Пользователь ССЫЛКА Справочник.Пользователи
	|				И Пользователи.ФизическоеЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА Пользователи.ФизическоеЛицо.ФИО
	|		ИНАЧЕ Сканирование.Пользователь.Наименование
	|	КОНЕЦ КАК ПользовательПредставление
	|ИЗ
	|	Документ.КассовыйЧекПодотчетногоЛица КАК КассовыеЧеки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыПоКассовымЧекамПодотчетныхЛиц КАК УчтенныеЧеки
	|		ПО КассовыеЧеки.Ссылка = УчтенныеЧеки.КассовыйЧек
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СканированиеКассовыхЧековПодотчетныхЛиц КАК Сканирование
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|			ПО Сканирование.Пользователь = Пользователи.Ссылка
	|		ПО КассовыеЧеки.Ссылка = Сканирование.КассовыйЧек
	|ГДЕ
	|	КассовыеЧеки.Статус В(&СтатусыЧеков)
	|	И УчтенныеЧеки.КассовыйЧек ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка
	|ИТОГИ
	|	МАКСИМУМ(Пользователь),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КоличествоПользователей),
	|	МАКСИМУМ(ПользовательПредставление)
	|ПО
	|	Ссылка";
	
	ВыборкаСсылка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСсылка.Следующий() Цикл
		
		Запись = ЧекиКЗагрузке.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ВыборкаСсылка);
		
		Если ВыборкаСсылка.КоличествоПользователей < 2 Тогда
			Запись.Пользователи = РегистрыСведений.МобильноеПриложениеСканированиеЧеков.ПредставлениеПользователяКраткое(
				ВыборкаСсылка.Пользователь,
				ВыборкаСсылка.ПользовательПредставление);
			Продолжить;
		КонецЕсли;
		
		ИменаПользователей = Новый Массив;
		
		Выборка = ВыборкаСсылка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			ПредставлениеПользователя = РегистрыСведений.МобильноеПриложениеСканированиеЧеков.ПредставлениеПользователяКраткое(
				Выборка.Пользователь,
				Выборка.ПользовательПредставление);
			ИменаПользователей.Добавить(ПредставлениеПользователя);
		КонецЦикла;
		
		Запись.Пользователи = СтрСоединить(ИменаПользователей, НСтр("ru = ', '"));
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет детальные чека сведениями, полученными из сервиса.
//
// Параметры:
//  КассовыйЧек - ДокументСсылка.КассовыйЧекПодотчетногоЛица - заполняемый документ
//  ИмяСтатуса  - Строка - имя значения перечисления СтатусыКассовыхЧековПодотчетныхЛиц
//  ДанныеЧека  - Структура - детальные данные о покупке
//
Процедура ЗаполнитьДанныеЧека(КассовыйЧек, ИмяСтатуса, ДанныеЧека) Экспорт
	
	КешСтавкиНДС = Новый Соответствие;
	
	Запись = КассовыйЧек.ПолучитьОбъект();
	Запись.Статус = Перечисления.СтатусыКассовыхЧековПодотчетныхЛиц[ИмяСтатуса];
	
	Если Запись.Статус = Перечисления.СтатусыКассовыхЧековПодотчетныхЛиц.Получен
		И ДанныеЧека <> Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(Запись, ДанныеЧека);
		
		Если ДанныеЧека.Свойство("Товары") Тогда
			Запись.Товары.Очистить();
			Для Каждого СтрокаТовары Из ДанныеЧека.Товары Цикл
				
				ЗаписьТовары = Запись.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьТовары, СтрокаТовары);
				
				УстановитьСтавкуНДС(ЗаписьТовары, СтрокаТовары, КешСтавкиНДС);
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Запись.Записать(РежимЗаписиДокумента.Запись);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьСтавкуНДС(ЗаписьТовары, СтрокаТовары, КешСтавкиНДС)
	
	Если Не СтрокаТовары.Свойство("СтавкаНДС") Тогда
		Возврат;
	КонецЕсли;
	
	СтавкаНДС = КешСтавкиНДС[СтрокаТовары.СтавкаНДС];
	Если СтавкаНДС = Неопределено Тогда
		
		Если Метаданные.Перечисления.СтавкиНДС.ЗначенияПеречисления.Найти(СтрокаТовары.СтавкаНДС) = Неопределено Тогда
			СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
		Иначе
			СтавкаНДС = Перечисления.СтавкиНДС[СтрокаТовары.СтавкаНДС];
		КонецЕсли;
		
		КешСтавкиНДС.Вставить(СтрокаТовары.СтавкаНДС, СтавкаНДС);
		
	КонецЕсли;
	
	ЗаписьТовары.СтавкаНДС = СтавкаНДС;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
