
#Область ОписаниеПеременных

&НаКлиенте
Перем ЗакрытьПослеЗаписи;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	КадровыйУчетФормы.ФормаКадровогоДокументаПриСозданииНаСервере(ЭтаФорма);
	
	ОплатаПоОкладу = УчетЗарплаты.ОплатаПоОкладу();
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Элементы.ГруппаИндикатораЭТК.Видимость = Ложь;
		
		РасчетЗарплатыФормы.УстановитьСпособРасчетаАвансаПоУмолчанию(Объект.СпособРасчетаАванса);
		
		// Заполним дату приема
		Если Не ЗначениеЗаполнено(Объект.ДатаПриема) Тогда
			Объект.ДатаПриема = ТекущаяДатаСеанса();
		КонецЕсли; 
		
		// Очистим реквизит Сотрудник, если он уже принят.
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) И Параметры.ЗначениеКопирования.Проведен Тогда
			Объект.Сотрудник = Справочники.Сотрудники.ПустаяСсылка();
			Объект.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
		КонецЕсли; 
		
		// Заполним реквизиты из значений заполнения.
		Если Параметры.Свойство("Организация") И ЗначениеЗаполнено(Параметры.Организация) Тогда 
			Объект.Организация = Параметры.Организация;
		КонецЕсли;
		Если Параметры.Свойство("Сотрудник") И ЗначениеЗаполнено(Параметры.Сотрудник) Тогда 
			Объект.Сотрудник = Параметры.Сотрудник;
		КонецЕсли;
		Если Параметры.Свойство("ДатаПриема") И ЗначениеЗаполнено(Параметры.ДатаПриема) Тогда 
			Объект.ДатаПриема = Параметры.ДатаПриема;
		КонецЕсли;
		Если Параметры.Свойство("Подразделение") И ЗначениеЗаполнено(Параметры.Подразделение) Тогда
			Объект.Подразделение = Параметры.Подразделение;
		КонецЕсли;
		Если Параметры.Свойство("Должность") И ЗначениеЗаполнено(Параметры.Должность) Тогда 
			Объект.Должность = Параметры.Должность;
		КонецЕсли;
		Если Параметры.Свойство("Начисления") И Параметры.Начисления.Количество() > 0 Тогда 
			Объект.Начисления.Загрузить(Параметры.Начисления.Выгрузить());
		КонецЕсли;
		
		Если Объект.Начисления.Количество() = 0 Тогда
			УстановитьОсновноеНачисление();
		КонецЕсли;
		
		УстановитьФункциональныеОпцииФормы();
		
		Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
			
			ЗаполнитьДанныеСвязанныеССотрудником(Истина);
			УстановитьСвязиПараметровВыбораОрганизацииНаСервере();
			
			УстановитьВидЗанятостиНовогоСотрудника(ЭтаФорма);
			
		Иначе
			УстановитьУсловияПриема(ЭтаФорма);
		КонецЕсли;
		
		УстановитьВидимостьПолейУсловийРаботыДляИностранныхГраждан(ЭтаФорма);
		
		ВидЗанятостиПредыдущий = Объект.ВидЗанятости;
		
		РасчетЗарплатыФормы.УстановитьСпособРасчетаАвансаПоУмолчанию(Объект.СпособРасчетаАванса);
		РасчетЗарплатыКлиентСервер.УстановитьПоказРазмераАванса(ЭтаФорма);
		
		// ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
		ЭлектронныеТрудовыеКнижки.ЗаполнитьНаименованиеДокумента(Объект, "ПриемНаРаботу");
		// Конец ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
		
		Если Не ЗначениеЗаполнено(Объект.НаименованиеДокумента) Тогда
			Объект.НаименованиеДокумента = НСтр("ru='Приказ'");
		КонецЕсли;
		
		Если Объект.СпособРасчетаАванса = Перечисления.СпособыРасчетаАванса.ПроцентомОтТарифа
			И Объект.Аванс = 0 Тогда
			Объект.Аванс = РазмерАвансаВПроцентахПоУмолчанию;
		КонецЕсли;
		
		УправлениеФормой();
		
	КонецЕсли;
	
	ЭтотОбъект.РасчетЗарплатыДляНебольшихОрганизаций = ПолучитьФункциональнуюОпцию("РасчетЗарплатыДляНебольшихОрганизаций");
	
	УстановитьСвязиПараметровВыбораОрганизацииНаСервере();
	
	УстановитьОсновноеНачисление();
	
	УстановитьПредупреждениеРедактированияНомера();
	СервисЭлектронныхТрудовыхКнижек.ПриемНаРаботу_ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	УстановитьСостояниеДокумента();
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Документ.ПриемНаРаботу",
		"ФормаДокумента",
		НСтр("ru='Новости: Прием на работу'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ЗакрытьПослеЗаписи = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	Если ИмяСобытия = "Запись_СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД" Тогда
		Если Параметр.Организация = Объект.Организация
			И Параметр.Сотрудники.Найти(Объект.Сотрудник) <> Неопределено Тогда
			ПолучитьСтатусЗаписиЭлектроннойТрудовойКнижки();
		КонецЕсли;
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	РазмерАвансаВПроцентахПоУмолчанию = РасчетЗарплатыФормы.РазмерАвансаВПроцентахПоУмолчанию(ТекущийОбъект.Организация);
	
	ЗаполнитьДанныеСвязанныеССотрудником();
	УстановитьФункциональныеОпцииФормы();
	
	ВидЗанятостиПредыдущий = ТекущийОбъект.ВидЗанятости;
	
	РасчетЗарплатыКлиентСервер.УстановитьПоказРазмераАванса(ЭтаФорма);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчетаБЗК.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
	ЭлектронныеТрудовыеКнижки.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
	
	СтатусЗаписиЭлектроннойТрудовойКнижки();
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.РасчетЗарплаты") Тогда
		МодульРасчетЗарплатыДляНебольшихОрганизаций = ОбщегоНазначения.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизаций");
		МодульРасчетЗарплатыДляНебольшихОрганизаций.ЗапомнитьТекущееКоличествоСотрудников(ЭтаФорма, Объект.Организация);
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	РасчетЗарплатыФормы.ЗапомнитьРазмерАвансаПоУмолчанию(
		ТекущийОбъект.Аванс, ТекущийОбъект.Организация, ТекущийОбъект.СпособРасчетаАванса);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	КадровыйУчетКлиент.ОповеститьОбИзмененииРабочегоМеста(ЭтаФорма);
	
	Если НЕ ПредупреждениеПоказано Тогда
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.РасчетЗарплаты") Тогда
			МодульРасчетЗарплатыДляНебольшихОрганизацийКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизацийКлиент");
			ПредупреждениеПоказано = МодульРасчетЗарплатыДляНебольшихОрганизацийКлиент.ПоказатьПредупреждениеОбОграниченияхРежимаРасчетаЗарплатыДляНебольшихОрганизаций(
				ЭтаФорма, Объект.Организация);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПредупреждениеПоказано Тогда
		ПоказатьПредупреждениеОбОграниченияхРежимаРасчетаЗарплатыДляНебольшихОрганизацийЗавершение();
	КонецЕсли; 
	
	Оповестить("Запись_ПриемНаРаботу", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчетаБЗК.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПослеЗаписиНаСервере(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	СтатусЗаписиЭлектроннойТрудовойКнижки();
	УстановитьПредупреждениеРедактированияНомера();
	УправлениеФормой();
	
	СинхронизацияДанныхЗарплатаКадры.ЗапуститьОтложеннуюОбработкуЗаполненияДанныхПоФизическимЛицам(ТекущийОбъект);
	СинхронизацияДанныхЗарплатаКадры.ЗапуститьОтложеннуюОбработкуЗаполненияДанныхПоСотрудникам(ТекущийОбъект);
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НомерПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(Объект.НомерПриказа)) Тогда
		Объект.НомерПриказа = ЭлектронныеТрудовыеКнижкиВызовСервера.НомерНаПечать(Объект.Номер);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	ЗаполнитьДанныеСвязанныеССотрудником(Истина);
	УстановитьСвязиПараметровВыбораОрганизации();
	УстановитьВидЗанятостиНовогоСотрудника(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьПриИзменении(Элемент)
	
	ДолжностьПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЗанятостиПриИзменении(Элемент)
	
	СотрудникиКлиент.ПроверитьКонфликтыВидаЗанятостиССуществующимиСотрудниками(
		Объект.Сотрудник,
		Объект.ФизическоеЛицо,
		Объект.Организация,
		Объект.ВидЗанятости,
		Объект.ДатаПриема);
		
	УстановитьУсловияПриема(ЭтаФорма);
	ВидЗанятостиПредыдущий = Объект.ВидЗанятости;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаАвансаПриИзменении(Элемент)
	
	ПрименитьИзменениеРасчетаАванса(ЭтаФорма);
	
КонецПроцедуры

// ЗарплатаКадрыПодсистемы.ПодписиДокументов
&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементПриИзменении(Элемент)
	ПодписиДокументовКлиент.ПриИзмененииПодписывающегоЛица(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементНажатие(Элемент)
	ПодписиДокументовКлиент.РасширеннаяПодсказкаНажатие(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры
// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов

// ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки

&НаКлиенте
Процедура ОтразитьВТрудовойКнижкеПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьДоплатыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("РедактированиеНачисленийЗавершение", ЭтотОбъект);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресПараметровВХранилище", АдресПараметровВХранилище());
	ПараметрыОткрытия.Вставить("ТолькоПросмотр",            ТолькоПросмотр);
	
	ОткрытьФорму("Документ.ПриемНаРаботу.Форма.ФормаНачислений", 
		ПараметрыОткрытия,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДокументаПриИзменении(Элемент)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаПриИзменении(Объект.Организация, "ПриемНаРаботу", Объект.НаименованиеДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДокументаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаОбработкаВыбора(
		Объект.НаименованиеДокумента, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДокументаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки

&НаКлиенте
Процедура НаименованиеДокументаНажатие(Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = "";
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЗаписьЭлектроннойТрудовойКнижкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗаписиТрудовойКнижки.Количество() = 0 Тогда
		Возврат
	ИначеЕсли ЗаписиТрудовойКнижки.Количество() = 1 Тогда
		ПоказатьЗначение(, ЗаписиТрудовойКнижки[0].ЗаписьЭлектроннойТрудовойКнижки)
	Иначе
		СписокЗаписей = Новый СписокЗначений;
		Для Каждого СтрокаТаблицы Из ЗаписиТрудовойКнижки Цикл
			СписокЗаписей.Добавить(СтрокаТаблицы.ЗаписьЭлектроннойТрудовойКнижки);
		КонецЦикла;
		
		Оповещение = Новый ОписаниеОповещения("НадписьЗаписьЭлектроннойТрудовойКнижкиПоказатьОповещение", ЭтотОбъект);
		ПоказатьВыборИзМеню(Оповещение, СписокЗаписей, Элемент);
	КонецЕсли
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ЗакрытьПослеЗаписи = Истина;
	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	
КонецПроцедуры

// ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки

&НаКлиенте
Процедура Подключаемый_ИзменитьДокумент(Команда)
	
	ДопуститьИзменениеДокумента();
	
КонецПроцедуры

// Конец ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки

// СтандартныеПодсистемы.КонтрольВеденияУчета

&НаКлиенте
Процедура Подключаемый_ОткрытьОтчетПоПроблемам(ЭлементИлиКоманда, НавигационнаяСсылка, СтандартнаяОбработка)
	
	КонтрольВеденияУчетаКлиентБЗК.ОткрытьОтчетПоПроблемамОбъекта(ЭтотОбъект, Объект.Ссылка, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтрольВеденияУчета

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтотОбъект,
		Команда
	);

КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьЗаписьЭлектроннойТрудовойКнижки(Команда)
	
	Если Объект.ПометкаУдаления Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Нельзя оформить запись электронной трудовой книжки на основании документа, помеченного на удаление.'"));
		Возврат;
	Иначе
		Если НЕ Объект.Проведен ИЛИ Модифицированность Тогда
			Кнопки = Новый СписокЗначений;
			Кнопки.Вставить(0, КодВозвратаДиалога.Да,     НСтр("ru = 'Провести'"));
			Кнопки.Вставить(1, КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
			
			Оповещение = Новый ОписаниеОповещения("ВопросПередРегистрациейСледуетПровестиЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, НСтр("ru = 'Перед регистрацией записи электронной трудовой книжки документ следует провести'"), Кнопки,, КодВозвратаДиалога.Да);
		Иначе
			СоздатьЗаписьЭлектроннойТрудовойКнижки();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиентеНаСервереБезКонтекста
Процедура ПрименитьИзменениеРасчетаАванса(Форма)
	
	Если Форма.Объект.СпособРасчетаАванса = ПредопределенноеЗначение("Перечисление.СпособыРасчетаАванса.ПроцентомОтТарифа") Тогда
		Форма.Объект.Аванс = Форма.РазмерАвансаВПроцентахПоУмолчанию;
	Иначе
		Форма.Объект.Аванс = 0;
	КонецЕсли;
	
	РасчетЗарплатыКлиентСервер.УстановитьПоказРазмераАванса(Форма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ПараметрыФО = Новый Структура("Организация, Период", Объект.Организация, Объект.ДатаПриема);
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ЗаполнитьПодписиПоОрганизации(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	УстановитьФункциональныеОпцииФормы();
	УстановитьВидЗанятостиНовогоСотрудника(ЭтаФорма);
	РазмерАвансаВПроцентахПоУмолчанию = РасчетЗарплатыФормы.РазмерАвансаВПроцентахПоУмолчанию(Объект.Организация);
	ПрименитьИзменениеРасчетаАванса(ЭтаФорма);
	
	// ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
	ЭлектронныеТрудовыеКнижки.ЗаполнитьНаименованиеДокумента(Объект, "ПриемНаРаботу");
	// Конец ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидЗанятостиНовогоСотрудника(Форма)
	
	Форма.Объект.ВидЗанятости = СотрудникиВызовСервера.ПолучитьВидЗанятостиДляНовогоСотрудника(Форма.Объект.Сотрудник, Форма.Объект.Организация);
	УстановитьУсловияПриема(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьУсловияПриема(Форма)
	
	УсловияПриема = УсловияПриемаПоВидуЗанятости(Форма.Объект.ВидЗанятости);
	
	УсловияПриемаПриОткрытии = УсловияПриемаПоВидуЗанятости(Форма.ВидЗанятостиПредыдущий);
	
	Если ПустаяСтрока(Форма.Объект.УсловияПриема) 
		ИЛИ УсловияПриемаПриОткрытии = Форма.Объект.УсловияПриема Тогда
		
		Форма.Объект.УсловияПриема = УсловияПриема;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УсловияПриемаПоВидуЗанятости(ВидЗанятости)
	
	Если ВидЗанятости = ПредопределенноеЗначение("Перечисление.ВидыЗанятости.ОсновноеМестоРаботы") Тогда
		
		Возврат НСтр("ru='Основное место работы, полная занятость'");
		
	Иначе
		
		Возврат НСтр("ru='Работа по совместительству, сокращенная рабочая неделя'");
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеСвязанныеССотрудником(ЗаполнитьФизическоеЛицоОбъекта = Ложь)
	
	ИменаКадровыхДанных = "ГоловнаяОрганизация,ВидЗастрахованногоЛица";
	Если ЗаполнитьФизическоеЛицоОбъекта Тогда
		ИменаКадровыхДанных = ИменаКадровыхДанных + "," + "ФизическоеЛицо";
	КонецЕсли;
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Объект.Сотрудник, ИменаКадровыхДанных, Объект.ДатаПриема);
	Если КадровыеДанные.Количество() > 0 Тогда
		
		ГоловнаяОрганизацияСотрудника = КадровыеДанные[0].ГоловнаяОрганизация;
		ВидЗастрахованногоЛица = КадровыеДанные[0].ВидЗастрахованногоЛица;
		
		Если ЗаполнитьФизическоеЛицоОбъекта Тогда
			Объект.ФизическоеЛицо = КадровыеДанные[0].ФизическоеЛицо;
		КонецЕсли;
		
	Иначе
		
		ГоловнаяОрганизацияСотрудника = Неопределено;
		ВидЗастрахованногоЛица = Неопределено;
		
		Если ЗаполнитьФизическоеЛицоОбъекта Тогда
			Объект.ФизическоеЛицо = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимостьПолейУсловийРаботыДляИностранныхГраждан(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьПолейУсловийРаботыДляИностранныхГраждан(Форма)
	
	ВидимостьПолей = ЗначениеЗаполнено(Форма.ВидЗастрахованногоЛица)
		И Форма.ВидЗастрахованногоЛица <> ПредопределенноеЗначение("Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"УсловияРаботыИПроживанияИностранныхГраждан",
		"Видимость",
		ВидимостьПолей);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвязиПараметровВыбораОрганизации()
	
	СотрудникЗаполнен = ЗначениеЗаполнено(Объект.Сотрудник);
	СвязиПараметровВыбораОрганизацииУстановлены = Элементы.Организация.СвязиПараметровВыбора.Количество() > 0;
	
	НеобходимоПереустановитьСвязиПараметровВыбораОрганизации = 
		СотрудникЗаполнен И НЕ СвязиПараметровВыбораОрганизацииУстановлены
		ИЛИ НЕ СотрудникЗаполнен И СвязиПараметровВыбораОрганизацииУстановлены;
		
	Если НеобходимоПереустановитьСвязиПараметровВыбораОрганизации Тогда
			
		УстановитьСвязиПараметровВыбораОрганизацииНаСервере();
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязиПараметровВыбораОрганизацииНаСервере()
	
	СвязиПараметровВыбора = Новый Массив;
	Если ЗначениеЗаполнено(ГоловнаяОрганизацияСотрудника) Тогда
		Связь = Новый СвязьПараметраВыбора("Отбор.ГоловнаяОрганизация", "ГоловнаяОрганизацияСотрудника");
		СвязиПараметровВыбора.Добавить(Связь);
	КонецЕсли; 
		
	Элементы.Организация.СвязиПараметровВыбора  = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупреждениеОбОграниченияхРежимаРасчетаЗарплатыДляНебольшихОрганизацийЗавершение(ОписаниеОповещения = Неопределено) Экспорт
	
	Если ЗакрытьПослеЗаписи И Открыта() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДолжностьПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Должность) Тогда
		
		Объект.ТрудоваяФункция = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Должность, "ТрудоваяФункция");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОкладПриИзменении(Элемент)
	
	ОсновныеНачисления = Объект.Начисления.НайтиСтроки(Новый Структура("Начисление", ОплатаПоОкладу));
	ОсновныеНачисления[0].Размер = Оклад;
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаСервере
Функция АдресПараметровВХранилище()
	
	МассивСтрок = Новый Массив;
	Для Каждого СтрокаНачисления ИЗ Объект.Начисления Цикл
		Если СтрокаНачисления.Начисление <> ОплатаПоОкладу Тогда
			МассивСтрок.Добавить(СтрокаНачисления);
		КонецЕсли;
	КонецЦикла;
	
	ПередаваемыеСведения = Новый Структура;
	ПередаваемыеСведения.Вставить("УникальныйИдентификаторВладельца", УникальныйИдентификатор);
	ПередаваемыеСведения.Вставить("МассивСтрок",                      Новый ФиксированныйМассив(МассивСтрок));
	
	Возврат ПоместитьВоВременноеХранилище(ПередаваемыеСведения, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура РедактированиеНачисленийЗавершение(Знач РезультатРедактирования, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатРедактирования)
		И ТипЗнч(РезультатРедактирования) = Тип("Структура") Тогда
		Если РезультатРедактирования.Свойство("УникальныйИдентификаторВладельца")
			И РезультатРедактирования.УникальныйИдентификаторВладельца = УникальныйИдентификатор Тогда
			ЗаполнитьТаблицуНачислений(РезультатРедактирования.АдресМассиваСтрок);
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуНачислений(АдресМассиваСтрок)
	
	Для Каждого СтрокаНачисления ИЗ Объект.Начисления Цикл
		Если СтрокаНачисления.Начисление <> ОплатаПоОкладу Тогда
			Объект.Начисления.Удалить(СтрокаНачисления);
		КонецЕсли;
	КонецЦикла;
	
	МассивСтрок = ПолучитьИзВременногоХранилища(АдресМассиваСтрок);

	Для Каждого СтрокаМассива ИЗ МассивСтрок Цикл
		НоваяСтрока = Объект.Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМассива);
	КонецЦикла;
	
	ОписаниеДоплат();
	
КонецПроцедуры

&НаСервере
Функция ОписаниеДоплат()
	
	КоличествоДоплат = Объект.Начисления.Количество() - 1;
	Если КоличествоДоплат <= 0 Тогда
		НадписьДоплаты = НСтр("ru = 'Доплаты'");
	Иначе
		СуммаДоплат = 0;
		Для Каждого СтрокаНачисления ИЗ Объект.Начисления Цикл
			Если СтрокаНачисления.Начисление <> ОплатаПоОкладу Тогда
				СуммаДоплат = СуммаДоплат + СтрокаНачисления.Размер;
			КонецЕсли;
		КонецЦикла;
		Если СуммаДоплат <> 0 Тогда
			НадписьДоплаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Доплаты: %1'"),
				Формат(СуммаДоплат, "ЧЦ=15; ЧДЦ=2; ЧН="));
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВопросПередРегистрациейСледуетПровестиЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ДокументПроведен = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	Если НЕ ДокументПроведен Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не удалось провести документ'"));
		Возврат;
	КонецЕсли;
	
	СоздатьЗаписьЭлектроннойТрудовойКнижки();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаписьЭлектроннойТрудовойКнижки()
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Сотрудник", Объект.ФизическоеЛицо);
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", Новый Структура("Организация", Объект.Организация));
	
	ОткрытьФорму("Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ФормаОбъекта", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДокументаНажатиеЗавершение(Результат, ДополнительныеДанные) Экспорт
	
	Объект.НаименованиеДокумента = Результат;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЗаписьЭлектроннойТрудовойКнижкиПоказатьОповещение(ВыбранныйЭлемент, ДопПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ПоказатьЗначение(, ВыбранныйЭлемент.Значение)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтатусЗаписиЭлектроннойТрудовойКнижки()
	
	СтатусЗаписиЭлектроннойТрудовойКнижки();
	УчетЗарплаты.УправлениеДоступностьюКадровыхРеквизитов(ЭтотОбъект, Не МероприятиеПереданоПФР);
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура СтатусЗаписиЭлектроннойТрудовойКнижки()
	
	УчетЗарплаты.СтатусЗаписиЭлектроннойТрудовойКнижки(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	УчетЗарплаты.УправлениеФормойКадровогоМероприятия(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = 0;
	ЗарплатаКадрыПереопределяемый.СостояниеДокумента(Объект, СостояниеДокумента);
	
КонецПроцедуры

&НаСервере
Процедура ДопуститьИзменениеДокумента()
	
	УчетЗарплаты.УправлениеДоступностьюКадровыхРеквизитов(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредупреждениеРедактированияНомера()
	
	УсловныйНомерПриказа = ЭлектронныеТрудовыеКнижкиВызовСервера.НомерНаПечать(Объект.Номер);
	
	Если ПустаяСтрока(Объект.НомерПриказа) Тогда
		ПредупреждениеПриРедактированииРеквизита = НСтр("ru = 'Номер заполняется при записи автоматически'");
	Иначе
		ПредупреждениеПриРедактированииРеквизита = "";
	КонецЕсли;
	
	Элементы.НомерПриказа.ПредупреждениеПриРедактировании = ПредупреждениеПриРедактированииРеквизита;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОсновноеНачисление()
	
	Если Объект.Начисления.Количество() = 0 Тогда
		НоваяСтрока = Объект.Начисления.Добавить();
		НоваяСтрока.Начисление = ОплатаПоОкладу;
	Иначе
		ОсновныеНачисления = Объект.Начисления.НайтиСтроки(Новый Структура("Начисление", ОплатаПоОкладу));
		Если ОсновныеНачисления.Количество() <> 0 Тогда
			Оклад = ОсновныеНачисления[0].Размер;
		КонецЕсли;
	КонецЕсли;
	ОписаниеДоплат();
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

ЗакрытьПослеЗаписи = Ложь;

#КонецОбласти

