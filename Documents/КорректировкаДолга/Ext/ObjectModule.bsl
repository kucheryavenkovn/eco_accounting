#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Функция ПолучитьСтруктуруРезультатовПроверки()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДебиторскаяЗадолженность", ДебиторскаяЗадолженность.Выгрузить(, 
		"НомерСтроки, ДоговорКонтрагента, КурсВзаиморасчетов, СчетУчетаРасчетов"));
	Запрос.УстановитьПараметр("КредиторскаяЗадолженность", КредиторскаяЗадолженность.Выгрузить(, 
		"НомерСтроки, ДоговорКонтрагента, КурсВзаиморасчетов, СчетУчетаРасчетов"));
	Запрос.УстановитьПараметр("ИмяДебиторскойЗадолженности",  НСтр("ru = 'Дебиторская задолженность'") );
	Запрос.УстановитьПараметр("ИмяКредиторскойЗадолженности", НСтр("ru = 'Кредиторская задолженность'") );
	Запрос.УстановитьПараметр("ВалютаРеглУчета",              Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ТекстОшибки1", НСтр("ru = 'Для валютного договора указан счет без валютного учета!'") );
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""ДебиторскаяЗадолженность"" КАК ИмяТабЧасти,
	|	&ИмяДебиторскойЗадолженности КАК СинонимТабЧасти,
	|	ТабЧасть.НомерСтроки КАК НомерСтроки,
	|	ТабЧасть.ДоговорКонтрагента КАК Договор,
	|	ТабЧасть.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ТабЧасть.СчетУчетаРасчетов КАК СчетУчета
	|ПОМЕСТИТЬ СтрокиДебиторскойЗадолженности
	|ИЗ
	|	&ДебиторскаяЗадолженность КАК ТабЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""КредиторскаяЗадолженность"" КАК ИмяТабЧасти,
	|	&ИмяКредиторскойЗадолженности КАК СинонимТабЧасти,
	|	ТабЧасть.НомерСтроки КАК НомерСтроки,
	|	ТабЧасть.ДоговорКонтрагента КАК Договор,
	|	ТабЧасть.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ТабЧасть.СчетУчетаРасчетов КАК СчетУчета
	|ПОМЕСТИТЬ СтрокиКредиторскойЗадолженности
	|ИЗ
	|	&КредиторскаяЗадолженность КАК ТабЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиДебиторскойЗадолженности.ИмяТабЧасти КАК ИмяТабЧасти,
	|	СтрокиДебиторскойЗадолженности.СинонимТабЧасти КАК СинонимТабЧасти,
	|	СтрокиДебиторскойЗадолженности.НомерСтроки КАК НомерСтроки,
	|	СтрокиДебиторскойЗадолженности.Договор КАК Договор,
	|	СтрокиДебиторскойЗадолженности.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	СтрокиДебиторскойЗадолженности.СчетУчета КАК СчетУчета
	|ПОМЕСТИТЬ СтрокиДокументов
	|ИЗ
	|	СтрокиДебиторскойЗадолженности КАК СтрокиДебиторскойЗадолженности
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтрокиКредиторскойЗадолженности.ИмяТабЧасти,
	|	СтрокиКредиторскойЗадолженности.СинонимТабЧасти,
	|	СтрокиКредиторскойЗадолженности.НомерСтроки,
	|	СтрокиКредиторскойЗадолженности.Договор,
	|	СтрокиКредиторскойЗадолженности.КурсВзаиморасчетов,
	|	СтрокиКредиторскойЗадолженности.СчетУчета
	|ИЗ
	|	СтрокиКредиторскойЗадолженности КАК СтрокиКредиторскойЗадолженности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ВТ_СчетаУчетаРасчетовСПоставщиками
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ВТ_СчетаУчетаРасчетовСПокупателями
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиВал))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиДокумента.ИмяТабЧасти КАК ИмяТабЧасти,
	|	СтрокиДокумента.СинонимТабЧасти,
	|	СтрокиДокумента.НомерСтроки КАК НомерСтроки,
	|	&ТекстОшибки1 КАК ОписаниеОшибки,
	|	Договоры.Ссылка КАК Договор,
	|	Счета.Ссылка КАК СчетУчета
	|ИЗ
	|	СтрокиДокументов КАК СтрокиДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
	|		ПО СтрокиДокумента.Договор = Договоры.Ссылка
	|			И (Договоры.ВалютаВзаиморасчетов <> &ВалютаРеглУчета)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Счета
	|		ПО СтрокиДокумента.СчетУчета = Счета.Ссылка
	|			И ((НЕ Счета.Валютный))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИмяТабЧасти,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтрокиДокумента.КурсВзаиморасчетов КАК КурсВзаиморасчетов
	|ИЗ
	|	СтрокиДокументов КАК СтрокиДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
	|		ПО СтрокиДокумента.Договор = Договоры.Ссылка
	|ГДЕ
	|	ВЫБОР
	|			КОГДА СтрокиДокумента.ИмяТабЧасти = ""ДебиторскаяЗадолженность""
	|				ТОГДА Договоры.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
	|						ИЛИ Договоры.ВидДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку))
	|							И СтрокиДокумента.СчетУчета В
	|									(ВЫБРАТЬ
	|										ВТ_СчетаУчетаРасчетовСПоставщиками.Счет
	|									ИЗ
	|										ВТ_СчетаУчетаРасчетовСПоставщиками)
	|						ИЛИ Договоры.ВидДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку))
	|							И СтрокиДокумента.СчетУчета В
	|									(ВЫБРАТЬ
	|										ВТ_СчетаУчетаРасчетовСПоставщиками.Счет
	|									ИЗ
	|										ВТ_СчетаУчетаРасчетовСПоставщиками)
	|			ИНАЧЕ Договоры.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|					ИЛИ Договоры.ВидДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку))
	|						И СтрокиДокумента.СчетУчета В
	|								(ВЫБРАТЬ
	|									ВТ_СчетаУчетаРасчетовСПокупателями.Счет
	|								ИЗ
	|									ВТ_СчетаУчетаРасчетовСПокупателями)
	|					ИЛИ Договоры.ВидДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку))
	|						И СтрокиДокумента.СчетУчета В
	|								(ВЫБРАТЬ
	|									ВТ_СчетаУчетаРасчетовСПокупателями.Счет
	|								ИЗ
	|									ВТ_СчетаУчетаРасчетовСПокупателями)
	|		КОНЕЦ";
	
	Результат = Запрос.ВыполнитьПакет();
	
	СтрукутураРезультатовПроверки = Новый Структура;
	СтрукутураРезультатовПроверки.Вставить("СтрокиДокументаСОшибками", Результат[5].Выбрать());
	СтрукутураРезультатовПроверки.Вставить("АвансыПоРазнымКурсам", Результат[6].Выбрать().Количество());
	
	Возврат СтрукутураРезультатовПроверки;

КонецФункции

//++ЭЛИАС 20120705
Процедура ПроверитьСоответствиеСуммДополнительнойАналитики(ЭтоДебиторскаяЗадолженность, Отказ)

	Если ЭтоДебиторскаяЗадолженность Тогда
		ТабличнаяЧасть = ДебиторскаяЗадолженность;
		ТабличнаяЧастьДопАналитика = АР_ДополнительнаяАналитикаВзаиморасчетовПоАрендеДт;
		ИмяТЧ = "ДебиторскаяЗадолженность";
		ИмяСписка = "Дебиторская задолженность";
	Иначе
		ТабличнаяЧасть = КредиторскаяЗадолженность;
		ТабличнаяЧастьДопАналитика = АР_ДополнительнаяАналитикаВзаиморасчетовПоАрендеКт;
		ИмяТЧ = "КредиторскаяЗадолженность";
		ИмяСписка = "Кредиторская задолженность";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТабличнаяЧасть", ТабличнаяЧасть.Выгрузить());
	Запрос.УстановитьПараметр("ДополнительнаяАналитика", ТабличнаяЧастьДопАналитика.Выгрузить());
	
	Запрос.Текст =	
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки,
	|	ТабличнаяЧасть.ДоговорКонтрагента,
	|	ТабличнаяЧасть.КорДоговорКонтрагента,
	|	ТабличнаяЧасть.АР_Ключ,           
	|	ТабличнаяЧасть.Сумма,
	|	ТабличнаяЧасть.СуммаВзаиморасчетов
	|ПОМЕСТИТЬ ВТТабличнаяЧасть
	|ИЗ
	|	&ТабличнаяЧасть КАК ТабличнаяЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительнаяАналитика.Ключ,
	|	ДополнительнаяАналитика.Сумма,
	|	ДополнительнаяАналитика.СуммаВзаиморасчетов
	|ПОМЕСТИТЬ ВТДополнительнаяАналитика
	|ИЗ
	|	&ДополнительнаяАналитика КАК ДополнительнаяАналитика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки,
	|	ЕстьNULL(ТабличнаяЧасть.ДоговорКонтрагента.АР_АрендныйДоговор, Ложь) КАК ЭтоАрендныйДоговор,
	|	ЕстьNULL(ТабличнаяЧасть.КорДоговорКонтрагента.АР_АрендныйДоговор, Ложь) КАК ЭтоАрендныйКорДоговор,
	|	МАКСИМУМ(ТабличнаяЧасть.Сумма) КАК Сумма,
	|	МАКСИМУМ(ТабличнаяЧасть.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	СУММА(ДополнительнаяАналитика.Сумма) КАК СуммаДопАналитика,
	|	СУММА(ДополнительнаяАналитика.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетовДопАналитика
	|ИЗ
	|	ВТТабличнаяЧасть КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДополнительнаяАналитика КАК ДополнительнаяАналитика
	|		ПО ТабличнаяЧасть.АР_Ключ = ДополнительнаяАналитика.Ключ
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.НомерСтроки,
	|	ЕстьNULL(ТабличнаяЧасть.ДоговорКонтрагента.АР_АрендныйДоговор, Ложь),
	|	ЕстьNULL(ТабличнаяЧасть.КорДоговорКонтрагента.АР_АрендныйДоговор, Ложь)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.ЭтоАрендныйДоговор И НЕ Выборка.ЭтоАрендныйКорДоговор Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ (Выборка.Сумма = Выборка.СуммаДопАналитика)
			ИЛИ НЕ (Выборка.СуммаВзаиморасчетов = Выборка.СуммаВзаиморасчетовДопАналитика) Тогда
			Префикс = ИмяТЧ + "[" + Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
			Если Не Выборка.Сумма = Выборка.СуммаДопАналитика Тогда
				Реквизит = "Сумма";
				ПредставлениеРеквизита = НСтр("ru = 'Сумма'");
			Иначе
				Реквизит = "СуммаВзаиморасчетов";
				ПредставлениеРеквизита = НСтр("ru = 'Сумма взаиморасчетов'");
			КонецЕсли;
			ТекстСообщения = НСтр("ru = 'Сумма по дополнительной аналитике не соответствует сумме в основной таблице'");
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", ПредставлениеРеквизита,
			Выборка.НомерСтроки, ИмяСписка, ТекстСообщения);
			Поле = Префикс + Реквизит;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры //--ЭЛИАС 20120705

//++ЭЛИАС 20120705
Процедура ПроверитьЧтоНетЛишнейАналитики(ЭтоДебиторскаяЗадолженность, ЭтоПроверкаПоНовомуДоговору, Отказ)

	Если ЭтоДебиторскаяЗадолженность Тогда
		ТабличнаяЧасть = ДебиторскаяЗадолженность;
		ТабличнаяЧастьДопАналитика = АР_ДополнительнаяАналитикаВзаиморасчетовПоАрендеДт;
		ИмяТЧ = "ДебиторскаяЗадолженность";
		ИмяСписка = "Дебиторская задолженность";
	Иначе
		ТабличнаяЧасть = КредиторскаяЗадолженность;
		ТабличнаяЧастьДопАналитика = АР_ДополнительнаяАналитикаВзаиморасчетовПоАрендеКт;
		ИмяТЧ = "КредиторскаяЗадолженность";
		ИмяСписка = "Кредиторская задолженность";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТабличнаяЧасть", ТабличнаяЧасть.Выгрузить());
	Запрос.УстановитьПараметр("ДополнительнаяАналитика", ТабличнаяЧастьДопАналитика.Выгрузить());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки,
	|	ТабличнаяЧасть.АР_Ключ,
	|	ТабличнаяЧасть.ДоговорКонтрагента КАК ДоговорКонтрагента
	|ПОМЕСТИТЬ ВТТабличнаяЧасть
	|ИЗ
	|	&ТабличнаяЧасть КАК ТабличнаяЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительнаяАналитика.Ключ,
	|	ДополнительнаяАналитика.УслугаАренды КАК УслугаАренды,
	|	ДополнительнаяАналитика.ОбъектАренды КАК ОбъектАренды,
	|	ДополнительнаяАналитика.СчетНаАренду КАК СчетНаАренду,
	|	ДополнительнаяАналитика.ПериодАренды КАК ПериодАренды
	|ПОМЕСТИТЬ ВТДополнительнаяАналитика
	|ИЗ
	|	&ДополнительнаяАналитика КАК ДополнительнаяАналитика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ДоговорЗаполнен,
	|	ТабличнаяЧасть.ДоговорКонтрагента.АР_АрендныйДоговор КАК АрендныйДоговор,
	|	ТабличнаяЧасть.ДоговорКонтрагента.АР_ВестиВзаиморасчетыПоПериодам КАК ВестиВзаиморасчетыПоПериодам,
	|	ТабличнаяЧасть.ДоговорКонтрагента.АР_ВестиВзаиморасчетыПоОбъектам КАК ВестиВзаиморасчетыПоОбъектам,
	|	ТабличнаяЧасть.ДоговорКонтрагента.АР_ВестиВзаиморасчетыПоСчетамПост КАК ВестиВзаиморасчетыПоСчетамПост,
	|	ТабличнаяЧасть.ДоговорКонтрагента.АР_ВестиВзаиморасчетыПоСчетамПерем КАК ВестиВзаиморасчетыПоСчетамПерем,
	|	ТабличнаяЧасть.ДоговорКонтрагента.АР_ВестиВзаиморасчетыПоУслугам КАК ВестиВзаиморасчетыПоУслугам,
	|	ДополнительнаяАналитика.УслугаАренды,
	|	ДополнительнаяАналитика.ОбъектАренды,
	|	ДополнительнаяАналитика.СчетНаАренду,
	|	ДополнительнаяАналитика.ПериодАренды,
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТТабличнаяЧасть КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДополнительнаяАналитика КАК ДополнительнаяАналитика
	|		ПО ТабличнаяЧасть.АР_Ключ = ДополнительнаяАналитика.Ключ
	|ИТОГИ ПО
	|	НомерСтроки";
	Если ЭтоПроверкаПоНовомуДоговору Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТабличнаяЧасть.ДоговорКонтрагента КАК ДоговорКонтрагента", "ТабличнаяЧасть.КорДоговорКонтрагента КАК ДоговорКонтрагента");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДополнительнаяАналитика.УслугаАренды КАК УслугаАренды", "ДополнительнаяАналитика.НовыйУслугаАренды КАК УслугаАренды");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДополнительнаяАналитика.ОбъектАренды КАК ОбъектАренды", "ДополнительнаяАналитика.НовыйОбъектАренды КАК ОбъектАренды");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДополнительнаяАналитика.СчетНаАренду КАК СчетНаАренду", "ДополнительнаяАналитика.НовыйСчетНаАренду КАК СчетНаАренду");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДополнительнаяАналитика.ПериодАренды КАК ПериодАренды", "ДополнительнаяАналитика.НовыйПериодАренды КАК ПериодАренды");
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	ВыборкаНомерСтроки = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Шаблон = НСтр("ru = 'Некорректно заполнены данные по строке %1 списка ""%2"".
				|
				|%3'");
	Пока ВыборкаНомерСтроки.Следующий() Цикл
		
		Префикс = ИмяТЧ + "[" + Формат(ВыборкаНомерСтроки.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		Поле = Префикс + ?(ЭтоПроверкаПоНовомуДоговору, "Кор", "") + "ДоговорКонтрагента";
		
		ЕстьУслуги = Ложь;
		ЕстьОбъектыАренды = Ложь;
		ЕстьПериод = Ложь;
		ЕстьСчет = Ложь;
		Выборка = ВыборкаНомерСтроки.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если НЕ Выборка.ДоговорЗаполнен Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ Выборка.ВестиВзаиморасчетыПоПериодам И ЗначениеЗаполнено(Выборка.ПериодАренды) Тогда
				ЕстьПериод = Истина;
			КонецЕсли;
			Если НЕ Выборка.ВестиВзаиморасчетыПоОбъектам И ЗначениеЗаполнено(Выборка.ОбъектАренды) Тогда
				ЕстьОбъектыАренды = Истина;
			КонецЕсли;
			Если НЕ Выборка.ВестиВзаиморасчетыПоУслугам И ЗначениеЗаполнено(Выборка.УслугаАренды) Тогда
				ЕстьУслуги = Истина;
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.УслугаАренды) Тогда
				Если Выборка.УслугаАренды.АР_ПостояннаяЧастьОплаты И НЕ Выборка.ВестиВзаиморасчетыПоСчетамПост И ЗначениеЗаполнено(Выборка.СчетНаАренду) Тогда
					ЕстьСчет = Истина;
				ИначеЕсли НЕ Выборка.УслугаАренды.АР_ПостояннаяЧастьОплаты И НЕ Выборка.ВестиВзаиморасчетыПоСчетамПерем И ЗначениеЗаполнено(Выборка.СчетНаАренду) Тогда
					ЕстьСчет = Истина;
				ИначеЕсли (НЕ Выборка.ВестиВзаиморасчетыПоСчетамПерем И НЕ Выборка.ВестиВзаиморасчетыПоСчетамПост) И ЗначениеЗаполнено(Выборка.СчетНаАренду) Тогда
					ЕстьСчет = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьУслуги Тогда
			ТекстСообщения = НСтр("ru = 'В подчиненной таблице ""Дополнительная аналитика"" есть строки с заполненной услугой, хотя взаиморасчеты по услугам не ведутся'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ВыборкаНомерСтроки.НомерСтроки, ИмяСписка, ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		Если ЕстьОбъектыАренды Тогда
			ТекстСообщения = НСтр("ru = 'В подчиненной таблице ""Дополнительная аналитика"" есть строки с заполненными объектами аренды, хотя взаиморасчеты по объектам аренды не ведутся'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ВыборкаНомерСтроки.НомерСтроки, ИмяСписка, ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		Если ЕстьПериод Тогда
			ТекстСообщения = НСтр("ru = 'В подчиненной таблице ""Дополнительная аналитика"" есть строки с заполненным периодом оплаты, хотя взаиморасчеты по периодам не ведутся'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ВыборкаНомерСтроки.НомерСтроки, ИмяСписка, ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		Если ЕстьСчет Тогда
			ТекстСообщения = НСтр("ru = 'В подчиненной таблице ""Дополнительная аналитика"" есть строки с заполненным счетом, хотя взаиморасчеты по счетам не ведутся'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ВыборкаНомерСтроки.НомерСтроки, ИмяСписка, ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры //--ЭЛИАС 20120705

//++ЭЛИАС 20120712
// Процедура конвертирует поле Ключ (берется из УдалитьКлюч) в табличных частях
// - ДебиторскаяЗадолженность
// - КредиторскаяЗадолженность
// 
Процедура ВыполнитьКонвертациюКлючейСвязиТабличныхЧастейПриПереходеС2БП() Экспорт

	Для Каждого ТекущаяСтрока Из ДебиторскаяЗадолженность Цикл
		Если ПустаяСтрока(ТекущаяСтрока.АР_Ключ) И (ТекущаяСтрока.УдалитьАР_Ключ <> 0) Тогда
			НовыйУИН = Новый УникальныйИдентификатор;
			ТекущаяСтрока.АР_Ключ = НовыйУИН;
			МассивПодчиненныхСтрок = АР_ДополнительнаяАналитикаВзаиморасчетовПоАрендеДт.НайтиСтроки(Новый Структура("УдалитьКлюч", ТекущаяСтрока.УдалитьАР_Ключ));
			Для Каждого ТекущаяПодчиненнаяСтрока Из МассивПодчиненныхСтрок Цикл
				ТекущаяПодчиненнаяСтрока.Ключ = НовыйУИН;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекущаяСтрока Из КредиторскаяЗадолженность Цикл
		Если ПустаяСтрока(ТекущаяСтрока.АР_Ключ) И (ТекущаяСтрока.УдалитьАР_Ключ <> 0) Тогда
			НовыйУИН = Новый УникальныйИдентификатор;
			ТекущаяСтрока.АР_Ключ = НовыйУИН;
			МассивПодчиненныхСтрок = АР_ДополнительнаяАналитикаВзаиморасчетовПоАрендеКт.НайтиСтроки(Новый Структура("УдалитьКлюч", ТекущаяСтрока.УдалитьАР_Ключ));
			Для Каждого ТекущаяПодчиненнаяСтрока Из МассивПодчиненныхСтрок Цикл
				ТекущаяПодчиненнаяСтрока.Ключ = НовыйУИН;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры //--ЭЛИАС 20120712

//++ЭЛИАС 20130221  
Процедура ИсключитьНеобязательнуюАналитикуПоСчетамУчета(МассивНепроверяемыхРеквизитов)
	
	Если НЕ АР_КорректировкаДолгаПоАренде ИЛИ НЕ ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее Тогда
		МассивНепроверяемыхРеквизитов.Добавить("АР_УслугаАрендыДт");	
		МассивНепроверяемыхРеквизитов.Добавить("АР_ОбъектАрендыДт");	
		МассивНепроверяемыхРеквизитов.Добавить("АР_СчетНаАрендуДт");	
		МассивНепроверяемыхРеквизитов.Добавить("АР_ПериодАрендыДт");	
		МассивНепроверяемыхРеквизитов.Добавить("АР_ПениДт");	
		МассивНепроверяемыхРеквизитов.Добавить("АР_УслугаАрендыКт");	
		МассивНепроверяемыхРеквизитов.Добавить("АР_ОбъектАрендыКт");	
		МассивНепроверяемыхРеквизитов.Добавить("АР_СчетНаАрендуКт");	
		МассивНепроверяемыхРеквизитов.Добавить("АР_ПериодАрендыКт");	
		МассивНепроверяемыхРеквизитов.Добавить("АР_ДепозитКт");	
	Иначе 
		
		ДоговорДт = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ДоговорКт = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		
		СтрокаСубконтоДт = СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
		Если СтрокаСубконтоДт <> Неопределено Тогда
			Для К = 1 По СчетДт.ВидыСубконто.Количество() Цикл
				Если СчетДт.ВидыСубконто[К-1] = СтрокаСубконтоДт Тогда
					Если НЕ ЭтотОбъект["СубконтоДт" + К] = Неопределено Тогда
						ДоговорДт = ЭтотОбъект["СубконтоДт" + К];
					КонецЕсли;
					Если ЗначениеЗаполнено(ДоговорДт) Тогда
						ЭтоАрендаДт = ДоговорДт.АР_АрендныйДоговор И АР_КорректировкаДолгаПоАренде 
						И ((ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности) ИЛИ (ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее));
					Иначе
						ЭтоАрендаДт = Ложь;
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;
		Иначе
			ЭтоАрендаДт = Ложь;
		КонецЕсли;
		СтрокаСубконтоКт = СчетКт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
		Если СтрокаСубконтоКт <> Неопределено Тогда
			Для К = 1 По СчетКт.ВидыСубконто.Количество() Цикл
				Если СчетКт.ВидыСубконто[К-1] = СтрокаСубконтоКт Тогда
					Если НЕ ЭтотОбъект["СубконтоКт" + К] = Неопределено Тогда
						ДоговорКт = ЭтотОбъект["СубконтоКт" + К];
					КонецЕсли;
					Если ЗначениеЗаполнено(ДоговорКт) Тогда
						ЭтоАрендаКт = ДоговорКт.АР_АрендныйДоговор И АР_КорректировкаДолгаПоАренде 
						И ((ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности) ИЛИ (ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее));
					Иначе
						ЭтоАрендаКт = Ложь;
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;
		Иначе
			ЭтоАрендаКт = Ложь;
		КонецЕсли;
		ВестиВзаиморасчетыПоСчетамДт = ЭтоАрендаДт И (ДоговорДт.АР_ВестиВзаиморасчетыПоСчетамПост ИЛИ ДоговорДт.АР_ВестиВзаиморасчетыПоСчетамПерем);		
		ВестиВзаиморасчетыПоСчетамКт = ЭтоАрендаКт И (ДоговорКт.АР_ВестиВзаиморасчетыПоСчетамПост ИЛИ ДоговорКт.АР_ВестиВзаиморасчетыПоСчетамПерем);		
		
		ЭтоАрендаДт = ЭтоАрендаДт И ДебиторскаяЗадолженность.Количество() <> 0;
		ЭтоАрендаКт = ЭтоАрендаКт И КредиторскаяЗадолженность.Количество() <> 0;
		
		Если ЭтоАрендаДт И ЭтоАрендаКт Тогда
			// если аванс, то услугу и объект можно не заполнять
			МассивНепроверяемыхРеквизитов.Добавить("АР_УслугаАрендыКт");	
			МассивНепроверяемыхРеквизитов.Добавить("АР_ОбъектАрендыКт");
			// если аванс на депозит, то прочая аналитика не нужна
			Если АР_ДепозитКт Тогда
				МассивНепроверяемыхРеквизитов.Добавить("АР_УслугаАрендыКт");	
				МассивНепроверяемыхРеквизитов.Добавить("АР_ОбъектАрендыКт");	
				МассивНепроверяемыхРеквизитов.Добавить("АР_СчетНаАрендуКт");	
				МассивНепроверяемыхРеквизитов.Добавить("АР_ПериодАрендыКт");	
			КонецЕсли;
		ИначеЕсли ЭтоАрендаДт Тогда
			МассивНепроверяемыхРеквизитов.Добавить("АР_УслугаАрендыКт");	
			МассивНепроверяемыхРеквизитов.Добавить("АР_ОбъектАрендыКт");	
			МассивНепроверяемыхРеквизитов.Добавить("АР_СчетНаАрендуКт");	
			МассивНепроверяемыхРеквизитов.Добавить("АР_ПериодАрендыКт");	
			МассивНепроверяемыхРеквизитов.Добавить("АР_ДепозитКт");	
		ИначеЕсли ЭтоАрендаКт Тогда
			МассивНепроверяемыхРеквизитов.Добавить("АР_УслугаАрендыДт");	
			МассивНепроверяемыхРеквизитов.Добавить("АР_ОбъектАрендыДт");	
			МассивНепроверяемыхРеквизитов.Добавить("АР_СчетНаАрендуДт");	
			МассивНепроверяемыхРеквизитов.Добавить("АР_ПериодАрендыДт");	
			МассивНепроверяемыхРеквизитов.Добавить("АР_ПениДт");
			// если аванс, то услугу и объект можно не заполнять
			МассивНепроверяемыхРеквизитов.Добавить("АР_УслугаАрендыКт");	
			МассивНепроверяемыхРеквизитов.Добавить("АР_ОбъектАрендыКт");
			// если аванс на депозит, то прочая аналитика не нужна
			Если АР_ДепозитКт Тогда
				МассивНепроверяемыхРеквизитов.Добавить("АР_УслугаАрендыКт");	
				МассивНепроверяемыхРеквизитов.Добавить("АР_ОбъектАрендыКт");	
				МассивНепроверяемыхРеквизитов.Добавить("АР_СчетНаАрендуКт");	
				МассивНепроверяемыхРеквизитов.Добавить("АР_ПериодАрендыКт");	
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ДоговорДт.АР_ВестиВзаиморасчетыПоОбъектам Тогда
			МассивНепроверяемыхРеквизитов.Добавить("АР_ОбъектАрендыДт");	
		КонецЕсли;
		Если НЕ ДоговорКт.АР_ВестиВзаиморасчетыПоОбъектам Тогда
			МассивНепроверяемыхРеквизитов.Добавить("АР_ОбъектАрендыКт");	
		КонецЕсли;
		Если НЕ ДоговорДт.АР_ВестиВзаиморасчетыПоПериодам Тогда
			МассивНепроверяемыхРеквизитов.Добавить("АР_ПериодАрендыДт");	
		КонецЕсли;
		Если НЕ ДоговорКт.АР_ВестиВзаиморасчетыПоПериодам Тогда
			МассивНепроверяемыхРеквизитов.Добавить("АР_ПериодАрендыКт");	
		КонецЕсли;
		Если НЕ ДоговорДт.АР_ВестиВзаиморасчетыПоУслугам Тогда
			МассивНепроверяемыхРеквизитов.Добавить("АР_УслугаАрендыДт");	
		КонецЕсли;
		Если НЕ ДоговорКт.АР_ВестиВзаиморасчетыПоУслугам Тогда
			МассивНепроверяемыхРеквизитов.Добавить("АР_УслугаАрендыКт");	
		КонецЕсли;
		Если НЕ ВестиВзаиморасчетыПоСчетамДт Тогда
			МассивНепроверяемыхРеквизитов.Добавить("АР_СчетНаАрендуДт");	
		КонецЕсли;
		Если НЕ ВестиВзаиморасчетыПоСчетамКт Тогда
			МассивНепроверяемыхРеквизитов.Добавить("АР_СчетНаАрендуКт");	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //--ЭЛИАС 20130221

//++ЭЛИАС 20130511  
Процедура ПроверитьЗаполнениеДополнительнойАналитики(ЭтоДебиторскаяЗадолженность, Отказ)
	
	Если НЕ АР_КорректировкаДолгаПоАренде Тогда
		Возврат;	
	КонецЕсли;
	
	АрендаТребуетсяСписатьЗадолжность = Истина;
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее Тогда
		Если ДебиторскаяЗадолженность.Итог("Сумма") = КредиторскаяЗадолженность.Итог("Сумма") Тогда
			Если НЕ ЗначениеЗаполнено(СчетДт) И НЕ ЗначениеЗаполнено(СчетКт) Тогда 
				АрендаТребуетсяСписатьЗадолжность = Истина;
			ИначеЕсли ЭтоДебиторскаяЗадолженность И НЕ ЗначениеЗаполнено(СчетДт) Тогда
				АрендаТребуетсяСписатьЗадолжность = Ложь;	
			ИначеЕсли НЕ ЭтоДебиторскаяЗадолженность И НЕ ЗначениеЗаполнено(СчетКт) Тогда
				АрендаТребуетсяСписатьЗадолжность = Ложь;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоДебиторскаяЗадолженность Тогда
		ТабличнаяЧасть = ДебиторскаяЗадолженность;
		ТабличнаяЧастьДопАналитика = АР_ДополнительнаяАналитикаВзаиморасчетовПоАрендеДт;
		ИмяТЧ = "ДебиторскаяЗадолженность";
	Иначе
		ТабличнаяЧасть = КредиторскаяЗадолженность;
		ТабличнаяЧастьДопАналитика = АР_ДополнительнаяАналитикаВзаиморасчетовПоАрендеКт;
		ИмяТЧ = "КредиторскаяЗадолженность";
	КонецЕсли;
	
	Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее Тогда
		Субконто = ?(ЭтоДебиторскаяЗадолженность, СубконтоДт2, СубконтоКт2);
		Если ТипЗнч(Субконто) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			Договор = Субконто;	
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТабличнаяЧастьЗадолженность", ТабличнаяЧасть.Выгрузить());
	Запрос.УстановитьПараметр("ДополнительнаяАналитика", ТабличнаяЧастьДопАналитика.Выгрузить());
	Запрос.УстановитьПараметр("АрендаТребуетсяСписатьЗадолжность", АрендаТребуетсяСписатьЗадолжность);
	Запрос.УстановитьПараметр("ВидОперации", ВидОперации);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Договор);
	Запрос.УстановитьПараметр("ВестиВзаиморасчетыПоПериодам", Договор.АР_ВестиВзаиморасчетыПоПериодам);
	Запрос.УстановитьПараметр("ВестиВзаиморасчетыПоОбъектам", Договор.АР_ВестиВзаиморасчетыПоОбъектам);
	Запрос.УстановитьПараметр("ВестиВзаиморасчетыПоУслугам", Договор.АР_ВестиВзаиморасчетыПоУслугам);
	Запрос.УстановитьПараметр("ВестиВзаиморасчетыПоСчетамПост", Договор.АР_ВестиВзаиморасчетыПоСчетамПост);
	Запрос.УстановитьПараметр("ВестиВзаиморасчетыПоСчетамПерем", Договор.АР_ВестиВзаиморасчетыПоСчетамПерем);
	Запрос.УстановитьПараметр("АрендныйДоговор", Договор.АР_АрендныйДоговор);
	Запрос.УстановитьПараметр("ПериодАренды", ?(ЭтоДебиторскаяЗадолженность, АР_ПериодАрендыДт, АР_ПериодАрендыКт));
	Запрос.УстановитьПараметр("УслугаАренды", ?(ЭтоДебиторскаяЗадолженность, АР_УслугаАрендыДт, АР_УслугаАрендыКт));
	Запрос.УстановитьПараметр("ОбъектАренды", ?(ЭтоДебиторскаяЗадолженность, АР_ОбъектАрендыДт, АР_ОбъектАрендыКт));
	Запрос.УстановитьПараметр("СчетНаАренду", ?(ЭтоДебиторскаяЗадолженность, АР_СчетНаАрендуДт, АР_СчетНаАрендуКт));
	Запрос.УстановитьПараметр("Пени", ?(ЭтоДебиторскаяЗадолженность, АР_ПениДт, Ложь));
	Запрос.УстановитьПараметр("Депозит", ?(ЭтоДебиторскаяЗадолженность, Ложь, АР_ДепозитКт));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВТ_ТабличнаяЧастьЗадолженность
	|ИЗ
	|	&ТабличнаяЧастьЗадолженность КАК ТабличнаяЧастьЗадолженность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВТ_ДополнительнаяАналитика
	|ИЗ
	|	&ДополнительнаяАналитика КАК ДополнительнаяАналитика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК ИД,
	|	ТабличнаяЧастьЗадолженность.НомерСтроки,
	|	ТабличнаяЧастьЗадолженность.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЕСТЬNULL(ТабличнаяЧастьЗадолженность.ДоговорКонтрагента.АР_ВестиВзаиморасчетыПоПериодам, ЛОЖЬ) КАК ВестиВзаиморасчетыПоПериодам,
	|	ЕСТЬNULL(ТабличнаяЧастьЗадолженность.ДоговорКонтрагента.АР_ВестиВзаиморасчетыПоОбъектам, ЛОЖЬ) КАК ВестиВзаиморасчетыПоОбъектам,
	|	ЕСТЬNULL(ТабличнаяЧастьЗадолженность.ДоговорКонтрагента.АР_ВестиВзаиморасчетыПоУслугам, ЛОЖЬ) КАК ВестиВзаиморасчетыПоУслугам,
	|	ЕСТЬNULL(ТабличнаяЧастьЗадолженность.ДоговорКонтрагента.АР_ВестиВзаиморасчетыПоСчетамПост, ЛОЖЬ) КАК ВестиВзаиморасчетыПоСчетамПост,
	|	ЕСТЬNULL(ТабличнаяЧастьЗадолженность.ДоговорКонтрагента.АР_ВестиВзаиморасчетыПоСчетамПерем, ЛОЖЬ) КАК ВестиВзаиморасчетыПоСчетамПерем,
	|	ЕСТЬNULL(ТабличнаяЧастьЗадолженность.ДоговорКонтрагента.АР_АрендныйДоговор, ЛОЖЬ) КАК АрендныйДоговор,
	|	ДополнительнаяАналитика.ПериодАренды КАК ПериодАренды,
	|	ДополнительнаяАналитика.УслугаАренды КАК УслугаАренды,
	|	ДополнительнаяАналитика.ОбъектАренды КАК ОбъектАренды,
	|	ДополнительнаяАналитика.СчетНаАренду КАК СчетНаАренду,
	|	ДополнительнаяАналитика.Пени КАК Пени,
	|	ДополнительнаяАналитика.Депозит КАК Депозит
	|ИЗ
	|	ВТ_ТабличнаяЧастьЗадолженность КАК ТабличнаяЧастьЗадолженность
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДополнительнаяАналитика КАК ДополнительнаяАналитика
	|		ПО ТабличнаяЧастьЗадолженность.АР_Ключ = ДополнительнаяАналитика.Ключ
	|ГДЕ
	|	&АрендаТребуетсяСписатьЗадолжность
	|	И ЕСТЬNULL(ТабличнаяЧастьЗадолженность.ДоговорКонтрагента.АР_АрендныйДоговор, ЛОЖЬ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ТабличнаяЧастьЗадолженность.НомерСтроки,
	|	ТабличнаяЧастьЗадолженность.КорДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЕСТЬNULL(ТабличнаяЧастьЗадолженность.КорДоговорКонтрагента.АР_ВестиВзаиморасчетыПоПериодам, ЛОЖЬ) КАК ВестиВзаиморасчетыПоПериодам,
	|	ЕСТЬNULL(ТабличнаяЧастьЗадолженность.КорДоговорКонтрагента.АР_ВестиВзаиморасчетыПоОбъектам, ЛОЖЬ) КАК ВестиВзаиморасчетыПоОбъектам,
	|	ЕСТЬNULL(ТабличнаяЧастьЗадолженность.КорДоговорКонтрагента.АР_ВестиВзаиморасчетыПоУслугам, ЛОЖЬ) КАК ВестиВзаиморасчетыПоУслугам,
	|	ЕСТЬNULL(ТабличнаяЧастьЗадолженность.КорДоговорКонтрагента.АР_ВестиВзаиморасчетыПоСчетамПост, ЛОЖЬ) КАК ВестиВзаиморасчетыПоСчетамПост,
	|	ЕСТЬNULL(ТабличнаяЧастьЗадолженность.КорДоговорКонтрагента.АР_ВестиВзаиморасчетыПоСчетамПерем, ЛОЖЬ) КАК ВестиВзаиморасчетыПоСчетамПерем,
	|	ЕСТЬNULL(ТабличнаяЧастьЗадолженность.КорДоговорКонтрагента.АР_АрендныйДоговор, ЛОЖЬ) КАК АрендныйДоговор,
	|	ДополнительнаяАналитика.НовыйПериодАренды КАК ПериодАренды,
	|	ДополнительнаяАналитика.НовыйУслугаАренды КАК УслугаАренды,
	|	ДополнительнаяАналитика.НовыйОбъектАренды КАК ОбъектАренды,
	|	ДополнительнаяАналитика.НовыйСчетНаАренду КАК СчетНаАренду,
	|	ДополнительнаяАналитика.НовыйПени КАК Пени,
	|	ДополнительнаяАналитика.НовыйДепозит КАК Депозит
	|ИЗ
	|	ВТ_ТабличнаяЧастьЗадолженность КАК ТабличнаяЧастьЗадолженность
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДополнительнаяАналитика КАК ДополнительнаяАналитика
	|		ПО ТабличнаяЧастьЗадолженность.АР_Ключ = ДополнительнаяАналитика.Ключ
	|ГДЕ
	|	&ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировкаДолга.ПереносЗадолженности)
	|	И ЕСТЬNULL(ТабличнаяЧастьЗадолженность.КорДоговорКонтрагента.АР_АрендныйДоговор, ЛОЖЬ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	1,
	|	&ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	&ВестиВзаиморасчетыПоПериодам КАК ВестиВзаиморасчетыПоПериодам,
	|	&ВестиВзаиморасчетыПоОбъектам КАК ВестиВзаиморасчетыПоОбъектам,
	|	&ВестиВзаиморасчетыПоУслугам КАК ВестиВзаиморасчетыПоУслугам,
	|	&ВестиВзаиморасчетыПоСчетамПост КАК ВестиВзаиморасчетыПоСчетамПост,
	|	&ВестиВзаиморасчетыПоСчетамПерем КАК ВестиВзаиморасчетыПоСчетамПерем,
	|	&АрендныйДоговор КАК АрендныйДоговор,
	|	&ПериодАренды КАК ПериодАренды,
	|	&УслугаАренды КАК УслугаАренды,
	|	&ОбъектАренды КАК ОбъектАренды,
	|	&СчетНаАренду КАК СчетНаАренду,
	|	&Пени КАК Пени,
	|	&Депозит КАК Депозит
	|ИЗ
	|	ВТ_ТабличнаяЧастьЗадолженность КАК ТабличнаяЧастьЗадолженность
	|ГДЕ
	|	&ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировкаДолга.Прочее)
	|	И &АрендныйДоговор";
	
	Для Каждого Стр Из Запрос.Выполнить().Выгрузить() Цикл
		Префикс = ИмяТЧ + "[" + Формат(Стр.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		Если Стр.ИД = 1 Тогда 
			Поле = Префикс + "ДоговорКонтрагента";
		ИначеЕсли Стр.ИД = 2 Тогда 
			Поле = Префикс + "КорДоговорКонтрагента";
		ИначеЕсли Стр.ИД = 3 Тогда 
			Поле = ?(ЭтоДебиторскаяЗадолженность, "СубконтоДт2", "СубконтоКт2");
		КонецЕсли;
		Если Стр.Депозит Тогда
			Продолжить;
		КонецЕсли;
		Если Стр.ВестиВзаиморасчетыПоПериодам И НЕ ЗначениеЗаполнено(Стр.ПериодАренды) Тогда
			ТекстСообщения = НСтр("ru = 'В подчиненной таблице ""Дополнительная аналитика"" не заполнен период оплаты, хотя взаиморасчеты по периодам ведутся'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		Если ЗначениеЗаполнено(Стр.УслугаАренды) И НЕ ЗначениеЗаполнено(Стр.СчетНаАренду) И ((Стр.ВестиВзаиморасчетыПоСчетамПост И Стр.УслугаАренды.АР_ПостояннаяЧастьОплаты) ИЛИ (Стр.ВестиВзаиморасчетыПоСчетамПерем И НЕ Стр.УслугаАренды.АР_ПостояннаяЧастьОплаты)) Тогда
			ТекстСообщения = НСтр("ru = 'В подчиненной таблице ""Дополнительная аналитика"" не заполнен счет на аренду, хотя взаиморасчеты по счетам ведутся'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		Если ЭтоДебиторскаяЗадолженность Тогда
			Если Стр.ВестиВзаиморасчетыПоОбъектам И НЕ ЗначениеЗаполнено(Стр.ОбъектАренды) Тогда
				ТекстСообщения = НСтр("ru = 'В подчиненной таблице ""Дополнительная аналитика"" не заполнен объект аренды, хотя взаиморасчеты по объектам ведутся'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			Если Стр.ВестиВзаиморасчетыПоУслугам И НЕ ЗначениеЗаполнено(Стр.УслугаАренды) Тогда
				ТекстСообщения = НСтр("ru = 'В подчиненной таблице ""Дополнительная аналитика"" не заполнена услуга аренды, хотя взаиморасчеты по услугам ведутся'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //--ЭЛИАС 20130511

//++ЭЛИАС 20150504  
Процедура ПроверитьЗаполнениеДокументовРасчета(Отказ)
	
	Если НЕ АР_КорректировкаДолгаПоАренде Тогда
		Возврат;	
	КонецЕсли;
	
	ТабЧасти = Новый СписокЗначений;
	ТабЧасти.Добавить("ДебиторскаяЗадолженность", "Дебиторская задолженность");
	ТабЧасти.Добавить("КредиторскаяЗадолженность", "Кредиторская задолженность");
	
	Для Каждого ТабЧасть Из ТабЧасти Цикл
		Для Каждого СтрокаТЧ Из ЭтотОбъект[ТабЧасть.Значение] Цикл
			Префикс = ТабЧасть.Значение + "[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
			Если ЗначениеЗаполнено(СтрокаТЧ.ДоговорКонтрагента) И СтрокаТЧ.ДоговорКонтрагента.АР_АрендныйДоговор
				И НЕ ЗначениеЗаполнено(СтрокаТЧ.Сделка) Тогда
				ТекстСообщения = НСтр("ru = 'Не заполнен документ расчетов'");
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", НСтр("ru = 'Документ расчетов'"),
				СтрокаТЧ.НомерСтроки, ТабЧасть.Представление, ТекстСообщения);
				Поле = Префикс + "Сделка";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры //--ЭЛИАС 20150504

//--ЭЛИАС 20160614

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("ВидОперации") Тогда
			
			Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.УдалитьПроведениеВзаимозачета Тогда
				ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	

	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	// При групповом перепроведении реквизиты документов не меняются,
	// поэтому обновление связанных данных выполнять не требуется.
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		СуммаДтЗадолженности = ДебиторскаяЗадолженность.Итог("Сумма");
		СуммаКтЗадолженности = КредиторскаяЗадолженность.Итог("Сумма");
	Иначе
		СуммаДтЗадолженности = ДебиторскаяЗадолженность.Итог("СуммаВзаиморасчетов");
		СуммаКтЗадолженности = КредиторскаяЗадолженность.Итог("СуммаВзаиморасчетов");
	КонецЕсли;

	//++ЭЛИАС 20120706 Очистим лишние арендные реквизиты
	СтрокаСубконтоДт = СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Если СтрокаСубконтоДт <> Неопределено Тогда
		Для К = 1 По СчетДт.ВидыСубконто.Количество() Цикл
			Если СчетДт.ВидыСубконто[К-1] = СтрокаСубконтоДт Тогда
				ДоговорДт = ЭтотОбъект["СубконтоДт" + К];
				Если ЗначениеЗаполнено(ДоговорДт) Тогда
					ЭтоАрендаДт = ДоговорДт.АР_АрендныйДоговор И АР_КорректировкаДолгаПоАренде 
					И ((ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности) ИЛИ (ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее));
				Иначе
					ЭтоАрендаДт = Ложь;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
	Иначе
		ЭтоАрендаДт = Ложь;
	КонецЕсли;
	СтрокаСубконтоКт = СчетКт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Если СтрокаСубконтоКт <> Неопределено Тогда
		Для К = 1 По СчетКт.ВидыСубконто.Количество() Цикл
			Если СчетКт.ВидыСубконто[К-1] = СтрокаСубконтоКт Тогда
				ДоговорКт = ЭтотОбъект["СубконтоКт" + К];
				Если ЗначениеЗаполнено(ДоговорКт) Тогда
					ЭтоАрендаКт = ДоговорКт.АР_АрендныйДоговор И АР_КорректировкаДолгаПоАренде 
					И ((ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности) ИЛИ (ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее));
				Иначе
					ЭтоАрендаКт = Ложь;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
	Иначе
		ЭтоАрендаКт = Ложь;
	КонецЕсли;
	ВестиВзаиморасчетыПоСчетамДт = ЭтоАрендаДт И (ДоговорДт.АР_ВестиВзаиморасчетыПоСчетамПост ИЛИ ДоговорДт.АР_ВестиВзаиморасчетыПоСчетамПерем);		
	ВестиВзаиморасчетыПоСчетамКт = ЭтоАрендаКт И (ДоговорКт.АР_ВестиВзаиморасчетыПоСчетамПост ИЛИ ДоговорКт.АР_ВестиВзаиморасчетыПоСчетамПерем);		
	
	Если ЗначениеЗаполнено(АР_ОбъектАрендыДт) Тогда
		Если Не (ЭтоАрендаДт И ДоговорДт.АР_ВестиВзаиморасчетыПоОбъектам) Тогда
			АР_ОбъектАрендыДт = Справочники.АР_ОбъектыАренды.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(АР_ПериодАрендыДт) Тогда
		Если Не (ЭтоАрендаДт И ДоговорДт.АР_ВестиВзаиморасчетыПоПериодам) Тогда
			АР_ПериодАрендыДт = '00010101';
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(АР_СчетНаАрендуДт) Тогда
		Если Не (ЭтоАрендаДт И ВестиВзаиморасчетыПоСчетамДт) Тогда
			АР_СчетНаАрендуДт = Документы.АР_СчетНаАренду.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(АР_УслугаАрендыДт) Тогда
		Если Не (ЭтоАрендаДт И ДоговорДт.АР_ВестиВзаиморасчетыПоУслугам) Тогда
			АР_УслугаАрендыДт = Справочники.Номенклатура.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	Если Не ЭтоАрендаДт И АР_ПениДт Тогда
		АР_ПениДт = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АР_ОбъектАрендыКт) Тогда
		Если Не (ЭтоАрендаКт И ДоговорКт.АР_ВестиВзаиморасчетыПоОбъектам) ИЛИ АР_ДепозитКт Тогда
			АР_ОбъектАрендыКт = Справочники.АР_ОбъектыАренды.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(АР_ПериодАрендыКт) ИЛИ АР_ДепозитКт Тогда
		Если Не (ЭтоАрендаКт И ДоговорКт.АР_ВестиВзаиморасчетыПоПериодам) Тогда
			АР_ПериодАрендыКт = '00010101';
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(АР_СчетНаАрендуКт) ИЛИ АР_ДепозитКт Тогда
		Если Не (ЭтоАрендаКт И ВестиВзаиморасчетыПоСчетамКт) Тогда
			АР_СчетНаАрендуКт = Документы.АР_СчетНаАренду.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(АР_УслугаАрендыКт) ИЛИ АР_ДепозитКт Тогда
		Если Не (ЭтоАрендаКт И ДоговорКт.АР_ВестиВзаиморасчетыПоУслугам) Тогда
			АР_УслугаАрендыКт = Справочники.Номенклатура.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	Если Не ЭтоАрендаКт И АР_ДепозитКт Тогда
		АР_ДепозитКт = Ложь;
	КонецЕсли;
	//--ЭЛИАС 20120706
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив();

	// Проверяем реквизиты шапки:
	Если НЕ ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее Тогда

		Если НЕ ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
		
			МассивНепроверяемыхРеквизитов.Добавить("СчетКт");
			МассивНепроверяемыхРеквизитов.Добавить("СчетДт");
			
		Иначе
			
			Если ДебиторскаяЗадолженность.Количество() > 0 Тогда
				МассивНепроверяемыхРеквизитов.Добавить("СчетКт");
			Иначе
				МассивНепроверяемыхРеквизитов.Добавить("СчетДт");
			КонецЕсли;	
		
			МассивНепроверяемыхРеквизитов.Добавить("КонтрагентКредитор");
			
		КонецЕсли;	

	Иначе
		
		Если ДебиторскаяЗадолженность.Количество() <> 0 
			и КредиторскаяЗадолженность.Количество() <> 0 
			и СуммаКтЗадолженности = СуммаДтЗадолженности Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("СчетДт");
			МассивНепроверяемыхРеквизитов.Добавить("СчетКт");
			
		ИначеЕсли (ДебиторскаяЗадолженность.Количество() <> 0 и КредиторскаяЗадолженность.Количество() = 0) 
			или (ДебиторскаяЗадолженность.Количество() = 0 и КредиторскаяЗадолженность.Количество() <> 0) Тогда
			
			Если ДебиторскаяЗадолженность.Количество() <> 0 и КредиторскаяЗадолженность.Количество() = 0 Тогда
				
				МассивНепроверяемыхРеквизитов.Добавить("СчетКт");
				МассивНепроверяемыхРеквизитов.Добавить("КонтрагентКредитор");
				
			ИначеЕсли ДебиторскаяЗадолженность.Количество() = 0 и КредиторскаяЗадолженность.Количество() <> 0 Тогда
				
				МассивНепроверяемыхРеквизитов.Добавить("СчетДт");
				МассивНепроверяемыхРеквизитов.Добавить("КонтрагентДебитор");
				
			КонецЕсли;	
			
		КонецЕсли; 	

	КонецЕсли;
	
	Если ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		ИтогДт = ДебиторскаяЗадолженность.Итог("Сумма");
		ИтогКт = КредиторскаяЗадолженность.Итог("Сумма");
	Иначе
		ИтогДт = ДебиторскаяЗадолженность.Итог("СуммаВзаиморасчетов");
		ИтогКт = КредиторскаяЗадолженность.Итог("СуммаВзаиморасчетов");
	КонецЕсли;
	Разница = ИтогДт - ИтогКт;
	// Проверяем корректность табличной части:
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетАвансов
		или ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетЗадолженности Тогда
		Если Разница <> 0  Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не совпадают суммы дебиторской и кредиторской задолженности при проведении взаимозачета.
				|Дебиторская задолженность: %1 %4, кредиторская задолженность: %2 %4, разница: %3 %4.
				|Взаимозачет не может быть проведен.'"),
				Формат(ИтогДт, "ЧЦ=15; ЧДЦ=2; ЧН=0,00"),
				Формат(ИтогКт, "ЧЦ=15; ЧДЦ=2; ЧН=0,00"),
				Формат(Разница, "ЧЦ=15; ЧДЦ=2; ЧН=0,00"),
				Строка(ВалютаДокумента));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , "Объект", Отказ);
			
		КонецЕсли;
			
	КонецЕсли;
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		Если ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.АвансыПоставщику 
			ИЛИ ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПокупателя Тогда
			МассивНепроверяемыхРеквизитов.Добавить("КредиторскаяЗадолженность.КорДоговорКонтрагента");
			МассивНепроверяемыхРеквизитов.Добавить("КредиторскаяЗадолженность.КорСчетУчетаРасчетов");
		Иначе
			МассивНепроверяемыхРеквизитов.Добавить("ДебиторскаяЗадолженность.КорДоговорКонтрагента");
			МассивНепроверяемыхРеквизитов.Добавить("ДебиторскаяЗадолженность.КорСчетУчетаРасчетов");
		КонецЕсли;
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("ДебиторскаяЗадолженность.КорДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("ДебиторскаяЗадолженность.КорСчетУчетаРасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("КредиторскаяЗадолженность.КорДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("КредиторскаяЗадолженность.КорСчетУчетаРасчетов");
	КонецЕсли;
	
	СтруктураРезультатовПроверки = ПолучитьСтруктуруРезультатовПроверки();
	
	ВыборкаОшибок = СтруктураРезультатовПроверки.СтрокиДокументаСОшибками;
	Пока ВыборкаОшибок.Следующий() Цикл
	
		ТекстСообщения = ВыборкаОшибок.ОписаниеОшибки;
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность",
			НСтр("ru = 'Счет учета'"), ВыборкаОшибок.НомерСтроки, ВыборкаОшибок.СинонимТабЧасти, ТекстСообщения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения, ЭтотОбъект, 
			ВыборкаОшибок.ИмяТабЧасти + "[" + Формат(ВыборкаОшибок.НомерСтроки - 1, "ЧДЦ=0; ЧГ=") + "].СчетУчетаРасчетов",
			"Объект", Отказ);
		
	КонецЦикла; 
	
	
	// Проверяем корректность табличной части:
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетАвансов
		или ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетЗадолженности 
		или (ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее и Разница = 0) Тогда
	
		Если СтруктураРезультатовПроверки.АвансыПоРазнымКурсам > 1 Тогда
			ТекстСообщения = НСтр("ru = 'Взаимозачет двух авансов, поступивших по разным курсам, не обслуживается.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, ,	"Объект", Отказ);
		КонецЕсли;
		
	КонецЕсли;	
	
	//++ЭЛИАС 20120705
	// ПРОВЕРКА ДОПОЛНИТЕЛЬНОЙ АНАЛИТИКИ ПО АРЕНДЕ
	Если АР_КорректировкаДолгаПоАренде Тогда
		ПроверитьСоответствиеСуммДополнительнойАналитики(Истина, Отказ);
		ПроверитьЧтоНетЛишнейАналитики(Истина, Ложь, Отказ);
		ПроверитьЧтоНетЛишнейАналитики(Истина, Истина, Отказ);
		ПроверитьСоответствиеСуммДополнительнойАналитики(Ложь, Отказ);
		ПроверитьЧтоНетЛишнейАналитики(Ложь, Ложь, Отказ);
		ПроверитьЧтоНетЛишнейАналитики(Ложь, Истина, Отказ);
		ПроверитьЗаполнениеДополнительнойАналитики(Истина, Отказ);
		ПроверитьЗаполнениеДополнительнойАналитики(Ложь, Отказ);
		ПроверитьЗаполнениеДокументовРасчета(Отказ);
	КонецЕсли; 
	//--ЭЛИАС 20120705
	//++ЭЛИАС 20130221  
	ИсключитьНеобязательнуюАналитикуПоСчетамУчета(МассивНепроверяемыхРеквизитов);
	//--ЭЛИАС 20130221	
	
	// Удаляем из проверяемых реквизитов все, по которым автоматическая проверка не нужна:
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПроведения = Документы.КорректировкаДолга.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	// Вид операции "Проведение взаимозачета".
	
	ТаблицаПроведениеВзаимозачетаДебиторскаяЗадолженность = 
		УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовПогашениеЗадолженности(
		ПараметрыПроведения.ТаблицаПроведениеВзаимозачетаДебиторскаяЗадолженность, 
		ПараметрыПроведения.РеквизитыПроведениеВзаимозачетаДебиторскаяЗадолженность, Отказ);

	ТаблицаПроведениеВзаимозачетаДебиторскаяЗадолженностьВозвратАванса = 
		УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовПогашениеЗадолженности(
		ПараметрыПроведения.ТаблицаПроведениеВзаимозачетаДебиторскаяЗадолженностьВозвратАванса, 
		ПараметрыПроведения.РеквизитыПроведениеВзаимозачетаДебиторскаяЗадолженностьВозвратАванса, Отказ);
	
	ТаблицаПроведениеВзаимозачетаКредиторскаяЗадолженность = 
		УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовПогашениеЗадолженности(
		ПараметрыПроведения.ТаблицаПроведениеВзаимозачетаКредиторскаяЗадолженность, 
		ПараметрыПроведения.РеквизитыПроведениеВзаимозачетаКредиторскаяЗадолженность, Отказ);

	ТаблицаПроведениеВзаимозачетаКредиторскаяЗадолженностьВозвратАванса = 
		УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовПогашениеЗадолженности(
		ПараметрыПроведения.ТаблицаПроведениеВзаимозачетаКредиторскаяЗадолженностьВозвратАванса, 
		ПараметрыПроведения.РеквизитыПроведениеВзаимозачетаКредиторскаяЗадолженностьВозвратАванса, Отказ);
		
	СтруктураТаблицВзаимозачета = УчетВзаиморасчетов.ПодготовитьСтруктуруТаблицВзаимозачета(
		ТаблицаПроведениеВзаимозачетаДебиторскаяЗадолженность, 
		ТаблицаПроведениеВзаимозачетаДебиторскаяЗадолженностьВозвратАванса, 
		ТаблицаПроведениеВзаимозачетаКредиторскаяЗадолженность, 
		ТаблицаПроведениеВзаимозачетаКредиторскаяЗадолженностьВозвратАванса, ПараметрыПроведения.Реквизиты, Отказ);
		
	СтруктураТаблицВзаимозачета = Документы.КорректировкаДолга.ПодготовитьСтруктуруДляСуммовыхРазниц(СтруктураТаблицВзаимозачета, Отказ);	
		
	ТаблицаВзаимозачетаДебиторскаяЗадолженность = СтруктураТаблицВзаимозачета.ТаблицаДебиторскаяЗадолженность;
	
	ТаблицаВзаимозачетаДебиторскаяЗадолженностьВозвратАванса = 
		СтруктураТаблицВзаимозачета.ТаблицаДебиторскаяЗадолженностьВозвратАванса;
		
	ТаблицаВзаимозачетаКредиторскаяЗадолженность = СтруктураТаблицВзаимозачета.ТаблицаКредиторскаяЗадолженность;
	
	ТаблицаВзаимозачетаКредиторскаяЗадолженностьВозвратАванса = 
		СтруктураТаблицВзаимозачета.ТаблицаКредиторскаяЗадолженностьВозвратАванса;
		
	ТаблицыВзаимозачетаСуммовыеРазницыДебиторскаяЗадолженность = 
		УчетНДС.ПодготовитьТаблицуСуммовыхРазниц(
		СтруктураТаблицВзаимозачета.ТаблицаДебиторскаяЗадолженностьСуммовыеРазницы, 
		ПараметрыПроведения.РеквизитыПроведениеВзаимозачетаДебиторскаяЗадолженность, Отказ);
		
	ТаблицыВзаимозачетаСуммовыеРазницыДебиторскаяЗадолженностьВозвратАванса = 
		УчетНДС.ПодготовитьТаблицуСуммовыхРазниц(
		СтруктураТаблицВзаимозачета.ТаблицаДебиторскаяЗадолженностьВозвратАвансаСуммовыеРазницы, 
		ПараметрыПроведения.РеквизитыПроведениеВзаимозачетаДебиторскаяЗадолженностьВозвратАванса, Отказ);
		
	ТаблицыВзаимозачетаСуммовыеРазницыКредиторскаяЗадолженность = 
		УчетНДС.ПодготовитьТаблицуСуммовыхРазниц(
		СтруктураТаблицВзаимозачета.ТаблицаКредиторскаяЗадолженностьСуммовыеРазницы, 
		ПараметрыПроведения.РеквизитыПроведениеВзаимозачетаКредиторскаяЗадолженность, Отказ);
		
	ТаблицыВзаимозачетаСуммовыеРазницыКредиторскаяЗадолженностьВозвратАванса = 
		УчетНДС.ПодготовитьТаблицуСуммовыхРазниц(
		СтруктураТаблицВзаимозачета.ТаблицаКредиторскаяЗадолженностьВозвратАвансаСуммовыеРазницы, 
		ПараметрыПроведения.РеквизитыПроведениеВзаимозачетаКредиторскаяЗадолженностьВозвратАванса, Отказ);
	
	ТаблицаНДСПоРеализациямНеплательщикаВзаимозачет = УчетУСН.ПодготовитьТаблицуНДСПоРеализацииНеплательщиком(
		ТаблицаПроведениеВзаимозачетаДебиторскаяЗадолженность,
		ПараметрыПроведения.РеквизитыПроведениеВзаимозачетаДебиторскаяЗадолженность);
	
	// Таблица списания прочих расчетов по зачитываемой дебиторской задолженности
	ТаблицаПрочихРасчетов = УчетВзаиморасчетов.ПодготовитьТаблицуПрочихРасчетовОплатаПокупателя(
		ТаблицаПроведениеВзаимозачетаДебиторскаяЗадолженность,
		ПараметрыПроведения.РеквизитыПроведениеВзаимозачетаДебиторскаяЗадолженность);
	
	// Структура таблиц для отражения в налоговом учете УСН
	СтруктураТаблицУСНВзаимозачет = Новый Структура;
	СтруктураТаблицУСНВзаимозачет.Вставить("АвансПоставщику", ТаблицаПроведениеВзаимозачетаДебиторскаяЗадолженностьВозвратАванса);
	СтруктураТаблицУСНВзаимозачет.Вставить("ДолгПокупателя", ТаблицаПроведениеВзаимозачетаДебиторскаяЗадолженность);
	СтруктураТаблицУСНВзаимозачет.Вставить("АвансПокупателя", ТаблицаПроведениеВзаимозачетаКредиторскаяЗадолженностьВозвратАванса);
	СтруктураТаблицУСНВзаимозачет.Вставить("ДолгПоставщику", ТаблицаПроведениеВзаимозачетаКредиторскаяЗадолженность);
	СтруктураТаблицУСНВзаимозачет.Вставить("ТаблицаНДСПродажи", ТаблицаНДСПоРеализациямНеплательщикаВзаимозачет);
		
	// Вид операции "Перенос задолженности".
	
	ТаблицаПереносЗадолженностиДебиторскаяЗадолженность = 
		УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовПогашениеЗадолженности(
		ПараметрыПроведения.ТаблицаПереносЗадолженностиДебиторскаяЗадолженность, 
		ПараметрыПроведения.РеквизитыПереносЗадолженностиДебиторскаяЗадолженность, Отказ, "КорректировкаДолга");

	ТаблицаПереносЗадолженностиДебиторскаяЗадолженностьВозвратАванса = 
		УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовПогашениеЗадолженности(
		ПараметрыПроведения.ТаблицаПереносЗадолженностиДебиторскаяЗадолженностьВозвратАванса, 
		ПараметрыПроведения.РеквизитыПереносЗадолженностиДебиторскаяЗадолженностьВозвратАванса, Отказ, "КорректировкаДолга");
	
	ТаблицаПереносЗадолженностиКредиторскаяЗадолженность = 
		УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовПогашениеЗадолженности(
		ПараметрыПроведения.ТаблицаПереносЗадолженностиКредиторскаяЗадолженность, 
		ПараметрыПроведения.РеквизитыПереносЗадолженностиКредиторскаяЗадолженность, Отказ, "КорректировкаДолга");

	ТаблицаПереносЗадолженностиКредиторскаяЗадолженностьВозвратАванса = 
		УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовПогашениеЗадолженности(
		ПараметрыПроведения.ТаблицаПереносЗадолженностиКредиторскаяЗадолженностьВозвратАванса, 
		ПараметрыПроведения.РеквизитыПереносЗадолженностиКредиторскаяЗадолженностьВозвратАванса, Отказ, "КорректировкаДолга");
		
	ТаблицаВзаиморасчетовПереносЗадолженностиДебиторскаяЗадолженность = 
		УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовПереносЗадолженности(
		ТаблицаПереносЗадолженностиДебиторскаяЗадолженность, 
		ПараметрыПроведения.РеквизитыПереносЗадолженностиДебиторскаяЗадолженность, Отказ);

	ТаблицаВзаиморасчетовПереносЗадолженностиДебиторскаяЗадолженностьВозвратАванса = 
		УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовПереносЗадолженности(
		ТаблицаПереносЗадолженностиДебиторскаяЗадолженностьВозвратАванса, 
		ПараметрыПроведения.РеквизитыПереносЗадолженностиДебиторскаяЗадолженностьВозвратАванса, Отказ);
	
	ТаблицаВзаиморасчетовПереносЗадолженностиКредиторскаяЗадолженность = 
		УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовПереносЗадолженности(
		ТаблицаПереносЗадолженностиКредиторскаяЗадолженность, 
		ПараметрыПроведения.РеквизитыПереносЗадолженностиКредиторскаяЗадолженность, Отказ);

	ТаблицаВзаиморасчетовПереносЗадолженностиКредиторскаяЗадолженностьВозвратАванса = 
		УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовПереносЗадолженности(
		ТаблицаПереносЗадолженностиКредиторскаяЗадолженностьВозвратАванса, 
		ПараметрыПроведения.РеквизитыПереносЗадолженностиКредиторскаяЗадолженностьВозвратАванса, Отказ);
		
	ТаблицыПереносЗадолженностиСуммовыеРазницыДебиторскаяЗадолженность = 
		УчетНДС.ПодготовитьТаблицуСуммовыхРазниц(
		ТаблицаВзаиморасчетовПереносЗадолженностиДебиторскаяЗадолженность, 
		ПараметрыПроведения.РеквизитыПереносЗадолженностиДебиторскаяЗадолженность, Отказ);
		
	ТаблицыПереносЗадолженностиСуммовыеРазницыДебиторскаяЗадолженностьВозвратАванса = 
		УчетНДС.ПодготовитьТаблицуСуммовыхРазниц(
		ТаблицаВзаиморасчетовПереносЗадолженностиДебиторскаяЗадолженностьВозвратАванса, 
		ПараметрыПроведения.РеквизитыПереносЗадолженностиДебиторскаяЗадолженностьВозвратАванса, Отказ);
		
	ТаблицыПереносЗадолженностиСуммовыеРазницыКредиторскаяЗадолженность = 
		УчетНДС.ПодготовитьТаблицуСуммовыхРазниц(
		ТаблицаВзаиморасчетовПереносЗадолженностиКредиторскаяЗадолженность, 
		ПараметрыПроведения.РеквизитыПереносЗадолженностиКредиторскаяЗадолженность, Отказ);
		
	ТаблицыПереносЗадолженностиСуммовыеРазницыКредиторскаяЗадолженностьВозвратАванса = 
		УчетНДС.ПодготовитьТаблицуСуммовыхРазниц(
		ТаблицаВзаиморасчетовПереносЗадолженностиКредиторскаяЗадолженностьВозвратАванса, 
		ПараметрыПроведения.РеквизитыПереносЗадолженностиКредиторскаяЗадолженностьВозвратАванса, Отказ);
	
	// Таблица списания прочих расчетов по переносимой дебиторской задолженности
	// Приход прочих расчетов не производится, т.к. связь с расчетным документом при переносе задолженности в БУ отрывается
	ТаблицаПрочихРасчетовПереносЗадолженности = УчетВзаиморасчетов.ПодготовитьТаблицуПрочихРасчетовОплатаПокупателя(
		ТаблицаПереносЗадолженностиДебиторскаяЗадолженность,
		ПараметрыПроведения.РеквизитыПереносЗадолженностиДебиторскаяЗадолженность);
		
	Если ЗначениеЗаполнено(ТаблицаПрочихРасчетовПереносЗадолженности) Тогда
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(
			ТаблицаПрочихРасчетовПереносЗадолженности, ТаблицаПрочихРасчетов);
	КонецЕсли;
	
	// Структура таблиц для отражения в налоговом учете УСН
	СтруктураТаблицУСНПереносЗадолженности = Новый Структура;
	СтруктураТаблицУСНПереносЗадолженности.Вставить("АвансПоставщику", ТаблицаПереносЗадолженностиДебиторскаяЗадолженностьВозвратАванса);
	СтруктураТаблицУСНПереносЗадолженности.Вставить("ДолгПокупателя", ТаблицаПереносЗадолженностиДебиторскаяЗадолженность);
	СтруктураТаблицУСНПереносЗадолженности.Вставить("АвансПокупателя", ТаблицаПереносЗадолженностиКредиторскаяЗадолженностьВозвратАванса);
	СтруктураТаблицУСНПереносЗадолженности.Вставить("ДолгПоставщику", ТаблицаПереносЗадолженностиКредиторскаяЗадолженность);
		
	// Вид операции "Списание задолженности".
	
	ТаблицаСписаниеЗадолженностиДебиторскаяЗадолженность = 
		УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовСписаниеЗадолженности(
		ПараметрыПроведения.ТаблицаСписаниеЗадолженностиДебиторскаяЗадолженность, 
		ПараметрыПроведения.РеквизитыСписаниеЗадолженностиДебиторскаяЗадолженность, Отказ);

	ТаблицаСписаниеЗадолженностиДебиторскаяЗадолженностьВозвратАванса = 
		УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовСписаниеЗадолженности(
		ПараметрыПроведения.ТаблицаСписаниеЗадолженностиДебиторскаяЗадолженностьВозвратАванса, 
		ПараметрыПроведения.РеквизитыСписаниеЗадолженностиДебиторскаяЗадолженностьВозвратАванса, Отказ);
	
	ТаблицаСписаниеЗадолженностиКредиторскаяЗадолженность = 
		УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовСписаниеЗадолженности(
		ПараметрыПроведения.ТаблицаСписаниеЗадолженностиКредиторскаяЗадолженность, 
		ПараметрыПроведения.РеквизитыСписаниеЗадолженностиКредиторскаяЗадолженность, Отказ);

	ТаблицаСписаниеЗадолженностиКредиторскаяЗадолженностьВозвратАванса = 
		УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовСписаниеЗадолженности(
		ПараметрыПроведения.ТаблицаСписаниеЗадолженностиКредиторскаяЗадолженностьВозвратАванса, 
		ПараметрыПроведения.РеквизитыСписаниеЗадолженностиКредиторскаяЗадолженностьВозвратАванса, Отказ);
		
	ТаблицыСписаниеЗадолженностиСуммовыеРазницыДебиторскаяЗадолженность = 
		УчетНДС.ПодготовитьТаблицуСуммовыхРазниц(ТаблицаСписаниеЗадолженностиДебиторскаяЗадолженность, 
		ПараметрыПроведения.РеквизитыСписаниеЗадолженностиДебиторскаяЗадолженность, Отказ);
		
	ТаблицыСписаниеЗадолженностиСуммовыеРазницыДебиторскаяЗадолженностьВозвратАванса = 
		УчетНДС.ПодготовитьТаблицуСуммовыхРазниц(ТаблицаСписаниеЗадолженностиДебиторскаяЗадолженностьВозвратАванса, 
		ПараметрыПроведения.РеквизитыСписаниеЗадолженностиДебиторскаяЗадолженностьВозвратАванса, Отказ);
		
	ТаблицыСписаниеЗадолженностиСуммовыеРазницыКредиторскаяЗадолженность = 
		УчетНДС.ПодготовитьТаблицуСуммовыхРазниц(ТаблицаСписаниеЗадолженностиКредиторскаяЗадолженность, 
		ПараметрыПроведения.РеквизитыСписаниеЗадолженностиКредиторскаяЗадолженность, Отказ);
		
	ТаблицыСписаниеЗадолженностиСуммовыеРазницыКредиторскаяЗадолженностьВозвратАванса = 
		УчетНДС.ПодготовитьТаблицуСуммовыхРазниц(ТаблицаСписаниеЗадолженностиКредиторскаяЗадолженностьВозвратАванса, 
		ПараметрыПроведения.РеквизитыСписаниеЗадолженностиКредиторскаяЗадолженностьВозвратАванса, Отказ);
	
	// Таблица списания прочих расчетов по списываемой дебиторской задолженности
	ТаблицаПрочихРасчетовСписаниеЗадолженности = УчетВзаиморасчетов.ПодготовитьТаблицуПрочихРасчетовОплатаПокупателя(
		ТаблицаСписаниеЗадолженностиДебиторскаяЗадолженность,
		ПараметрыПроведения.РеквизитыСписаниеЗадолженностиДебиторскаяЗадолженность);
		
	Если ЗначениеЗаполнено(ТаблицаПрочихРасчетовСписаниеЗадолженности) Тогда
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(
			ТаблицаПрочихРасчетовСписаниеЗадолженности, ТаблицаПрочихРасчетов);
	КонецЕсли;
		
	// Структура таблиц для отражения в налоговом учете УСН
	СтруктураТаблицУСНСписаниеЗадолженности = Новый Структура;
	СтруктураТаблицУСНСписаниеЗадолженности.Вставить("АвансПоставщику", ТаблицаСписаниеЗадолженностиДебиторскаяЗадолженностьВозвратАванса);
	СтруктураТаблицУСНСписаниеЗадолженности.Вставить("ДолгПокупателя", ТаблицаСписаниеЗадолженностиДебиторскаяЗадолженность);
	СтруктураТаблицУСНСписаниеЗадолженности.Вставить("АвансПокупателя", ТаблицаСписаниеЗадолженностиКредиторскаяЗадолженностьВозвратАванса);
	СтруктураТаблицУСНСписаниеЗадолженности.Вставить("ДолгПоставщику", ТаблицаСписаниеЗадолженностиКредиторскаяЗадолженность);
	
	// Учет доходов и расходов ИП
	СписокОплатДебиторскаяЗадолженностьИП	= УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуОплатыПокупателя(
		ТаблицаПроведениеВзаимозачетаДебиторскаяЗадолженность,
		ПараметрыПроведения.РеквизитыПроведениеВзаимозачетаДебиторскаяЗадолженностьИП);

	ТаблицыКредиторскаяЗадолженностьИП	= УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыОплатыПоставщику(
		ТаблицаПроведениеВзаимозачетаКредиторскаяЗадолженность,
		ПараметрыПроведения.РеквизитыПроведениеВзаимозачетаКредиторскаяЗадолженностьИП);
		
	ТаблицаОплатыОСиНМА = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуОплатыОСиНМА(
		ТаблицыКредиторскаяЗадолженностьИП, 
		ПараметрыПроведения.РеквизитыПроведениеВзаимозачетаКредиторскаяЗадолженностьИП);
	
	ТаблицаСписанияЗадолженностиПредпринимателюИП	= УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуСписанияЗадолженностиПредпринимателю(
		ТаблицаСписаниеЗадолженностиДебиторскаяЗадолженность, ПараметрыПроведения.РеквизитыПроведениеВзаимозачетаДебиторскаяЗадолженностьИП);
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ

	// Вид операции "Проведение взаимозачета".
	
	УчетВзаиморасчетов.СформироватьДвиженияВзаимозачет(
		ТаблицаВзаимозачетаДебиторскаяЗадолженность,
		ПараметрыПроведения.РеквизитыПроведениеВзаимозачетаДебиторскаяЗадолженность, Движения, Отказ);
		
	УчетВзаиморасчетов.СформироватьДвиженияВзаимозачет(
		ТаблицаВзаимозачетаДебиторскаяЗадолженностьВозвратАванса,
		ПараметрыПроведения.РеквизитыПроведениеВзаимозачетаДебиторскаяЗадолженностьВозвратАванса, Движения, Отказ);
		
	УчетВзаиморасчетов.СформироватьДвиженияВзаимозачет(
		ТаблицаВзаимозачетаКредиторскаяЗадолженность,
		ПараметрыПроведения.РеквизитыПроведениеВзаимозачетаКредиторскаяЗадолженность, Движения, Отказ);
		
	УчетВзаиморасчетов.СформироватьДвиженияВзаимозачет(
		ТаблицаВзаимозачетаКредиторскаяЗадолженностьВозвратАванса,
		ПараметрыПроведения.РеквизитыПроведениеВзаимозачетаКредиторскаяЗадолженностьВозвратАванса, Движения, Отказ);
		
	УчетДоходовРасходов.СформироватьДвиженияСуммовыеРазницыРасчетыВУЕ(
		ТаблицыВзаимозачетаСуммовыеРазницыДебиторскаяЗадолженность,
		ПараметрыПроведения.РеквизитыПроведениеВзаимозачетаДебиторскаяЗадолженность, Движения, Отказ);
		
	УчетДоходовРасходов.СформироватьДвиженияСуммовыеРазницыРасчетыВУЕ(
		ТаблицыВзаимозачетаСуммовыеРазницыДебиторскаяЗадолженностьВозвратАванса,
		ПараметрыПроведения.РеквизитыПроведениеВзаимозачетаДебиторскаяЗадолженностьВозвратАванса, Движения, Отказ);
		
	УчетДоходовРасходов.СформироватьДвиженияСуммовыеРазницыРасчетыВУЕ(
		ТаблицыВзаимозачетаСуммовыеРазницыКредиторскаяЗадолженность,
		ПараметрыПроведения.РеквизитыПроведениеВзаимозачетаКредиторскаяЗадолженность, Движения, Отказ);
			
	УчетДоходовРасходов.СформироватьДвиженияСуммовыеРазницыРасчетыВУЕ(
		ТаблицыВзаимозачетаСуммовыеРазницыКредиторскаяЗадолженностьВозвратАванса,
		ПараметрыПроведения.РеквизитыПроведениеВзаимозачетаКредиторскаяЗадолженностьВозвратАванса, Движения, Отказ);
			
	//	НДС курсовые разницы
		
	УчетНДС.СформироватьДвиженияКурсовыеРазницы(
		ПараметрыПроведения.РеквизитыПроведениеВзаимозачетаДебиторскаяЗадолженность, ТаблицаВзаимозачетаДебиторскаяЗадолженность, Движения, Отказ);
		
	УчетНДС.СформироватьДвиженияКурсовыеРазницы(
		ПараметрыПроведения.РеквизитыПроведениеВзаимозачетаДебиторскаяЗадолженность, ТаблицаВзаимозачетаДебиторскаяЗадолженностьВозвратАванса, Движения, Отказ);
		
	УчетНДС.СформироватьДвиженияКурсовыеРазницы(
		ПараметрыПроведения.РеквизитыПроведениеВзаимозачетаДебиторскаяЗадолженность, ТаблицаВзаимозачетаКредиторскаяЗадолженность, Движения, Отказ);
		
	УчетНДС.СформироватьДвиженияКурсовыеРазницы(
		ПараметрыПроведения.РеквизитыПроведениеВзаимозачетаДебиторскаяЗадолженность, ТаблицаВзаимозачетаКредиторскаяЗадолженностьВозвратАванса, Движения, Отказ);	
		
	// НДС курсовые разницы налоговый агент		
		
	УчетНДС.СформироватьДвиженияКурсовыеРазницыНалоговыйАгент(
		ПараметрыПроведения.РеквизитыПроведениеВзаимозачетаДебиторскаяЗадолженность, ТаблицаВзаимозачетаДебиторскаяЗадолженность, Движения, Отказ);
	УчетНДСРаздельный.СформироватьДвиженияКурсовыеРазницыНалоговыйАгент(
		ПараметрыПроведения.РеквизитыПроведениеВзаимозачетаДебиторскаяЗадолженность, ТаблицаВзаимозачетаДебиторскаяЗадолженность, Движения, Отказ);
	
	УчетНДС.СформироватьДвиженияКурсовыеРазницыНалоговыйАгент(
		ПараметрыПроведения.РеквизитыПроведениеВзаимозачетаДебиторскаяЗадолженность, ТаблицаВзаимозачетаДебиторскаяЗадолженностьВозвратАванса, Движения, Отказ);
	УчетНДСРаздельный.СформироватьДвиженияКурсовыеРазницыНалоговыйАгент(
		ПараметрыПроведения.РеквизитыПроведениеВзаимозачетаДебиторскаяЗадолженность, ТаблицаВзаимозачетаДебиторскаяЗадолженностьВозвратАванса, Движения, Отказ);
		
	УчетНДС.СформироватьДвиженияКурсовыеРазницыНалоговыйАгент(
		ПараметрыПроведения.РеквизитыПроведениеВзаимозачетаДебиторскаяЗадолженность, ТаблицаВзаимозачетаКредиторскаяЗадолженность, Движения, Отказ);
	УчетНДСРаздельный.СформироватьДвиженияКурсовыеРазницыНалоговыйАгент(
		ПараметрыПроведения.РеквизитыПроведениеВзаимозачетаДебиторскаяЗадолженность, ТаблицаВзаимозачетаКредиторскаяЗадолженность, Движения, Отказ);
		
	УчетНДС.СформироватьДвиженияКурсовыеРазницыНалоговыйАгент(
		ПараметрыПроведения.РеквизитыПроведениеВзаимозачетаДебиторскаяЗадолженность, ТаблицаВзаимозачетаКредиторскаяЗадолженностьВозвратАванса, Движения, Отказ);	
	УчетНДСРаздельный.СформироватьДвиженияКурсовыеРазницыНалоговыйАгент(
		ПараметрыПроведения.РеквизитыПроведениеВзаимозачетаДебиторскаяЗадолженность, ТаблицаВзаимозачетаКредиторскаяЗадолженностьВозвратАванса, Движения, Отказ);	
		
	//	НДС суммовые разницы	
		
	УчетНДС.СформироватьДвиженияСуммовыеРазницы(
		ТаблицыВзаимозачетаСуммовыеРазницыДебиторскаяЗадолженность, 
		ПараметрыПроведения.РеквизитыПроведениеВзаимозачетаДебиторскаяЗадолженность, Движения, Отказ);		
		
	УчетНДС.СформироватьДвиженияСуммовыеРазницы(
		ТаблицыВзаимозачетаСуммовыеРазницыДебиторскаяЗадолженностьВозвратАванса, 
		ПараметрыПроведения.РеквизитыПроведениеВзаимозачетаДебиторскаяЗадолженностьВозвратАванса, Движения, Отказ);	
		
	УчетНДС.СформироватьДвиженияСуммовыеРазницы(
		ТаблицыВзаимозачетаСуммовыеРазницыКредиторскаяЗадолженность, 
		ПараметрыПроведения.РеквизитыПроведениеВзаимозачетаКредиторскаяЗадолженность, Движения, Отказ);	
		
	УчетНДС.СформироватьДвиженияСуммовыеРазницы(
		ТаблицыВзаимозачетаСуммовыеРазницыКредиторскаяЗадолженностьВозвратАванса, 
		ПараметрыПроведения.РеквизитыПроведениеВзаимозачетаКредиторскаяЗадолженностьВозвратАванса, Движения, Отказ);	
		
	// УСН
		
	НалоговыйУчетУСН.СформироватьДвиженияУСН(ЭтотОбъект, СтруктураТаблицУСНВзаимозачет);
		
		
	// Вид операции "Перенос задолженности".
	
	УчетВзаиморасчетов.СформироватьДвиженияПереносЗадолженности(
		ТаблицаВзаиморасчетовПереносЗадолженностиДебиторскаяЗадолженность,
		ПараметрыПроведения.РеквизитыПереносЗадолженностиДебиторскаяЗадолженность, Движения, Отказ);
		
	УчетВзаиморасчетов.СформироватьДвиженияПереносЗадолженности(
		ТаблицаВзаиморасчетовПереносЗадолженностиДебиторскаяЗадолженностьВозвратАванса,
		ПараметрыПроведения.РеквизитыПереносЗадолженностиДебиторскаяЗадолженностьВозвратАванса, Движения, Отказ);
		
	УчетВзаиморасчетов.СформироватьДвиженияПереносЗадолженности(
		ТаблицаВзаиморасчетовПереносЗадолженностиКредиторскаяЗадолженность,
		ПараметрыПроведения.РеквизитыПереносЗадолженностиКредиторскаяЗадолженность, Движения, Отказ);
		
	УчетВзаиморасчетов.СформироватьДвиженияПереносЗадолженности(
		ТаблицаВзаиморасчетовПереносЗадолженностиКредиторскаяЗадолженностьВозвратАванса,
		ПараметрыПроведения.РеквизитыПереносЗадолженностиКредиторскаяЗадолженностьВозвратАванса, Движения, Отказ);
		
		
	УчетДоходовРасходов.СформироватьДвиженияСуммовыеРазницыРасчетыВУЕ(
		ТаблицыПереносЗадолженностиСуммовыеРазницыДебиторскаяЗадолженность,
		ПараметрыПроведения.РеквизитыПереносЗадолженностиДебиторскаяЗадолженность, Движения, Отказ);
		
	УчетДоходовРасходов.СформироватьДвиженияСуммовыеРазницыРасчетыВУЕ(
		ТаблицыПереносЗадолженностиСуммовыеРазницыДебиторскаяЗадолженностьВозвратАванса,
		ПараметрыПроведения.РеквизитыПереносЗадолженностиДебиторскаяЗадолженностьВозвратАванса, Движения, Отказ);
	
	УчетДоходовРасходов.СформироватьДвиженияСуммовыеРазницыРасчетыВУЕ(
		ТаблицыПереносЗадолженностиСуммовыеРазницыКредиторскаяЗадолженность,
		ПараметрыПроведения.РеквизитыПереносЗадолженностиКредиторскаяЗадолженность, Движения, Отказ);
		
	УчетДоходовРасходов.СформироватьДвиженияСуммовыеРазницыРасчетыВУЕ(
		ТаблицыПереносЗадолженностиСуммовыеРазницыКредиторскаяЗадолженностьВозвратАванса,
		ПараметрыПроведения.РеквизитыПереносЗадолженностиКредиторскаяЗадолженностьВозвратАванса, Движения, Отказ);
	
		
	//	НДС курсовые разницы
		
	УчетНДС.СформироватьДвиженияКурсовыеРазницы(
		ПараметрыПроведения.РеквизитыПереносЗадолженностиДебиторскаяЗадолженность, ТаблицаВзаиморасчетовПереносЗадолженностиДебиторскаяЗадолженность, Движения, Отказ);
					
	УчетНДС.СформироватьДвиженияКурсовыеРазницы(
		ПараметрыПроведения.РеквизитыПереносЗадолженностиДебиторскаяЗадолженностьВозвратАванса, ТаблицаВзаиморасчетовПереносЗадолженностиДебиторскаяЗадолженностьВозвратАванса, Движения, Отказ);
		
	УчетНДС.СформироватьДвиженияКурсовыеРазницы(
		ПараметрыПроведения.РеквизитыПереносЗадолженностиКредиторскаяЗадолженность, ТаблицаВзаиморасчетовПереносЗадолженностиКредиторскаяЗадолженность, Движения, Отказ);
		
	УчетНДС.СформироватьДвиженияКурсовыеРазницы(
		ПараметрыПроведения.РеквизитыПереносЗадолженностиКредиторскаяЗадолженностьВозвратАванса, ТаблицаВзаиморасчетовПереносЗадолженностиКредиторскаяЗадолженностьВозвратАванса, Движения, Отказ);	
		
	// НДС курсовые разницы налоговый агент			
	
	УчетНДС.СформироватьДвиженияКурсовыеРазницыНалоговыйАгент(
		ПараметрыПроведения.РеквизитыПереносЗадолженностиДебиторскаяЗадолженность, ТаблицаВзаиморасчетовПереносЗадолженностиДебиторскаяЗадолженность, Движения, Отказ);
	УчетНДСРаздельный.СформироватьДвиженияКурсовыеРазницыНалоговыйАгент(
		ПараметрыПроведения.РеквизитыПереносЗадолженностиДебиторскаяЗадолженность, ТаблицаВзаиморасчетовПереносЗадолженностиДебиторскаяЗадолженность, Движения, Отказ);
		
	УчетНДС.СформироватьДвиженияКурсовыеРазницыНалоговыйАгент(
		ПараметрыПроведения.РеквизитыПереносЗадолженностиДебиторскаяЗадолженностьВозвратАванса, ТаблицаВзаиморасчетовПереносЗадолженностиДебиторскаяЗадолженностьВозвратАванса, Движения, Отказ);
	УчетНДСРаздельный.СформироватьДвиженияКурсовыеРазницыНалоговыйАгент(
		ПараметрыПроведения.РеквизитыПереносЗадолженностиДебиторскаяЗадолженностьВозвратАванса, ТаблицаВзаиморасчетовПереносЗадолженностиДебиторскаяЗадолженностьВозвратАванса, Движения, Отказ);
		
	УчетНДС.СформироватьДвиженияКурсовыеРазницыНалоговыйАгент(
		ПараметрыПроведения.РеквизитыПереносЗадолженностиКредиторскаяЗадолженность, ТаблицаВзаиморасчетовПереносЗадолженностиКредиторскаяЗадолженность, Движения, Отказ);
	УчетНДСРаздельный.СформироватьДвиженияКурсовыеРазницыНалоговыйАгент(
		ПараметрыПроведения.РеквизитыПереносЗадолженностиКредиторскаяЗадолженность, ТаблицаВзаиморасчетовПереносЗадолженностиКредиторскаяЗадолженность, Движения, Отказ);
		
	УчетНДС.СформироватьДвиженияКурсовыеРазницыНалоговыйАгент(
		ПараметрыПроведения.РеквизитыПереносЗадолженностиКредиторскаяЗадолженностьВозвратАванса, ТаблицаВзаиморасчетовПереносЗадолженностиКредиторскаяЗадолженностьВозвратАванса, Движения, Отказ);
	УчетНДСРаздельный.СформироватьДвиженияКурсовыеРазницыНалоговыйАгент(
		ПараметрыПроведения.РеквизитыПереносЗадолженностиКредиторскаяЗадолженностьВозвратАванса, ТаблицаВзаиморасчетовПереносЗадолженностиКредиторскаяЗадолженностьВозвратАванса, Движения, Отказ);
	
	// НДС суммовые разницы	
		
	УчетНДС.СформироватьДвиженияСуммовыеРазницы(
		ТаблицыПереносЗадолженностиСуммовыеРазницыДебиторскаяЗадолженность, 
		ПараметрыПроведения.РеквизитыПереносЗадолженностиДебиторскаяЗадолженность, Движения, Отказ);	
		
	УчетНДС.СформироватьДвиженияСуммовыеРазницы(
		ТаблицыПереносЗадолженностиСуммовыеРазницыДебиторскаяЗадолженностьВозвратАванса, 
		ПараметрыПроведения.РеквизитыПереносЗадолженностиДебиторскаяЗадолженностьВозвратАванса, Движения, Отказ);	
		
	УчетНДС.СформироватьДвиженияСуммовыеРазницы(
		ТаблицыПереносЗадолженностиСуммовыеРазницыКредиторскаяЗадолженность, 
		ПараметрыПроведения.РеквизитыПереносЗадолженностиКредиторскаяЗадолженность, Движения, Отказ);	
		           		
	УчетНДС.СформироватьДвиженияСуммовыеРазницы(
		ТаблицыПереносЗадолженностиСуммовыеРазницыКредиторскаяЗадолженностьВозвратАванса, 
		ПараметрыПроведения.РеквизитыПереносЗадолженностиКредиторскаяЗадолженностьВозвратАванса, Движения, Отказ);	
		
	// УСН
		
	НалоговыйУчетУСН.СформироватьДвиженияУСН(ЭтотОбъект, СтруктураТаблицУСНПереносЗадолженности);
		
		
	// Вид операции "Списание задолженности".
	
	УчетВзаиморасчетов.СформироватьДвиженияСписаниеЗадолженности(
		ТаблицаСписаниеЗадолженностиДебиторскаяЗадолженность,
		ПараметрыПроведения.РеквизитыСписаниеЗадолженностиДебиторскаяЗадолженность, Движения, Отказ);
		
	УчетВзаиморасчетов.СформироватьДвиженияСписаниеЗадолженности(
		ТаблицаСписаниеЗадолженностиДебиторскаяЗадолженностьВозвратАванса,
		ПараметрыПроведения.РеквизитыСписаниеЗадолженностиДебиторскаяЗадолженностьВозвратАванса, Движения, Отказ);
	
	УчетВзаиморасчетов.СформироватьДвиженияСписаниеЗадолженности(
		ТаблицаСписаниеЗадолженностиКредиторскаяЗадолженность,
		ПараметрыПроведения.РеквизитыСписаниеЗадолженностиКредиторскаяЗадолженность, Движения, Отказ);
		
	УчетВзаиморасчетов.СформироватьДвиженияСписаниеЗадолженности(
		ТаблицаСписаниеЗадолженностиКредиторскаяЗадолженностьВозвратАванса,
		ПараметрыПроведения.РеквизитыСписаниеЗадолженностиКредиторскаяЗадолженностьВозвратАванса, Движения, Отказ);
		
		
	УчетДоходовРасходов.СформироватьДвиженияСуммовыеРазницыРасчетыВУЕ(
		ТаблицыСписаниеЗадолженностиСуммовыеРазницыДебиторскаяЗадолженность,
		ПараметрыПроведения.РеквизитыСписаниеЗадолженностиДебиторскаяЗадолженность, Движения, Отказ);

	УчетДоходовРасходов.СформироватьДвиженияСуммовыеРазницыРасчетыВУЕ(
		ТаблицыСписаниеЗадолженностиСуммовыеРазницыДебиторскаяЗадолженностьВозвратАванса,
		ПараметрыПроведения.РеквизитыСписаниеЗадолженностиДебиторскаяЗадолженностьВозвратАванса, Движения, Отказ);
	
	УчетДоходовРасходов.СформироватьДвиженияСуммовыеРазницыРасчетыВУЕ(
		ТаблицыСписаниеЗадолженностиСуммовыеРазницыКредиторскаяЗадолженность,
		ПараметрыПроведения.РеквизитыСписаниеЗадолженностиКредиторскаяЗадолженность, Движения, Отказ);
		
	УчетДоходовРасходов.СформироватьДвиженияСуммовыеРазницыРасчетыВУЕ(
		ТаблицыСписаниеЗадолженностиСуммовыеРазницыКредиторскаяЗадолженностьВозвратАванса,
		ПараметрыПроведения.РеквизитыСписаниеЗадолженностиКредиторскаяЗадолженностьВозвратАванса, Движения, Отказ);
	
		
	// НДС курсовые разницы	
		
	УчетНДС.СформироватьДвиженияКурсовыеРазницы(
		ПараметрыПроведения.РеквизитыСписаниеЗадолженностиДебиторскаяЗадолженность, ТаблицаСписаниеЗадолженностиДебиторскаяЗадолженность, Движения, Отказ);
					
	УчетНДС.СформироватьДвиженияКурсовыеРазницы(
		ПараметрыПроведения.РеквизитыСписаниеЗадолженностиДебиторскаяЗадолженностьВозвратАванса, ТаблицаСписаниеЗадолженностиДебиторскаяЗадолженностьВозвратАванса, Движения, Отказ);
		
	УчетНДС.СформироватьДвиженияКурсовыеРазницы(
		ПараметрыПроведения.РеквизитыСписаниеЗадолженностиКредиторскаяЗадолженность, ТаблицаСписаниеЗадолженностиКредиторскаяЗадолженность, Движения, Отказ);
		
	УчетНДС.СформироватьДвиженияКурсовыеРазницы(
		ПараметрыПроведения.РеквизитыСписаниеЗадолженностиКредиторскаяЗадолженностьВозвратАванса, ТаблицаСписаниеЗадолженностиКредиторскаяЗадолженностьВозвратАванса, Движения, Отказ);	
		
	// НДС курсовые разницы налоговый агент
		
	УчетНДС.СформироватьДвиженияКурсовыеРазницыНалоговыйАгент(
		ПараметрыПроведения.РеквизитыСписаниеЗадолженностиДебиторскаяЗадолженность, ТаблицаСписаниеЗадолженностиДебиторскаяЗадолженность, Движения, Отказ);
	УчетНДСРаздельный.СформироватьДвиженияКурсовыеРазницыНалоговыйАгент(
		ПараметрыПроведения.РеквизитыСписаниеЗадолженностиДебиторскаяЗадолженность, ТаблицаСписаниеЗадолженностиДебиторскаяЗадолженность, Движения, Отказ);
		
	УчетНДС.СформироватьДвиженияКурсовыеРазницыНалоговыйАгент(
		ПараметрыПроведения.РеквизитыСписаниеЗадолженностиДебиторскаяЗадолженностьВозвратАванса, ТаблицаСписаниеЗадолженностиДебиторскаяЗадолженностьВозвратАванса, Движения, Отказ);
	УчетНДСРаздельный.СформироватьДвиженияКурсовыеРазницыНалоговыйАгент(
		ПараметрыПроведения.РеквизитыСписаниеЗадолженностиДебиторскаяЗадолженностьВозвратАванса, ТаблицаСписаниеЗадолженностиДебиторскаяЗадолженностьВозвратАванса, Движения, Отказ);
		
	УчетНДС.СформироватьДвиженияКурсовыеРазницыНалоговыйАгент(
		ПараметрыПроведения.РеквизитыСписаниеЗадолженностиКредиторскаяЗадолженность, ТаблицаСписаниеЗадолженностиКредиторскаяЗадолженность, Движения, Отказ);
	УчетНДСРаздельный.СформироватьДвиженияКурсовыеРазницыНалоговыйАгент(
		ПараметрыПроведения.РеквизитыСписаниеЗадолженностиКредиторскаяЗадолженность, ТаблицаСписаниеЗадолженностиКредиторскаяЗадолженность, Движения, Отказ);
		
	УчетНДС.СформироватьДвиженияКурсовыеРазницыНалоговыйАгент(
		ПараметрыПроведения.РеквизитыСписаниеЗадолженностиКредиторскаяЗадолженностьВозвратАванса, ТаблицаСписаниеЗадолженностиКредиторскаяЗадолженностьВозвратАванса, Движения, Отказ);	
	УчетНДСРаздельный.СформироватьДвиженияКурсовыеРазницыНалоговыйАгент(
		ПараметрыПроведения.РеквизитыСписаниеЗадолженностиКредиторскаяЗадолженностьВозвратАванса, ТаблицаСписаниеЗадолженностиКредиторскаяЗадолженностьВозвратАванса, Движения, Отказ);	
			
	// НДС суммовые разницы
		
	УчетНДС.СформироватьДвиженияСуммовыеРазницы(
		ТаблицыСписаниеЗадолженностиСуммовыеРазницыДебиторскаяЗадолженность, 
		ПараметрыПроведения.РеквизитыСписаниеЗадолженностиДебиторскаяЗадолженность, Движения, Отказ);	
			
	УчетНДС.СформироватьДвиженияСуммовыеРазницы(
		ТаблицыСписаниеЗадолженностиСуммовыеРазницыДебиторскаяЗадолженностьВозвратАванса, 
		ПараметрыПроведения.РеквизитыСписаниеЗадолженностиДебиторскаяЗадолженностьВозвратАванса, Движения, Отказ);	
			
	УчетНДС.СформироватьДвиженияСуммовыеРазницы(
		ТаблицыСписаниеЗадолженностиСуммовыеРазницыКредиторскаяЗадолженность, 
		ПараметрыПроведения.РеквизитыСписаниеЗадолженностиКредиторскаяЗадолженность, Движения, Отказ);	
			
	УчетНДС.СформироватьДвиженияСуммовыеРазницы(
		ТаблицыСписаниеЗадолженностиСуммовыеРазницыКредиторскаяЗадолженностьВозвратАванса, 
		ПараметрыПроведения.РеквизитыСписаниеЗадолженностиКредиторскаяЗадолженностьВозвратАванса, Движения, Отказ);	
		
	// УСН
		
	НалоговыйУчетУСН.СформироватьДвиженияУСН(ЭтотОбъект, СтруктураТаблицУСНСписаниеЗадолженности);
	
	// Списание остатков регистра "Прочие расчеты"
	УчетВзаиморасчетов.СформироватьДвиженияПоПрочимРасчетам(ТаблицаПрочихРасчетов, Движения, Отказ);
	
	// Учет доходов и расходов ИП
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияОплатаПокупателя(
		СписокОплатДебиторскаяЗадолженностьИП,
		ПараметрыПроведения.РеквизитыПроведениеВзаимозачетаДебиторскаяЗадолженность, Движения, Отказ);
		
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияОплатаПоставщику(
		ТаблицыКредиторскаяЗадолженностьИП,
		ПараметрыПроведения.РеквизитыПроведениеВзаимозачетаКредиторскаяЗадолженность, Движения, Отказ);
		
	УчетДоходовИРасходовПредпринимателя.СформироватьДвижениеСписаниеЗадолженностиПредпринимателю(
		ТаблицаСписанияЗадолженностиПредпринимателюИП,
		ПараметрыПроведения.РеквизитыПроведениеВзаимозачетаКредиторскаяЗадолженность, Движения, Отказ);
		
	УчетДоходовИРасходовПредпринимателя.РегистрацияСведенийОбОплатеОСиНМА(
		ТаблицаОплатыОСиНМА, ПараметрыПроведения.РеквизитыПроведениеВзаимозачетаКредиторскаяЗадолженность, Движения, Отказ);
		
	// ПЕРЕОЦЕНКА ВАЛЮТНЫХ ОСТАТКОВ

	ТаблицаПереоценка = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкиДвиженийДокумента(
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетУСН.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	//++ЭЛИАС 20120705 Движения по взаиморасчетам по аренде
	АР_ОбщиеПроцедуры.СформироватьДвиженияПоРегистру(ПараметрыПроведения.ВзаиморасчетыПоАренде, Движения, "АР_ВзаиморасчетыПоАренде", Отказ);
	//--ЭЛИАС 20120705
		
	// Отложенные расчеты с контрагентами.
	УчетВзаиморасчетовОтложенноеПроведение.ЗарегистрироватьОтложенныеРасчетыСКонтрагентами(
		ЭтотОбъект, Отказ, ПараметрыПроведения.РасчетыСКонтрагентамиОтложенноеПроведение);
		
	// Регистрация в последовательности
	РаботаСПоследовательностями.ЗарегистрироватьОтложенныеРасчетыВПоследовательности(
		ЭтотОбъект, Отказ, ПараметрыПроведения.РасчетыСКонтрагентамиОтложенноеПроведение);
		
	ПроведениеСервер.УстановитьЗаписьОчищаемыхНаборовЗаписей(ЭтотОбъект);
		
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

	РаботаСПоследовательностями.ОтменитьРегистрациюВПоследовательности(ЭтотОбъект, Отказ);

КонецПроцедуры

#КонецЕсли