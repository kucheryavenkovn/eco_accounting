
#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания Экспорт;
&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
&НаКлиенте
Перем ИдентификаторСтрокиДебиторы;
&НаКлиенте
Перем ИдентификаторСтрокиКредиторы;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.ДетализироватьЗадолженность = Параметры.ДетализироватьЗадолженность;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	СчетаРасчетовСПерсоналом.ЗагрузитьЗначения(Документы.ИнвентаризацияРасчетовСКонтрагентами.СчетаРасчетовСПерсоналом());
	
	ЗаполнитьСлужебныеРеквизитыТаблицыФормы("Дебиторы");
	ЗаполнитьСлужебныеРеквизитыТаблицыФормы("Кредиторы");
	
	УстановитьУсловноеОформление();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	Если НЕ Отказ Тогда
		Объект.Контрагенты.Очистить();

		Для Каждого СтрокаКонтрагента Из Дебиторы Цикл
			НоваяСтрока = Объект.Контрагенты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКонтрагента);
			НоваяСтрока.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Дебиторская");
		КонецЦикла;

		Для Каждого СтрокаКонтрагента Из Кредиторы Цикл
			НоваяСтрока = Объект.Контрагенты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКонтрагента);
			НоваяСтрока.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Кредиторская");
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	Документы.ИнвентаризацияРасчетовСКонтрагентами.ОбработкаПроверкиЗаполнения(
		Отказ,
		ПроверяемыеРеквизиты,
		ЭтотОбъект,
		Истина);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьСостояниеДокумента();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если НЕ ОбъектГотовКЗаполнению(Неопределено) Тогда
		Объект.Организация = ТекущаяОрганизация;
		Возврат;
	КонецЕсли;

	ТекущаяОрганизация = Объект.Организация;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ИспользуетсяОтложенноеПроведение = ИспользуетсяОтложенноеПроведение(Объект.Организация, Объект.Дата);
	КонецЕсли;

	Объект.Контрагенты.Очистить();
	Дебиторы.Очистить();
	Кредиторы.Очистить();
	Объект.ДетальныеЗаписи.Очистить();
	ОбновитьИтоги(ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДебиторы

&НаКлиенте
Процедура ДебиторыПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтотОбъект);
	ОбновитьНумерациюСтрок(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ДебиторыСрокЗадолженности" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуРасшифровки(Элемент, ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Дебиторская"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторыПередУдалением(Элемент, Отказ)
	
	Если Элемент.ВыделенныеСтроки.Количество() = 1 Тогда
		Отбор = Новый Структура("КлючСтроки", Элемент.ТекущиеДанные.КлючСтроки);
		УдалитьСвязанныеДетальныеЗаписи(Отбор);
	Иначе
		Если Объект.ДетализироватьЗадолженность Тогда
			УдалитьСвязанныеДетальныеЗаписиНаСервере(Элемент.ВыделенныеСтроки, Элемент.Имя);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ДебиторыКредиторыПриНачалеРедактирования(Элемент.Имя, НоваяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДебиторыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДебиторыКредиторыОбработкаВыбора(Элемент, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторыПослеУдаления(Элемент)
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторыСчетРасчетовПриИзменении(Элемент)
	
	ОбработатьИзменениеСчета(ЭтотОбъект, "Дебиторы");
	
	ТекущиеДанные = Элементы.Дебиторы.ТекущиеДанные;
	Если СчетаИсключения.НайтиПоЗначению(ТекущиеДанные.СчетРасчетов) <> Неопределено Тогда
		ТекущиеДанные.НаименованиеСчета = ЗначениеРеквизитаОбъекта(ТекущиеДанные.СчетРасчетов, "Наименование");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторыКонтрагентПриИзменении(Элемент)

	УдалитьДетальныеЗаписиПриИзменении(ЭтотОбъект, "Дебиторы");

КонецПроцедуры

&НаКлиенте
Процедура ДебиторыПодтвержденоПриИзменении(Элемент)

	ПересчитатьСуммыВСтроке(Элементы.Дебиторы.ТекущиеДанные, "Дебиторы");

КонецПроцедуры

&НаКлиенте
Процедура ДебиторыНеПодтвержденоПриИзменении(Элемент)

	ПересчитатьСуммыВСтроке(Элементы.Дебиторы.ТекущиеДанные, "Дебиторы");

КонецПроцедуры

&НаКлиенте
Процедура ДебиторыИстекСрокДавностиПриИзменении(Элемент)

	ПересчитатьСуммыВСтроке(Элементы.Дебиторы.ТекущиеДанные, "Дебиторы");

КонецПроцедуры

&НаКлиенте
Процедура ДебиторыСрокЗадолженностиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Объект);
	ПараметрыФормы.Вставить("ОбъектРасшифровки", Элементы.Дебиторы.ТекущиеДанные.Контрагент);
	
	ОткрытьФорму("Документ.ИнвентаризацияРасчетовСКонтрагентами.Форма.ФормаРасшифровки", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторыКредиторыОбработкаВыбора(Элемент, ВыбранноеЗначение)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДебиторыКредиторы = Новый Массив;
	СчетаРасчетов = Новый Массив;
	
	Для Каждого ТекущееЗначение Из ВыбранноеЗначение Цикл
		ДебиторыКредиторы.Добавить(ТекущееЗначение.ДебиторКредитор);
		СчетаРасчетов.Добавить(ТекущееЗначение.СчетРасчетов);
	КонецЦикла;
	
	Если Элемент.Имя = "Дебиторы" Тогда
		ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Дебиторская");
	Иначе
		ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Кредиторская");
	КонецЕсли;
	
	ДополнительныеПараметры = НовыеПараметрыЗаполненияЗадолженности(ВидЗадолженности);
	ДополнительныеПараметры.Вставить("ДебиторыКредиторы", ДебиторыКредиторы);
	ДополнительныеПараметры.Вставить("СчетаРасчетов", СчетаРасчетов);
	
	ЗаполнитьДолгиНаКлиенте(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторыКредиторыПриНачалеРедактирования(ИмяТаблицы, НоваяСтрока)
	
	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	ИдСтроки      = Элементы[ИмяТаблицы].ТекущаяСтрока;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.КлючСтроки  = Новый УникальныйИдентификатор;
		ТекущиеДанные.СрокЗадолженности = ТекстОписанияСрокаЗадолженностиПоУмолчанию();
		ТекущиеДанные.НомерСтроки = ЭтотОбъект[ИмяТаблицы].Количество();
	КонецЕсли;
	
	Если ИмяТаблицы = "Дебиторы" Тогда
		ИдентификаторСтроки = ИдентификаторСтрокиДебиторы;
	Иначе
		ИдентификаторСтроки = ИдентификаторСтрокиКредиторы;
	КонецЕсли;
	
	Если ИдСтроки <> ИдентификаторСтроки Тогда
		
		ОбработатьИзменениеСчета(ЭтотОбъект, ИмяТаблицы);
		
		Если ИмяТаблицы = "Дебиторы" Тогда
			ИдентификаторСтрокиДебиторы = ИдСтроки;
		Иначе
			ИдентификаторСтрокиКредиторы = ИдСтроки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДетализироватьЗадолженностьПриИзменении(Элемент)
	
	Если Объект.ДетальныеЗаписи.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru='Данные по срокам задолженности будут удалены. " + Символы.ПС + "Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ВопросДетализироватьЗадолженностьЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Заголовок);
		
	ИначеЕсли Объект.ДетализироватьЗадолженность И (Дебиторы.Количество() > 0 Или Кредиторы.Количество() > 0) Тогда
		
		ТекстВопроса = НСтр("ru='Заполнить данными по срокам задолженности?'");
		Оповещение = Новый ОписаниеОповещения("ВопросЗаполнитьДанныеПоСрокамЗадолженностиЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Заголовок);
		
	Иначе
		
		ЗаполнитьТекстОписанияСрокаЗадолженностиПоУмолчанию();
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКредиторы

&НаКлиенте
Процедура КредиторыПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтотОбъект);
	ОбновитьНумерациюСтрок(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура КредиторыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "КредиторыСрокЗадолженности" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуРасшифровки(Элемент, ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Кредиторская"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КредиторыПередУдалением(Элемент, Отказ)
	
	Если Элемент.ВыделенныеСтроки.Количество() = 1 Тогда
		Отбор = Новый Структура("КлючСтроки", Элемент.ТекущиеДанные.КлючСтроки);
		УдалитьСвязанныеДетальныеЗаписи(Отбор);
	Иначе
		Если Объект.ДетализироватьЗадолженность Тогда
			УдалитьСвязанныеДетальныеЗаписиНаСервере(Элемент.ВыделенныеСтроки, Элемент.Имя);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КредиторыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ДебиторыКредиторыПриНачалеРедактирования(Элемент.Имя, НоваяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура КредиторыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КредиторыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДебиторыКредиторыОбработкаВыбора(Элемент, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура КредиторыПослеУдаления(Элемент)
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КредиторыСчетРасчетовПриИзменении(Элемент)
	
	ОбработатьИзменениеСчета(ЭтотОбъект, "Кредиторы");
	
	ТекущиеДанные = Элементы.Кредиторы.ТекущиеДанные;
	Если СчетаИсключения.НайтиПоЗначению(ТекущиеДанные.СчетРасчетов) <> Неопределено Тогда
		ТекущиеДанные.НаименованиеСчета = ЗначениеРеквизитаОбъекта(ТекущиеДанные.СчетРасчетов, "Наименование");
	КонецЕсли;
	
	ТекущиеДанные.СрокЗадолженности = ТекстОписанияСрокаЗадолженностиПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура КредиторыКонтрагентПриИзменении(Элемент)

	УдалитьДетальныеЗаписиПриИзменении(ЭтотОбъект, "Кредиторы");

КонецПроцедуры

&НаКлиенте
Процедура КредиторыПодтвержденоПриИзменении(Элемент)

	ПересчитатьСуммыВСтроке(Элементы.Кредиторы.ТекущиеДанные, "Кредиторы");

КонецПроцедуры

&НаКлиенте
Процедура КредиторыНеПодтвержденоПриИзменении(Элемент)

	ПересчитатьСуммыВСтроке(Элементы.Кредиторы.ТекущиеДанные, "Кредиторы");

КонецПроцедуры

&НаКлиенте
Процедура КредиторыИстекСрокДавностиПриИзменении(Элемент)

	ПересчитатьСуммыВСтроке(Элементы.Кредиторы.ТекущиеДанные, "Кредиторы");

КонецПроцедуры

&НаКлиенте
Процедура КредиторыСрокЗадолженностиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Объект);
	ПараметрыФормы.Вставить("ОбъектРасшифровки", Элементы.Кредиторы.ТекущиеДанные.Контрагент);
	
	ОткрытьФорму("Документ.ИнвентаризацияРасчетовСКонтрагентами.Форма.ФормаРасшифровки", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИнвентаризационнаяКомиссия

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ПроверитьФлагиПредседателя(Элемент.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПослеУдаления(Элемент)
	
	Если Объект.ИнвентаризационнаяКомиссия.Количество() > 0 Тогда
		ПроверитьФлагиПредседателя(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Копирование Тогда
		Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФизЛицо = Неопределено;
		Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.Председатель = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ОтменаРедактирования Тогда
		СтрокиФЛ = Объект.ИнвентаризационнаяКомиссия.НайтиСтроки(Новый Структура("ФизЛицо", 
													Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФизЛицо));
		Если СтрокиФЛ.Количество() > 1 Тогда
			Отказ = Истина;
			ТекстПредупреждения = НСтр("ru = 'Физическое лицо %физлицо% уже включено в состав комиссии!'");
			ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%физлицо%", 
												Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФизЛицо);
			ПоказатьПредупреждение( , ТекстПредупреждения, , Заголовок);
			Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФизЛицо = Неопределено;
			ТекущийЭлемент = Элементы.ИнвентаризационнаяКомиссияФизЛицо;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокДоВыбора = Объект.ИнвентаризационнаяКомиссия.Количество();
	Для Каждого ВыбранныйЭлемент Из ВыбранноеЗначение Цикл
		
		СтрокиФизЛица = Объект.ИнвентаризационнаяКомиссия.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранныйЭлемент));
		Если СтрокиФизЛица.Количество() = 0 Тогда
			СтрокаФизЛица = Объект.ИнвентаризационнаяКомиссия.Добавить();
			СтрокаФизЛица.ФизЛицо = ВыбранныйЭлемент;
		Иначе
			СтрокаФизЛица = СтрокиФизЛица[0];
			ИндексСтроки = Объект.ИнвентаризационнаяКомиссия.Индекс(СтрокаФизЛица);
			ИмяПоля = "ИнвентаризационнаяКомиссия[" + Формат(ИндексСтроки, "ЧДЦ=0; ЧГ=") + "].ФизЛицо"; 
			ТекстСообщения = НСтр("ru = 'Физическое лицо %1 уже добавлено в список комиссии'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыбранныйЭлемент);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ИмяПоля);
		КонецЕсли; 
		Элементы.ИнвентаризационнаяКомиссия.ТекущаяСтрока = СтрокаФизЛица;
	
	КонецЦикла;
	
	Если СтрокДоВыбора = 0 И Объект.ИнвентаризационнаяКомиссия.Количество() > 0 Тогда
		Объект.ИнвентаризационнаяКомиссия[0].Председатель = Истина;
	КонецЕсли;  
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьДебиторскуюЗадолженность(Команда)
	
	ЗаполнитьДолги(ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Дебиторская"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКредиторскуюЗадолженность(Команда)

	ЗаполнитьДолги(ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Кредиторская"));

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВсеЗадолженности(Команда)

	ЗаполнитьДолги();

КонецПроцедуры

&НаКлиенте
Процедура СчетаРасчетовСнятьФлажки(Команда)
	
	СчетаРасчетовУстановитьСнятьФлажки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаРасчетовУстановитьФлажки(Команда)
	
	СчетаРасчетовУстановитьСнятьФлажки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСчетаПоУмолчанию(Команда)

	Если Объект.СчетаРасчетов.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением все счета учета будут удалены. " + Символы.ПС + "Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ВопросВсеСчетаУчетаБудутУдаленыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Заголовок);
	Иначе
		ЗаполнитьСчетаПоУмолчаниюНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодборКомиссии(Команда)

	ПараметрыФормы = Новый Структура("ЗакрыватьприВыборе,МножественныйВыбор,РежимВыбора", Ложь, Истина, Истина);
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаСписка", ПараметрыФормы, Элементы.ИнвентаризационнаяКомиссия);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВопросВсеСчетаУчетаБудутУдаленыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьСчетаПоУмолчаниюНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросДетализироватьЗадолженностьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Объект.ДетальныеЗаписи.Очистить();
		ЗаполнитьТекстОписанияСрокаЗадолженностиПоУмолчанию();
		УправлениеФормой(ЭтотОбъект);
		
	Иначе
		
		Объект.ДетализироватьЗадолженность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьДанныеПоСрокамЗадолженностиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьДолгиПоАктуальнымДанным();
		
	Иначе
		
		ЗаполнитьТекстОписанияСрокаЗадолженностиПоУмолчанию();
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

// Разделяет табличную часть "Контрагенты" на отдельные таблицы значений
//
&НаСервере
Процедура ЗагрузитьИзДокументаДебиторовИКредиторов()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнвентаризацияРасчетовСКонтрагентамиДетальныеЗаписи.КлючСтроки КАК КлючСтроки,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ИнвентаризацияРасчетовСКонтрагентамиДетальныеЗаписи.ДатаВозникновения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА 0
	|			ИНАЧЕ РАЗНОСТЬДАТ(ИнвентаризацияРасчетовСКонтрагентамиДетальныеЗаписи.ДатаВозникновения, &ДатаДокумента, ДЕНЬ)
	|		КОНЕЦ) КАК СрокЗадолженностиМинимум,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ИнвентаризацияРасчетовСКонтрагентамиДетальныеЗаписи.ДатаВозникновения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА 0
	|			ИНАЧЕ РАЗНОСТЬДАТ(ИнвентаризацияРасчетовСКонтрагентамиДетальныеЗаписи.ДатаВозникновения, &ДатаДокумента, ДЕНЬ)
	|		КОНЕЦ) КАК СрокЗадолженностиМаксимум
	|ПОМЕСТИТЬ СрокиЗадолженности
	|ИЗ
	|	Документ.ИнвентаризацияРасчетовСКонтрагентами.ДетальныеЗаписи КАК ИнвентаризацияРасчетовСКонтрагентамиДетальныеЗаписи
	|ГДЕ
	|	ИнвентаризацияРасчетовСКонтрагентамиДетальныеЗаписи.Ссылка = &Ссылка
	|	И &ДетализироватьЗадолженность
	|
	|СГРУППИРОВАТЬ ПО
	|	ИнвентаризацияРасчетовСКонтрагентамиДетальныеЗаписи.КлючСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.СчетРасчетов В (&СчетаИсключения)
	|			ТОГДА ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.СчетРасчетов.Наименование
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК НаименованиеСчета,
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.Контрагент КАК Контрагент,
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.СчетРасчетов КАК СчетРасчетов,
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.Подтверждено КАК Подтверждено,
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.НеПодтверждено КАК НеПодтверждено,
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.ИстекСрокДавности КАК ИстекСрокДавности,
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.Подтверждено + ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.НеПодтверждено КАК Всего,
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.КлючСтроки КАК КлючСтроки,
	|	ЕСТЬNULL(СрокиЗадолженности.СрокЗадолженностиМинимум, 0) КАК СрокЗадолженностиМинимум,
	|	ЕСТЬNULL(СрокиЗадолженности.СрокЗадолженностиМаксимум, 0) КАК СрокЗадолженностиМаксимум
	|ИЗ
	|	Документ.ИнвентаризацияРасчетовСКонтрагентами.Контрагенты КАК ИнвентаризацияРасчетовСконтрагентамиКонтрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СрокиЗадолженности КАК СрокиЗадолженности
	|		ПО ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.КлючСтроки = СрокиЗадолженности.КлючСтроки
	|ГДЕ
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.Ссылка = &Ссылка
	|	И ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.ВидЗадолженности = ЗНАЧЕНИЕ(перечисление.ВидыЗадолженности.Дебиторская)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ КредиторскаяЗадолженностьНачалоСтроки
	|ИЗ
	|	Документ.ИнвентаризацияРасчетовСКонтрагентами.Контрагенты КАК ИнвентаризацияРасчетовСконтрагентамиКонтрагенты
	|ГДЕ
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.Ссылка = &Ссылка
	|	И ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.ВидЗадолженности = ЗНАЧЕНИЕ(перечисление.ВидыЗадолженности.Кредиторская)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.НомерСтроки - КредиторскаяЗадолженностьНачалоСтроки.НомерСтроки + 1 КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.СчетРасчетов В (&СчетаИсключения)
	|			ТОГДА ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.СчетРасчетов.Наименование
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК НаименованиеСчета,
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.Контрагент КАК Контрагент,
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.СчетРасчетов КАК СчетРасчетов,
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.Подтверждено КАК Подтверждено,
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.НеПодтверждено КАК НеПодтверждено,
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.ИстекСрокДавности КАК ИстекСрокДавности,
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.Подтверждено + ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.НеПодтверждено КАК Всего,
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.КлючСтроки КАК КлючСтроки,
	|	ЕСТЬNULL(СрокиЗадолженности.СрокЗадолженностиМинимум, 0) КАК СрокЗадолженностиМинимум,
	|	ЕСТЬNULL(СрокиЗадолженности.СрокЗадолженностиМаксимум, 0) КАК СрокЗадолженностиМаксимум
	|ИЗ
	|	Документ.ИнвентаризацияРасчетовСКонтрагентами.Контрагенты КАК ИнвентаризацияРасчетовСконтрагентамиКонтрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КредиторскаяЗадолженностьНачалоСтроки КАК КредиторскаяЗадолженностьНачалоСтроки
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СрокиЗадолженности КАК СрокиЗадолженности
	|		ПО ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.КлючСтроки = СрокиЗадолженности.КлючСтроки
	|ГДЕ
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.Ссылка = &Ссылка
	|	И ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.ВидЗадолженности = ЗНАЧЕНИЕ(перечисление.ВидыЗадолженности.Кредиторская)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	СчетаИсключения.ЗагрузитьЗначения(Документы.ИнвентаризацияРасчетовСКонтрагентами.СчетаРасчетовУчетПоНаименованию());
	
	Запрос.УстановитьПараметр("СчетаИсключения", СчетаИсключения);
	Запрос.УстановитьПараметр("ДатаДокумента", Объект.Дата);
	Запрос.УстановитьПараметр("ДетализироватьЗадолженность", Объект.ДетализироватьЗадолженность);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Дебиторы.Загрузить(РезультатыЗапроса[1].Выгрузить());
	Кредиторы.Загрузить(РезультатыЗапроса[3].Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТекстОписанияСрокаЗадолженностиПоУмолчанию()
	
	СрокЗадолженностиПоУмолчанию = ТекстОписанияСрокаЗадолженностиПоУмолчанию();
	Для Каждого ТекущаяСтрока Из Дебиторы Цикл
		ТекущаяСтрока.СрокЗадолженности = СрокЗадолженностиПоУмолчанию;
	КонецЦикла;
	
	Для Каждого ТекущаяСтрока Из Кредиторы Цикл
		ТекущаяСтрока.СрокЗадолженности = СрокЗадолженностиПоУмолчанию;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Форма.КоличествоДебиторов        = Форма.Дебиторы.Количество();
	Форма.КоличествоКредиторов       = Форма.Кредиторы.Количество();
	Форма.ВсегоДебиторы              = Форма.Дебиторы.Итог("Всего");
	Форма.ВсегоКредиторы             = Форма.Кредиторы.Итог("Всего");
	Форма.ПодтвержденоДебиторы       = Форма.Дебиторы.Итог("Подтверждено");
	Форма.ПодтвержденоКредиторы      = Форма.Кредиторы.Итог("Подтверждено");
	Форма.НеПодтвержденоДебиторы     = Форма.Дебиторы.Итог("НеПодтверждено");
	Форма.НеПодтвержденоКредиторы    = Форма.Кредиторы.Итог("НеПодтверждено");
	Форма.ИстекСрокДавностиДебиторы  = Форма.Дебиторы.Итог("ИстекСрокДавности");
	Форма.ИстекСрокДавностиКредиторы = Форма.Кредиторы.Итог("ИстекСрокДавности");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНумерациюСтрок(ИмяТаблицы)
	
	Для ИндексСтроки = 0 По ЭтотОбъект[ИмяТаблицы].Количество() - 1 Цикл
		ЭтотОбъект[ИмяТаблицы][ИндексСтроки].НомерСтроки = ИндексСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет готовность документа к автоматическому заполнению данными учета
//
&НаКлиенте
Функция ОбъектГотовКЗаполнению(ВидЗадолженности = Неопределено)

	Если Объект.СчетаРасчетов.Количество() = 0 И ВидЗадолженности <> Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Не задан список счетов, по которым должен формироваться документ!'");
		ПоказатьПредупреждение( , ТекстПредупреждения, , Заголовок);
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

&НаКлиенте
Функция ПолучитьТекстВопроса(ВидЗадолженности)
	
	ТекстВопроса = "";
	
	Если ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Дебиторская")
		И КоличествоДебиторов > 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Перед заполнением все строки дебиторской задолженности будут удалены.'");
		
	ИначеЕсли ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Кредиторская")
		И КоличествоКредиторов > 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Перед заполнением все строки кредиторской задолженности будут удалены.'");
		
	ИначеЕсли ВидЗадолженности = Неопределено И (КоличествоДебиторов > 0 Или КоличествоКредиторов > 0) Тогда
		
		ТекстВопроса = НСтр("ru = 'Перед заполнением все строки задолженности контрагентов будут удалены.'");
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстВопроса) Тогда
		СтрокиВопроса = Новый Массив;
		СтрокиВопроса.Добавить(ТекстВопроса);
		СтрокиВопроса.Добавить(НСтр("ru = 'Продолжить?'"));
		ТекстВопроса = СтрСоединить(СтрокиВопроса, Символы.ПС);
	КонецЕсли;
	
	Возврат ТекстВопроса;
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьСуммыВСтроке(СтрокаТаблицы, ИмяТаблицы)

	СтрокаТаблицы.Всего = СтрокаТаблицы.Подтверждено + СтрокаТаблицы.НеПодтверждено;
	Если СтрокаТаблицы.ИстекСрокДавности > СтрокаТаблицы.Всего Тогда

		// ошибка выведется только однократно, после чего поле "ИстекСрокДавности" заполнится правильными данными.
		// В обработке проверки заполнения это проверять не нужно.
		ИндексСтроки = ЭтотОбъект[ИмяТаблицы].Индекс(СтрокаТаблицы);
		ИмяПоля = ИмяТаблицы + "[" + Формат(ИндексСтроки, "ЧН=0; ЧГ=") + "].ИстекСрокДавности"; 
		ТекстСообщения = НСтр("ru = 'Сумма с истекшим сроком давности не может быть больше общей суммы задолженности'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ИмяПоля);

		СтрокаТаблицы.ИстекСрокДавности = СтрокаТаблицы.Всего;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьФлагиПредседателя(СтрокаТЧ)

	СтрокаПредседателя = ?(СтрокаТЧ <> Неопределено И СтрокаТЧ.Председатель, СтрокаТЧ, Неопределено);

	Для Каждого СтрокаКомиссии Из Объект.ИнвентаризационнаяКомиссия Цикл

		Если СтрокаКомиссии.Председатель И СтрокаПредседателя = Неопределено Тогда
			СтрокаПредседателя = СтрокаКомиссии;
			Продолжить;
		КонецЕсли;

		Если СтрокаКомиссии.Председатель И СтрокаКомиссии <> СтрокаПредседателя Тогда
			СтрокаКомиссии.Председатель = Ложь;
		КонецЕсли;

	КонецЦикла;

	Если СтрокаПредседателя = Неопределено И Объект.ИнвентаризационнаяКомиссия.Количество() > 0 Тогда
		Объект.ИнвентаризационнаяКомиссия[0].Председатель = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьСостояниеДокумента();
	
	ТекущаяДатаДокумента = Объект.Дата;
	ТекущаяОрганизация   = Объект.Организация;
	ИспользуетсяОтложенноеПроведение = ИспользуетсяОтложенноеПроведение(ТекущаяОрганизация, ТекущаяДатаДокумента);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗагрузитьИзДокументаДебиторовИКредиторов();
	Иначе
		Дебиторы.Очистить();
		Кредиторы.Очистить();
		Объект.ДетальныеЗаписи.Очистить();
	КонецЕсли;
	
	ОбновитьИтоги(ЭтотОбъект);
	
	Элементы.ДокументОснованиеВид.СписокВыбора.Очистить();
	Элементы.ДокументОснованиеВид.СписокВыбора.Добавить("Приказ");
	Элементы.ДокументОснованиеВид.СписокВыбора.Добавить("Постановление");
	Элементы.ДокументОснованиеВид.СписокВыбора.Добавить("Распоряжение");
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

#Область ЗаполнениеПоОстаткам

// Заполняет табличную часть "СчетаРасчетов" значениями по умолчению
//
&НаСервере
Процедура ЗаполнитьСчетаПоУмолчаниюНаСервере()
	
	Объект.СчетаРасчетов.Загрузить(Документы.ИнвентаризацияРасчетовСКонтрагентами.СчетаДетализацииЗадолженности());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДолги(ВидЗадолженности = Неопределено)
	
	Если Не ОбъектГотовКЗаполнению(ВидЗадолженности) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = ПолучитьТекстВопроса(ВидЗадолженности);
	
	Если ТекстВопроса = "" Тогда
		ЗаполнитьДолгиПоАктуальнымДанным(ВидЗадолженности);
	Иначе
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьДолгиЗавершение", ЭтотОбъект, ВидЗадолженности);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

// Вызывает заполнение таблицы значений задолженностью указанного вида
&НаКлиенте
Процедура ЗаполнитьДолгиПоАктуальнымДанным(ВидЗадолженности = Неопределено)
	
	ИмяВидаЗадолженности = ИмяТаблицыПоВидуЗадолженности(ВидЗадолженности);
	Если ВидЗадолженности = Неопределено Тогда
		Дебиторы.Очистить();
		Кредиторы.Очистить();
		Объект.ДетальныеЗаписи.Очистить();
	Иначе
		ЭтотОбъект[ИмяВидаЗадолженности].Очистить();
		Отбор = Новый Структура("ВидЗадолженности", ВидЗадолженности);
		УдалитьСвязанныеДетальныеЗаписи(Отбор);
	КонецЕсли;
	
	Если ИспользуетсяОтложенноеПроведение Тогда
		
		НачалоНеактуальности = МоментАктуальностиОтложенныхРасчетов(Объект.Организация, КонецДня(Объект.Дата));
		Если НачалоНеактуальности <> Неопределено Тогда
			
			ДополнительныеПараметры = НовыеПараметрыЗаполненияЗадолженности(ВидЗадолженности);
			
			Оповещение = Новый ОписаниеОповещения("ЗаполнитьДолгиПоАктуальнымДаннымЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр("ru = 'Данные учета не актуальны. Необходимо актуализировать расчеты с контрагентами.'");
			
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить("ВыполнитьАктуализацию",  НСтр("ru = 'Выполнить актуализацию'"));
			Кнопки.Добавить("НеАктуализировать", НСтр("ru = 'Не актуализировать взаиморасчеты'"));
			
			ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, , "ВыполнитьАктуализацию", Заголовок);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьДолгиНаКлиенте(НовыеПараметрыЗаполненияЗадолженности(ВидЗадолженности));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДолгиНаКлиенте(ДополнительныеПараметры = Неопределено)
	
	// запускаем фоновое задание
	РезультатЗаполнения = ЗаполнитьДолгиНаСервере(ДополнительныеПараметры);
	
	Если РезультатЗаполнения.ЗаданиеВыполнено Тогда
		// Результат получен и уже обработан на стороне сервера
		СообщитьРезультатЗаполнения(РезультатЗаполнения);
		
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗаданияАктуализации) Тогда
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗаданияАктуализации);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет таблицы значений как дебиторской, так и кредиторской задолженностью
&НаСервере
Функция ЗаполнитьДолгиНаСервере(ДополнительныеПараметры)
	
	// Возможно, что фоновое задание было запущено раньше, 
	// пользователь дал команду его отменить, однако задание не отменено.
	// В таком случае не следует запускать задание повторно - следует дождаться его выполнения.
	Если ЗакрытиеМесяца.ЗаданиеЕщеВыполняется(ИдентификаторЗаданияАктуализации) Тогда
		// Надо ждать
		Возврат Документы.ИнвентаризацияРасчетовСКонтрагентами.НовыйРезультатЗаполнения();
	КонецЕсли;
	
	НаименованиеФоновогоЗадания = НСтр("ru = 'Заполнить данными расчетов с контрагентами'");
	
	АдресХранилищаСОшибками = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ПараметрыОбъекта = Документы.ИнвентаризацияРасчетовСКонтрагентами.НовыеПараметрыОбъектаРасшифровки();
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект, "Дата, Организация");
	
	ВыбранныеСчета = Новый Массив;
	Для Каждого СтрокаСчета Из Объект.СчетаРасчетов Цикл
		Если ЗначениеЗаполнено(СтрокаСчета.СчетРасчетов) И СтрокаСчета.УчаствуетВРасчетах Тогда
			ВыбранныеСчета.Добавить(СтрокаСчета.СчетРасчетов);
		КонецЕсли; 
	КонецЦикла;
	ПараметрыОбъекта.СчетаРасчетов = ВыбранныеСчета;
	
	ПараметрыЗаполнения = Документы.ИнвентаризацияРасчетовСКонтрагентами.НовыеПараметрыЗаполнения(ПараметрыОбъекта);
	ПараметрыЗаполнения.АдресХранилищаСОшибками = АдресХранилищаСОшибками;
	ПараметрыЗаполнения.СсылкаНаДокумент = Объект.Ссылка;
	ПараметрыЗаполнения.ЭтоЗаполнениеДокумента = Истина;
	
	Если ДополнительныеПараметры.ВидЗадолженности = Неопределено Тогда
		ПараметрыЗаполнения.Контрагенты.Вставить(Перечисления.ВидыЗадолженности.Дебиторская, Дебиторы.Выгрузить());
		ПараметрыЗаполнения.Контрагенты.Вставить(Перечисления.ВидыЗадолженности.Кредиторская, Кредиторы.Выгрузить());
	Иначе
		ИмяТаблицы = ИмяТаблицыПоВидуЗадолженности(ДополнительныеПараметры.ВидЗадолженности);
		Если ИмяТаблицы <> Неопределено Тогда
			ПараметрыЗаполнения.Контрагенты.Вставить(ДополнительныеПараметры.ВидЗадолженности,
				ЭтотОбъект[ИмяТаблицы].Выгрузить());
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры) И ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Для Каждого ТекущийПараметр Из ДополнительныеПараметры Цикл
			ПараметрыЗаполнения.Вставить(ТекущийПараметр.Ключ, ТекущийПараметр.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Результат = ЗакрытиеМесяца.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Документы.ИнвентаризацияРасчетовСКонтрагентами.ЗаполнитьПоОстаткам", 
		ПараметрыЗаполнения,
		НаименованиеФоновогоЗадания);
	
	АдресХранилищаАктуализации       = Результат.АдресХранилища;
	ИдентификаторЗаданияАктуализации = Результат.ИдентификаторЗадания;
	
	Если Результат.ЗаданиеВыполнено Тогда
		РезультатЗаполнения = ПрочитатьРезультатЗаполнения();
	Иначе
		РезультатЗаполнения = Документы.ИнвентаризацияРасчетовСКонтрагентами.НовыйРезультатЗаполнения();
		ОбновитьИтоги(ЭтотОбъект);
	КонецЕсли;
	
	// Передадим данные на клиент.
	Возврат РезультатЗаполнения;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяТаблицыПоВидуЗадолженности(ВидЗадолженности)
	
	ИмяТаблицы = Неопределено;
	
	Если ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Кредиторская") Тогда
		ИмяТаблицы = "Кредиторы";
	ИначеЕсли ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Дебиторская") Тогда
		ИмяТаблицы = "Дебиторы";
	КонецЕсли;
	
	Возврат ИмяТаблицы;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗакрытиеМесяцаВызовСервера.ЗаданиеВыполнено(ИдентификаторЗаданияАктуализации) Тогда
			
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			
			РезультатЗаполнения = ПрочитатьРезультатЗаполнения();
			СообщитьРезультатЗаполнения(РезультатЗаполнения);
			
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ПрочитатьРезультатЗаполнения()
	
	РезультатЗаполнения = Документы.ИнвентаризацияТоваровНаСкладе.НовыйРезультатЗаполнения();
	
	РезультатЗаполнения.ЗаданиеВыполнено = Истина;
	
	Если Не ЭтоАдресВременногоХранилища(АдресХранилищаАктуализации) Тогда
		ОбновитьИтоги(ЭтотОбъект);
		Возврат РезультатЗаполнения;
	КонецЕсли;
	
	ДанныеЗаполнения = ПолучитьИзВременногоХранилища(АдресХранилищаАктуализации);
	
	РезультатЗаполнения.ОткрытьФормуОшибки = ДанныеЗаполнения.ОткрытьФормуОшибки;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.ДетальныеЗаписи) Тогда
		Для Каждого ТекущаяСтрока Из ДанныеЗаполнения.ДетальныеЗаписи Цикл
			ЗаполнитьЗначенияСвойств(Объект.ДетальныеЗаписи.Добавить(), ТекущаяСтрока);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ИмяТаблицыЗадолженности Из ДанныеЗаполнения.Контрагенты Цикл
		ЗаполнитьТаблицуЗадолженности(ИмяТаблицыЗадолженности.Ключ, ИмяТаблицыЗадолженности.Значение);
	КонецЦикла;
	
	Модифицированность = Истина;
	
	УдалитьИзВременногоХранилища(АдресХранилищаАктуализации);
	АдресХранилищаАктуализации = "";
	
	ОбновитьИтоги(ЭтотОбъект);
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	Возврат РезультатЗаполнения;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	Для Каждого Дебитор Из Дебиторы Цикл
		ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Дебитор.СчетРасчетов);
		Дебитор["КонтрагентДоступность"] = ДанныеСчета.КоличествоСубконто > 0;
	КонецЦикла;
	
	Для Каждого Кредитор Из Кредиторы Цикл
		ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Кредитор.СчетРасчетов);
		Кредитор["КонтрагентДоступность"] = ДанныеСчета.КоличествоСубконто > 0;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьРезультатЗаполнения(РезультатЗаполнения)
	
	Если Не РезультатЗаполнения.ОткрытьФормуОшибки Тогда
		// Актуализация прошла успешно (или не потребовалась).
		Если ЭтоАдресВременногоХранилища(АдресХранилищаСОшибками) Тогда
			УдалитьИзВременногоХранилища(АдресХранилищаСОшибками);
			АдресХранилищаСОшибками = "";
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияБПКлиент.ОткрытьФормуОшибокПерепроведения(ЭтотОбъект, АдресХранилищаСОшибками);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДолгиЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьДолгиПоАктуальнымДанным(ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДолгиПоАктуальнымДаннымЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьДолгиНаКлиенте(ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИспользуетсяОтложенноеПроведение(Знач Организация, Знач Период)
	
	Возврат ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Организация, Период);
	
КонецФункции

&НаСервереБезКонтекста
Функция МоментАктуальностиОтложенныхРасчетов(Знач Организация, Знач Период)
	
	Возврат УчетВзаиморасчетовОтложенноеПроведение.МоментАктуальностиОтложенныхРасчетов(Организация, Период);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыТаблицыФормы(ИмяТаблицы)
	
	Для Каждого ТекущаяСтрока Из ЭтотОбъект[ИмяТаблицы] Цикл
		
		Если Объект.ДетализироватьЗадолженность Тогда
			ТекущаяСтрока.СрокЗадолженности = Документы.ИнвентаризацияРасчетовСКонтрагентами.ПредставлениеСрокаЗадолженности(
				ТекущаяСтрока.СрокЗадолженностиМинимум,
				ТекущаяСтрока.СрокЗадолженностиМаксимум);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуЗадолженности(ВидЗадолженности, ТаблицаДанных)
	
	ИмяТаблицы = ИмяТаблицыПоВидуЗадолженности(ВидЗадолженности);
	Если ИмяТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗадолженности = ЭтотОбъект[ИмяТаблицы];
	
	Отбор = Новый Структура("КлючСтроки");
	
	Для Каждого ТекущаяСтрока Из ТаблицаДанных Цикл
		
		Если Объект.ДетализироватьЗадолженность Тогда
			
			Отбор.КлючСтроки = ТекущаяСтрока.КлючСтроки;
			СтрокиОтбора = ТаблицаЗадолженности.НайтиСтроки(Отбор);
			Если СтрокиОтбора.Количество() > 0 Тогда
				НоваяСтрока = СтрокиОтбора[0];
			Иначе
				НоваяСтрока = ТаблицаЗадолженности.Добавить();
			КонецЕсли;
			
		Иначе
			НоваяСтрока = ТаблицаЗадолженности.Добавить();
		КонецЕсли;
		
		НоваяСтрока.НомерСтроки = ТаблицаЗадолженности.Количество();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		НоваяСтрока.Всего = НоваяСтрока.Подтверждено + НоваяСтрока.НеПодтверждено;
		
		Если Объект.ДетализироватьЗадолженность Тогда
			СтрокиОтбора = Объект.ДетальныеЗаписи.НайтиСтроки(Отбор);
			НоваяСтрока.СрокЗадолженности = ТекстОписанияСрокаЗадолженности(СтрокиОтбора, Объект.Дата);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, ИмяРеквизита)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, ИмяРеквизита);
	
КонецФункции

&НаКлиенте
Функция НовыеПараметрыЗаполненияЗадолженности(ВидЗадолженности)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВидЗадолженности", ВидЗадолженности);
	ДополнительныеПараметры.Вставить("ДатаОкончанияАктуализации", КонецДня(Объект.Дата));
	ДополнительныеПараметры.Вставить("ДетализироватьЗадолженность", Объект.ДетализироватьЗадолженность);
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения")
		И ИсточникВыбора.ИмяФормы = "Документ.ИнвентаризацияРасчетовСКонтрагентами.Форма.ФормаРасшифровки"
		И ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Отбор = Новый Структура("КлючСтроки", ВыбранноеЗначение.КлючСтроки);
		СтрокиОтбора = Объект.ДетальныеЗаписи.НайтиСтроки(Отбор);
		Для Каждого ТекущаяСтрока Из СтрокиОтбора Цикл
			Объект.ДетальныеЗаписи.Удалить(ТекущаяСтрока);
		КонецЦикла;
		
		Подтверждено = 0;
		НеПодтверждено = 0;
		ИстекСрокДавности = 0;
		
		Для Каждого ТекущаяСтрока Из ВыбранноеЗначение.ДетальныеЗаписи Цикл
			ЗаполнитьЗначенияСвойств(Объект.ДетальныеЗаписи.Добавить(), ТекущаяСтрока);
			Подтверждено = Подтверждено + ТекущаяСтрока.Подтверждено;
			НеПодтверждено = НеПодтверждено + ТекущаяСтрока.НеПодтверждено;
			ИстекСрокДавности = ИстекСрокДавности + ТекущаяСтрока.ИстекСрокДавности;
		КонецЦикла;
		
		ИмяТаблицы = ИмяТаблицыПоВидуЗадолженности(ВыбранноеЗначение.ВидЗадолженности);
		Если ИмяТаблицы <> Неопределено Тогда
			
			СтрокиОтбора = ЭтотОбъект[ИмяТаблицы].НайтиСтроки(Отбор);
			Если СтрокиОтбора.Количество() > 0 Тогда
				СтрокиОтбора[0].Подтверждено = Подтверждено;
				СтрокиОтбора[0].НеПодтверждено = НеПодтверждено;
				СтрокиОтбора[0].ИстекСрокДавности = ИстекСрокДавности;
				СтрокиОтбора[0].Всего = Подтверждено + НеПодтверждено;
				СтрокиОтбора[0].СрокЗадолженности = ТекстОписанияСрокаЗадолженности(ВыбранноеЗначение.ДетальныеЗаписи, Объект.Дата);
			КонецЕсли;
			
			ОбновитьНумерациюСтрок(ИмяТаблицы);
			
		КонецЕсли;
		
		ОбновитьИтоги(ЭтотОбъект);
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРасшифровки(Элемент, ВидЗадолженности)
	
	ТекущиеДанные = Элементы[Элемент.Имя].ТекущиеДанные;
		
	Если ПустаяСтрока(ТекущиеДанные.КлючСтроки) Тогда
		ТекущиеДанные.КлючСтроки = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	ПараметрыСтроки = Новый Структура;
	ПараметрыСтроки.Вставить("Ключ", Объект);
	ПараметрыСтроки.Вставить("КлючСтроки",        ТекущиеДанные.КлючСтроки);
	ПараметрыСтроки.Вставить("Организация",       Объект.Организация);
	ПараметрыСтроки.Вставить("ДатаДокумента",     Объект.Дата);
	ПараметрыСтроки.Вставить("ОбъектРасшифровки", ТекущиеДанные.Контрагент);
	ПараметрыСтроки.Вставить("СчетРасчетов",      ТекущиеДанные.СчетРасчетов);
	ПараметрыСтроки.Вставить("ВидЗадолженности",  ВидЗадолженности);
	ПараметрыСтроки.Вставить("ДетальныеЗаписи",   ПараметрыРасшифровки(ПараметрыСтроки));
	
	ОткрытьФорму("Документ.ИнвентаризацияРасчетовСКонтрагентами.Форма.ФормаРасшифровки",
		ПараметрыСтроки,
		ЭтотОбъект,
		ТекущиеДанные.КлючСтроки);
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыРасшифровки(ПараметрыСтроки)
	
	СтрокиТекущегоОбъекта = Новый СписокЗначений;
	
	Отбор = Новый Структура("КлючСтроки", ПараметрыСтроки.КлючСтроки);
	СтрокиОтбора = Объект.ДетальныеЗаписи.НайтиСтроки(Отбор);
	
	Если СтрокиОтбора.Количество() = 0 Тогда
		ДополнительныеПараметры = НовыеПараметрыЗаполненияЗадолженности(ПараметрыСтроки.ВидЗадолженности);
		ДополнительныеПараметры.Вставить("ДебиторыКредиторы", ПараметрыСтроки.ОбъектРасшифровки);
		ДополнительныеПараметры.Вставить("СчетаРасчетов", ПараметрыСтроки.СчетРасчетов);
		ДополнительныеПараметры.Вставить("КлючСтроки", ПараметрыСтроки.КлючСтроки);
		ЗаполнитьДолгиНаКлиенте(ДополнительныеПараметры);
		СтрокиОтбора = Объект.ДетальныеЗаписи.НайтиСтроки(Отбор);
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из СтрокиОтбора Цикл
		НоваяСтрока = НоваяСтрокаДетальныйЗаписи();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		СтрокиТекущегоОбъекта.Добавить(НоваяСтрока);
	КонецЦикла;
	
	Возврат СтрокиТекущегоОбъекта;
	
КонецФункции

&НаКлиенте
Процедура Подбор(Команда)
	
	СчетаРасчетов = Новый СписокЗначений;
	Для Каждого ТекущийСчет Из Объект.СчетаРасчетов Цикл
		Если ТекущийСчет.УчаствуетВРасчетах Тогда
			СчетаРасчетов.Добавить(ТекущийСчет.СчетРасчетов);
		КонецЕсли;
	КонецЦикла;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаКредиторы Тогда
		ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Кредиторская");
		ИмяТаблицы = "Кредиторы";
	Иначе
		ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Дебиторская");
		ИмяТаблицы = "Дебиторы";
	КонецЕсли;
	
	ЭлементВладелец  = Элементы[ИмяТаблицы];
	
	ВыбранныеОбъекты = Новый СписокЗначений;
	Для Каждого ТекущаяСтрока Из ЭтотОбъект[ИмяТаблицы] Цикл
		ВыбранныеОбъекты.Добавить(ТекущаяСтрока.Контрагент);
	КонецЦикла;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ДатаДокумента",    Объект.Дата);
	ПараметрыОтбора.Вставить("Организация",      Объект.Организация);
	ПараметрыОтбора.Вставить("СчетаРасчетов",    СчетаРасчетов);
	ПараметрыОтбора.Вставить("ВидЗадолженности", ВидЗадолженности);
	ПараметрыОтбора.Вставить("ВыбранныеОбъекты", ВыбранныеОбъекты);
	
	ОткрытьФорму("Документ.ИнвентаризацияРасчетовСКонтрагентами.Форма.ФормаПодбора",
		ПараметрыОтбора,
		ЭлементВладелец, , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СрокЗадолженностиВДнях(ДатаДокумента, ДатаПогашения)
	
	Сутки = 60 * 60 * 24;
	Возврат (НачалоДня(ДатаДокумента) - ДатаПогашения) / Сутки;
	
КонецФункции

&НаСервереБезКонтекста
Функция НоваяСтрокаДетальныйЗаписи()
	
	Результат = Новый Структура;
	Реквизиты = Метаданные.Документы.ИнвентаризацияРасчетовСКонтрагентами.ТабличныеЧасти.ДетальныеЗаписи.Реквизиты;
	Для Каждого ТекущийРеквизит Из Реквизиты Цикл
		Результат.Вставить(ТекущийРеквизит.Имя);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстОписанияСрокаЗадолженностиПоУмолчанию()
	
	Возврат НСтр("ru = 'Заполнить'");
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстОписанияСрокаЗадолженности(Знач ДетальныеЗаписи, Знач ДатаДокумента = Неопределено)
	
	Если ДетальныеЗаписи.Количество() = 0 Тогда
		Возврат ТекстОписанияСрокаЗадолженностиПоУмолчанию();
	КонецЕсли;
	
	СрокЗадолженностиМинимум = 0;
	СрокЗадолженностиМаксимум = 0;
	Для Каждого ТекущаяСтрока Из ДетальныеЗаписи Цикл
		СрокЗадолженности = СрокЗадолженностиВДнях(ДатаДокумента, ТекущаяСтрока.ДатаВозникновения);
		Если СрокЗадолженностиМинимум = 0 Или СрокЗадолженностиМинимум > СрокЗадолженности Тогда
			СрокЗадолженностиМинимум = СрокЗадолженности;
		КонецЕсли;
		Если СрокЗадолженностиМаксимум < СрокЗадолженности Тогда
			СрокЗадолженностиМаксимум = СрокЗадолженности;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Документы.ИнвентаризацияРасчетовСКонтрагентами.ПредставлениеСрокаЗадолженности(
		СрокЗадолженностиМинимум,
		СрокЗадолженностиМаксимум);
	
КонецФункции

&НаКлиенте
Процедура УдалитьСвязанныеДетальныеЗаписи(Отбор)
	
	Если Не Объект.ДетализироватьЗадолженность Тогда
		Возврат;
	КонецЕсли;
	
	ДетальныеЗаписиСтроки = Объект.ДетальныеЗаписи.НайтиСтроки(Отбор);
	Для Каждого ТекущаяСтрока Из ДетальныеЗаписиСтроки Цикл
		Объект.ДетальныеЗаписи.Удалить(ТекущаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСвязанныеДетальныеЗаписиНаСервере(Знач УдаляемыеСтроки, ИмяСписка)
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Отбор = Новый Структура("КлючСтроки", ЭтотОбъект[ИмяСписка].НайтиПоИдентификатору(УдаляемаяСтрока).КлючСтроки);
		ДетальныеЗаписиСтроки = Объект.ДетальныеЗаписи.НайтиСтроки(Отбор);
		Для Каждого ТекущаяСтрока Из ДетальныеЗаписиСтроки Цикл
			Объект.ДетальныеЗаписи.Удалить(ТекущаяСтрока);
		КонецЦикла;
	КонецЦикла;
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.ДебиторыСрокЗадолженности.Видимость = Объект.ДетализироватьЗадолженность;
	Элементы.КредиторыСрокЗадолженности.Видимость = Объект.ДетализироватьЗадолженность;
	Элементы.ДебиторыПодбор.Доступность = Не Форма.ТолькоПросмотр;
	Элементы.КредиторыПодбор.Доступность = Не Форма.ТолькоПросмотр;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Дебитор
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДебиторыКонтрагент");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Дебиторы.СчетРасчетов", ВидСравненияКомпоновкиДанных.ВСписке, СчетаИсключения);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Дебиторы.НаименованиеСчета"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДебиторыКонтрагент");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Дебиторы.КонтрагентДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Кредитор
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КредиторыКонтрагент");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Кредиторы.СчетРасчетов", ВидСравненияКомпоновкиДанных.ВСписке, СчетаИсключения);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Кредиторы.НаименованиеСчета"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КредиторыКонтрагент");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Кредиторы.КонтрагентДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаРасчетовУстановитьСнятьФлажки(Флаг)
	
	Для Каждого ТекущаяСтрока Из Объект.СчетаРасчетов Цикл
		
		ТекущаяСтрока.УчаствуетВРасчетах = Флаг;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьИзменениеСчета(Форма, ДебиторыКредиторы)
	
	ИдСтроки = Форма.Элементы[ДебиторыКредиторы].ТекущаяСтрока;
	Если ИдСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = Форма[ДебиторыКредиторы].НайтиПоИдентификатору(ИдСтроки);
	
	ПоляФормыСубконто1 = ДебиторыКредиторы + "Контрагент";
	ПоляОбъектаСубконто1 = "Контрагент";
	
	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетРасчетов);
	Если ДанныеСчета.КоличествоСубконто > 0 Тогда
		ТипЗначенияСубконто = ДанныеСчета["ВидСубконто1ТипЗначения"];
		
		Форма.Элементы[ПоляФормыСубконто1].ОграничениеТипа = ТипЗначенияСубконто;
		Форма.Элементы[ПоляФормыСубконто1].ПодсказкаВвода  = ДанныеСчета.ВидСубконто1Наименование;
		
		ЗначениеСубконто = ТипЗначенияСубконто.ПривестиЗначение(СтрокаТаблицы[ПоляОбъектаСубконто1]);
		СтрокаТаблицы[ПоляОбъектаСубконто1] = ЗначениеСубконто;
	Иначе
		СтрокаТаблицы[ПоляОбъектаСубконто1] = Неопределено;
	КонецЕсли;
	
	СтрокаТаблицы[ПоляОбъектаСубконто1 + "Доступность"] = ДанныеСчета.КоличествоСубконто > 0;
	
	УдалитьДетальныеЗаписиПриИзменении(Форма, ДебиторыКредиторы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДетальныеЗаписиПриИзменении(Форма, ДебиторыКредиторы)
	
	Объект = Форма.Объект;
	
	Если Не Объект.ДетализироватьЗадолженность Тогда
		Возврат;
	КонецЕсли;
	
	ИдСтроки = Форма.Элементы[ДебиторыКредиторы].ТекущаяСтрока;
	Если ИдСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = Форма[ДебиторыКредиторы].НайтиПоИдентификатору(ИдСтроки);
	
	// Найдем строки в подчиненной табличной части.
	ОтборПоКлючу = Новый Структура("КлючСтроки", СтрокаТаблицы.КлючСтроки);
	СтрокиДетальныеЗаписи = Объект.ДетальныеЗаписи.НайтиСтроки(ОтборПоКлючу);
	
	ЕстьИзменения = Ложь;
	
	Для Каждого СтрокаДетальныеЗаписи Из СтрокиДетальныеЗаписи Цикл
		
		Если СтрокаДетальныеЗаписи.СчетРасчетов <> СтрокаТаблицы.СчетРасчетов Тогда
			СтрокаДетальныеЗаписи.СчетРасчетов = СтрокаТаблицы.СчетРасчетов;
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		Если СтрокаДетальныеЗаписи.Субконто1 <> СтрокаТаблицы.Контрагент Тогда
			СтрокаДетальныеЗаписи.Субконто1 = СтрокаТаблицы.Контрагент;
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		Если ЕстьИзменения Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьИзменения Тогда
		// Удалим строки из подчиненной табличной части, т.к. их нужно будет перезаполнить заново.
		Для Каждого СтрокаДетальныеЗаписи Из СтрокиДетальныеЗаписи Цикл
			Объект.ДетальныеЗаписи.Удалить(СтрокаДетальныеЗаписи);
		КонецЦикла;
		
		// Обновим гиперссылку в колонке "Срок задолженности".
		СтрокаТаблицы.СрокЗадолженности = ТекстОписанияСрокаЗадолженностиПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
