#Область ОписаниеПеременных

&НаКлиенте
Перем ИдентификаторСтроки;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗакрыватьПриЗакрытииВладельца = Истина;
	
	ОбъектРасшифровки = Параметры.ОбъектРасшифровки;
	ДатаДокумента = Параметры.ДатаДокумента;
	СчетРасчетов = Параметры.СчетРасчетов;
	ВидЗадолженности = Параметры.ВидЗадолженности;
	Организация = Параметры.Организация;
	КлючСтроки = Параметры.КлючСтроки;
	
	СчетРасчетовСтрокой = СтрШаблон("%1 - %2",
		СчетРасчетов,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетРасчетов, "Наименование"));
	
	Если ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская Тогда
		ЗаголовокШаблон = НСтр("ru = 'Кредиторская задолженность: %1 - %2'");
	Иначе
		ЗаголовокШаблон = НСтр("ru = 'Дебиторская задолженность: %1 - %2'");
	КонецЕсли;
	
	Заголовок = СтрШаблон(ЗаголовокШаблон, СчетРасчетов, ОбъектРасшифровки);
	
	Для Каждого ТекущаяСтрока Из Параметры.ДетальныеЗаписи Цикл
		НоваяСтрока = ДетальныеЗаписи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока.Значение);
		НоваяСтрока.НомерСтроки = ДетальныеЗаписи.Количество();
		НоваяСтрока.СрокЗадолженности = СрокЗадолженностиВДнях(ДатаДокумента, НоваяСтрока.ДатаВозникновения);
		НоваяСтрока.Всего = ИтогоЗадолженностиПоТекущейСтроке(НоваяСтрока);
	КонецЦикла;
	
	УстановитьОформлениеСубконто();
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаписатьИЗакрыть();
	
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОК(Команда)
	
	ЗаписатьИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОСВ(Команда)
	
	ОборотноСальдоваяВедомость(СчетРасчетов, ОбъектРасшифровки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДетальныеЗаписи

&НаКлиенте
Процедура ДетальныеЗаписиПриИзменении(Элемент)
	
	НомерСтроки = 1;
	Для Каждого ТекущаяСтрока Из ДетальныеЗаписи Цикл
		ТекущаяСтрока.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДетальныеЗаписиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ДетальныеЗаписи.ТекущиеДанные;
	ИдСтроки      = Элементы.ДетальныеЗаписи.ТекущаяСтрока;
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные.СчетРасчетов = СчетРасчетов;
		ТекущиеДанные.Субконто1 = ОбъектРасшифровки;
		ТекущиеДанные.ВидЗадолженности = ВидЗадолженности;
		ТекущиеДанные.НомерСтроки = ДетальныеЗаписи.Количество();
		ТекущиеДанные.КлючСтроки = КлючСтроки;
		
	КонецЕсли;
	
	Если ИдСтроки <> ИдентификаторСтроки Тогда
		
		ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
			"ДетальныеЗаписиСубконто1", "ДетальныеЗаписиСубконто2", "ДетальныеЗаписиСубконто3");
		БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(
			ТекущиеДанные.СчетРасчетов, ЭтотОбъект, ПоляФормы, Неопределено, Истина, Ложь);
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, Ложь);
		
		ИдентификаторСтроки = ИдСтроки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДетальныеЗаписиДатаВозникновенияЗадолженностиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДетальныеЗаписи.ТекущиеДанные;
	ТекущиеДанные.СрокЗадолженности = СрокЗадолженностиВДнях(ДатаДокумента, ТекущиеДанные.ДатаВозникновения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДетальныеЗаписиПодтвержденоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДетальныеЗаписи.ТекущиеДанные;
	ТекущиеДанные.Всего = ИтогоЗадолженностиПоТекущейСтроке(ТекущиеДанные);
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДетальныеЗаписиСубконто1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьНачалоВыбораСубконто(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДетальныеЗаписиСубконто1ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДетальныеЗаписиСубконто2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьНачалоВыбораСубконто(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДетальныеЗаписиСубконто2ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);
	ДетальныеЗаписиДокументПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ДетальныеЗаписиСубконто3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьНачалоВыбораСубконто(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДетальныеЗаписиСубконто3ПриИзменении(Элемент)
	
	ДетальныеЗаписиДокументПриИзменении();
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИтогоЗадолженностиПоТекущейСтроке(ТекущаяСтрока)
	
	Возврат ТекущаяСтрока.Подтверждено + ТекущаяСтрока.НеПодтверждено + ТекущаяСтрока.ИстекСрокДавности;
	
КонецФункции

&НаСервере
Функция НовыйРезультатРасшифровкиЗадолженности()
	
	Результат = Новый Структура;
	Результат.Вставить("КлючСтроки", КлючСтроки);
	Результат.Вставить("ВидЗадолженности", ВидЗадолженности);
	Результат.Вставить("ДетальныеЗаписи");
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Форма.ИтогоВсего             = Форма.ДетальныеЗаписи.Итог("Всего");
	Форма.ИтогоПодтверждено      = Форма.ДетальныеЗаписи.Итог("Подтверждено");
	Форма.ИтогоНеПодтверждено    = Форма.ДетальныеЗаписи.Итог("НеПодтверждено");
	Форма.ИтогоИстекСрокДавности = Форма.ДетальныеЗаписи.Итог("ИстекСрокДавности");

КонецПроцедуры

&НаКлиенте
Процедура ОборотноСальдоваяВедомость(Счет, Субконто = Неопределено)
	
	Если Не ЗначениеЗаполнено(Счет) Тогда
		ТекстПредупреждения = НСтр("ru = 'Для данной строки не указан счет, оборотно-сальдовая ведомость сформирована не будет!';
									|en = 'Account for this line is not specified, trial balance will not be generated.'");
		ПоказатьПредупреждение( , ТекстПредупреждения, , Заголовок);
		Возврат;
	КонецЕсли;
	
	// Начало периода - дата возникновения задолженности
	Если Элементы.ДетальныеЗаписи.ТекущиеДанные = Неопределено Тогда
		НачалоПериода = ДатаДокумента;
	Иначе
		НачалоПериода = Элементы.ДетальныеЗаписи.ТекущиеДанные.ДатаВозникновения;
	КонецЕсли;
	
	// Инициализируем параметры расшифровки
	НастройкиРасшифровки = Новый Структура();
	
	// Инициализируем пользовательские настройки
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("ПоказательБУ",     Истина);
	ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
	ДополнительныеСвойства.Вставить("Организация",      Организация);
	ДополнительныеСвойства.Вставить("НачалоПериода",    НачалоПериода);
	ДополнительныеСвойства.Вставить("КонецПериода",     ДатаДокумента);
	ДополнительныеСвойства.Вставить("ПоСубсчетам",      Истина);
	
	// Инициализируем отборы
	ПользовательскиеОтборыДляСчета = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ПользовательскиеОтборыДляСчета.ИдентификаторПользовательскойНастройки = "Отбор";
	
	ДополнительныеСвойства.Вставить("Счет", Счет);
	
	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	
	НомерСубконто = 0;
	ТипСубконто = ТипЗнч(Субконто);
	Для Индекс = 1 По 3 Цикл
		
		ВидСубконтоТипЗначения = ДанныеСчета[СтрШаблон("ВидСубконто%1ТипЗначения", Индекс)];
		Если ТипЗнч(ВидСубконтоТипЗначения) = Тип("ОписаниеТипов") И ВидСубконтоТипЗначения.СодержитТип(ТипСубконто) Тогда
			НомерСубконто = Индекс;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Субконто) И НомерСубконто <> 0 Тогда
		// Субконто задано, в отчет по счету добавляем отбор по субконто
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборыДляСчета, "Субконто" + НомерСубконто, Субконто);
	КонецЕсли;
	
	// Добавляем группировку по субконто
	ГруппировкаСубконто = Новый Структура;
	ГруппировкаСубконто.Вставить("Поле",           "Субконто" + НомерСубконто);
	ГруппировкаСубконто.Вставить("Использование",  Истина);
	ГруппировкаСубконто.Вставить("ТипГруппировки", 0);
	
	// Группировка передается в отчет как массив структур
	// Элемент массива содержит структуру описывающую строку таблицы "Группировка" стандартного отчета.
	ДополнительныеСвойства.Вставить("Группировка", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ГруппировкаСубконто));
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.ОборотноСальдоваяВедомостьПоСчету.Форма.ФормаОтчета", ПараметрыФормы, , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть()

	Модифицированность = Ложь;

	ОповеститьОВыборе(ПараметрыРасшифровки());

КонецПроцедуры

&НаСервере
Функция ПараметрыРасшифровки()
	
	СтрокиТекущегоОбъекта = Новый Массив;
	ТЧ = ДетальныеЗаписи.Выгрузить();
	Для Каждого ТекущаяСтрока Из ТЧ Цикл
		СтрокиТекущегоОбъекта.Добавить(ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТекущаяСтрока));
	КонецЦикла;
	
	Результат = НовыйРезультатРасшифровкиЗадолженности();
	Результат.ДетальныеЗаписи = СтрокиТекущегоОбъекта;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция РеквизитыВыбранногоДокумента(Знач Документ, Знач СписокРеквизитов)
	
	Возврат Документы.ИнвентаризацияРасчетовСКонтрагентами.РеквизитыВыбранногоДокумента(Документ, СписокРеквизитов);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СрокЗадолженностиВДнях(ДатаДокумента, ДатаВозникновения)
	
	Если Не ЗначениеЗаполнено(ДатаВозникновения) Тогда
		Возврат 0;
	КонецЕсли;
	
	Сутки = 60 * 60 * 24;
	
	Возврат (ДатаДокумента - ДатаВозникновения) / Сутки;
	
КонецФункции

&НаСервере
Процедура УстановитьОформлениеСубконто()
	
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетРасчетов);
	
	СчетаРасчетовСПерсоналом = Документы.ИнвентаризацияРасчетовСКонтрагентами.СчетаРасчетовСПерсоналом();
	СчетаРасчетовСБюджетом   = Документы.ИнвентаризацияРасчетовСКонтрагентами.СчетаРасчетовСБюджетом();
	СчетаРасчетовИсключения  = Документы.ИнвентаризацияРасчетовСКонтрагентами.СчетаРасчетовСКонтрагентамиИсключения();
	
	Элементы.ДетальныеЗаписиСубконто1.Видимость = Ложь;
	
	Для НомерСубконто = 1 По 3 Цикл
		
		ВидСубконто = СтрШаблон("ВидСубконто%1", НомерСубконто);
		ВидСубконтоНаименование = СтрШаблон("ВидСубконто%1Наименование", НомерСубконто);
		ДетальныеЗаписиСубконто = СтрШаблон("ДетальныеЗаписиСубконто%1", НомерСубконто);
		ВидСубконтоТипЗначения  = СтрШаблон("ВидСубконто%1ТипЗначения", НомерСубконто);
		
		Если СчетаРасчетовСПерсоналом.Найти(СвойстваСчета.Ссылка) <> Неопределено Тогда
			
			// Для счетов расчетов с персоналом остатки задолженности собираются
			// только в разрезе субконто Работники организаций
			ПоказыватьСубконто = Ложь;
			
		ИначеЕсли СчетаРасчетовСБюджетом.Найти(СвойстваСчета.Ссылка) <> Неопределено Тогда
			
			// Для счетов расчетов с бюджетом остатки задолженности могут собираться
			// только в разрезе субконто Уровни бюджета
			ПоказыватьСубконто = СвойстваСчета[ВидСубконто] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УровниБюджетов;
			
		ИначеЕсли СчетаРасчетовИсключения.Найти(СвойстваСчета.Ссылка) <> Неопределено Тогда
			
			// Для счетов-исключений субконто не показываем
			ПоказыватьСубконто = Ложь;
			
		Иначе
			ПоказыватьСубконто = Истина;
		КонецЕсли;
		
		Если СвойстваСчета[ВидСубконто] = Неопределено Или Не ПоказыватьСубконто Тогда
			Элементы[ДетальныеЗаписиСубконто].Видимость = Ложь;
		Иначе
			Элементы[ДетальныеЗаписиСубконто].Заголовок = СвойстваСчета[ВидСубконтоНаименование];
			Элементы[ДетальныеЗаписиСубконто].ОграничениеТипа = СвойстваСчета[ВидСубконтоТипЗначения];
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДетальныеЗаписиДокументПриИзменении()
	
	ТекущиеДанные = Элементы.ДетальныеЗаписи.ТекущиеДанные;
	
	ДанныеДокумента = РеквизитыВыбранногоДокумента(ТекущиеДанные.Субконто3, "Дата, СуммаДокумента");
	Если ДанныеДокумента = Неопределено Тогда
		ТекущиеДанные.ДатаВозникновения = '00010101';
		ТекущиеДанные.Подтверждено      = 0;
		ТекущиеДанные.СрокЗадолженности = 0;
	Иначе
		ТекущиеДанные.ДатаВозникновения = ДанныеДокумента.Дата;
		ТекущиеДанные.Подтверждено      = ДанныеДокумента.СуммаДокумента;
		ТекущиеДанные.СрокЗадолженности = СрокЗадолженностиВДнях(ДатаДокумента, ТекущиеДанные.ДатаВозникновения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПараметров(Форма, ТекущиеДанные, ШаблонИмяПоляОбъекта, ИмяПоляСчетУчета)
	
	Если Форма.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Дебиторская") Тогда
		ДтКт = "Дт";
	Иначе
		ДтКт = "Кт";
	КонецЕсли;
	
	СписокПараметров = Новый Структура("Организация,СчетУчета,ОстаткиОбороты",
		Форма.Организация, ТекущиеДанные[ИмяПоляСчетУчета], ДтКт);
	ТипыДоговора = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора().Типы();
	Для Индекс = 1 По 3 Цикл
		ИмяПоля    = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		ДанныеПоля = ТекущиеДанные[ИмяПоля];
		ТипПоля    = ТипЗнч(ДанныеПоля);
		Если ТипПоля = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ДанныеПоля);
		ИначеЕсли ТипыДоговора.Найти(ТипПоля) <> Неопределено Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ДанныеПоля);
		ИначеЕсли ТипПоля = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ДанныеПоля);
		ИначеЕсли ТипПоля = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ДанныеПоля);
		КонецЕсли;
		
		Если Индекс = 3 Тогда
			СписокПараметров.Вставить("НачалоПериода", ТекущиеДанные.ДатаВозникновения);
		КонецЕсли;
	КонецЦикла;
	
	СписокПараметров.Вставить("РежимОтбораДокументов",
		ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоОборотам"));
	
	Возврат СписокПараметров;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, ОчищатьСвязанныеСубконто = Истина)
	
	ИдСтроки = Форма.Элементы.ДетальныеЗаписи.ТекущаяСтрока;
	Если ИдСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = Форма.ДетальныеЗаписи.НайтиПоИдентификатору(ИдСтроки);
	
	ПоляОбъекта = Новый Структура("Субконто2,Субконто3", "Субконто2", "Субконто3");
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Форма.СчетРасчетов, СтрокаТаблицы, ПоляОбъекта, Истина, , Ложь);
	
	ПараметрыДокумента = ПолучитьСписокПараметров(Форма, СтрокаТаблицы, "Субконто%Индекс%", "СчетРасчетов");
	
	Если ОчищатьСвязанныеСубконто Тогда
		ЗначенияСубконтоСтрокиТаблицы = СтрокаТаблицы;
	Иначе
		ЗначенияСубконтоСтрокиТаблицы = Новый Структура("Субконто1,Субконто2,Субконто3");
		ЗаполнитьЗначенияСвойств(ЗначенияСубконтоСтрокиТаблицы, СтрокаТаблицы);
	КонецЕсли;
	
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		Форма, ЗначенияСубконтоСтрокиТаблицы, "Субконто%Индекс%", "ДетальныеЗаписиСубконто%Индекс%", ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНачалоВыбораСубконто(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные      = Элементы.ДетальныеЗаписи.ТекущиеДанные;
	ПараметрыДокумента = ПолучитьСписокПараметров(ЭтотОбъект, ТекущиеДанные, "Субконто%Индекс%", "СчетРасчетов");
	НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораЗначенияСубконто(Форма, Элемент, СтандартнаяОбработка, СписокПараметров)
	
	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СписокПараметров.СчетУчета);
	ПараметрыВыбора = Новый Структура();
	
	Для Индекс = 1 По ДанныеСчета.КоличествоСубконто Цикл
		Если ДанныеСчета["ВидСубконто" + Индекс] = ПредопределенноеЗначение(
			"ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами")
			И ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"] = Элемент.ОграничениеТипа Тогда
			
			СтандартнаяОбработка = Ложь;
			
			СтруктураПараметров  = Новый Структура;
			Если ТипЗнч(СписокПараметров) = Тип("Структура") Тогда
				СтруктураПараметров.Вставить("Организация", СписокПараметров.Организация);
				Если СписокПараметров.Свойство("Контрагент") Тогда
					СтруктураПараметров.Вставить("Контрагент", СписокПараметров.Контрагент);
				КонецЕсли;
				Если СписокПараметров.Свойство("ДоговорКонтрагента") Тогда
					СтруктураПараметров.Вставить("ДоговорКонтрагента", СписокПараметров.ДоговорКонтрагента);
				КонецЕсли;
				Если СписокПараметров.Свойство("НачалоПериода") Тогда
					СтруктураПараметров.Вставить("НачалоПериода", СписокПараметров.НачалоПериода);
				КонецЕсли;
				Если СписокПараметров.Свойство("СчетУчета") Тогда
					СтруктураПараметров.Вставить("СчетУчета", СписокПараметров.СчетУчета);
				КонецЕсли;
				Если СписокПараметров.Свойство("ОстаткиОбороты") Тогда
					СтруктураПараметров.Вставить("ОстаткиОбороты", СписокПараметров.ОстаткиОбороты);
				КонецЕсли;
				Если СписокПараметров.Свойство("РежимОтбораДокументов") Тогда
					СтруктураПараметров.Вставить("РежимОтбораДокументов", СписокПараметров.РежимОтбораДокументов);
				КонецЕсли;
				Если СписокПараметров.Свойство("ТипыДокументов") Тогда
					СтруктураПараметров.Вставить("ТипыДокументов", СписокПараметров.ТипыДокументов);
				Иначе
					СтруктураПараметров.Вставить("ТипыДокументов", Элемент.ОграничениеТипа);
				КонецЕсли;
			КонецЕсли;
			ПараметрыФормы = Новый Структура("ПараметрыОбъекта", СтруктураПараметров);
			ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
		ИначеЕсли ДанныеСчета["ВидСубконто" + Индекс] = ПредопределенноеЗначение(
			"ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии")
			И ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"] = Элемент.ОграничениеТипа Тогда
			
			СтандартнаяОбработка = Ложь;
			
			СтруктураПараметров  = Новый Структура;
			СтруктураПараметров.Вставить("Организация", СписокПараметров.Организация);
			Если СписокПараметров.Свойство("Номенклатура") Тогда
				СтруктураПараметров.Вставить("Номенклатура", СписокПараметров.Номенклатура);
			КонецЕсли;
			Если СписокПараметров.Свойство("Склад") Тогда
				СтруктураПараметров.Вставить("Склад", СписокПараметров.Склад);
			КонецЕсли;
			Если СписокПараметров.Свойство("НачалоПериода") Тогда
				СтруктураПараметров.Вставить("НачалоПериода", СписокПараметров.НачалоПериода);
			КонецЕсли;
			Если СписокПараметров.Свойство("СчетУчета") Тогда
				СтруктураПараметров.Вставить("СчетУчета", СписокПараметров.СчетУчета);
			КонецЕсли;
			СтруктураПараметров.Вставить("ТипыДокументов", Элемент.ОграничениеТипа);
			
			ПараметрыФормы = Новый Структура("ПараметрыОбъекта", СтруктураПараметров);
			ОткрытьФорму("Документ.Партия.ФормаВыбора", ПараметрыФормы, Элемент);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
