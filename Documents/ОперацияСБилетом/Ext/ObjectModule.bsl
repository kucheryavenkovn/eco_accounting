
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);

	Если НЕ ЗначениеЗаполнено(СтавкаНДС) И ВидОперации = Перечисления.ВидыОперацийСБилетами.Доплата Тогда
		СтавкаНДС = УчетНДСКлиентСервер.ОсновнаяСтавкаНДСПоБилетам(Истина);
	КонецЕсли;	
	
	Документы.ОперацияСБилетом.ЗаполнитьНаОснованииПокупки(ЭтотОбъект);
		
	Если Не ЗначениеЗаполнено(ДоговорКонтрагента)
		И ЗначениеЗаполнено(Контрагент)
		И ЗначениеЗаполнено(Организация) Тогда
		
		РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
			ДоговорКонтрагента,
			Контрагент,
			Организация,
			Справочники.Билеты.ВидыДоговоровАгента());
				
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Сумма) 
		И ВидОперации = Перечисления.ВидыОперацийСБилетами.Возврат 
		И ЗначениеЗаполнено(Организация) 
		И ЗначениеЗаполнено(Билет) Тогда
		
		// Заполним сумму возврата - обычно это вся стоимость билета
		СуммыБилета = Справочники.Билеты.СуммыБилетов(Организация,,, Билет,, Ссылка);
			
		Если СуммыБилета.Количество() > 0 Тогда
			
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СуммыБилета[0], "Сумма, СтавкаНДС, СуммаНДС");
			
			// Рассчитаем сумму, не облагаемую НДС
			СтавкаНДСВПроцентах = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС);
			Если СтавкаНДСВПроцентах <> 0 Тогда
				ОблагаемаяСумма = СуммаНДС / СтавкаНДСВПроцентах * 100;
				СуммаНеОблагаемаяНДС = Сумма - ОблагаемаяСумма - СуммаНДС; 	
			КонецЕсли;	
					
		КонецЕсли;	
			
	КонецЕсли;	
		
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	РаботаСДоговорамиКонтрагентовБП.ЗаполнитьДоговорПередЗаписью(ЭтотОбъект);
	
	СчетаУчетаВДокументах.ЗаполнитьПередЗаписью(ЭтотОбъект, РежимЗаписи);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если ВидОперации <> Перечисления.ВидыОперацийСБилетами.ЗаменаВозврат 
		И ВидОперации <> Перечисления.ВидыОперацийСБилетами.Обмен Тогда
		МассивНепроверяемыхРеквизитов.Добавить("БилетЗамена");
	КонецЕсли; 	
	
	// Табличная часть "Зачет авансов"
	Если СпособЗачетаАвансов <> Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ЗачетАвансов");
	ИначеЕсли ЗачетАвансов.Количество() = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ЗачетАвансов");
	
		ТекстСообщения = НСтр("ru = 'Не введено ни одной строки с документом аванса!'");
		Поле = "ПорядокУчетаРасчетов";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , Поле, Отказ);
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	РеквизитыЗаСсылками = Документы.ОперацияСБилетом.РеквизитыЗаСсылками();
	
	СчетаУчетаВДокументах.ПроверитьЗаполнение(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, РеквизитыЗаСсылками);
	
	ПроверкаЗаполненияДокументов.ПроверитьРеквизитыЗаСсылками(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, РеквизитыЗаСсылками);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПроведения = Документы.ОперацияСБилетом.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	// Таблица взаиморасчетов при возврате
	ТаблицаВзаиморасчетовВозврат = УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
		ПараметрыПроведения.ВозвратТаблицаДокумента, 
		Неопределено, 
		ПараметрыПроведения.ВозвратРеквизиты, 
		Отказ);
	
	// Таблица взаиморасчетов с учетом зачета авансов
	ТаблицаВзаиморасчетов = УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
		ПараметрыПроведения.ЗачетАвансовТаблицаДокумента,
		ПараметрыПроведения.ТаблицаЗачетАвансов, 
		ПараметрыПроведения.ЗачетАвансовРеквизиты, 
		Отказ);
		
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	// Отражение возврата во взаиморасчетах
	УчетВзаиморасчетов.СформироватьДвиженияЗачетАвансов(ТаблицаВзаиморасчетовВозврат,
		ПараметрыПроведения.ВозвратРеквизиты, Движения, Отказ);
	
	// Зачет аванса на сумму поступления
	УчетВзаиморасчетов.СформироватьДвиженияЗачетАвансов(ТаблицаВзаиморасчетов,
		ПараметрыПроведения.ЗачетАвансовРеквизиты, Движения, Отказ);
				
	// Хозрасчетный
	Документы.ОперацияСБилетом.СформироватьДвиженияХозрасчетный(ПараметрыПроведения.Реквизиты, Движения, Отказ); 
	
	// УСН
	
	// Данные для отражения в налоговом учете УСН
	СтруктураДопПараметровУСН = Новый Структура;
	СтруктураДопПараметровУСН.Вставить("ТаблицаРасчетов", ТаблицаВзаиморасчетов);
	
	Если ВидОперации = Перечисления.ВидыОперацийСБилетами.Возврат
		 Или ВидОперации = Перечисления.ВидыОперацийСБилетами.ЗаменаВозврат
		 Или ВидОперации = Перечисления.ВидыОперацийСБилетами.Обмен Тогда
		 
		СтруктураДопПараметровУСН.Вставить("ТаблицаБилетов", ПараметрыПроведения.ТаблицаБилетов);
		
	КонецЕсли;	
		
	СуммаСторноРасхода = 0;
	// Для операций Возврат и ЗаменаВозврат таблица ПоступлениеРасходовУСНТаблицаРасходов == Неопределено,
	// поэтому фактически движений поступления расходов не создается
	УчетУСН.ПоступлениеРасходовУСН(ПараметрыПроведения.ПоступлениеРасходовУСНТаблицаРасходов, 
		ПараметрыПроведения.ПоступлениеРасходовУСНРеквизиты, СуммаСторноРасхода, Движения, Отказ);
	
	Если НЕ Отказ И Движения.РасходыПриУСН.Количество() > 0 Тогда
		Движения.РасходыПриУСН.Записать(Истина);
		Движения.РасходыПриУСН.Записывать = Ложь;
	КонецЕсли; 
						
	НалоговыйУчетУСН.СформироватьДвиженияУСН(ЭтотОбъект, СтруктураДопПараметровУСН);
	
	// Отложенные расчеты с контрагентами.
	УчетВзаиморасчетовОтложенноеПроведение.ЗарегистрироватьОтложенныеРасчетыСКонтрагентами(
		ЭтотОбъект, Отказ, ПараметрыПроведения.РасчетыСКонтрагентамиОтложенноеПроведение);
		
	// Регистрация в последовательности
	РаботаСПоследовательностями.ЗарегистрироватьОтложенныеРасчетыВПоследовательности(
		ЭтотОбъект, Отказ, ПараметрыПроведения.РасчетыСКонтрагентамиОтложенноеПроведение);
		
	ПроведениеСервер.УстановитьЗаписьОчищаемыхНаборовЗаписей(ЭтотОбъект);
		
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

	РаботаСПоследовательностями.ОтменитьРегистрациюВПоследовательности(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли