#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		
#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьНаОснованииПокупки(ОперацияОбъект) Экспорт 
		
	Если ОперацияОбъект.ВидОперации = Перечисления.ВидыОперацийСБилетами.Покупка Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ОперацияОбъект.Билет) Тогда
		Возврат;
	КонецЕсли;	
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Покупка.Организация КАК Организация,
	|	Покупка.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Покупка.Контрагент КАК Контрагент,
	|	Покупка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Покупка.СтавкаНДС КАК СтавкаНДС,
	|	Покупка.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	Покупка.СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОперацияСБилетом.Дата КАК Дата,
	|		ОперацияСБилетом.Организация КАК Организация,
	|		ОперацияСБилетом.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|		ОперацияСБилетом.Контрагент КАК Контрагент,
	|		ОперацияСБилетом.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|		ОперацияСБилетом.СтавкаНДС КАК СтавкаНДС,
	|		ОперацияСБилетом.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|		ОперацияСБилетом.СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам
	|	ИЗ
	|		Документ.ОперацияСБилетом КАК ОперацияСБилетом
	|	ГДЕ
	|		ОперацияСБилетом.Билет = &Билет
	|		И ОперацияСБилетом.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСБилетами.Покупка)
	|		И ОперацияСБилетом.Проведен
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОперацияСБилетом.Дата,
	|		ОперацияСБилетом.Организация,
	|		ОперацияСБилетом.ПодразделениеОрганизации,
	|		ОперацияСБилетом.Контрагент,
	|		ОперацияСБилетом.ДоговорКонтрагента,
	|		ОперацияСБилетом.СтавкаНДС,
	|		ОперацияСБилетом.СчетУчетаРасчетовСКонтрагентом,
	|		ОперацияСБилетом.СчетУчетаРасчетовПоАвансам
	|	ИЗ
	|		Документ.ОперацияСБилетом КАК ОперацияСБилетом
	|	ГДЕ
	|		ОперацияСБилетом.БилетЗамена = &Билет
	|		И ОперацияСБилетом.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСБилетами.Обмен)
	|		И ОперацияСБилетом.Проведен) КАК Покупка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	Запрос.УстановитьПараметр("Билет", ОперацияОбъект.Билет);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;	
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();  // в выборке 1 запись
	
	РеквизитыПокупки = Новый Структура;
	
	// Часть реквизитов важнее заполнить по операции покупки,
	// т.к. в большинстве случаев указанные ниже реквизиты должны быть одинаковые для всех операций с одним и тем же билетом.
	// Такие реквизиты заполняются из покупки безусловно.
	// Остальные реквизиты заполняются из покупки только в том случе, если не заполнены иными способами.
	РеквизитыЗаполняемыеИзПокупки = Новый Массив;  
	РеквизитыЗаполняемыеИзПокупки.Добавить("СчетУчетаРасчетовСКонтрагентом");
	РеквизитыЗаполняемыеИзПокупки.Добавить("СчетУчетаРасчетовПоАвансам");
	
	Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
		
		ИмяРеквизитаПокупки = Колонка.Имя;
		ЗначениеРеквизитаПокупки = Выборка[ИмяРеквизитаПокупки];
		
		Если Не ЗначениеЗаполнено(ЗначениеРеквизитаПокупки) Тогда
			Продолжить;
		КонецЕсли;	
		
		// Заполненный реквизит обновляем только если он входит в список безусловно обновляемых (см. выше)
		Если РеквизитыЗаполняемыеИзПокупки.Найти(ИмяРеквизитаПокупки) = Неопределено И ЗначениеЗаполнено(ОперацияОбъект[ИмяРеквизитаПокупки]) Тогда
			Продолжить;
		КонецЕсли;	
		
		// Если контрагент в текущем документе отличается от операции покупки, то и договор из покупки не заполняем
		Если ИмяРеквизитаПокупки = "ДоговорКонтрагента" 
			И ЗначениеЗаполнено(ОперацияОбъект.Контрагент) 
			И ОперацияОбъект.Контрагент <> Выборка.Контрагент Тогда
			Продолжить;
		КонецЕсли;	
		
		РеквизитыПокупки.Вставить(ИмяРеквизитаПокупки, ЗначениеРеквизитаПокупки); 
		
	КонецЦикла; 
	
	ЗаполнитьЗначенияСвойств(ОперацияОбъект, РеквизитыПокупки);
		
КонецПроцедуры	

#Область СчетаУчета

Процедура УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт

	// расчеты с поставщиком
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентом", "РасчетыСПоставщиком");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовПоАвансам", "АвансыПоставщику");
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Подразделение", "ПодразделениеОрганизации");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "ДоговорКонтрагента");
		
КонецПроцедуры

#КонецОбласти

Функция РеквизитыЗаСсылками() Экспорт
	
	РеквизитыЗаСсылками = Новый Соответствие;
	
	// Прячутся за "ПорядокУчетаРасчетов"
	Для Каждого ОписаниеРеквизита Из УчетВзаиморасчетовФормы.РеквизитыДокументаПорядокУчетаРасчетов() Цикл
		РеквизитыЗаСсылками.Вставить(ОписаниеРеквизита.Ключ, "ПорядокУчетаРасчетов");
	КонецЦикла;
	
	Возврат РеквизитыЗаСсылками;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ПодготовкаПараметровПроведенияДокумента

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ, ДоговорДляОтложенногоПроведения = Неопределено) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	ЭтоОтложенноеПроведение = ЗначениеЗаполнено(ДоговорДляОтложенногоПроведения);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Дата, Организация, ВидОперации, Билет");
	
	// Операция вида "Обмен" одновременно списывает стоимость прежнего билета и приходует новый билет по указанной стоимости.
	// При этом стоимость прежнего билета явно в документе не указывается - ее нужно рассчитать по остаткам на счете учета билетов.
	// Для этого блокируем регистр бухгалтерии по счету учета билетов и по значению реквизита документа "Билет"
	// (в данном реквизите указан именно возвращаемый билет).
	// Полученную сумму билета помещаем в ВТ_ОбменБилета. Для других операций создается пустая временная таблица ВТ_ОбменБилета.
	// Для операций Возврат и ЗаменаВозврат сумма возврата указана явно - учтем ее ниже (см. запрос временной таблицы ТаблицаСуммВзаиморасчетовВозврат).
	Если РеквизитыДокумента.ВидОперации = Перечисления.ВидыОперацийСБилетами.Обмен Тогда
				
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Хозрасчетный");
		ЭлементБлокировки.УстановитьЗначение("Период",      Новый Диапазон(, РеквизитыДокумента.Дата));
		ЭлементБлокировки.УстановитьЗначение("Организация", РеквизитыДокумента.Организация);
		ЭлементБлокировки.УстановитьЗначение("Счет",        УчетКомандировок.СчетУчетаБилетов());
		ЭлементБлокировки.УстановитьЗначение(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Билеты,
			РеквизитыДокумента.Билет);
			
		Блокировка.Заблокировать();
			
		Запрос.УстановитьПараметр("Период", РеквизитыДокумента.Дата);
		Запрос.УстановитьПараметр("СчетУчетаБилетов", УчетКомандировок.СчетУчетаБилетов());
		Запрос.УстановитьПараметр("СубконтоБилеты", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Билеты);
		Запрос.УстановитьПараметр("Билет", РеквизитыДокумента.Билет);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаВозврата
		|ПОМЕСТИТЬ ВТ_ОбменБилета
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет = &СчетУчетаБилетов, &СубконтоБилеты, Субконто1 = &Билет) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ХозрасчетныйОстатки.СуммаОстаток > 0";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	0 КАК СуммаВозврата 
		|ПОМЕСТИТЬ ВТ_ОбменБилета
		|ГДЕ
		|	ЛОЖЬ";
		
	КонецЕсли;	
	
	Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Билет КАК Билет,
	|	Реквизиты.Билет.Сотрудник КАК Сотрудник,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.БилетЗамена КАК БилетЗамена,
	|	Реквизиты.БилетЗамена.Сотрудник КАК СотрудникЗамена,
	|	&ВалютаРегламентированногоУчета КАК ВалютаВзаиморасчетов,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетов,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
	|	Реквизиты.Сумма КАК Сумма,
	|	Реквизиты.СуммаНДС КАК СуммаНДС,
	|	Реквизиты.Штраф КАК Штраф,
	|	Реквизиты.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	&ВалютаРегламентированногоУчета КАК ВалютаДокумента
	|ПОМЕСТИТЬ ВТ_Реквизиты
	|ИЗ
	|	Документ.ОперацияСБилетом КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаРуб) КАК СуммаРуб,
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов
	|ПОМЕСТИТЬ ТаблицаСуммВзаиморасчетов
	|ИЗ
	|	(ВЫБРАТЬ
	|		Реквизиты.Сумма КАК СуммаРуб,
	|		Реквизиты.Сумма КАК СуммаВзаиморасчетов
	|	ИЗ
	|		ВТ_Реквизиты КАК Реквизиты
	|	ГДЕ
	|		НЕ Реквизиты.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСБилетами.Возврат), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСБилетами.ЗаменаВозврат))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Реквизиты.Штраф,
	|		Реквизиты.Штраф
	|	ИЗ
	|		ВТ_Реквизиты КАК Реквизиты
	|	ГДЕ
	|		Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСБилетами.Возврат)) КАК ТаблицаСуммВзаиморасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаРуб) КАК СуммаРуб,
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов
	|ПОМЕСТИТЬ ТаблицаСуммВзаиморасчетовВозврат
	|ИЗ
	|	(ВЫБРАТЬ
	|		Реквизиты.Сумма КАК СуммаРуб,
	|		Реквизиты.Сумма КАК СуммаВзаиморасчетов
	|	ИЗ
	|		ВТ_Реквизиты КАК Реквизиты
	|	ГДЕ
	|		Реквизиты.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСБилетами.Возврат), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСБилетами.ЗаменаВозврат))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_ОбменБилета.СуммаВозврата,
	|		ВТ_ОбменБилета.СуммаВозврата
	|	ИЗ
	|		ВТ_ОбменБилета КАК ВТ_ОбменБилета) КАК ТаблицаСуммВзаиморасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Подразделение КАК Подразделение,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Билет КАК Билет,
	|	Реквизиты.БилетЗамена КАК БилетЗамена,
	|	Реквизиты.Сотрудник КАК Сотрудник,
	|	Реквизиты.СотрудникЗамена КАК СотрудникЗамена,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.СчетРасчетов КАК СчетРасчетов,
	|	Реквизиты.СчетАвансов КАК СчетАвансов,
	|	Реквизиты.Сумма КАК Сумма,
	|	Реквизиты.СуммаНДС КАК СуммаНДС,
	|	Реквизиты.Штраф КАК Штраф,
	|	Реквизиты.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	ЕСТЬNULL(ОбменБилета.СуммаВозврата, 0) КАК СуммаВозврата,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	ЕСТЬNULL(ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов, 0) КАК СуммаВзаиморасчетов,
	|	ЕСТЬNULL(ТаблицаСуммВзаиморасчетовВозврат.СуммаВзаиморасчетов, 0) КАК СуммаВзаиморасчетовВозврат
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	ВТ_Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСуммВзаиморасчетов КАК ТаблицаСуммВзаиморасчетов
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСуммВзаиморасчетовВозврат КАК ТаблицаСуммВзаиморасчетовВозврат
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОбменБилета КАК ОбменБилета
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Билет КАК Билет,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	Реквизиты.СуммаВзаиморасчетов > 0 КАК ЕстьПоступление,
	|	Реквизиты.СуммаВзаиморасчетовВозврат > 0 КАК ЕстьВозврат
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Реквизиты";
	
	Результат = Запрос.ВыполнитьПакет();
	Реквизиты = ОбщегоНазначенияБПВызовСервера.ПолучитьСтруктуруИзРезультатаЗапроса(Результат[4]);
	
	Если НЕ УчетнаяПолитика.Существует(Реквизиты.Организация, Реквизиты.Период, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	ПрименяетсяУСНДоходыМинусРасходы = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период);
	
	Реквизиты.Вставить("ПрименяетсяУСНДоходыМинусРасходы", ПрименяетсяУСНДоходыМинусРасходы);
	Реквизиты.Вставить("ЭтоОтложенноеПроведение", ЭтоОтложенноеПроведение);
	Реквизиты.Вставить("ИспользуетсяОтложенноеПроведение",
		ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Реквизиты.Организация, Реквизиты.Период));
		
	Запрос.УстановитьПараметр("СчетУчетаБилетов", УчетКомандировок.СчетУчетаБилетов());
		
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
		+ ТекстЗапросаЗачетАвансов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаВозвратВУСН(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаВозврат(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПоступлениеРасходовУСН(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРегистрацияОтложенныхРасчетовСКонтрагентами(НомераТаблиц, ПараметрыПроведения, Реквизиты);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
		
	Возврат ПараметрыПроведения;
	
КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Подразделение КАК Подразделение,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.Билет КАК Билет,
	|	Реквизиты.БилетЗамена КАК БилетЗамена,
	|	Реквизиты.Сотрудник КАК Сотрудник,
	|	Реквизиты.СотрудникЗамена КАК СотрудникЗамена,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.СчетРасчетов КАК СчетРасчетов,
	|	Реквизиты.СчетАвансов КАК СчетАвансов,
	|	Реквизиты.Сумма КАК Сумма,
	|	Реквизиты.Штраф КАК Штраф,
	|	Реквизиты.СуммаВозврата КАК СуммаВозврата
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаЗачетАвансов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если НЕ Реквизиты.ЕстьПоступление Тогда
		ПараметрыПроведения.Вставить("ЗачетАвансовРеквизиты",        Неопределено);
		ПараметрыПроведения.Вставить("ЗачетАвансовТаблицаДокумента", Неопределено);
		ПараметрыПроведения.Вставить("ТаблицаЗачетАвансов",          Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ЗачетАвансовРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовТаблицаДокумента", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	ЛОЖЬ КАК УчитыватьЗадолженностьУСН,
	|	ЛОЖЬ КАК УчитыватьЗадолженностьУСНПатент,
	|	ЛОЖЬ КАК ДеятельностьНаПатенте,
	|	ЛОЖЬ КАК ДеятельностьНаТорговомСборе,
	|	""Поступление"" КАК НаправлениеДвижения,
	|	ЛОЖЬ КАК ЭтоВозврат
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК ДокументРасчетов,
	|	Реквизиты.СчетРасчетов КАК СчетРасчетов,
	|	Реквизиты.СчетАвансов КАК СчетАвансов,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ЛОЖЬ КАК РасчетыВУсловныхЕдиницах,
	|	ЛОЖЬ КАК УчетАгентскогоНДС,
	|	ЛОЖЬ КАК РасчетыВВалюте,
	|	Реквизиты.Подразделение КАК Подразделение,
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ТаблицаСуммВзаиморасчетов.СуммаРуб КАК СуммаРуб,
	|	0 КАК СуммаВзаиморасчетовКомитента,
	|	0 КАК СуммаВзаиморасчетовЕНВД,
	|	0 КАК СуммаВзаиморасчетовПатент,
	|	0 КАК СуммаВзаиморасчетовТорговыйСбор
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСуммВзаиморасчетов КАК ТаблицаСуммВзаиморасчетов
	|		ПО (ИСТИНА)";
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

	Если Реквизиты.СпособЗачетаАвансов <> Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		ПараметрыПроведения.Вставить("ТаблицаЗачетАвансов", Неопределено);
	Иначе
		НомераТаблиц.Вставить("ТаблицаЗачетАвансов", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса
		+ "ВЫБРАТЬ
		|	ОперацияСБилетомЗачетАвансов.НомерСтроки КАК НомерСтроки,
		|	Реквизиты.СчетАвансов КАК СчетАвансов,
		|	Реквизиты.Контрагент КАК Контрагент,
		|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ОперацияСБилетомЗачетАвансов.ДокументАванса КАК ДокументАванса,
		|	ОперацияСБилетомЗачетАвансов.СуммаЗачета КАК СуммаЗачета
		|ИЗ
		|	Документ.ОперацияСБилетом.ЗачетАвансов КАК ОперацияСБилетомЗачетАвансов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ОперацияСБилетомЗачетАвансов.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВозвратВУСН(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ПрименяетсяУСНДоходыМинусРасходы 
		 ИЛИ НЕ Реквизиты.ВидОперации = Перечисления.ВидыОперацийСБилетами.ЗаменаВозврат
		 И НЕ Реквизиты.ВидОперации = Перечисления.ВидыОперацийСБилетами.Возврат
		 И НЕ Реквизиты.ВидОперации = Перечисления.ВидыОперацийСБилетами.Обмен Тогда
		ПараметрыПроведения.Вставить("ТаблицаБилетов", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ТаблицаБилетов", НомераТаблиц.Количество());
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийСБилетами.Обмен Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Реквизиты.Билет КАК Билет,
		|	Реквизиты.СуммаВозврата КАК Сумма
		|ИЗ
		|	Реквизиты КАК Реквизиты";
	Иначе
		// Возврат, ЗаменаВозврат
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Реквизиты.Билет КАК Билет,
		|	Реквизиты.Сумма КАК Сумма
		|ИЗ
		|	Реквизиты КАК Реквизиты";
	КонецЕсли;	
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции	

Функция ТекстЗапросаВозврат(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если НЕ Реквизиты.ЕстьВозврат Тогда
		ПараметрыПроведения.Вставить("ВозвратРеквизиты", Неопределено);
		ПараметрыПроведения.Вставить("ВозвратТаблицаДокумента",	 Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ВозвратРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВозвратТаблицаДокумента", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически) КАК СпособЗачетаАвансов,
	|	ЛОЖЬ КАК УчитыватьЗадолженностьУСН,
	|	ЛОЖЬ КАК УчитыватьЗадолженностьУСНПатент,
	|	ЛОЖЬ КАК ДеятельностьНаПатенте,
	|	ЛОЖЬ КАК ДеятельностьНаТорговомСборе,
	|	""Выбытие"" КАК НаправлениеДвижения,
	|	ИСТИНА КАК ЭтоВозврат
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК ДокументРасчетов,
	|	Реквизиты.СчетРасчетов КАК СчетРасчетов,
	|	Реквизиты.СчетРасчетов КАК СчетАвансов,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ЛОЖЬ КАК РасчетыВУсловныхЕдиницах,
	|	ЛОЖЬ КАК УчетАгентскогоНДС,
	|	ЛОЖЬ КАК РасчетыВВалюте,
	|	Реквизиты.Подразделение КАК Подразделение,
	|	ТаблицаСуммВзаиморасчетовВозврат.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ТаблицаСуммВзаиморасчетовВозврат.СуммаРуб КАК СуммаРуб,
	|	0 КАК СуммаВзаиморасчетовКомитента,
	|	0 КАК СуммаВзаиморасчетовЕНВД,
	|	0 КАК СуммаВзаиморасчетовПатент,
	|	0 КАК СуммаВзаиморасчетовТорговыйСбор
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСуммВзаиморасчетовВозврат КАК ТаблицаСуммВзаиморасчетовВозврат
	|		ПО (ИСТИНА)";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаПоступлениеРасходовУСН(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	Если НЕ Реквизиты.ПрименяетсяУСНДоходыМинусРасходы 
		 ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийСБилетами.ЗаменаВозврат
		 ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийСБилетами.Возврат Тогда
		ПараметрыПроведения.Вставить("ПоступлениеРасходовУСНРеквизиты",       Неопределено);
		ПараметрыПроведения.Вставить("ПоступлениеРасходовУСНТаблицаРасходов", Неопределено);
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.ВалютаДокумента КАК Валюта,
	|	ЛОЖЬ КАК УчетАгентскогоНДС,
	|	ЛОЖЬ КАК ЭтоВозврат,
	|	ЛОЖЬ КАК РасходыПредпринимателя
	|ИЗ
	|	Реквизиты КАК Реквизиты"
	+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	НомераТаблиц.Вставить("ПоступлениеРасходовУСНРеквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Командировки) КАК ВидРасхода,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыПартийУСН.Купленные) КАК СтатусыПартийУСН,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСБилетами.Обмен)
	|			ТОГДА Реквизиты.БилетЗамена
	|		ИНАЧЕ Реквизиты.Билет
	|	КОНЕЦ КАК ЭлементРасхода,
	|	ЛОЖЬ КАК ЭтоТовар,
	|	ЛОЖЬ КАК ЭтоМатериал,
	|	&СчетУчетаБилетов КАК СчетУчета,
	|	НЕОПРЕДЕЛЕНО КАК Партия,
	|	0 КАК Количество,
	|	Реквизиты.Сумма КАК Сумма,
	|	Реквизиты.СуммаНДС КАК НДС,
	|	ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.Принимаются) КАК ОтражениеВУСН
	|ИЗ
	|	Реквизиты КАК Реквизиты";
			
	НомераТаблиц.Вставить("ПоступлениеРасходовУСНТаблицаРасходов", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаРегистрацияОтложенныхРасчетовСКонтрагентами(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если Не Реквизиты.ИспользуетсяОтложенноеПроведение
		ИЛИ Реквизиты.ЭтоОтложенноеПроведение Тогда
		ПараметрыПроведения.Вставить("РасчетыСКонтрагентамиОтложенноеПроведение", Неопределено);
		Возврат "";
	КонецЕсли;

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.Период КАК Дата
	|ИЗ
	|	Реквизиты КАК Реквизиты";

	НомераТаблиц.Вставить("РасчетыСКонтрагентамиОтложенноеПроведение", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Процедура УпорядочитьТаблицуВзаиморасчетов(ТаблицаВзаиморасчетов, КолонкаДокумента, ДокументСсылка) Экспорт 
	
	Если ТаблицаВзаиморасчетов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// В первую очередь "закрываем" долги по операциям с тем же билетом, что и текущая операция.
	// Для этого по документам расчетов Операция с билетом определим,
	// какие относятся к тому же билету - долги/авансы по ним закрываем первыми.
	ТаблицаВзаиморасчетов.Колонки.Добавить("РасчетыПоТекущемуБилету", Новый ОписаниеТипов("Булево"));
	
	// Упорядочивание по дате длокумента расчетов также выполняется, но оно вторично
	Если ТаблицаВзаиморасчетов.Колонки.Найти("ДатаДокументаРасчетов") = Неопределено Тогда
		ТаблицаВзаиморасчетов.Колонки.Добавить("ДатаДокументаРасчетов", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	КонецЕсли;
	
	КэшПоТипам = Новый Соответствие;
	
	Для каждого СтрокаТаблицы из ТаблицаВзаиморасчетов Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы[КолонкаДокумента]) тогда
			Продолжить;
		КонецЕсли;
		
		ТипТекущегоДокумента = ТипЗнч(СтрокаТаблицы[КолонкаДокумента]);
		МассивТипа = КэшПоТипам[ТипТекущегоДокумента];
		Если МассивТипа = Неопределено Тогда
			МассивТипа = Новый Массив;
			КэшПоТипам.Вставить(ТипТекущегоДокумента, МассивТипа);
		КонецЕсли;
		МассивТипа.Добавить(СтрокаТаблицы[КолонкаДокумента]);
	КонецЦикла;
	
	Если КэшПоТипам.Количество()=0 тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый запрос;
	
	Для Каждого КлючИЗначение ИЗ КэшПоТипам Цикл
		
		ИмяМетаданных = Метаданные.НайтиПоТипу(КлючИЗначение.Ключ).Имя;
		
		Если КлючИЗначение.Ключ = Тип("ДокументСсылка.ОперацияСБилетом") Тогда
			ТекстПоляУпорядочиванияПоБилету = "Док.Билет = &Билет 
			|		ИЛИ Док.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийсБилетами.Обмен) И Док.БилетЗамена = &Билет";
		Иначе
			ТекстПоляУпорядочиванияПоБилету = "ЛОЖЬ";
		КонецЕсли;	
		
		Запрос.Текст = Запрос.Текст + ?(Запрос.Текст = "",
			"",
			"
			|Объединить Все
			|");
			
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	Док.Ссылка КАК Ссылка,
		|	Док.Дата КАК Дата,
		|	"+ТекстПоляУпорядочиванияПоБилету+" КАК РасчетыПоТекущемуБилету
		|ИЗ
		|	Документ."+ИмяМетаданных+" КАК Док
		|ГДЕ
		|	Док.Ссылка В(&ДокументыТипа_"+ИмяМетаданных+")";
		
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(КлючИЗначение.Значение);
		Запрос.УстановитьПараметр("ДокументыТипа_"+ИмяМетаданных, КлючИЗначение.Значение);
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Билет", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Билет"));
	
	ТаблицаВзаиморасчетов.Индексы.Добавить(КолонкаДокумента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить(КолонкаДокумента, Выборка.Ссылка);
		
		НайденныеСтроки = ТаблицаВзаиморасчетов.НайтиСтроки(ПараметрыОтбора);
		Для Каждого Cтрока ИЗ НайденныеСтроки Цикл
			Cтрока.ДатаДокументаРасчетов = Выборка.Дата;
			Cтрока.РасчетыПоТекущемуБилету = Выборка.РасчетыПоТекущемуБилету;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаВзаиморасчетов.Сортировать("РасчетыПоТекущемуБилету Убыв, ДатаДокументаРасчетов Возр", Новый СравнениеЗначений);
	
КонецПроцедуры	

#КонецОбласти

#Область ОтложенноеПроведение

Процедура ОбработкаОтложенногоПроведения(Параметры, Отказ) Экспорт
	
	ПараметрыПроведения = ПодготовитьПараметрыПроведения(
		Параметры.Регистратор,
		Отказ,
		Параметры.ДоговорКонтрагента);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	

	// Таблица взаиморасчетов при возврате
	ТаблицаВзаиморасчетовВозврат = УчетВзаиморасчетовОтложенноеПроведение.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
	    Параметры,
		ПараметрыПроведения.ВозвратТаблицаДокумента, 
		Неопределено, 
		ПараметрыПроведения.ВозвратРеквизиты, 
		Отказ);
		
	УчетВзаиморасчетовОтложенноеПроведение.СформироватьДвиженияЗачетАвансов(
	    Параметры,
		ТаблицаВзаиморасчетовВозврат,
		ПараметрыПроведения.ВозвратРеквизиты,
		Отказ);
		
	// Таблица взаиморасчетов с учетом зачета авансов
	ТаблицаВзаиморасчетов = УчетВзаиморасчетовОтложенноеПроведение.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
		Параметры,
		ПараметрыПроведения.ЗачетАвансовТаблицаДокумента,
		ПараметрыПроведения.ТаблицаЗачетАвансов, 
		ПараметрыПроведения.ЗачетАвансовРеквизиты, 
		Отказ);
			
	УчетВзаиморасчетовОтложенноеПроведение.СформироватьДвиженияЗачетАвансов(
		Параметры,
		ТаблицаВзаиморасчетов,
		ПараметрыПроведения.ЗачетАвансовРеквизиты,
		Отказ);
				
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыФормированияДвижений

Функция ПодготовитьПараметрыХозрасчетный(ТаблицаОписаниеОперации)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаОперацииСБилетом
	
	СписокОбязательныхКолонок = ""
		+ "Ссылка,"            // <ДокументСсылка.ОперацияСБилетом>
		+ "Период,"            // <Дата>
		+ "Организация,"       // <СправочникСсылка.Организации>
		+ "Подразделение,"     // <Ссылка на справочник подразделений>
		+ "ВидОперации,"  	   // <ПеречислениеСсылка.ВидыОперацийСБилетами>
		+ "ВидДоговора,"  	   // <ПеречислениеСсылка.ВидыДоговоровКонтрагентов>
		+ "СчетРасчетов,"      // <ПланСчетовСсылка.Хозрасчетный>
		+ "СчетАвансов,"       // <ПланСчетовСсылка.Хозрасчетный>
		+ "Сотрудник,"  	   // <СправочникСсылка.ФизическиеЛица>
		+ "СотрудникЗамена,"   // <СправочникСсылка.ФизическиеЛица>
		+ "Билет,"  	   	   // <СправочникСсылка.Билеты>
		+ "БилетЗамена,"  	   // <СправочникСсылка.Билеты>
		+ "Контрагент,"  	   // <СправочникСсылка.Контрагенты>
		+ "ДоговорКонтрагента,"// <СправочникСсылка.ДоговорыКонтрагентов>
		+ "Сумма,"             // <Число,15,2>
		+ "СуммаВозврата,"     // <Число,15,2>
		+ "Штраф";             // <Число,15,2>
	
	Параметры.Вставить("ОписаниеОперации", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаОписаниеОперации, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

Процедура СформироватьДвиженияХозрасчетный(ТаблицаОписаниеОперации, Движения, Отказ) Экспорт 
	
	Если Не ЗначениеЗаполнено(ТаблицаОписаниеОперации) Тогда
		Возврат;
	КонецЕсли;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
	Параметры = ПодготовитьПараметрыХозрасчетный(ТаблицаОписаниеОперации);	
	ОписаниеОперации = Параметры.ОписаниеОперации[0];
	СчетУчетаБилетов = УчетКомандировок.СчетУчетаБилетов();
	
	// Операция Обмен одновременно списывает стоимость прежнего билета (Билет) и приходует новый билет (БилетЗамена).
	// Здесь выполним первую часть такой операции: спишем стоимость прежнего билета.
	Если ОписаниеОперации.ВидОперации = Перечисления.ВидыОперацийСБилетами.Обмен И ОписаниеОперации.СуммаВозврата > 0 Тогда
		
		Проводка = Движения.Хозрасчетный.Добавить();
			
		Проводка.Содержание  	= НСтр("ru='Возврат прежнего билета при обмене'");
		Проводка.СчетДт  		= ОписаниеОперации.СчетРасчетов;
		Проводка.СчетКт  		= СчетУчетаБилетов;
		Проводка.Сумма 			= ОписаниеОперации.СуммаВозврата;
		
		ЗаполнитьОбщиеРеквизитыПроводкиПоОперации(Проводка, ОписаниеОперации);
		ЗаполнитьСубконтоСчетаРасчетов(Проводка, "Дт", ОписаниеОперации);
		ЗаполнитьСубконтоСчетаБилетов(Проводка, "Кт", ОписаниеОперации.Сотрудник, ОписаниеОперации.Билет);
		
	КонецЕсли; 	
	
	СторонаУчетаБилета = "Дт";
	СторонаУчетаРасчетов = "Кт";
	
	// При возврате билета делаем обратные проводки
	Если ОписаниеОперации.ВидОперации = Перечисления.ВидыОперацийСБилетами.Возврат
		ИЛИ ОписаниеОперации.ВидОперации = Перечисления.ВидыОперацийСБилетами.ЗаменаВозврат Тогда
		
		СторонаУчетаБилета = "Кт";
		СторонаУчетаРасчетов = "Дт";
				
	КонецЕсли; 	
		
	Проводка = Движения.Хозрасчетный.Добавить();
	
	СодержаниеПроводки = НСтр("ru='Операция с билетом: %1'");
	
	Проводка.Содержание  	= СтрШаблон(СодержаниеПроводки, ОписаниеОперации.ВидОперации);
	Проводка.СчетДт  		= ?(СторонаУчетаБилета = "Дт", СчетУчетаБилетов, ОписаниеОперации.СчетРасчетов);
	Проводка.СчетКт  		= ?(СторонаУчетаБилета = "Дт", ОписаниеОперации.СчетРасчетов, СчетУчетаБилетов);
	Проводка.Сумма 			= ОписаниеОперации.Сумма;
	
	ЗаполнитьОбщиеРеквизитыПроводкиПоОперации(Проводка, ОписаниеОперации);
	ЗаполнитьСубконтоСчетаРасчетов(Проводка, СторонаУчетаРасчетов, ОписаниеОперации);
	
	// Для операции Обмен здесь выполним вторую часть: приходуем новый билет (БилетЗамена).
	// Сотрудник также может поменяться при обмене (СотрудникЗамена).
	// Для всех остальных операций формируем проводку по билету (Билет) и сотруднику (Сотрудник).
	Если ОписаниеОперации.ВидОперации = Перечисления.ВидыОперацийСБилетами.Обмен Тогда
		ЗаполнитьСубконтоСчетаБилетов(Проводка, СторонаУчетаБилета, ОписаниеОперации.СотрудникЗамена, ОписаниеОперации.БилетЗамена);
		Проводка.Содержание = НСтр("ru='Покупка нового билета при обмене'");
	Иначе	
		ЗаполнитьСубконтоСчетаБилетов(Проводка, СторонаУчетаБилета, ОписаниеОперации.Сотрудник, ОписаниеОперации.Билет);
	КонецЕсли;	
	
	// Учтем сумму штрафа при возврате билета
	Если ОписаниеОперации.ВидОперации = Перечисления.ВидыОперацийСБилетами.Возврат И ОписаниеОперации.Штраф > 0 Тогда
		
		Проводка = Движения.Хозрасчетный.Добавить();
			
		Проводка.Содержание  	= НСтр("ru='Возврат билета: штраф'");
		Проводка.СчетДт  		= ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
		Проводка.СчетКт  		= ОписаниеОперации.СчетРасчетов;
		Проводка.Сумма 			= ОписаниеОперации.Штраф;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"ПрочиеДоходыИРасходы", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ШтрафыПениНеустойки"));
			
		ЗаполнитьСубконтоСчетаРасчетов(Проводка, "Кт", ОписаниеОперации);
		
		ЗаполнитьОбщиеРеквизитыПроводкиПоОперации(Проводка, ОписаниеОперации);
					
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьОбщиеРеквизитыПроводкиПоОперации(Проводка, ОписаниеОперации)

	Проводка.Период      = ОписаниеОперации.Период;
	Проводка.Организация = ОписаниеОперации.Организация;
	
	СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
	
	// В проводке устанавливаем обособленное подразделение, указанное в шапке документа.
	// Это подразделение доступно только в КОРП.
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПодразделениям") И СвойстваСчетаДт.УчетПоПодразделениям Тогда
		Проводка.ПодразделениеДт = ОписаниеОперации.Подразделение;
	КонецЕсли;
			
	СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПодразделениям") И СвойстваСчетаКт.УчетПоПодразделениям Тогда
		Проводка.ПодразделениеКт = ОписаниеОперации.Подразделение;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСубконтоСчетаРасчетов(Проводка, СторонаУчетаРасчетов, ОписаниеОперации)

	БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СторонаУчетаРасчетов], Проводка["Субконто" + СторонаУчетаРасчетов],
		"Контрагенты", ОписаниеОперации.Контрагент);
	БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СторонаУчетаРасчетов], Проводка["Субконто" + СторонаУчетаРасчетов],
		"Договоры", ОписаниеОперации.ДоговорКонтрагента);
	БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СторонаУчетаРасчетов], Проводка["Субконто" + СторонаУчетаРасчетов],
		"ДокументыРасчетовСКонтрагентами", ОписаниеОперации.Ссылка);

КонецПроцедуры

Процедура ЗаполнитьСубконтоСчетаБилетов(Проводка, СторонаУчетаБилета, Сотрудник, Билет)

	БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СторонаУчетаБилета], Проводка["Субконто" + СторонаУчетаБилета],
		"РаботникиОрганизаций", Сотрудник);
		
	БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СторонаУчетаБилета], Проводка["Субконто" + СторонаУчетаБилета],
		"Билеты", Билет);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновления

// Процедура - обработчик обновления
// Находит операции с билетами, в которых не заполнены добавленные реквизиты взаиморасчетов
// (часть из них ранее были в справочнике билетов):
// - Контрагент
// - ДоговорКонтрагента
// - СпособЗачетаАвансов
//
// Параметры:
//  Параметры - Структура - параметры обработчика обновления.
//
Процедура ЗаполнитьРеквизитыВзаиморасчетов(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ОперацияСБилетом.Ссылка КАК Ссылка,
	|	ОперацияСБилетом.Дата КАК Дата,
	|	ОперацияСБилетом.Билет.УдалитьАгент КАК Контрагент,
	|	ОперацияСБилетом.Билет.УдалитьДоговорАгента КАК ДоговорКонтрагента
	|ИЗ
	|	Документ.ОперацияСБилетом КАК ОперацияСБилетом
	|ГДЕ
	|	ОперацияСБилетом.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И ОперацияСБилетом.Билет <> ЗНАЧЕНИЕ(Справочник.Билеты.ПустаяСсылка)
	|				И ОперацияСБилетом.Билет.УдалитьАгент <> ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.ПустаяСсылка)
	|			ИЛИ ОперацияСБилетом.СпособЗачетаАвансов = ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОперацияСБилетом.Дата УБЫВ";
	
	УстановитьПривилегированныйРежим(Истина);

	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектовОбработано = ОбъектовОбработано + 1;
		
		НачатьТранзакцию();
		
		Попытка
			// Блокируем объект от изменения другими сеансами.
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ОперацияСБилетом");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
			Если ДокументОбъект = Неопределено ИЛИ ЗначениеЗаполнено(ДокументОбъект.Контрагент) И ЗначениеЗаполнено(ДокументОбъект.СпособЗачетаАвансов) Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
						
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
				ДокументОбъект.Контрагент = Выборка.Контрагент;
				ДокументОбъект.ДоговорКонтрагента = Выборка.ДоговорКонтрагента;
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.СпособЗачетаАвансов) Тогда
				ДокументОбъект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
			КонецЕсли;	
			
			// Запись обработанного объекта (без перепроведения).
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедуре Документы.ОперацияСБилетом.ЗаполнитьРеквизитыВзаиморасчетов() не удалось обработать операцию с билетом по причине:
					|%1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.ОперацияСБилетом, Выборка.Ссылка, ТекстСообщения);
				
		КонецПопытки; 
		
	КонецЦикла;
		
	Если ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре Документы.ОперацияСБилетом.ЗаполнитьРеквизитыВзаиморасчетов() не удалось обработать операции с билетами: в %1 из %2 возникли ошибки'"),
				ПроблемныхОбъектов,
				ОбъектовОбработано);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.ОперацияСБилетом,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура Документы.ОперацияСБилетом.ЗаполнитьРеквизитыВзаиморасчетов() обработала очередную порцию операций с билетами: %1 документов'"), ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры	

// Функция проверяет, обработана ли операция с билетом процедурой обновления (см. ЗаполнитьРеквизитыВзаиморасчетов()).
//  Определена в свойстве ПроцедураПроверки соответствующего обработчика обновления.
//
// Параметры:
//  Параметры - Структура - см. документацию к БСП
// 
// Возвращаемое значение:
//   - Булево - если Истина, то можно редактировать и записывать данные, Ложь - данные недоступны, пока не будут обработаны процедурой обновления
//
Функция НеТребуетсяЗаполнятьРеквизитыВзаиморасчетов(Параметры) Экспорт
	
	Документ = Неопределено;
	
  	Если ТипЗнч(Параметры.Данные) = Тип("ДокументСсылка.ОперацияСБилетом") Тогда
    	Документ = Параметры.Данные;
	ИначеЕсли ТипЗнч(Параметры.Данные) = Тип("ДокументОбъект.ОперацияСБилетом")
		 ИЛИ ТипЗнч(Параметры.Данные) = Тип("ДанныеФормыСтруктура") Тогда
    	Документ = Параметры.Данные.Ссылка;
    КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОперацияСБилетом.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОперацияСБилетом КАК ОперацияСБилетом
	|ГДЕ
	|	ОперацияСБилетом.Ссылка = &Ссылка
	|	И (ОперацияСБилетом.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И ОперацияСБилетом.Билет <> ЗНАЧЕНИЕ(Справочник.Билеты.ПустаяСсылка)
	|				И ОперацияСБилетом.Билет.УдалитьАгент <> ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.ПустаяСсылка)
	|			ИЛИ ОперацияСБилетом.СпособЗачетаАвансов = ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.ПустаяСсылка))";

	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Запрос.Выполнить().Пустой();
		
КонецФункции

#КонецОбласти

#КонецЕсли