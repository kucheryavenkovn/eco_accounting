
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура ЗаполнитьРаботыНаСервере()
	
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	ОбъектЗначение.ЗаполнитьРаботы();
	ЗначениеВРеквизитФормы(ОбъектЗначение,"Объект");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМатериалыНаСервере()
	
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	ОбъектЗначение.ЗаполнитьМатериалы();
	ЗначениеВРеквизитФормы(ОбъектЗначение,"Объект");

КонецПроцедуры

&НаСервере
Процедура РассчитатьСтоимостьМатериаловНаСервере()
	
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	ОбъектЗначение.РассчитатьСтоимостьМатериалов();
	ЗначениеВРеквизитФормы(ОбъектЗначение,"Объект");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМатериалыПоТННаСервере()
	
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	ОбъектЗначение.ЗаполнитьМатериалыПоТН();
	ЗначениеВРеквизитФормы(ОбъектЗначение,"Объект");

КонецПроцедуры

&НаСервере
Процедура СформироватьДокументыПоступленияУслугНаСервере()
	
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	ОбъектЗначение.СформироватьДокументыПоступленияУслуг();
	ЗначениеВРеквизитФормы(ОбъектЗначение,"Объект");

КонецПроцедуры

&НаСервере
Процедура СоздатьДокументТННаСервере(ДанныеФормы)
	
	Документ = ДанныеФормыВЗначение(ДанныеФормы, Тип("ДокументОбъект.ТребованиеНакладная"));
	Документ.Заполнить(Неопределено);
	Документ.Организация = Объект.Организация;
	Документ.СчетЗатрат = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство;
	
	// Заполним табличу материалов
	Для Каждого СтрокаТЧ Из Объект.Материалы Цикл
		
		НоваяСтрока = Документ.Материалы.Добавить();
		НоваяСтрока.Номенклатура               = СтрокаТЧ.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения 		   = СтрокаТЧ.Номенклатура.ЕдиницаИзмерения;
		НоваяСтрока.Коэффициент      		   = 1;
		НоваяСтрока.Количество                 = СтрокаТЧ.Количество;
		НоваяСтрока.ОтражениеВУСН              = Перечисления.ОтражениеВУСН.Принимаются;
		НоваяСтрока.СтатьяЗатрат               = СтрокаТЧ.СтатьяЗатрат;
		Документы.ТребованиеНакладная.ЗаполнитьСчетаУчетаВТабличнойЧасти(Документ, "Материалы");
	КонецЦикла; 
	
	ЗначениеВДанныеФормы(Документ, ДанныеФормы);

КонецПроцедуры


&НаКлиенте
Процедура РассчитатьСумму(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные.Сумма = ТекущиеДанные.Цена * ТекущиеДанные.Количество;
	
КонецПроцедуры

&НаСервере
Функция ЗаявкаПриИзмененииСервер()

	Если ЗначениеЗаполнено(Объект.Заявка) Тогда
		ЗаполнитьЗначенияСвойств(Объект, Объект.Заявка, "ОбъектАренды, ЭлементОбъекта");
	КонецЕсли;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ТребованиеНакладная") Тогда
		Если Объект.ДокументыСписания.Количество() = 0 Тогда
			НоваяСтрока = Объект.ДокументыСписания.Добавить();
			НоваяСтрока.ТребованиеНакладная = ВыбранноеЗначение;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры  

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьПоЗаявке(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Заявка) Тогда
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(,, НСтр("ru = 'Заявка'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Заявка", "Объект", Отказ);
	КонецЕсли;
	
	Если Не Отказ Тогда
		Если Объект.Работы.Количество() > 0 Тогда
			Оповещение = Новый ОписаниеОповещения("СпроситьОбОчисткеТабЧасти", ЭтотОбъект, 1);
			ПоказатьВопрос(Оповещение, "Перед заполнением табличная часть будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет, "Предупреждение");
		Иначе
			ЗаполнитьРаботыНаСервере();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПлановымиРаботами(Команда)
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(,, НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Организация", "Объект", Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Заявка) Тогда
		ТекстСообщения = "В случае заполнения документа плановыми работами реквизит ""Заявка"" должнен быть пустым";
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, "Корректность", НСтр("ru = 'Заявка'"),,, ТекстСообщения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Заявка", "Объект", Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ОбъектАренды) Тогда
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(,, НСтр("ru = 'Объект аренды'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ОбъектАренды", "Объект", Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ЭлементОбъекта) Тогда
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(,, НСтр("ru = 'Элемент объекта'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ЭлементОбъекта", "Объект", Отказ);
	КонецЕсли;
	
	Если Не Отказ Тогда
		Если Объект.Работы.Количество() > 0 Тогда
			Оповещение = Новый ОписаниеОповещения("СпроситьОбОчисткеТабЧасти", ЭтотОбъект, 1);
			ПоказатьВопрос(Оповещение, "Перед заполнением табличная часть будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет, "Предупреждение");
		Иначе
			ЗаполнитьРаботыНаСервере();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДокументы(Команда)
	
	ЕстьПустыеКонтрагенты = Ложь;
	Для Каждого СтрокаТЧ Из Объект.Работы Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Подрядчик) Тогда
			ЕстьПустыеКонтрагенты = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьПустыеКонтрагенты Тогда
		
		ТекстВопроса = "Не для всех строк в табличной части заполнено поле ""Подрядчик"". 
						|Для таких строк документы поступления услуг сформированы не будут. 
						|Продолжить?";
		Оповещение = Новый ОписаниеОповещения("СпроситьОПустыхПоляхПодрядчика", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет, "Предупреждение");
		
	Иначе
		СформироватьДокументыЗавершение();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СпроситьОПустыхПоляхПодрядчика(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СформироватьДокументыЗавершение();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДокументыЗавершение()
	
	Если Модифицированность ИЛИ Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Оповещение = новый ОписаниеОповещения("СпроситьОЗаписиДокумента", ЭтотОбъект, 1);
		ПоказатьВопрос(Оповещение, "Автоматически сформировать документы поступления услуг можно только после записи документа. Записать?", РежимДиалогаВопрос.ДаНет);
		
	Иначе
		СформироватьДокументыПоступленияУслугНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпроситьОЗаписиДокумента(РезультатВопроса, Вариант) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если Записать() Тогда
			Если Вариант = 1 Тогда
				СформироватьДокументыПоступленияУслугНаСервере();
			ИначеЕсли Вариант = 2 Тогда
				ЗаполнитьПоТребованиямНакладнымЗавершение();	
			ИначеЕсли Вариант = 3 Тогда
				РассчитатьСтоимостьМатериаловНаСервере();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСпецификациям(Команда)
	
	Если Объект.Материалы.Количество()>0 Тогда
		Оповещение = Новый ОписаниеОповещения("СпроситьОбОчисткеТабЧасти", ЭтотОбъект, 2);
		ПоказатьВопрос(Оповещение, "Перед заполнением табличная часть будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет, "Предупреждение");
	Иначе
		ЗаполнитьМатериалыНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоТребованиямНакладным(Команда)
	
	Если Объект.ДокументыСписания.Количество() = 0 Тогда
		ТекстСообщения = "Для автоматического заполнения таблицы ""Материалы"" необходимо предварительно заполнить список требований-накладных";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ДокументыСписания", "Объект");
		Возврат;
	КонецЕсли;
	
	Если Модифицированность ИЛИ Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Оповещение = Новый ОписаниеОповещения("СпроситьОЗаписиДокумента", ЭтотОбъект, 2);
		ПоказатьВопрос(Оповещение, "Автоматически заполнить закладку ""Материалы"" можно только после записи документа. Записать?", РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ЗаполнитьПоТребованиямНакладнымЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоТребованиямНакладнымЗавершение()
	
	Если Объект.Материалы.Количество()>0 Тогда
		Оповещение = Новый ОписаниеОповещения("СпроситьОбОчисткеТабЧасти", ЭтотОбъект, 3);
		ПоказатьВопрос(Оповещение, "Перед заполнением табличная часть будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет, "Предупреждение");
	Иначе
		ЗаполнитьМатериалыПоТННаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпроситьОбОчисткеТабЧасти(РезультатВопроса, Вариант) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если Вариант = 1 Тогда
			Объект.Работы.Очистить();
			ЗаполнитьРаботыНаСервере();
		ИначеЕсли Вариант = 2 Тогда
			Объект.Материалы.Очистить();
			ЗаполнитьМатериалыНаСервере();
		ИначеЕсли Вариант = 3 Тогда
			Объект.Материалы.Очистить();
			ЗаполнитьМатериалыПоТННаСервере();
		ИначеЕсли Вариант = 4 Тогда
			Объект.ДокументыСписания.Очистить();
			СоздатьТребованиеНакладнуюЗавершение();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТребованиеНакладную(Команда)
	
	Если Объект.Материалы.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Сперва необходимо заполнить табличную часть ""Материалы""!'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.ДокументыСписания.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("СпроситьОбОчисткеТабЧасти", ЭтотОбъект, 4);
		ПоказатьВопрос(Оповещение, "Табличная часть ""Требования-накладные"" будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет, "Предупреждение");
	Иначе
		СоздатьТребованиеНакладнуюЗавершение();
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТребованиеНакладнуюЗавершение()
	
	Форма = ПолучитьФорму("Документ.ТребованиеНакладная.ФормаОбъекта",, ЭтаФорма);
	ДанныеФормы = Форма.Объект;
	СоздатьДокументТННаСервере(ДанныеФормы);
	КопироватьДанныеФормы(ДанныеФормы, Форма.Объект);
	Форма.ЗакрыватьПриВыборе = Ложь;
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСтоимостьПоТН(Команда)
	
	Если Объект.ДокументыСписания.Количество()  = 0 Тогда
		ТекстСообщения = "Для расчета себестоимости списанных материалов необходимо заполнить табличную часть ""Требования-накладные""";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ДокументыСписания", "Объект");
		Возврат;	
	КонецЕсли;
	
	Если Модифицированность ИЛИ Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Оповещение = Новый ОписаниеОповещения("СпроситьОЗаписиДокумента", ЭтотОбъект, 3);
		ПоказатьВопрос(Оповещение, "Автоматически рассчитать себестоимость списанных материалов можно только после записи документа. Записать?", РежимДиалогаВопрос.ДаНет);
		
	Иначе
		РассчитатьСтоимостьМатериаловНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

&НаКлиенте
Процедура ЗаявкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура();
	Если ЗначениеЗаполнено(Объект.ОбъектАренды) Тогда
		Отбор.Вставить("ОбъектАренды", Объект.ОбъектАренды);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ЭлементОбъекта) Тогда
		Отбор.Вставить("ЭлементОбъекта", Объект.ЭлементОбъекта);
	КонецЕсли;
	
	ОткрытьФорму("Документ.АР_ЗаявкаНаОбслуживание.ФормаВыбора", Новый Структура("Отбор", Отбор), Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Заявка) Тогда
		Возврат;
	КонецЕсли;	
	
	ЗаявкаПриИзмененииСервер();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ЧАСТЕЙ
 
&НаКлиенте
Процедура МатериалыЦенаПриИзменении(Элемент)
	
	РассчитатьСумму(Элементы.Материалы.ТекущиеДанные);
	 
КонецПроцедуры

&НаКлиенте
Процедура МатериалыКоличествоПриИзменении(Элемент)
	
	РассчитатьСумму(Элементы.Материалы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыЦенаПриИзменении(Элемент)
	
	РассчитатьСумму(Элементы.Работы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыКоличествоПриИзменении(Элемент)
	
	РассчитатьСумму(Элементы.Работы.ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
КонецПроцедуры


&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	
КонецПроцедуры

